class Solution {
	int[][] dp;
	int m, n;
	int minPathCost(int[][] grid, int[][] moveCost) {
		m = grid.length;
		n = grid[0].length;
		dp = new int[m][n];
		for (int[] arr: dp) {	
			Arrays.fill(arr,Integer.MAX_VALUE);
		}
		for (int i = 0; i < n; i++) {
			dp[0][i] = 0;
		}
		int last_cell = 0;
		for (int i = 0; i < m - 1; i++) {
			for (int j = 0; j < n; j++) {
				int val = grid[i][j];
				int[] cost = moveCost[val];
				for (int k = 0; k < n; k++) {
					if (dp[i + 1][k] > (dp[i][j] + cost[k])) {
						dp[i + 1][k] = dp[i][j] + cost[k];
					}
				}
			}
		}
		int min = Integer.MAX_VALUE;
		for (int i = 0; i < n; i++) {
			min = Math.min(min,dp[m - 1][i] + last_grid[m - 1][i]);
		}
		return min;
	}
}