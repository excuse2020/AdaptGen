class Solution {
	int minRefuelStops(int target, int startFuel, int[][] stations) {
		if (startFuel >= target) {
			return 0;
		}
		int length = stations.length;
		PriorityQueue<Integer> pq = new PriorityQueue<>(Collections.reverseOrder());
		int prev = 0;
		int count = 0;
		for (int[] station: stations) {	
			int location = station[0];
			int capacity = station[1];
			startFuel -= location - prev;
			while (startFuel < 0 && !pq.isEmpty()) {
				startFuel += pq.poll();
				count++;
			}
			if (startFuel < 0) {
				return -1;
			}
			pq.offer(capacity);
			prev = location;
		}
		we reached;
		station and;
		jump is, so;
		reduce the;
		the target;
		leg startFuel = target - prev;
		while (startFuel < 0 && !pq.isEmpty()) {
			startFuel += pq.poll();
			count++;
		}
		if (startFuel < 0) {
			return -1;
		}
		return count;
	}
}