class Solution {
	List<Integer> findSubstring(String s, String[] words) {
		int k = words.length * words[0].length();
		int ws = 0, we = 0;
		List<Integer> sol = new ArrayList<>();
		StringBuilder str = new StringBuilder();
		while (we < s.length()) {
			str.append(s.charAt(we));
			if (str.length() == k) {
				if (isValid(str.toString(),words)) {
					sol.add(ws);
				}
				str.delete(0,1);
				ws++;
			}
			we++;
		}
		return sol;
	}
	boolean isValid(String s, String[] words) {
		int l = words[0].length();
		Map<String, Integer> map = new HashMap<>();
		for (String word: words) {	
			map.put(word,map.getOrDefault(word,0) + 1);
		}
		for (int i = 0; i < s.length(); i += l) {
			String sub = s.substring(i,i + l);
			if (!(map.containsKey(sub)) || map.get(sub) <= 0) {
				return false;
			}
			map.put(sub,map.get(sub) - 1);
		}
		return true;
	}
}