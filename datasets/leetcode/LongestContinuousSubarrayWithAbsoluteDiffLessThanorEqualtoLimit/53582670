class Solution {
	int longestSubarray(int[] nums, int limit) {
		PriorityQueue<Integer> min = new PriorityQueue<>((a, b) -> {a - b});
		PriorityQueue<Integer> max = new PriorityQueue<>((a, b) -> {b - a});
		int i = 0;
		int j = 0;
		int maxy = Integer.MIN_VALUE;
		while (j < nums.length) {
			min.add(nums[j]);
			max.add(nums[j]);
			if (max.peek() - min.peek() > limit) {
				while (!max.isEmpty() && !min.isEmpty()) {
					max.remove(nums[i]);
					min.remove(nums[i]);
					i++;
				}
				j++;
			} 
			else {
				j++;
				maxy = Math.max(j - i,maxy);
			}
		}
		return maxy;
	}
}