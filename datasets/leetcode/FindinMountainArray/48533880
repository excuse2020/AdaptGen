class Solution {
	int findInMountainArray(int target, MountainArray arr) {
		int s = 0;
		int l = arr.length() - 1;
		int mid = (s + l) / 2;
		int k;
		int i;
		int j;
		while (s <= l) {
			mid = (l + s) / 2;
			if (mid == 0) {
				mid++;
			}
			i = arr.get(mid - 1);
			j = arr.get(mid);
			k = arr.get(mid + 1);
			if ((j > k) && (j > i)) {
				break;
			} 
			else if (k > j) {
				s = mid + 1;
			} 
			else {
				l = mid - 1;
			}
		}
		int left_mid = mid;
		s = 0;
		int n;
		while (s <= left_mid) {
			n = (left_mid + s) / 2;
			k = arr.get(n);
			if (k == target) {
				return (n);
			} 
			else if (k > target) {
				left_mid = n - 1;
			} 
			else {
				s = n + 1;
			}
		}
		int right_mid = mid;
		l = arr.length() - 1;
		while (right_mid <= l) {
			n = (right_mid + l) / 2;
			k = arr.get(n);
			if (k == target) {
				return n;
			} 
			else if (k < target) {
				l = n - 1;
			} 
			else {
				right_mid = n + 1;
			}
		}
		return -1;
	}
}