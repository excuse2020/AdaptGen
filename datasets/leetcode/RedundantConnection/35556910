class Solution {
	int ans = new int[2];
	int par = new int[1001];
	int rank = new int[1001];
	int find(int x) {
		if (par[x] == x) {
			return x;
		}
		int temp = find(par[x]);
		par[x] = temp;
		return temp;
	}
	int[] findRedundantConnection(int[][] edges) {
		for (int i = 0; i < par.length; i++) {
			par[i] = i;
		}
		for (int i = 0; i < edges.length; i++) {
			union(edges[i][0],edges[i][1]);
		}
		return ans;
	}
	void union(int x1, int x2) {
		int a = find(x1);
		int b = find(x2);
		if (a == b) {
			ans[0] = x1;
			ans[1] = x2;
		}
		if (rank[a] > rank[b]) {
			par[b] = a;
		} 
		else if (rank[b] > rank[a]) {
			par[a] = b;
		} 
		else {
			par[a] = b;
			rank[a]++;
		}
	}
}