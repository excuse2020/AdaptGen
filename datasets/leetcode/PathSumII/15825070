class Solution {
	void findans(TreeNode root, int targetSum, List<List<Integer>> outer, List<Integer> inner) {
		if (root == null) {
			return;
		}
		inner.add(root.val);
		if (root.left == null && root.right == null && root.val == targetSum) {
			outer.add(new ArrayList<>(inner));
		} 
		else {
			findans(root.left,targetSum - root.val,outer,inner);
			findans(root.right,targetSum - root.val,outer,inner);
		}
		inner.remove(inner.size() - 1);
	}
	List<List<Integer>> pathSum(TreeNode root, int targetSum) {
		List<List<Integer>> list = new ArrayList<>();
		List<Integer> inner = new ArrayList<>();
		findans(root,targetSum,list,inner);
		return list;
	}
}