class Solution {
	int rob(int[] nums) {
		int n = nums.length;
		if (n == 1) {
			return nums[0];
		}
		int take = solve(nums,0,n - 2);
		int skip = solve(nums,1,n - 1);
		return Math.max(take,skip);
	}
	int solve(int nums, int start, int end) {
		if (start > end) {
			return 0;
		}
		int n = end - start + 1;
		int dp = new int[n + 1];
		dp[0] = 0;
		dp[1] = nums[start];
		for (int i = 2; i <= n; i++) {
			int skip = dp[i - 1];
			int take = nums[start + i - 1] + dp[i - 2];
			dp[i] = Math.max(skip,take);
		}
		return dp[n];
	}
	int solve(int nums, int start, int end, int dp) {
		if (start > end) {
			return 0;
		}
		if (dp[start] != -1) {
			return dp[start];
		}
		int take = nums[start] + solve(nums,start + 2,end,dp);
		int skip = solve(nums,start + 1,end,dp);
		return dp[start] = Math.max(take,skip);
	}
}