class Solution {
	int binarySearch(int[] wVals, int key) {
		int n = wVals.length;
		int left = 0;
		int right = n - 1;
		int ans = n;
		while (left <= right) {
			int mid = (left + right) / 2;
			if (wVals[mid] > key) {
				ans = mid;
				right = mid - 1;
			} 
			else {
				left = mid + 1;
			}
		}
		return ans;
	}
	int f(String s) {
		int ans = 1;
		char c = s.charAt(0);
		int n = s.length();
		for (int i = 1; i < n; i++) {
			if (s.charAt(i) < c) {
				ans = 1;
				c = s.charAt(i);
			} 
			else if (s.charAt(i) == c) {
				ans++;
			}
		}
		return ans;
	}
	int[] numSmallerByFrequency(String[] queries, String[] words) {
		int qLen = queries.length;
		int wLen = words.length;
		int[] ans = new int[qLen];
		int[] qVals = new int[qLen];
		int[] wVals = new int[wLen];
		for (int i = 0; i < qLen; i++) {
			qVals[i] = f(queries[i]);
		}
		for (int i = 0; i < wLen; i++) {
			wVals[i] = f(words[i]);
		}
		Arrays.sort(wVals);
		for (int i = 0; i < qLen; i++) {
			int x = binarySearch(wVals,qVals[i]);
			ans[i] = wLen - x;
		}
		return ans;
	}
}