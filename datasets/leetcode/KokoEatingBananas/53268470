class Solution {
	boolean canEat(int k, int[] piles, int h) {
		long time = 0;
		for (int i = 0; i < piles.length; i++) {
			if (piles[i] > k) {
				time += (long) Math.ceil((double) piles[i] / k);
			} 
			else {
				time++;
			}
		}
		return time <= h ? true : false;
	}
	int minEatingSpeed(int[] piles, int h) {
		int totalBananas = 0;
		for (int i: piles) {	
			totalBananas += i;
		}
		int ans = Integer.MAX_VALUE;
		int min = 1, max = 1000000000;
		while (min <= max) {
			int mid = (min + max) / 2;
			if (canEat(mid,piles,h)) {
				ans = mid;
				max = mid - 1;
			} 
			else {
				min = mid + 1;
			}
		}
		return ans;
	}
}