class Solution {
	int ans = Integer.MIN_VALUE;
	int dfs(List<List<Integer>> adj, int node, String s) {
		int max1 = 0;
		int max2 = 0;
		for (int child: adj.get(node)) {	
			int maxchild = dfs(adj,child,s);
			if (s.charAt(child) != s.charAt(node)) {
				if (maxchild > max1) {
					max2 = max1;
					max1 = maxchild;
				} 
				else if (maxchild > max2) {
					max2 = maxchild;
				}
			}
		}
		ans = Math.max(max1 + max2,ans);
		return max1 + 1;
	}
	int longestPath(int[] parent, String s) {
		List<List<Integer>> adj = new ArrayList<>();
		for (int i = 0; i < parent.length; i++) {
			adj.add(new ArrayList<>());
		}
		for (int i = 1; i < parent.length; i++) {
			adj.get(parent[i]).add(i);
		}
		dfs(adj,0,s);
		return ans;
	}
}