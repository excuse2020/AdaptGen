class Solution {
	boolean dfs(char[][] matrix, String word, int i, int j, int count, boolean flag) {
		if (0 <= i && i <= matrix.length - 1 && 0 <= j && j <= matrix[0].length - 1) {
			if (matrix[i][j] == word.charAt(count) && flag[i][j] == false) {
				++count;
				if (count == word.length()) {
					return true;
				}
				flag[i][j] = true;
				if (dfs(matrix,word,i + 1,j,count,flag) || dfs(matrix,word,i - 1,j,count,flag)) {
					return true;
				}
				flag[i][j] = false;
			}
		}
		return false;
	}
	boolean hasPath(char[][] matrix, String word) {
		boolean flag = new boolean[matrix.length][matrix[0].length];
		for (int i = 0; i <= matrix.length - 1; ++i) {
			for (int j = 0; j <= matrix[0].length - 1; ++j) {
				if (dfs(matrix,word,i,j,0,flag) == true) {
					return true;
				}
			}
		}
		return false;
	}
}