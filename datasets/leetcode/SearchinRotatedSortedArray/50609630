class Solution {
	int binarySearch(int l, int r, int target, int[] nums) {
		while (l <= r) {
			int mid = l + (r - l) / 2;
			if (nums[mid] == target) {
				return mid;
			}
			if (nums[mid] > target) {
				r = mid - 1;
			} 
			else {
				l = mid + 1;
			}
		}
		return -1;
	}
	int findMin(int[] nums) {
		int l = 0, r = nums.length - 1;
		while (l < r) {
			int mid = (l + r) >>> 1;
			if (nums[mid] > nums[r]) {
				l = mid + 1;
			} 
			else {
				r = mid;
			}
		}
		return r;
	}
	int search(int[] nums, int target) {
		int min = findMin(nums);
		if (nums[min] == target) {
			return min;
		}
		if (min > 0 && nums[0] <= target && target <= nums[min - 1]) {
			return binarySearch(0,min - 1,target,nums);
		}
		if (nums[min] < target && target <= nums[nums.length - 1]) {
			return binarySearch(min,nums.length - 1,target,nums);
		}
		return -1;
	}
}