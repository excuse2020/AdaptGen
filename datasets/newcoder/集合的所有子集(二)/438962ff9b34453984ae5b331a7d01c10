class Solution {
	int len;
	ArrayList<ArrayList<Integer>> res = new ArrayList<>();
	boolean isContains(ArrayList<Integer> arrayList) {
		boolean bool = false;
		for (ArrayList tmpArrayList: res) {	
			if (isEquals(tmpArrayList,arrayList)) {
				bool = true;
				break;
			}
		}
		return bool;
	}
	boolean isEquals(ArrayList<Integer> arrayList1, ArrayList<Integer> arrayList2) {
		boolean bool = true;
		int len1 = arrayList1.size();
		int len2 = arrayList2.size();
		if (len1 != len2) {
			return false;
		}
		for (int i = 0; i < len1; i++) {
			if (arrayList1.get(i) != arrayList2.get(i)) {
				bool = false;
				break;
			}
		}
		return bool;
	}
	void process(int[] nums, int start, ArrayList<Integer> arrayList) {
		ArrayList<Integer> copyArrayList = new ArrayList<>();
		copyArrayList.addAll(arrayList);
		copyArrayList.sort(new ComparaInteger());
		if (!isContains(copyArrayList)) {
			res.add(copyArrayList);
		}
		if (start >= len) {
			return;
		}
		for (int i = start; i < len; i++) {
			arrayList.add(nums[i]);
			process(nums,i + 1,arrayList);
			arrayList.remove(arrayList.size() - 1);
		}
		return;
	}
	ArrayList<ArrayList<Integer>> subsets(int[] nums) {
		len = nums.length;
		ArrayList<Integer> arrayList = new ArrayList<>();
		process(nums,0,arrayList);
		res.sort(new ComparaArrayList());
		return res;
	}
	class ComparaArrayList {
		int compare(ArrayList<Integer> arrayList1, ArrayList<Integer> arrayList2) {
			int len1 = arrayList1.size();
			int len2 = arrayList2.size();
			int p1 = 0;
			int p2 = 0;
			while (p1 < len1 && p2 < len2) {
				if (arrayList1.get(p1) < arrayList2.get(p2)) {
					return -1;
				} 
				else if (arrayList1.get(p1) > arrayList2.get(p2)) {
					return 1;
				} 
				else {
					p1++;
					p2++;
				}
			}
			if (len1 < len2) {
				return -1;
			} 
			else if (len1 > len2) {
				return 1;
			} 
			else {
				return 0;
			}
		}
	}
	class ComparaInteger {
		int compare(Integer num1, Integer num2) {
			return num1 - num2;
		}
	}
}