class Solution {
	int[] minInterval(int[][] range, int[] q) {
		int[][] querIndex = new int[q.length][2];
		for (int i = 0; i < q.length; i++) {
			querIndex[i][0] = q[i];
			querIndex[i][1] = i;
		}
		quicksort(querIndex,0,querIndex.length - 1);
		quicksort(range,0,range.length - 1);
		int[] res = new int[q.length];
		PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> {a[0] - b[0]});
		int j = 0;
		for (int i = 0; i < querIndex.length; i++) {
			int pos = querIndex[i][0];
			while (j < range.length && range[j][0] <= pos) {
				pq.add(new int{range[j][1] - range[j][0] + 1, range[j][1]});
				j++;
			}
			while (!pq.isEmpty() && pq.peek()[1] < pos) {
				pq.remove();
			}
			if (!pq.isEmpty()) {
				res[querIndex[i][1]] = pq.peek()[0];
			} 
			else {
				res[querIndex[i][1]] = -1;
			}
		}
		return res;
	}
	void quicksort(int[][] points, int low, int high) {
		if (low < high) {
			int i = low;
			int j = high;
			int mid = (low + high) / 2;
			int pivot = points[mid][0];
			while (true) {
				while (points[i][0] < pivot) {
					i++;
				}
				while (points[j][0] > pivot) {
					j--;
				}
				if (i >= j) {
					break;
				}
				int[] temp = points[i];
				points[i] = points[j];
				points[j] = temp;
				i++;
				j--;
			}
			quicksort(points,low,j);
			quicksort(points,j + 1,high);
		}
	}
}