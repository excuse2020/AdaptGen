class Solution {
	int SumofNaturalNumbers(int n) {
		return n * (n + 1) / 2;
	}
	int tupleSameProduct(int[] nums) {
		int n = nums.length;
		int[][] arr = new int[n][n];
		HashMap<Integer, Integer> map = new HashMap<>();
		int start = 0;
		while (start < n) {
			for (int i = start + 1; i < n; i++) {
				int temp = nums[start] * nums[i];
				arr[start][i] = temp;
				map.put(temp,map.getOrDefault(temp,0) + 1);
			}
			start++;
		}
		int res = 0;
		for (Map.Entry<Integer, Integer> entry: map.entrySet()) {	
			int val = entry.getValue();
			if (val > 1) {
				res = res + 8 * SumofNaturalNumbers(val - 1);
			}
		}
		return res;
	}
}