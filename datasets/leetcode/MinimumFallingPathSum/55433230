class Solution {
	int minFallingPathSum(int[][] matrix) {
		int n = matrix.length;
		return tabulation(matrix,n);
	}
	int tabulation(int[][] matrix, int n) {
		int dp = new int[n][n];
		for (int j = 0; j < n; j++) {
			dp[0][j] = matrix[0][j];
		}
		for (int i = 1; i < n; i++) {
			for (int j = 0; j < n; j++) {
				int straight = matrix[i][j] + dp[i - 1][j];
				int leftDiagonal = matrix[i][j];
				if (j - 1 >= 0) {
					leftDiagonal += dp[i - 1][j - 1];
				} 
				else {
					leftDiagonal += (int) Math.pow(10,9);
				}
				int rightDiagonal = matrix[i][j];
				if (j + 1 < n) {
					rightDiagonal += dp[i - 1][j + 1];
				} 
				else {
					rightDiagonal += (int) Math.pow(10,9);
				}
				dp[i][j] = Math.min(straight,Math.min(leftDiagonal,rightDiagonal));
			}
		}
		int min = dp[n - 1][0];
		for (int j = 1; j < n; j++) {
			min = Math.min(min,dp[n - 1][j]);
		}
		return min;
	}
}