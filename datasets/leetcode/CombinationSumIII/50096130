class Solution {
	List<List<Integer>> combinationSum3(int k, int n) {
		List<List<Integer>> res = new ArrayList<>();
		LinkedList<Integer> list = new LinkedList<>();
		findCombineSum(list,res,1,n,k);
		return res;
	}
	void findCombineSum(LinkedList<Integer> list, List<List<Integer>> res, int curr, int n, int k) {
		if (curr < 10 && curr <= n && k > 0) {
			findCombineSum(list,res,curr + 1,n,k);
			list.offer(curr);
			n -= curr;
			k--;
			if (n == 0 && k == 0) {
				res.add(new LinkedList(list));
			} 
			else if (n > 0 && k > 0) {
				findCombineSum(list,res,curr + 1,n,k);
			}
			list.pollLast();
		}
	}
}