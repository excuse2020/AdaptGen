class Solution {
	int networkBecomesIdle(int[][] edges, int[] patience) {
		int res = 0, n = patience.length;
		int[] times = new int[n];
		Map<Integer, Set<Integer>> map = new HashMap<>();
		for (int i = 0; i < n; i++) {
			map.put(i,new HashSet<Integer>());
		}
		for (int[] edge: edges) {	
			map.get(edge[0]).add(edge[1]);
			map.get(edge[1]).add(edge[0]);
		}
		Queue<Integer> queue = new LinkedList<>();
		int step = 1;
		queue.offer(0);
		while (!queue.isEmpty()) {
			int size = queue.size();
			for (int i = 0; i < size; i++) {
				int cur = queue.poll();
				for (int next: map.get(cur)) {	
					if (times[next] == 0) {
						times[next] = step * 2;
						queue.offer(next);
					}
				}
			}
			step++;
		}
		for (int i = 1; i < n; i++) {
			int cur = 0;
			if (patience[i] >= times[i]) {
				cur = times[i];
			} 
			else if (times[i] % patience[i] == 0) {
				cur = (times[i] / patience[i] - 1) * patience[i] + times[i];
			} 
			else {
				cur = times[i] / patience[i] * patience[i] + times[i];
			}
			res = Math.max(res,cur);
		}
		return res + 1;
	}
}