class Solution {
	double Calculate(int a, int b, double[][] dp) {
		if (a <= 0 && b <= 0) {
			return 0.5;
		}
		if (a <= 0) {
			return 1;
		}
		if (b <= 0) {
			return 0;
		}
		if (dp[a][b] != -1.0) {
			return dp[a][b];
		}
		double prob = (double) (0.25) * (Calculate(a - 100,b,dp) + Calculate(a - 75,b - 25,dp));
		dp[a][b] = prob;
		return prob;
	}
	double soupServings(int n) {
		if (n > 5000) {
			return 1.0;
		}
		double[][] dp = new double[n + 1][n + 1];
		Arrays.stream(dp).forEach((row) -> {Arrays.fill(row,-1.0)});
		int a = n, b = n;
		return Calculate(a,b,dp);
	}
}