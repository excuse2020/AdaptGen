class Solution {
	double maxProbability(int n, int[][] edges, double[] succProb, int start, int end) {
		List<List<double[]>> Adj = new ArrayList();
		for (int i = 0; i < n; i++) {
			Adj.add(new ArrayList());
		}
		int index = 0;
		for (int[] edge: edges) {	
			Adj.get(edge[0]).add(new double{edge[1], succProb[index]});
			Adj.get(edge[1]).add(new double{edge[0], succProb[index]});
			index++;
		}
		double[] dp = new double[n];
		dp[start] = 1;
		Queue<Integer> que = new LinkedList();
		que.add(start);
		while (que.size() != 0) {
			double prob = dp[que.peek()];
			for (double[] adj: Adj.get(que.peek())) {	
				double ans = prob * adj[1];
				if (dp[(int)adj[0]] < ans) {
					dp[(int)adj[0]] = ans;
					que.add((int) adj[0]);
				}
			}
			que.poll();
		}
		return dp[end];
	}
}