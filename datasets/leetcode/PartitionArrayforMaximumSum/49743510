class Solution {
	int maxSum(int[] arr, int k, int start, int[] memo) {
		if (start >= arr.length) {
			return 0;
		}
		if (memo[start] >= 0) {
			return memo[start];
		}
		int ans = 0;
		int max = 0;
		for (int i = 0; i < k && start + i < arr.length; i++) {
			if (max < arr[start + i]) {
				max = arr[start + i];
			}
			int t = (i + 1) * max + maxSum(arr,k,start + i,memo);
			if (ans < t) {
				ans = t;
			}
		}
		memo[start] = ans;
		return ans;
	}
	int maxSumAfterPartitioning(int[] arr, int k) {
		int[] memo = new int[arr.length];
		Arrays.fill(memo,-1);
		return maxSum(arr,k,0,memo);
	}
}