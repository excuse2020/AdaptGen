class Solution {
	boolean isCompleteTree(TreeNode root) {
		if (root == null) {
			return true;
		}
		Queue<TreeNode> queue = new LinkedList<>();
		queue.add(root);
		boolean foundGapInLevel = false;
		while (!queue.isEmpty()) {
			int levelSize = queue.size();
			while (levelSize > 0) {
				TreeNode node = queue.poll();
				TreeNode left = node.left;
				TreeNode right = node.right;
				if (foundGapInLevel && (left != null || right != null)) {
					return false;
				}
				foundGapInLevel = (left == null || right == null);
				if (foundGapInLevel && (left == null && right != null)) {
					return false;
				}
				if (left != null) {
					queue.add(left);
				}
				if (right != null) {
					queue.add(right);
				}
				levelSize--;
			}
		}
		return true;
	}
}