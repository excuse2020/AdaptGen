class Solution {
	int seq = 0;
	boolean isCompleteTree(TreeNode root) {
		return solution1(root);
	}
	boolean levelOrder(TreeNode root) {
		Queue<TreeNode> queue = new LinkedList<>();
		queue.offer(root);
		TreeNode node;
		while (queue.peek() != null) {
			node = queue.poll();
			queue.offer(node.left);
			queue.offer(node.right);
		}
		while (!queue.isEmpty() && queue.peek() == null) {
			queue.poll();
		}
		return queue.isEmpty();
	}
	int postOrder(TreeNode root, int idx) {
		if (root == null) {
			return 0;
		}
		seq = Math.max(seq,idx);
		int leftCount = postOrder(root.left,2 * idx);
		int rightCount = postOrder(root.right,2 * idx + 1);
		return leftCount + rightCount;
	}
	boolean solution1(TreeNode root) {
		int count = postOrder(root,1);
		return count == seq;
	}
	boolean solution2(TreeNode root) {
		return levelOrder(root);
	}
}