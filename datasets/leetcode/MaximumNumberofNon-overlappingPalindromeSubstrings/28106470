class Solution {
	String s;
	String getModifiedString(String s, int N) {
		StringBuilder sb = new StringBuilder();
		for (int i = 0; i < N; i++) {
			sb.append("#");
			sb.append(s.charAt(i));
		}
		sb.append("#");
		return sb.toString();
	}
	int maxPalindromes(String s, int k) {
		int n = s.length();
		String str = getModifiedString(s,n);
		int len = (2 * n) + 1;
		int[] palindromeWidth = new int[len];
		int center = 0;
		int right = 0;
		for (int i = 0; i < len; i++) {
			int mirror = (2 * center) - i;
			if (i < right) {
				palindromeWidth[i] = Math.min(right - i,palindromeWidth[mirror]);
			}
			int end = i + (1 + palindromeWidth[i]);
			int start = i - (1 + palindromeWidth[i]);
			while (end < len && start >= 0 && str.charAt(start) == str.charAt(end)) {
				palindromeWidth[i]++;
				end++;
				start--;
			}
			if (i + palindromeWidth[i] > right) {
				center = i;
				right = i + palindromeWidth[i];
			}
		}
		int[] dp = new int[len];
		int i = 1;
		int minSize = k - 1;
	}
}