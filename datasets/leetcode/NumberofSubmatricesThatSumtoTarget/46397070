class Solution {
	int m;
	int n;
	int getArrayCount(int[][] matrix, int c1, int c2, int k) {
		int count = 0;
		int sum = 0;
		HashMap<Integer, Integer> hm = new HashMap<>();
		for (int i = 0; i < m; i++) {
			int val = matrix[i][c2] - (c1 > 0 ? matrix[i][c1 - 1] : 0);
			sum += val;
			if (sum == k) {
				count++;
			}
			if (hm.containsKey(sum - k)) {
				count += hm.get(sum - k);
			}
			hm.put(sum,hm.getOrDefault(sum,0) + 1);
		}
		return count;
	}
	int numSubmatrixSumTarget(int[][] matrix, int target) {
		m = matrix.length;
		n = matrix[0].length;
		for (int i = 0; i < m; i++) {
			for (int j = 1; j < n; j++) {
				matrix[i][j] += matrix[i][j - 1];
			}
		}
		int count = 0;
		for (int c1 = 0; c1 < n; c1++) {
			for (int c2 = c1; c2 < n; c2++) {
				count += getArrayCount(matrix,c1,c2,target);
			}
		}
		return count;
	}
}