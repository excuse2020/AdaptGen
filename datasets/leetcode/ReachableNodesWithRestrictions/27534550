class Solution {
	void dfs(ArrayList<Integer> adj_list, HashSet<Integer> rest, int v, boolean[] visited) {
		visited[v] = true;
		ListIterator<Integer> it = adj_list[v].listIterator();
		while (it.hasNext()) {
			int n = (int) it.next();
			if (visited[n] == false && rest.contains(n) == false) {
				dfs(adj_list,rest,n,visited);
			}
		}
	}
	int reachableNodes(int n, int[][] edges, int[] restricted) {
		int count = 0;
		ArrayList<Integer> adj_list = new ArrayList[n];
		HashSet<Integer> rest = new HashSet<>();
		for (int i: restricted) {	
			rest.add(i);
		}
		for (int i = 0; i < n; i++) {
			adj_list[i] = new ArrayList<Integer>();
		}
		for (int[] e: edges) {	
			adj_list[e[0]].add(e[1]);
			adj_list[e[1]].add(e[0]);
		}
		boolean[] visited = new boolean[n];
		dfs(adj_list,rest,0,visited);
		for (int i = 0; i < visited.length; i++) {
			if (visited[i] == true) {
				count++;
			}
		}
		return count;
	}
}