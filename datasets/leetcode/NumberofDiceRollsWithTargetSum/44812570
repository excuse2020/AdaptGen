class Solution {
	int M = (int) Math.pow(10,9) + 7;
	int numRollsToTarget(int n, int k, int target) {
		int[][] dp = new int[n][target + 1];
		int[] prefixSum = new int[target + 1];
		int i, j, sum = 0;
		for (i = 1; i <= target; i++) {
			if (i <= k) {
				dp[n - 1][i] = 1;
				sum += dp[n - 1][i];
			}
			prefixSum[i] = sum % M;
		}
		for (i = n - 2; i >= 0; i--) {
			sum = 0;
			int[] nextPrefix = new int[target + 1];
			for (j = 1; j <= target; j++) {
				int ways = 0;
				if (j - k >= 0) {
					ways = (prefixSum[j - 1] - prefixSum[j - k - 1] + M) % M;
				} 
				else {
					ways = prefixSum[j - 1] % M;
				}
				dp[i][j] = ways;
				sum = (sum + dp[i][j]) % M;
				nextPrefix[j] = sum;
			}
			for (int count = 1; count <= target; count++) {
				prefixSum[count] = nextPrefix[count];
			}
		}
		return dp[0][target];
	}
}