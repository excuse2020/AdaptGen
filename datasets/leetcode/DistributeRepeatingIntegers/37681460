class Solution {
	boolean canDistribute(int[] nums, int[] quantity) {
		Map<Integer, Integer> frequencyMap = new HashMap<>();
		for (int num: nums) {	
			frequencyMap.put(num,frequencyMap.getOrDefault(num,0) + 1);
		}
		List<Integer> frequencies = new ArrayList<>(frequencyMap.values());
		Arrays.sort(quantity);
		reverse(quantity);
		return distribute(frequencies,quantity,0);
	}
	boolean distribute(List<Integer> frequencies, int[] quantity, int index) {
		if (index == quantity.length) {
			return true;
		}
		int orderQuantity = quantity[index];
		for (int i = 0; i < frequencies.size(); i++) {
			int frequency = frequencies.get(i);
			if (frequency >= orderQuantity) {
				frequencies.set(i,frequency - orderQuantity);
				if (distribute(frequencies,quantity,index + 1)) {
					return true;
				}
				frequencies.set(i,frequency);
			}
		}
		return false;
	}
	void reverse(int[] array) {
		int left = 0, right = array.length - 1;
		while (left < right) {
			int temp = array[left];
			array[left] = array[right];
			array[right] = temp;
			left++;
			right--;
		}
	}
}