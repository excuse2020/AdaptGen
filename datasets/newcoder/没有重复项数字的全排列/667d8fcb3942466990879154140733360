class Solution {
	void dfs(int[] num, int len, int depth, Stack<Integer> path, boolean[] isUsed, ArrayList<ArrayList<Integer>> lists) {
		if (depth == len) {
			lists.add(new ArrayList<Integer>(path));
			return;
		} 
		else {
			for (int i = 0; i < len; i++) {
				if (isUsed[i]) {
					continue;
				}
				path.add(num[i]);
				isUsed[i] = true;
				dfs(num,len,depth + 1,path,isUsed,lists);
				isUsed[i] = false;
				path.pop();
			}
		}
	}
	ArrayList<ArrayList<Integer>> permute(int[] num) {
		int length = num.length;
		ArrayList<ArrayList<Integer>> lists = new ArrayList<>();
		if (length == 0) {
			return lists;
		}
		Stack<Integer> path = new Stack<>();
		boolean[] isUsed = new boolean[length];
		dfs(num,length,0,path,isUsed,lists);
		return lists;
	}
}