class Solution {
	int edge = 0;
	int nodes = 0;
	int countCompleteComponents(int n, int[][] edges) {
		ArrayList<Integer>[] adj = new ArrayList[n];
		for (int i = 0; i < n; i++) {
			adj[i] = new ArrayList<>();
		}
		int m = edges.length;
		for (int i = 0; i < m; i++) {
			adj[edges[i][0]].add(edges[i][1]);
			adj[edges[i][1]].add(edges[i][0]);
		}
		int cnt = 0;
		int[] vis = new int[n];
		for (int i = 0; i < n; i++) {
			if (vis[i] == 0) {
				dfs(adj,vis,i);
				if (nodes == 1 || (nodes * (nodes - 1) / 2) == edge / 2) {
					cnt++;
				}
				nodes = 0;
				edge = 0;
			}
		}
		return cnt;
	}
	void dfs(ArrayList<Integer>[] adj, int[] vis, int node) {
		vis[node] = 1;
		nodes++;
		for (int i = 0; i < adj[node].size(); i++) {
			edge++;
			if (vis[adj[node].get(i)] == 0) {
				dfs(adj,vis,adj[node].get(i));
			}
		}
	}
}