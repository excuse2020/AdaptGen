class Solution {
	int nonSpecialCount(int l, int r) {
		int special = 0;
		boolean[] prime = sieveOfEratosthenes((int) Math.sqrt(r));
		for (int i = 2; i < prime.length; i++) {
			if (!prime[i]) {
				int sq = i * i;
				if (l <= sq && sq <= r) {
					special++;
				}
			}
		}
		return r - l + 1 - special;
	}
	boolean[] sieveOfEratosthenes(int n) {
		boolean[] prime = new boolean[n + 1];
		for (int i = 2; i * i <= n; i++) {
			if (!prime[i]) {
				for (int j = i * i; j <= n; j += i) {
					prime[j] = true;
				}
			}
		}
		return prime;
	}
}