class Solution {
	int[] arr;
	int d;
	int[] dp;
	int maxJumps(int[] arr, int d) {
		this.d = d;
		this.arr = arr;
		this.dp = new int[arr.length];
		Arrays.fill(dp,-1);
		int res = 0;
		for (int i = 0; i < arr.length; i++) {
			res = Math.max(res,solve(i) + 1);
		}
		return res;
	}
	int solve(int index) {
		if (dp[index] != -1) {
			return dp[index];
		}
		int currVal = arr[index];
		int max = 0;
		for (int i = 1; i <= d && (index - i) >= 0; i++) {
			if (arr[index - i] >= currVal) {
				break;
			}
			max = Math.max(max,solve(index - i) + 1);
		}
		for (int i = 1; i <= d && (index + i) < arr.length; i++) {
			if (arr[index + i] >= currVal) {
				break;
			}
			max = Math.max(max,solve(index + i) + 1);
		}
		dp[index] = max;
		return max;
	}
}