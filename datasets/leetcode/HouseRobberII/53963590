class Solution {
	int rob(int[] nums) {
		int dp1 = new int[nums.length - 1];
		int dp2 = new int[nums.length - 1];
		int c1 = 0, c2 = 0;
		if (nums.length == 1) {
			return nums[0];
		}
		for (int i = 0; i < nums.length; i++) {
			if (i != 0) {
				dp1[c1++] = nums[i];
			}
			if (i != nums.length - 1) {
				dp2[c2++] = nums[i];
			}
		}
		return Math.max(rob1(dp1),rob1(dp2));
	}
	int rob1(int[] nums) {
		int prev = nums[0];
		int prev2 = 0;
		int pick, notPick;
		for (int i = 1; i < nums.length; i++) {
			pick = nums[i];
			if (i > 1) {
				pick += prev2;
			}
			notPick = prev;
			int curr_i = Math.max(pick,notPick);
			prev2 = prev;
			prev = curr_i;
		}
		return prev;
	}
}