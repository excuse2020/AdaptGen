class Solution {
	String removeDuplicates(String s, int k) {
		return removeDuplicates_stack(s,k);
	}
	String removeDuplicates_countArray(String s, int k) {
		int[] count = new int[s.length()];
		StringBuilder sb = new StringBuilder(s);
		count[0] = 1;
		for (int i = 1; i < sb.length(); ++i) {
			if (sb.charAt(i) != sb.charAt(i - 1)) {
				count[i] = 1;
			} 
			else {
				count[i] = count[i - 1] + 1;
				if (count[i] == k) {
					sb.delete(i + 1 - k,i + 1);
					i = Math.max(i - k,0);
				}
			}
		}
		return sb.toString();
	}
	String removeDuplicates_stack(String s, int k) {
		Deque<Integer> stack = new ArrayDeque<>(s.length());
		StringBuilder sb = new StringBuilder(s);
		for (int i = 0; i < sb.length(); i++) {
			if (i == 0 || sb.charAt(i) != sb.charAt(i - 1)) {
				stack.push(1);
			} 
			else {
				Integer top = stack.pop();
				++top;
				if (top == k) {
					sb.delete(i + 1 - k,i + 1);
					i = i - k;
				} 
				else {
					stack.push(top);
				}
			}
		}
		return sb.toString();
	}
}