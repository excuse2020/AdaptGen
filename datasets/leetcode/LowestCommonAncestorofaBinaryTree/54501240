class Solution {
	TreeNode firstNodeSeen = null;
	TreeNode p, q;
	TreeNode potentialAncestor = null;
	boolean inOrder(TreeNode node) {
		if (node == null) {
			return false;
		}
		if (inOrder(node.left)) {
			return true;
		}
		if (node.left == potentialAncestor) {
			potentialAncestor = node;
		}
		if (node.val == p.val || node.val == q.val) {
			if (firstNodeSeen == null) {
				firstNodeSeen = node;
				potentialAncestor = node;
			} 
			else {
				return true;
			}
		}
		if (inOrder(node.right)) {
			return true;
		}
		if (node.right == potentialAncestor) {
			potentialAncestor = node;
		}
		return false;
	}
	TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
		this.p = p;
		this.q = q;
		inOrder(root);
		return potentialAncestor;
	}
}