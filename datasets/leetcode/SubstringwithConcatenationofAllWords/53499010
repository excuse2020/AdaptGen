class Solution {
	List<Integer> findSubstring(String s, String[] words) {
		if (words[0].length() * words.length > s.length()) {
			return new ArrayList<>();
		}
		Map<String, Integer> word_frq = new HashMap<>();
		List<Integer> ans = new ArrayList<>();
		for (String str: words) {	
			word_frq.put(str,word_frq.getOrDefault(str,0) + 1);
		}
		int wordlen = words[0].length();
		for (int i = 0; i < wordlen; i++) {
			Map<String, Integer> frq = new HashMap<>();
			int begin = i, size = 0;
			for (int j = i; j <= s.length() - wordlen; j += wordlen) {
				String currentWord = s.substring(j,j + wordlen);
				if (word_frq.containsKey(currentWord)) {
					begin = (begin == -1) ? j : begin;
					frq.put(currentWord,frq.getOrDefault(currentWord,0) + 1);
					size++;
					if (size == words.length) {
						if (frq.equals(word_frq)) {
							ans.add(begin);
						}
						String leftWord = s.substring(begin,begin + wordlen);
						frq.put(leftWord,frq.get(leftWord) - 1);
						if (frq.get(leftWord) == 0) {
							frq.remove(leftWord);
						}
						begin += wordlen;
						size--;
					}
				} 
				else {
					begin = -1;
					size = 0;
					frq.clear();
				}
			}
		}
		return ans;
	}
}