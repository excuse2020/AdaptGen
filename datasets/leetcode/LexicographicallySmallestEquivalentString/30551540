class Solution {
	String smallestEquivalentString(String s1, String s2, String baseStr) {
		int n = s1.length();
		int m = baseStr.length();
		Map<Character, List<Character>> adj = new HashMap<>();
		for (int i = 0; i < n; i++) {
			char ch1 = s1.charAt(i);
			char ch2 = s2.charAt(i);
			if (!adj.containsKey(ch1)) {
				List<Character> list1 = new ArrayList<Character>();
				list1.add(ch2);
				adj.put(ch1,list1);
			} 
			else {
				List<Character> getlist1 = adj.get(ch1);
				getlist1.add(ch2);
				adj.put(ch1,getlist1);
			}
			if (!adj.containsKey(ch2)) {
				List<Character> list1 = new ArrayList<Character>();
				list1.add(ch1);
				adj.put(ch2,list1);
			} 
			else {
				List<Character> getlist1 = adj.get(ch2);
				getlist1.add(ch1);
				adj.put(ch2,getlist1);
			}
		}
		StringBuilder sb = new StringBuilder();
		for (int i = 0; i < m; i++) {
			char chval = baseStr.charAt(i);
			boolean visited = new boolean[26];
			char minchar = solevedfs(adj,chval,visited);
			sb.append(minchar);
		}
		return sb.toString();
	}
	Character solevedfs(Map<Character, List<Character>> adj, char chval, boolean visited) {
	}
}