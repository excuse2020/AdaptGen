class Solution {
	int findK(int[] arr1, int[] arr2, int k) {
		int len1 = arr1.length;
		int len2 = arr2.length;
		int index1 = 0, index2 = 0;
		int kv = 0;
		while (true) {
			if (index1 == len1) {
				return arr2[index2 + k - 1];
			}
			if (index2 == len2) {
				return arr1[index1 + k - 1];
			}
			if (k == 1) {
				return Math.min(arr1[index1],arr2[index2]);
			}
			int half = k / 2;
			int new1 = Math.min(index1 + half,len1) - 1;
			int new2 = Math.min(index2 + half,len2) - 1;
			int v1 = arr1[new1], v2 = arr2[new2];
			if (v1 <= v2) {
				k = k - (new1 - index1 + 1);
				index1 = new1 + 1;
			} 
			else {
				k = k - (new2 - index2 + 1);
				index2 = new2 + 1;
			}
		}
	}
	int findMedianinTwoSortedAray(int[] arr1, int[] arr2) {
		int len = arr1.length;
		return findK(arr1,arr2,len);
	}
}