class Solution {
	TreeLinkNode GetNext(TreeLinkNode pNode) {
		TreeLinkNode root = null;
		TreeLinkNode tmp = pNode;
		while (tmp != null) {
			root = tmp;
			tmp = tmp.next;
		}
		ArrayList<TreeLinkNode> list = new ArrayList();
		midorder(root,list);
		for (int i = 0; i < list.size(); i++) {
			if (list.get(i) == pNode && i + 1 != list.size()) {
				return list.get(i + 1);
			}
		}
		return null;
	}
	void midorder(TreeLinkNode root, ArrayList<TreeLinkNode> list) {
		if (root == null) {
			return;
		}
		midorder(root.left,list);
		list.add(root);
		midorder(root.right,list);
	}
}
class Solution {
	TreeLinkNode GetNext(TreeLinkNode pNode) {
		if (pNode == null) {
			return null;
		}
		if (pNode.right != null) {
			pNode = pNode.right;
			while (pNode.left != null) {
				pNode = pNode.left;
			}
			return pNode;
		}
		while (pNode.next != null) {
			TreeLinkNode root = pNode.next;
			if (root.left == pNode) {
				return root;
			}
			pNode = pNode.next;
		}
		return null;
	}
}