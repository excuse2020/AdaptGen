class Solution {
	int shortestPathBinaryMatrix(int[][] grid) {
		int n = grid.length;
		int m = n;
		if (grid[0][0] == 1 || grid[n - 1][n - 1] == 1) {
			return -1;
		}
		Queue<int[]> queue = new LinkedList<>();
		queue.add(new int{0, 0, 1});
		grid[0][0] = -1;
		while (!queue.isEmpty()) {
			int[] front = queue.remove();
			int i = front[0];
			int j = front[1];
			int dist = front[2];
			if (i == n - 1 && j == m - 1) {
				return dist;
			}
			if (i > 0 && grid[i - 1][j] == 0) {
				queue.add(new int{i - 1, j, dist + 1});
				grid[i - 1][j] = -1;
			}
			if (i < n - 1 && grid[i + 1][j] == 0) {
				queue.add(new int{i + 1, j, dist + 1});
				grid[i + 1][j] = -1;
			}
			if (j > 0 && grid[i][j - 1] == 0) {
				queue.add(new int{i, j - 1, dist + 1});
				grid[i][j - 1] = -1;
			}
			if (j < m - 1 && grid[i][j + 1] == 0) {
				queue.add(new int{i, j + 1, dist + 1});
				grid[i][j + 1] = -1;
			}
			if (i > 0 && j > 0 && grid[i - 1][j - 1] == 0) {
				queue.add(new int{i - 1, j - 1, dist + 1});
				grid[i - 1][j - 1] = -1;
			}
			if (i > 0 && j < m - 1 && grid[i - 1][j + 1] == 0) {
				queue.add(new int{i - 1, j + 1, dist + 1});
				grid[i - 1][j + 1] = -1;
			}
			if (i < n - 1 && j > 0 && grid[i + 1][j - 1] == 0) {
				queue.add(new int{i + 1, j - 1, dist + 1});
				grid[i + 1][j - 1] = -1;
			}
			if (i < n - 1 && j < m - 1 && grid[i + 1][j + 1] == 0) {
				queue.add(new int{i + 1, j + 1, dist + 1});
				grid[i + 1][j + 1] = -1;
			}
		}
		return -1;
	}
}