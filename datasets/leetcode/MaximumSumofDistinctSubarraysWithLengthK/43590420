class Solution {
	long maximumSubarraySum(int[] nums, int k) {
		HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
		long window_sum = 0, max_sum = 0;
		int n = nums.length;
		for (int i = 0; i < k; i++) {
			map.put(nums[i],map.getOrDefault(nums[i],0) + 1);
			window_sum += nums[i];
		}
		if (map.size() == k) {
			max_sum = window_sum;
		}
		for (int i = k; i < n; i++) {
			window_sum += nums[i] - nums[i - k];
			map.put(nums[i - k],map.get(nums[i - k]) - 1);
			if (map.get(nums[i - k]) == 0) {
				map.remove(nums[i - k]);
			}
			map.put(nums[i],map.getOrDefault(nums[i],0) + 1);
			if (map.size() == k) {
				max_sum = Math.max(max_sum,window_sum);
			}
		}
		return max_sum;
	}
}