class Solution {
	int calculate(String s) {
		Queue<String> queue = new ArrayDeque();
		Deque<Character> stack = new ArrayDeque();
		int len = s.length();
		boolean checkUnary = true;
		int i = 0;
		char c = s.charAt(i);
		if (Character.isWhitespace(c)) {
			continue;
		}
		checkUnary = false;
	}
	int evaluateRPN(Queue<String> queue) {
		Deque<Integer> numstack = new ArrayDeque();
		int first = 0, second = 0;
		while (!queue.isEmpty()) {
			String token = queue.poll();
			if (token.equals("+")) {
				second = numstack.pop();
				first = numstack.pop();
				numstack.push(first + second);
			} 
			else if (token.equals("-")) {
				second = numstack.pop();
				first = numstack.pop();
				numstack.push(first - second);
			} 
			else if (token.equals("*")) {
				second = numstack.pop();
				first = numstack.pop();
				numstack.push(first * second);
			} 
			else if (token.equals("/")) {
				second = numstack.pop();
				first = numstack.pop();
				numstack.push(first / second);
			} 
			else {
				numstack.push(Integer.valueOf(token));
			}
		}
		return numstack.pop();
	}
	int getPrecedence(char c) {
	}
}