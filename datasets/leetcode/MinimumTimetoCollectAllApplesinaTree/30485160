class Solution {
	int helper(int currnode, List<Boolean> hasApple, List<Integer> adjlist, boolean[] visited) {
		if (visited[currnode]) {
			return 0;
		}
		visited[currnode] = true;
		int sum = 0;
		for (int i = 0; i < adjlist[currnode].size(); i++) {
			sum += helper(adjlist[currnode].get(i),hasApple,adjlist,visited);
		}
		if (currnode == 0) {
			return sum;
		}
		if (hasApple.get(currnode) || sum > 0) {
			return 2 + sum;
		} 
		else {
			return 0;
		}
	}
	int minTime(int n, int[][] edges, List<Boolean> hasApple) {
		List<Integer> adjlist = new ArrayList[n];
		for (int i = 0; i < n; i++) {
			adjlist[i] = new ArrayList<>();
		}
		for (int i = 0; i < edges.length; i++) {
			adjlist[edges[i][0]].add(edges[i][1]);
			adjlist[edges[i][1]].add(edges[i][0]);
		}
		boolean[] visited = new boolean[n];
		return helper(0,hasApple,adjlist,visited);
	}
}