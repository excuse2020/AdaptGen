class Solution {
	int findInMountainArray(int target, MountainArray mountainArr) {
		int peak = peakIndexInMountainArray(mountainArr);
		int start = 0;
		int end = peak;
		int left = search(start,peak,mountainArr,target,true);
		int right = search(peak,mountainArr.length() - 1,mountainArr,target,false);
		if (left == -1) {
			return right;
		} 
		else {
			return left;
		}
	}
	int peakIndexInMountainArray(MountainArray arr) {
		int start = 0;
		int end = arr.length() - 1;
		while (start < end) {
			int mid = start + (end - start) / 2;
			int element = arr.get(mid);
			int element1 = arr.get(mid + 1);
			if (element < element1) {
				start = mid + 1;
			} 
			else if (element > element1) {
				end = mid;
			}
		}
		return start;
	}
	int search(int start, int end, MountainArray mountainArr, int target, boolean left) {
		while (start <= end) {
			int mid = start + (end - start) / 2;
			int element = mountainArr.get(mid);
			if (target == element) {
				return mid;
			}
			if (left) {
				if (target < element) {
					end = mid - 1;
				} 
				else if (target > element) {
					start = mid + 1;
				}
			} 
			else {
				if (target > element) {
					end = mid - 1;
				} 
				else if (target < element) {
					start = mid + 1;
				}
			}
		}
		return -1;
	}
}