class Solution {
	String pathToStart, pathToDest;
	String getDirections(TreeNode root, int startValue, int destValue) {
		pathFromRoot(root,startValue,destValue,new LinkedList<Character>());
		int i = 0, minDist = Math.min(pathToStart.length(),pathToDest.length());
		while (i < minDist && pathToStart.charAt(i) == pathToDest.charAt(i)) {
			i++;
		}
		pathToStart = pathToStart.substring(i).replaceAll("(L|R)","U");
		pathToDest = pathToDest.substring(i);
		return pathToStart + pathToDest;
	}
	void pathFromRoot(TreeNode root, int startValue, int destValue, Deque<Character> curPath) {
		if (root.val == startValue) {
			pathToStart = toString(curPath);
		}
		if (root.val == destValue) {
			pathToDest = toString(curPath);
		}
		if (pathToStart != null && pathToDest != null) {
			return;
		}
	}
	String toString(Deque<Character> path) {
		StringBuilder sb = new StringBuilder();
		path.forEach();
		return sb.toString();
	}
}