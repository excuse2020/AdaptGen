class Solution {
	List<List<Integer>> combinationSum2(int[] candidates, int target) {
		List<List<Integer>> set = new ArrayList();
		Arrays.sort(candidates);
		helper(set,candidates,target,0,new ArrayList());
		return set;
	}
	void helper(List<List<Integer>> ans, int[] candidates, int target, int index, List<Integer> li) {
		if (target == 0) {
			ans.add(new ArrayList<Integer>(li));
		} 
		else if (target > 0) {
			for (int i = index; i < candidates.length && candidates[i] <= target; i++) {
				if (i > index && candidates[i] == candidates[i - 1]) {
					continue;
				}
				li.add(candidates[i]);
				helper(ans,candidates,target - candidates[i],i + 1,li);
				li.remove(li.size() - 1);
			}
		}
	}
}