class Solution {
	List<List<Integer>> levelOrderBottom(TreeNode root) {
		List<List<Integer>> ans = new ArrayList<>();
		if (root == null) {
			return ans;
		}
		Queue<TreeNode> q = new LinkedList<>();
		List<Integer> ar = new ArrayList<>();
		q.add(root);
		q.add(new TreeNode(Integer.MAX_VALUE));
		while (q.size() > 0) {
			TreeNode cur = q.poll();
			if (cur.val == Integer.MAX_VALUE) {
				if (q.size() != 0) {
					ans.add(ar);
					ar = new ArrayList<>();
					q.add(new TreeNode(Integer.MAX_VALUE));
				} 
				else {
					ans.add(ar);
					break;
				}
			} 
			else {
				ar.add(cur.val);
				if (cur.left != null) {
					q.add(cur.left);
				}
				if (cur.right != null) {
					q.add(cur.right);
				}
			}
		}
		List<List<Integer>> ans1 = new ArrayList<>();
		for (int i = ans.size() - 1; i >= 0; i--) {
			ans1.add(ans.get(i));
		}
		return ans1;
	}
}