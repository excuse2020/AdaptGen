class Solution {
	int minCost(int n, int[] cuts) {
		int m = cuts.length;
		int cut = new int[m + 2];
		cut[0] = 0;
		cut[m + 1] = n;
		int dp = new int[m + 2][m + 2];
		for (int i = 0; i < dp.length; i++) {
			for (int j = 0; j < dp[i].length; j++) {
				dp[i][j] = 0;
			}
		}
		System.arraycopy(cuts,0,cut,1,cuts.length);
		Arrays.sort(cut);
		for (int i = m; i >= 1; i--) {
			for (int j = 1; j <= m; j++) {
				if (i > j) {
					continue;
				}
				int min = Integer.MAX_VALUE;
				for (int ind = i; ind <= j; ind++) {
					int cost = cut[j + 1] - cut[i - 1] + dp[i][ind - 1] + dp[ind + 1][j];
					min = Math.min(cost,min);
				}
				dp[i][j] = min;
			}
		}
		return dp[1][m];
	}
	int solve(int i, int j, int cut, int dp) {
		if (i > j) {
			return 0;
		}
		int min = Integer.MAX_VALUE;
		if (dp[i][j] != -1) {
			return dp[i][j];
		}
		for (int ind = i; ind <= j; ind++) {
			int cost = cut[j + 1] - cut[i - 1] + solve(i,ind - 1,cut,dp) + solve(ind + 1,j,cut,dp);
			min = Math.min(cost,min);
		}
		return dp[i][j] = min;
	}
}