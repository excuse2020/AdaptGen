class Solution {
	boolean canFinish(int numCourses, int[][] relations) {
		List<Integer>[] pres = new List[numCourses];
		for (int i = 0; i < numCourses; i++) {
			pres[i] = new ArrayList<>();
		}
		for (int[] relation: relations) {	
			pres[relation[0]].add(relation[1]);
		}
		boolean[] courseCache = new boolean[numCourses];
		for (int i = 0; i < numCourses; i++) {
			boolean[] visited = new boolean[numCourses];
			if (!dfs(pres,visited,i,courseCache)) {
				return false;
			}
		}
		return true;
	}
	boolean dfs(List<Integer>[] pres, boolean[] visited, int offset, boolean[] courseCache) {
		if (courseCache[offset]) {
			return true;
		}
		if (offset >= visited.length || visited[offset]) {
			return false;
		}
		visited[offset] = true;
		List<Integer> coursePres = pres[offset];
		for (int pre: coursePres) {	
			if (!dfs(pres,visited,pre,courseCache)) {
				return false;
			}
		}
		visited[offset] = false;
		courseCache[offset] = true;
		return true;
	}
}