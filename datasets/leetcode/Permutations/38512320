class Solution {
	int n;
	void backtrack(List<Integer> listSoFar, List<List<Integer>> res, int[] nums, boolean[] used) {
		if (listSoFar.size() == nums.length) {
			res.add(new ArrayList<>(listSoFar));
			return;
		}
		for (int i = 0; i < nums.length; i++) {
			if (used[i]) {
				continue;
			}
			int num = nums[i];
			used[i] = true;
			listSoFar.add(num);
			backtrack(listSoFar,res,nums,used);
			listSoFar.remove(listSoFar.size() - 1);
			used[i] = false;
		}
	}
	List<List<Integer>> permute(int[] nums) {
		List<List<Integer>> res = new ArrayList<>();
		n = nums.length;
		boolean[] used = new boolean[n];
		backtrack(new ArrayList<>(),res,nums,used);
		return res;
	}
}