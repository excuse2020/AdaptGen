class Solution {
	int rob(int[] nums) {
		if (nums.length == 1) {
			return nums[0];
		}
		if (nums.length == 2) {
			return Math.max(nums[0],nums[1]);
		}
		int[] temp1 = new int[nums.length - 1];
		int[] temp2 = new int[nums.length - 1];
		for (int i = 0; i < nums.length; i++) {
			if (i != 0) {
				temp1[i - 1] = nums[i];
			}
			if (i != nums.length - 1) {
				temp2[i] = nums[i];
			}
		}
		int[] dp1 = new int[nums.length - 1];
		Arrays.fill(dp1,-1);
		int[] dp2 = new int[nums.length - 1];
		Arrays.fill(dp2,-1);
		int n = temp1.length;
		return Math.max(solve(n - 1,dp1,temp1),solve(n - 1,dp2,temp2));
	}
	int solve(int index, int[] dp, int[] nums) {
		if (index == 0) {
			return nums[index];
		}
		if (index < 0) {
			return 0;
		}
		if (dp[index] != -1) {
			return dp[index];
		}
		int take = nums[index] + solve(index - 2,dp,nums);
		int notTake = solve(index - 1,dp,nums);
		return dp[index] = Math.max(take,notTake);
	}
}