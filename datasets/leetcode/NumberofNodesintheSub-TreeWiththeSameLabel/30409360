class Solution {
	int[] charcount = new int[26];
	int[] countSubTrees(int n, int[][] edges, String labels) {
		Map<Integer, List<Integer>> map = new HashMap<>();
		Map<Integer, Boolean> visited = new HashMap<>();
		for (int[] arr: edges) {	
			if (map.containsKey(arr[0])) {
				map.get(arr[0]).add(arr[1]);
			} 
			else {
				List<Integer> list = new ArrayList<>();
				list.add(arr[1]);
				map.put(arr[0],list);
			}
			if (map.containsKey(arr[1])) {
				map.get(arr[1]).add(arr[0]);
			} 
			else {
				List<Integer> list = new ArrayList<>();
				list.add(arr[0]);
				map.put(arr[1],list);
			}
		}
		int ans = new int[n];
		recur(map,labels,visited,0,ans);
		return ans;
	}
	void recur(Map<Integer, List<Integer>> tree, String labels, Map<Integer, Boolean> visited, int idx, int[] ans) {
		if (visited.getOrDefault(idx,false)) {
			return;
		}
		visited.put(idx,true);
		int count = 1;
		List<Integer> list = tree.get(idx);
		int total;
	}
}