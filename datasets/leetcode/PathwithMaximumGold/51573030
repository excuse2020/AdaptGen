class Solution {
	int dfs(int[][] grid, int i, int j) {
		if (i < 0 || i >= grid.length || j < 0 || j >= grid[0].length || grid[i][j] == 0) {
			return 0;
		}
		int originalValue = grid[i][j];
		grid[i][j] = 0;
		int x = 0;
		x = Math.max(x,dfs(grid,i - 1,j));
		x = Math.max(x,dfs(grid,i + 1,j));
		x = Math.max(x,dfs(grid,i,j - 1));
		x = Math.max(x,dfs(grid,i,j + 1));
		grid[i][j] = originalValue;
		return originalValue + x;
	}
	int getMaximumGold(int[][] grid) {
		int ans = 0;
		for (int i = 0; i < grid.length; i++) {
			for (int j = 0; j < grid[0].length; j++) {
				ans = Math.max(ans,dfs(grid,i,j));
			}
		}
		return ans;
	}
}