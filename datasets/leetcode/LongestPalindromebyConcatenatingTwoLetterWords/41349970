class Solution {
	int longestPalindrome(String[] words) {
		int len = 0;
		Map<String, Integer> map = new HashMap<>();
		for (String word: words) {	
			String key = new StringBuffer(word).reverse().toString();
			int count = map.getOrDefault(key,0);
			if (word.charAt(0) == word.charAt(1)) {
				map.put(word,count + 1);
			} 
			else if (count > 0) {
				len += 4;
				map.put(key,count - 1);
			} 
			else {
				map.put(word,map.getOrDefault(word,0) + 1);
			}
		}
		boolean hasOddCount = false;
		for (Map.Entry<String, Integer> entry: map.entrySet()) {	
			String word = entry.getKey();
			int count = entry.getValue();
			if (word.charAt(0) == word.charAt(1)) {
				if (count % 2 == 0) {
					len += count * 2;
				} 
				else {
					len += (count - 1) * 2;
					hasOddCount = true;
				}
			}
		}
		return len + (hasOddCount ? 2 : 0);
	}
}