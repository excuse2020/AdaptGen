class Solution {
	boolean getPath(TreeNode root, TreeNode node, List<TreeNode> list) {
		if (root == null) {
			return false;
		}
		list.add(root);
		if (root == node) {
			return true;
		}
		if (getPath(root.left,node,list) || getPath(root.right,node,list)) {
			return true;
		}
		list.remove(list.size() - 1);
		return false;
	}
	TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
		List<TreeNode> list1 = new ArrayList<>();
		List<TreeNode> list2 = new ArrayList<>();
		getPath(root,p,list1);
		getPath(root,q,list2);
		int i = 0;
		while (i < list1.size() && i < list2.size() && list1.get(i) == list2.get(i)) {
			i++;
		}
		return list1.get(i - 1);
	}
}