class Solution {
	int garbageCollection(String[] garbage, int[] travel) {
		int totalTime = 0;
		totalTime += (1 * garbage[0].length());
		for (int i = 1; i < garbage.length; i++) {
			totalTime += (1 * garbage[i].length());
			totalTime += (3 * travel[i - 1]);
		}
		boolean g = garbage[garbage.length - 1].contains("G");
		boolean p = garbage[garbage.length - 1].contains("P");
		boolean m = garbage[garbage.length - 1].contains("M");
		for (int i = garbage.length - 1; i >= 1; i--) {
			if (!g) {
				g = garbage[i].contains("G");
			}
			if (!p) {
				p = garbage[i].contains("P");
			}
			if (!m) {
				m = garbage[i].contains("M");
			}
			if (p && m) {
				break;
			}
			if (!g) {
				totalTime -= travel[i - 1];
			}
			if (!p) {
				totalTime -= travel[i - 1];
			}
			if (!m) {
				totalTime -= travel[i - 1];
			}
		}
		return totalTime;
	}
}