class Solution {
	int maxArea(int h, int w, int[] horizontalCuts, int[] verticalCuts) {
		Arrays.sort(horizontalCuts);
		Arrays.sort(verticalCuts);
		long maxh = horizontalCuts[0], maxv = verticalCuts[0];
		int n1 = horizontalCuts.length, n2 = verticalCuts.length;
		if (h - horizontalCuts[n1 - 1] > maxh) {
			maxh = h - horizontalCuts[n1 - 1];
		}
		if (w - verticalCuts[n2 - 1] > maxv) {
			maxv = w - verticalCuts[n2 - 1];
		}
		for (int i = 1; i < n1; i++) {
			if (horizontalCuts[i] - horizontalCuts[i - 1] > maxh) {
				maxh = horizontalCuts[i] - horizontalCuts[i - 1];
			}
		}
		for (int i = 1; i < n2; i++) {
			if (verticalCuts[i] - verticalCuts[i - 1] > maxv) {
				maxv = verticalCuts[i] - verticalCuts[i - 1];
			}
		}
		return (int) ((maxh * maxv) % ((int) Math.pow(10,9) + 7));
	}
}