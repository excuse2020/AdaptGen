class Solution {
	int dfs(int row, int col, int[][] grid) {
		if (row < 0 || row >= grid.length || col < 0 || col >= grid[0].length) {
			return 0;
		}
		if (grid[row][col] == 0) {
			return 0;
		}
		int gold = grid[row][col];
		grid[row][col] = 0;
		int max = 0;
		max = Math.max(max,dfs(row - 1,col,grid));
		max = Math.max(max,dfs(row + 1,col,grid));
		max = Math.max(max,dfs(row,col - 1,grid));
		max = Math.max(max,dfs(row,col + 1,grid));
		grid[row][col] = gold;
		return gold + max;
	}
	int getMaximumGold(int[][] grid) {
		int m = grid.length;
		int n = grid[0].length;
		int res = 0;
		for (int i = 0; i < m; i++) {
			for (int j = 0; j < n; j++) {
				res = Math.max(res,dfs(i,j,grid));
			}
		}
		return res;
	}
}