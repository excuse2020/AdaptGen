class Solution {
	long[] maximumSegmentSum(int[] nums, int[] removeQueries) {
		int n = nums.length;
		long[] result = new long[n];
		long[] prefixSum = new long[n + 1];
		for (int i = 0; i < n; i++) {
			prefixSum[i + 1] = prefixSum[i] + nums[i];
		}
		TreeMap<int[], Long> ranges = new TreeMap<>(new Comparator<int[]>());
		ranges.put(new int{0, n - 1},prefixSum[n]);
		TreeMap<Long, Integer> sums = new TreeMap<>();
		sums.put(prefixSum[n],1);
		for (int i = 0; i < n; i++) {
			int node = removeQueries[i];
			int[] rangeToBeRemoved = ranges.floorKey(new int{node});
			Long sum = ranges.get(rangeToBeRemoved);
			int f = sums.get(sum);
			if (f == 1) {
				sums.remove(sum);
			} 
			else {
				sums.put(sum,f - 1);
			}
			ranges.remove(rangeToBeRemoved);
			int l = rangeToBeRemoved[0];
			int r = rangeToBeRemoved[1];
			long newSum = 0;
			if (l == node && r != node) {
				newSum = prefixSum[r + 1] - prefixSum[l + 1];
				ranges.put(new int{l + 1, r},newSum);
				sums.put(newSum,sums.getOrDefault(newSum,0) + 1);
			} 
			else if (r == node && l != node) {
				newSum = prefixSum[r] - prefixSum[l];
				ranges.put(new int{l, r - 1},newSum);
				sums.put(newSum,sums.getOrDefault(newSum,0) + 1);
			} 
			else if (node > l && node < r) {
				newSum = prefixSum[node] - prefixSum[l];
				ranges.put(new int{l, node - 1},newSum);
				sums.put(newSum,sums.getOrDefault(newSum,0) + 1);
				newSum = prefixSum[r + 1] - prefixSum[node + 1];
				ranges.put(new int{node + 1, r},newSum);
				sums.put(newSum,sums.getOrDefault(newSum,0) + 1);
			}
			if (sums.size() != 0) {
				result[i] = sums.lastKey();
			} 
			else {
				result[i] = 0;
			}
		}
		return result;
	}
}