class Solution {
	Map<Integer, Integer> depthSumMap = new HashMap<>();
	Map<TreeNode, Integer> nodeSumMap = new HashMap<>();
	void helper(TreeNode root, int depth) {
		if (root == null) {
			return;
		}
		if (root.left != null) {
			nodeSumMap.merge(root,root.left.val,);
		}
		if (root.right != null) {
			nodeSumMap.merge(root,root.right.val,);
		}
		depthSumMap.merge(depth,root.val,);
		helper(root.left,depth + 1);
		helper(root.right,depth + 1);
	}
	TreeNode replaceValueInTree(TreeNode root) {
		helper(root,0);
		root.val = 0;
		solutioner(root,0);
		return root;
	}
	void solutioner(TreeNode root, int depth) {
		if ((root.left == null) && (root.right == null)) {
			return;
		}
		int newVal = depthSumMap.get(depth + 1) - nodeSumMap.get(root);
		if (root.left != null) {
			root.left.val = newVal;
			solutioner(root.left,depth + 1);
		}
		if (root.right != null) {
			root.right.val = newVal;
			solutioner(root.right,depth + 1);
		}
	}
}