class Solution {
	int count;
	int[] parent;
	int[] rank;
	int find(int x) {
		if (parent[x] == x) {
			return x;
		}
		int sl = find(parent[x]);
		parent[x] = sl;
		return sl;
	}
	int regionsBySlashes(String[] grid) {
		int n = grid.length;
		int dots = n + 1;
		parent = new int[dots * dots];
		rank = new int[dots * dots];
		count = 1;
		for (int i = 0; i < parent.length; i++) {
			parent[i] = i;
			rank[i] = 1;
		}
		for (int i = 0; i < dots; i++) {
			for (int j = 0; j < dots; j++) {
				if (i == 0 || j == 0 || i == dots - 1 || j == dots - 1) {
					int cellno = i * dots + j;
					if (cellno != 0) {
						union(0,cellno);
					}
				}
			}
		}
		int i = 0;
		char[] ch = grid[i].toCharArray();
		int j = 0;
	}
	void union(int x, int y) {
		int slx = find(x);
		int sly = find(y);
		if (slx != sly) {
			if (rank[slx] < rank[sly]) {
				parent[slx] = sly;
			} 
			else if (rank[slx] > rank[sly]) {
				parent[sly] = slx;
			} 
			else {
				parent[slx] = sly;
				rank[sly]++;
			}
		} 
		else {
			count++;
		}
	}
}