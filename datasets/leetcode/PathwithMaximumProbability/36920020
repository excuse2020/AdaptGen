class Solution {
	double dp;
	double max;
	void dfs(int start, int end, HashMap<Integer, ArrayList<double[]>> hm, double prob, boolean vis, double dp) {
		if (start == end) {
			max = Math.max(prob,max);
			return;
		}
		vis[start] = true;
		if (hm.containsKey(start)) {
			for (int nbrIdx = 0; nbrIdx < hm.get(start).size(); nbrIdx++) {
				int nbr = (int) hm.get(start).get(nbrIdx)[0];
				double nbrProb = prob * hm.get(start).get(nbrIdx)[1];
				if (dp[nbr] < nbrProb && !vis[nbr]) {
					dp[nbr] = nbrProb;
					dfs(nbr,end,hm,nbrProb,vis,dp);
				}
			}
		}
		vis[start] = false;
		return;
	}
	double maxProbability(int n, int[][] edges, double[] succProb, int start, int end) {
		max = 0;
		HashMap<Integer, ArrayList<double[]>> hm = new HashMap<>();
		for (int i = 0; i < edges.length; i++) {
			int e = edges[i];
			hm.putIfAbsent(e[0],new ArrayList<>());
			hm.putIfAbsent(e[1],new ArrayList<>());
			hm.get(e[0]).add(new double{e[1], succProb[i]});
			hm.get(e[1]).add(new double{e[0], succProb[i]});
		}
		boolean vis = new boolean[n];
		dp = new double[n];
		dp[start] = 1;
		dfs(start,end,hm,1,vis,dp);
		return max;
	}
}