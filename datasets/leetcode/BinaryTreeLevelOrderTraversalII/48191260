class Solution {
	List<List<Integer>> bfs(TreeNode root) {
		List<List<Integer>> res = new ArrayList<>();
		List<TreeNode> curr = new ArrayList<>();
		curr.add(root);
		while (!curr.isEmpty()) {
			List<TreeNode> next = new ArrayList<>();
			List<Integer> row = new ArrayList<>();
			for (TreeNode n: curr) {	
				if (n.left != null) {
					next.add(n.left);
				}
				if (n.right != null) {
					next.add(n.right);
				}
				row.add(n.val);
			}
			res.add(row);
			curr = next;
		}
		return res;
	}
	List<List<Integer>> levelOrderBottom(TreeNode root) {
		if (root == null) {
			return new ArrayList<>();
		}
		List<List<Integer>> res = bfs(root);
		reverse(res);
		return res;
	}
	void reverse(List<List<Integer>> arr) {
		int x = 0;
		int y = arr.size() - 1;
		while (x < y) {
			List<Integer> a = arr.get(x);
			arr.set(x,arr.get(y));
			arr.set(y,a);
			x++;
			y--;
		}
	}
}