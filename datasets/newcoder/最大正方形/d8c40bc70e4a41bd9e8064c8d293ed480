class Solution {
	boolean isAllOne(char[][] matrix, int r1, int c1, int r2, int c2) {
		for (int i = r1; i <= r2; i++) {
			for (int j = c1; j <= c2; j++) {
				if (matrix[i][j] == '0') {
					return false;
				}
			}
		}
		return true;
	}
	int solve(char[][] matrix) {
		if (matrix == null || matrix.length == 0 || matrix[0].length == 0) {
			return -1;
		}
		int maxArea = 0;
		int rows = matrix.length;
		int cols = matrix[0].length;
		for (int i = 0; i < rows; i++) {
			for (int j = 0; j < cols; j++) {
				if (matrix[i][j] == '1') {
					int colSide = 0;
					for (int k = j + 1; k < cols; k++) {
						if (matrix[i][k] == '1') {
							colSide++;
						} 
						else {
							break;
						}
					}
					int rowSide = 0;
					for (int k = i + 1; k < rows; k++) {
						if (matrix[k][j] == '1') {
							rowSide++;
						} 
						else {
							break;
						}
					}
					int side = Math.min(rowSide,colSide);
					for (int k = 1; k <= side; k++) {
						if (isAllOne(matrix,i,j,i + k,j + k)) {
							maxArea = Math.max(maxArea,(k + 1) * (k + 1));
						}
					}
					if (maxArea == 0) {
						maxArea = 1;
					}
				}
			}
		}
		return maxArea;
	}
}