class Solution {
	boolean[] isArraySpecial(int[] nums, int[][] queries) {
		int n = nums.length;
		int m = queries.length;
		boolean[] result = new boolean[m];
		int[] parityTransitions = new int[n - 1];
		for (int i = 0; i < n - 1; i++) {
			parityTransitions[i] = (nums[i] % 2 != nums[i + 1] % 2) ? 1 : 0;
		}
		int[] prefixSum = new int[n];
		for (int i = 1; i < n; i++) {
			prefixSum[i] = prefixSum[i - 1] + parityTransitions[i - 1];
		}
		for (int i = 0; i < m; i++) {
			int from = queries[i][0];
			int to = queries[i][1];
			int subarrayLength = to - from + 1;
			int transitions = prefixSum[to] - prefixSum[from];
			result[i] = (transitions == subarrayLength - 1);
		}
		return result;
	}
}