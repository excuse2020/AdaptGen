class Solution {
	int semiOrderedPermutation(int[] nums) {
		if (nums[0] == 1 && nums[nums.length - 1] == nums.length) {
			return 0;
		}
		int left = 0;
		int right = nums.length - 1;
		boolean first = nums[0] == 1;
		boolean last = nums[nums.length - 1] == nums.length;
		for (int i = 0; i < nums.length; i++) {
			if (!first && nums[i] == 1) {
				int j = i;
				left += i;
				while (j > 0) {
					int temp = nums[j - 1];
					nums[j - 1] = 1;
					nums[j] = temp;
					j--;
				}
				first = true;
				i--;
			}
			if (!last && nums[i] == nums.length) {
				left += (nums.length - 1) - i;
				int j = i;
				while (j < nums.length - 1) {
					int temp = nums[j + 1];
					nums[j + 1] = nums.length;
					nums[j] = temp;
					j++;
				}
				last = true;
				i--;
			}
			if (last && first) {
				return left;
			}
		}
		return left;
	}
}