class Solution {
	int maxValue = 0;
	void dfs(int V, int n, int[][] vw, int index, int sumV, int sumW) {
		if (index == n) {
			return;
		}
		dfs(V,n,vw,index + 1,sumV,sumW);
		if (sumV + vw[index][0] <= V) {
			maxValue = maxValue < sumW + vw[index][1] ? sumW + vw[index][1] : maxValue;
		}
		dfs(V,n,vw,index + 1,sumV + vw[index][0],sumW + vw[index][1]);
	}
	int knapsack(int V, int n, int[][] vw) {
		int[] dp = new int[V + 1];
		Arrays.fill(dp,0);
		for (int i = 1; i <= n; i++) {
			for (int j = V; j >= vw[i - 1][0]; j--) {
				dp[j] = Math.max(dp[j],dp[j - vw[i - 1][0]] + vw[i - 1][1]);
			}
		}
		return dp[V];
	}
}