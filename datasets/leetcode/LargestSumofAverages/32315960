class Solution {
	double largeSum(int idx, int[] psum, int k, Double[][] cache) {
		if (idx == psum.length) {
			return Double.MIN_VALUE;
		}
		if (cache[idx][k] != null) {
			return cache[idx][k];
		}
		if (k == 1) {
			double sum = psum[psum.length - 1] - (idx > 0 ? psum[idx - 1] : 0);
			return (double) sum / (double) (psum.length - idx);
		}
		double max = Double.MIN_VALUE;
		for (int i = idx; i < psum.length; i++) {
			double current = psum[i] - (idx > 0 ? psum[idx - 1] : 0);
			current = (double) current / (double) (i - idx + 1);
			max = Math.max(max,current + largeSum(i + 1,psum,k - 1,cache));
		}
		cache[idx][k] = max;
		return max;
	}
	double largestSumOfAverages(int[] nums, int k) {
		int[] psum = new int[nums.length];
		psum[0] = nums[0];
		for (int i = 1; i < nums.length; i++) {
			psum[i] = psum[i - 1] + nums[i];
		}
		return largeSum(0,psum,k,new Double[nums.length][k + 1]);
	}
}