class Solution {
	int[] countSubTrees(int n, int[][] edges, String labels) {
		List<List<Integer>> adj = new ArrayList<>();
		for (int i = 0; i < n; i++) {
			adj.add(new ArrayList());
		}
		for (int[] edge: edges) {	
			adj.get(edge[0]).add(edge[1]);
			adj.get(edge[1]).add(edge[0]);
		}
		int[] ans = new int[n];
		boolean[] visited = new boolean[n];
		dfs(0,adj,ans,labels,visited);
		return ans;
	}
	int[] dfs(int node, List<List<Integer>> adj, int[] ans, String labels, boolean[] visited) {
		visited[node] = true;
		int[] countArray = new int[26];
		for (int edge: adj.get(node)) {	
			if (visited[edge] == false) {
				int[] adjCount = dfs(edge,adj,ans,labels,visited);
				for (int i = 0; i < 26; i++) {
					countArray[i] += adjCount[i];
				}
			}
		}
	}
}