class Solution {
	int atMostNGivenDigitSet(String[] digits, int n) {
		long res = 0l;
		int[] values = go(n);
		res += go(values.length - 1,digits.length);
		long grad = (long) Math.pow(digits.length,values.length);
		char[] array = new char[digits.length];
		for (int i = 0; i < digits.length; i++) {
			array[i] = digits[i].charAt(0);
		}
		int i = 0, j = values.length - 1;
		boolean isBreak = true;
		int count = 0;
		int k = 0;
	}
	int[] go(int n) {
		String temp = String.valueOf(n);
		int[] numbers = new int[temp.length()];
		int i = 0;
	}
	int go(int power, int base) {
		int res = 0;
		for (int i = 1; i <= power; i++) {
			res += (int) Math.pow(base,i);
		}
		return res;
	}
}