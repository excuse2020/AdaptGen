class Solution {
	int minimumCost(int m, int n, int[] horizontalCut, int[] verticalCut) {
		Arrays.sort(horizontalCut);
		Arrays.sort(verticalCut);
		reverse(horizontalCut);
		reverse(verticalCut);
		int hIndex = 0, vIndex = 0;
		int hPieces = 1, vPieces = 1;
		int totalCost = 0;
		while (hIndex < horizontalCut.length && vIndex < verticalCut.length) {
			if (horizontalCut[hIndex] > verticalCut[vIndex]) {
				totalCost += horizontalCut[hIndex] * vPieces;
				hPieces++;
				hIndex++;
			} 
			else {
				totalCost += verticalCut[vIndex] * hPieces;
				vPieces++;
				vIndex++;
			}
		}
		while (hIndex < horizontalCut.length) {
			totalCost += horizontalCut[hIndex] * vPieces;
			hPieces++;
			hIndex++;
		}
		while (vIndex < verticalCut.length) {
			totalCost += verticalCut[vIndex] * hPieces;
			vPieces++;
			vIndex++;
		}
		return totalCost;
	}
	void reverse(int[] arr) {
		if (arr.length > 0) {
			int left = 0, right = arr.length - 1;
			while (left < right) {
				int temp = arr[left];
				arr[left] = arr[right];
				arr[right] = temp;
				left++;
				right--;
			}
		}
	}
}