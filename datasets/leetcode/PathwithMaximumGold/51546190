class Solution {
	int findMax(int i, int j, int[][] grid) {
		if (i < 0 || j < 0 || i >= grid.length || j >= grid[0].length || grid[i][j] < 0) {
			return 0;
		}
		int ans = grid[i][j];
		grid[i][j] = -1;
		int up = findMax(i + 1,j,grid);
		int down = findMax(i - 1,j,grid);
		int right = findMax(i,j + 1,grid);
		int left = findMax(i,j - 1,grid);
		grid[i][j] = ans;
		ans += Math.max(Math.max(up,down),Math.max(right,left));
		return ans;
	}
	int getMaximumGold(int[][] grid) {
		int rows = grid.length;
		int cols = grid[0].length;
		int maxSum = 0;
		for (int i = 0; i < rows; i++) {
			for (int j = 0; j < cols; j++) {
				if (grid[i][j] > 0) {
					maxSum = Math.max(maxSum,findMax(i,j,grid));
				}
			}
		}
		return maxSum;
	}
}