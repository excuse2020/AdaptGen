class Solution {
	void merge(int[] arr, int l, int m, int r) {
		int llen = m - l + 1;
		int rlen = r - m;
		int[] left = new int[llen];
		int[] right = new int[rlen];
		for (int i = 0; i < llen; i++) {
			left[i] = arr[l + i];
		}
		for (int j = 0; j < rlen; j++) {
			right[j] = arr[m + 1 + j];
		}
		int il = 0;
		int jr = 0;
		int k = l;
		while (il < llen && jr < rlen) {
			if (left[il] < right[jr]) {
				arr[k] = left[il];
				il++;
				k++;
			} 
			else {
				arr[k] = right[jr];
				jr++;
				k++;
			}
		}
		while (il < llen) {
			arr[k] = left[il];
			il++;
			k++;
		}
		while (jr < rlen) {
			arr[k] = right[jr];
			jr++;
			k++;
		}
	}
	void mergeSort(int[] arr, int l, int r) {
		if (l < r) {
			int mid = (l + r) / 2;
			mergeSort(arr,l,mid);
			mergeSort(arr,mid + 1,r);
			merge(arr,l,mid,r);
		}
	}
	int[] sortArray(int[] nums) {
		mergeSort(nums,0,nums.length - 1);
		return nums;
	}
}