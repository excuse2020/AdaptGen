class Solution {
	void backTrack(List<List<Integer>> list, int[] nums, int start) {
		if (start == nums.length) {
			list.add(toList(nums));
		} 
		else {
			for (int i = start; i < nums.length; i++) {
				swap(i,start,nums);
				backTrack(list,nums,start + 1);
				swap(start,i,nums);
			}
		}
	}
	List<List<Integer>> permute(int[] nums) {
		List<List<Integer>> list = new ArrayList<>();
		backTrack(list,nums,0);
		return list;
	}
	void swap(int i, int j, int[] nums) {
		int temp = nums[i];
		nums[i] = nums[j];
		nums[j] = temp;
	}
	List<Integer> toList(int[] nums) {
		List<Integer> res = new ArrayList<>();
		for (int i: nums) {	
			res.add(i);
		}
		return res;
	}
}