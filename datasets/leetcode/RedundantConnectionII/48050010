class Solution {
	int[] arr;
	void dfs2(int removed, int root, HashMap<Integer, List<Integer>> map, HashSet<Integer> set, int[][] edges) {
		if (!map.containsKey(root)) {
			return;
		}
		for (int index: map.get(root)) {	
			if (index == removed) {
				continue;
			}
			int to = edges[index][1];
			set.add(to);
			dfs2(removed,to,map,set,edges);
		}
	}
	int[] findRedundantDirectedConnection(int[][] edges) {
		int len = edges.length;
		int[] degree = new int[len + 1];
		HashMap<Integer, List<Integer>> map = new HashMap<>();
		int i = 0;
		for (int[] a: edges) {	
			int from = a[0];
			int to = a[1];
			degree[to]++;
			map.putIfAbsent(from,new ArrayList<>());
			map.get(from).add(i++);
		}
		int v = 0;
		for (i = 0; i < len + 1; i++) {
			if (degree[i] == 0) {
				v = i;
			}
		}
		if (v > 0) {
			for (i = edges.length - 1; i > -1; i--) {
				int to = edges[i][1];
				if (degree[to] > 1) {
					HashSet<Integer> set = new HashSet<>();
					set.add(v);
					dfs2(i,v,map,set,edges);
					if (set.size() == len) {
						return edges[i];
					}
				}
			}
		} 
		else {
			for (i = edges.length - 1; i > -1; i--) {
				int to = edges[i][1];
				HashSet<Integer> set = new HashSet<>();
				set.add(to);
				dfs2(i,to,map,set,edges);
				if (set.size() == len) {
					return edges[i];
				}
			}
		}
		return null;
	}
}