class Solution {
	int val(int n, int dp, int t) {
		if (n == 0) {
			if (t == 0) {
				return 0;
			}
			return 1;
		}
		if (dp[n][t] != -1) {
			return dp[n][t];
		}
		int tp = (int) (Math.sqrt(n));
		int k = 1;
		if (t == 1) {
			for (int i = 1; i <= tp; i++) {
				k &= val(n - (int) Math.pow(i,2),dp,0);
			}
			return dp[n][t] = k;
		} 
		else {
			int k1 = 0;
			for (int i = 1; i <= tp; i++) {
				k1 |= val(n - (int) Math.pow(i,2),dp,1);
			}
			return dp[n][t] = k1;
		}
	}
	boolean winnerSquareGame(int n) {
		int dp = new int[n + 1][2];
		for (int i = 0; i <= n; i++) {
			Arrays.fill(dp[i],-1);
		}
		int flag = val(n,dp,0);
		if (flag == 1) {
			return true;
		} 
		else {
			return false;
		}
	}
}