class Solution {
	List<List<Integer>> graph;
	int id;
	int[] res;
	boolean valid = true;
	int[] visited;
	void dfs(int i) {
		visited[i] = 1;
		for (int j: graph.get(i)) {	
			if (visited[j] == 0) {
				dfs(j);
			} 
			else if (visited[i] == 1) {
				valid = false;
				return;
			}
		}
		visited[i] = 2;
		res[id--] = i;
	}
	int[] findOrder(int[][] prerequisites, int n) {
		graph = new ArrayList<>();
		for (int i = 0; i < n; i++) {
			graph.add(new ArrayList<>());
		}
		for (int[] cur: prerequisites) {	
			graph.get(cur[1]).add(cur[0]);
		}
		visited = new int[n];
		res = new int[n];
		id = n - 1;
		for (int i = 0; i < n && valid; i++) {
			if (visited[i] == 0) {
				dfs(i);
			}
		}
		return valid ? res : new int[0];
	}
}