class Solution {
	int minAbsDifference(int[] nums, int goal) {
		int n = nums.length;
		TreeSet<Long> left = new TreeSet<>();
		int mid = n / 2;
		for (int i = 0; i < (1 << mid); i++) {
			long sum = 0;
			for (int j = 0; j < mid; j++) {
				if (((i >> j) & 1) == 1) {
					sum += nums[j];
				}
			}
			left.add(sum);
		}
		long ans = Long.MAX_VALUE;
		for (int i = 0; i < (1 << (n - mid)); i++) {
			long sum = 0;
			for (int j = mid; j < n; j++) {
				if (((i >> (j - mid)) & 1) == 1) {
					sum += nums[j];
				}
			}
			var lb = left.floor(goal - sum);
			if (lb != null) {
				ans = Math.min(ans,goal - lb);
			}
			var ub = left.ceiling(goal - sum);
			if (ub != null) {
				ans = Math.min(ans,ub + sum - goal);
			}
		}
		return (int) ans;
	}
}