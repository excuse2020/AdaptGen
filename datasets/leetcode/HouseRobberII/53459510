class Solution {
	int circular(int[] dp, int[] nums, int index) {
		if (index < 0) {
			return 0;
		}
		if (index == 0) {
			return nums[0];
		}
		if (dp[index] != -1) {
			return dp[index];
		}
		int pick = nums[index] + circular(dp,nums,index - 2);
		int noPick = circular(dp,nums,index - 1);
		dp[index] = Math.max(pick,noPick);
		return dp[index];
	}
	int rob(int[] nums) {
		if (nums.length == 1) {
			return nums[0];
		}
		if (nums.length == 2) {
			return Math.max(nums[0],nums[1]);
		}
		int[] a1 = new int[nums.length - 1];
		int[] a2 = new int[nums.length - 1];
		for (int i = 0; i < nums.length - 1; i++) {
			a1[i] = nums[i];
		}
		for (int i = 1; i < nums.length; i++) {
			a2[i - 1] = nums[i];
		}
		int[] dp1 = new int[a1.length];
		int[] dp2 = new int[a2.length];
		Arrays.fill(dp1,-1);
		Arrays.fill(dp2,-1);
		int ans1 = circular(dp1,a1,a1.length - 1);
		int ans2 = circular(dp2,a2,a2.length - 1);
		return Math.max(ans1,ans2);
	}
}