class Solution {
	long minimumCost(int m, int n, int[] horizontalCut, int[] verticalCut) {
		Arrays.sort(verticalCut);
		Arrays.sort(horizontalCut);
		long cost = 0;
		int hCut = 1, vCut = 1;
		int vIdx = verticalCut.length - 1, hIdx = horizontalCut.length - 1;
		while (vIdx >= 0 && hIdx >= 0) {
			if (verticalCut[vIdx] > horizontalCut[hIdx]) {
				cost += (hCut * verticalCut[vIdx]);
				vCut++;
				vIdx--;
			} 
			else {
				cost += (vCut * horizontalCut[hIdx]);
				hCut++;
				hIdx--;
			}
		}
		while (vIdx >= 0) {
			cost += (hCut * verticalCut[vIdx--]);
		}
		while (hIdx >= 0) {
			cost += (vCut * horizontalCut[hIdx--]);
		}
		return cost;
	}
}