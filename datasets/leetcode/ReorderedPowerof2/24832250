class Solution {
	int getdigits(int n) {
		int count = 0;
		while (n > 0) {
			n = n / 10;
			count++;
		}
		return count;
	}
	boolean reorderedPowerOf2(int N) {
		int len = getdigits(N);
		for (int i = 1; i < Integer.MAX_VALUE; i *= 2) {
			int d = getdigits(i);
			if (d > len) {
				break;
			}
			if (d == len) {
				if (sameDigits(i,N)) {
					return true;
				}
			}
		}
		return false;
	}
	boolean sameDigits(int N, int M) {
		int n = N;
		int dp = new int[10];
		while (n > 0) {
			dp[n % 10]++;
			n = n / 10;
		}
		n = M;
		while (n > 0) {
			dp[n % 10]--;
			n = n / 10;
		}
		for (int i = 0; i < 10; i++) {
			if (dp[i] != 0) {
				return false;
			}
		}
		return true;
	}
}