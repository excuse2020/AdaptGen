class Solution {
	int[] dp;
	int longestSubsequence(int[] a, int d) {
		HashMap<Integer, ArrayList<Integer>> h = new HashMap<>();
		int n = a.length;
		dp = new int[n];
		int ans = 0;
		for (int i = 0; i < n; i++) {
			ArrayList<Integer> l = h.getOrDefault(a[i],new ArrayList<Integer>());
			l.add(i);
			h.put(a[i],l);
		}
		for (int i = 0; i < n; i++) {
			ans = Math.max(solve(h,a[i] + d,d,i),ans);
		}
		return ans;
	}
	int solve(HashMap<Integer, ArrayList<Integer>> h, int val, int d, int idx) {
		if (dp[idx] != 0) {
			return dp[idx];
		}
		if (h.containsKey(val)) {
			int u = upperBound(h.get(val),idx);
			if (u > idx) {
				return dp[idx] = solve(h,val + d,d,u) + 1;
			}
		}
		return dp[idx] = 1;
	}
	int upperBound(ArrayList<Integer> a, int val) {
		int l = 0;
		int r = a.size();
		while (l < r) {
			int mid = (l + r) / 2;
			if (a.get(mid) > val) {
				r = mid;
			} 
			else {
				l = mid + 1;
			}
		}
		return r == a.size() ? -1 : a.get(r);
	}
}