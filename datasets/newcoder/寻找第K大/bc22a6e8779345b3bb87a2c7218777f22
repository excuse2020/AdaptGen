class Solution {
	void buildHeap(int[] nums, int n) {
		for (int i = n / 2 - 1; i >= 0; i--) {
			sift(nums,i,n - 1);
		}
	}
	int findKth(int[] a, int n, int K) {
		buildHeap(a,n);
		for (int i = n - 1; i > n - K; i--) {
			swap(a,0,i);
			sift(a,0,i - 1);
		}
		return a[0];
	}
	void sift(int[] nums, int low, int high) {
		int i = low;
		int j = 2 * i + 1;
		int pivot = nums[i];
		while (j <= high) {
			if (j < high && nums[j] < nums[j + 1]) {
				j++;
			}
			if (nums[j] > pivot) {
				nums[i] = nums[j];
				i = j;
				j = 2 * i + 1;
			} 
			else {
				break;
			}
		}
		nums[i] = pivot;
	}
	void swap(int[] nums, int i, int j) {
		int temp = nums[i];
		nums[i] = nums[j];
		nums[j] = temp;
	}
}