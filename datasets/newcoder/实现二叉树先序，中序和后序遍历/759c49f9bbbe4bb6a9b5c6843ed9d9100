class Solution {
	List<Integer> afterEachList = new ArrayList<Integer>();
	List<Integer> inOrderEachList = new ArrayList<Integer>();
	List<Integer> preEachList = new ArrayList<Integer>();
	List<Integer> afterEach(TreeNode root) {
		if (root == null) {
			return afterEachList;
		}
		afterEach(root.left);
		afterEach(root.right);
		afterEachList.add(root.val);
		return afterEachList;
	}
	int[] convertToInt(List<Integer> list) {
		if (list == null || list.size() == 0) {
			return null;
		}
		int[] result = new int[list.size()];
		for (int i = 0; i < list.size(); i++) {
			result[i] = list.get(i);
		}
		return result;
	}
	List<Integer> inOrderEach(TreeNode root) {
		if (root == null) {
			return inOrderEachList;
		}
		inOrderEach(root.left);
		inOrderEachList.add(root.val);
		inOrderEach(root.right);
		return inOrderEachList;
	}
	List<Integer> preEach(TreeNode root) {
		if (root == null) {
			return preEachList;
		}
		preEachList.add(root.val);
		preEach(root.left);
		preEach(root.right);
		return preEachList;
	}
	int[][] threeOrders(TreeNode root) {
		List<Integer> prevEachList = preEach(root);
		List<Integer> inEachList = inOrderEach(root);
		List<Integer> afterOfEachList = afterEach(root);
		int[][] result = new int[3][prevEachList.size()];
		result[0] = convertToInt(prevEachList);
		result[1] = convertToInt(inEachList);
		result[2] = convertToInt(afterOfEachList);
		return result;
	}
}