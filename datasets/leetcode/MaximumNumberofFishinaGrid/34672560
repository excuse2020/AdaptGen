class Solution {
	int sum = 0;
	void dfs(int row, int col, int m, int n, int grid, boolean visited) {
		if (row < 0 || row >= m || col < 0 || col >= n || grid[row][col] == 0) {
			return;
		}
		if (visited[row][col]) {
			return;
		}
		visited[row][col] = true;
		sum += grid[row][col];
		dfs(row,col + 1,m,n,grid,visited);
		dfs(row,col - 1,m,n,grid,visited);
		dfs(row + 1,col,m,n,grid,visited);
		dfs(row - 1,col,m,n,grid,visited);
	}
	int findMaxFish(int[][] grid) {
		int max = 0;
		int m = grid.length;
		int n = grid[0].length;
		for (int i = 0; i < m; i++) {
			for (int j = 0; j < n; j++) {
				if (grid[i][j] > 0) {
					sum = 0;
					boolean visited = new boolean[m][n];
					dfs(i,j,m,n,grid,visited);
					System.out.print(sum + " ");
					max = Math.max(max,sum);
				}
			}
		}
		return max;
	}
}