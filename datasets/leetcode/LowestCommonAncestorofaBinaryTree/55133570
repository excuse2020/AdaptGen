class Solution {
	TreeNode lca;
	int internal(TreeNode root, TreeNode p, TreeNode q) {
		if (root == null) {
			return 0;
		}
		int right = 0;
		if (root.right != null) {
			right = internal(root.right,p,q);
		}
		if (right == 3) {
			return 3;
		}
		int left = 0;
		if (root.left != null) {
			left = internal(root.left,p,q);
		}
		if (left == 3) {
			return 3;
		}
		if ((root == p || root == q) && (left == 1 || right == 1)) {
			lca = (root == p) ? p : q;
			return 3;
		}
		if (left == 1 && right == 1) {
			lca = root;
			return 3;
		}
		if (root == p || root == q) {
			return left + right;
		} 
		else {
			return left + right;
		}
	}
	TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
		lca = null;
		if (root == p || root == q) {
			return root;
		}
		internal(root,p,q);
		return lca;
	}
}