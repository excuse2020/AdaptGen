class Solution {
	int[][] dp;
	int maximumBags(int[] capacity, int[] rocks, int additionalRocks) {
		dp = new int[capacity.length][additionalRocks + 1];
		for (int i = 0; i < capacity.length; i++) {
			Arrays.fill(dp[i],-1);
		}
		return recursion(capacity,rocks,additionalRocks,0);
	}
	int recursion(int[] c, int[] r, int a, int idx) {
		if (idx >= c.length) {
			return 0;
		}
		if (dp[idx][a] != -1) {
			return dp[idx][a];
		}
		if (c[idx] - r[idx] == 0) {
			int val = 1 + recursion(c,r,a,idx + 1);
			return dp[idx][a] = val;
		} 
		else {
			if (c[idx] - r[idx] <= a) {
				int choose = 1 + recursion(c,r,a - (c[idx] - r[idx]),idx + 1);
				int notChoose = recursion(c,r,a,idx + 1);
				int val = Math.max(choose,notChoose);
				return dp[idx][a] = val;
			} 
			else {
				int val = 0 + recursion(c,r,a,idx + 1);
				return dp[idx][a] = val;
			}
		}
	}
}