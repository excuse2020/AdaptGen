class Solution {
	int maxProfit(int[] prices) {
		int idx = prices.length;
		int dp = new int[idx][2][2];
		for (int i = 0; i < idx; i++) {
			for (int j = 0; j < 2; j++) {
				for (int k = 0; k < 2; k++) {
					dp[i][j][k] = -1;
				}
			}
		}
		return solve(prices,0,1,0,dp);
	}
	int solve(int prices, int idx, int buy, int limit, int dp) {
		if (idx >= prices.length) {
			return 0;
		}
		if (limit > 1) {
			return 0;
		}
		if (dp[idx][limit][buy] != -1) {
			return dp[idx][limit][buy];
		}
		int profit = 0;
		if (buy == 1) {
			int take = -prices[idx] + solve(prices,idx + 1,0,limit,dp);
			int notTake = solve(prices,idx + 1,1,limit,dp);
			profit = Math.max(take,notTake);
		} 
		else {
			int take = prices[idx] + solve(prices,idx + 1,1,limit + 1,dp);
			int notTake = solve(prices,idx + 1,0,limit,dp);
			profit = Math.max(take,notTake);
		}
		return dp[idx][limit][buy] = profit;
	}
}