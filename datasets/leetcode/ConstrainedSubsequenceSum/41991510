class Solution {
	int constrainedSubsetSum(int[] nums, int k) {
		Deque<Integer> dq = new ArrayDeque<>();
		for (int i = 0; i < nums.length; i++) {
			nums[i] += (dq.isEmpty()) ? 0 : nums[dq.peekFirst()];
			while (!dq.isEmpty() && ((nums[i] >= nums[dq.peekLast()]) || (i - dq.peekFirst() >= k))) {
				if (nums[i] >= nums[dq.peekLast()]) {
					dq.pollLast();
				} 
				else {
					dq.pollFirst();
				}
			}
			if (nums[i] > 0) {
				dq.offerLast(i);
			}
		}
		int ans = Integer.MIN_VALUE;
		for (int i = 0; i < nums.length; i++) {
			ans = Math.max(nums[i],ans);
		}
		return ans;
	}
}