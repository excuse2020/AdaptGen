class Solution {
	List<List<Integer>> levelOrderBottom(TreeNode root) {
		List<List<Integer>> res = new ArrayList<>();
		if (root == null) {
			return res;
		}
		Queue<TreeNode> queue = new LinkedList<>();
		queue.offer(root);
		while (!queue.isEmpty()) {
			int levelSize = queue.size();
			List<Integer> current = new ArrayList<>();
			for (int i = 0; i < levelSize; i++) {
				TreeNode currNode = queue.poll();
				current.add(currNode.val);
				if (currNode.left != null) {
					queue.offer(currNode.left);
				}
				if (currNode.right != null) {
					queue.offer(currNode.right);
				}
			}
			res.add(current);
		}
		return rev(res);
	}
	List<List<Integer>> rev(List<List<Integer>> a) {
		List<List<Integer>> res = new ArrayList<>();
		for (int i = a.size() - 1; i >= 0; i--) {
			res.add(a.get(i));
		}
		return res;
	}
}