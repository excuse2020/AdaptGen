class Solution {
	int dfs(List<List<Integer>> adj, int course, int[] time, int[] visited) {
		if (visited[course] != -1) {
			return visited[course];
		}
		int max = time[course - 1];
		for (int nei: adj.get(course)) {	
			max = Math.max(max,time[course - 1] + dfs(adj,nei,time,visited));
		}
		visited[course] = max;
		return max;
	}
	int minimumTime(int n, int[][] relations, int[] time) {
		List<List<Integer>> adj = new ArrayList<>();
		for (int i = 0; i <= n; i++) {
			adj.add(new ArrayList<>());
		}
		for (int[] relation: relations) {	
			adj.get(relation[0]).add(relation[1]);
		}
		int[] visited = new int[n + 1];
		Arrays.fill(visited,-1);
		int max = 0;
		for (int i = 1; i <= n; i++) {
			max = Math.max(max,dfs(adj,i,time,visited));
		}
		return max;
	}
}