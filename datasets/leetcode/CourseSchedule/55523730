class Solution {
	boolean canFinish(int V, int[][] prerequisites) {
		ArrayList<ArrayList<Integer>> ans = new ArrayList<>();
		for (int i = 0; i < V; i++) {
			ans.add(new ArrayList<>());
		}
		int m = prerequisites.length;
		for (int i = 0; i < m; i++) {
			ans.get(prerequisites[i][1]).add(prerequisites[i][0]);
		}
		int visit = new int[V];
		for (int i = 0; i < V; i++) {
			for (int it: ans.get(i)) {	
				visit[it]++;
			}
		}
		Queue<Integer> q = new LinkedList<>();
		for (int i = 0; i < V; i++) {
			if (visit[i] == 0) {
				q.add(i);
			}
		}
		List<Integer> topo = new ArrayList<>();
		while (!q.isEmpty()) {
			int node = q.poll();
			topo.add(node);
			for (int it: ans.get(node)) {	
				visit[it]--;
				if (visit[it] == 0) {
					q.add(it);
				}
			}
		}
		if (topo.size() == V) {
			return true;
		} 
		else {
			return false;
		}
	}
}