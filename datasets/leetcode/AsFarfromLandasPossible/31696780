class Solution {
	String delimiter = ",";
	void addToQueue(Queue<String> cellq, Set<String> cells, int i, int j) {
		String str = i + delimiter;
		if (cells.contains(str)) {
			return;
		}
		cellq.add(str);
		cells.add(str);
	}
	int maxDistance(int[][] grid) {
		int n = grid.length;
		Set<String> cells = new HashSet<>();
		Queue<String> cellq = new ArrayDeque<>();
		boolean hasWater = false;
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < n; j++) {
				if (grid[i][j] == 1) {
					cellq.add(i + delimiter);
				} 
				else {
					hasWater = true;
				}
			}
		}
		if (cellq.isEmpty() || !hasWater) {
			return -1;
		}
		int max = -1;
		while (!cellq.isEmpty()) {
			Queue<String> currentq = new ArrayDeque<>();
			while (!cellq.isEmpty()) {
				currentq.add(cellq.poll());
			}
			while (!currentq.isEmpty()) {
				String[] str = currentq.poll().split(delimiter);
				int i = Integer.parseInt(str[0]);
				int j = Integer.parseInt(str[1]);
				grid[i][j] = 1;
				if (i > 0) {
					addToQueue(cellq,cells,i - 1,j);
				}
				if (j > 0) {
					addToQueue(cellq,cells,i,j - 1);
				}
				if (i + 1 < n) {
					addToQueue(cellq,cells,i + 1,j);
				}
				if (j + 1 < n) {
					addToQueue(cellq,cells,i,j + 1);
				}
			}
			max += 1;
		}
		return max;
	}
}