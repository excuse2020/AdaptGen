class Solution {
	int cnt = 0;
	int InversePairs(int[] array) {
		if (array.length <= 1) {
			return 0;
		}
		int len = 1;
		while (len < array.length) {
			int start = 0;
			while (start + 2 * len - 1 < array.length) {
				int mid = start + len - 1;
				int end = start + 2 * len - 1;
				merge(array,start,mid,end);
				start = start + 2 * len;
			}
			if (start + len - 1 < array.length) {
				merge(array,start,start + len - 1,array.length - 1);
			}
			len = len * 2;
		}
		return cnt;
	}
	void merge(int[] arr, int start, int mid, int end) {
		int i = start;
		int j = mid + 1;
		int[] temp = new int[end - start + 1];
		int index = 0;
		while (i <= mid && j <= end) {
			if (arr[i] <= arr[j]) {
				temp[index++] = arr[i++];
			} 
			else {
				temp[index++] = arr[j++];
				cnt = (cnt + (mid - i + 1)) % 1000000007;
			}
		}
		while (i <= mid) {
			temp[index++] = arr[i++];
		}
		while (j <= end) {
			temp[index++] = arr[j++];
		}
		for (int k = start; k <= end; k++) {
			arr[k] = temp[k - start];
		}
	}
}