class Solution {
	boolean isLeft(Character c) {
		return c == '(' || c == '{' || c == '[';
	}
	boolean isPair(Character c, Character d) {
		if (c == ')') {
			return d == '(';
		} 
		else if (c == '}') {
			return d == '{';
		} 
		else {
			return d == '[';
		}
	}
	boolean isValid(String s) {
		int len = s.length();
		if (len == 0) {
			return true;
		}
		if (len == 1) {
			return false;
		}
		if (len % 2 != 0) {
			return false;
		}
		Stack<Character> stack = new Stack<Character>();
		for (int i = 0; i < len; i++) {
			Character c = s.charAt(i);
			if (!isValid(c)) {
				return false;
			}
			if (isLeft(c)) {
				stack.push(c);
			} 
			else {
				if (stack.isEmpty()) {
					return false;
				}
				if (!isPair(c,stack.pop())) {
					return false;
				}
			}
		}
		return stack.isEmpty();
	}
	boolean isValid(Character c) {
		return c == '(' || c == ')' || c == '{' || c == '}' || c == '[' || c == ']';
	}
}