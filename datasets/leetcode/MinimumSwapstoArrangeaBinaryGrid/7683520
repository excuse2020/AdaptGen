class Solution {
	int minSwaps(int[][] grid) {
		int n = grid.length;
		int[] zeroCount = new int[n];
		int largest = 0;
		for (int i = 0; i < n; i++) {
			int count = 0;
			for (int j = n - 1; j >= 0; j--) {
				if (grid[i][j] == 0) {
					count++;
				}
				if (grid[i][j] == 1) {
					break;
				}
			}
			zeroCount[i] = count;
			largest = Math.max(largest,count);
		}
		if (largest < n - 1) {
			return -1;
		}
		int[] isUsed = new int[n];
		int[] arr = new int[n];
		int ans = 0;
		for (int i = 0; i < n; i++) {
			int reqmt = n - i;
			int countRows = 0;
			for (int j = 0; j < n; j++) {
				if (isUsed[j] == 1) {
					continue;
				}
				if (zeroCount[j] >= reqmt) {
					ans += countRows;
					isUsed[j] = 1;
					reqmt = -1;
					arr[i] = zeroCount[j];
					break;
				} 
				else {
					countRows++;
				}
			}
			if (reqmt > -1) {
				return -1;
			}
		}
		return ans;
	}
}