class Solution {
	String beginWord, endWord;
	Map<String, Integer> dist = new HashMap();
	List<List<String>> res;
	Set<String> set = new HashSet();
	void dfs(String word, List<String> path) {
		if (word.equals(beginWord)) {
			List list = new ArrayList(path);
			Collections.reverse(list);
			res.add(list);
			return;
		}
		char[] charCur = word.toCharArray();
		int i = 0;
		char c = charCur[i];
		char j;
	}
	List<List<String>> findLadders(String beginWord, String endWord, List<String> wordList) {
		this.beginWord = beginWord;
		this.endWord = endWord;
		this.res = new ArrayList();
		for (String word: wordList) {	
			set.add(word);
		}
		short_path();
		if (dist.get(endWord) == null) {
			return res;
		}
		List<String> path = new ArrayList();
		path.add(endWord);
		dfs(endWord,path);
		return res;
	}
	void short_path() {
		Queue<String> q = new LinkedList();
		q.offer(beginWord);
		dist.put(beginWord,0);
		String cur = q.poll();
		if (cur.equals(endWord)) {
			break;
		}
		char[] charCur = cur.toCharArray();
		int i = 0;
		char c = charCur[i];
		char j;
	}
}