class Solution {
	List<List<Integer>> levelOrderBottom(TreeNode root) {
		List<List<Integer>> ans = new ArrayList<>();
		Queue<TreeNode> myQueue = new LinkedList<>();
		if (root != null) {
			myQueue.add(root);
		}
		while (!myQueue.isEmpty()) {
			List<Integer> temp = new ArrayList<>();
			int size = myQueue.size();
			for (int i = 0; i < size; i++) {
				TreeNode node = myQueue.poll();
				temp.add(node.val);
				if (node.left != null) {
					myQueue.add(node.left);
				}
				if (node.right != null) {
					myQueue.add(node.right);
				}
			}
			ans.add(temp);
		}
		List<List<Integer>> reversedList = new ArrayList<>();
		for (int i = ans.size() - 1; i >= 0; i--) {
			reversedList.add(ans.get(i));
		}
		return reversedList;
	}
}