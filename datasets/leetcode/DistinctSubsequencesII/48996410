class Solution {
	int MOD = 1_000_000_007;
	int distinctSubseqII(String s) {
		int res = 0, added = 0;
		int[] count = new int[26];
	}
	int solveMemo(String s, int idx, int[] dp) {
		if (idx >= s.length()) {
			return 0;
		}
		if (dp[idx] != -1) {
			return dp[idx];
		}
		Set<Character> set = new HashSet<>();
		int res = 0;
		for (int j = idx; j < s.length(); j++) {
			if (set.contains(s.charAt(j))) {
				continue;
			}
			set.add(s.charAt(j));
			res = (1 + solveMemo(s,j + 1,dp) % MOD + res % MOD) % MOD;
		}
		return dp[idx] = res;
	}
	void solveRec(String s, int idx, StringBuilder sb, List<String> list) {
		if (idx >= s.length()) {
			if (sb.toString().length() != 0) {
				if (list.contains(sb.toString())) {
					return;
				}
				list.add(sb.toString());
			}
			return;
		}
		sb.append(s.charAt(idx));
		solveRec(s,idx + 1,sb,list);
		sb.deleteCharAt(sb.length() - 1);
		solveRec(s,idx + 1,sb,list);
	}
}