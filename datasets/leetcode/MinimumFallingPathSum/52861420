class Solution {
	int getMinUtil(int i, int j, int m, int[][] matrix, int[][] dp) {
		if (j < 0 || j >= m) {
			return (int) Math.pow(10,9);
		}
		if (i == 0) {
			return matrix[0][j];
		}
		if (dp[i][j] != -1) {
			return dp[i][j];
		}
		int up = matrix[i][j] + getMinUtil(i - 1,j,m,matrix,dp);
		int leftDiagonal = matrix[i][j] + getMinUtil(i - 1,j - 1,m,matrix,dp);
		int rightDiagonal = matrix[i][j] + getMinUtil(i - 1,j + 1,m,matrix,dp);
		return dp[i][j] = Math.min(up,Math.min(leftDiagonal,rightDiagonal));
	}
	int minFallingPathSum(int[][] matrix) {
		int n = matrix.length;
		int m = matrix[0].length;
		int dp = new int[n][m];
		for (int row: dp) {	
			Arrays.fill(row,-1);
		}
		int mini = Integer.MAX_VALUE;
		for (int j = 0; j < m; j++) {
			int ans = getMinUtil(n - 1,j,m,matrix,dp);
			mini = Math.min(mini,ans);
		}
		return mini;
	}
}