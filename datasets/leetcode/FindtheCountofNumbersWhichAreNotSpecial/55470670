class Solution {
	int nonSpecialCount(int l, int r) {
		int max = (int) Math.sqrt(r);
		boolean[] isPrime = new boolean[max + 1];
		for (int i = 2; i <= max; i++) {
			isPrime[i] = true;
		}
		for (int i = 2; i * i <= max; i++) {
			if (isPrime[i]) {
				for (int j = i * i; j <= max; j += i) {
					isPrime[j] = false;
				}
			}
		}
		List<Integer> primes = new ArrayList<>();
		for (int i = 2; i <= max; i++) {
			if (isPrime[i]) {
				primes.add(i);
			}
		}
		int specialCount = 0;
		for (int prime: primes) {	
			long square = (long) prime * prime;
			if (square >= l && square <= r) {
				specialCount++;
			}
		}
		return (r - l + 1) - specialCount;
	}
}