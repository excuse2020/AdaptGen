class Solution {
	int max = 1;
	int dfs(int node, List<Integer>[] adj, String s) {
		if (adj[node].size() == 0) {
			return 1;
		}
		int max1 = 0;
		int max2 = 0;
		for (int child: adj[node]) {	
			int curr = dfs(child,adj,s);
			if (s.charAt(child) != s.charAt(node)) {
				if (curr >= max1) {
					max2 = max1;
					max1 = curr;
				} 
				else if (curr > max2) {
					max2 = curr;
				}
			}
		}
		max = Math.max(max,max1 + max2);
		return max1 + 1;
	}
	int longestPath(int[] parent, String s) {
		List<Integer>[] adj = new ArrayList[parent.length];
		for (int i = 0; i < parent.length; i++) {
			adj[i] = new ArrayList<>();
		}
		for (int i = 1; i < parent.length; i++) {
			adj[parent[i]].add(i);
		}
		int curr = dfs(0,adj,s);
		return Math.max(curr,max);
	}
}