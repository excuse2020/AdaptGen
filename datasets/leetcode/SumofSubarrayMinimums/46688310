class Solution {
	int[] nextSL(int[] arr) {
		int[] ans = new int[arr.length];
		Stack<Integer> stack = new Stack<>();
		for (int i = 0; i < arr.length; i++) {
			while (!stack.isEmpty() && arr[i] < arr[stack.peek()]) {
				stack.pop();
			}
			ans[i] = stack.isEmpty() ? -1 : stack.peek();
			stack.push(i);
		}
		return ans;
	}
	int[] nextSR(int[] arr) {
		int[] ans = new int[arr.length];
		Stack<Integer> stack = new Stack<>();
		for (int i = arr.length - 1; i >= 0; i--) {
			while (!stack.isEmpty() && arr[i] <= arr[stack.peek()]) {
				stack.pop();
			}
			ans[i] = stack.isEmpty() ? arr.length : stack.peek();
			stack.push(i);
		}
		return ans;
	}
	int sumSubarrayMins(int[] arr) {
		int[] nsr = nextSR(arr);
		int[] nsl = nextSL(arr);
		long result = 0;
		int m = 1000000007;
		for (int i = 0; i < arr.length; i++) {
			long diff1 = (i - nsl[i] + m) % m;
			long diff2 = (nsr[i] - i + m) % m;
			long totalPossibilites = (diff1 * diff2) % m;
			long currentPoss = (arr[i] * totalPossibilites) % m;
			result = (result + currentPoss) % m;
		}
		return (int) result;
	}
}