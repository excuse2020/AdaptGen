class Solution {
	List<List<Integer>> adj = new ArrayList<>();
	List<List<Integer>> ans = new ArrayList<>();
	int timer = 1;
	List<List<Integer>> criticalConnections(int n, List<List<Integer>> connections) {
		for (int i = 0; i < n; i++) {
			adj.add(new ArrayList<>());
		}
		for (List<Integer> it: connections) {	
			adj.get(it.get(0)).add(it.get(1));
			adj.get(it.get(1)).add(it.get(0));
		}
		boolean[] vis = new boolean[n];
		int[] time = new int[n];
		int[] low = new int[n];
		dfs(0,-1,vis,time,low);
		return ans;
	}
	void dfs(int node, int par, boolean[] vis, int[] time, int[] low) {
		vis[node] = true;
		time[node] = timer;
		low[node] = timer;
		timer++;
		for (Integer it: adj.get(node)) {	
			if (it != par) {
				if (!vis[it]) {
					dfs(it,node,vis,time,low);
					if (low[it] > time[node]) {
						ans.add(Arrays.asList(node,it));
					}
				}
				low[node] = Math.min(low[node],low[it]);
			}
		}
	}
}