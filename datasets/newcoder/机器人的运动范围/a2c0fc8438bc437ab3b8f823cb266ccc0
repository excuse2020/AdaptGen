class Solution {
	int ans = 0;
	int rows = 0, cols = 0;
	int threshold = 0;
	int[][] visit = new int[101][101];
	void dfs(int i, int j, int count) {
		if (i < 0 || j < 0 || i >= rows || j >= cols || visit[i][j] == 1) {
			return;
		}
		int temp = 0;
		String s = String.valueOf(i) + String.valueOf(j);
		for (int k = 0; k < s.length(); k++) {
			temp += s.charAt(k) - '0';
		}
		if (temp > threshold) {
			return;
		}
		ans++;
		visit[i][j] = 1;
		dfs(i + 1,j,count + 1);
		dfs(i,j + 1,count + 1);
		dfs(i - 1,j,count + 1);
		dfs(i,j - 1,count + 1);
	}
	int movingCount(int threshold, int rows, int cols) {
		this.threshold = threshold;
		this.rows = rows;
		this.cols = cols;
		dfs(0,0,1);
		return ans;
	}
}