class Solution {
	int numSubmatrixSumTarget(int[][] matrix, int target) {
		int n = matrix.length;
		int m = matrix[0].length;
		for (int i = 0; i < n; i++) {
			for (int j = 1; j < m; j++) {
				matrix[i][j] += matrix[i][j - 1];
			}
		}
		int res = 0;
		for (int i = 0; i < m; i++) {
			for (int j = i; j < m; j++) {
				Map<Integer, Integer> map = new HashMap<>();
				map.put(0,1);
				int currSum = 0;
				for (int k = 0; k < n; k++) {
					currSum += matrix[k][j] - (i - 1 >= 0 ? matrix[k][i - 1] : 0);
					res += map.getOrDefault(currSum - target,0);
					map.put(currSum,map.getOrDefault(currSum,0) + 1);
				}
			}
		}
		return res;
	}
}