class Solution {
	ListNode mergeTwoSorted(ListNode headA, ListNode headB) {
		if (headA == null) {
			return headB;
		}
		if (headB == null) {
			return headA;
		}
		ListNode t1 = headA, t2 = headB, head = null, tail = null;
		if (t1.val <= t2.val) {
			head = t1;
			tail = t1;
			t1 = t1.next;
		} 
		else {
			head = t2;
			tail = t2;
			t2 = t2.next;
		}
		while (t1 != null && t2 != null) {
			if (t1.val <= t2.val) {
				tail.next = t1;
				tail = t1;
				t1 = t1.next;
			} 
			else {
				tail.next = t2;
				tail = t2;
				t2 = t2.next;
			}
		}
		if (t1 != null) {
			tail.next = t1;
		}
		if (t2 != null) {
			tail.next = t2;
		}
		return head;
	}
	ListNode midOfLL(ListNode head) {
		if (head == null) {
			return head;
		}
		ListNode fast = head;
		ListNode slow = head;
		while (fast.next != null && fast.next.next != null) {
			fast = fast.next.next;
			slow = slow.next;
		}
		return slow;
	}
	ListNode sortList(ListNode head) {
		if (head == null || head.next == null) {
			return head;
		}
		ListNode mid = midOfLL(head);
		ListNode headB = mid.next, headA = head;
		mid.next = null;
		ListNode partA = sortList(headA);
		ListNode partB = sortList(headB);
		return mergeTwoSorted(partA,partB);
	}
}