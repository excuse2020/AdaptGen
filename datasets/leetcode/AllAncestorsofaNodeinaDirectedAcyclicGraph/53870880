class Solution {
	void dfs(int ancestor, int i, List<List<Integer>> res, List<List<Integer>> directChild) {
		for (int curr: directChild.get(i)) {	
			if (res.get(curr).size() == 0 || res.get(curr).get(res.get(curr).size() - 1) != ancestor) {
				res.get(curr).add(ancestor);
				dfs(ancestor,curr,res,directChild);
			}
		}
	}
	List<List<Integer>> getAncestors(int n, int[][] edges) {
		List<List<Integer>> res = new ArrayList();
		List<List<Integer>> directChild = new ArrayList();
		for (int i = 0; i < n; i++) {
			res.add(new ArrayList());
			directChild.add(new ArrayList());
		}
		for (int[] e: edges) {	
			directChild.get(e[0]).add(e[1]);
		}
		for (int i = 0; i < n; i++) {
			int ancestor = i;
			dfs(ancestor,i,res,directChild);
		}
		return res;
	}
}