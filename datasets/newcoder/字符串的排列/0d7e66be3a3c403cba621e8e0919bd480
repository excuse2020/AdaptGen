class Solution {
	int N = 10;
	char[] chs;
	boolean[] isVisited = new boolean[N];
	int[] path = new int[N];
	ArrayList<String> res = new ArrayList<>();
	int step;
	ArrayList<String> Permutation(String str) {
		chs = str.toCharArray();
		Arrays.sort(chs);
		step = chs.length;
		dfs(0);
		return res;
	}
	void dfs(int u) {
		if (u == step) {
			StringBuilder sbu = new StringBuilder();
			for (int i = 1; i <= step; i++) {
				sbu.append(chs[path[i] - 1]);
			}
			String s = sbu.toString();
			if (!res.contains(s)) {
				res.add(s);
			}
		}
		for (int i = 1; i <= step; i++) {
			if (!isVisited[i]) {
				isVisited[i] = true;
				path[u + 1] = i;
				dfs(u + 1);
				isVisited[i] = false;
			}
		}
	}
}