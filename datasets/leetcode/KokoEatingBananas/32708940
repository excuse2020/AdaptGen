class Solution {
	boolean isPossible(int[] piles, int value, int h) {
		int hours = 0;
		int i = 0;
		for (int pile: piles) {	
			int div = pile / value;
			hours += div;
			if (pile % value != 0) {
				hours++;
			}
		}
		return hours <= h;
	}
	int minEatingSpeed(int[] piles, int h) {
		Arrays.sort(piles);
		int start = 1;
		int max = Integer.MIN_VALUE;
		for (int i = 0; i < piles.length; i++) {
			max = Math.max(max,piles[i]);
		}
		int end = max;
		while (start < end) {
			int mid = start + (end - start) / 2;
			if (isPossible(piles,mid,h)) {
				end = mid;
			} 
			else {
				start = mid + 1;
			}
		}
		return start;
	}
}