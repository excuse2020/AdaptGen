class Solution {
	int maxProfit(int[] prices) {
		int n = prices.length;
		int[][][] dp = new int[n][2][3];
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < 2; j++) {
				Arrays.fill(dp[i][j],-1);
			}
		}
		return solve(0,prices,1,dp,n,2);
	}
	int solve(int idx, int[] prices, int buy, int[][][] dp, int n, int k) {
		if (idx == n || k == 0) {
			return 0;
		}
		if (dp[idx][buy][k] != -1) {
			return dp[idx][buy][k];
		}
		int profit = 0;
		if (buy == 1) {
			profit = Math.max(-prices[idx] + solve(idx + 1,prices,0,dp,n,k),solve(idx + 1,prices,1,dp,n,k));
		} 
		else {
			profit = Math.max(prices[idx] + solve(idx + 1,prices,1,dp,n,k - 1),solve(idx + 1,prices,0,dp,n,k));
		}
		dp[idx][buy][k] = profit;
		return dp[idx][buy][k];
	}
}
class Solution {
	int maxProfit(int[] prices) {
		int n = prices.length;
		int[][][] dp = new int[n + 1][2][3];
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < 2; j++) {
				Arrays.fill(dp[i][j],0);
			}
		}
		for (int idx = n - 1; idx >= 0; idx--) {
			for (int buy = 0; buy <= 1; buy++) {
				for (int k = 1; k <= 2; k++) {
					int profit = 0;
					if (buy == 1) {
						profit = Math.max(-prices[idx] + dp[idx + 1][0][k],dp[idx + 1][1][k]);
					} 
					else {
						profit = Math.max(prices[idx] + dp[idx + 1][1][k - 1],dp[idx + 1][0][k]);
					}
					dp[idx][buy][k] = profit;
				}
			}
		}
		return dp[0][1][2];
	}
}