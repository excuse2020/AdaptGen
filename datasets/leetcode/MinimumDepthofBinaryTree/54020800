class Solution {
	int minDepth(TreeNode root) {
		var result = new PriorityQueue<Integer>();
		if (root == null) {
			return 0;
		}
		if (root.right == null && root.left == null) {
			return 1;
		}
		minDepth(root,1,result);
		return result.poll();
	}
	void minDepth(TreeNode root, int level, PriorityQueue<Integer> result) {
		if (root == null) {
			return;
		}
		if (root.left == null && root.right == null) {
			result.add(level);
			return;
		}
		if (!result.isEmpty() && result.peek() < level) {
			return;
		}
		minDepth(root.left,level + 1,result);
		minDepth(root.right,level + 1,result);
	}
}