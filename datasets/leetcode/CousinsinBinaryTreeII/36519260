class Solution {
	List<Integer> horizontalSum;
	TreeNode replaceValueInTree(TreeNode root) {
		horizontalSum = new ArrayList();
		root.val = 0;
		if (root.left != null) {
			root.left.val = 0;
		}
		if (root.right != null) {
			root.right.val = 0;
		}
		traverse(root,0);
		traverse1(root,0);
		return root;
	}
	void traverse(TreeNode root, int depth) {
		if (root == null) {
			return;
		}
		if (depth < horizontalSum.size()) {
			horizontalSum.set(depth,horizontalSum.get(depth) + root.val);
		} 
		else {
			horizontalSum.add(root.val);
		}
		traverse(root.left,depth + 1);
		traverse(root.right,depth + 1);
	}
	void traverse1(TreeNode root, int depth) {
		if (root == null) {
			return;
		}
		if (depth > 0) {
			int sum = 0;
			if (root.left != null) {
				sum += root.left.val;
			}
			if (root.right != null) {
				sum += root.right.val;
			}
			if (root.left != null) {
				root.left.val = horizontalSum.get(depth + 1) - sum;
			}
			if (root.right != null) {
				root.right.val = horizontalSum.get(depth + 1) - sum;
			}
		}
		traverse1(root.left,depth + 1);
		traverse1(root.right,depth + 1);
	}
}