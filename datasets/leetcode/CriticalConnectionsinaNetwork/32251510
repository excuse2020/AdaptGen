class Solution {
	int timer = 1;
	List<List<Integer>> criticalConnections(int n, List<List<Integer>> connections) {
		ArrayList<ArrayList<Integer>> adj = new ArrayList<>();
		for (int i = 0; i < n; i++) {
			adj.add(new ArrayList<>());
		}
		for (List<Integer> edge: connections) {	
			int u = edge.get(0);
			int v = edge.get(1);
			adj.get(u).add(v);
			adj.get(v).add(u);
		}
		boolean[] visited = new boolean[n];
		int[] timeIn = new int[n];
		int[] lowTime = new int[n];
		List<List<Integer>> ans = new ArrayList<>();
		dfs(0,-1,visited,adj,timeIn,lowTime,ans);
		return ans;
	}
	void dfs(int src, int parent, boolean[] visited, ArrayList<ArrayList<Integer>> adj, int[] timeIn, int[] lowTime, List<List<Integer>> ans) {
		visited[src] = true;
		timeIn[src] = lowTime[src] = timer;
		timer++;
		for (Integer nbr: adj.get(src)) {	
			if (nbr == parent) {
				continue;
			}
			if (!visited[nbr]) {
				dfs(nbr,src,visited,adj,timeIn,lowTime,ans);
				lowTime[src] = Math.min(lowTime[src],lowTime[nbr]);
				if (lowTime[nbr] > timeIn[src]) {
					ans.add(Arrays.asList(nbr,src));
				}
			} 
			else {
				lowTime[src] = Math.min(lowTime[src],lowTime[nbr]);
			}
		}
	}
}