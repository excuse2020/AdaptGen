class Solution {
	int f(int[][] grid, int i, int j, int[][] dp) {
		if (i < 0 || j < 0 || grid[i][j] == 1) {
			return 0;
		}
		if (i == 0 && j == 0) {
			return 1;
		}
		if (dp[i][j] != -1) {
			return dp[i][j];
		}
		int h = f(grid,i - 1,j,dp);
		int u = f(grid,i,j - 1,dp);
		dp[i][j] = u + h;
		return u + h;
	}
	int uniquePathsWithObstacles(int[][] obstacleGrid) {
		int[][] dp = new int[obstacleGrid.length][obstacleGrid[0].length];
		if (obstacleGrid[0][0] != 1) {
			dp[0][0] = 1;
		}
		for (int i = 0; i < obstacleGrid.length; i++) {
			for (int j = 0; j < obstacleGrid[0].length; j++) {
				if (obstacleGrid[i][j] == 1) {
					continue;
				}
				if (i - 1 >= 0) {
					dp[i][j] += dp[i - 1][j];
				}
				if (j - 1 >= 0) {
					dp[i][j] += dp[i][j - 1];
				}
			}
		}
		return dp[obstacleGrid.length - 1][obstacleGrid[0].length - 1];
	}
}