class Solution {
	int[] fullBloomFlowers(int[][] flowers, int[] people) {
		int[] viewedBloomedFlowers = new int[people.length];
		Arrays.sort(flowers,Comparator.comparingInt((a) -> {a[0]}));
		int[][] sortedPeople = getSortedPeople(people);
		PriorityQueue<Integer> basket = new PriorityQueue<>(Comparator.comparingInt((a) -> {flowers[a][1]}));
		int fIndex = 0, pIndex = 0;
		while (pIndex < people.length) {
			while (fIndex < flowers.length && flowers[fIndex][0] <= sortedPeople[pIndex][0]) {
				basket.add(fIndex);
				fIndex++;
			}
			while (!basket.isEmpty() && flowers[basket.peek()][1] < sortedPeople[pIndex][0]) {
				basket.poll();
			}
			viewedBloomedFlowers[sortedPeople[pIndex][1]] = basket.size();
			pIndex++;
		}
		return viewedBloomedFlowers;
	}
	int[][] getSortedPeople(int[] people) {
		int[][] sortedPeople = new int[people.length][2];
		for (int i = 0; i < people.length; i++) {
			sortedPeople[i][0] = people[i];
			sortedPeople[i][1] = i;
		}
		Arrays.sort(sortedPeople,Comparator.comparingInt((a) -> {a[0]}));
		return sortedPeople;
	}
}