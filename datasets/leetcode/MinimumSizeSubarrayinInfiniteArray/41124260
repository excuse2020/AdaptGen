class Solution {
	int minSizeSubarray(int[] nums, int target) {
		int n = nums.length;
		int[] numsUpdated = new int[n * 2];
		for (int i = 0; i < n; i++) {
			numsUpdated[i] = nums[i];
			numsUpdated[n + i] = nums[i];
		}
		int baseLen = 0;
		int totalSum = 0;
		for (int num: nums) {	
			totalSum += num;
		}
		if (target > totalSum) {
			baseLen = (target / totalSum) * n;
			target = target % totalSum;
		}
		int i = 0;
		int j = 0;
		int sum = 0;
		int size = Integer.MAX_VALUE;
		while (j < numsUpdated.length) {
			sum += numsUpdated[j];
			if (sum < target) {
				j++;
			} 
			else if (sum == target) {
				int subarrayLength = (j - i + 1);
				size = Math.min(size,subarrayLength);
				sum -= numsUpdated[i];
				i++;
				j++;
			} 
			else if (sum > target) {
				while (sum > target) {
					sum -= numsUpdated[i];
					i++;
					if (sum == target) {
						size = Math.min(size,j - i + 1);
					}
				}
				j++;
			}
		}
		if (size == Integer.MAX_VALUE) {
			return -1;
		}
		return baseLen + size;
	}
}