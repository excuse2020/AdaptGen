class Solution {
	boolean isPossible(int mid, int[] piles, int h) {
		long hours = 0, n = piles.length;
		for (int i = 0; i < n; i++) {
			if (piles[i] <= mid) {
				++hours;
			} 
			else {
				if (piles[i] % mid == 0) {
					hours += piles[i] / mid;
				} 
				else {
					hours += piles[i] / mid + 1;
				}
			}
		}
		return hours <= h;
	}
	int minEatingSpeed(int[] piles, int h) {
		int n = piles.length, res = 0;
		int l = 1, r = 0;
		for (int i: piles) {	
			r = Math.max(r,i);
		}
		while (l <= r) {
			int mid = l + (r - l) / 2;
			if (isPossible(mid,piles,h)) {
				res = mid;
				r = mid - 1;
			} 
			else {
				l = mid + 1;
			}
		}
		return res;
	}
}