class Solution {
	int MOD = 100_000_000_7;
	int N;
	long dfs(int totalListened, int notListened, int listened, int goal, int k, long[][] memo) {
		if (totalListened == goal) {
			return notListened == 0 ? 1 : 0;
		}
		if (memo[totalListened][notListened] != -1) {
			return memo[totalListened][notListened];
		}
		if (k == 0) {
			listened = N - notListened;
		} 
		else if (totalListened > k) {
			listened++;
		}
		long answer = 0;
		answer = answer + (notListened > 0 ? notListened * dfs(totalListened + 1,notListened - 1,listened,goal,k,memo) : 0) % MOD;
		answer = answer + (listened > 0 ? listened * dfs(totalListened + 1,notListened,listened - 1,goal,k,memo) : 0) % MOD;
		return memo[totalListened][notListened] = answer;
	}
	long[][] getMemo(int n, int goal) {
		long[][] memo = new long[goal + 1][n + 1];
		for (int i = 0; i < memo.length; i++) {
			Arrays.fill(memo[i],-1);
		}
		return memo;
	}
	int numMusicPlaylists(int n, int goal, int k) {
		N = n;
		return (int) dfs(0,n,0,goal,k,getMemo(n,goal));
	}
}