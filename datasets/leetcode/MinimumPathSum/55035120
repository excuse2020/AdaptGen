class Solution {
	int helper(int[][] grid, int i, int j, int[][] memo) {
		if (memo[i][j] != 0) {
			return memo[i][j];
		}
		if (i == 0 && j == 0) {
			return grid[i][j];
		}
		int left = Integer.MAX_VALUE;
		int top = Integer.MAX_VALUE;
		if (i - 1 >= 0) {
			top = helper(grid,i - 1,j,memo);
		}
		if (j - 1 >= 0) {
			left = helper(grid,i,j - 1,memo);
		}
		int res = grid[i][j] + Math.min(top,left);
		memo[i][j] = res;
		return res;
	}
	int minPathSum(int[][] grid) {
		int m = grid.length;
		int n = grid[0].length;
		int[][] memo = new int[m][n];
		return helper(grid,m - 1,n - 1,memo);
	}
}