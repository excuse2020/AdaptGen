class Solution {
	int dfsFindMaxFish(int[][] grid, int r, int c, boolean[][] visited) {
		if (r >= grid.length || r < 0 || c >= grid[0].length || c < 0) {
			return 0;
		}
		if (grid[r][c] == 0) {
			return 0;
		}
		if (visited[r][c]) {
			return 0;
		}
		visited[r][c] = true;
		int fish = grid[r][c];
		fish += dfsFindMaxFish(grid,r + 1,c,visited);
		fish += dfsFindMaxFish(grid,r,c + 1,visited);
		fish += dfsFindMaxFish(grid,r - 1,c,visited);
		fish += dfsFindMaxFish(grid,r,c - 1,visited);
		return fish;
	}
	int findMaxFish(int[][] grid) {
		int row = grid.length;
		int col = grid[0].length;
		boolean[][] visited = new boolean[row][col];
		int max = 0;
		for (int r = 0; r < row; r++) {
			for (int c = 0; c < col; c++) {
				if (grid[r][c] > 0 && !visited[r][c]) {
					int size = dfsFindMaxFish(grid,r,c,visited);
					if (size > max) {
						max = size;
					}
				}
			}
		}
		return max;
	}
}