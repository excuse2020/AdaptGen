class Solution {
	int index;
	List<List<Integer>> list = new ArrayList<>();
	int[] result;
	boolean valid = true;
	int[] visit;
	void dfs(int start) {
		visit[start] = 1;
		for (int end: list.get(start)) {	
			if (visit[end] == 0) {
				dfs(end);
				if (!valid) {
					return;
				}
			} 
			else if (visit[end] == 1) {
				valid = false;
				return;
			}
		}
		visit[start] = 2;
		result[index--] = start;
	}
	int[] findOrder(int[][] prerequisites, int n) {
		result = new int[n];
		visit = new int[n];
		index = n - 1;
		for (int i = 0; i < n; i++) {
			list.add(new ArrayList<>());
		}
		for (int[] num: prerequisites) {	
			int start = num[1], end = num[0];
			list.get(start).add(end);
		}
		for (int i = 0; i < n && valid; i++) {
			if (visit[i] == 0) {
				dfs(i);
			}
		}
		if (!valid) {
			return new int[0];
		}
		return result;
	}
}