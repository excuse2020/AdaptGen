class Solution {
	long maximum(int nums, int i, int multi, int n, long dp) {
		if (i >= n) {
			return 0;
		}
		if (dp[i][multi + 1] != -1) {
			return dp[i][multi + 1];
		}
		long ntake = maximum(nums,i + 1,-1,n,dp) + (long) nums[i];
		long take = maximum(nums,i + 1,-1 * multi,n,dp) + (long) nums[i] * (-multi);
		return dp[i][multi + 1] = (long) Math.max(ntake,take);
	}
	long maximumTotalCost(int[] nums) {
		int n = nums.length;
		long dp = new long[n][3];
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < 3; j++) {
				dp[i][j] = -1;
			}
		}
		return maximum(nums,0,-1,n,dp);
	}
}