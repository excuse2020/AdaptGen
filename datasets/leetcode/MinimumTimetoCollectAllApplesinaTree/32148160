class Solution {
	int calMinTime(int v, List<List<Integer>> adjList, List<Boolean> hasApple, int vertexCost, int parent) {
		int childrenCost = 0;
		for (int i = 0; i < adjList.get(v).size(); i++) {
			int child = adjList.get(v).get(i);
			if (parent == child) {
				continue;
			}
			childrenCost += calMinTime(child,adjList,hasApple,2,v);
		}
		if (childrenCost == 0 && hasApple.get(v) == false) {
			return 0;
		}
		return (childrenCost + vertexCost);
	}
	int minTime(int n, int[][] edges, List<Boolean> hasApple) {
		List<List<Integer>> adjList = new ArrayList<>();
		for (int i = 0; i < n; i++) {
			adjList.add(new ArrayList<>());
		}
		for (int i = 0; i < edges.length; i++) {
			int u = edges[i][0];
			int v = edges[i][1];
			adjList.get(u).add(v);
			adjList.get(v).add(u);
		}
		return calMinTime(0,adjList,hasApple,0,-1);
	}
}