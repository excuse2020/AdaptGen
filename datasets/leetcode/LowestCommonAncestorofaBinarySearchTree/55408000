class Solution {
	boolean helper(TreeNode root, TreeNode p, TreeNode q, TreeNode[] ans) {
		if (root == null) {
			return false;
		}
		boolean left = helper(root.left,p,q,ans);
		boolean right = helper(root.right,p,q,ans);
		if (left && right) {
			ans[0] = root;
		}
		if ((left || right) && (root.val == p.val || root.val == q.val)) {
			ans[0] = root;
		}
		if (root.val == p.val || root.val == q.val) {
			return true;
		}
		return left || right;
	}
	TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
		TreeNode[] ans = new TreeNode[1];
		helper(root,p,q,ans);
		return ans[0];
	}
}