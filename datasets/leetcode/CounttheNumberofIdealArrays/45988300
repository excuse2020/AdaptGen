class Solution {
	int M = (int) 1e9 + 7;
	long[][] numSeqs;
	long[][] pascal;
	int idealArrays(int n, int maxVal) {
		if (n == 1) {
			return maxVal;
		}
		if (pascal == null) {
			populatePascalTriangle();
		}
		if (numSeqs == null) {
			populateNumSeqs();
		}
		long total = 0;
		for (int end = 1; end <= maxVal; end++) {
			for (int len = 1; len <= 14; len++) {
				long sol = numSeqs[len][end] * pascal[n - 1][len - 1] % M;
				total = (total + sol) % M;
			}
		}
		return (int) total;
	}
	void populateNumSeqs() {
		numSeqs = new long[16][10001];
		for (int len = 1; len <= 14; len++) {
			for (int end = 1; end <= 10000; end++) {
				numSeqs[1][end] = 1;
				for (int nextEnd = end + end; nextEnd <= 10000; nextEnd += end) {
					numSeqs[len + 1][nextEnd] += numSeqs[len][end];
					numSeqs[len + 1][nextEnd] %= M;
				}
			}
		}
	}
	void populatePascalTriangle() {
		pascal = new long[10001][16];
		pascal[0][0] = 1;
		for (int i = 1; i <= 10000; i++) {
			pascal[i][0] = 1;
			for (int q = 1; q <= Math.min(15,i); q++) {
				pascal[i][q] = (pascal[i - 1][q - 1] + pascal[i - 1][q]) % M;
			}
		}
	}
}