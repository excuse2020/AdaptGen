class Solution {
	boolean isPalindrome(long n) {
		return n == reverse(n);
	}
	long reverse(long n) {
		long rev = 0;
		while (n > 0) {
			rev = rev * 10 + n % 10;
			n /= 10;
		}
		return rev;
	}
	int superpalindromesInRange(String left, String right) {
		long l = Long.valueOf(left);
		long r = Long.valueOf(right);
		int count = 0;
		for (int i = 1; i < 100000; i++) {
			StringBuilder sb = new StringBuilder(Integer.toString(i));
			for (int j = sb.length() - 1; j >= 0; j--) {
				sb.append(sb.charAt(j));
			}
			long n = Long.valueOf(sb.toString());
			n *= n;
			if (n > r) {
				break;
			} 
			else if (n >= l && isPalindrome(n)) {
				count++;
			}
		}
		for (int i = 1; i < 100000; i++) {
			StringBuilder sb = new StringBuilder(Integer.toString(i));
			for (int j = sb.length() - 2; j >= 0; j--) {
				sb.append(sb.charAt(j));
			}
			long n = Long.valueOf(sb.toString());
			n *= n;
			if (n > r) {
				break;
			}
			if (n >= l && isPalindrome(n)) {
				count++;
			}
		}
		return count;
	}
}