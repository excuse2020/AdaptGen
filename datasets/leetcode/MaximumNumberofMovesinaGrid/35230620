class Solution {
	int dfs(int i, int j, int[][] grid, boolean[][] vis, int a) {
		if (i < 0 || j < 0 || i >= grid.length || j >= grid[0].length || grid[i][j] <= a || vis[i][j] == true) {
			return 0;
		}
		vis[i][j] = true;
		a = grid[i][j];
		int way1 = 1 + dfs(i - 1,j + 1,grid,vis,a);
		int way2 = 1 + dfs(i,j + 1,grid,vis,a);
		int way3 = 1 + dfs(i + 1,j + 1,grid,vis,a);
		int max_path = Math.max(way3,Math.max(way1,way2));
		return max_path;
	}
	int maxMoves(int[][] grid) {
		int max = 0;
		boolean[][] vis = new boolean[grid.length][grid[0].length];
		for (int i = 0; i < grid.length; i++) {
			int val = dfs(i,0,grid,vis,0);
			if (val > max) {
				max = val;
			}
		}
		return max - 1;
	}
}