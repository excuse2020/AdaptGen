class Solution {
	int INF = (int) 1e6;
	int median(int[] houses, int start, int end) {
		List<Integer> list = new ArrayList<>();
		for (int i = start - 1; i <= end - 1; i++) {
			list.add(houses[i]);
		}
		int n = list.size();
		int median = (list.get((n - 1) / 2) + list.get(n / 2)) / 2;
		int sum = 0;
		for (int i = 0; i < n; i++) {
			sum += Math.abs(list.get(i) - median);
		}
		return sum;
	}
	int minDistance(int[] houses, int k) {
		Arrays.sort(houses);
		int n = houses.length;
		int[][] cost = new int[n + 1][n + 1];
		for (int i = 1; i <= n; i++) {
			for (int j = i + 1; j <= n; j++) {
				cost[i][j] = median(houses,i,j);
			}
		}
		int[] dp = new int[n + 1];
		for (int i = 1; i <= n; i++) {
			dp[i] = cost[1][i];
		}
		for (int K = 2; K <= k; K++) {
			int[] ndp = new int[n + 1];
			for (int i = 1; i <= n; i++) {
				ndp[i] = INF;
				for (int j = 1; j < i; j++) {
					ndp[i] = Math.min(ndp[i],dp[j] + cost[j + 1][i]);
				}
			}
			dp = ndp;
		}
		return dp[n];
	}
}