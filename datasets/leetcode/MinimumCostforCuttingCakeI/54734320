class Solution {
	HashMap<String, Integer> map = new HashMap<>();
	int helper(int xStart, int xEnd, int yStart, int yEnd, int[] horizontalCut, int[] verticalCut) {
		if (xStart == xEnd && yStart == yEnd) {
			return 0;
		}
		String key = xStart + ",";
		if (map.containsKey(key)) {
			return map.get(key);
		}
		int minimum = Integer.MAX_VALUE;
		if (xStart != xEnd) {
			for (int i = xStart; i < xEnd; i++) {
				int temp = helper(xStart,i,yStart,yEnd,horizontalCut,verticalCut) + helper(i + 1,xEnd,yStart,yEnd,horizontalCut,verticalCut);
				minimum = Math.min(temp,minimum);
			}
		}
		if (yStart != yEnd) {
			for (int i = yStart; i < yEnd; i++) {
				int temp = helper(xStart,xEnd,yStart,i,horizontalCut,verticalCut) + helper(xStart,xEnd,i + 1,yEnd,horizontalCut,verticalCut);
				minimum = Math.min(temp,minimum);
			}
		}
		map.put(key,minimum);
		return minimum;
	}
	int minimumCost(int m, int n, int[] horizontalCut, int[] verticalCut) {
		if (m == 1 && n == 1) {
			return 0;
		}
		String key = 0 + ",";
		helper(0,m - 1,0,n - 1,horizontalCut,verticalCut);
		return map.get(key);
	}
}