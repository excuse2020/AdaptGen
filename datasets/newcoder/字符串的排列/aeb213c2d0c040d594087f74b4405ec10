class Solution {
	ArrayList<String> result = new ArrayList<>();
	StringBuilder sb = new StringBuilder();
	ArrayList<String> Permutation(String str) {
		boolean[] used = new boolean[str.length()];
		backTrack(str,used);
		Set<String> set = new HashSet<>(result);
		ArrayList<String> res = new ArrayList<>();
		for (String s: set) {	
			res.add(s);
		}
		return res;
	}
	void backTrack(String str, boolean[] used) {
		if (sb.length() == str.length()) {
			result.add(sb.toString());
			return;
		}
		for (int i = 0; i < str.length(); i++) {
			char c = str.charAt(i);
			if (used[i] == false) {
				used[i] = true;
				sb.append(c);
				backTrack(str,used);
				sb.deleteCharAt(sb.length() - 1);
				used[i] = false;
			}
		}
	}
}