class Solution {
	int[][] spiralMatrix(int m, int n, ListNode head) {
		int[][] matrix = new int[m][n];
		spiralOrder(matrix,head,0,0,0,m - 1,n - 1);
		return matrix;
	}
	void spiralOrder(int[][] matrix, ListNode current, int count, int sRow, int sCol, int eRow, int eCol) {
		if (count == matrix.length * matrix[0].length) {
			return;
		}
		for (int i = sCol; i <= eCol; i++) {
			if (current != null) {
				matrix[sRow][i] = current.val;
				current = current.next;
			} 
			else {
				matrix[sRow][i] = -1;
			}
			count++;
		}
		for (int i = sRow + 1; i <= eRow; i++) {
			if (current != null) {
				matrix[i][eCol] = current.val;
				current = current.next;
			} 
			else {
				matrix[i][eCol] = -1;
			}
			count++;
		}
		for (int i = eCol - 1; i >= sCol && eRow != sRow; i--) {
			if (current != null) {
				matrix[eRow][i] = current.val;
				current = current.next;
			} 
			else {
				matrix[eRow][i] = -1;
			}
			count++;
		}
		for (int i = eRow - 1; i > sRow && eCol != sCol; i--) {
			if (current != null) {
				matrix[i][sCol] = current.val;
				current = current.next;
			} 
			else {
				matrix[i][sCol] = -1;
			}
			count++;
		}
		spiralOrder(matrix,current,count,sRow + 1,sCol + 1,eRow - 1,eCol - 1);
	}
}