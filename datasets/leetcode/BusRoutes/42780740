class Solution {
	int numBusesToDestination(int[][] routes, int source, int target) {
		if (source == target) {
			return 0;
		}
		Map<Integer, Set<Integer>> stopToRoutes = new HashMap<>();
		for (int i = 0; i < routes.length; i++) {
			for (int stop: routes[i]) {	
				stopToRoutes.computeIfAbsent(stop,(k) -> {new HashSet<>()}).add(i);
			}
		}
		Set<Integer> visitedRoutes = new HashSet<>();
		Set<Integer> visitedStops = new HashSet<>();
		Queue<int[]> queue = new LinkedList<>();
		queue.offer(new int{source, 0});
		while (!queue.isEmpty()) {
			int[] current = queue.poll();
			int currentStop = current[0];
			int busesTaken = current[1];
			for (int routeIndex: stopToRoutes.getOrDefault(currentStop,Collections.emptySet())) {	
				if (visitedRoutes.contains(routeIndex)) {
					continue;
				}
				visitedRoutes.add(routeIndex);
				for (int nextStop: routes[routeIndex]) {	
					if (nextStop == target) {
						return busesTaken + 1;
					}
					if (!visitedStops.contains(nextStop)) {
						visitedStops.add(nextStop);
						queue.offer(new int{nextStop, busesTaken + 1});
					}
				}
			}
		}
		return -1;
	}
}