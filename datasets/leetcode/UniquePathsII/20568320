class Solution {
	int count = 0;
	void rb(int[][] grid, boolean[][] visited, int m, int n, int i, int j) {
		if (i < 0 || i >= m || j < 0 || j >= n || grid[i][j] == 1 || visited[i][j]) {
			return;
		}
		if (i == m - 1 && j == n - 1) {
			count++;
			return;
		}
		visited[i][j] = true;
		rb(grid,visited,m,n,i,j + 1);
		rb(grid,visited,m,n,i + 1,j);
		visited[i][j] = false;
	}
	int uniquePathsWithObstacles(int[][] grid) {
		int m = grid.length;
		int n = grid[0].length;
		boolean[][] visited = new boolean[m][n];
		if (grid[0][0] == 1 || grid[m - 1][n - 1] == 1) {
			return 0;
		}
		rb(grid,visited,m,n,0,0);
		return count;
	}
}