class Solution {
	int[][] max;
	boolean[][] path;
	int findMax(int[][] matrix, int i, int j) {
		int m = matrix.length;
		int n = matrix[0].length;
		if (max[i][j] > 0) {
			return max[i][j];
		}
		path[i][j] = true;
		int ans = 1;
		if (i - 1 >= 0 && !path[i - 1][j] && matrix[i][j] < matrix[i - 1][j]) {
			ans = Math.max(ans,findMax(matrix,i - 1,j) + 1);
		}
		if (i + 1 < m && !path[i + 1][j] && matrix[i][j] < matrix[i + 1][j]) {
			ans = Math.max(ans,findMax(matrix,i + 1,j) + 1);
		}
		if (j - 1 >= 0 && !path[i][j - 1] && matrix[i][j] < matrix[i][j - 1]) {
			ans = Math.max(ans,findMax(matrix,i,j - 1) + 1);
		}
		if (j + 1 < n && !path[i][j + 1] && matrix[i][j] < matrix[i][j + 1]) {
			ans = Math.max(ans,findMax(matrix,i,j + 1) + 1);
		}
		max[i][j] = ans;
		path[i][j] = false;
		return ans;
	}
	int solve(int[][] matrix) {
		int m = matrix.length;
		int n = matrix[0].length;
		max = new int[m][n];
		path = new boolean[m][n];
		int ans = 0;
		for (int i = 0; i < m; i++) {
			for (int j = 0; j < n; j++) {
				ans = Math.max(ans,findMax(matrix,i,j));
			}
		}
		return ans;
	}
}