class Solution {
	int[] T;
	int V;
	HashSet<Integer>[] adj;
	int[] flag;
	boolean hasCircle = false;
	ArrayList<Integer> result = new ArrayList<>();
	Stack<Integer> stack = new Stack<>();
	void bfs() {
		Queue<Integer> queue = new LinkedList<>();
		for (int i = 0; i < V; i++) {
			if (T[i] == 0) {
				queue.offer(i);
			}
		}
		int count = 0;
		int u;
		while (!queue.isEmpty()) {
			u = queue.poll();
			count++;
			result.add(u);
			for (Integer v: adj[u]) {	
				if (--T[v] == 0) {
					queue.offer(v);
				}
			}
		}
		hasCircle = (count != V);
	}
	void dfs(int u) {
		flag[u] = 1;
		for (Integer v: adj[u]) {	
			if (flag[v] == 0) {
				dfs(v);
				if (hasCircle) {
					return;
				}
			} 
			else if (flag[v] == 1) {
				hasCircle = true;
				return;
			}
		}
		flag[u] = 2;
		stack.push(u);
	}
	ArrayList<Integer> findOrder(int numProject, ArrayList<ArrayList<Integer>> groups) {
		return solution1(numProject,groups);
	}
	ArrayList<Integer> solution1(int numProject, ArrayList<ArrayList<Integer>> groups) {
		V = numProject;
		T = new int[V];
		adj = new HashSet[V];
		for (int i = 0; i < V; i++) {
			adj[i] = new HashSet<>();
		}
		int u, v;
		for (ArrayList<Integer> group: groups) {	
			u = group.get(1);
			v = group.get(0);
			adj[u].add(v);
			T[v]++;
		}
		bfs();
		if (!hasCircle) {
			return result;
		}
		return new ArrayList<>();
	}
	ArrayList<Integer> solution2(int numProject, ArrayList<ArrayList<Integer>> groups) {
		V = numProject;
		adj = new HashSet[V];
		for (int i = 0; i < V; i++) {
			adj[i] = new HashSet<>();
		}
		flag = new int[V];
		int u, v;
		for (ArrayList<Integer> group: groups) {	
			u = group.get(1);
			v = group.get(0);
			adj[u].add(v);
		}
		for (int i = 0; i < V; i++) {
			if (flag[i] == 0) {
				dfs(i);
			}
		}
		if (!hasCircle) {
			while (!stack.isEmpty()) {
				result.add(stack.pop());
			}
			return result;
		}
		return new ArrayList<>();
	}
}