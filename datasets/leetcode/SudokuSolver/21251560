class Solution {
	boolean helper(char[][] board, int row, int col) {
		if (row == board.length) {
			return true;
		}
		int newRow = 0;
		int newCol = 0;
		if (col == board[0].length - 1) {
			newRow = row + 1;
			newCol = 0;
		} 
		else {
			newRow = row;
			newCol = col + 1;
		}
	}
	boolean isSafe(char[][] board, int row, int col, char t) {
		for (int i = 0; i < board[0].length; i++) {
			if (board[row][i] == t) {
				return false;
			}
			if (board[i][col] == t) {
				return false;
			}
		}
		int startRowOfGrid = (row / 3) * 3;
		int startColOfGrid = (col / 3) * 3;
		for (int i = startRowOfGrid; i < startRowOfGrid + 3; i++) {
			for (int j = startColOfGrid; j < startColOfGrid + 3; j++) {
				if (board[i][j] == t) {
					return false;
				}
			}
		}
		return true;
	}
	void solveSudoku(char[][] board) {
		helper(board,0,0);
	}
}