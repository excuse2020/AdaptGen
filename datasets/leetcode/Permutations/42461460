class Solution {
	List<List<Integer>> permutations = new ArrayList<>();
	void backtrack(int[] nums, boolean[] used, List<Integer> permutation) {
		if (permutation.size() == nums.length) {
			permutations.add(new ArrayList<>(permutation));
			return;
		}
		for (int i = 0; i < nums.length; i++) {
			if (!used[i]) {
				used[i] = true;
				permutation.add(nums[i]);
				backtrack(nums,used,permutation);
				permutation.remove(permutation.size() - 1);
				used[i] = false;
			}
		}
	}
	List<List<Integer>> permute(int[] nums) {
		boolean[] used = new boolean[nums.length];
		backtrack(nums,used,new ArrayList<>());
		return permutations;
	}
}