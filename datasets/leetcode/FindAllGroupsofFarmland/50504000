class Solution {
	int bottomI, bottomJ;
	void dfs(int[][] land, int i, int j) {
		if (i == land.length || j == land[0].length || land[i][j] != 1) {
			return;
		}
		land[i][j] = 0;
		bottomI = Math.max(bottomI,i);
		bottomJ = Math.max(bottomJ,j);
		dfs(land,i + 1,j);
		dfs(land,i,j + 1);
	}
	int[][] findFarmland(int[][] land) {
		List<List<Integer>> lists = new ArrayList<>();
		for (int i = 0; i < land.length; i++) {
			for (int j = 0; j < land[0].length; j++) {
				if (land[i][j] == 1) {
					bottomI = i;
					bottomJ = j;
					dfs(land,i,j);
					List<Integer> list = new ArrayList<>();
					list.add(i);
					list.add(j);
					list.add(bottomI);
					list.add(bottomJ);
					lists.add(list);
				}
			}
		}
		int size = lists.size();
		int i = 0;
		int[][] result = new int[size][4];
		for (List<Integer> l: lists) {	
			result[i][0] = l.get(0);
			result[i][1] = l.get(1);
			result[i][2] = l.get(2);
			result[i][3] = l.get(3);
			i++;
		}
		return result;
	}
}