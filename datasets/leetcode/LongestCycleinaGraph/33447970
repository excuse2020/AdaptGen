class Solution {
	int res = -1;
	Set<Integer> vis = new HashSet<>();
	void dfs(int cur, Map<Integer, Integer> curPath, int[] edges, int count) {
		if (cur == -1) {
			return;
		}
		if (curPath.containsKey(cur)) {
			res = Math.max(res,count - curPath.get(cur));
			return;
		}
		if (vis.contains(cur)) {
			return;
		}
		vis.add(cur);
		curPath.put(cur,count);
		dfs(edges[cur],curPath,edges,count + 1);
	}
	int longestCycle(int[] edges) {
		for (int i = 0; i < edges.length; i++) {
			if (!vis.contains(i)) {
				dfs(i,new HashMap<>(),edges,0);
			}
		}
		return res;
	}
}