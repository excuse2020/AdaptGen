class Solution {
	void backtrack(int[] candidates, int target, List<Integer> path, List<List<Integer>> res, int index) {
		if (target == 0) {
			res.add(new ArrayList<>(path));
			return;
		}
		if (target < 0) {
			return;
		}
		for (int i = index; i < candidates.length; i++) {
			if (i > index && candidates[i] == candidates[i - 1]) {
				continue;
			}
			path.add(candidates[i]);
			backtrack(candidates,target - candidates[i],path,res,i + 1);
			path.remove(path.size() - 1);
		}
	}
	List<List<Integer>> combinationSum2(int[] candidates, int target) {
		List<List<Integer>> res = new ArrayList<List<Integer>>();
		Arrays.sort(candidates);
		List<Integer> path = new ArrayList<Integer>();
		backtrack(candidates,target,path,res,0);
		return res;
	}
}