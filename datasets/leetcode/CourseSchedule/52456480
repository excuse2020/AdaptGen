class Solution {
	boolean canFinish(int numCourses, int[][] prerequisites) {
		ArrayList<ArrayList<Integer>> adjList = new ArrayList<>();
		for (int i = 0; i < numCourses; i++) {
			adjList.add(new ArrayList<>());
		}
		for (int i = 0; i < prerequisites.length; i++) {
			adjList.get(prerequisites[i][0]).add(prerequisites[i][1]);
		}
		int[] indegree = new int[numCourses];
		for (int i = 0; i < numCourses; i++) {
			for (int adj: adjList.get(i)) {	
				indegree[adj]++;
			}
		}
		Queue<Integer> queue = new LinkedList<>();
		for (int i = 0; i < numCourses; i++) {
			if (indegree[i] == 0) {
				queue.add(i);
			}
		}
		ArrayList<Integer> topoSort = new ArrayList<>();
		while (!queue.isEmpty()) {
			int p = queue.poll();
			topoSort.add(p);
			for (int it: adjList.get(p)) {	
				indegree[it]--;
				if (indegree[it] == 0) {
					queue.add(it);
				}
			}
		}
		return topoSort.size() == numCourses;
	}
}