class Solution {
	int depth = 0;
	TreeNode LCA(TreeNode root, int d) {
		if (root == null) {
			return null;
		}
		if (d == depth) {
			return root;
		}
		TreeNode left = LCA(root.left,d + 1);
		TreeNode right = LCA(root.right,d + 1);
		if (left != null && right != null) {
			return root;
		}
		if (left != null) {
			return left;
		}
		if (right != null) {
			return right;
		}
		return null;
	}
	int findDepth(TreeNode root) {
		if (root == null) {
			return 0;
		}
		return 1 + Math.max(findDepth(root.left),findDepth(root.right));
	}
	TreeNode lcaDeepestLeaves(TreeNode root) {
		if (root == null) {
			return null;
		}
		depth = findDepth(root) - 1;
		return LCA(root,0);
	}
}