class Solution {
	List<List<Integer>> closestNodes(TreeNode root, List<Integer> queries) {
		if (root == null || queries == null || queries.size() == 0) {
			return new ArrayList<>();
		}
		List<List<Integer>> result = new ArrayList<>();
		List<TreeNode> list = new ArrayList();
		inorderTraversal(root,list);
		for (int query: queries) {	
			int minValue = getMinValue(list,query);
			int maxValue = getMaxValue(list,query);
			result.add(Arrays.asList(minValue,maxValue));
		}
		return result;
	}
	int getMaxValue(List<TreeNode> list, int query) {
		if (list.get(list.size() - 1).val < query) {
			return -1;
		}
		int low = 0, high = list.size() - 1, index = 0;
		while (low <= high) {
			int mid = low + (high - low) / 2;
			if (list.get(mid).val == query) {
				return query;
			} 
			else if (list.get(mid).val < query) {
				low = mid + 1;
			} 
			else {
				index = mid;
				high = mid - 1;
			}
		}
		return list.get(index).val;
	}
	int getMinValue(List<TreeNode> list, int query) {
		if (list.get(0).val > query) {
			return -1;
		}
		int low = 0, high = list.size() - 1, index = 0;
		while (low <= high) {
			int mid = low + (high - low) / 2;
			if (list.get(mid).val == query) {
				return query;
			} 
			else if (list.get(mid).val > query) {
				high = mid - 1;
			} 
			else {
				index = mid;
				low = mid + 1;
			}
		}
		return list.get(index).val;
	}
	void inorderTraversal(TreeNode root, List<TreeNode> list) {
		if (root == null) {
			return;
		}
		inorderTraversal(root.left,list);
		list.add(root);
		inorderTraversal(root.right,list);
	}
}