class Solution {
	List<String> fullJustify(String[] words, int maxWidth) {
		List<String> list = new ArrayList<>();
		int n = words.length, width = 0, start = -1;
		for (int i = 0; i < n; i++) {
			boolean added = false;
			if (width + words[i].length() <= maxWidth) {
				if (start == -1) {
					start = i;
				}
				width += words[i].length();
				added = true;
				if (i != n - 1) {
					continue;
				}
			}
			process(list,words,start,added ? i + 1 : i,maxWidth,width,i == n - 1 && added);
			width = 0;
			start = -1;
			if (!added) {
				i--;
			}
		}
		return list;
	}
	void process(List<String> list, String[] words, int start, int end, int maxWidth, int width, boolean lastLine) {
		StringBuilder sb = new StringBuilder(maxWidth);
		sb.append(words[start++]);
		int totalSpaces = maxWidth - width;
		char[] rightSpace = spaces(totalSpaces - end + start);
	}
	char[] spaces(int length) {
		char[] arr = new char[length];
	}
}