class Solution {
	PriorityQueue<Integer> bigHeap = new PriorityQueue<>((o1, o2) -> {o2 - o1});
	PriorityQueue<Integer> smallHeap = new PriorityQueue<>(Comparator.comparingInt((o) -> {o}));
	Double GetMedian() {
		return bigHeap.size() > smallHeap.size() ? bigHeap.peek() * 1.0 : (smallHeap.peek() + bigHeap.peek()) / 2.0;
	}
	void Insert(Integer num) {
		if (bigHeap.isEmpty() || bigHeap.peek() > num) {
			bigHeap.add(num);
		} 
		else {
			smallHeap.add(num);
		}
		if (smallHeap.size() > bigHeap.size()) {
			bigHeap.add(smallHeap.poll());
		} 
		else if (smallHeap.size() + 1 < bigHeap.size()) {
			smallHeap.add(bigHeap.poll());
		}
	}
}