class Solution {
	int mostBooked(int n, int[][] meetings) {
		Arrays.sort(meetings,(a, b) -> {a[0] - b[0]});
		List<Integer> rooms = new ArrayList(n);
		for (int i = 0; i < n; i++) {
			rooms.add(i);
		}
		PriorityQueue<Integer> availableRooms = new PriorityQueue<>(rooms);
		PriorityQueue<int[]> inUseRooms = new PriorityQueue<int[]>((a, b) -> {a[0] != b[0] ? a[0] - b[0] : a[1] - b[1]});
		int[] count = new int[n];
		for (int[] meet: meetings) {	
			int start = meet[0], end = meet[1];
			while (!inUseRooms.isEmpty() && start >= inUseRooms.peek()[0]) {
				int room = inUseRooms.poll()[1];
				availableRooms.offer(room);
			}
			if (availableRooms.isEmpty()) {
				int[] inUseRoom = inUseRooms.poll();
				int endTime = inUseRoom[0], room = inUseRoom[1];
				int duration = end - start;
				start = endTime;
				end = endTime + duration;
				availableRooms.offer(room);
			}
			int room = availableRooms.poll();
			inUseRooms.offer(new int{end, room});
			count[room]++;
		}
		int ans = 0, max = count[0];
		for (int i = 1; i < n; i++) {
			if (count[i] > max) {
				max = count[i];
				ans = i;
			}
		}
		return ans;
	}
}