class Solution {
	ListNode reverseBetween(ListNode head, int m, int n) {
		if (head == null || head.next == null || m == n) {
			return head;
		}
		int currentIndex = 1;
		ListNode leftTail = null;
		ListNode middleHead = head;
		while (currentIndex++ < m) {
			leftTail = middleHead;
			middleHead = middleHead.next;
		}
		ListNode reverserCurrent = middleHead;
		ListNode newNext = null;
		ListNode next = reverserCurrent.next;
		while (currentIndex++ <= n) {
			reverserCurrent.next = newNext;
			newNext = reverserCurrent;
			reverserCurrent = next;
			next = reverserCurrent.next;
		}
		reverserCurrent.next = newNext;
		if (leftTail != null) {
			leftTail.next = reverserCurrent;
		} 
		else {
			head = reverserCurrent;
		}
		middleHead.next = next;
		return head;
	}
}