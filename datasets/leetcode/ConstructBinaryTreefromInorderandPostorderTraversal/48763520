class Solution {
	TreeNode buildTree(int[] inorder, int[] postorder) {
		Map<Integer, Integer> mp = new HashMap<>();
		for (int i = 0; i < inorder.length; i++) {
			mp.put(inorder[i],i);
		}
		return createTree(inorder,postorder,mp,0,inorder.length - 1,0,postorder.length - 1);
	}
	TreeNode createTree(int[] io, int[] po, Map<Integer, Integer> mp, int is, int ie, int ps, int pe) {
		if (is > ie || ps > pe) {
			return null;
		}
		int val = po[pe];
		int mid = mp.get(val);
		TreeNode root = new TreeNode(val);
		int left = mid - is;
		int right = ie - mid;
		root.left = createTree(io,po,mp,is,mid - 1,ps,ps + left - 1);
		root.right = createTree(io,po,mp,mid + 1,ie,pe - right,pe - 1);
		return root;
	}
}