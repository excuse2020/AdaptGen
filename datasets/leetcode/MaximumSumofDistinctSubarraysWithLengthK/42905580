class Solution {
	long maximumSubarraySum(int[] nums, int k) {
		Map<Integer, Integer> map = new HashMap<>();
		int start = 0;
		long maxSum = 0;
		long sum = 0;
		for (int i = 0; i < nums.length; ++i) {
			if (!map.containsKey(nums[i])) {
				map.put(nums[i],1);
				sum += nums[i];
			} 
			else {
				int count = map.get(nums[i]);
				while (nums[start] != nums[i]) {
					sum = sum - nums[start];
					map.remove(nums[start]);
					++start;
				}
				++start;
			}
			if (map.size() == k) {
				maxSum = maxSum < sum ? sum : maxSum;
			} 
			else if (map.size() > k) {
				while (map.size() > k) {
					map.remove(nums[start]);
					sum = sum - nums[start];
					++start;
				}
				if (map.size() == k) {
					maxSum = maxSum < sum ? sum : maxSum;
				}
			}
		}
		return maxSum;
	}
}