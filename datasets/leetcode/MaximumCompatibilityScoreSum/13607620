class Solution {
	int dfs(int[][] s, int[][] m, boolean[] b, int o) {
		int sum = 0;
		if (o == s.length) {
			return 0;
		}
		for (int i = 0; i < m.length; i++) {
			if (b[i]) {
				continue;
			}
			int ss = 0;
			for (int j = 0; j < m[0].length; j++) {
				if (s[o][j] == m[i][j]) {
					ss++;
				}
			}
			b[i] = true;
			sum = Math.max(sum,ss + dfs(s,m,b,o + 1));
			b[i] = false;
		}
		return sum;
	}
	int maxCompatibilitySum(int[][] students, int[][] mentors) {
		return dfs(students,mentors,new boolean[mentors.length],0);
	}
}