class Solution {
	boolean[] trackPath;
	boolean[] visited;
	boolean canFinish(int n, int[][] prerequisites) {
		visited = new boolean[n];
		trackPath = new boolean[n];
		ArrayList<ArrayList<Integer>> graph = new ArrayList<>();
		IntStream.range(0,n).forEach((i) -> {graph.add(new ArrayList<>())});
		for (int[] edge: prerequisites) {	
			graph.get(edge[1]).add(edge[0]);
		}
		for (int i = 0; i < visited.length; i++) {
			if (!visited[i]) {
				if (dfs(i,graph)) {
					return false;
				}
			}
		}
		return true;
	}
	boolean dfs(int src, ArrayList<ArrayList<Integer>> graph) {
		if (trackPath[src]) {
			return true;
		}
		if (visited[src]) {
			return false;
		}
		visited[src] = true;
		trackPath[src] = true;
		boolean ans = false;
		for (int nbr: graph.get(src)) {	
			ans = ans || dfs(nbr,graph);
		}
		trackPath[src] = false;
		return ans;
	}
}