class Solution {
	int maxPerformance(int n, int[] speed, int[] efficiency, int k) {
		int p = new int[n][2];
		for (int i = 0; i < n; i++) {
			p[i][0] = speed[i];
			p[i][1] = efficiency[i];
		}
		Arrays.sort(p,(a, b) -> {b[1] - a[1]});
		PriorityQueue<Integer> pq = new PriorityQueue<>();
		long sum = 0l;
		long mod = 1000000007l;
		long ans = 0;
		for (int i = 0; i < n; i++) {
			if (pq.size() < k) {
				sum += p[i][0];
				pq.add(p[i][0]);
				ans = Math.max(ans,sum * p[i][1]);
			} 
			else {
				sum += p[i][0] - pq.poll();
				pq.add(p[i][0]);
				ans = Math.max(ans,sum * p[i][1]);
			}
		}
		return (int) (ans % mod);
	}
}