class Solution {
	int countCompleteComponents(int n, int[][] edges) {
		ArrayList<ArrayList<Integer>> adj = new ArrayList<>();
		for (int i = 0; i < n; i++) {
			adj.add(new ArrayList<>());
		}
		for (int i = 0; i < edges.length; i++) {
			adj.get(edges[i][0]).add(edges[i][1]);
			adj.get(edges[i][1]).add(edges[i][0]);
		}
		List<List<Integer>> node = new ArrayList<>();
		int[] vis = new int[n];
		Arrays.fill(vis,0);
		for (int i = 0; i < n; i++) {
			if (vis[i] == 0) {
				List<Integer> temp = new ArrayList<>();
				node.add(dfs(i,adj,vis,temp));
			}
		}
		int ans = 0;
		for (int i = 0; i < node.size(); i++) {
			List<Integer> comp = node.get(i);
			int no_of_edges = 0;
			for (int j = 0; j < comp.size(); j++) {
				no_of_edges += adj.get(comp.get(j)).size();
			}
			int nodes = comp.size();
			int expected = nodes * (nodes - 1) / 2;
			int current = no_of_edges / 2;
			if (current == expected) {
				ans++;
			}
		}
		return ans;
	}
	List<Integer> dfs(int node, ArrayList<ArrayList<Integer>> adj, int[] vis, List<Integer> list) {
		list.add(node);
		vis[node] = 1;
		for (int i: adj.get(node)) {	
			if (vis[i] == 0) {
				dfs(i,adj,vis,list);
			}
		}
		return list;
	}
}