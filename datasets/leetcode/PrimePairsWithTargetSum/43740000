class Solution {
	boolean prime;
	List<List<Integer>> findPrimePairs(int n) {
		List<List<Integer>> ans = new ArrayList<>();
		prime = new boolean[n + 1];
		Arrays.fill(prime,true);
		prime[0] = false;
		prime[1] = false;
		sieveOfEratho(n);
		int rng = (n / 2);
		for (int i = 1; i <= rng; i++) {
			if (prime[i] && prime[n - i]) {
				ans.add(new ArrayList<>());
				ans.get(ans.size() - 1).add(i);
				ans.get(ans.size() - 1).add(n - i);
			}
		}
		return ans;
	}
	void sieveOfEratho(int n) {
		for (int i = 2; i <= Math.sqrt(n); i++) {
			for (int j = i * i; j <= n; j += i) {
				prime[j] = false;
			}
		}
	}
}