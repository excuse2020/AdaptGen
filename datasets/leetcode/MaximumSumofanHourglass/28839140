class Solution {
	boolean exDown(int num, int size) {
		if (num < size - 1) {
			return true;
		}
		return false;
	}
	boolean exLeft(int num) {
		if (num > 0) {
			return true;
		}
		return false;
	}
	boolean exRight(int num, int size) {
		if (num < size - 1) {
			return true;
		}
		return false;
	}
	boolean exUp(int num) {
		if (num > 0) {
			return true;
		}
		return false;
	}
	int maxSum(int[][] grid) {
		int depth = grid.length;
		int length = grid[0].length;
		int[][] ans = new int[depth][length];
		int mx = Integer.MIN_VALUE;
		for (int i = 0; i < depth; i++) {
			for (int j = 0; j < length; j++) {
				int res = 0;
				if (exUp(i) & exDown(i,depth)) {
					res = grid[i - 1][j - 1] + grid[i - 1][j];
				}
				if (res > mx) {
					mx = res;
				}
			}
		}
		return mx;
	}
}