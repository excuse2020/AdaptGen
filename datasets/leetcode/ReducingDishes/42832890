class Solution {
	int maxSatisfaction(int[] satisfaction) {
		Arrays.sort(satisfaction);
		return maxSatisfactionBU(satisfaction);
	}
	int maxSatisfactionBU(int[] arr) {
		int n = arr.length;
		int maxVlaue = 0;
		for (int i = 0; i < n; i++) {
			int cook = 1;
			int sum = 0;
			for (int j = i; j < n; j++) {
				sum += arr[j] * cook;
				cook++;
			}
			maxVlaue = Math.max(sum,maxVlaue);
		}
		return maxVlaue;
	}
	int maxSatisfactionR(int index, int counter, int[] arr) {
		if (index > arr.length - 1) {
			return 0;
		}
		int take = (counter * arr[index]) + maxSatisfactionR(index + 1,counter + 1,arr);
		int notTake = maxSatisfactionR(index + 1,counter,arr);
		return (int) Math.max(take,notTake);
	}
	int maxSatisfactionTD(int index, int counter, int[] arr, int[][] dp) {
		if (index > arr.length - 1) {
			return 0;
		}
		if (dp[index][counter] != -1) {
			return dp[index][counter];
		}
		int take = (counter * arr[index]) + maxSatisfactionTD(index + 1,counter + 1,arr,dp);
		int notTake = maxSatisfactionTD(index + 1,counter,arr,dp);
		int ans = (int) Math.max(take,notTake);
		dp[index][counter] = ans;
		return ans;
	}
}