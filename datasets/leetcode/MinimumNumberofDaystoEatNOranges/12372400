class Solution {
	int minDays(int n) {
		Deque<Integer> queue = new LinkedList<>();
		queue.offerLast(n);
		Set<Integer> visited = new HashSet<>();
		int day = 0;
		while (!queue.isEmpty()) {
			int size = queue.size();
			while (size-- > 0) {
				int curr = queue.pollFirst();
				if (!visited.add(curr)) {
					continue;
				}
				if (curr == 0) {
					return day;
				}
				if (curr % 3 == 0) {
					queue.offerLast(curr / 3);
				}
				if (curr % 2 == 0) {
					queue.offerLast(curr / 2);
				}
				queue.offerLast(curr - 1);
			}
			day++;
		}
		return -1;
	}
}