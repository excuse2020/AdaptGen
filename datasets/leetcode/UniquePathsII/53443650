class Solution {
	int unique(int i, int j, int n, int m, int[][] obstacleGrid, int[][] memo) {
		if (i >= n || j >= m || obstacleGrid[i][j] == 1) {
			return 0;
		}
		if (i == n - 1 && j == m - 1) {
			return 1;
		}
		if (memo[i][j] != -1) {
			return memo[i][j];
		}
		memo[i][j] = unique(i + 1,j,n,m,obstacleGrid,memo) + unique(i,j + 1,n,m,obstacleGrid,memo);
		return memo[i][j];
	}
	int uniquePathsWithObstacles(int[][] obstacleGrid) {
		int n = obstacleGrid.length;
		int m = obstacleGrid[0].length;
		int[][] memo = new int[n][m];
		for (int[] row: memo) {	
			Arrays.fill(row,-1);
		}
		return unique(0,0,obstacleGrid.length,obstacleGrid[0].length,obstacleGrid,memo);
	}
}