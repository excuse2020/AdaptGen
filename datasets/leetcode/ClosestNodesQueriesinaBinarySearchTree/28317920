class Solution {
	List<List<Integer>> closestNodes(TreeNode root, List<Integer> queries) {
		List<List<Integer>> res = new ArrayList<>();
		List<Integer> inorder = new ArrayList<>();
		inOrderTraversal(root,inorder);
		int[] arr = inorder.stream().mapToInt().toArray();
		int n = arr.length;
		for (int i = 0; i < queries.size(); i++) {
			int target = queries.get(i);
			int a = findMin(arr,target,0,n - 1);
			int b = findMax(arr,target,0,n - 1);
			int x = (a == -1) ? -1 : arr[a];
			int y = (b == -1) ? -1 : arr[b];
			res.add(Arrays.asList(x,y));
		}
		return res;
	}
	int findMax(int[] arr, int target, int low, int high) {
		int ans = -1;
		while (low <= high) {
			int mid = low + (high - low) / 2;
			if (arr[mid] < target) {
				low = mid + 1;
			} 
			else if (arr[mid] > target) {
				ans = mid;
				high = mid - 1;
			} 
			else if (arr[mid] == target) {
				ans = mid;
				break;
			}
		}
		return ans;
	}
	int findMin(int[] arr, int target, int low, int high) {
		int ans = -1;
		while (low <= high) {
			int mid = low + (high - low) / 2;
			if (arr[mid] < target) {
				ans = mid;
				low = mid + 1;
			} 
			else if (arr[mid] > target) {
				high = mid - 1;
			} 
			else if (arr[mid] == target) {
				ans = mid;
				break;
			}
		}
		return ans;
	}
	void inOrderTraversal(TreeNode root, List<Integer> list) {
		if (root == null) {
			return;
		}
		inOrderTraversal(root.left,list);
		list.add(root.val);
		inOrderTraversal(root.right,list);
	}
}