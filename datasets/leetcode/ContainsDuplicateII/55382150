class Solution {
	boolean check(HashMap<Integer, List<Integer>> stats, int k) {
		for (Map.Entry<Integer, List<Integer>> entry: stats.entrySet()) {	
			var key = entry.getKey();
			var value = entry.getValue();
			for (int i = 0; i < value.size() - 1; i++) {
				if (value.get(i + 1) - value.get(i) <= k) {
					return true;
				}
			}
		}
		return false;
	}
	boolean containsNearbyDuplicate(int[] nums, int k) {
		var stats = new HashMap<Integer, List<Integer>>();
		for (int i = 0; i < nums.length; i++) {
			var current = stats.getOrDefault(nums[i],new ArrayList<Integer>());
			current.add(i);
			stats.put(nums[i],current);
		}
		return check(stats,k);
	}
}