class Solution {
	int longestStrChain(String[] words) {
		int n = words.length;
		Arrays.sort(words,(a, b) -> {Integer.compare(a.length(),b.length())});
		int[] dp = new int[n];
		Arrays.fill(dp,1);
		int res = 1;
		for (int i = 1; i < n; i++) {
			for (int j = 0; j < i; j++) {
				if (dp[i] < dp[j] + 1 && words[i].length() == words[j].length() + 1 && maintainOrder(words[j],words[i])) {
					dp[i] = dp[j] + 1;
					res = Math.max(res,dp[i]);
				}
			}
		}
		return res;
	}
	boolean maintainOrder(String first, String second) {
		System.out.println("first: " + first);
		for (int i = 0; i < second.length(); i++) {
			String str = second.substring(0,i) + second.substring(i + 1);
			if (str.equals(first)) {
				return true;
			}
		}
		return false;
	}
}