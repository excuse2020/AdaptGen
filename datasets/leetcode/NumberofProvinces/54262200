class Solution {
	void bfs(int[] visited, int[][] isConnected, int node) {
		Queue<Integer> qu = new LinkedList<Integer>();
		qu.add(node);
		while (qu.size() > 0) {
			int temp = qu.poll();
			for (int j = 0; j < isConnected.length; j++) {
				if (visited[j] == 0 && isConnected[temp][j] == 1) {
					visited[j] = 1;
					qu.add(j);
				}
			}
		}
	}
	int findCircleNum(int[][] isConnected) {
		int visited = new int[isConnected.length];
		Arrays.fill(visited,0);
		int provinces = 0;
		for (int i = 0; i < isConnected.length; i++) {
			if (visited[i] == 0) {
				bfs(visited,isConnected,i);
				provinces++;
			}
		}
		return provinces;
	}
}