class Solution {
	int mod = (int) (Math.pow(10,9) + 7);
	int numOfSubarrays(int[] arr) {
		int[] odd = new int[arr.length];
		int[] even = new int[arr.length];
		int count = 0;
		odd[0] = arr[0] % 2 == 1 ? 1 : 0;
		even[0] = 1 - odd[0];
		count = odd[0];
		for (int i = 1; i < arr.length; i++) {
			if (arr[i] % 2 == 0) {
				even[i] = even[i - 1] + 1;
				odd[i] = odd[i - 1];
			} 
			else {
				odd[i] = even[i - 1] + 1;
				even[i] = odd[i - 1];
			}
			count = (count + odd[i]) % mod;
		}
		return count;
		int odd = arr[0] % 2 == 1 ? 1 : 0;
		int even = 1 - odd;
		int count = odd;
		for (int i = 1; i < arr.length; i++) {
			if (arr[i] % 2 == 0) {
				even = even + 1;
			} 
			else {
				int temp = odd;
				odd = even + 1;
				even = temp;
			}
			count = (count + odd) % mod;
		}
		return count;
	}
}