class Solution {
	int minPathSum(int[][] grid) {
		int m = grid.length;
		int n = grid[0].length;
		int[][] dp = new int[m][n];
		if (m == 1 && n == 1) {
			return grid[0][0];
		}
		if (m == 1) {
			int sum = 0;
			for (int i = 0; i < n; i++) {
				sum += grid[0][i];
			}
			return sum;
		}
		if (n == 1) {
			int sum = 0;
			for (int j = 0; j < m; j++) {
				sum += grid[j][0];
			}
			return sum;
		}
		dp[0][0] = grid[0][0];
		for (int i = 0; i < m; i++) {
			for (int j = 0; j < n; j++) {
				if (i != 0 && j != 0) {
					dp[i][j] = Math.min(dp[i - 1][j] + grid[i][j],dp[i][j - 1] + grid[i][j]);
				}
				if (i == 0 && j != 0) {
					dp[0][j] = dp[0][j - 1] + grid[0][j];
				}
				if (i != 0 && j == 0) {
					dp[i][0] = dp[i - 1][0] + grid[i][0];
				}
			}
		}
		return dp[m - 1][n - 1];
	}
}