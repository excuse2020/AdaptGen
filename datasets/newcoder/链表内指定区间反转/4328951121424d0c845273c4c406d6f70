class Solution {
	ListNode reverseBetween(ListNode head, int m, int n) {
		if (m == n) {
			return head;
		}
		ListNode res = new ListNode(0);
		int count = 1;
		List<Integer> list1 = new ArrayList<Integer>();
		List<Integer> list2 = new ArrayList<Integer>();
		ListNode pHead = head;
		while (pHead != null) {
			if (count < m) {
				list1.add(pHead.val);
			}
			if (count > n) {
				list1.add(pHead.val);
			} 
			else {
				list2.add(pHead.val);
			}
			count++;
			pHead = pHead.next;
		}
		Collections.reverse(list2);
		ListNode tmp = res;
		for (int i = 0; i < m - 1; i++) {
			ListNode node = new ListNode(list1.get(i));
			tmp.next = node;
			tmp = node;
		}
		for (int i = 0; i < n - m + 1; i++) {
			ListNode node = new ListNode(list2.get(i));
			tmp.next = node;
			tmp = node;
		}
		for (int i = m - 1; i < list1.size(); i++) {
			ListNode node = new ListNode(list1.get(i));
			tmp.next = node;
			tmp = node;
		}
		return res.next;
	}
}