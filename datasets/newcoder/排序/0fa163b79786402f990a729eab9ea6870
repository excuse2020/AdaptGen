class Solution {
	int[] MySort(int[] arr) {
		qsort(arr,0,arr.length - 1);
		return arr;
	}
	void qsort(int[] a, int l, int r) {
		int mid = a[l];
		int left = l;
		int right = r;
		int temp = 0;
		int i = 0;
		while (left < right) {
			while (a[right] >= mid && left < right) {
				right--;
			}
			while (a[left] <= mid && left < right) {
				left++;
			}
			temp = a[left];
			a[left] = a[right];
			a[right] = temp;
		}
		temp = a[left];
		a[left] = a[l];
		a[l] = temp;
		if (left > l) {
			qsort(a,l,left - 1);
		}
		if (right < r) {
			qsort(a,right + 1,r);
		}
	}
	void qsort2(int[] a, int l, int r) {
		int mid = a[l];
		int left = l;
		int right = r;
		int temp = 0;
		int i = 0;
		while (left < right) {
			while (a[left] < mid && left < right) {
				left++;
			}
			while (a[right] > mid && left < right) {
				right--;
			}
			temp = a[left];
			a[left] = a[right];
			a[right] = temp;
			if (a[left] == mid && a[right] == mid) {
				left++;
			} 
			else if (a[left] != mid && a[right] == mid) {
				left++;
			} 
			else if (a[left] == mid && a[right] != mid) {
				right--;
			} 
			else if (a[left] != mid && a[right] != mid) {
				left++;
				right--;
			}
		}
		if (left > l) {
			qsort(a,l,left - 1);
		}
		if (right < r) {
			qsort(a,right + 1,r);
		}
	}
}