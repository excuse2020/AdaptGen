class Solution {
	int calclulatebottomright(int[][] ans, int i, int j) {
		Set<Integer> s = new HashSet<>();
		int count = 0;
		while (i + 1 < ans.length && j + 1 < ans[0].length) {
			int a = ans[i + 1][j + 1];
			if (s.add(a)) {
				count++;
			}
			i++;
			j++;
		}
		return count;
	}
	int calclulatetopleft(int[][] ans, int i, int j) {
		Set<Integer> s = new HashSet<>();
		int count = 0;
		while (i - 1 >= 0 && j - 1 >= 0) {
			int a = ans[i - 1][j - 1];
			if (s.add(a)) {
				count++;
			}
			i--;
			j--;
		}
		return count;
	}
	int[][] differenceOfDistinctValues(int[][] grid) {
		int ans = new int[grid.length][grid[0].length];
		for (int i = 0; i < grid.length; i++) {
			for (int j = 0; j < grid[0].length; j++) {
				int c = calclulatetopleft(grid,i,j);
				int d = calclulatebottomright(grid,i,j);
				ans[i][j] = Math.abs(c - d);
			}
		}
		return ans;
	}
}