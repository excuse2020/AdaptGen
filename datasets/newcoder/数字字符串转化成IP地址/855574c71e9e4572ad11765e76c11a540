class Solution {
	void dfs(String s, int len, int split, int begin, Deque<String> path, List<String> res) {
		if (begin == len) {
			if (split == 4) {
				res.add(String.join(".",path));
			}
			return;
		}
		if (len - begin < (4 - split) || len - begin > 3 * (4 - split)) {
			return;
		}
		for (int i = 0; i < 3; i++) {
			if (begin + i >= len) {
				break;
			}
			int ipSegment = judgeIfIpSegment(s,begin,begin + i);
			if (ipSegment != -1) {
				path.addLast(ipSegment + "");
				dfs(s,len,split + 1,begin + i,path,res);
				path.removeLast();
			}
		}
	}
	int judgeIfIpSegment(String s, int left, int right) {
		int len = right - left + 1;
		if (len > 1 && s.charAt(left) == '0') {
			return -1;
		}
		int res = 0;
		for (int i = left; i <= right; i++) {
			res = res * 10 + s.charAt(i) - '0';
		}
		if (res > 255) {
			return -1;
		}
		return res;
	}
	ArrayList<String> restoreIpAddresses(String s) {
		int len = s.length();
		ArrayList<String> res = new ArrayList<>();
		if (len < 4 || len > 12) {
			return res;
		}
		Deque<String> path = new ArrayDeque<>(4);
		int splitTimes = 0;
		dfs(s,len,splitTimes,0,path,res);
		return res;
	}
}