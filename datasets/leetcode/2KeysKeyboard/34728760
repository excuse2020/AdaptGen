class Solution {
	Integer[][] dp;
	int findMinSteps(int n, int currString, int copy) {
		if (currString == n) {
			return 0;
		}
		if (dp[currString][copy] != null) {
			return dp[currString][copy];
		}
		int min = Integer.MAX_VALUE - 1;
		if (currString + copy <= n && copy != 0) {
			min = Math.min(min,findMinSteps(n,currString + copy,copy) + 1);
		}
		if (currString > copy) {
			min = Math.min(min,findMinSteps(n,currString,currString) + 1);
		}
		dp[currString][copy] = min;
		return min;
	}
	int minSteps(int n) {
		this.dp = new Integer[n][n];
		return findMinSteps(n,1,0);
	}
}