class Solution {
	int[] memo;
	int n;
	int getNextIndex(List<List<Integer>> jobs, int l, int currentJobEnd) {
		int r = n - 1;
		int result = n + 1;
		while (l <= r) {
			int mid = l + (r - l) / 2;
			if (jobs.get(mid).get(0) >= currentJobEnd) {
				result = mid;
				r = mid - 1;
			} 
			else {
				l = mid + 1;
			}
		}
		return result;
	}
	int jobScheduling(int[] startTime, int[] endTime, int[] profit) {
		n = startTime.length;
		List<List<Integer>> jobs = new ArrayList<>();
		for (int i = 0; i < n; i++) {
			List<Integer> job = new ArrayList<>(Arrays.asList(startTime[i],endTime[i],profit[i]));
			jobs.add(job);
		}
		jobs.sort((a, b) -> {a.get(0) - b.get(0)});
		memo = new int[n];
		Arrays.fill(memo,0);
		return solve(jobs,0);
	}
	int solve(List<List<Integer>> jobs, int idx) {
		if (idx >= n) {
			return 0;
		}
		if (memo[idx] != 0) {
			return memo[idx];
		}
		int next = getNextIndex(jobs,idx + 1,jobs.get(idx).get(1));
		int taken = jobs.get(idx).get(2) + solve(jobs,next);
		int notTaken = solve(jobs,idx + 1);
		memo[idx] = Math.max(taken,notTaken);
		return memo[idx];
	}
}