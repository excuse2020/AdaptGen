class Solution {
	TreeNode balanceBST(TreeNode root) {
		List<Integer> inorder = new ArrayList<>();
		inorderTraversal(root,inorder);
		return createBalancedBST(inorder,0,inorder.size() - 1);
	}
	TreeNode createBalancedBST(List<Integer> inorder, int start, int end) {
		if (start > end) {
			return null;
		}
		int mid = start + (end - start) / 2;
		TreeNode leftSubtree = createBalancedBST(inorder,start,mid - 1);
		TreeNode rightSubtree = createBalancedBST(inorder,mid + 1,end);
		TreeNode node = new TreeNode(inorder.get(mid), leftSubtree, rightSubtree);
		return node;
	}
	void inorderTraversal(TreeNode root, List<Integer> inorder) {
		if (root == null) {
			return;
		}
		inorderTraversal(root.left,inorder);
		inorder.add(root.val);
		inorderTraversal(root.right,inorder);
	}
}