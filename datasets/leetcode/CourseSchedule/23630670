class Solution {
	boolean canFinish(int numCourses, int[][] prerequisites) {
		int[][] graph = new int[numCourses][numCourses];
		int[] indegree = new int[numCourses];
		int n = prerequisites.length;
		for (int i = 0; i < n; i++) {
			int u = prerequisites[i][0];
			int v = prerequisites[i][1];
			graph[v][u] = 1;
			indegree[u]++;
		}
		return topologicalSort(graph,indegree);
	}
	boolean topologicalSort(int[][] graph, int[] indegree) {
		Queue<Integer> queue = new LinkedList<Integer>();
		int totalCourses = graph.length;
		for (int i = 0; i < totalCourses; i++) {
			if (indegree[i] == 0) {
				queue.add(i);
			}
		}
		int coursesFinished = 0;
		while (!queue.isEmpty()) {
			int course = queue.poll();
			coursesFinished += 1;
			for (int nextCourse = 0; nextCourse < totalCourses; nextCourse++) {
				if (graph[course][nextCourse] == 1) {
					indegree[nextCourse]--;
					if (indegree[nextCourse] == 0) {
						queue.add(nextCourse);
					}
				}
			}
		}
		return coursesFinished == totalCourses;
	}
}