class Solution {
	int findKth(int[] a, int n, int K) {
		quicksort(a,0,n - 1,K);
		return a[K - 1];
	}
	int partion(int[] a, int low, int high) {
		int pivot = a[low];
		while (low < high) {
			while (low < high && a[high] <= pivot) {
				--high;
			}
			a[low] = a[high];
			while (low < high && a[low] >= pivot) {
				++low;
			}
			a[high] = a[low];
			a[low] = pivot;
		}
		return low;
	}
	void quicksort(int[] a, int low, int high, int K) {
		if (low < high) {
			int mid = partion(a,low,high);
			if (mid == K - 1) {
				return;
			} 
			else if (mid < K - 1) {
				quicksort(a,mid + 1,high,K);
			} 
			else {
				quicksort(a,low,mid - 1,K);
			}
		}
	}
}