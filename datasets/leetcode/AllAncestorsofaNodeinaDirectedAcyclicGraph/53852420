class Solution {
	List<List<Integer>> getAncestors(int n, int[][] edges) {
		List<List<Integer>> way = new ArrayList<>();
		for (int i = 0; i < n; i++) {
			way.add(new ArrayList<>());
		}
		int[] degree = new int[n];
		for (int[] e: edges) {	
			way.get(e[0]).add(e[1]);
			degree[e[1]]++;
		}
		Queue<Integer> queue = new LinkedList<>();
		for (int i = 0; i < n; i++) {
			if (degree[i] == 0) {
				queue.add(i);
			}
		}
		List<Set<Integer>> pre = new ArrayList<>();
		for (int i = 0; i < n; i++) {
			pre.add(new HashSet<>());
		}
		while (!queue.isEmpty()) {
			int u = queue.poll();
			for (int v: way.get(u)) {	
				degree[v]--;
				pre.get(v).add(u);
				for (int p: pre.get(u)) {	
					pre.get(v).add(p);
				}
				if (degree[v] == 0) {
					queue.add(v);
				}
			}
		}
		List<List<Integer>> answer = new ArrayList<>();
		for (int i = 0; i < n; i++) {
			List<Integer> list = new ArrayList<>(pre.get(i));
			Collections.sort(list);
			answer.add(list);
		}
		return answer;
	}
}