class Solution {
	ListNode findMid(ListNode start, ListNode end) {
		ListNode slow = start;
		ListNode fast = start;
		while (fast != end && fast.next != end) {
			slow = slow.next;
			fast = fast.next;
			if (fast != null) {
				fast = fast.next;
			}
		}
		return slow;
	}
	TreeNode solve(ListNode start, ListNode end) {
		if (start == end) {
			return null;
		}
		ListNode mid = findMid(start,end);
		if (mid == null) {
			return null;
		}
		TreeNode root = new TreeNode(mid.val);
		root.left = solve(start,mid);
		root.right = solve(mid.next,end);
		return root;
	}
	TreeNode sortedListToBST(ListNode head) {
		return solve(head,null);
	}
}