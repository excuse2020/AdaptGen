class Solution {
	List<Integer> topStudents(String[] positive_feedback, String[] negative_feedback, String[] report, int[] student_id, int k) {
		Set<String> positive = Arrays.stream(positive_feedback).collect(Collectors.toSet()), negative = Arrays.stream(negative_feedback).collect(Collectors.toSet());
		PriorityQueue<int[]> pq = new PriorityQueue<>(k, new Comparator<int[]>());
		for (int i = 0; i < report.length; i++) {
			String[] words = report[i].split(" ");
			int score = 0;
			for (String w: words) {	
				if (positive.contains(w)) {
					score += 3;
				} 
				else if (negative.contains(w)) {
					score--;
				}
			}
			pq.offer(new int{student_id[i], score});
			if (pq.size() > k) {
				pq.poll();
			}
		}
		LinkedList<Integer> result = new LinkedList<>();
		while (!pq.isEmpty()) {
			result.addFirst(pq.poll()[0]);
		}
		return result;
	}
}