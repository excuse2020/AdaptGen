class Solution {
	int[] arr;
	int find(int num) {
		int parent = arr[num];
		while (arr[parent] != parent) {
			parent = arr[parent];
		}
		return parent;
	}
	int[] findRedundantConnection(int[][] edges) {
		int n = edges.length;
		int[] res = new int[2];
		arr = new int[n + 1];
		for (int i = 1; i <= n; i++) {
			arr[i] = i;
		}
		for (int[] edge: edges) {	
			if (!union(edge[0],edge[1])) {
				res[0] = edge[0];
				res[1] = edge[1];
			}
		}
		return res;
	}
	boolean union(int parent, int child) {
		int parentOfChild = find(child);
		if (find(parent) == parentOfChild) {
			return false;
		}
		arr[parentOfChild] = parent;
		return true;
	}
}