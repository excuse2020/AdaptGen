class Solution {
	int mod = 1000000007;
	int gcd(int a, int b) {
		if (a == b) {
			return a;
		}
		if (a == 0) {
			return b;
		}
		if (b == 0) {
			return a;
		}
		if (a > b) {
			return gcd(a % b,b);
		}
		return gcd(a,b % a);
	}
	int nthMagicalNumber(int n, int a, int b) {
		int hcf = gcd(a,b);
		int lcm = (a * b) / hcf;
		long l = Math.min(a,b);
		long r = Math.max(a,b);
		r = r * n;
		while (l <= r) {
			long mid = l + (r - l) / 2;
			long count = (mid / a) + (mid / b) - (mid / lcm);
			if (count == n) {
				if (mid % a == 0 || mid % b == 0) {
					return (int) (mid % mod);
				} 
				else {
					r = mid - 1;
				}
			} 
			else if (count < n) {
				l = mid + 1;
			} 
			else {
				r = mid - 1;
			}
		}
		return (int) (l % mod);
	}
}