class Solution {
	TreeNode buildTree(int[] inorder, int[] postorder) {
		HashMap<Integer, Integer> map = new HashMap<>();
		for (int i = 0; i < inorder.length; i++) {
			map.put(inorder[i],i);
		}
		return helper(inorder,0,inorder.length - 1,postorder,postorder.length - 1,0,map);
	}
	TreeNode helper(int[] inorder, int instart, int inend, int[] postorder, int poststart, int postend, HashMap<Integer, Integer> map) {
		if (instart > inend || postend > poststart) {
			return null;
		}
		TreeNode root = new TreeNode(postorder[poststart]);
		int inRoot = map.get(root.val);
		int numleft = inend - inRoot;
		root.right = helper(inorder,inRoot + 1,inend,postorder,poststart - 1,poststart - numleft,map);
		root.left = helper(inorder,instart,inRoot - 1,postorder,poststart - numleft,postend,map);
		return root;
	}
}