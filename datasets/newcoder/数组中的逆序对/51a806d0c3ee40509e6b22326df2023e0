class Solution {
	int count = 0;
	int InversePairs(int[] nums) {
		int n = nums.length;
		if (n == 1) {
			return 0;
		}
		mergeSort(nums,0,n - 1);
		return count;
	}
	void merge(int[] nums, int start, int mid, int end) {
		int[] temp = new int[end - start + 1];
		int left = start, right = mid + 1, i = 0;
		while (left <= mid && right <= end) {
			if (nums[left] <= nums[right]) {
				temp[i++] = nums[left++];
			} 
			else {
				temp[i++] = nums[right++];
				count = (count + mid - left + 1) % 1000000007;
			}
		}
		while (left <= mid) {
			temp[i++] = nums[left++];
		}
		while (right <= end) {
			temp[i++] = nums[right++];
		}
		for (int m = 0; m < temp.length; m++) {
			nums[start + m] = temp[m];
		}
	}
	void mergeSort(int[] nums, int start, int end) {
		if (start >= end) {
			return;
		}
		int mid = start + (end - start) / 2;
		mergeSort(nums,start,mid);
		mergeSort(nums,mid + 1,end);
		merge(nums,start,mid,end);
	}
}