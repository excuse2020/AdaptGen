class Solution {
	int binarySearchAsc(int target, MountainArray arr, int start, int end) {
		while (start <= end) {
			int mid = start + (end - start) / 2;
			if (target > arr.get(mid)) {
				start = mid + 1;
			} 
			else if (target < arr.get(mid)) {
				end = mid - 1;
			} 
			else {
				return mid;
			}
		}
		return -1;
	}
	int binarySearchDesc(int target, MountainArray arr, int start, int end) {
		while (start <= end) {
			int mid = start + (end - start) / 2;
			if (target < arr.get(mid)) {
				start = mid + 1;
			} 
			else if (target > arr.get(mid)) {
				end = mid - 1;
			} 
			else {
				return mid;
			}
		}
		return -1;
	}
	int findInMountainArray(int target, MountainArray mountainArr) {
		int peak = peakIndexInMountainArray(mountainArr);
		int res = -1;
		if (target > mountainArr.get(peak)) {
			return -1;
		}
		res = binarySearchAsc(target,mountainArr,0,peak);
		if (res != -1) {
			return res;
		}
		return binarySearchDesc(target,mountainArr,peak,mountainArr.length() - 1);
	}
	int peakIndexInMountainArray(MountainArray arr) {
		int start = 0;
		int end = arr.length() - 1;
		while (start <= end) {
			int mid = start + (end - start) / 2;
			if (mid == 0) {
				return 1;
			}
			if (arr.get(mid - 1) < arr.get(mid) && arr.get(mid) > arr.get(mid + 1)) {
				return mid;
			} 
			else if (arr.get(mid - 1) < arr.get(mid) && arr.get(mid) < arr.get(mid + 1)) {
				start = mid + 1;
			} 
			else {
				end = mid - 1;
			}
		}
		return -1;
	}
}