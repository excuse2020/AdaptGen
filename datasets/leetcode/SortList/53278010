class Solution {
	ListNode mergeTwoLL(ListNode l1, ListNode l2) {
		ListNode dummy = new ListNode(-1);
		ListNode temp = dummy;
		while (l1 != null && l2 != null) {
			if (l1.val <= l2.val) {
				temp.next = l1;
				l1 = l1.next;
			} 
			else {
				temp.next = l2;
				l2 = l2.next;
			}
			temp = temp.next;
		}
		if (l1 != null) {
			temp.next = l1;
		} 
		else {
			temp.next = l2;
		}
		return dummy.next;
	}
	ListNode middle(ListNode head) {
		if (head == null || head.next == null) {
			return head;
		}
		ListNode slow = head;
		ListNode fast = head;
		while (fast.next != null && fast.next.next != null) {
			slow = slow.next;
			fast = fast.next.next;
		}
		return slow;
	}
	ListNode sortList(ListNode head) {
		if (head == null || head.next == null) {
			return head;
		}
		ListNode mid = middle(head);
		ListNode leftNode = head;
		ListNode rightNode = mid.next;
		mid.next = null;
		leftNode = sortList(leftNode);
		rightNode = sortList(rightNode);
		if (rightNode == null) {
			return leftNode;
		}
		return mergeTwoLL(leftNode,rightNode);
	}
}