class Solution {
	void buildResult(Map<String, List<String>> parent, String endWord, List<String> temp, List<List<String>> res) {
		temp.add(endWord);
		if (!parent.containsKey(endWord) || parent.get(endWord).size() == 0) {
			Collections.reverse(temp);
			res.add(temp);
			return;
		}
		for (String x: parent.get(endWord)) {	
			buildResult(parent,x,new ArrayList<>(temp),res);
		}
	}
	List<List<String>> findLadders(String beginWord, String endWord, List<String> wordList) {
		Set<String> words = new HashSet<>(wordList);
		List<List<String>> res = new ArrayList<>();
		if (!words.contains(endWord)) {
			return res;
		}
		Deque<String> q = new ArrayDeque<>();
		q.addLast(beginWord);
		Map<String, List<String>> parent = new HashMap<>();
		for (String x: wordList) {	
			parent.put(x,new ArrayList<>());
		}
		Map<String, Integer> visited = new HashMap<>();
		visited.put(beginWord,0);
		String currWord = q.removeFirst();
		if (currWord.equals(endWord)) {
			break;
		}
		int l = 0;
		char[] arr = currWord.toCharArray();
		char c;
	}
}