class Solution {
	boolean getPath(TreeNode root, int target, Stack<TreeNode> pathStack) {
		if (root == null) {
			return false;
		}
		if (root.val == target || getPath(root.left,target,pathStack) || getPath(root.right,target,pathStack)) {
			System.out.print(root.val + " ");
			pathStack.push(root);
			return true;
		}
		return false;
	}
	int lowestCommonAncestor(TreeNode root, int o1, int o2) {
		Stack<TreeNode> o1Path = new Stack();
		Stack<TreeNode> o2Path = new Stack();
		getPath(root,o1,o1Path);
		getPath(root,o2,o2Path);
		int father = root.val;
		while (!(o1Path.isEmpty() || o2Path.isEmpty())) {
			int f1 = o1Path.pop().val;
			int f2 = o2Path.pop().val;
			if (f1 != f2) {
				break;
			} 
			else {
				father = f1;
			}
		}
		return father;
	}
}