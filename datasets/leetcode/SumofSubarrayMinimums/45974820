class Solution {
	int MOD = (int) (1e9) + 7;
	int[] findNextSmallerLeft(int[] arr) {
		int n = arr.length;
		int[] nsl = new int[n];
		Stack<Integer> stack = new Stack<>();
		stack.push(0);
		nsl[0] = -1;
		for (int i = 1; i < n; i++) {
			while (!stack.isEmpty() && arr[stack.peek()] > arr[i]) {
				stack.pop();
			}
			if (stack.isEmpty()) {
				nsl[i] = -1;
			} 
			else {
				nsl[i] = stack.peek();
			}
			stack.push(i);
		}
		return nsl;
	}
	int[] findNextSmallerRight(int[] arr) {
		int n = arr.length;
		int[] nsr = new int[n];
		Stack<Integer> stack = new Stack<>();
		stack.push(n - 1);
		nsr[n - 1] = n;
		for (int i = n - 2; i >= 0; i--) {
			while (!stack.isEmpty() && arr[stack.peek()] >= arr[i]) {
				stack.pop();
			}
			if (stack.isEmpty()) {
				nsr[i] = n;
			} 
			else {
				nsr[i] = stack.peek();
			}
			stack.push(i);
		}
		return nsr;
	}
	int sumSubarrayMins(int[] arr) {
		int n = arr.length;
		int[] nsl = findNextSmallerLeft(arr);
		int[] nsr = findNextSmallerRight(arr);
		long sum = 0;
		for (int i = 0; i < n; i++) {
			int left = i - nsl[i];
			int right = nsr[i] - i;
			long count = ((right % MOD) * (left % MOD)) % MOD;
			sum = (sum + (arr[i] * count) % MOD) % MOD;
		}
		return (int) sum;
	}
}