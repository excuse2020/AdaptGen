class Solution {
	int minFallingPathSum(int[][] matrix) {
		int minAns = Integer.MAX_VALUE;
		int m = matrix.length;
		int n = matrix[0].length;
		int[][] dp = new int[m][n];
		for (int i = 0; i < dp.length; i++) {
			Arrays.fill(dp[i],Integer.MAX_VALUE);
		}
		for (int i = 0; i < n; i++) {
			minAns = Math.min(minAns,rec(matrix,0,i,m,n,dp));
		}
		return minAns;
	}
	int rec(int[][] matrix, int i, int j, int m, int n, int[][] dp) {
		if (i > m - 1 || j > n - 1) {
			return Integer.MAX_VALUE;
		}
		if (i < 0 || j < 0) {
			return Integer.MAX_VALUE;
		}
		if (dp[i][j] != Integer.MAX_VALUE) {
			return dp[i][j];
		}
		if (i == m - 1) {
			dp[i][j] = matrix[i][j];
			return dp[i][j];
		}
		int o1 = rec(matrix,i + 1,j - 1,m,n,dp);
		int o2 = rec(matrix,i + 1,j,m,n,dp);
		int o3 = rec(matrix,i + 1,j + 1,m,n,dp);
		dp[i][j] = matrix[i][j] + Math.min(o1,Math.min(o2,o3));
		return dp[i][j];
	}
}