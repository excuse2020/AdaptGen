class Solution {
	List<TreeNode> allPossibleFBT(int n) {
		List<TreeNode> ans = new ArrayList<>();
		if (n == 0 || n % 2 == 0) {
			return ans;
		}
		if (n == 1) {
			ans.add(new TreeNode(0));
			return ans;
		}
		for (int l = 1; l < n; l += 2) {
			int r = n - 1;
			List<TreeNode> leftSubTree = allPossibleFBT(l);
			List<TreeNode> rightSubTree = allPossibleFBT(r);
			for (TreeNode lsub: leftSubTree) {	
				for (TreeNode rsub: rightSubTree) {	
					TreeNode root = new TreeNode(0);
					root.left = lsub;
					root.right = rsub;
					ans.add(root);
				}
			}
		}
		return ans;
	}
	String preorder(TreeNode node) {
		if (node == null) {
			return "null";
		}
		return "[" + node.val;
	}
}