class Solution {
	void backtrack(List<List<Integer>> sol, ArrayList<Integer> comb, int k, int n, int start) {
		if (comb.size() == k && n == 0) {
			sol.add(new ArrayList<Integer>(comb));
			return;
		}
		for (int i = start; i <= 9; i++) {
			if (!comb.contains(i)) {
				comb.add(i);
				backtrack(sol,comb,k,n - i,i + 1);
				comb.remove(comb.size() - 1);
			}
		}
	}
	List<List<Integer>> combinationSum3(int k, int n) {
		List<List<Integer>> sol = new ArrayList<>();
		backtrack(sol,new ArrayList<>(),k,n,1);
		return sol;
	}
}