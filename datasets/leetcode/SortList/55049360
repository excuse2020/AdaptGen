class Solution {
	ListNode findMid(ListNode head) {
		ListNode slow = head;
		ListNode fast = head.next;
		while (fast != null && fast.next != null) {
			slow = slow.next;
			fast = fast.next.next;
		}
		return slow;
	}
	ListNode merge2(ListNode first, ListNode second) {
		ListNode dummy = new ListNode(-1);
		ListNode temp = dummy;
		while (first != null && second != null) {
			if (first.val <= second.val) {
				temp.next = first;
				first = first.next;
			} 
			else {
				temp.next = second;
				second = second.next;
			}
			temp = temp.next;
		}
		if (first != null) {
			temp.next = first;
		} 
		else {
			temp.next = second;
		}
		return dummy.next;
	}
	ListNode sortList(ListNode head) {
		if (head == null || head.next == null) {
			return head;
		}
		ListNode middle = findMid(head);
		ListNode leftHead = head;
		ListNode rightHead = middle.next;
		middle.next = null;
		leftHead = sortList(leftHead);
		rightHead = sortList(rightHead);
		return merge2(leftHead,rightHead);
	}
}