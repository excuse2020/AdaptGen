class Solution {
	TreeNode buildTree(int[] inorder, int[] postorder) {
		Map<Integer, Integer> inMap = new HashMap<>();
		for (int i = 0; i < inorder.length; i++) {
			inMap.put(inorder[i],i);
		}
		return constructTree(inorder,0,inorder.length - 1,postorder,0,postorder.length - 1,inMap);
	}
	TreeNode constructTree(int[] inorder, int inStart, int inEnd, int[] postorder, int postStart, int postEnd, Map<Integer, Integer> inMap) {
		if (inStart > inEnd || postStart > postEnd) {
			return null;
		}
		TreeNode root = new TreeNode(postorder[postEnd]);
		int inRoot = inMap.get(root.val);
		int numsLeft = inRoot - inStart;
		root.left = constructTree(inorder,inStart,inRoot - 1,postorder,postStart,postStart + numsLeft - 1,inMap);
		root.right = constructTree(inorder,inRoot + 1,inEnd,postorder,postStart + numsLeft,postEnd - 1,inMap);
		return root;
	}
}