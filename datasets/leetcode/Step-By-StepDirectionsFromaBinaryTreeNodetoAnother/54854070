class Solution {
	StringBuilder findNode(TreeNode root, int startValue) {
		if (root == null) {
			return new StringBuilder("");
		}
		if (root.val == startValue) {
			return new StringBuilder(".");
		}
		StringBuilder left = findNode(root.left,startValue);
		if (left.length() != 0) {
			return left.append("L");
		}
		StringBuilder right = findNode(root.right,startValue);
		if (right.length() != 0) {
			return right.append("R");
		}
		return new StringBuilder("");
	}
	String getDirections(TreeNode root, int startValue, int destValue) {
		StringBuilder outS = findNode(root,startValue);
		StringBuilder outD = findNode(root,destValue);
		int i = outS.length() - 1, j = outD.length() - 1;
		for (; i > 0 && j > 0; i--, j--) {
			if (outS.charAt(i) != outD.charAt(j)) {
				break;
			}
		}
		StringBuilder output = new StringBuilder("");
		for (; i > 0; i--) {
			output.append("U");
		}
		for (; j > 0; j--) {
			output.append(outD.charAt(j));
		}
		return String.valueOf(output);
	}
}