class Solution {
	long subArrayRanges(int[] nums) {
		int n = nums.length;
		ArrayDeque<Integer> stack = new ArrayDeque<Integer>();
		long sum = 0l;
		for (int i = 0; i <= n; ++i) {
			while (!stack.isEmpty() && (i == n || nums[stack.peek()] >= nums[i])) {
				int mid = stack.pop();
				int j = stack.isEmpty() ? -1 : stack.peek();
				sum -= (long) nums[mid] * (i - mid);
			}
			stack.push(i);
		}
		stack.pop();
		for (int i = 0; i <= n; ++i) {
			while (!stack.isEmpty() && (i == n || nums[stack.peek()] <= nums[i])) {
				int mid = stack.pop();
				int j = stack.isEmpty() ? -1 : stack.peek();
				sum += (long) nums[mid] * (i - mid);
			}
			stack.push(i);
		}
		return sum;
	}
}