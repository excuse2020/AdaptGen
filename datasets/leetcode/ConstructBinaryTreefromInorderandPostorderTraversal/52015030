class Solution {
	TreeNode buildT(int[] postorder, int postStart, int postEnd, int[] inorder, int inStart, int inEnd, Map<Integer, Integer> hm) {
		if (postStart > postEnd || inStart > inEnd) {
			return null;
		}
		TreeNode root = new TreeNode(postorder[postEnd]);
		int x = hm.get(root.val) - inStart;
		root.left = buildT(postorder,postStart,postStart + x - 1,inorder,inStart,hm.get(root.val) - 1,hm);
		root.right = buildT(postorder,postStart + x,postEnd - 1,inorder,hm.get(root.val) + 1,inEnd,hm);
		return root;
	}
	TreeNode buildTree(int[] inorder, int[] postorder) {
		Map<Integer, Integer> hm = new HashMap<>();
		for (int i = 0; i < inorder.length; i++) {
			hm.put(inorder[i],i);
		}
		TreeNode root = buildT(postorder,0,postorder.length - 1,inorder,0,inorder.length - 1,hm);
		return root;
	}
}