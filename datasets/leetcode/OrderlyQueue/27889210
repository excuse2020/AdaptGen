class Solution {
	String buildString(char[] c, int start) {
		StringBuilder sb = new StringBuilder();
		sb.append(c[start]);
		int i = (start + 1) % c.length;
		while (i != start) {
			sb.append(c[i]);
			i++;
			i %= c.length;
		}
		return sb.toString();
	}
	String optimalString(String s) {
		int[] count = new int[26];
		int i = 0;
	}
	String orderlyQueue(String s, int k) {
		if (k > 1) {
			return optimalString(s);
		}
		char[] c = s.toCharArray();
		ArrayList<Integer> indexes = new ArrayList<>();
		char best;
	}
	int radixSearch(ArrayList<Integer> indexes, char[] c, int offset) {
		if (offset == c.length || indexes.size() == 1) {
			return indexes.get(0);
		}
		ArrayList<Integer>[] rad = new ArrayList[26];
		for (int i = 0; i < 26; i++) {
			rad[i] = new ArrayList<>();
		}
	}
}