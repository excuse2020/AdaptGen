class Solution {
	int iSize;
	int jSize;
	int f(int[][] matrix, boolean[][] flag, int i, int j) {
		if (i < 0 || i >= iSize || j < 0 || j >= jSize) {
			return 0;
		}
		int min = Integer.MAX_VALUE;
		if (flag[i][j]) {
			return matrix[i][j];
		}
		if (j > 0) {
			min = Math.min(min,f(matrix,flag,i + 1,j - 1));
		}
		min = Math.min(min,f(matrix,flag,i + 1,j));
		if (j < jSize - 1) {
			min = Math.min(min,f(matrix,flag,i + 1,j + 1));
		}
		flag[i][j] = true;
		matrix[i][j] += min;
		return matrix[i][j];
	}
	int minFallingPathSum(int[][] matrix) {
		if (matrix.length == 0) {
			return 0;
		}
		int min;
		iSize = matrix.length;
		jSize = matrix[0].length;
		boolean[][] flag = new boolean[iSize][jSize];
		min = f(matrix,flag,0,0);
		for (int i = 1; i < jSize; i++) {
			min = Math.min(min,f(matrix,flag,0,i));
		}
		return min;
	}
}