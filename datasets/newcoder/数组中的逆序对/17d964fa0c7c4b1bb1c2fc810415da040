class Solution {
	int InversePairs(int[] nums) {
		if (nums == null || nums.length == 0) {
			return 0;
		}
		return mergeSort(nums,0,nums.length - 1);
	}
	int merge(int[] array, int start, int mid, int end) {
		int[] tempArray = new int[end - start + 1];
		int p1 = start;
		int p2 = mid + 1;
		int p = 0;
		int count = 0;
		while ((p1 <= mid) && (p2 <= end)) {
			if (array[p1] <= array[p2]) {
				tempArray[p++] = array[p1++];
			} 
			else {
				tempArray[p++] = array[p2++];
				count += mid - p1 + 1;
			}
		}
		while (p1 <= mid) {
			tempArray[p++] = array[p1++];
		}
		while (p2 <= end) {
			tempArray[p++] = array[p2++];
		}
		for (int i = 0; i < tempArray.length; i++) {
			array[i + start] = tempArray[i];
		}
		return count % 1000000007;
	}
	int mergeSort(int[] array, int start, int end) {
		if (start < end) {
			int mid = (start + end) / 2;
			int left = mergeSort(array,start,mid);
			int right = mergeSort(array,mid + 1,end);
			int count = merge(array,start,mid,end);
			return (left + right) % 1000000007;
		}
		return 0;
	}
}