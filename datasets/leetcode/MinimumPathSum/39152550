class Solution {
	int[][] dp;
	int minPath(int i, int j, int[][] grid) {
		if (i < 0 || i >= grid.length || j < 0 || j >= grid[0].length) {
			return 8000001;
		}
		if (i == grid.length - 1 && j == grid[0].length - 1) {
			return grid[i][j];
		}
		if (dp[i][j] != -1) {
			return dp[i][j];
		}
		int moveDown = grid[i][j] + minPath(i + 1,j,grid);
		int moveRight = grid[i][j] + minPath(i,j + 1,grid);
		return dp[i][j] = Math.min(moveDown,moveRight);
	}
	int minPathSum(int[][] grid) {
		dp = new int[grid.length][grid[0].length];
		for (int i = 0; i < grid.length; i++) {
			Arrays.fill(dp[i],-1);
		}
		return minPath(0,0,grid);
	}
}