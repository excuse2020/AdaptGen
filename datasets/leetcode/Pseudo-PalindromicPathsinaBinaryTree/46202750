class Solution {
	int ans = 0;
	void dfs(TreeNode root, HashMap<Integer, Integer> map) {
		if (root == null) {
			return;
		}
		map.put(root.val,map.getOrDefault(root.val,0) + 1);
		if (root.left == null && root.right == null) {
			int odd = 0;
			for (Integer val: map.values()) {	
				if (val % 2 != 0) {
					odd++;
				}
			}
			if (odd <= 1) {
				ans++;
			}
		} 
		else {
			dfs(root.left,map);
			dfs(root.right,map);
		}
		map.put(root.val,map.get(root.val) - 1);
		if (map.get(root.val) == 0) {
			map.remove(root.val);
		}
	}
	int pseudoPalindromicPaths(TreeNode root) {
		HashMap<Integer, Integer> map = new HashMap<>();
		dfs(root,map);
		return ans;
	}
}