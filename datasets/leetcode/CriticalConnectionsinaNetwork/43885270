class Solution {
	int timer = 1;
	List<List<Integer>> criticalConnections(int n, List<List<Integer>> connections) {
		List<List<Integer>> adj = new ArrayList<>();
		for (int i = 0; i < n; i++) {
			adj.add(new ArrayList<>());
		}
		for (int i = 0; i < connections.size(); i++) {
			adj.get(connections.get(i).get(0)).add(connections.get(i).get(1));
			adj.get(connections.get(i).get(1)).add(connections.get(i).get(0));
		}
		int[] low = new int[n];
		int[] ent = new int[n];
		boolean[] visited = new boolean[n];
		List<List<Integer>> bridges = new ArrayList<>();
		tarjan(0,-1,adj,visited,low,ent,bridges);
		return bridges;
	}
	void tarjan(int node, int parent, List<List<Integer>> adj, boolean[] visited, int[] low, int[] ent, List<List<Integer>> bridges) {
		visited[node] = true;
		low[node] = timer;
		ent[node] = timer;
		timer++;
		for (int adjNode: adj.get(node)) {	
			if (parent == adjNode) {
				continue;
			}
			if (!visited[adjNode]) {
				tarjan(adjNode,node,adj,visited,low,ent,bridges);
				if (ent[node] < low[adjNode]) {
					bridges.add(Arrays.asList(node,adjNode));
				}
			}
			low[node] = Math.min(low[node],low[adjNode]);
		}
	}
}