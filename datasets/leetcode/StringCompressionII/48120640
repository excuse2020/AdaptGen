class Solution {
	int getLengthOfOptimalCompression(String s, int k) {
		Map<String, Integer> uMap = new HashMap<>();
	}
	int recurse(int index, int k, String s, int prevCount, char prevChar, Map<String, Integer> uMap) {
		if (uMap.containsKey(index + "_")) {
			return uMap.get(index + "_");
		}
		if (index == s.length()) {
			return 0;
		}
		if (s.charAt(index) == prevChar) {
			if (prevCount == 1 || prevCount == 9 || prevCount == 99) {
				int val = 1 + recurse(index + 1,k,s,prevCount + 1,prevChar,uMap);
				uMap.put(index + "_",val);
				return val;
			} 
			else {
				int val = recurse(index + 1,k,s,prevCount + 1,prevChar,uMap);
				uMap.put(index + "_",val);
				return val;
			}
		} 
		else {
			int lengthAfterRemoving = Integer.MAX_VALUE;
			if (k > 0) {
				lengthAfterRemoving = recurse(index + 1,k - 1,s,prevCount,prevChar,uMap);
			}
			int lengthAfterNotRemoving = 1 + recurse(index + 1,k,s,1,s.charAt(index),uMap);
			int val = Math.min(lengthAfterRemoving,lengthAfterNotRemoving);
			uMap.put(index + "_",val);
			return val;
		}
	}
}