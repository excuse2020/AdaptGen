class Solution {
	int max = 1;
	int dfs(HashMap<Integer, List<Integer>> map, int cur, char[] arr) {
		if (!map.containsKey(cur)) {
			return 1;
		}
		int max1 = 0, max2 = 0;
		for (int c: map.get(cur)) {	
			int len = dfs(map,c,arr);
			if (arr[c] != arr[cur]) {
				if (len > max1) {
					max2 = max1;
					max1 = len;
				} 
				else if (len > max2) {
					max2 = len;
				}
			}
		}
		if (max1 + max2 > max) {
			max = max1 + max2;
		}
		return max1 + 1;
	}
	int longestPath(int[] parent, String s) {
		HashMap<Integer, List<Integer>> map = new HashMap<>();
		for (int i = 1; i < parent.length; i++) {
			if (!map.containsKey(parent[i])) {
				map.put(parent[i],new ArrayList());
			}
			map.get(parent[i]).add(i);
		}
		char[] arr = s.toCharArray();
		dfs(map,0,arr);
		return max;
	}
}