class Solution {
	List<Integer> list = new ArrayList<>();
	int[] inorderTraversal(TreeNode root) {
		if (null == root) {
			return new int[0];
		}
		Stack<TreeNode> sta = new Stack<TreeNode>();
		TreeNode p = root;
		while (p != null || !sta.isEmpty()) {
			while (p != null) {
				sta.push(p);
				p = p.left;
			}
			p = sta.pop();
			list.add(p.val);
			p = p.right;
		}
		int[] arr = new int[list.size()];
		for (int i = 0; i < list.size(); i++) {
			arr[i] = list.get(i);
		}
		return arr;
	}
	List<Integer> loopTree(TreeNode node) {
		if (node == null) {
			return list;
		}
		loopTree(node.left);
		list.add(node.val);
		loopTree(node.right);
		return list;
	}
}