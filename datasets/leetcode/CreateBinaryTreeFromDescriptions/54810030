class Solution {
	TreeNode createBinaryTree(int[][] descriptions) {
		TreeNode[] nodes = new TreeNode[100001];
		boolean[] isChild = new boolean[100001];
		for (int[] dis: descriptions) {	
			int parent = dis[0];
			int child = dis[1];
			if (nodes[dis[0]] == null) {
				nodes[parent] = new TreeNode(parent);
			}
			if (nodes[dis[1]] == null) {
				nodes[child] = new TreeNode(child);
			}
		}
		for (int[] dis: descriptions) {	
			int parent = dis[0];
			int child = dis[1];
			int isLeft = dis[2];
			if (isLeft == 1) {
				nodes[parent].left = nodes[child];
			} 
			else {
				nodes[parent].right = nodes[child];
			}
			isChild[child] = true;
		}
		for (int[] dis: descriptions) {	
			int can_be_child = dis[0];
			if (isChild[can_be_child] == false) {
				return nodes[can_be_child];
			}
		}
		return null;
	}
}