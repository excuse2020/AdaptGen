class Solution {
	int[] parent;
	long countPairs(int n, int[][] edges) {
		if (edges.length == 0) {
			return (long) ((long) (n) * (n + 1) / 2) - n;
		}
		long result = 0;
		parent = new int[n];
		for (int i = 0; i < n; i++) {
			parent[i] = i;
		}
		for (int[] edge: edges) {	
			union(edge[0],edge[1]);
		}
		for (int[] edge: edges) {	
			union(edge[0],edge[1]);
		}
		HashMap<Integer, Integer> comp = new HashMap<>();
		for (int p: parent) {	
			comp.put(p,comp.getOrDefault(p,0) + 1);
		}
		for (Map.Entry<Integer, Integer> entry: comp.entrySet()) {	
			long temp = (long) (entry.getValue() * (long) (n - entry.getValue()));
			result += temp;
		}
		return result / 2;
	}
	int find(int x) {
		if (parent[x] == x) {
			return x;
		}
		int p = find(parent[x]);
		parent[x] = p;
		return parent[x];
	}
	void union(int x, int y) {
		int a = find(x);
		int b = find(y);
		if (a > b) {
			parent[a] = b;
		} 
		else {
			parent[b] = a;
		}
	}
}