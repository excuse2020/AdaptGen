class Solution {
	ListNode divideMerge(ArrayList<ListNode> lists, int left, int right) {
		if (left > right) {
			return null;
		} 
		else if (left == right) {
			return lists.get(left);
		}
		int mid = (left + right) / 2;
		return mergeList(divideMerge(lists,left,mid),divideMerge(lists,mid + 1,right));
	}
	ListNode mergeKLists(ArrayList<ListNode> lists) {
		return divideMerge(lists,0,lists.size() - 1);
	}
	ListNode mergeList(ListNode p1Head, ListNode p2Head) {
		if (p1Head == null || p2Head == null) {
			return p1Head == null ? p2Head : p1Head;
		}
		ListNode dummy = new ListNode(0);
		ListNode p1 = p1Head, p2 = p2Head, tail = dummy;
		while (p1 != null && p2 != null) {
			if (p1.val >= p2.val) {
				tail.next = p2;
				p2 = p2.next;
			} 
			else {
				tail.next = p1;
				p1 = p1.next;
			}
			tail = tail.next;
		}
		tail.next = p1 != null ? p1 : p2;
		return dummy.next;
	}
}