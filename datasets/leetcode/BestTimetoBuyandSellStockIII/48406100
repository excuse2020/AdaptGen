class Solution {
	int helperMem(int[] prices, int index, int buy, int[][][] dp, int n) {
		if (index == prices.length || n == 0) {
			return 0;
		}
		if (dp[index][buy][n] != -1) {
			return dp[index][buy][n];
		}
		int totalProfit = 0;
		if (buy == 1) {
			int buyKaro = -prices[index] + helperMem(prices,index + 1,0,dp,n);
			int skipKaro = helperMem(prices,index + 1,1,dp,n);
			totalProfit = Math.max(buyKaro,skipKaro);
		} 
		else {
			int sellKaro = prices[index] + helperMem(prices,index + 1,1,dp,n - 1);
			int skipKaro = helperMem(prices,index + 1,0,dp,n);
			totalProfit = Math.max(sellKaro,skipKaro);
		}
		return dp[index][buy][n] = totalProfit;
	}
	int maxProfit(int[] prices) {
		int[][][] dp = new int[prices.length][2][3];
		for (int i = 0; i < dp.length; i++) {
			for (int j = 0; j < dp[i].length; j++) {
				Arrays.fill(dp[i][j],-1);
			}
		}
		return helperMem(prices,0,1,dp,2);
	}
}