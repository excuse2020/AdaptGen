class Solution {
	int l, h;
	void applyToppings(int[] a, int[] toppingCosts, int target, int sum) {
		if (sum >= target) {
			if (sum < h || h == -1 || sum == target) {
				h = sum;
			}
			return;
		}
		if (sum <= target && (sum > l || l == -1)) {
			l = sum;
		}
		for (int i = toppingCosts.length - 1; i >= 0; i--) {
			if (a[i] > 0) {
				sum += toppingCosts[i];
				a[i]--;
				applyToppings(a,toppingCosts,target,sum);
				sum -= toppingCosts[i];
				a[i]++;
			}
		}
	}
	int closestCost(int[] baseCosts, int[] toppingCosts, int target) {
		int[] a = new int[toppingCosts.length];
		Arrays.fill(a,2);
		l = -1;
		h = -1;
		Arrays.sort(toppingCosts);
		for (int i = 0; i < baseCosts.length; i++) {
			applyToppings(a,toppingCosts,target,baseCosts[i]);
		}
		int diffl = target - l;
		int diffh = h - target;
		if (l != -1 && h != -1) {
			if (diffl < diffh) {
				return l;
			} 
			else if (diffl > diffh) {
				return h;
			} 
			else {
				return l;
			}
		}
		if (l != -1) {
			return l;
		}
		return h;
	}
}