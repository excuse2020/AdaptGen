class Solution {
	List<List<Integer>> rs;
	void backtracking(List<Integer> temp, int k, int n, int curSum, int start) {
		if (temp.size() == k) {
			if (curSum == n) {
				rs.add(new ArrayList<>(temp));
			}
			return;
		}
		for (int i = start; i < 10; i++) {
			temp.add(i);
			backtracking(temp,k,n,curSum + i,i + 1);
			temp.remove(temp.size() - 1);
		}
	}
	List<List<Integer>> combinationSum3(int k, int n) {
		rs = new ArrayList<>();
		backtracking(new ArrayList<>(),k,n,0,1);
		return rs;
	}
}