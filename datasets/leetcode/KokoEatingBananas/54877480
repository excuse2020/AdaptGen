class Solution {
	boolean canFinish(int[] piles, int k, int h) {
		int totalTime = 0;
		for (int pile: piles) {	
			int currPileTime = (pile + k - 1) / k;
			totalTime = totalTime + currPileTime;
		}
		if (totalTime <= h) {
			return true;
		} 
		else {
			return false;
		}
	}
	int minEatingSpeed(int[] piles, int h) {
		int maxRate = 0;
		for (int pile: piles) {	
			maxRate = Math.max(maxRate,pile);
		}
		int left = 1;
		int right = maxRate;
		while (left < right) {
			int mid = left + (right - left) / 2;
			if (canFinish(piles,mid,h)) {
				right = mid;
			} 
			else {
				left = mid + 1;
			}
		}
		return left;
	}
}