class Solution {
	int dp(int m, int n, int[][] answer) {
		if (m == 1 && n == 1) {
			answer[m - 1][n - 1] = 1;
			return answer[m - 1][n - 1];
		}
		if (m == 1 && n == 2) {
			answer[m - 1][n - 1] = 1;
			return answer[m - 1][n - 1];
		}
		if (m == 2 && n == 1) {
			answer[m - 1][n - 1] = 1;
			return answer[m - 1][n - 1];
		}
		if (m == 1 && n != 1) {
			if (answer[m - 1][n - 2] == 0) {
				answer[m - 1][n - 2] = dp(m,n - 1,answer);
			}
			return answer[m - 1][n - 2];
		}
		if (n == 1 && m != 1) {
			if (answer[m - 2][n - 1] == 0) {
				answer[m - 2][n - 1] = dp(m - 1,n,answer);
			}
			return answer[m - 2][n - 1];
		}
		if (m != 1 && n != 1) {
			if (answer[m - 2][n - 1] == 0) {
				answer[m - 2][n - 1] = dp(m - 1,n,answer);
			}
			if (answer[m - 1][n - 2] == 0) {
				answer[m - 1][n - 2] = dp(m,n - 1,answer);
			}
			return answer[m - 2][n - 1] + answer[m - 1][n - 2];
		}
		return 0;
	}
	int uniquePaths(int m, int n) {
		int[][] answer = new int[m][n];
		return dp(m,n,answer);
	}
}