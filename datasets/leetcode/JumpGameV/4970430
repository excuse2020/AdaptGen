class Solution {
	int helper(int[] dp, int[] a, int idx, int d) {
		if (dp[idx] > 0) {
			return dp[idx];
		}
		dp[idx] = 1;
		for (int j = idx + 1; j < a.length && j <= idx + d && a[j] < a[idx]; j++) {
			dp[idx] = Math.max(dp[idx],helper(dp,a,j,d) + 1);
		}
		for (int j = idx - 1; j >= 0 && j >= idx - d && a[j] < a[idx]; j--) {
			dp[idx] = Math.max(dp[idx],helper(dp,a,j,d) + 1);
		}
		return dp[idx];
	}
	int maxJumps(int[] a, int d) {
		int[] dp = new int[a.length];
		for (int i = 0; i < a.length; i++) {
			helper(dp,a,i,d);
		}
		int ans = 1;
		for (int t: dp) {	
			ans = Math.max(ans,t);
		}
		return ans;
	}
}