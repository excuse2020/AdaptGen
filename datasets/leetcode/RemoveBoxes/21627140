class Solution {
	int dfs(int[] boxes, int l, int r, int k, int[][][] dp) {
		if (l > r) {
			return 0;
		}
		if (dp[l][r][k] != 0) {
			return dp[l][r][k];
		}
		int res = (k + 1) * (k + 1) + dfs(boxes,l + 1,r,0,dp);
		for (int i = l + 1; i <= r; i++) {
			if (boxes[i] == boxes[l]) {
				res = Math.max(res,dfs(boxes,l + 1,i - 1,0,dp) + dfs(boxes,i,r,k + 1,dp));
			}
		}
		dp[l][r][k] = res;
		return res;
	}
	int removeBoxes(int[] boxes) {
		int n = boxes.length;
		int[][][] dp = new int[n][n][n];
		return dfs(boxes,0,n - 1,0,dp);
	}
}