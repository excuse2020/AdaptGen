class Solution {
	int sumSubarrayMins(int[] arr) {
		int len = arr.length, mod = (int) 1e9 + 7;
		Deque<Integer> stack = new ArrayDeque<>();
		int[] prefix = new int[len], suffix = new int[len];
		for (int i = 0; i < len; ++i) {
			while (!stack.isEmpty() && arr[stack.peekFirst()] >= arr[i]) {
				stack.pollFirst();
			}
			prefix[i] = stack.isEmpty() ? -1 : stack.peekFirst();
			stack.offerFirst(i);
		}
		stack.clear();
		for (int i = len - 1; i >= 0; --i) {
			while (!stack.isEmpty() && arr[stack.peekFirst()] > arr[i]) {
				stack.pollFirst();
			}
			suffix[i] = stack.isEmpty() ? len : stack.peekFirst();
			stack.offerFirst(i);
		}
		long ans = 0;
		for (int i = 0; i < len; ++i) {
			long curr = 1L * (i - prefix[i]);
			ans = (ans + curr) % mod;
		}
		return (int) ans;
	}
}