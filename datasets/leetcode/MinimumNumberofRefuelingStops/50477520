class Solution {
	int minRefuelStops(int target, int startFuel, int[][] stations) {
		int distanceCoveredSoFar = startFuel;
		int currentFuelingStation = 0;
		int stops = 0;
		PriorityQueue<Integer> maxHeap = new PriorityQueue<>((a, b) -> {b - a});
		while (distanceCoveredSoFar < target) {
			while (currentFuelingStation < stations.length && stations[currentFuelingStation][0] <= distanceCoveredSoFar) {
				maxHeap.offer(stations[currentFuelingStation++][1]);
			}
			if (maxHeap.isEmpty()) {
				return -1;
			}
			distanceCoveredSoFar += maxHeap.poll();
			++stops;
		}
		return stops;
	}
}