class Solution {
	List<List<Integer>> combinationSum(int[] candidates, int target) {
		List<List<Integer>> res = new ArrayList<>();
		findCombination(0,candidates,target,res,new LinkedList<>());
		return res;
	}
	void findCombination(int idx, int[] arr, int target, List<List<Integer>> res, List<Integer> ds) {
		if (idx == arr.length) {
			if (target == 0) {
				res.add(new LinkedList<>(ds));
			}
			return;
		}
		if (arr[idx] <= target) {
			ds.add(arr[idx]);
			findCombination(idx,arr,target - arr[idx],res,ds);
			ds.remove(ds.size() - 1);
		}
		findCombination(idx + 1,arr,target,res,ds);
	}
}