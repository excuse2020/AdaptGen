class Solution {
	int ans;
	TreeMap<Integer, Integer> tree;
	int[] maxSlidingWindow(int[] nums, int k) {
		ans = new int[nums.length - k + 1];
		tree = new TreeMap<>();
		for (int i = 0; i < k; i++) {
			if (tree.containsKey(nums[i])) {
				tree.put(nums[i],tree.get(nums[i]) + 1);
			} 
			else {
				tree.put(nums[i],1);
			}
		}
		ans[0] = tree.lastKey();
		recursion(nums,1,k,k);
		return ans;
	}
	void recursion(int nums, int i, int j, int k) {
		if (j >= nums.length) {
			return;
		}
		tree.put(nums[i - 1],tree.get(nums[i - 1]) - 1);
		if (tree.get(nums[i - 1]) == 0) {
			tree.remove(nums[i - 1]);
		}
		if (tree.containsKey(nums[j])) {
			tree.put(nums[j],tree.get(nums[j]) + 1);
		} 
		else {
			tree.put(nums[j],1);
		}
		ans[j - k + 1] = tree.lastKey();
		recursion(nums,i + 1,j + 1,k);
	}
}