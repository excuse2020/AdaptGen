class Solution {
	int dfs(int[][] grid, int row, int col, boolean[][] visited) {
		if (row < 0 || row >= grid.length || col < 0 || col >= grid[0].length) {
			return 0;
		}
		if (grid[row][col] == 0 || visited[row][col]) {
			return 0;
		}
		int fish = grid[row][col];
		visited[row][col] = true;
		fish = fish + dfs(grid,row + 1,col,visited);
		fish = fish + dfs(grid,row - 1,col,visited);
		fish = fish + dfs(grid,row,col + 1,visited);
		fish = fish + dfs(grid,row,col - 1,visited);
		return fish;
	}
	int findMaxFish(int[][] grid) {
		int maxValue = 0;
		for (int row = 0; row < grid.length; row++) {
			for (int col = 0; col < grid[0].length; col++) {
				if (grid[row][col] != 0) {
					boolean[][] visited = new boolean[grid.length][grid[0].length];
					maxValue = Math.max(maxValue,dfs(grid,row,col,visited));
				}
			}
		}
		return maxValue;
	}
}