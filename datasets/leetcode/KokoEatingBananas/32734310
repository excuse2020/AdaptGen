class Solution {
	int minEatingSpeed(int[] piles, int h) {
		int high = 0;
		int low = 1;
		for (int i: piles) {	
			high = Math.max(i,high);
			low = Math.min(i,low);
		}
		int mid = 0;
		int ans = Integer.MAX_VALUE;
		while (low <= high) {
			mid = (high - low) / 2 + low;
			long temp = utils(piles,mid);
			if (temp <= h) {
				ans = Math.min(ans,mid);
				high = mid - 1;
			} 
			else {
				low = mid + 1;
			}
		}
		return ans;
	}
	long utils(int[] piles, int k) {
		long hours = 0;
		for (int i: piles) {	
			hours += i / k;
			if (i % k != 0) {
				hours++;
			}
		}
		return hours;
	}
}