class Solution {
	int findKthLargest(int[] nums, int k) {
		k = nums.length - k;
		return quickSelect(nums,0,nums.length - 1,k);
	}
	int quickSelect(int[] nums, int lo, int hi, int k) {
		int pivot = nums[hi], p = lo;
		for (int i = lo; i < hi; i++) {
			if (nums[i] < pivot) {
				swap(nums,i,p);
				p++;
			}
		}
		swap(nums,hi,p);
		if (p > k) {
			return quickSelect(nums,lo,p - 1,k);
		} 
		else if (p < k) {
			return quickSelect(nums,p + 1,hi,k);
		} 
		else {
			return pivot;
		}
	}
	void swap(int[] nums, int i, int j) {
		int tmp = nums[i];
		nums[i] = nums[j];
		nums[j] = tmp;
		return;
	}
}