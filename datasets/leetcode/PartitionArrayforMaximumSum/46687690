class Solution {
	int findMaxSum(int arr, int index, int k, int[] dp) {
		if (index == arr.length) {
			return 0;
		}
		if (dp[index] != -1) {
			return dp[index];
		}
		int end = Math.min(index + k,arr.length);
		int len = 0;
		int maxInPartion = Integer.MIN_VALUE;
		int maxSum = Integer.MIN_VALUE;
		for (int i = index; i < end; i++) {
			len++;
			maxInPartion = Math.max(maxInPartion,arr[i]);
			int sum = len * maxInPartion + findMaxSum(arr,i + 1,k,dp);
			maxSum = Math.max(maxSum,sum);
		}
		return dp[index] = maxSum;
	}
	int maxSumAfterPartitioning(int[] arr, int k) {
		int dp = new int[arr.length];
		Arrays.fill(dp,-1);
		return findMaxSum(arr,0,k,dp);
	}
}