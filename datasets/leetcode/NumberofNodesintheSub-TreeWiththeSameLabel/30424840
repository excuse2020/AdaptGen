class Solution {
	List<List<Integer>> list;
	int result;
	HashSet<Integer> set;
	void addToOrgArray(int[] org, int[] vArray) {
		for (int i = 0; i < 26; i++) {
			org[i] += vArray[i];
		}
	}
	void buildAdjacencyList(int n, int[][] edges, String labels) {
		for (int i = 0; i < edges.length; i++) {
			int p = edges[i][0];
			int c = edges[i][1];
			list.get(p).add(c);
			list.get(c).add(p);
		}
	}
	int[] countSubTrees(int n, int[][] edges, String labels) {
		list = new ArrayList<>();
		set = new HashSet<>();
		result = new int[n];
		for (int i = 0; i < n; i++) {
			list.add(new ArrayList<>());
		}
		buildAdjacencyList(n,edges,labels);
		getCount(0,list,labels);
		return result;
	}
	int[] getCount(int src, List<List<Integer>> list, String labels) {
		set.add(src);
		int array = new int[26];
		result[src] = 1;
	}
}