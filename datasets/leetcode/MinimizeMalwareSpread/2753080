class Solution {
	int dfs(int[][] graph, int ele, int[] visited, List malware) {
		Stack<Integer> st = new Stack<Integer>();
		st.push(ele);
		visited[ele] = 1;
		int count = 0;
		while (!st.isEmpty()) {
			int cur = st.pop();
			for (int j = 0; j < graph.length; j++) {
				if (visited[j] != 1 && j != ele && graph[cur][j] == 1) {
					if (!malware.contains(j)) {
						count++;
					}
					st.push(j);
					visited[j] = 1;
				}
			}
		}
		return count;
	}
	int minMalwareSpread(int[][] graph, int[] initial) {
		List<Integer> malware = Arrays.stream(initial).boxed().collect(Collectors.toList());
		int[] visited = new int[graph.length];
		Arrays.sort(initial);
		int count = 0, max = -1, maxCountInd = -1;
		for (int i = 0; i < initial.length; i++) {
			count = dfs(graph,initial[i],visited,malware);
			if (count > max) {
				max = count;
				maxCountInd = initial[i];
			}
		}
		return maxCountInd;
	}
}