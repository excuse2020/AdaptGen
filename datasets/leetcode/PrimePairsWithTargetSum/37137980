class Solution {
	List<Integer> list;
	List<List<Integer>> findPrimePairs(int n) {
		sieveOfEratosthenes(n);
		List<List<Integer>> res = new ArrayList<>();
		int start = 0, end = list.size() - 1;
		while (start <= end) {
			if (list.get(start) + list.get(end) == n) {
				List<Integer> temp = new ArrayList<>();
				temp.add(list.get(start));
				temp.add(list.get(end));
				res.add(temp);
				start++;
			} 
			else if (list.get(start) + list.get(end) < n) {
				start++;
			} 
			else {
				end--;
			}
		}
		return res;
	}
	void sieveOfEratosthenes(int n) {
		boolean prime = new boolean[n + 1];
		for (int i = 0; i <= n; i++) {
			prime[i] = true;
		}
		for (int p = 2; p * p <= n; p++) {
			if (prime[p] == true) {
				for (int i = p * p; i <= n; i += p) {
					prime[i] = false;
				}
			}
		}
		list = new ArrayList();
		for (int i = 2; i <= n; i++) {
			if (prime[i] == true) {
				list.add(i);
			}
		}
	}
}