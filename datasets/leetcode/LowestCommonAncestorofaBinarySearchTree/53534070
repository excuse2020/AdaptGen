class Solution {
	TreeNode lowcommonAncestor(TreeNode root, ArrayList<TreeNode> list, TreeNode p) {
		if (root == null) {
			return null;
		}
		if (root.val == p.val) {
			list.add(root);
			return root;
		} 
		else if (root.val > p.val) {
			list.add(root);
			return lowcommonAncestor(root.left,list,p);
		} 
		else {
			list.add(root);
			return lowcommonAncestor(root.right,list,p);
		}
	}
	TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
		ArrayList<TreeNode> list1 = new ArrayList<>();
		ArrayList<TreeNode> list2 = new ArrayList<>();
		lowcommonAncestor(root,list1,p);
		lowcommonAncestor(root,list2,q);
		int i = 0;
		for (; i < list1.size() && i < list2.size(); i++) {
			if (list1.get(i).val != list2.get(i).val) {
				break;
			}
		}
		return list1.get(i - 1);
	}
}