class Solution {
	List<List<Integer>> findPrimePairs(int n) {
		List<List<Integer>> ans = new ArrayList<>();
		if (n < 4) {
			return ans;
		}
		int first = 2, second = n - first;
		boolean[] isPrime = primes(n);
		for (int i = 1; i <= n / 2 - 1; i++) {
			if (isPrime[first] && isPrime[second]) {
				List<Integer> temp = new ArrayList<>();
				temp.add(first);
				temp.add(second);
				ans.add(temp);
			}
			first += 1;
			second = n - first;
		}
		return ans;
	}
	boolean[] primes(int n) {
		boolean prime = new boolean[n + 1];
		Arrays.fill(prime,true);
		for (int i = 2; i <= n; i++) {
			if (prime[i]) {
				if ((long) i * (long) i > n) {
					break;
				}
				for (int j = i * i; j <= n; j += i) {
					prime[j] = false;
				}
			}
		}
		return prime;
	}
}