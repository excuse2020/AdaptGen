class Solution {
	List<Integer> courSeq;
	List<List<Integer>> ls;
	Set<Integer> vs = new HashSet<Integer>();
	boolean dfs(Integer crs) {
		if (ls.get(crs).isEmpty()) {
			if (!courSeq.contains(crs)) {
				courSeq.add(crs);
			}
			return true;
		} 
		else if (!vs.add(crs)) {
			return false;
		}
		for (Integer dcrs: ls.get(crs)) {	
			if (!dfs(dcrs)) {
				return false;
			}
		}
		vs.remove(crs);
		ls.set(crs,new ArrayList<>());
		courSeq.add(crs);
		return true;
	}
	int[] findOrder(int numCourses, int[][] prerequisites) {
		ls = new ArrayList<>(numCourses);
		courSeq = new ArrayList<>(numCourses);
		int lenpre = prerequisites.length;
		for (int i = 0; i < numCourses; i++) {
			ls.add(new ArrayList<>());
		}
		for (int i = 0; i < lenpre; i++) {
			ls.get(prerequisites[i][0]).add(prerequisites[i][1]);
		}
		for (int i = 0; i < numCourses; i++) {
			if (!dfs(i)) {
				return new int[0];
			}
		}
		return courSeq.stream().mapToInt().toArray();
	}
}