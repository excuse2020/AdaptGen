class Solution {
	boolean canFinish(int n, int[][] arr) {
		List<Integer>[] adj = new ArrayList[n];
		for (int[] a: arr) {	
			int idx = a[0];
			if (adj[idx] == null) {
				adj[idx] = new ArrayList<>();
			}
			adj[idx].add(a[1]);
		}
		boolean visited = new boolean[n];
		for (int i = 0; i < n; i++) {
			if (adj[i] != null && !visited[i]) {
				if (isCycle(adj,visited,new boolean[n],i)) {
					return false;
				}
			}
		}
		return true;
	}
	boolean isCycle(List<Integer>[] adj, boolean[] visited, boolean[] dfsVisited, int curr) {
		visited[curr] = true;
		dfsVisited[curr] = true;
		if (adj[curr] == null) {
			dfsVisited[curr] = false;
			return false;
		}
		for (int neighbour: adj[curr]) {	
			if (!visited[neighbour]) {
				if (isCycle(adj,visited,dfsVisited,neighbour)) {
					return true;
				}
			} 
			else if (dfsVisited[neighbour]) {
				return true;
			}
		}
		dfsVisited[curr] = false;
		return false;
	}
}