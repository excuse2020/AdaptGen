class Solution {
	int addMaxInWindows(LinkedList<Integer> queue, PriorityQueue<Integer> max) {
		max.clear();
		for (int i = 0; i < queue.size(); i++) {
			max.offer(queue.get(i));
		}
		return max.peek();
	}
	ArrayList<Integer> maxInWindows(int[] num, int size) {
		ArrayList<Integer> res = new ArrayList<Integer>();
		if (num == null || num.length == 0 || size == 0 || num.length < size) {
			return res;
		}
		ArrayDeque<Integer> q = new ArrayDeque<Integer>();
		for (int i = 0; i < size; i++) {
			while (!q.isEmpty() && num[q.peekLast()] < num[i]) {
				q.pollLast();
			}
			q.offer(i);
		}
		int n = num.length;
		for (int i = size; i < n; i++) {
			res.add(num[q.peekFirst()]);
			while (!q.isEmpty() && q.peekFirst() < (i - size + 1)) {
				q.pollFirst();
			}
			while (!q.isEmpty() && num[q.peekLast()] < num[i]) {
				q.pollLast();
			}
			q.offer(i);
		}
		res.add(num[q.peekFirst()]);
		return res;
	}
	ArrayList<Integer> maxInWindows2(int[] num, int size) {
		ArrayList<Integer> res = new ArrayList<Integer>();
		if (num == null || num.length == 0 || size == 0) {
			return res;
		}
		PriorityQueue<Integer> max;
	}
}