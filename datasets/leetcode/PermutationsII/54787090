class Solution {
	List<List<Integer>> l;
	Set<List<Integer>> s;
	void fun(int[] nums, List<Integer> temp, int[] vis) {
		if (temp.size() == nums.length) {
			s.add(temp);
			return;
		}
		for (int i = 0; i < nums.length; i++) {
			if (vis[i] == 0) {
				List<Integer> e = new ArrayList<>(temp);
				int[] v = new int[nums.length];
				for (int j = 0; j < vis.length; j++) {
					v[j] = vis[j];
				}
				temp.add(nums[i]);
				vis[i] = 1;
				fun(nums,temp,vis);
				temp = e;
				vis = v;
			}
		}
	}
	List<List<Integer>> permuteUnique(int[] nums) {
		s = new HashSet<>();
		l = new ArrayList<>();
		Arrays.sort(nums);
		fun(nums,new ArrayList<>(),new int[nums.length]);
		for (List<Integer> a: s) {	
			l.add(a);
		}
		return l;
	}
}