class Solution {
	int minEatingSpeed(int[] piles, int h) {
		int n = piles.length;
		int max = Integer.MIN_VALUE;
		for (int i = 0; i < n; i++) {
			if (max < piles[i]) {
				max = piles[i];
			}
		}
		if (n == h) {
			return max;
		}
		int left = 1;
		int right = max;
		int mid, hours;
		while (left <= right) {
			hours = 0;
			mid = (left + right) / 2;
			for (int i = 0; i < n; i++) {
				hours += Math.ceil((double) piles[i] / mid);
			}
			if (hours > h) {
				left = mid + 1;
			} 
			else {
				right = mid - 1;
			}
		}
		return left;
	}
}