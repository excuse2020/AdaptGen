class Solution {
	void dfs(char[][] grid, int r, int c) {
		if (!inArae(grid,r,c)) {
			return;
		}
		if (grid[r][c] != '1') {
			return;
		}
		grid[r][c] = '2';
		dfs(grid,r - 1,c);
		dfs(grid,r + 1,c);
		dfs(grid,r,c - 1);
		dfs(grid,r,c + 1);
	}
	boolean inArae(char[][] grid, int r, int c) {
		return 0 <= r && r < grid.length && 0 <= c && c < grid[0].length;
	}
	int solve(char[][] grid) {
		int count = 0;
		for (int i = 0; i < grid.length; i++) {
			for (int j = 0; j < grid[0].length; j++) {
				if (grid[i][j] == '1') {
					count++;
					dfs(grid,i,j);
				}
			}
		}
		return count;
	}
}