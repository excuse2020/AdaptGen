class Solution {
	int[] par;
	int[] size;
	int find(int u) {
		if (u == par[u]) {
			return u;
		}
		return par[u] = find(par[u]);
	}
	void merge(int u, int v) {
		if (size[u] > size[v]) {
			par[v] = u;
			size[u] += size[v];
		} 
		else {
			par[u] = v;
			size[v] += size[u];
		}
	}
	int minMalwareSpread(int[][] graph, int[] initial) {
		int n = graph.length;
		par = new int[n];
		size = new int[n];
		for (int i = 0; i < n; i++) {
			par[i] = i;
			size[i] = 1;
		}
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < n; j++) {
				if (graph[i][j] == 1) {
					int p1 = find(i);
					int p2 = find(j);
					if (p1 != p2) {
						merge(p1,p2);
					}
				}
			}
		}
		int[] infected = new int[n];
		for (int e: initial) {	
			int p = find(e);
			infected[p]++;
		}
		int ans = -1;
		int maxSize = -1;
		for (int e: initial) {	
			int p = find(e);
			if (infected[p] == 1 && size[p] >= maxSize) {
				if (maxSize == size[p]) {
					ans = Math.min(ans,e);
				} 
				else {
					ans = e;
				}
				maxSize = size[p];
			}
		}
		if (ans == -1) {
			int min = n + 1;
			for (int e: initial) {	
				min = Math.min(min,e);
			}
			return min;
		}
		return ans;
	}
}