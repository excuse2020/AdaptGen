class Solution {
	TreeNode createBinaryTree(int[][] descriptions) {
		Map<Integer, TreeNode> map = new HashMap<>();
		Map<Integer, Integer> childParent = new HashMap<>();
		int parent = 0;
		for (int[] description: descriptions) {	
			parent = description[0];
			int child = description[1];
			TreeNode parentNode = map.getOrDefault(parent,new TreeNode(parent));
			TreeNode childNode = map.getOrDefault(child,new TreeNode(child));
			if (description[2] == 1) {
				parentNode.left = childNode;
			} 
			else {
				parentNode.right = childNode;
			}
			map.put(parent,parentNode);
			map.put(child,childNode);
			childParent.put(child,parent);
		}
		int root = getRoot(childParent,parent);
		return map.get(root);
	}
	int getRoot(Map<Integer, Integer> childParent, int parent) {
		if (childParent.get(parent) == null) {
			return parent;
		}
		return getRoot(childParent,childParent.get(parent));
	}
}