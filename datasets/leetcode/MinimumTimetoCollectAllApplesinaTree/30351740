class Solution {
	int apples = 0;
	ArrayList<ArrayList<Integer>> graph = new ArrayList<>();
	int minTime(int n, int[][] edges, List<Boolean> hasApple) {
		for (int i = 0; i < n; i++) {
			graph.add(new ArrayList<>());
		}
		for (int[] edge: edges) {	
			graph.get(edge[0]).add(edge[1]);
			graph.get(edge[1]).add(edge[0]);
		}
		return recurr(0,hasApple,-1) - apples;
	}
	int recurr(int node, List<Boolean> hasApple, int parant) {
		int total = hasApple.get(node) ? 1 : 0;
		int children = 0;
		apples += hasApple.get(node) ? 1 : 0;
		for (int it: graph.get(node)) {	
			if (it == parant) {
				continue;
			}
			int count = recurr(it,hasApple,node);
			children += (count == 0) ? 0 : count + 2;
		}
		return children + total;
	}
}