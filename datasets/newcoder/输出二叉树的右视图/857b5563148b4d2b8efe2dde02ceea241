class Solution {
	int[] infixorder = null;
	Map<Integer, Integer> map = new HashMap<>();
	int[] preorder = null;
	List<Integer> res = new ArrayList<>();
	void searchRightestNode(int s1, int e1, int s2, int e2, int height) {
		if (s1 > e1) {
			return;
		}
		int root = preorder[s1];
		if (res.size() <= height) {
			res.add(root);
		}
		int i = map.get(root);
		searchRightestNode(s1 + i - s2 + 1,e1,i + 1,e2,height + 1);
		searchRightestNode(s1 + 1,s1 + i - s2,s2,i - 1,height + 1);
	}
	int[] solve(int[] xianxu, int[] zhongxu) {
		for (int i = 0; i < zhongxu.length; ++i) {
			map.put(zhongxu[i],i);
		}
		this.preorder = xianxu;
		this.infixorder = zhongxu;
		searchRightestNode(0,xianxu.length - 1,0,zhongxu.length - 1,0);
		int[] ans = new int[res.size()];
		for (int i = 0; i < res.size(); ++i) {
			ans[i] = res.get(i);
		}
		return ans;
	}
}