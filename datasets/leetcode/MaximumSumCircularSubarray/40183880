class Solution {
	int kadane(int[] nums) {
		int maxSum = nums[0];
		int currentSum = nums[0];
		for (int i = 1; i < nums.length; i++) {
			currentSum = Math.max(nums[i],currentSum + nums[i]);
			maxSum = Math.max(maxSum,currentSum);
		}
		return maxSum;
	}
	int maxSubarraySumCircular(int[] nums) {
		int maxSum = kadane(nums);
		if (maxSum < 0) {
			return maxSum;
		}
		int totalSum = 0;
		for (int num: nums) {	
			totalSum += num;
		}
		int[] invertedArray = new int[nums.length];
		for (int i = 0; i < nums.length; i++) {
			invertedArray[i] = -nums[i];
		}
		int circularMaxSum = totalSum + kadane(invertedArray);
		return Math.max(maxSum,circularMaxSum);
	}
}