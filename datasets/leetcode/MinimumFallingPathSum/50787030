class Solution {
	int minFallingPathSum(int[][] arr) {
		int row = arr.length;
		int col = arr[0].length;
		int min = Integer.MAX_VALUE;
		int dp = new int[row][col];
		for (int[] i: dp) {	
			Arrays.fill(i,Integer.MAX_VALUE);
		}
		for (int i = 0; i < col; i++) {
			min = Math.min(min,sol(arr,0,i,dp));
		}
		return min;
	}
	int sol(int[][] arr, int r, int c, int[][] dp) {
		if (dp[r][c] != Integer.MAX_VALUE) {
			return dp[r][c];
		}
		if (r == arr.length - 1) {
			return arr[r][c];
		}
		int ld = Integer.MAX_VALUE;
		int rd = Integer.MAX_VALUE;
		int down = Integer.MAX_VALUE;
		if (c != 0) {
			ld = arr[r][c] + sol(arr,r + 1,c - 1,dp);
		}
		if (c != arr[0].length - 1) {
			rd = arr[r][c] + sol(arr,r + 1,c + 1,dp);
		}
		down = arr[r][c] + sol(arr,r + 1,c,dp);
		dp[r][c] = Math.min(ld,Math.min(rd,down));
		return dp[r][c];
	}
}