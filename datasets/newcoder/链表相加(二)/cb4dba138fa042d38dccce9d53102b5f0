class Solution {
	ListNode addInList(ListNode head1, ListNode head2) {
		ListNode p1 = head1;
		ListNode p2 = head2;
		LinkedList<Integer> stack1 = new LinkedList();
		LinkedList<Integer> stack2 = new LinkedList();
		while (p1 != null) {
			stack1.push(p1.val);
			p1 = p1.next;
		}
		while (p2 != null) {
			stack2.push(p2.val);
			p2 = p2.next;
		}
		int sum = 0, carray = 0;
		ListNode sumHead = null;
		while (!stack1.isEmpty() || !stack2.isEmpty()) {
			sum = 0;
			if (!stack1.isEmpty()) {
				sum += stack1.pop();
			}
			if (!stack2.isEmpty()) {
				sum += stack2.pop();
			}
			sum += carray;
			carray = sum / 10;
			sum = sum % 10;
			ListNode curNode = new ListNode(sum);
			curNode.next = sumHead;
			sumHead = curNode;
		}
		return sumHead;
	}
}