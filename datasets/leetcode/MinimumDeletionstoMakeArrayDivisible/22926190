class Solution {
	boolean dividesAll(int[] numsDivide, int x) {
		for (int i: numsDivide) {	
			if (i % x != 0) {
				return false;
			}
		}
		return true;
	}
	int minOperations(int[] arr, int[] numsDivide) {
		int min = arr[0];
		HashMap<Integer, Integer> map = new HashMap<>();
		for (int i: arr) {	
			if (map.containsKey(i)) {
				map.put(i,map.get(i) + 1);
			} 
			else {
				map.put(i,1);
			}
			min = Math.min(i,min);
		}
		int ans = 0;
		int all = 0;
		TreeSet<Integer> keys = new TreeSet(map.keySet());
		for (int i: keys) {	
			all += map.get(i);
			if (!dividesAll(numsDivide,i)) {
				ans += map.get(i);
			} 
			else {
				break;
			}
		}
		if (ans == all) {
			return -1;
		}
		return ans;
	}
}