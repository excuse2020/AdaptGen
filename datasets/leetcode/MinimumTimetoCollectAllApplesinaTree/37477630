class Solution {
	List<Integer>[] buildGraph(int n, int[][] edges) {
		List<Integer>[] graph = new List[n];
		for (int i = 0; i < n; i++) {
			graph[i] = new ArrayList<Integer>();
		}
		for (int[] edge: edges) {	
			int from = edge[0];
			int to = edge[1];
			graph[from].add(to);
			graph[to].add(from);
		}
		return graph;
	}
	int dfs(List<Integer>[] graph, int v, List<Boolean> hasApple, boolean[] visited) {
		int total = 0;
		visited[v] = true;
		for (int node: graph[v]) {	
			if (!visited[node]) {
				total += dfs(graph,node,hasApple,visited);
			}
		}
		if ((hasApple.get(v) || total > 0) && v != 0) {
			total += 2;
		}
		return total;
	}
	int minTime(int n, int[][] edges, List<Boolean> hasApple) {
		List<Integer>[] graph = buildGraph(n,edges);
		boolean[] visited = new boolean[n];
		return dfs(graph,0,hasApple,visited);
	}
}