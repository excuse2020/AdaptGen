class Solution {
	Integer[][][] dp;
	int length;
	int maxCost;
	int maxValue;
	int mod = (int) 1e9 + 7;
	int helper(int ind, int maxTillNow, int searchCost) {
		if (ind == length) {
			if (searchCost == maxCost) {
				return 1;
			}
			return 0;
		}
		if (dp[ind][maxTillNow][searchCost] != null) {
			return dp[ind][maxTillNow][searchCost];
		}
		int ans = 0;
		for (int i = 1; i <= maxValue; i++) {
			if (i <= maxTillNow) {
				ans = (ans + helper(ind + 1,maxTillNow,searchCost)) % mod;
			} 
			else {
				if (searchCost < maxCost) {
					ans = (ans + helper(ind + 1,i,searchCost + 1)) % mod;
				}
			}
		}
		return dp[ind][maxTillNow][searchCost] = ans % mod;
	}
	int numOfArrays(int n, int m, int k) {
		dp = new Integer[n + 1][m + 1][k + 1];
		maxCost = k;
		length = n;
		maxValue = m;
		return helper(0,0,0);
	}
}