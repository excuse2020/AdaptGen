class Solution {
	int max = 0;
	int helper(char[][] matrix, int i, int j) {
		if (i >= matrix.length || j >= matrix[0].length) {
			return 0;
		}
		int right = helper(matrix,i,j + 1);
		int diagonal = helper(matrix,i + 1,j + 1);
		int bottom = helper(matrix,i + 1,j);
		int ans = 0;
	}
	int helperMem(char[][] matrix, int i, int j, int[][] dp) {
		if (i >= matrix.length || j >= matrix[0].length) {
			return 0;
		}
		if (dp[i][j] != -1) {
			return dp[i][j];
		}
		int right = helperMem(matrix,i,j + 1,dp);
		int diagonal = helperMem(matrix,i + 1,j + 1,dp);
		int bottom = helperMem(matrix,i + 1,j,dp);
		int ans = 0;
	}
	int helperTab(char[][] matrix) {
		int[][] dp = new int[matrix.length + 1][matrix[0].length + 1];
		for (int row: dp) {	
			Arrays.fill(row,0);
		}
		int row = matrix.length - 1;
		int col = matrix[0].length - 1;
		int right = dp[row][col + 1];
		int diagonal = dp[row + 1][col + 1];
		int bottom = dp[row + 1][col];
	}
	int maximalSquare(char[][] matrix) {
		helperTab(matrix);
		return max * max;
	}
}