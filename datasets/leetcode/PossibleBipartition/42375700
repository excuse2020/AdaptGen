class Solution {
	boolean possibleBipartition(int n, int[][] dislikes) {
		List<List<Integer>> adjList = new ArrayList<>();
		for (int i = 0; i < n; i++) {
			adjList.add(new ArrayList<>());
		}
		for (int edge: dislikes) {	
			adjList.get(edge[0] - 1).add(edge[1] - 1);
			adjList.get(edge[1] - 1).add(edge[0] - 1);
		}
		int color = new int[n];
		Arrays.fill(color,-1);
		for (int node = 0; node < n; node++) {
			if (color[node] == -1) {
				color[node] = 0;
				Stack<Integer> stack = new Stack<>();
				stack.add(node);
				while (!stack.isEmpty()) {
					int curNode = stack.pop();
					for (int neighbor: adjList.get(curNode)) {	
						if (color[neighbor] == -1) {
							stack.push(neighbor);
							color[neighbor] = color[curNode] ^ 1;
						}
						if (color[neighbor] == color[curNode]) {
							return false;
						}
					}
				}
			}
		}
		return true;
	}
}