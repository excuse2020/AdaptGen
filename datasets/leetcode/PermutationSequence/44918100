class Solution {
	String getPermutation(int n, int k) {
		int c = 0;
		StringBuilder s = new StringBuilder();
		for (int i = 1; i <= n; i++) {
			s.append(i);
		}
		while (c != k) {
			int temp = 1;
			int count = 0;
			for (int i = 1; c + temp * i <= k; i++) {
				count++;
				temp *= i;
			}
			c += temp;
			rev(s,s.length() - count);
			if (c < k) {
				nextP(s);
			}
		}
		return s.toString();
	}
	void nextP(StringBuilder s) {
		int pivot = -1;
		int l = s.length() - 1;
		for (int i = 0; i < s.length() - 1; i++) {
			if (s.charAt(i) < s.charAt(i + 1)) {
				pivot = i;
			}
		}
		for (int i = pivot + 1; i < s.length(); i++) {
			if (s.charAt(i) > s.charAt(pivot)) {
				l = i;
			}
		}
		char temp = s.charAt(pivot);
		s.setCharAt(pivot,s.charAt(l));
		s.setCharAt(l,temp);
		rev(s,pivot + 1);
	}
	void rev(StringBuilder s, int i) {
		int j = s.length() - 1;
		while (i <= j) {
			char temp = s.charAt(i);
			s.setCharAt(i,s.charAt(j));
			s.setCharAt(j,temp);
			i++;
			j--;
		}
	}
}