class Solution {
	int maxIncreaseKeepingSkyline(int[][] grid) {
		int m = grid.length;
		int n = grid[0].length;
		int[] maxOfRows = new int[m];
		int[] maxOfCols = new int[n];
		for (int i = 0; i < m; i++) {
			int max = Integer.MIN_VALUE;
			for (int j = 0; j < n; j++) {
				max = Math.max(max,grid[i][j]);
			}
			maxOfRows[i] = max;
		}
		for (int j = 0; j < n; j++) {
			int max = Integer.MIN_VALUE;
			for (int i = 0; i < m; i++) {
				max = Math.max(max,grid[i][j]);
			}
			maxOfCols[j] = max;
		}
		int ans = 0;
		for (int i = 0; i < m; i++) {
			for (int j = 0; j < n; j++) {
				int newHi = Math.min(maxOfRows[i],maxOfCols[j]);
				ans += Math.abs(newHi - grid[i][j]);
				grid[i][j] = newHi;
			}
		}
		return ans;
	}
}