class Solution {
	long M = 1000000007;
	ArrayList<Integer> getPowers(int N) {
		ArrayList<Integer> powers = new ArrayList<Integer>();
		for (int i = 0; i < 64; i++) {
			long x = 1;
			if ((N & (x << i)) > 0) {
				powers.add((int) Math.pow(2,i));
			}
		}
		return powers;
	}
	int[] productQueries(int n, int[][] queries) {
		ArrayList<Integer> powers = getPowers(n);
		int[] res = new int[queries.length];
		for (int i = 0; i < queries.length; i++) {
			int start = queries[i][0];
			int end = queries[i][1];
			long ans = 1;
			for (int k = start; k <= end; k++) {
				ans *= powers.get(k);
				ans = ans % M;
			}
			res[i] = (int) ans;
		}
		return res;
	}
}