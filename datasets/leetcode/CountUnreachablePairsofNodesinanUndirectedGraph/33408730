class Solution {
	long countPairs(int n, int[][] edges) {
		List<List<Integer>> graph = new ArrayList<>();
		for (int i = 0; i < n; i++) {
			graph.add(new ArrayList<>());
		}
		for (int k: edges) {	
			graph.get(k[0]).add(k[1]);
			graph.get(k[1]).add(k[0]);
		}
		long ans = 0;
		int viiss = 0;
		boolean vis = new boolean[n];
		for (int i = 0; i < n; i++) {
			if (!vis[i]) {
				int coun = dfs(graph,i,vis);
				ans += (long) coun * viiss;
				viiss += coun;
			}
		}
		return ans;
	}
	int dfs(List<List<Integer>> graph, int node, boolean[] vis) {
		vis[node] = true;
		int cunt = 1;
		for (int x: graph.get(node)) {	
			if (!vis[x]) {
				cunt += dfs(graph,x,vis);
			}
		}
		return cunt;
	}
}