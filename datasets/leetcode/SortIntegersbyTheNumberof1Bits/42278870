class Solution {
	int countOnes(int n) {
		int count = 0;
		while (n > 0) {
			count += n & 1;
			n >>= 1;
		}
		return count;
	}
	void merge(int[] arr, int l, int m, int r) {
		int n1 = m - l + 1, n2 = r - m;
		int[] L = new int[n1];
		int[] R = new int[n2];
		for (int i = 0; i < n1; i++) {
			L[i] = arr[l + i];
		}
		for (int i = 0; i < n2; i++) {
			R[i] = arr[m + 1 + i];
		}
		int i = 0, j = 0, k = l, bit1, bit2;
		while (i < n1 && j < n2) {
			bit1 = countOnes(L[i]);
			bit2 = countOnes(R[j]);
			if (bit1 < bit2) {
				arr[k] = L[i];
				i++;
			} 
			else if (bit1 > bit2) {
				arr[k] = R[j];
				j++;
			} 
			else if (bit1 == bit2) {
				if (L[i] < R[j]) {
					arr[k] = L[i];
					i++;
				} 
				else {
					arr[k] = R[j];
					j++;
				}
			}
			k++;
		}
		while (i < n1) {
			arr[k] = L[i];
			i++;
			k++;
		}
		while (j < n2) {
			arr[k] = R[j];
			j++;
			k++;
		}
	}
	void sort(int[] arr, int l, int r) {
		if (l < r) {
			int m = l + (r - l) / 2;
			sort(arr,l,m);
			sort(arr,m + 1,r);
			merge(arr,l,m,r);
		}
	}
	int[] sortByBits(int[] arr) {
		sort(arr,0,arr.length - 1);
		return arr;
	}
}