class Solution {
	Boolean dp;
	boolean back(int[] nums, int s) {
		if (s >= nums.length) {
			return true;
		}
		if (dp[s] != null) {
			return dp[s];
		}
		boolean ans = false;
		if (s + 1 < nums.length && nums[s] == nums[s + 1]) {
			ans |= (true && back(nums,s + 2));
		}
		if (!ans && s + 2 < nums.length && nums[s] == nums[s + 1] && nums[s] == nums[s + 2]) {
			ans |= (true && back(nums,s + 3));
		}
		if (!ans && s + 2 < nums.length && nums[s] == nums[s + 1] - 1 && nums[s + 1] == nums[s + 2] - 1) {
			ans |= (true && back(nums,s + 3));
		}
		return dp[s] = ans;
	}
	boolean validPartition(int[] nums) {
		dp = new Boolean[nums.length];
		return back(nums,0);
	}
}