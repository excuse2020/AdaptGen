class Solution {
	void Inorder(TreeNode root, List<Integer> inorder) {
		if (root == null) {
			return;
		}
		Inorder(root.left,inorder);
		inorder.add(root.val);
		Inorder(root.right,inorder);
	}
	TreeNode balanceBST(TreeNode root) {
		List<Integer> inorder = new ArrayList<>();
		Inorder(root,inorder);
		return contructBalancedBST(0,inorder.size() - 1,inorder);
	}
	TreeNode contructBalancedBST(int start, int end, List<Integer> inorder) {
		if (start > end) {
			return null;
		}
		int mid = start + (end - start) / 2;
		TreeNode node = new TreeNode(inorder.get(mid));
		node.left = contructBalancedBST(start,mid - 1,inorder);
		node.right = contructBalancedBST(mid + 1,end,inorder);
		return node;
	}
}