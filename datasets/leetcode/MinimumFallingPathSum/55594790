class Solution {
	int minFallingPathSum(int[][] matrix) {
		int n = matrix.length;
		int m = matrix[0].length;
		int ans = Integer.MAX_VALUE;
		int[][] dp = new int[n][m];
		for (int[] d: dp) {	
			Arrays.fill(d,Integer.MAX_VALUE);
		}
		for (int i = 0; i < n; i++) {
			ans = Math.min(ans,solve(n - 1,i,matrix,dp));
		}
		return ans;
	}
	int solve(int i, int j, int[][] arr, int[][] dp) {
		if (j < 0 || j >= arr[0].length) {
			return (int) 1e9;
		}
		if (i == 0) {
			return arr[0][j];
		}
		if (dp[i][j] != Integer.MAX_VALUE) {
			return dp[i][j];
		}
		int up = arr[i][j] + solve(i - 1,j,arr,dp);
		int ldg = arr[i][j] + solve(i - 1,j - 1,arr,dp);
		int rdg = arr[i][j] + solve(i - 1,j + 1,arr,dp);
		return dp[i][j] = Math.min(up,Math.min(ldg,rdg));
	}
}