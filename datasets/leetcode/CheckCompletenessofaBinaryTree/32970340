class Solution {
	boolean isCompleteTree(TreeNode root) {
		TreeNode node = null;
		Deque<TreeNode> queue = new ArrayDeque<>();
		if (root != null) {
			queue.offer(root);
		}
		List<Integer> l = new ArrayList<>();
		while (!queue.isEmpty()) {
			int size = queue.size();
			for (int i = 0; i < size; i++) {
				node = queue.poll();
				if (node.left != null) {
					l.add(node.left.val);
					queue.offer(node.left);
				} 
				else {
					l.add(null);
				}
				if (node.right != null) {
					l.add(node.right.val);
					queue.offer(node.right);
				} 
				else {
					l.add(null);
				}
			}
		}
		for (int i = 1; i < l.size(); i++) {
			if (l.get(i - 1) == null && l.get(i) != null) {
				return false;
			}
		}
		return true;
	}
}