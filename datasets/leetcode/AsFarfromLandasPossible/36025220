class Solution {
	int maxDistance(int[][] grid) {
		int m = grid.length;
		int n = grid[0].length;
		int temp = 0;
		int max = Integer.MIN_VALUE;
		int landFlag = 0;
		int waterFlag = 0;
		for (int i = 0; i < m; i++) {
			for (int j = 0; j < n; j++) {
				if (grid[i][j] == 1) {
					landFlag = 1;
					continue;
				} 
				else {
					waterFlag = 1;
				}
				if (i == 0 && j == 0) {
					grid[i][j] = m + n;
				} 
				else if (i == 0) {
					grid[i][j] = grid[i][j - 1] + 1;
				} 
				else if (j == 0) {
					grid[i][j] = grid[i - 1][j] + 1;
				} 
				else {
					temp = Math.min(grid[i - 1][j],grid[i][j - 1]);
					grid[i][j] = temp + 1;
				}
			}
		}
		for (int i = m - 1; i >= 0; i--) {
			for (int j = n - 1; j >= 0; j--) {
				if (grid[i][j] == 1) {
					continue;
				}
				if (i == m - 1 && j == n - 1) {
					grid[i][j] = Math.min(m + n,grid[i][j]);
				} 
				else if (i == m - 1) {
					grid[i][j] = Math.min(grid[i][j + 1] + 1,grid[i][j]);
				} 
				else if (j == n - 1) {
					grid[i][j] = Math.min(grid[i + 1][j] + 1,grid[i][j]);
				} 
				else {
					temp = Math.min(grid[i + 1][j],grid[i][j + 1]);
					grid[i][j] = Math.min(temp + 1,grid[i][j]);
				}
			}
		}
		if (landFlag == 0 || waterFlag == 0) {
			return -1;
		}
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < m; j++) {
				max = Math.max(max,grid[i][j]);
			}
		}
		return max - 1;
	}
}