class Solution {
	int maxPalindromes(String s, int k) {
		int n = s.length();
		boolean[][] dp = new boolean[n][n];
		for (int i = n - 1; i >= 0; i--) {
			char c1 = s.charAt(i);
			for (int j = i; j < n; j++) {
				char c2 = s.charAt(j);
				if (i == j) {
					dp[i][j] = true;
				} 
				else if (j == i + 1) {
					dp[i][j] = c1 == c2 ? true : false;
				} 
				else {
					dp[i][j] = c1 == c2 && dp[i + 1][j - 1] ? true : false;
				}
			}
		}
		int[] store = new int[n];
		for (int i = n - 1; i >= 0; i--) {
			int max = 0;
			for (int j = i + k - 1; j < n; j++) {
				if (dp[i][j]) {
					int count = 1 + (j < n - 1 ? store[j + 1] : 0);
					max = Math.max(max,count);
				}
			}
			max = Math.max(max,i < n - 1 ? store[i + 1] : 0);
			store[i] = max;
		}
		return store[0];
	}
}