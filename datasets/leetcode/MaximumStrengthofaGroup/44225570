class Solution {
	long maxStrength(int[] nums) {
		if (nums == null || nums.length == 0) {
			return 0;
		}
		if (nums.length == 1) {
			return nums[0];
		}
		int biggestNegativeNumber = Integer.MIN_VALUE;
		int countOfNegativeNumber = 0;
		int countOfZero = 0;
		long absProduct = 1;
		for (int i = 0; i < nums.length; i++) {
			if (nums[i] == 0) {
				countOfZero++;
				continue;
			}
			if (nums[i] < 0) {
				countOfNegativeNumber++;
				biggestNegativeNumber = Math.max(nums[i],biggestNegativeNumber);
			}
			absProduct *= Math.abs(nums[i]);
		}
		if (countOfNegativeNumber == 1 && (countOfNegativeNumber + countOfZero) == nums.length) {
			return 0;
		}
		if (countOfZero == nums.length) {
			return 0;
		}
		if (countOfNegativeNumber % 2 == 1) {
			absProduct /= Math.abs(biggestNegativeNumber);
		}
		return absProduct;
	}
}