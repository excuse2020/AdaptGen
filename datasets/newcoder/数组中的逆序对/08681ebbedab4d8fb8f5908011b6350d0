class Solution {
	int MOD = (int) (1e9 + 7);
	int cnt = 0;
	int[] tmp;
	int InversePairs(int[] a) {
		int n = a.length;
		tmp = new int[n];
		merge_sort(a,0,n - 1);
		return cnt;
	}
	void merge_sort(int[] a, int l, int r) {
		if (l >= r) {
			return;
		}
		int mid = l + r >> 1;
		merge_sort(a,l,mid);
		merge_sort(a,mid + 1,r);
		int i = 0, j = l, k = mid + 1;
		while (j <= mid && k <= r) {
			if (a[j] <= a[k]) {
				tmp[i++] = a[j++];
			} 
			else {
				cnt = (cnt + mid - j + 1) % MOD;
				tmp[i++] = a[k++];
			}
		}
		while (j <= mid) {
			tmp[i++] = a[j++];
		}
		while (k <= r) {
			tmp[i++] = a[k++];
		}
		for (i = 0, j = l; j <= r; i++, j++) {
			a[j] = tmp[i];
		}
	}
}