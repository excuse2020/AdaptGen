class Solution {
	int maxSubarraySumCircular(int[] nums) {
		int sum = 0;
		for (int i = 0; i < nums.length; i++) {
			sum = sum + nums[i];
		}
		int circularsum = sum - minkadane(nums);
		int normalsum = maxkadane(nums);
		if (circularsum == 0) {
			return normalsum;
		}
		return Math.max(circularsum,normalsum);
	}
	int maxkadane(int[] nums) {
		int max = Integer.MIN_VALUE;
		int sum = 0;
		int i = 0;
		while (i < nums.length) {
			if (sum < 0 && nums[i] >= sum) {
				sum = 0;
			}
			sum = sum + nums[i];
			max = Math.max(sum,max);
			i++;
		}
		return max;
	}
	int minkadane(int[] nums) {
		int min = Integer.MAX_VALUE;
		int sum = 0;
		int i = 0;
		while (i < nums.length) {
			if (sum > 0 && nums[i] <= sum) {
				sum = 0;
			}
			sum = sum + nums[i];
			min = Math.min(sum,min);
			i++;
		}
		return min;
	}
}