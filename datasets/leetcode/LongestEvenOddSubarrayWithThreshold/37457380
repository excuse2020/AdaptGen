class Solution {
	int i;
	int n;
	int helper(int[] nums, int threshold) {
		while (i < n) {
			if (nums[i] % 2 == 0) {
				break;
			}
			i++;
		}
		if (i == n || nums[i] % 2 != 0 || nums[i] > threshold) {
			return 0;
		}
		int count = 1;
		while (i < n - 1) {
			if (nums[i] % 2 == nums[i + 1] % 2 || nums[i] > threshold || nums[i + 1] > threshold) {
				break;
			}
			count++;
			i++;
		}
		System.out.println();
		return count;
	}
	int longestAlternatingSubarray(int[] nums, int threshold) {
		int ans = 0;
		i = 0;
		n = nums.length;
		for (i = 0; i < n; i++) {
			ans = Math.max(ans,helper(nums,threshold));
		}
		return ans;
	}
}