class Solution {
	String dfs(TreeNode root, Map<String, Integer> frequencies, List<TreeNode> result) {
		if (root == null) {
			return "#";
		}
		String subTree = root.val + ",";
		int frequency = frequencies.getOrDefault(subTree,0);
		frequencies.put(subTree,++frequency);
		if (frequency == 2) {
			result.add(root);
		}
		return subTree;
	}
	List<TreeNode> findDuplicateSubtrees(TreeNode root) {
		List<TreeNode> result = new ArrayList<>();
		dfs(root,new HashMap<>(),result);
		return result;
	}
}