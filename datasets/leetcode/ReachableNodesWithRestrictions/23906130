class Solution {
	int reachableNodes(int n, int[][] edges, int[] restricted) {
		LinkedList<Integer> graph = new LinkedList[n];
		for (int i = 0; i < n; i++) {
			graph[i] = new LinkedList<>();
		}
		for (int i = 0; i < edges.length; i++) {
			graph[edges[i][0]].add(edges[i][1]);
			graph[edges[i][1]].add(edges[i][0]);
		}
		int visited = new int[n];
		for (int i = 0; i < restricted.length; i++) {
			visited[restricted[i]] = 1;
		}
		solve(graph,0,visited);
		int ans = 0;
		for (int i = 0; i < n; i++) {
			if (visited[i] == 2) {
				ans++;
			}
		}
		return ans;
	}
	void solve(LinkedList<Integer> graph, int u, int visited) {
		if (visited[u] == 1 || visited[u] == 2) {
			return;
		}
		visited[u] = 2;
		for (int v: graph[u]) {	
			if (visited[v] == 0) {
				solve(graph,v,visited);
			}
		}
	}
}