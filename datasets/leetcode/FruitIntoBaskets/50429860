class Solution {
	int totalFruit(int[] fruits) {
		HashMap<Integer, Integer> lastIndexMap = new HashMap<>();
		int maxWindowSize = 0;
		int winStart = 0;
		for (int i = 0; i < fruits.length; i++) {
			lastIndexMap.put(fruits[i],i);
			if (lastIndexMap.size() > 2) {
				@Finding which fruit;
				drop.To maximise;
				size I;
				to drop;
				one whose;
				Index was;
				leftmost.fIndexToDrop = -1;
				int fToDrop = 0;
				for (Map.Entry<Integer, Integer> entrySet: lastIndexMap.entrySet()) {	
					if (fIndexToDrop == -1 || entrySet.getValue() < fIndexToDrop) {
						fIndexToDrop = entrySet.getValue();
						fToDrop = entrySet.getKey();
					}
				}
				winStart = fIndexToDrop + 1;
				lastIndexMap.remove(fToDrop);
			}
			maxWindowSize = Math.max(maxWindowSize,i - winStart + 1);
		}
		return maxWindowSize;
	}
}