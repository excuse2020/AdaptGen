class Solution {
	int Helper(int[][] grid, int i, int j1, int j2, int[][][] memo) {
		int c = grid[0].length;
		int d = grid.length;
		if (j1 < 0 || j1 >= c || j2 < 0 || j2 >= c) {
			return Integer.MIN_VALUE;
		}
		if (i == d - 1) {
			if (j1 == j2) {
				return grid[i][j1];
			} 
			else {
				return grid[i][j1] + grid[i][j2];
			}
		}
		if (memo[i][j1][j2] != -1) {
			return memo[i][j1][j2];
		}
		int maxi = 0;
		for (int m = -1; m < 2; m++) {
			for (int n = -1; n < 2; n++) {
				int value = 0;
				if (j1 == j2) {
					value = grid[i][j1];
				} 
				else {
					value = grid[i][j1] + grid[i][j2];
				}
				value += Helper(grid,i + 1,j1 + m,j2 + n,memo);
				maxi = Math.max(maxi,value);
			}
		}
		memo[i][j1][j2] = maxi;
		return maxi;
	}
	int cherryPickup(int[][] grid) {
		int[][][] memo = new int[grid.length][grid[0].length][grid[0].length];
		for (int i = 0; i < grid.length; i++) {
			for (int j = 0; j < grid[0].length; j++) {
				for (int k = 0; k < grid[0].length; k++) {
					memo[i][j][k] = -1;
				}
			}
		}
		return Helper(grid,0,0,grid[0].length - 1,memo);
	}
}