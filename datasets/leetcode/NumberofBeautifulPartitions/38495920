class Solution {
	int MOD = (int) 1e9 + 7;
	Set<Character> nonPrimes;
	Set<Character> primes;
	int beautifulPartitions(String s, int k, int minLength) {
		int[][] memo = new int[s.length()][k + 1];
		for (int[] row: memo) {	
			Arrays.fill(row,-1);
		}
	}
	int beautifulPartitions(String s, int index, int k, int minLength, int[][] memo) {
		int N = s.length();
		if (index == N || k < 0) {
			return k == 0 ? 1 : 0;
		}
		char currentChar = s.charAt(index);
		if (!primes.contains(currentChar)) {
			return 0;
		}
		if (memo[index][k] != -1) {
			return memo[index][k];
		}
		int count = 0;
		for (int i = index + minLength - 1; i < N; i++) {
			if (nonPrimes.contains(s.charAt(i))) {
				count += beautifulPartitions(s,i + 1,k - 1,minLength,memo);
				count %= MOD;
			}
			int remaingChars = N - 1;
			if (remaingChars < (k - 1) * minLength) {
				break;
			}
		}
		memo[index][k] = count % MOD;
		return memo[index][k];
	}
}