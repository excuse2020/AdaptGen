class Solution {
	List<List<String>> ans;
	Map<String, Integer> dist;
	List<String> path;
	Set<String> wordSet;
	void dfs(String beginWord, String curWord) {
		if (curWord.equals(beginWord)) {
			Collections.reverse(path);
			ans.add(new ArrayList(path));
			Collections.reverse(path);
			return;
		}
		int i = 0;
		char[] temp = curWord.toCharArray();
		char j;
	}
	List<List<String>> findLadders(String beginWord, String endWord, List<String> wordList) {
		wordSet = new HashSet<>();
		for (String word: wordList) {	
			wordSet.add(word);
		}
		dist = new HashMap<>();
		Queue<String> q = new ArrayDeque<>();
		q.offer(beginWord);
		dist.put(beginWord,1);
		String word = q.poll();
		int i = 0;
		char[] temp = word.toCharArray();
		char j;
	}
}