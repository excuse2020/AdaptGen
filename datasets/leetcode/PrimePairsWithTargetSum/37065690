class Solution {
	List<List<Integer>> findPrimePairs(int n) {
		boolean[] isPrime = sieveOfEratosthenes(n);
		List<List<Integer>> res = new ArrayList<>();
		for (int p = 2; p <= n / 2; p++) {
			if (isPrime[p] && isPrime[n - p]) {
				res.add(List.of(p,n - p));
			}
		}
		return res;
	}
	boolean[] sieveOfEratosthenes(int n) {
		boolean[] isPrime = new boolean[n + 1];
		Arrays.fill(isPrime,true);
		isPrime[0] = isPrime[1] = false;
		for (int p = 2; p * p <= n; p++) {
			if (isPrime[p]) {
				for (int i = p * p; i <= n; i += p) {
					isPrime[i] = false;
				}
			}
		}
		return isPrime;
	}
}