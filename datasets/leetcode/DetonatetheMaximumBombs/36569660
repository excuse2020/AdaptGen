class Solution {
	int maximumDetonation(int[][] bombs) {
		int max = 0;
		HashMap<Integer, List<Integer>> map = new HashMap<>();
		for (int i = 0; i < bombs.length; i++) {
			map.put(i,new ArrayList<>());
			for (int j = 0; j < bombs.length; j++) {
				if (bombs[i][2] >= Math.sqrt(Math.pow(bombs[i][0] - bombs[j][0],2) + Math.pow(bombs[i][1] - bombs[j][1],2))) {
					map.get(i).add(j);
				}
			}
		}
		for (int i = 0; i < bombs.length; i++) {
			Queue<Integer> q = new LinkedList<>();
			boolean[] visited = new boolean[bombs.length];
			int count = 0;
			q.add(i);
			while (!q.isEmpty()) {
				int index = q.poll();
				if (!visited[index]) {
					count++;
					visited[index] = true;
					q.addAll(map.get(index));
				}
			}
			max = Math.max(max,count);
		}
		return max;
	}
}