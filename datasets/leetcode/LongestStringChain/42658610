class comp {
	int compare(String s1, String s2) {
		return s1.length() - s2.length();
	}
}
class Solution {
	boolean compare(String s1, String s2) {
		int n = s2.length();
		int m = s1.length();
		if (n - m != 1) {
			return false;
		}
		int i = 0, j = 0;
		while (j < n) {
			if (i < m && s1.charAt(i) == s2.charAt(j)) {
				i++;
				j++;
			} 
			else {
				j++;
			}
		}
		if (j == n && i == m) {
			return true;
		}
		return false;
	}
	int longestStrChain(String[] words) {
		comp c = new comp();
		Arrays.sort(words,c);
		int n = words.length;
		int dp = new int[n];
		int max = 0;
		Arrays.fill(dp,1);
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < i; j++) {
				if (compare(words[j],words[i])) {
					dp[i] = Math.max(dp[i],dp[j] + 1);
				}
			}
			max = Math.max(max,dp[i]);
		}
		return max;
	}
}