class Solution {
	int maxMoves(int[][] grid) {
		int ans = 0;
		int[][] dp = new int[grid.length][grid[0].length];
		for (int i = 0; i < dp.length; i++) {
			Arrays.fill(dp[i],-1);
		}
		for (int i = 0; i < grid.length; i++) {
			ans = Math.max(ans,movin(i,0,grid,dp));
		}
		return ans;
	}
	int movin(int i, int j, int[][] grid, int[][] dp) {
		if (i < 0 || j < 0 || i >= grid.length || j >= grid[0].length) {
			return 0;
		}
		if (dp[i][j] != -1) {
			return dp[i][j];
		}
		int rightup = 0;
		int mid = 0;
		int rightdown = 0;
		if (i - 1 >= 0 && j + 1 < grid[0].length && grid[i][j] < grid[i - 1][j + 1]) {
			rightup = 1 + movin(i - 1,j + 1,grid,dp);
		}
		if (j + 1 < grid[0].length && grid[i][j] < grid[i][j + 1]) {
			mid = 1 + movin(i,j + 1,grid,dp);
		}
		if (i + 1 < grid.length && j + 1 < grid[0].length && grid[i][j] < grid[i + 1][j + 1]) {
			rightdown = 1 + movin(i + 1,j + 1,grid,dp);
		}
		return dp[i][j] = Math.max(Math.max(mid,rightdown),rightup);
	}
}