class Solution {
	ArrayList<ArrayList<Integer>> buildGraph(int[][] edges, int n) {
		ArrayList<ArrayList<Integer>> graph = new ArrayList<>(n);
		for (int i = 0; i < n; i++) {
			graph.add(new ArrayList<>());
		}
		for (int[] edge: edges) {	
			graph.get(edge[0]).add(edge[1]);
			graph.get(edge[1]).add(edge[0]);
		}
		return graph;
	}
	int[] countSubTrees(int n, int[][] edges, String labels) {
		int[] result = new int[n];
		boolean[] isVisited = new boolean[n];
		var graph = buildGraph(edges,n);
		helper(graph,isVisited,result,labels.toCharArray(),0);
		return result;
	}
	int[] helper(ArrayList<ArrayList<Integer>> graph, boolean[] isVisited, int[] result, char[] labels, int index) {
		int[] frequency = new int[26];
		if (isVisited[index]) {
			return frequency;
		}
		isVisited[index] = true;
		for (int adjacent: graph.get(index)) {	
			if (!isVisited[adjacent]) {
				int[] output = helper(graph,isVisited,result,labels,adjacent);
				for (int i = 0; i < 26; i++) {
					frequency[i] += output[i];
				}
			}
		}
	}
}