class Solution {
	TreeNode Deserialize(String str) {
		TreeNode head = null;
		if (str == null || str.length() == 0) {
			return head;
		}
		String[] nodes = str.split(",");
		TreeNode[] treeNodes = new TreeNode[nodes.length];
		for (int i = 0; i < nodes.length; i++) {
			if (!nodes[i].equals("#")) {
				treeNodes[i] = new TreeNode(Integer.valueOf(nodes[i]));
			}
		}
		for (int i = 0, j = 1; j < treeNodes.length; i++) {
			if (treeNodes[i] != null) {
				treeNodes[i].left = treeNodes[j++];
				treeNodes[i].right = treeNodes[j++];
			}
		}
		return treeNodes[0];
	}
	String Serialize(TreeNode root) {
		StringBuffer sb = new StringBuffer();
		Queue<TreeNode> queue = new LinkedList<TreeNode>();
		if (root != null) {
			queue.add(root);
		}
		while (!queue.isEmpty()) {
			TreeNode node = queue.poll();
			if (node != null) {
				queue.offer(node.left);
				queue.offer(node.right);
				sb.append(node.val + ",");
			} 
			else {
				sb.append("#" + ",");
			}
		}
		if (sb.length() != 0) {
			sb.deleteCharAt(sb.length() - 1);
		}
		return sb.toString();
	}
}