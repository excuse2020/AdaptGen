class Solution {
	int[] dp;
	boolean solve(int[] nums, int i) {
		if (i == nums.length) {
			return true;
		}
		if (dp[i] != 0) {
			return dp[i] == 2;
		}
		if (i + 1 < nums.length && nums[i] == nums[i + 1]) {
			if (solve(nums,i + 2)) {
				dp[i] = 2;
				return true;
			}
		}
		if (i + 2 < nums.length && nums[i] == nums[i + 1] && nums[i] == nums[i + 2]) {
			if (solve(nums,i + 3)) {
				dp[i] = 2;
				return true;
			}
		}
		if (i + 2 < nums.length && nums[i] + 1 == nums[i + 1] && nums[i] + 2 == nums[i + 2]) {
			if (solve(nums,i + 3)) {
				dp[i] = 2;
				return true;
			}
		}
		dp[i] = 1;
		return false;
	}
	boolean validPartition(int[] nums) {
		dp = new int[nums.length];
		return solve(nums,0);
	}
}