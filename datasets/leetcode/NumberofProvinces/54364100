class Solution {
	int count = 0;
	void DFS(int node, boolean[] visited, ArrayList<ArrayList<Integer>> adj) {
		visited[node] = true;
		for (int neighbor: adj.get(node)) {	
			if (!visited[neighbor]) {
				DFS(neighbor,visited,adj);
			}
		}
	}
	int findCircleNum(int[][] isConnected) {
		int V = isConnected.length;
		ArrayList<ArrayList<Integer>> adj = new ArrayList<>();
		for (int i = 0; i < V; i++) {
			adj.add(new ArrayList<>());
		}
		for (int i = 0; i < V; i++) {
			for (int j = 0; j < V; j++) {
				if (isConnected[i][j] == 1 && i != j) {
					adj.get(i).add(j);
					adj.get(j).add(i);
				}
			}
		}
		boolean[] visited = new boolean[V];
		for (int i = 0; i < V; i++) {
			if (!visited[i]) {
				count++;
				DFS(i,visited,adj);
			}
		}
		return count;
	}
}