class Solution {
	int mod = (int) 1e9 + 7;
	int countPairs(int[] deliciousness) {
		Map<Integer, Integer> mp = new HashMap<>();
		for (int d: deliciousness) {	
			mp.put(d,mp.getOrDefault(d,0) + 1);
		}
		long res = 0;
		for (Map.Entry<Integer, Integer> it: mp.entrySet()) {	
			if (it.getKey() != 0) {
				int power_of_two, num2 = 0, num1 = it.getKey();
				if ((num1 & (num1 - 1)) != 0) {
					power_of_two = (int) (Math.log(num1) / Math.log(2)) + 1;
					num2 = (int) Math.pow(2,power_of_two) - num1;
				}
				int cnt = it.getValue();
				res += mp.getOrDefault(num2,0) * cnt;
				if (num2 == 0) {
					res += ((long) cnt * (cnt - 1)) / 2;
				}
				res = res % mod;
			}
		}
		return (int) res;
	}
}