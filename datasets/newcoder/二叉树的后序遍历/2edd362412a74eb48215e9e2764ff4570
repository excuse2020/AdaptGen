class Solution {
	ArrayList<Integer> res = new ArrayList<>();
	int[] postorderTraversal(TreeNode root) {
		if (root == null) {
			return new int[0];
		}
		Stack<TreeNode> sk = new Stack<>();
		TreeNode t = root;
		TreeNode c = root;
		sk.push(t);
		while (!sk.isEmpty()) {
			t = sk.peek();
			if (t.left != null && c != t.left && c != t.right) {
				sk.push(t.left);
			} 
			else if (t.right != null && c != t.right) {
				sk.push(t.right);
			} 
			else {
				res.add(t.val);
				sk.pop();
				c = t;
			}
		}
		int len = res.size();
		int[] result = new int[len];
		for (int i = 0; i < len; i++) {
			result[i] = res.get(i);
		}
		return result;
	}
}