class Solution {
	int findInMountainArray(int target, MountainArray mountainArr) {
		int peak = peakMountain(mountainArr);
		int ans = orderAgnosticBinarySearch(mountainArr,target,0,peak);
		if (ans != -1) {
			return ans;
		}
		return orderAgnosticBinarySearch(mountainArr,target,peak + 1,mountainArr.length() - 1);
	}
	int orderAgnosticBinarySearch(MountainArray mArr, int target, int start, int end) {
		boolean isAsc = mArr.get(start) < mArr.get(end);
		int mid = start + (end - start) / 2;
		while (start <= end) {
			if (mArr.get(mid) == target) {
				return mid;
			} 
			else if (isAsc) {
				if (target < mArr.get(mid)) {
					end = mid - 1;
				} 
				else {
					start = mid + 1;
				}
			} 
			else if (target > mArr.get(mid)) {
				end = mid - 1;
			} 
			else {
				start = mid + 1;
			}
			mid = start + (end - start) / 2;
		}
		return -1;
	}
	int peakMountain(MountainArray mArr) {
		int start = 0;
		int end = mArr.length() - 1;
		while (start < end) {
			int mid = start + (end - start) / 2;
			if (mArr.get(mid) > mArr.get(mid + 1)) {
				end = mid;
			} 
			else {
				start = mid + 1;
			}
		}
		return start;
	}
}