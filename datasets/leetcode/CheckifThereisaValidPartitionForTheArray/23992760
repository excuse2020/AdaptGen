class Solution {
	Boolean dp;
	boolean recurse(int[] nums, int ind) {
		if (dp[ind] != null) {
			return dp[ind];
		}
		int n = nums.length;
		if ((n - ind) >= 2 && nums[ind] == nums[ind + 1] && recurse(nums,ind + 2)) {
			return dp[ind] = true;
		} 
		else if ((n - ind) >= 3 && ((nums[ind] == nums[ind + 1] && nums[ind] == nums[ind + 2]) || (nums[ind] == (nums[ind + 1] - 1) && nums[ind] == (nums[ind + 2] - 2))) && recurse(nums,ind + 3)) {
			return dp[ind] = true;
		}
		return dp[ind] = false;
	}
	boolean validPartition(int[] nums) {
		dp = new Boolean[nums.length + 1];
		dp[nums.length] = true;
		return recurse(nums,0);
	}
}