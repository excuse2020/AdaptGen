class Solution {
	int[] decrypt(int[] code, int k) {
		int length = code.length;
		int[] ans = new int[length];
		if (k > 0) {
			int tailPoint = 1;
			int headPoint = 1;
			int firstIdxAns = 0;
			int i = 1;
			for (i = 1; i <= k; i++) {
				int currIdx = i % length;
				firstIdxAns += code[currIdx];
			}
			tailPoint = i;
			ans[0] = firstIdxAns;
			for (int j = 1; j < ans.length; j++) {
				firstIdxAns -= code[headPoint++ % length];
				firstIdxAns += code[tailPoint++ % length];
				ans[j] = firstIdxAns;
			}
		}
		if (k < 0) {
			int tailPoint = length - 1;
			int headPoint = length - 1;
			int firstIdxAns = 0;
			int i = headPoint;
			int x = 0;
			for (; x < -k; x++, i--) {
				if (i == -1) {
					i = headPoint;
				}
				int currIdx = i;
				firstIdxAns += code[currIdx];
				tailPoint = currIdx - 1;
			}
			ans[0] = firstIdxAns;
			if (tailPoint == -1) {
				tailPoint = length - 1;
			}
			for (int j = 1; j < ans.length; j++) {
				if (headPoint == -1) {
					headPoint = length - 1;
				}
				if (tailPoint == -1) {
					tailPoint = length - 1;
				}
				firstIdxAns -= code[headPoint--];
				firstIdxAns += code[tailPoint--];
				ans[j] = firstIdxAns;
			}
			reverse(ans);
		}
		if (k == 0) {
			Arrays.fill(ans,0);
		}
		return ans;
	}
	void reverse(int[] arr) {
		for (int i = 1, j = arr.length - 1; i < j; i++, j--) {
			arr[i] = arr[i] ^ arr[j];
			arr[j] = arr[i] ^ arr[j];
			arr[i] = arr[i] ^ arr[j];
		}
	}
}