class Solution {
	int helper(int[][] arr, int i, int j, int[][] dp) {
		if (dp[i][j] != -1) {
			return dp[i][j];
		}
		int ans1 = 0;
		int ans2 = 0;
		int ans3 = 0;
		if (i - 1 >= 0 && j + 1 < arr[0].length && arr[i][j] < arr[i - 1][j + 1]) {
			ans1 = 1 + helper(arr,i - 1,j + 1,dp);
		}
		if (j + 1 < arr[0].length && arr[i][j] < arr[i][j + 1]) {
			ans2 = 1 + helper(arr,i,j + 1,dp);
		}
		if (i + 1 < arr.length && j + 1 < arr[0].length && arr[i][j] < arr[i + 1][j + 1]) {
			ans3 = 1 + helper(arr,i + 1,j + 1,dp);
		}
		return dp[i][j] = Math.max(ans1,Math.max(ans2,ans3));
	}
	int maxMoves(int[][] grid) {
		int m = grid.length;
		int n = grid[0].length;
		int[][] dp = new int[m][n];
		for (int[] row: dp) {	
			Arrays.fill(row,-1);
		}
		int ans = 0;
		for (int i = 0; i < m; i++) {
			ans = Math.max(ans,helper(grid,i,0,dp));
		}
		return ans;
	}
}