class Solution {
	void dfs(int v, ArrayList<ArrayList<Integer>> adj, boolean[] visit) {
		visit[v] = true;
		for (Integer i: adj.get(v)) {	
			if (!visit[i]) {
				dfs(i,adj,visit);
			}
		}
	}
	int findCircleNum(int[][] v) {
		ArrayList<ArrayList<Integer>> adj = new ArrayList();
		for (int i = 0; i < v.length; i++) {
			adj.add(new ArrayList<>());
		}
		for (int i = 0; i < v.length; i++) {
			for (int j = 0; j < v.length; j++) {
				if (v[i][j] == 1 && i != j) {
					adj.get(i).add(j);
					adj.get(j).add(i);
				}
			}
		}
		boolean[] visit = new boolean[v.length];
		visit[0] = false;
		int count = 0;
		for (int i = 0; i < v.length; i++) {
			if (!visit[i]) {
				count++;
				dfs(i,adj,visit);
			}
		}
		return count;
	}
}