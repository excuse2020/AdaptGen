class Solution {
	List<Integer> temp;
	void dfs(List<List<Integer>> rev, int node, boolean[] visited) {
		visited[node] = true;
		for (int neigh: rev.get(node)) {	
			if (!visited[neigh]) {
				temp.add(neigh);
				dfs(rev,neigh,visited);
			}
		}
	}
	List<List<Integer>> getAncestors(int n, int[][] edges) {
		List<List<Integer>> rev = new ArrayList<>();
		for (int i = 0; i < n; i++) {
			rev.add(new ArrayList<>());
		}
		for (int i = 0; i < edges.length; i++) {
			rev.get(edges[i][1]).add(edges[i][0]);
		}
		List<List<Integer>> ans = new ArrayList<>();
		for (int i = 0; i < n; i++) {
			boolean[] visited = new boolean[n];
			temp = new ArrayList<>();
			dfs(rev,i,visited);
			Collections.sort(temp);
			ans.add(temp);
		}
		return ans;
	}
}