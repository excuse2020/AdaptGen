class Solution {
	int sumSubarrayMins(int[] arr) {
		int mod = 1000000007;
		int n = arr.length;
		long ans = 0;
		Stack<Integer> stack = new Stack<>();
		int[] left = new int[n];
		int[] right = new int[n];
		Arrays.fill(left,-1);
		Arrays.fill(right,n);
		for (int i = 0; i < n; ++i) {
			while (!stack.isEmpty() && arr[stack.peek()] >= arr[i]) {
				stack.pop();
			}
			if (!stack.isEmpty()) {
				left[i] = stack.peek();
			}
			stack.push(i);
		}
		stack.clear();
		for (int i = n - 1; i >= 0; --i) {
			while (!stack.isEmpty() && arr[stack.peek()] > arr[i]) {
				stack.pop();
			}
			if (!stack.isEmpty()) {
				right[i] = stack.peek();
			}
			stack.push(i);
		}
		for (int i = 0; i < n; ++i) {
			ans += (long) (i - left[i]) * (right[i] - i) % mod * arr[i] % mod;
			ans %= mod;
		}
		return (int) ans;
	}
}