class Solution {
	int nextDay(int stateBitmap) {
		stateBitmap = ~(stateBitmap << 1) ^ (stateBitmap >> 1);
		stateBitmap = stateBitmap & 0x7e;
		return stateBitmap;
	}
	int[] prisonAfterNDays(int[] cells, int N) {
		HashMap<Integer, Integer> seen = new HashMap<>();
		boolean isFastForwarded = false;
		int stateBitmap = 0x0;
		for (int cell: cells) {	
			stateBitmap <<= 1;
			stateBitmap = (stateBitmap | cell);
		}
		while (N > 0) {
			if (!isFastForwarded) {
				if (seen.containsKey(stateBitmap)) {
					N %= seen.get(stateBitmap) - N;
					isFastForwarded = true;
				} 
				else {
					seen.put(stateBitmap,N);
				}
			}
			if (N > 0) {
				N -= 1;
				stateBitmap = this.nextDay(stateBitmap);
			}
		}
		int ret = new int[cells.length];
		for (int i = cells.length - 1; i >= 0; i--) {
			ret[i] = (stateBitmap & 0x1);
			stateBitmap = stateBitmap >> 1;
		}
		return ret;
	}
}