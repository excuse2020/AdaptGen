class Solution {
	int maxCoin(List<List<Integer>> piles, int k, int index, int[][] dp) {
		if (index == piles.size() || k == 0) {
			return 0;
		} 
		else if (dp[index][k] != -1) {
			return dp[index][k];
		} 
		else {
			int max = 0;
			max = Math.max(max,maxCoin(piles,k,index + 1,dp));
			for (int j = 0; j < piles.get(index).size(); j++) {
				if (j + 1 <= k) {
					max = Math.max(max,piles.get(index).get(j) + maxCoin(piles,k - j,index + 1,dp));
				} 
				else {
					break;
				}
			}
			return dp[index][k] = max;
		}
	}
	int maxValueOfCoins(List<List<Integer>> piles, int k) {
		for (int i = 0; i < piles.size(); i++) {
			for (int j = 1; j < piles.get(i).size(); j++) {
				piles.get(i).set(j,piles.get(i).get(j) + piles.get(i).get(j - 1));
			}
		}
		int[][] dp = new int[piles.size()][k + 1];
		for (int i = 0; i < piles.size(); i++) {
			for (int j = 0; j <= k; j++) {
				dp[i][j] = -1;
			}
		}
		return maxCoin(piles,k,0,dp);
	}
}