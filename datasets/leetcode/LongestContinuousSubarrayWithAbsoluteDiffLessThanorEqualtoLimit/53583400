class Solution {
	int longestSubarray(int[] nums, int limit) {
		Deque<Integer> min = new ArrayDeque<>();
		Deque<Integer> max = new ArrayDeque<>();
		int i = 0, j = 0;
		int ans = 0;
		while (j < nums.length) {
			while (!min.isEmpty() && nums[j] < min.peekLast()) {
				min.removeLast();
			}
			while (!max.isEmpty() && nums[j] > max.peekLast()) {
				max.removeLast();
			}
			min.addLast(nums[j]);
			max.addLast(nums[j]);
			while (max.peekFirst() - min.peekFirst() > limit) {
				if (max.peekFirst() == nums[i]) {
					max.pollFirst();
				}
				if (min.peekFirst() == nums[i]) {
					min.pollFirst();
				}
				i++;
			}
			ans = Math.max(ans,j - i + 1);
			j++;
		}
		return ans;
	}
}