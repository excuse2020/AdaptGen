class Solution {
	int[] colorTheArray(int n, int[][] queries) {
		int nums = new int[n];
		int q_len = queries.length;
		int ans = new int[q_len];
		Arrays.fill(nums,0);
		int adj_freq = 0;
		for (int i = 0; i < q_len; i++) {
			int c_in = queries[i][0];
			int c_color = queries[i][1];
			int p_color = nums[c_in];
			if (p_color != 0) {
				if (c_in != 0 && c_in != n - 1) {
					if (nums[c_in - 1] == p_color && nums[c_in + 1] == p_color) {
						adj_freq -= 2;
					} 
					else if (nums[c_in - 1] == p_color || nums[c_in + 1] == p_color) {
						adj_freq -= 1;
					}
					if (nums[c_in - 1] == c_color && nums[c_in + 1] == c_color) {
						adj_freq += 2;
					} 
					else if (nums[c_in - 1] == c_color || nums[c_in + 1] == c_color) {
						adj_freq += 1;
					}
				} 
				else {
					if (c_in == 0 && n > 1) {
						if (p_color == nums[c_in + 1]) {
							adj_freq -= 1;
						}
						if (c_color == nums[c_in + 1]) {
							adj_freq += 1;
						}
					} 
					else {
						if (n > 1 && p_color == nums[c_in - 1]) {
							adj_freq -= 1;
						}
						if (n > 1 && c_color == nums[c_in - 1]) {
							adj_freq += 1;
						}
					}
				}
			} 
			else {
				if (c_in != 0 && c_in != n - 1) {
					if (nums[c_in - 1] == c_color && nums[c_in + 1] == c_color) {
						adj_freq += 2;
					} 
					else if (nums[c_in - 1] == c_color || nums[c_in + 1] == c_color) {
						adj_freq += 1;
					}
				} 
				else {
					if (c_in == 0 && n > 1) {
						if (c_color == nums[c_in + 1]) {
							adj_freq += 1;
						}
					} 
					else {
						if (n > 1 && c_color == nums[c_in - 1]) {
							adj_freq += 1;
						}
					}
				}
			}
			ans[i] = adj_freq;
			nums[c_in] = c_color;
		}
		return ans;
	}
}