class Solution {
	Integer[][][] dp;
	int[][] g;
	int m, n;
	int cherryPickup(int[][] grid) {
		g = grid;
		m = grid.length;
		n = grid[0].length;
		dp = new Integer[m][n][n];
		int ans = recur(new int{0, 0},new int{0, n - 1});
		return ans;
	}
	boolean outOfGrid(int[] r) {
		if (r[0] >= m || r[1] < 0 || r[1] >= n) {
			return true;
		}
		return false;
	}
	int recur(int[] r1, int[] r2) {
		if (outOfGrid(r1) || outOfGrid(r2)) {
			return 0;
		}
		if (dp[r1[0]][r1[1]][r2[1]] != null) {
			return dp[r1[0]][r1[1]][r2[1]];
		}
		int maxCherries = -1;
		for (int i = -1; i <= 1; i++) {
			for (int j = -1; j <= 1; j++) {
				int row = r1[0] + 1;
				int colR1 = r1[1] + i;
				int colR2 = r2[1] + j;
				if (colR1 == colR2) {
					continue;
				}
				int curr = g[r1[0]][r1[1]] + g[r2[0]][r2[1]];
				curr += recur(new int{row, colR1},new int{row, colR2});
				maxCherries = Math.max(maxCherries,curr);
			}
		}
		dp[r1[0]][r1[1]][r2[1]] = maxCherries;
		return dp[r1[0]][r1[1]][r2[1]];
	}
}