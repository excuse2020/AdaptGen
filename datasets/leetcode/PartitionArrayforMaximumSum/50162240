class Solution {
	int maxSumAfterPartitioning(int[] arr, int k) {
		int dp = new int[arr.length];
		return recurse(0,k,arr,dp);
	}
	int recurse(int n, int k, int[] arr, int dp) {
		if (n >= arr.length) {
			return 0;
		}
		if (dp[n] != 0) {
			return dp[n];
		}
		int output = 0;
		int max = Integer.MIN_VALUE;
		for (int i = n; i < n + k && i < arr.length; i++) {
			max = Math.max(arr[i],max);
			int total = max * (i - n + 1) + recurse(i + 1,k,arr,dp);
			output = Math.max(output,total);
		}
		return dp[n] = output;
	}
}