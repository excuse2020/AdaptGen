class Solution {
	int cherryPickup(int[][] grid) {
		int[][][] dp = new int[grid.length][grid[0].length][grid[0].length];
		for (int i = 0; i < grid.length; i++) {
			for (int j = 0; j < grid[0].length; j++) {
				Arrays.fill(dp[i][j],-1);
			}
		}
		return helper(grid,0,0,grid[0].length - 1,dp);
	}
	int helper(int[][] ar, int r, int c1, int c2, int[][][] dp) {
		if (r >= ar.length || c1 < 0 || c2 < 0 || c1 >= ar[0].length || c2 >= ar[0].length) {
			return 0;
		}
		if (dp[r][c1][c2] != -1) {
			return dp[r][c1][c2];
		}
		int a1 = Math.max(helper(ar,r + 1,c1 - 1,c2 - 1,dp),helper(ar,r + 1,c1 - 1,c2 + 1,dp));
		int a2 = Math.max(helper(ar,r + 1,c1 - 1,c2,dp),helper(ar,r + 1,c1,c2 - 1,dp));
		int a3 = Math.max(helper(ar,r + 1,c1,c2,dp),helper(ar,r + 1,c1,c2 + 1,dp));
		int a4 = Math.max(helper(ar,r + 1,c1 + 1,c2 - 1,dp),helper(ar,r + 1,c1 + 1,c2,dp));
		int a = Math.max(a1,helper(ar,r + 1,c1 + 1,c2 + 1,dp));
		if (c1 == c2) {
			return dp[r][c1][c2] = ar[r][c1] + Math.max(a,Math.max(a2,Math.max(a3,a4)));
		}
		return dp[r][c1][c2] = ar[r][c1] + ar[r][c2];
	}
}