class Solution {
	Map<Integer, List<TreeNode>> map = new HashMap<>();
	List<TreeNode> allPossibleFBT(int n) {
		return solvedp(n);
	}
	List<TreeNode> helper(int n) {
		if (n == 1) {
			List<TreeNode> temp = new ArrayList<>();
			temp.add(new TreeNode(0));
			return temp;
		}
		List<TreeNode> ans = new ArrayList<>();
		for (int i = 1; i < n; i++) {
			List<TreeNode> left = helper(i);
			List<TreeNode> right = helper(n - i);
			for (TreeNode l: left) {	
				for (TreeNode r: right) {	
					TreeNode root = new TreeNode(0);
					root.left = l;
					root.right = r;
					ans.add(root);
				}
			}
		}
		return ans;
	}
	List<TreeNode> solvedp(int n) {
		if (n == 0 || n % 2 == 0) {
			return new ArrayList<>();
		}
		if (n == 1) {
			List<TreeNode> ll = new ArrayList<>();
			ll.add(new TreeNode(0));
			return ll;
		}
		if (map.containsKey(n)) {
			return map.get(n);
		}
		List<TreeNode> ans = new ArrayList<>();
		for (int i = 1; i < n; i++) {
			List<TreeNode> left = solvedp(i);
			List<TreeNode> right = solvedp(n - i);
			for (TreeNode l: left) {	
				for (TreeNode r: right) {	
					TreeNode root = new TreeNode(0);
					root.left = l;
					root.right = r;
					ans.add(root);
				}
			}
		}
		map.put(n,ans);
		return ans;
	}
}