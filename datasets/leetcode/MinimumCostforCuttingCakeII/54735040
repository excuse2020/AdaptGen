class Solution {
	long minimumCost(int m, int n, int[] horizontals, int[] verticals) {
		long minCost = 0;
		int v = 0, h = 0;
		Arrays.sort(horizontals);
		Arrays.sort(verticals);
		int i = horizontals.length - 1, j = verticals.length - 1;
		while (i >= 0 && j >= 0) {
			boolean isVerticalCut = false;
			int max = 0;
			if (horizontals[i] > verticals[j]) {
				max = horizontals[i--];
				h++;
			} 
			else {
				max = verticals[j--];
				isVerticalCut = true;
				v++;
			}
			if (isVerticalCut) {
				minCost += (max * (h + 1));
			} 
			else {
				minCost += (max * (v + 1));
			}
		}
		while (i >= 0) {
			minCost += (horizontals[i--] * (v + 1));
		}
		while (j >= 0) {
			minCost += (verticals[j--] * (h + 1));
		}
		return minCost;
	}
}