class Solution {
	void dfs(ArrayList<ArrayList<Integer>> adjlist, boolean[] visited, int index) {
		visited[index] = true;
		for (int i: adjlist.get(index)) {	
			if (!visited[i]) {
				dfs(adjlist,visited,i);
			}
		}
	}
	int findCircleNum(int[][] isConnected) {
		int vertex = isConnected.length;
		ArrayList<ArrayList<Integer>> adjlist = new ArrayList<>();
		for (int i = 0; i < vertex; i++) {
			adjlist.add(new ArrayList<>());
		}
		for (int i = 0; i < vertex; i++) {
			for (int j = 0; j < vertex; j++) {
				if (isConnected[i][j] == 1 && i != j) {
					adjlist.get(i).add(j);
					adjlist.get(j).add(i);
				}
			}
		}
		boolean visited = new boolean[vertex];
		int ans = 0;
		for (int i = 0; i < isConnected.length; i++) {
			if (!visited[i]) {
				ans++;
				dfs(adjlist,visited,i);
			}
		}
		return ans;
	}
}