class Solution {
	int maxAbsValExpr(int[] A, int[] B) {
		int n = B.length;
		int max = 0;
		int prevOpt1C = A[0] + B[0];
		int prevOpt2C = A[0] - B[0];
		int prevOpt3C = -A[0] + B[0];
		int prevOpt4C = -A[0] - B[0];
		for (int i = 1; i < n; i++) {
			int opt1D = -A[i] - B[i] + i;
			max = Math.max(max,opt1D + prevOpt1C);
			int opt2D = -A[i] + B[i];
			max = Math.max(max,opt2D + prevOpt2C);
			int opt3D = A[i] - B[i] + i;
			max = Math.max(max,opt3D + prevOpt3C);
			int opt4D = A[i] + B[i];
			max = Math.max(max,opt4D + prevOpt4C);
			int opt1C = A[i] + B[i] - i;
			prevOpt1C = Math.max(prevOpt1C,opt1C);
			int opt2C = A[i] - B[i];
			prevOpt2C = Math.max(prevOpt2C,opt2C);
			int opt3C = -A[i] + B[i] - i;
			prevOpt3C = Math.max(prevOpt3C,opt3C);
			int opt4C = -A[i] - B[i];
			prevOpt4C = Math.max(prevOpt4C,opt4C);
		}
		return max;
	}
}