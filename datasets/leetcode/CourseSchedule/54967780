class Solution {
	boolean canFinish(int numCourses, int[][] prerequisites) {
		ArrayList<ArrayList<Integer>> li = new ArrayList<>();
		for (int i = 0; i < numCourses; i++) {
			li.add(new ArrayList<Integer>());
		}
		int n = prerequisites.length;
		for (int i = 0; i < n; i++) {
			li.get(prerequisites[i][1]).add(prerequisites[i][0]);
		}
		int indegree = new int[numCourses];
		for (int i = 0; i < li.size(); i++) {
			for (int j = 0; j < li.get(i).size(); j++) {
				indegree[li.get(i).get(j)]++;
			}
		}
		Queue<Integer> qu = new LinkedList<Integer>();
		for (int i = 0; i < numCourses; i++) {
			if (indegree[i] == 0) {
				qu.add(i);
			}
		}
		int count = 0;
		while (qu.size() > 0) {
			int ele = qu.poll();
			count++;
			for (int i = 0; i < li.get(ele).size(); i++) {
				indegree[li.get(ele).get(i)]--;
				if (indegree[li.get(ele).get(i)] == 0) {
					qu.add(li.get(ele).get(i));
				}
			}
		}
		return count == numCourses;
	}
}