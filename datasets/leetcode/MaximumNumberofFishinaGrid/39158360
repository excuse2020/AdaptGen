class Solution {
	int dfs(int[][] grid, int r, int c) {
		int m = grid.length;
		int n = grid[0].length;
		if (r < 0 || c < 0 || r >= m || c >= n || grid[r][c] == 0) {
			return 0;
		}
		int curr = grid[r][c];
		grid[r][c] = 0;
		int u = dfs(grid,r - 1,c);
		int d = dfs(grid,r + 1,c);
		int ri = dfs(grid,r,c + 1);
		int l = dfs(grid,r,c - 1);
		return curr + l;
	}
	int findMaxFish(int[][] grid) {
		int max = 0;
		int m = grid.length;
		int n = grid[0].length;
		for (int i = 0; i < m; i++) {
			for (int j = 0; j < n; j++) {
				if (grid[i][j] != 0) {
					int maxFish = dfs(grid,i,j);
					max = Math.max(max,maxFish);
				}
			}
		}
		return max;
	}
}