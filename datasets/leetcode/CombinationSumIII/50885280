class Solution {
	List<List<Integer>> combinationSum3(int k, int n) {
		List<List<Integer>> res = new ArrayList<>();
		int[] candidates = new int[9];
		for (int i = 0; i < 9; i++) {
			candidates[i] = i + 1;
		}
		ArrayList<Integer> ds = new ArrayList<>();
		count(candidates,n,0,ds,res,k);
		return res;
	}
	void count(int[] candidates, int target, int ind, ArrayList<Integer> ds, List<List<Integer>> res, int k) {
		if (ds.size() == k) {
			if (target == 0) {
				res.add(new ArrayList<>(ds));
			}
			return;
		}
		for (int i = ind; i < candidates.length; i++) {
			if (i > ind && candidates[i] == candidates[i - 1]) {
				continue;
			}
			if (candidates[i] > target) {
				break;
			}
			ds.add(candidates[i]);
			count(candidates,target - candidates[i],i + 1,ds,res,k);
			ds.remove(ds.size() - 1);
		}
	}
}