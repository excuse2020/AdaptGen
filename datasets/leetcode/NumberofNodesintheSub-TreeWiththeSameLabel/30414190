class Solution {
	int[] op;
	int[] countSubTrees(int n, int[][] edges, String labels) {
		HashMap<Integer, List<Integer>> map = new HashMap<>();
		int[] answer = new int[n];
		boolean[] visited = new boolean[n];
		op = new int[n];
		int a = edge[0];
		int b = edge[1];
	}
	int[] postfix(int source, HashMap<Integer, List<Integer>> map, boolean[] visited, String labels) {
		visited[source] = true;
		List<Integer> list = map.get(source);
		int[] main = new int[26];
		for (int i = 0; i < list.size(); i++) {
			int a = list.get(i);
			if (!visited[a]) {
				int[] arr = postfix(a,map,visited,labels);
				for (int j = 0; j < 26; j++) {
					main[j] += arr[j];
				}
			}
		}
		char ch = labels.charAt(source);
	}
}