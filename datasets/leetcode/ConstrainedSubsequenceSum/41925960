class Solution {
	int constrainedSubsetSum(int[] nums, int k) {
		int n = nums.length;
		int[] arr = new int[n];
		System.arraycopy(nums,0,arr,0,n);
		PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> {b[0] - a[0]});
		pq.add(new int{nums[0], 0});
		int result = arr[0];
		for (int i = 1; i < n; i++) {
			while (!pq.isEmpty() && i - pq.peek()[1] > k) {
				pq.poll();
			}
			arr[i] = Math.max(arr[i],nums[i] + pq.peek()[0]);
			pq.add(new int{arr[i], i});
			result = Math.max(result,arr[i]);
		}
		return result;
	}
}