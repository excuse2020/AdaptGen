class Solution {
	int minSideJumps(int[] obstacles) {
		int n = obstacles.length;
		int dp = new int[3][n];
		for (int i = 1; i < n - 1; i++) {
			if (obstacles[i] != 0) {
				dp[obstacles[i] - 1][i] = -1;
			}
		}
		if (dp[0][1] != -1) {
			dp[0][1] = 1;
		}
		if (dp[2][1] != -1) {
			dp[2][1] = 1;
		}
		for (int i = 2; i < n; i++) {
			if (dp[0][i] != -1) {
				dp[0][i] = 100000000;
				if (dp[0][i - 1] != -1) {
					dp[0][i] = dp[0][i - 1];
				}
				if (dp[1][i - 1] != -1 && dp[1][i] != -1) {
					dp[0][i] = Math.min(dp[0][i],dp[1][i - 1] + 1);
				}
				if (dp[2][i - 1] != -1 && dp[2][i] != -1) {
					dp[0][i] = Math.min(dp[0][i],dp[2][i - 1] + 1);
				}
			}
			if (dp[1][i] != -1) {
				dp[1][i] = 100000000;
				if (dp[1][i - 1] != -1) {
					dp[1][i] = dp[1][i - 1];
				}
				if (dp[0][i - 1] != -1 && dp[0][i] != -1) {
					dp[1][i] = Math.min(dp[1][i],dp[0][i - 1] + 1);
				}
				if (dp[2][i - 1] != -1 && dp[2][i] != -1) {
					dp[1][i] = Math.min(dp[1][i],dp[2][i - 1] + 1);
				}
			}
			if (dp[2][i] != -1) {
				dp[2][i] = 100000000;
				if (dp[2][i - 1] != -1) {
					dp[2][i] = dp[2][i - 1];
				}
				if (dp[0][i - 1] != -1 && dp[0][i] != -1) {
					dp[2][i] = Math.min(dp[2][i],dp[0][i - 1] + 1);
				}
				if (dp[1][i - 1] != -1 && dp[1][i] != -1) {
					dp[2][i] = Math.min(dp[2][i],dp[1][i - 1] + 1);
				}
			}
		}
		int ans = 1000000000;
		ans = Math.min(dp[0][n - 1],Math.min(dp[1][n - 1],dp[2][n - 1]));
		return ans;
	}
}