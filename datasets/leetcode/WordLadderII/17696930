class Solution {
	List<List<String>> findLadders(String beginWord, String endWord, List<String> wordList) {
		var res = new ArrayList<List<String>>();
		var words = new HashSet<>(wordList);
		if (!words.contains(endWord)) {
			return res;
		}
		var queue = new ArrayDeque<List<String>>();
		queue.push(Arrays.asList(beginWord));
		var usedInPreviousLevels = new HashSet<String>();
		usedInPreviousLevels.add(beginWord);
		var lastLevel = false;
		var levelSize = queue.size();
		var usedInCurrentLevel = new HashSet<String>();
		int lvl = 0;
		var path = queue.poll();
		var node = path.get(path.size() - 1);
		if (node.equals(endWord)) {
			res.add(path);
			lastLevel = true;
		}
		var chars = node.toCharArray();
		int i = 0;
		var oldChar = chars[i];
		char l;
	}
}