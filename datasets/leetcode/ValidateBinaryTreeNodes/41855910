class Solution {
	boolean bfs(ArrayList<ArrayList<Integer>> graph, int root) {
		Queue<Integer> q = new LinkedList<>();
		q.add(root);
		boolean visited = new boolean[graph.size()];
		for (; (q.isEmpty() == false); ) {
			int current = q.poll();
			if (visited[current] == true) {
				return false;
			}
			visited[current] = true;
			ArrayList<Integer> currentList = graph.get(current);
			for (int i: currentList) {	
				q.add(i);
			}
		}
		for (boolean a: visited) {	
			if (!a) {
				return false;
			}
		}
		return true;
	}
	boolean util2(int n, int leftChild, int rightChild) {
		int in = new int[n];
		ArrayList<ArrayList<Integer>> graph = new ArrayList<>();
		for (int i = 0; i < n; i++) {
			graph.add(new ArrayList<>());
		}
		for (int i = 0; i < leftChild.length; i++) {
			if (leftChild[i] != -1) {
				in[leftChild[i]]++;
				graph.get(i).add(leftChild[i]);
			}
			if (rightChild[i] != -1) {
				in[rightChild[i]]++;
				graph.get(i).add(rightChild[i]);
			}
		}
		int root = -1;
		for (int i = 0; i < in.length; i++) {
			if (in[i] == 0) {
				root = i;
				break;
			}
		}
		if (root == -1) {
			return false;
		}
		return bfs(graph,root);
	}
	boolean validateBinaryTreeNodes(int n, int[] leftChild, int[] rightChild) {
		return util2(n,leftChild,rightChild);
	}
}