class Solution {
	int binarySearchAscending(MountainArray mountainArr, int target, int start, int end) {
		while (start <= end) {
			int mid = start + (end - start) / 2;
			int midValue = mountainArr.get(mid);
			if (midValue == target) {
				return mid;
			} 
			else if (midValue < target) {
				start = mid + 1;
			} 
			else {
				end = mid - 1;
			}
		}
		return -1;
	}
	int binarySearchDescending(MountainArray mountainArr, int target, int start, int end) {
		while (start <= end) {
			int mid = start + (end - start) / 2;
			int midValue = mountainArr.get(mid);
			if (midValue == target) {
				return mid;
			} 
			else if (midValue < target) {
				end = mid - 1;
			} 
			else {
				start = mid + 1;
			}
		}
		return -1;
	}
	int findInMountainArray(int target, MountainArray mountainArr) {
		int peakIndex = findPeakIndex(mountainArr);
		int left = binarySearchAscending(mountainArr,target,0,peakIndex);
		if (left != -1) {
			return left;
		}
		int right = binarySearchDescending(mountainArr,target,peakIndex + 1,mountainArr.length() - 1);
		return right;
	}
	int findPeakIndex(MountainArray mountainArr) {
		int start = 0, end = mountainArr.length() - 1;
		while (start < end) {
			int mid = start + (end - start) / 2;
			if (mountainArr.get(mid) < mountainArr.get(mid + 1)) {
				start = mid + 1;
			} 
			else {
				end = mid;
			}
		}
		return start;
	}
}