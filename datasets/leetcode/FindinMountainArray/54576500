class Solution {
	int findInMountainArray(int target, MountainArray mountainArr) {
		int i = 0, j = mountainArr.length() - 1;
		int peak = -1;
		while (i <= j) {
			int mid = i - (i - j) / 2;
			int mid_element = mountainArr.get(mid);
			int prev_element = mountainArr.get(mid - 1);
			int next_element = mountainArr.get(mid + 1);
			if (mid_element > prev_element && mid_element > next_element) {
				if (mid_element == target) {
					return mid;
				}
				peak = mid;
				break;
			} 
			else if (mid_element > prev_element && mid_element < next_element) {
				i = mid;
			} 
			else if (mid_element < prev_element && mid_element > next_element) {
				j = mid;
			}
		}
		i = 0;
		j = peak - 1;
		while (i <= j) {
			int mid = i - (i - j) / 2;
			int mid_element = mountainArr.get(mid);
			if (mid_element < target) {
				i = mid + 1;
			} 
			else if (mid_element > target) {
				j = mid - 1;
			} 
			else {
				return mid;
			}
		}
		i = peak + 1;
		j = mountainArr.length() - 1;
		while (i <= j) {
			int mid = i - (i - j) / 2;
			int mid_element = mountainArr.get(mid);
			if (mid_element < target) {
				j = mid - 1;
			} 
			else if (mid_element > target) {
				i = mid + 1;
			} 
			else {
				return mid;
			}
		}
		return -1;
	}
}