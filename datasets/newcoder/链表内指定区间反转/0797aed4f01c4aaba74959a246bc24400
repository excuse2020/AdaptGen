class Solution {
	ListNode reverseBetween(ListNode head, int m, int n) {
		if (head == null) {
			return null;
		}
		if (m == n) {
			return head;
		}
		List<Integer> oneList = new ArrayList<>();
		List<Integer> twoList = new ArrayList<>();
		ListNode currentNode = head;
		while (currentNode != null) {
			oneList.add(currentNode.val);
			currentNode = currentNode.next;
		}
		for (int i = m - 1; i < n; i++) {
			twoList.add(oneList.get(i));
		}
		Collections.reverse(twoList);
		int j = 0;
		for (int i = m - 1; i < n; i++) {
			oneList.set(i,twoList.get(j));
			j++;
		}
		ListNode listNode = head;
		for (Integer anOneList: oneList) {	
			listNode.val = anOneList;
			listNode = listNode.next;
		}
		return head;
	}
}