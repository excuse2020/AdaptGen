class Solution {
	void calcPrefSumMatrix(int[][] prefSumMatrix, int[][] matrix) {
		int m = matrix.length;
		int n = matrix[0].length;
		for (int i = 0; i < m; i++) {
			for (int j = 0; j < n; j++) {
				prefSumMatrix[i + 1][j + 1] = matrix[i][j] + prefSumMatrix[i][j + 1] - prefSumMatrix[i][j];
			}
		}
	}
	int numSubmatrixSumTarget(int[][] matrix, int target) {
		int m = matrix.length;
		int n = matrix[0].length;
		int ans = 0;
		int[][] prefSum = new int[m + 1][n + 1];
		calcPrefSumMatrix(prefSum,matrix);
		for (int r = 0; r < m; r++) {
			for (int r1 = r; r1 < m; r1++) {
				Map<Integer, Integer> map = new HashMap<>();
				map.put(0,1);
				for (int c = 0; c < n; c++) {
					int subSum = subMatSum(prefSum,r,r1,0,c);
					int chk = subSum - target;
					if (map.containsKey(chk)) {
						ans += map.get(chk);
					}
					map.put(subSum,map.getOrDefault(subSum,0) + 1);
				}
			}
		}
		return ans;
	}
	int subMatSum(int[][] prefSumMatrix, int r1, int r2, int c1, int c2) {
		return prefSumMatrix[r2 + 1][c2 + 1] - prefSumMatrix[r1][c2 + 1] + prefSumMatrix[r1][c1];
	}
}