class Solution {
	ListNode reverse(ListNode head) {
		ListNode pre = null;
		ListNode cur = head;
		while (cur.next != null) {
			ListNode nex = cur.next;
			cur.next = pre;
			pre = cur;
			cur = nex;
		}
		cur.next = pre;
		return cur;
	}
	ListNode reverseBetween(ListNode head, int m, int n) {
		ListNode dum = new ListNode(-1);
		dum.next = head;
		ListNode pre = dum;
		ListNode cur = head;
		ListNode left = head;
		for (int i = 0; left.next != null && i < m - 1; i++) {
			pre = left;
			left = left.next;
		}
		ListNode right = pre;
		for (int i = m; right.next != null && i < n + 1; i++) {
			right = right.next;
		}
		cur = right.next;
		pre.next = null;
		right.next = null;
		reverse(left);
		pre.next = right;
		left.next = cur;
		return dum.next;
	}
}