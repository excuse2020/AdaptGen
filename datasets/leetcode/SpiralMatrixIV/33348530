class Solution {
	int[][] spiralMatrix(int m, int n, ListNode head) {
		int[][] res = new int[m][n];
		ListNode runner = head;
		int top = 0, left = 0, bottom = m - 1, right = n - 1;
		int direction = 0;
		while (top <= bottom && left <= right) {
			if (direction == 0) {
				for (int i = left; i <= right; i++) {
					if (runner != null) {
						res[top][i] = runner.val;
						runner = runner.next;
					} 
					else {
						res[top][i] = -1;
					}
				}
				direction = 1;
				top++;
			} 
			else if (direction == 1) {
				for (int i = top; i <= bottom; i++) {
					if (runner != null) {
						res[i][right] = runner.val;
						runner = runner.next;
					} 
					else {
						res[i][right] = -1;
					}
				}
				direction = 2;
				right--;
			} 
			else if (direction == 2) {
				for (int i = right; i >= left; i--) {
					if (runner != null) {
						res[bottom][i] = runner.val;
						runner = runner.next;
					} 
					else {
						res[bottom][i] = -1;
					}
				}
				direction = 3;
				bottom--;
			} 
			else if (direction == 3) {
				for (int i = bottom; i >= top; i--) {
					if (runner != null) {
						res[i][left] = runner.val;
						runner = runner.next;
					} 
					else {
						res[i][left] = -1;
					}
				}
				direction = 0;
				left++;
			}
		}
		return res;
	}
}