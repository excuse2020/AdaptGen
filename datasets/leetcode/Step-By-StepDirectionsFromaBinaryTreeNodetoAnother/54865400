class Solution {
	TreeNode parent;
	String findPath(TreeNode root, int key, StringBuilder ans) {
		if (root == null) {
			return "";
		}
		if (root.val == key) {
			return ans.toString();
		}
	}
	String getDirections(TreeNode root, int startValue, int destValue) {
		traverse(root,startValue,destValue);
		String startPath = findPath(parent,startValue,new StringBuilder());
		String endPath = findPath(parent,destValue,new StringBuilder());
		int count = startPath.length();
		StringBuilder ans = new StringBuilder();
		int i = 0;
	}
	boolean traverse(TreeNode root, int start, int end) {
		if (root == null) {
			return false;
		}
		boolean st = (root.val == start) || (root.val == end);
		boolean left = traverse(root.left,start,end);
		boolean right = traverse(root.right,start,end);
		if (left && right || left && st || right && st) {
			parent = root;
			return true;
		}
		return st || left;
	}
}