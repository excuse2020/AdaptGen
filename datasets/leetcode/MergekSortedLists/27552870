class Solution {
	ListNode mergeK(ListNode[] lists, int i, int j) {
		if (j == i) {
			return lists[i];
		}
		if (j - i == 1) {
			return mergeTwo(lists[i],lists[j]);
		}
		int mid = i + (j - i) / 2;
		return mergeTwo(mergeK(lists,i,mid),mergeK(lists,mid + 1,j));
	}
	ListNode mergeKLists(ListNode[] lists) {
		if (lists.length == 0) {
			return null;
		}
		ListNode merged = mergeK(lists,0,lists.length - 1);
		return merged;
	}
	ListNode mergeTwo(ListNode list1, ListNode list2) {
		if (list1 == null) {
			return list2;
		}
		if (list2 == null) {
			return list1;
		}
		if (list1.val < list2.val) {
			list1.next = mergeTwo(list1.next,list2);
			return list1;
		} 
		else {
			list2.next = mergeTwo(list1,list2.next);
			return list2;
		}
	}
}