class Solution {
	int GOAL;
	int K;
	int MOD = 1_000_000_000 + 7;
	int N;
	long[][] t;
	int numMusicPlaylists(int n, int goal, int k) {
		t = new long[goal + 1][goal + 1];
		for (long[] row: t) {	
			Arrays.fill(row,-1L);
		}
		N = n;
		GOAL = goal;
		K = k;
		return (int) solve(0,0);
	}
	long solve(int count_song, int count_unique) {
		if (count_song == GOAL) {
			if (count_unique == N) {
				return t[count_song][count_unique] = 1;
			}
			return 0;
		}
		if (t[count_song][count_unique] != -1) {
			return t[count_song][count_unique];
		}
		long result = 0;
		if (count_unique < N) {
			result += (N - count_unique) * solve(count_song + 1,count_unique + 1);
		}
		if (count_unique > K) {
			result += (count_unique - K) * solve(count_song + 1,count_unique);
		}
		return t[count_song][count_unique] = result % MOD;
	}
}