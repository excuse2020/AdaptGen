class Solution {
	int[] leftMemory = new int[26];
	int[] rightMemory = new int[26];
	int goodSplitCount(int divisonIndex, char[] arr, int size) {
		if (divisonIndex == size) {
			return 0;
		}
		leftMemory[arr[divisonIndex] - 97] = leftMemory[arr[divisonIndex] - 97] + 1;
		rightMemory[arr[divisonIndex] - 97] = rightMemory[arr[divisonIndex] - 97] - 1;
		int left = 0;
		int right = 0;
		for (int i = 0; i < 26; i++) {
			if (leftMemory[i] > 0) {
				left = left + 1;
			}
			if (rightMemory[i] > 0) {
				right = right + 1;
			}
		}
		int count = 0;
		if (left == right) {
			count = count + 1;
		}
		count = count + goodSplitCount(divisonIndex + 1,arr,size);
		return count;
	}
	int numSplits(String s) {
		char[] arr = s.toCharArray();
		int size = arr.length;
		for (int i = 0; i < size; i++) {
			rightMemory[arr[i] - 97] = rightMemory[arr[i] - 97] + 1;
		}
		return goodSplitCount(0,arr,size);
	}
}