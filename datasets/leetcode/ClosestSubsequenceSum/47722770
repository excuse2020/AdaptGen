class Solution {
	int bs(ArrayList<Integer> list, int target) {
		int start = 0;
		int end = list.size() - 1;
		while (start <= end) {
			int mid = start + ((end - start) / 2);
			if (list.get(mid) == target) {
				return list.get(mid);
			} 
			else if (list.get(mid) < target) {
				start = mid + 1;
			} 
			else if (list.get(mid) > target) {
				end = mid - 1;
			}
		}
		if (end >= 0 && start < list.size()) {
			int a = Math.abs(list.get(start) - target);
			int b = Math.abs(list.get(end) - target);
			int min = Math.min(a,b);
			if (Math.abs(list.get(start) - target) == min) {
				return list.get(start);
			} 
			else {
				return list.get(end);
			}
		} 
		else if (end >= 0) {
			return list.get(end);
		} 
		else {
			return list.get(start);
		}
	}
	int minAbsDifference(int[] arr, int goal) {
		int n = arr.length;
		ArrayList<Integer> list1 = new ArrayList<>();
		ArrayList<Integer> list2 = new ArrayList<>();
		subsequenceSum(arr,0,(n + 1) / 2,list1,0);
		subsequenceSum(arr,(n + 1) / 2,n,list2,0);
		Collections.sort(list2);
		int res = Integer.MAX_VALUE;
		for (int x: list1) {	
			int target = goal - x;
			int y = bs(list2,target);
			int sum = x + y;
			int absDiff = Math.abs(goal - sum);
			res = Math.min(res,absDiff);
		}
		return res;
	}
	void subsequenceSum(int arr, int start, int end, ArrayList<Integer> list, int sum) {
		if (start == end) {
			list.add(sum);
			return;
		}
		subsequenceSum(arr,start + 1,end,list,sum + arr[start]);
		subsequenceSum(arr,start + 1,end,list,sum);
	}
}