class Solution {
	List<TreeNode> allPossibleFBT(int n) {
		return solve(n);
	}
	List<TreeNode> solve(int n) {
		if (n == 0 || (n & 1) == 0) {
			List<TreeNode> ret = new ArrayList<>();
			return ret;
		}
		if (n == 1) {
			TreeNode t = new TreeNode(0);
			List<TreeNode> temp = new ArrayList<>();
			temp.add(t);
			return temp;
		}
		List<TreeNode> left_side = new ArrayList<>();
		List<TreeNode> right_side = new ArrayList<>();
		List<TreeNode> ret = new ArrayList<>();
		for (int i = 0; i < n; i++) {
			int r = n - 1;
			left_side = solve(i);
			right_side = solve(r);
			for (TreeNode l1: left_side) {	
				for (TreeNode l2: right_side) {	
					ret.add(new TreeNode(0, l1, l2));
				}
			}
		}
		return ret;
	}
}