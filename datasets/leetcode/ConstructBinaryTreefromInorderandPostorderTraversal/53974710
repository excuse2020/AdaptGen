class Solution {
	TreeNode buildTree(int[] inorder, int[] postorder) {
		if (inorder == null || postorder == null) {
			return null;
		}
		if (inorder.length != postorder.length) {
			return null;
		}
		TreeNode root = new TreeNode(postorder[postorder.length - 1]);
		dfs(root,inorder,postorder,0,inorder.length - 1,0,postorder.length - 1);
		return root;
	}
	void dfs(TreeNode root, int[] inorder, int[] postorder, int instart, int inend, int poststart, int postend) {
		if (inorder.length == 0 || postorder.length == 0) {
			return;
		}
		if (instart == inend || poststart == postend) {
			return;
		}
		if (root == null) {
			return;
		}
		int rootval = postorder[postend];
		int inorderRootIndex = -1;
		for (int i = instart; i <= inend; i++) {
			if (inorder[i] == rootval) {
				inorderRootIndex = i;
			}
		}
		if (inorderRootIndex == -1) {
			return;
		}
		int leftTreeLength = inorderRootIndex - instart;
		int postLeftTreeEnd = poststart + leftTreeLength - 1;
		int postRightTreeEnd = postend - 1;
		TreeNode leftSubRoot = null;
		TreeNode rightSubRoot = null;
		if (postLeftTreeEnd >= poststart) {
			leftSubRoot = new TreeNode(postorder[postLeftTreeEnd]);
		}
		if (postRightTreeEnd >= postLeftTreeEnd + 1) {
			rightSubRoot = new TreeNode(postorder[postRightTreeEnd]);
		}
		root.left = leftSubRoot;
		root.right = rightSubRoot;
		dfs(leftSubRoot,inorder,postorder,instart,inorderRootIndex - 1,poststart,postLeftTreeEnd);
		dfs(rightSubRoot,inorder,postorder,inorderRootIndex + 1,inend,postLeftTreeEnd + 1,postRightTreeEnd);
	}
}