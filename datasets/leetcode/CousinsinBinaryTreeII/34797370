class Solution {
	TreeNode replaceValueInTree(TreeNode root) {
		if (root == null) {
			return root;
		}
		Queue<TreeNode> queue = new LinkedList<>();
		Map<TreeNode, Integer> map = new HashMap<>();
		queue.offer(root);
		Map<TreeNode, TreeNode> childParentMap = new HashMap<>();
		while (!queue.isEmpty()) {
			int size = queue.size();
			int sum = 0;
			for (int idx = 0; idx < size; idx++) {
				TreeNode curr = queue.remove();
				int val = 0;
				if (curr.left != null) {
					queue.offer(curr.left);
					val += curr.left.val;
					childParentMap.put(curr.left,curr);
				}
				if (curr.right != null) {
					queue.offer(curr.right);
					val += curr.right.val;
					childParentMap.put(curr.right,curr);
				}
				if (curr.left != null || curr.right != null) {
					map.put(curr,val);
					sum += val;
				}
			}
			for (TreeNode key: childParentMap.keySet()) {	
				key.val = sum - map.get(childParentMap.get(key));
			}
			map.clear();
			childParentMap.clear();
		}
		root.val = 0;
		return root;
	}
}