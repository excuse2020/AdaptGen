class Solution {
	void dfs(int[][] g, int m, int n, int i, int j, boolean[][] visited, int[] cur) {
		if (i < 0 || i >= m || j < 0 || j >= n || visited[i][j] || g[i][j] == 0) {
			return;
		}
		cur[0] += g[i][j];
		visited[i][j] = true;
		dfs(g,m,n,i + 1,j,visited,cur);
		dfs(g,m,n,i - 1,j,visited,cur);
		dfs(g,m,n,i,j + 1,visited,cur);
		dfs(g,m,n,i,j - 1,visited,cur);
	}
	int findMaxFish(int[][] grid) {
		int res = 0, m = grid.length, n = grid[0].length;
		boolean[][] visited = new boolean[m][n];
		for (int i = 0; i < m; i++) {
			for (int j = 0; j < n; j++) {
				int[] cur = new int[1];
				dfs(grid,m,n,i,j,visited,cur);
				res = Math.max(res,cur[0]);
			}
		}
		return res;
	}
}