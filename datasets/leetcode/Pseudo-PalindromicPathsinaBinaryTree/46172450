class Solution {
	void dfs(TreeNode root, Set<Integer> set, int[] ans) {
		if (root == null) {
			return;
		}
		int key = root.val;
		if (set.contains(key)) {
			set.remove(key);
		} 
		else {
			set.add(key);
		}
		if (root.left == null && root.right == null) {
			if (set.isEmpty() || set.size() == 1) {
				ans[0]++;
			}
		}
		dfs(root.left,set,ans);
		dfs(root.right,set,ans);
		if (set.contains(key)) {
			set.remove(key);
		} 
		else {
			set.add(key);
		}
	}
	int pseudoPalindromicPaths(TreeNode root) {
		int[] ans = new int[1];
		Set<Integer> set = new HashSet<>();
		dfs(root,set,ans);
		return ans[0];
	}
}