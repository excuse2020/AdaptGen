class Solution {
	int f(int i, int j, int m, int n, int grid, int dp) {
		if (i == m - 1 && j == n - 1) {
			return 1;
		}
		if (i < 0 || j < 0 || i > m - 1 || j > n - 1) {
			return 0;
		}
		if (grid[i][j] == 1) {
			return 0;
		}
		if (dp[i][j] != -1) {
			return dp[i][j];
		}
		int down = f(i + 1,j,m,n,grid,dp);
		int right = f(i,j + 1,m,n,grid,dp);
		return dp[i][j] = down + right;
	}
	int uniquePathsWithObstacles(int[][] obstacleGrid) {
		int m = obstacleGrid.length;
		int n = obstacleGrid[0].length;
		if (obstacleGrid[0][0] == 1 || obstacleGrid[m - 1][n - 1] == 1) {
			return 0;
		}
		int dp = new int[m][n];
		for (int row: dp) {	
			Arrays.fill(row,-1);
		}
		return f(0,0,m,n,obstacleGrid,dp);
	}
}