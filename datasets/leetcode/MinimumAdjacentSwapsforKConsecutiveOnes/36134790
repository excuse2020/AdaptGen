class Solution {
	int minMoves(int[] arr, int k) {
		int i = 0;
		int j = 0;
		int n = arr.length;
		int count = 0;
		long pre = new long[n];
		int ind = 0;
		int st = 0;
		int mid = k / 2;
		int radius = mid;
		long ans = Integer.MAX_VALUE;
		while (j < n && count < k - 1) {
			if (arr[j] == 1) {
				count++;
				pre[count - 1] = j + ((count > 1) ? pre[count - 2] : 0);
			}
			j++;
		}
		while (j < n) {
			while (j < n && arr[j] == 0) {
				j++;
			}
			if (j == n) {
				break;
			}
			count++;
			pre[st + k - 1] = j + ((k > 1) ? pre[st + k - 2] : 0);
			j++;
			if ((k & 1) == 1) {
				long left_sum = 0 + ((mid > 0) ? pre[st + mid - 1] : 0);
				long right_sum = pre[st + k - 1] - pre[st + mid];
				left_sum -= (st > 0) ? pre[st - 1] : 0;
				long t = radius * (radius + 1);
				ans = Math.min(ans,right_sum - left_sum);
			} 
			else {
				long left_sum = 0 + ((mid > 0) ? pre[st + mid - 1] : 0);
				long right_sum = pre[st + k - 1] - pre[st + mid];
				long x = pre[st + mid] - ((mid > 0) ? pre[st + mid - 1] : 0);
				left_sum -= (st > 0) ? pre[st - 1] : 0;
				long t = radius * radius;
				ans = Math.min(ans,right_sum - left_sum + x);
				left_sum -= x;
				right_sum += x;
				ans = Math.min(ans,right_sum - left_sum);
			}
			i++;
			count--;
			st++;
			while (i < n && arr[i] == 0) {
				i++;
			}
		}
		return (int) ans;
	}
}