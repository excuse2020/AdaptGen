class Solution {
	int findFirst(int[] nums, int l, int r, int target) {
		if (l > r) {
			return -1;
		}
		int result = -1;
		while (l <= r) {
			int mid = l + (r - l) / 2;
			if (nums[mid] == target) {
				result = mid;
				r = mid - 1;
			} 
			else if (nums[mid] > target) {
				r = mid - 1;
			} 
			else {
				l = mid + 1;
			}
		}
		return result;
	}
	int findLast(int[] nums, int l, int r, int target) {
		if (l > r) {
			return -1;
		}
		int result = -1;
		while (l <= r) {
			int mid = l + (r - l) / 2;
			if (nums[mid] == target) {
				result = mid;
				l = mid + 1;
			} 
			else if (nums[mid] > target) {
				r = mid - 1;
			} 
			else {
				l = mid + 1;
			}
		}
		return result;
	}
	int[] searchRange(int[] nums, int target) {
		int[] result = new int[2];
		result[0] = findFirst(nums,0,nums.length - 1,target);
		result[1] = findLast(nums,0,nums.length - 1,target);
		return result;
	}
}