class Solution {
	int rob(int[] nums) {
		int n = nums.length;
		if (n == 1) {
			return nums[0];
		}
		if (n == 2) {
			return Math.max(nums[0],nums[1]);
		}
		int[] includeFirstHouse = new int[n - 1];
		int[] includeLastHouse = new int[n - 1];
		for (int i = 1; i < n; ++i) {
			includeFirstHouse[i - 1] = nums[i - 1];
			includeLastHouse[i - 1] = nums[i];
		}
		return Math.max(solve(includeFirstHouse),solve(includeLastHouse));
	}
	int solve(int[] nums) {
		int n = nums.length;
		if (n == 1) {
			return nums[0];
		}
		if (n == 2) {
			return Math.max(nums[0],nums[1]);
		}
		int[] dp = new int[n];
		dp[0] = nums[0];
		dp[1] = Math.max(nums[0],nums[1]);
		for (int i = 2; i < n; ++i) {
			dp[i] = Math.max(dp[i - 1],dp[i - 2] + nums[i]);
		}
		return dp[n - 1];
	}
}