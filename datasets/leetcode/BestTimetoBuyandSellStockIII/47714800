class Solution {
	int helper(int n, int[] prices, int i, int flag, int count, int[][][] dp) {
		if (i == n) {
			return 0;
		}
		if (count == 2 && flag == 0) {
			return 0;
		}
		if (dp[i][flag][count] != -1) {
			return dp[i][flag][count];
		}
		if (flag == 0) {
			int a = helper(n,prices,i + 1,1,count + 1,dp) - prices[i];
			int b = helper(n,prices,i + 1,0,count,dp);
			return dp[i][flag][count] = Math.max(a,b);
		} 
		else {
			int a = helper(n,prices,i + 1,0,count,dp) + prices[i];
			int b = helper(n,prices,i + 1,1,count,dp);
			return dp[i][flag][count] = Math.max(a,b);
		}
	}
	int maxProfit(int[] prices) {
		int n = prices.length;
		int[][][] dp = new int[prices.length][2][3];
		for (int[][] arr: dp) {	
			for (int[] a: arr) {	
				Arrays.fill(a,-1);
			}
		}
		return helper(n,prices,0,0,0,dp);
	}
}