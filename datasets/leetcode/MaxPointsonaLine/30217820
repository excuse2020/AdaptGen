class Solution {
	int maxPoints(int[][] points) {
		if (points.length <= 2) {
			return points.length;
		}
		int max = 0;
		for (int i = 0; i < points.length - 1; i++) {
			HashMap<Double, Integer> map = new HashMap<>();
			for (int j = i + 1; j < points.length; j++) {
				double slope = ((double) points[j][1] - points[i][1]) / (double) (points[j][0] - points[i][0]);
				if (slope == -0.0 || slope == Double.NEGATIVE_INFINITY) {
					slope = Math.abs(slope);
				}
				if (map.containsKey(slope)) {
					int noOfPoints = map.get(slope) + 1;
					map.put(slope,noOfPoints);
					if (noOfPoints > max) {
						max = noOfPoints;
					}
				} 
				else {
					map.put(slope,2);
				}
			}
		}
		return Math.max(max,2);
	}
}