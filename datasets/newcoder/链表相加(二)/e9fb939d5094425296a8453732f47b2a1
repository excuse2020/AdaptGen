class Solution {
	ListNode addInList(ListNode head1, ListNode head2) {
		if (head1 == null) {
			return head2;
		}
		if (head2 == null) {
			return head1;
		}
		Stack<ListNode> stack1 = new Stack<>();
		Stack<ListNode> stack2 = new Stack<>();
		ListNode p1 = head1;
		ListNode p2 = head2;
		while (p1 != null) {
			stack1.push(p1);
			p1 = p1.next;
		}
		while (p2 != null) {
			stack2.push(p2);
			p2 = p2.next;
		}
		int tmp = 0;
		ListNode head = new ListNode(-1);
		ListNode nHead = head.next;
		while (!stack1.isEmpty() || !stack2.isEmpty()) {
			int val = tmp;
			if (!stack1.isEmpty()) {
				val += stack1.pop().val;
			}
			if (!stack2.isEmpty()) {
				val += stack2.pop().val;
			}
			tmp = val / 10;
			ListNode node = new ListNode(val % 10);
			node.next = nHead;
			nHead = node;
		}
		if (tmp > 0) {
			ListNode node = new ListNode(tmp);
			node.next = nHead;
			nHead = node;
		}
		return nHead;
	}
}