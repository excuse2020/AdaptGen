class Solution {
	ListNode reverse(ListNode head, int count) {
		ListNode tmp = head;
		ListNode p = null;
		ListNode c = head;
		ListNode next = c.next;
		int i = 0;
		while (c != null && i < count) {
			next = c.next;
			c.next = p;
			p = c;
			c = next;
			i++;
		}
		if (tmp != null) {
			tmp.next = next;
		}
		return p;
	}
	ListNode reverseBetween(ListNode head, int m, int n) {
		ListNode p = null;
		ListNode current = head;
		int i = 1;
		while (i < m && current != null) {
			i++;
			p = current;
			current = current.next;
		}
		ListNode newNode = reverse(current,n - m + 1);
		if (p == null) {
			head = newNode;
		} 
		else {
			p.next = newNode;
		}
		return head;
	}
}