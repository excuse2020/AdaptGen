class Solution {
	int calculateDistance(String path1, String path2) {
		int i = 0;
		while (i < path1.length() && i < path2.length() && path1.charAt(i) == path2.charAt(i)) {
			i++;
		}
		return path1.length() + path2.length() - 2 * i;
	}
	int countPairs(TreeNode root, int distance) {
		HashMap<TreeNode, String> hm = new HashMap<>();
		StringBuilder sb = new StringBuilder();
		solve(root,hm,sb);
		int res = 0;
		for (Map.Entry<TreeNode, String> entry1: hm.entrySet()) {	
			for (Map.Entry<TreeNode, String> entry2: hm.entrySet()) {	
				if (entry1.getKey() != entry2.getKey()) {
					int dist = calculateDistance(entry1.getValue(),entry2.getValue());
					if (dist <= distance) {
						res++;
					}
				}
			}
		}
		return res / 2;
	}
	void solve(TreeNode root, HashMap<TreeNode, String> hm, StringBuilder sb) {
		if (root == null) {
			return;
		}
		if (root.left == null && root.right == null) {
			hm.put(root,sb.toString());
		}
		int len = sb.length();
	}
}