class Solution {
	int minFallingPathSum(int[][] matrix) {
		int[][] dp = new int[matrix.length][matrix[0].length];
		for (int[] i: dp) {	
			Arrays.fill(i,Integer.MIN_VALUE);
		}
		int res = Integer.MAX_VALUE;
		for (int i = 0; i < matrix.length; i++) {
			res = Math.min(res,solveMemo(matrix,0,i,dp));
		}
		return res;
	}
	int solveMemo(int[][] matrix, int row, int col, int[][] dp) {
		if (row >= matrix.length || col >= matrix[0].length || col < 0) {
			return Integer.MAX_VALUE;
		}
		if (row == matrix.length - 1) {
			if (col < matrix[0].length && col >= 0) {
				return matrix[row][col];
			} 
			else {
				return 0;
			}
		}
		if (dp[row][col] != Integer.MIN_VALUE) {
			return dp[row][col];
		}
		return dp[row][col] = matrix[row][col] + Math.min(solveMemo(matrix,row + 1,col,dp),Math.min(solveMemo(matrix,row + 1,col - 1,dp),solveMemo(matrix,row + 1,col + 1,dp)));
	}
}