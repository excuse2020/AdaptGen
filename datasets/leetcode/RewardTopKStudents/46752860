class Solution {
	List<Integer> topStudents(String[] positive_feedback, String[] negative_feedback, String[] report, int[] student_id, int k) {
		Set<String> positiveFeedbackSet = new HashSet<>(Arrays.asList(positive_feedback));
		Set<String> negativeFeedbackSet = new HashSet<>(Arrays.asList(negative_feedback));
		Map<Integer, Integer> studentIdToScore = new HashMap<>();
		for (int i = 0; i < report.length; i++) {
			int score = 0;
			String[] words = report[i].split(" ");
			for (String word: words) {	
				if (positiveFeedbackSet.contains(word)) {
					score += 3;
				} 
				else if (negativeFeedbackSet.contains(word)) {
					score -= 1;
				}
			}
			studentIdToScore.putIfAbsent(student_id[i],score);
		}
		Map<Integer, Integer> sortedMap = studentIdToScore.entrySet().stream().sorted(Map.Entry.comparingByValue().reversed().thenComparing(Map.Entry.comparingByKey())).limit(k).collect(Collectors.toMap(,,(e1, e2) -> {e1},));
		return new ArrayList<>(sortedMap.keySet());
	}
}