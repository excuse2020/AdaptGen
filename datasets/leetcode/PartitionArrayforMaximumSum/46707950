class Solution {
	int dp(int i, int arr, int k, int d) {
		if (i >= arr.length) {
			return 0;
		}
		int mx = -1;
		int s = 0;
		int si = 0;
		if (d[i] != -1) {
			return d[i];
		}
		for (int j = i; j < arr.length && si < k; j++) {
			si++;
			mx = Math.max(arr[j],mx);
			s = Math.max(s,mx * si + dp(j + 1,arr,k,d));
		}
		return d[i] = s;
	}
	int maxSumAfterPartitioning(int[] arr, int k) {
		int d = new int[arr.length];
		Arrays.fill(d,-1);
		return dp(0,arr,k,d);
	}
}