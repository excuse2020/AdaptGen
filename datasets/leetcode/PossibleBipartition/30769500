class Solution {
	boolean bfs(int src, ArrayList<Integer> graph, boolean visited, int color, int currColor) {
		Queue<Integer> q = new LinkedList<>();
		q.add(src);
		visited[src] = true;
		color[src] = 0;
		while (!q.isEmpty()) {
			int curr = q.remove();
			for (int nbr: graph[curr]) {	
				if (!visited[nbr]) {
					q.add(nbr);
					visited[nbr] = true;
					color[nbr] = 1 - color[curr];
				} 
				else {
					if (color[curr] == color[nbr]) {
						return false;
					}
				}
			}
		}
		return true;
	}
	boolean possible(int src, ArrayList<Integer> graph, boolean visited, int color, int currColor) {
		visited[src] = true;
		color[src] = currColor;
		for (int nbr: graph[src]) {	
			if (!visited[nbr]) {
				if (!possible(nbr,graph,visited,color,1 - currColor)) {
					return false;
				}
			} 
			else {
				if (color[src] == color[nbr]) {
					return false;
				}
			}
		}
		return true;
	}
	boolean possibleBipartition(int n, int[][] dislikes) {
		ArrayList<Integer>[] graph = new ArrayList[n];
		for (int i = 0; i < n; i++) {
			graph[i] = new ArrayList<>();
		}
		for (int i = 0; i < dislikes.length; i++) {
			graph[dislikes[i][0] - 1].add(dislikes[i][1] - 1);
			graph[dislikes[i][1] - 1].add(dislikes[i][0] - 1);
		}
		boolean visited = new boolean[n];
		int color = new int[n];
		for (int i = 0; i < n; i++) {
			if (!visited[i]) {
				if (!possible(i,graph,visited,color,0)) {
					return false;
				}
			}
		}
		return true;
	}
}