class Solution {
	int agcd(int a, int b) {
		while (b != 0) {
			int t = b;
			b = a % b;
			a = t;
		}
		return Math.abs(a);
	}
	boolean checkStraightLine(int[][] coordinates) {
		if (coordinates.length <= 2) {
			return true;
		}
		int x1 = coordinates[0][0];
		int y1 = coordinates[0][1];
		int x2 = coordinates[1][0];
		int y2 = coordinates[1][1];
		int gcd = agcd(x2 - x1,y2 - y1);
		int rx = (x2 - x1) / gcd;
		int ry = (y2 - y1) / gcd;
		for (int i = 2, limit = coordinates.length; i < limit; i++) {
			int[] pointN = coordinates[i];
			int xN = pointN[0];
			int yN = pointN[1];
			int dx = xN - x1;
			int dy = yN - y1;
			if (rx != 0) {
				if (dx % rx != 0) {
					return false;
				}
			} 
			else {
				if (dx != 0) {
					return false;
				}
			}
			if (ry != 0) {
				if (dy % ry != 0) {
					return false;
				}
			} 
			else {
				if (dy != 0) {
					return false;
				}
			}
			if (rx != 0 && ry != 0) {
				if (dx / rx != dy / ry) {
					return false;
				}
			}
			if (Math.signum(rx * ry) != Math.signum(dx * dy)) {
				return false;
			}
		}
		return true;
	}
}