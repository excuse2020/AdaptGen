class Solution {
	int GridSize = 9;
	boolean NumberIsInColumn(char[][] board, int column, char number) {
		for (int i = 0; i < GridSize; ++i) {
			if (board[i][column] == number) {
				return true;
			}
		}
		return false;
	}
	boolean NumberIsInRow(char[][] board, int row, char number) {
		for (int i = 0; i < GridSize; ++i) {
			if (board[row][i] == number) {
				return true;
			}
		}
		return false;
	}
	boolean NumberIsInSquare(char[][] board, int row, int column, char number) {
		int TopRightCellRow = (row / 3) * 3;
		int TopRightCellColumn = (column / 3) * 3;
		for (int i = TopRightCellRow; i < TopRightCellRow + 3; ++i) {
			for (int j = TopRightCellColumn; j < TopRightCellColumn + 3; ++j) {
				if (board[i][j] == number) {
					return true;
				}
			}
		}
		return false;
	}
	boolean PlacementIsValid(char[][] board, int row, int column, char number) {
		return !NumberIsInColumn(board,column,number) && !NumberIsInRow(board,row,number);
	}
	boolean Solver(char[][] board) {
		int i = 0;
		int j = 0;
	}
	void solveSudoku(char[][] board) {
		Solver(board);
	}
}