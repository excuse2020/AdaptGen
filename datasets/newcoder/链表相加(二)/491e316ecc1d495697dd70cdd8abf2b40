class Solution {
	ListNode addInList(ListNode head1, ListNode head2) {
		print(head1);
		print(inverseNode(head1));
		ListNode tmp1 = inverseNode(head1);
		ListNode tmp2 = inverseNode(head2);
		ListNode dummy = new ListNode(-1);
		int shang = 0;
		while (tmp1 != null && tmp2 != null) {
			int sum = tmp1.val + tmp2.val;
			shang = sum / 10;
			int yushu = sum % 10;
			ListNode next = dummy.next;
			dummy.next = new ListNode(yushu);
			dummy.next.next = next;
			tmp1 = tmp1.next;
			tmp2 = tmp2.next;
		}
		while (tmp1 != null) {
			int sum = tmp1.val + shang;
			shang = sum / 10;
			int yushu = sum % 10;
			ListNode next = dummy.next;
			dummy.next = new ListNode(yushu);
			dummy.next.next = next;
			tmp1 = tmp1.next;
		}
		while (tmp2 != null) {
			int sum = tmp2.val + shang;
			shang = sum / 10;
			int yushu = sum % 10;
			ListNode next = dummy.next;
			dummy.next = new ListNode(yushu);
			dummy.next.next = next;
			tmp2 = tmp2.next;
		}
		if (shang != 0) {
			ListNode next = dummy.next;
			dummy.next = new ListNode(shang);
			dummy.next.next = next;
		}
		return dummy.next;
	}
	ListNode inverseNode(ListNode head) {
		ListNode dummy = new ListNode(-1);
		ListNode tmp = head;
		ListNode cur = null;
		while (tmp != null) {
			ListNode next = dummy.next;
			dummy.next = new ListNode(tmp.val);
			dummy.next.next = next;
			tmp = tmp.next;
		}
		return dummy.next;
	}
	void print(ListNode head) {
		ListNode tmp = head;
		while (tmp != null) {
			System.out.print(tmp.val + ",");
			tmp = tmp.next;
		}
		System.out.println();
	}
}