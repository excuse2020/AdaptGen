class Solution {
	ArrayList<ArrayList<Integer>> res = new ArrayList<>();
	void backtrack(int[] nums, int start, int target, List<Integer> list) {
		if (list.size() > 0 && target == 0) {
			res.add(new ArrayList<>(list));
			return;
		}
		for (int i = start; i < nums.length; i++) {
			if (target - nums[i] < 0) {
				break;
			}
			target -= nums[i];
			list.add(nums[i]);
			backtrack(nums,i,target,list);
			target += nums[i];
			list.remove(list.size() - 1);
		}
	}
	ArrayList<ArrayList<Integer>> combinationCount(int target, int[] nums) {
		if (nums == null || nums.length < 1) {
			return res;
		}
		Arrays.sort(nums);
		backtrack(nums,0,target,new ArrayList<>());
		return res;
	}
}