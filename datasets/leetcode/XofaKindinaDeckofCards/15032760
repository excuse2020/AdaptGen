class Solution {
	boolean divBy(Map<Integer, Integer> occMap, int num) {
		for (Integer n: occMap.keySet()) {	
			int val = occMap.get(n);
			if (val % num != 0) {
				return false;
			}
		}
		return true;
	}
	boolean hasGroupsSizeX(int[] deck) {
		if (deck.length < 2) {
			return false;
		}
		Map<Integer, Integer> occMap = new HashMap();
		for (int i = 0; i < deck.length; i++) {
			occMap.put(deck[i],occMap.getOrDefault(deck[i],0) + 1);
		}
		int min = minValue(occMap);
		if (divBy(occMap,2) || divBy(occMap,3)) {
			return true;
		}
		return false;
	}
	int minValue(Map<Integer, Integer> occMap) {
		int min = Integer.MAX_VALUE;
		for (Integer n: occMap.keySet()) {	
			int val = occMap.get(n);
			min = Math.min(min,val);
		}
		return min;
	}
}