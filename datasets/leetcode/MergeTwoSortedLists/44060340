class Solution {
	int countNodes(ListNode head) {
		int count = 0;
		while (head != null) {
			count++;
			head = head.next;
		}
		return count;
	}
	ListNode mergeTwoLists(ListNode l1, ListNode l2) {
		int n1 = countNodes(l1);
		int n2 = countNodes(l2);
		if (n1 + n2 == 0) {
			return null;
		}
		int arr = new int[n1 + n2];
		int i = 0, j = 0, k = 0;
		while (i < n1 && j < n2) {
			if (l1.val < l2.val) {
				arr[k++] = l1.val;
				i++;
				l1 = l1.next;
			} 
			else {
				arr[k++] = l2.val;
				j++;
				l2 = l2.next;
			}
		}
		while (i < n1) {
			arr[k++] = l1.val;
			i++;
			l1 = l1.next;
		}
		while (j < n2) {
			arr[k++] = l2.val;
			j++;
			l2 = l2.next;
		}
		i = 0;
		ListNode newnode = new ListNode(arr[i++]);
		ListNode head2 = newnode;
		while (true) {
			if (i > k - 1) {
				break;
			}
			ListNode newnode2 = new ListNode(arr[i++]);
			newnode.next = newnode2;
			newnode = newnode2;
		}
		return head2;
	}
}