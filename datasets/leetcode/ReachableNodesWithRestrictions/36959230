class Solution {
	int count = 0;
	void dfs(ArrayList<ArrayList<Integer>> adj, int node, HashSet<Integer> s, boolean[] visited) {
		visited[node] = true;
		count++;
		for (int it: adj.get(node)) {	
			if (!visited[it] && !s.contains(it)) {
				dfs(adj,it,s,visited);
			}
		}
	}
	int reachableNodes(int n, int[][] edges, int[] restricted) {
		HashSet<Integer> s = new HashSet<>();
		for (int i = 0; i < restricted.length; i++) {
			s.add(restricted[i]);
		}
		ArrayList<ArrayList<Integer>> adj = new ArrayList<>();
		for (int i = 0; i < n; i++) {
			adj.add(new ArrayList<>());
		}
		for (int i = 0; i < edges.length; i++) {
			adj.get(edges[i][0]).add(edges[i][1]);
			adj.get(edges[i][1]).add(edges[i][0]);
		}
		boolean[] visited = new boolean[n];
		dfs(adj,0,s,visited);
		return count;
	}
}