class Solution {
	int sumSubarrayMins(int[] arr) {
		int length = arr.length;
		int[] left = new int[length];
		int[] right = new int[length];
		Arrays.fill(left,-1);
		Arrays.fill(right,length);
		Stack<Integer> s = new Stack<>();
		for (int i = 0; i < length; ++i) {
			while (!s.isEmpty() && arr[s.peek()] >= arr[i]) {
				s.pop();
			}
			if (!s.isEmpty()) {
				left[i] = s.peek();
			}
			s.push(i);
		}
		s.clear();
		for (int i = length - 1; i >= 0; --i) {
			while (!s.isEmpty() && arr[s.peek()] > arr[i]) {
				s.pop();
			}
			if (!s.isEmpty()) {
				right[i] = s.peek();
			}
			s.push(i);
		}
		long answer = 0;
		int mod = (int) (Math.pow(10,9) + 7);
		for (int i = 0; i < length; ++i) {
			answer += (long) (i - left[i]) * (right[i] - i) % mod * arr[i] % mod;
			answer %= mod;
		}
		return (int) answer;
	}
}