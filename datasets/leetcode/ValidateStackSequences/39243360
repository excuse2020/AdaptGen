class Solution {
	int pushing(int[] pushed, int index, Stack<Integer> st, int f) {
		int c = 0;
		for (int i = index; i < pushed.length; i++) {
			st.push(pushed[i]);
			c = i;
			if (pushed[i] == f) {
				break;
			}
		}
		return c;
	}
	boolean validateStackSequences(int[] pushed, int[] popped) {
		Stack<Integer> st = new Stack<>();
		int f = popped[0];
		int c = pushing(pushed,0,st,f);
		for (int i = 0; i < popped.length; i++) {
			if ((!st.isEmpty()) && st.peek() == popped[i]) {
				st.pop();
				continue;
			}
			c = pushing(pushed,c + 1,st,popped[i]);
			if ((!st.isEmpty()) && st.peek() == popped[i]) {
				st.pop();
				continue;
			} 
			else {
				return false;
			}
		}
		return true;
	}
}