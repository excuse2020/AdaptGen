class Solution {
	int dp;
	int call(int idx, int arr, int d) {
		if (dp[idx] != -1) {
			return dp[idx];
		}
		int cnt1 = 0, cnt2 = 0, n = arr.length;
		int val = idx;
		for (int i = idx + 1; i < n && i <= val + d; i++) {
			if (arr[idx] > arr[i]) {
				cnt1 = Math.max(call(i,arr,d),cnt1);
			} 
			else {
				break;
			}
		}
		for (int i = idx - 1; i >= 0 && i >= val - d; i--) {
			if (arr[idx] > arr[i]) {
				cnt2 = Math.max(call(i,arr,d),cnt2);
			} 
			else {
				break;
			}
		}
		dp[idx] = Math.max(cnt1,cnt2) + 1;
		return dp[idx];
	}
	int maxJumps(int[] arr, int d) {
		int n = arr.length;
		dp = new int[n];
		Arrays.fill(dp,-1);
		int max = 0;
		for (int i = 0; i < n; i++) {
			max = Math.max(max,call(i,arr,d));
		}
		return max;
	}
}