class Solution {
	int numSubmatrixSumTarget(int[][] matrix, int target) {
		int n = matrix.length;
		int m = matrix[0].length;
		int[][] pfSum = new int[n + 1][m + 1];
		for (int i = 0; i < n; i++) {
			int sum = 0;
			for (int j = 0; j < m; j++) {
				sum += matrix[i][j];
				if (j == 0) {
					pfSum[i + 1][j + 1] = matrix[i][j] + pfSum[i][j + 1];
				} 
				else {
					pfSum[i + 1][j + 1] = pfSum[i][j + 1] + sum;
				}
			}
		}
		int res = 0;
		for (int r1 = 1; r1 <= n; r1++) {
			for (int c1 = 1; c1 <= m; c1++) {
				for (int r2 = r1; r2 <= n; r2++) {
					for (int c2 = c1; c2 <= m; c2++) {
						int currSum = pfSum[r2][c2] - (pfSum[r2][c1 - 1] + pfSum[r1 - 1][c2]) + pfSum[r1 - 1][c1 - 1];
						if (currSum == target) {
							++res;
						}
					}
				}
			}
		}
		return res;
	}
}