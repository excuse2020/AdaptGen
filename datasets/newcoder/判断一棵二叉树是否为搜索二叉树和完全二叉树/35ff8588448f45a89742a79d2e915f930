class Solution {
	int n = 0;
	int p = 0;
	long pre = Long.MIN_VALUE;
	boolean dfs(TreeNode root, int k) {
		if (root == null) {
			return true;
		}
		n++;
		p = Math.max(p,k);
		return dfs(root.left,2 * k) && dfs(root.right,2 * k + 1);
	}
	boolean isPerfect(TreeNode root) {
		if (!dfs(root,1)) {
			return false;
		}
		return n == p;
	}
	boolean isSearchTree(TreeNode root) {
		if (root == null) {
			return true;
		}
		if (!isSearchTree(root.left)) {
			return false;
		}
		if (root.val <= pre) {
			return false;
		}
		pre = root.val;
		return isSearchTree(root.right);
	}
	boolean[] judgeIt(TreeNode root) {
		boolean[] res = new boolean[2];
		res[0] = isSearchTree(root);
		res[1] = isPerfect(root);
		return res;
	}
}