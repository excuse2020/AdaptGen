class Solution {
	int maxValueOfCoins(List<List<Integer>> piles, int k) {
		int dp = new int[piles.size() + 1][k + 1];
		int temp;
		for (int i = 1; i <= piles.size(); i++) {
			for (int j = 1; j <= k; j++) {
				temp = 0;
				dp[i][j] = dp[i - 1][j];
				for (int h = 0; h < Math.min(j,piles.get(i - 1).size()); h++) {
					temp += piles.get(i - 1).get(h);
					dp[i][j] = Math.max(dp[i][j],temp + dp[i - 1][j - h - 1]);
				}
			}
		}
		return dp[piles.size()][k];
	}
}
class Solution {
	int maxValueOfCoins(List<List<Integer>> piles, int k) {
		int prev = new int[k + 1];
		int curr = new int[k + 1];
		int temp;
		for (int i = 1; i <= piles.size(); i++) {
			for (int j = 1; j <= k; j++) {
				temp = 0;
				curr[j] = prev[j];
				for (int h = 0; h < Math.min(j,piles.get(i - 1).size()); h++) {
					temp += piles.get(i - 1).get(h);
					curr[j] = Math.max(curr[j],prev[j - h - 1] + temp);
				}
			}
			prev = curr.clone();
		}
		return prev[k];
	}
}