class Solution {
	void backtrack(int n, int target, int k, List<List<Integer>> res, List<Integer> temp, int index) {
		if (temp.size() == k && n == 0) {
			res.add(new ArrayList<>(temp));
			return;
		}
		for (int i = index; i <= 9; i++) {
			if (temp.size() > k) {
				break;
			}
			if (i > n) {
				continue;
			}
			temp.add(i);
			backtrack(n - i,target,k,res,temp,i + 1);
			temp.remove(temp.size() - 1);
		}
	}
	List<List<Integer>> combinationSum3(int k, int n) {
		List<List<Integer>> res = new ArrayList<>();
		backtrack(n,n,k,res,new ArrayList<>(),1);
		return res;
	}
}