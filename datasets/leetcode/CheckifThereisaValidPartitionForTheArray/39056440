class Solution {
	int isPossible(int i, int[] dp, int[] nums, int n) {
		if (i >= n) {
			return 1;
		}
		if (dp[i] != -1) {
			return dp[i];
		}
		if (i + 1 < n && nums[i] == nums[i + 1]) {
			dp[i] = isPossible(i + 2,dp,nums,n);
			if (dp[i] == 1) {
				return dp[i];
			}
			if (i + 2 < n && nums[i + 1] == nums[i + 2]) {
				dp[i] = isPossible(i + 3,dp,nums,n);
				if (dp[i] == 1) {
					return dp[i];
				}
			}
		}
		if (i + 2 < n && nums[i] + 1 == nums[i + 1] && nums[i + 1] + 1 == nums[i + 2]) {
			dp[i] = isPossible(i + 3,dp,nums,n);
			if (dp[i] == 1) {
				return dp[i];
			}
		}
		return dp[i] = 0;
	}
	boolean validPartition(int[] nums) {
		int dp = new int[nums.length];
		Arrays.fill(dp,-1);
		return isPossible(0,dp,nums,nums.length) == 1 ? true : false;
	}
}