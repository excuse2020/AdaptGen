class Solution {
	HashMap<String, Long> map = new HashMap<>();
	int mod = (int) (Math.pow(10,9) + 7);
	long count(String s, int atLev, int n) {
		if (atLev > n) {
			return 0;
		}
		if (atLev == n) {
			return 1;
		}
		atLev += 1;
		StringBuilder builder = new StringBuilder("");
		builder.append(s);
		builder.append("#");
		builder.append(atLev - 1);
		String st = builder.toString();
		if (map.containsKey(st)) {
			return map.get(st);
		}
		long num = 0;
		if (s == "a") {
			num = (num + count("e",atLev,n)) % mod;
		} 
		else if (s == "e") {
			num = (num + count("a",atLev,n)) % mod;
		} 
		else if (s == "i") {
			num = (num + count("a",atLev,n)) % mod;
		} 
		else if (s == "o") {
			num = (num + count("i",atLev,n)) % mod;
		} 
		else {
			num = (num + count("a",atLev,n)) % mod;
		}
		map.put(st,num);
		return num;
	}
	int countVowelPermutation(int n) {
		long num = 0;
		num = (num + count("a",1,n)) % mod;
		return ((int) num % mod);
	}
}