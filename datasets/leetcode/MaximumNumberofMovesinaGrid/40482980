class Solution {
	int dfs(int[][] grid, int[][] dp, int row, int col, int prev) {
		if (col == grid[0].length || row < 0 || row >= grid.length || grid[row][col] <= prev) {
			return -1;
		}
		if (dp[row][col] != -1) {
			return dp[row][col];
		}
		int max = Math.max(dfs(grid,dp,row - 1,col + 1,grid[row][col]),Math.max(dfs(grid,dp,row,col + 1,grid[row][col]),dfs(grid,dp,row + 1,col + 1,grid[row][col])));
		return dp[row][col] = max + 1;
	}
	int maxMoves(int[][] grid) {
		int max = 0;
		int[][] dp = new int[grid.length][grid[0].length];
		for (int i = 0; i < grid.length; i++) {
			Arrays.fill(dp[i],-1);
		}
		for (int i = 0; i < grid.length; i++) {
			max = Math.max(max,dfs(grid,dp,i,0,-1));
		}
		return max;
	}
}