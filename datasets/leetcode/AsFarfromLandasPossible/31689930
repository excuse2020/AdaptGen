class Solution {
	Queue<int[]> queue = new LinkedList<>();
	void add(int a, int b) {
		int[] temp = new int[2];
		temp[0] = a;
		temp[1] = b;
		queue.add(temp);
	}
	int maxDistance(int[][] grid) {
		int n = grid.length, ans = 0, count = grid.length * grid.length;
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < n; j++) {
				if (grid[i][j] == 1) {
					add(i,j);
				}
			}
		}
		if (queue.size() == n * n || queue.size() == 0) {
			return -1;
		}
		count = count - queue.size();
		while (count > 0) {
			int size = queue.size();
			while (size-- > 0) {
				int[] temp = queue.poll();
				int x = temp[0], y = temp[1];
				if (x - 1 >= 0 && grid[x - 1][y] == 0) {
					grid[x - 1][y] = 1;
					add(x - 1,y);
				}
				if (x + 1 < n && grid[x + 1][y] == 0) {
					grid[x + 1][y] = 1;
					add(x + 1,y);
				}
				if (y - 1 >= 0 && grid[x][y - 1] == 0) {
					grid[x][y - 1] = 1;
					add(x,y - 1);
				}
				if (y + 1 < n && grid[x][y + 1] == 0) {
					grid[x][y + 1] = 1;
					add(x,y + 1);
				}
			}
			ans++;
			count = count - queue.size();
		}
		return ans;
	}
}