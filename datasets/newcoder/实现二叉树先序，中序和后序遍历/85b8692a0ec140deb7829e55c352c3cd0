class Solution {
	void lastOrder(TreeNode root, List<Integer> list) {
		if (root == null) {
			return;
		}
		lastOrder(root.left,list);
		lastOrder(root.right,list);
		list.add(root.val);
	}
	void midOrder(TreeNode root, List<Integer> list) {
		if (root == null) {
			return;
		}
		midOrder(root.left,list);
		list.add(root.val);
		midOrder(root.right,list);
	}
	void preOrder(TreeNode root, List<Integer> list) {
		if (root == null) {
			return;
		}
		list.add(root.val);
		preOrder(root.left,list);
		preOrder(root.right,list);
	}
	int[][] threeOrders(TreeNode root) {
		List<Integer> preList = new ArrayList<>();
		preOrder(root,preList);
		List<Integer> midList = new ArrayList<>();
		midOrder(root,midList);
		List<Integer> lastList = new ArrayList<>();
		lastOrder(root,lastList);
		int length = preList.size();
		int[] preArr = preList.stream().mapToInt().toArray();
		int[] midArr = midList.stream().mapToInt().toArray();
		int[] lastArr = lastList.stream().mapToInt().toArray();
		int[][] result = new int[3][length];
		result[0] = preArr;
		result[1] = midArr;
		result[2] = lastArr;
		return result;
	}
}