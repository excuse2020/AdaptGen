class Solution {
	int divide(int dividend, int divisor) {
		if (divisor == 0) {
			throw new IllegalArgumentException("Divisor cannot be zero")
		}
		if (dividend == Integer.MIN_VALUE && divisor == -1) {
			return Integer.MAX_VALUE;
		}
		boolean sign = (dividend >= 0) == (divisor >= 0);
		long absDividend = Math.abs((long) dividend);
		long absDivisor = Math.abs((long) divisor);
		int result = 0;
		while (absDividend >= absDivisor) {
			long tempDivisor = absDivisor;
			int count = 1;
			while (absDividend >= (tempDivisor << 1)) {
				tempDivisor <<= 1;
				count <<= 1;
			}
			absDividend -= tempDivisor;
			result += count;
		}
		return sign ? result : -result;
	}
}