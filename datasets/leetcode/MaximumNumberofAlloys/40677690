class Solution {
	boolean isPossible(long mid, int k, int budget, List<List<Integer>> comp, List<Integer> stock, List<Integer> cost) {
		long minCost = Integer.MAX_VALUE;
		for (List<Integer> list: comp) {	
			long curCost = 0;
			for (int i = 0; i < list.size(); i++) {
				long curr = mid * list.get(i);
				if (stock.get(i) >= curr) {
					continue;
				} 
				else {
					long extra = (curr - stock.get(i)) * cost.get(i);
					curCost += extra;
				}
			}
			minCost = Math.min(curCost,minCost);
		}
		return minCost <= budget;
	}
	int maxNumberOfAlloys(int n, int k, int budget, List<List<Integer>> composition, List<Integer> stock, List<Integer> cost) {
		long low = 0, high = (int) 1e9, ans = 0;
		while (low <= high) {
			long mid = low + (high - low) / 2;
			if (isPossible(mid,k,budget,composition,stock,cost)) {
				ans = mid;
				low = mid + 1;
			} 
			else {
				high = mid - 1;
			}
		}
		return (int) ans;
	}
}