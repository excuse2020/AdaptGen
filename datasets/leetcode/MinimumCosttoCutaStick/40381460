class Solution {
	Integer dp;
	int n, cuts;
	int f(int i, int j) {
		if (i + 1 == j) {
			return dp[i][j] = 0;
		}
		if (dp[i][j] != null) {
			return dp[i][j];
		}
		int min = Integer.MAX_VALUE;
		for (int k = i + 1; k < j; k++) {
			min = Math.min(min,f(i,k) + f(k,j));
		}
		return dp[i][j] = min + get(j) - get(i);
	}
	int get(int i) {
		return i == 0 ? 0 : (i == cuts.length + 1 ? n : cuts[i - 1]);
	}
	int minCost(int n, int[] cuts) {
		Arrays.sort(cuts);
		dp = new Integer[cuts.length + 2][cuts.length + 2];
		this.n = n;
		this.cuts = cuts;
		return f(0,cuts.length + 1);
	}
}