class Solution {
	List<String> list;
	int countA(String s) {
		int c = 0;
		int i = 0;
	}
	void generateBinaryStrings() {
		int n = 1;
		list = new ArrayList<>();
		while (n > 0) {
			list.add(Integer.toBinaryString(n));
			n *= 5;
		}
		Collections.reverse(list);
	}
	String generateStubString(String s) {
		StringBuilder sb = new StringBuilder();
		int i = 0;
	}
	int minimumBeautifulSubstrings(String s) {
		if (list == null) {
			generateBinaryStrings();
		}
		int count = 0, min = Integer.MAX_VALUE;
		for (String num: list) {	
			String temp = new String(s);
			int start = list.indexOf(num);
			for (int i = start; i < list.size(); i++) {
				String curr = list.get(i);
				while (temp.contains(curr)) {
					int idx = temp.indexOf(curr);
					if (idx >= 0) {
						String stub = generateStubString(curr);
						temp = temp.replaceFirst(curr,stub);
						count++;
					}
				}
			}
			if (countA(temp) == s.length()) {
				min = Math.min(count,min);
			}
			count = 0;
		}
		return min == Integer.MAX_VALUE ? -1 : min;
	}
}