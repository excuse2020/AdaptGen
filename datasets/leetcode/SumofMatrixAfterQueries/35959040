class Solution {
	long matrixSumQueries(int n, int[][] queries) {
		int[] r = new int[n], c = new int[n];
		boolean[] rSet = new boolean[n];
		boolean[] cSet = new boolean[n];
		for (int i = 0; i < n; i++) {
			r[i] = c[i] = n;
		}
		long res = 0;
		int ra = 0, ca = 0;
		for (int i = queries.length - 1; i >= 0; i--) {
			int que = queries[i], type = que[0], rc = que[1], val = que[2];
			if (type == 0) {
				if (r[rc] - ra >= 0) {
					res += (r[rc] - ra) * 1L;
				}
				if (!rSet[rc]) {
					ca++;
				}
				r[rc] = 0;
				rSet[rc] = true;
			} 
			else {
				if (c[rc] - ca >= 0) {
					res += (c[rc] - ca) * 1L;
				}
				if (!cSet[rc]) {
					ra++;
				}
				c[rc] = 0;
				cSet[rc] = true;
			}
		}
		return res;
	}
}