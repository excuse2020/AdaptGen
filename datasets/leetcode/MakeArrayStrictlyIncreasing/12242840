class Solution {
	int linearSearch(Integer[] B, int s, int e, int target) {
		int l = e - 1;
		while (l >= 0 && B[l] >= target) {
			l--;
		}
		if (l < s) {
			return -1;
		} 
		else {
			return l;
		}
	}
	int makeArrayIncreasing(int[] A, int[] B) {
		int n = A.length;
		Arrays.sort(B);
		ArrayList<Integer> Bs = new ArrayList<>();
		Bs.add(B[0]);
		for (int i = 1; i < B.length; i++) {
			if (B[i - 1] != B[i]) {
				Bs.add(B[i]);
			}
		}
		Integer[] Bdedup = Bs.toArray(new Integer[0]);
		int m = Bdedup.length;
		int INF = m + 1;
		int[][][] f = new int[n + 1][m + 1][2];
		f[0][0][0] = 0;
		f[0][0][1] = 0;
		f[1][0][0] = 0;
		f[1][0][1] = INF;
		for (int j = 1; j <= m; j++) {
			for (int k = 0; k < 2; k++) {
				f[1][j][k] = k;
			}
		}
		for (int i = 2; i <= n; i++) {
			int curA = A[i - 1];
			int prevA = A[i - 2];
			f[i][0][0] = (curA > prevA) ? f[i - 1][0][0] : INF;
			f[i][0][1] = INF;
			for (int j = 1; j <= m; j++) {
				f[i][j][0] = INF;
				int curB = Bdedup[j - 1];
				int bBackOffIndex = 1 + linearSearch(Bdedup,0,j,curA);
				convenient api;
				lower_bound from;
				C++;
				if (prevA >= curA) {
					f[i][j][0] = f[i - 1][bBackOffIndex][1];
				} 
				else {
					f[i][j][0] = Math.min(f[i - 1][bBackOffIndex][0],f[i - 1][bBackOffIndex][1]);
				}
				f[i][j][1] = INF;
				if (curB <= prevA) {
					f[i][j][1] = 1 + f[i - 1][j - 1][1];
				} 
				else {
					f[i][j][1] = 1 + Math.min(f[i - 1][j - 1][0],f[i - 1][j - 1][1]);
				}
			}
		}
		int nMoves = Math.min(f[n][m][0],f[n][m][1]);
		if (nMoves >= INF) {
			return -1;
		} 
		else {
			return nMoves;
		}
	}
}