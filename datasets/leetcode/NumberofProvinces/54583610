class Solution {
	void dfs(int n, List<List<Integer>> adj, boolean[] arr) {
		arr[n] = true;
		for (int i: adj.get(n)) {	
			if (!arr[i]) {
				dfs(i,adj,arr);
			}
		}
	}
	int findCircleNum(int[][] isConnected) {
		boolean[] arr = new boolean[isConnected.length];
		int c = 0;
		List<List<Integer>> adj = new ArrayList<>();
		for (int i = 0; i < isConnected.length; i++) {
			adj.add(new ArrayList<>());
		}
		for (int i = 0; i < isConnected.length; i++) {
			for (int j = i; j < isConnected.length; j++) {
				if (isConnected[i][j] == 1 && i != j) {
					adj.get(i).add(j);
					adj.get(j).add(i);
				}
			}
		}
		for (int i = 0; i < arr.length; i++) {
			if (!arr[i]) {
				c++;
				dfs(i,adj,arr);
			}
		}
		return c;
	}
}