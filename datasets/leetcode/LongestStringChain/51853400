class Solution {
	boolean isPre(String pre, String word) {
		int i = -1, j = -1;
		while (++i < pre.length() && ++j < word.length()) {
			if (pre.charAt(i) != word.charAt(j)) {
				if (i != j || pre.charAt(i) != word.charAt(++j)) {
					return false;
				}
			}
		}
		return true;
	}
	int longestStrChain(String[] words) {
		int max = 1, dp = new int[words.length];
		Arrays.sort(words,(a, b) -> {Integer.compare(a.length(),b.length())});
		for (int i = 0; i < words.length; i++) {
			dp[i] = 1;
			int j = i, len = words[i].length();
			while (--j >= 0) {
				if (words[j].length() == len) {
					continue;
				} 
				else if (words[j].length() != len - 1) {
					break;
				} 
				else if (isPre(words[j],words[i])) {
					dp[i] = Math.max(dp[i],dp[j] + 1);
				}
			}
			max = Math.max(dp[i],max);
		}
		return max;
	}
}