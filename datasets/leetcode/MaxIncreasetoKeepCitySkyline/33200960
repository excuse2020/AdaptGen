class Solution {
	int maxIncreaseKeepingSkyline(int[][] arr) {
		int rows = arr.length;
		int cols = arr[0].length;
		int[] rowsMax = new int[rows];
		int[] colsMax = new int[cols];
		int rowMax = -1;
		int colMax = -1;
		for (int i = 0; i < rows; i++) {
			rowMax = -1;
			for (int j = 0; j < cols; j++) {
				rowMax = Math.max(rowMax,arr[i][j]);
			}
			rowsMax[i] = rowMax;
		}
		for (int j = 0; j < cols; j++) {
			colMax = -1;
			for (int i = 0; i < rows; i++) {
				colMax = Math.max(colMax,arr[i][j]);
			}
			colsMax[j] = colMax;
		}
		int count = 0;
		for (int i = 0; i < rows; i++) {
			for (int j = 0; j < cols; j++) {
				int currentMin = Math.min(rowsMax[i],colsMax[j]);
				if (arr[i][j] < currentMin) {
					count += currentMin - arr[i][j];
				}
			}
		}
		return count;
	}
}