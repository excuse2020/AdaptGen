class Solution1 {
	int cherryPickup(int[][] grid) {
		int n = grid.length;
		int m = grid[0].length;
		return f(0,0,m - 1,n - 1,m - 1,grid);
	}
	int f(int i, int j1, int j2, int n, int m, int[][] grid) {
		if (j1 < 0 || j1 > m || j2 < 0 || j2 > m) {
			return -(int)1e9;
		}
		if (i == n) {
			if (j1 == j2) {
				return grid[i][j1];
			} 
			else {
				return grid[i][j1] + grid[i][j2];
			}
		}
		int max = -(int)1e8;
		for (int del1 = -1; del1 <= 1; del1++) {
			for (int del2 = -1; del2 <= 1; del2++) {
				int val = 0;
				if (j1 == j2) {
					val += grid[i][j1];
				} 
				else {
					val += grid[i][j2] + grid[i][j1];
				}
				val += f(i + 1,j1 + del1,j2 + del2,n,m,grid);
				max = Math.max(val,max);
			}
		}
		return max;
	}
}
class Solution {
	int cherryPickup(int[][] grid) {
		int n = grid.length;
		int m = grid[0].length;
		int dp = new int[n][m][m];
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < m; j++) {
				for (int k = 0; k < m; k++) {
					dp[i][j][k] = -1;
				}
			}
		}
		return f(0,0,m - 1,n - 1,m - 1,grid,dp);
	}
	int f(int i, int j1, int j2, int n, int m, int[][] grid, int[][][] dp) {
		if (j1 < 0 || j1 > m || j2 < 0 || j2 > m) {
			return -(int)1e9;
		}
		if (i == n) {
			if (j1 == j2) {
				return grid[i][j1];
			} 
			else {
				return grid[i][j1] + grid[i][j2];
			}
		}
		if (dp[i][j1][j2] != -1) {
			return dp[i][j1][j2];
		}
		int max = -(int)1e8;
		for (int del1 = -1; del1 <= 1; del1++) {
			for (int del2 = -1; del2 <= 1; del2++) {
				int val = 0;
				if (j1 == j2) {
					val += grid[i][j1];
				} 
				else {
					val += grid[i][j2] + grid[i][j1];
				}
				val += f(i + 1,j1 + del1,j2 + del2,n,m,grid,dp);
				max = Math.max(val,max);
				dp[i][j1][j2] = max;
			}
		}
		return max;
	}
}