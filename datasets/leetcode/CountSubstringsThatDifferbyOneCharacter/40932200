class Solution {
	char[] firstString;
	char[] secondString;
	int compare(int a, int b) {
		int countRight = 0;
		int countLeft = 0;
		int i = a;
		int j = b;
		if (j + 1 != secondString.length && i + 1 != firstString.length) {
			while (firstString[i + 1] == secondString[j + 1]) {
				countRight++;
				j++;
				i++;
				if (j + 1 == secondString.length || i + 1 == firstString.length) {
					break;
				}
			}
		}
		i = a;
		j = b;
		if (j - 1 != -1 && i - 1 != -1) {
			while (firstString[i - 1] == secondString[j - 1]) {
				countLeft++;
				j--;
				i--;
				if (j - 1 == -1 || i - 1 == -1) {
					break;
				}
			}
		}
		return countRight + countLeft;
	}
	int countSubstrings(String s, String t) {
		int countOfSub = 0;
		this.firstString = s.toCharArray();
		this.secondString = t.toCharArray();
		for (int chS = 0; chS < firstString.length; chS++) {
			for (int chT = 0; chT < secondString.length; chT++) {
				if (firstString[chS] != secondString[chT]) {
					countOfSub++;
					countOfSub += compare(chS,chT);
				}
			}
		}
		return countOfSub;
	}
}