class Solution {
	int dfs(int[][] grid, int[][] visited, int i, int j) {
		if (i < 0 || j < 0 || i >= grid.length || j >= grid[0].length || visited[i][j] == 1 || grid[i][j] == 0) {
			return 0;
		}
		visited[i][j] = 1;
		return grid[i][j] + dfs(grid,visited,i + 1,j);
	}
	int findMaxFish(int[][] grid) {
		int max = 0;
		int[][] visited = new int[grid.length][grid[0].length];
		for (int i = 0; i < grid.length; i++) {
			for (int j = 0; j < grid[0].length; j++) {
				max = Math.max(max,dfs(grid,visited,i,j));
			}
		}
		return max;
	}
}