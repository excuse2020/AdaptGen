class Solution {
	List<List<Integer>> findPrimePairs(int n) {
		List<Integer> primes = sieveOfEratosthenes(n);
		List<List<Integer>> result = new ArrayList<>();
		int left = 0, right = primes.size() - 1;
		while (left <= right) {
			int sum = primes.get(left) + primes.get(right);
			if (sum == n) {
				result.add(Arrays.asList(primes.get(left),primes.get(right)));
				left++;
				right--;
			} 
			else if (sum < n) {
				left++;
			} 
			else {
				right--;
			}
		}
		return result;
	}
	List<Integer> sieveOfEratosthenes(int n) {
		boolean[] isPrime = new boolean[n + 1];
		Arrays.fill(isPrime,true);
		List<Integer> primes = new ArrayList<>();
		for (int i = 2; i * i <= n; i++) {
			if (isPrime[i]) {
				for (int j = i * i; j <= n; j += i) {
					isPrime[j] = false;
				}
			}
		}
		for (int i = 2; i <= n; i++) {
			if (isPrime[i]) {
				primes.add(i);
			}
		}
		return primes;
	}
}