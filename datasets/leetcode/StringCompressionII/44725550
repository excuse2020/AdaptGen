class Solution {
	int getLengthOfOptimalCompression(String s, int k) {
		return getLengthOfOptimalCompressionMemoizationTFC(0,26,0,k,s,new HashMap<>());
	}
	int getLengthOfOptimalCompressionMemoization(int index, int prevChar, int freq, int k, String s, Map<String, Integer> memo) {
		if (k < 0) {
			return Integer.MAX_VALUE;
		}
		if (index >= s.length()) {
			return 0;
		}
		String key = index + ",";
		if (memo.containsKey(key)) {
			return memo.get(key);
		}
		int keep = Integer.MAX_VALUE;
		int delete = getLengthOfOptimalCompressionMemoization(index + 1,prevChar,freq,k - 1,s,memo);
		int currChar;
	}
	int getLengthOfOptimalCompressionMemoizationArr(int index, int prevChar, int freq, int k, String s, int[][][][] memo) {
		if (k < 0) {
			return Integer.MAX_VALUE;
		}
		if (index >= s.length()) {
			return 0;
		}
		if (memo[index][prevChar][freq][k] != -1) {
			return memo[index][prevChar][freq][k];
		}
		int keep = Integer.MAX_VALUE;
		int delete = getLengthOfOptimalCompressionMemoizationArr(index + 1,prevChar,freq,k - 1,s,memo);
		int currChar;
	}
	int getLengthOfOptimalCompressionMemoizationTFC(int index, int prevChar, int freq, int k, String s, Map<String, Integer> memo) {
		if (k < 0) {
			return Integer.MAX_VALUE;
		}
		if (index >= s.length()) {
			return 0;
		}
		String key = index + ",";
		if (memo.containsKey(key)) {
			return memo.get(key);
		}
		int currChar;
	}
	int getLengthOfOptimalCompressionRecursion(int index, int prevChar, int freq, int k, String s) {
		if (k < 0) {
			return Integer.MAX_VALUE;
		}
		if (index >= s.length()) {
			return 0;
		}
		int keep = Integer.MAX_VALUE;
		int delete = getLengthOfOptimalCompressionRecursion(index + 1,prevChar,freq,k - 1,s);
		int currChar;
	}
}