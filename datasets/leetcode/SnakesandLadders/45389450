class Solution {
	int getNumber(int[][] board, int i) {
		int n = board.length;
		int r = (i - 1) / n;
		int c = (i - 1) % n;
		if (r % 2 != 0) {
			c = n - c;
		}
		r = n - r;
		if (board[r][c] == -1) {
			return i;
		} 
		else {
			return board[r][c];
		}
	}
	int snakesAndLadders(int[][] board) {
		int n = board.length;
		int[] dp = new int[(n * n) + 1];
		dp[1] = 0;
		Queue<Integer> q = new LinkedList();
		q.offer(1);
		while (!q.isEmpty()) {
			int curr = q.poll();
			for (int i = curr + 1; i <= curr + 6; i++) {
				int d = getNumber(board,i);
				if (d == n * n) {
					return dp[curr] + 1;
				} 
				else if (d > n * n) {
					return -1;
				}
				if (d > 1 && dp[d] == 0) {
					q.offer(d);
					dp[d] = dp[curr] + 1;
				}
			}
		}
		return -1;
	}
}