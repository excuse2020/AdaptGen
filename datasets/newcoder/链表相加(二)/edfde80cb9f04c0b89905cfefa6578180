class Solution {
	ListNode ReverseList(ListNode head) {
		ListNode pre = null;
		ListNode cur = head;
		ListNode cur_next;
		while (cur != null) {
			cur_next = cur.next;
			cur.next = pre;
			pre = cur;
			cur = cur_next;
		}
		return pre;
	}
	ListNode addInList(ListNode head1, ListNode head2) {
		if (head1 == null) {
			return head2;
		}
		if (head2 == null) {
			return head1;
		}
		head1 = ReverseList(head1);
		head2 = ReverseList(head2);
		int res = 0, temp = 0;
		ListNode dummynode = new ListNode(-1);
		ListNode cur = dummynode;
		while (head1 != null || head2 != null || res != 0) {
			int val1 = (head1 == null) ? 0 : head1.val;
			int val2 = (head2 == null) ? 0 : head2.val;
			temp = val1 + val2;
			res = temp / 10;
			temp = temp % 10;
			cur.next = new ListNode(temp);
			cur = cur.next;
			if (head1 != null) {
				head1 = head1.next;
			}
			if (head2 != null) {
				head2 = head2.next;
			}
		}
		return ReverseList(dummynode.next);
	}
}