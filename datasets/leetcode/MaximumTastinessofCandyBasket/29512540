class Solution {
	int n;
	boolean check(int[] price, int k, int mid) {
		int count = 1;
		int prev = price[0];
		for (int i = 1; i < n; i++) {
			if (price[i] - prev >= mid) {
				count++;
				prev = price[i];
			}
		}
		return count >= k;
	}
	int maximumTastiness(int[] price, int k) {
		Arrays.sort(price);
		this.n = price.length;
		int l = 0, r = price[n - 1];
		int mid = l + (r - l) / 2;
		int ans = 0;
		while (l <= r) {
			mid = l + (r - l) / 2;
			if (check(price,k,mid)) {
				l = mid + 1;
				ans = Math.max(ans,mid);
			} 
			else {
				r = mid - 1;
			}
		}
		return ans;
	}
}