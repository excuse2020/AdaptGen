class Solution {
	int find(int nums, int[] dp, int start, int n) {
		if (start == 0) {
			dp[0] = 0;
		} 
		else {
			dp[0] = nums[0];
		}
		for (int i = 1; i < n; i++) {
			int pick = nums[i];
			if (i > 1) {
				pick += dp[i - 2];
			}
			int notpick = dp[i - 1];
			dp[i] = Math.max(pick,notpick);
		}
		return dp[n - 1];
	}
	int rob(int[] nums) {
		int n = nums.length;
		if (n == 1) {
			return nums[0];
		}
		int[] dp1 = new int[n];
		int max1 = find(nums,dp1,1,n - 1);
		int[] dp2 = new int[n];
		int max2 = find(nums,dp2,0,n);
		return Math.max(max1,max2);
	}
}