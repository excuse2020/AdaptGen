class Solution {
	List<Set<Integer>> ancestors;
	boolean[] visited;
	void dfs(int node, Map<Integer, List<Integer>> graph) {
		visited[node] = true;
		if (!graph.containsKey(node)) {
			return;
		}
		for (int ancestor: graph.get(node)) {	
			if (!visited[ancestor]) {
				dfs(ancestor,graph);
			}
			ancestors.get(node).add(ancestor);
			ancestors.get(node).addAll(ancestors.get(ancestor));
		}
	}
	List<List<Integer>> getAncestors(int n, int[][] edges) {
		ancestors = new ArrayList<>();
		for (int i = 0; i < n; i++) {
			ancestors.add(new HashSet<>());
		}
		Map<Integer, List<Integer>> graph = new HashMap<>();
		for (int[] edge: edges) {	
			graph.computeIfAbsent(edge[1],(k) -> {new ArrayList<>()}).add(edge[0]);
		}
		visited = new boolean[n];
		for (int i = 0; i < n; i++) {
			if (!visited[i]) {
				dfs(i,graph);
			}
		}
		List<List<Integer>> result = new ArrayList<>();
		for (Set<Integer> set: ancestors) {	
			List<Integer> sortedList = new ArrayList<>(set);
			Collections.sort(sortedList);
			result.add(sortedList);
		}
		return result;
	}
}