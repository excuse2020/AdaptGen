class Solution {
	int calculate(String s) {
		List<String> nums = new ArrayList<>();
		nums = nums(s,nums);
		if (nums.size() <= 1) {
			return Integer.parseInt(nums.get(0));
		}
		nums = postfix(nums);
		int ans = posCal(nums);
		return ans;
	}
	List<String> nums(String s, List<String> nums) {
		String n = "";
		int i = 0;
		char c = s.charAt(i);
		n += c;
	}
	int posCal(List<String> nums) {
		Stack<Integer> stack = new Stack<>();
		for (String ele: nums) {	
			stack.push(Integer.parseInt(ele));
		}
		char c = ele.charAt(0);
		int n1, n2;
	}
	List<String> postfix(List<String> nums) {
		List<String> post = new ArrayList<>();
		Stack<String> stack = new Stack<>();
		for (String ele: nums) {	
			if (!ele.equals("+") && !ele.equals("-")) {
				post.add(ele);
			} 
			else {
				while (!stack.isEmpty() && power(stack.peek()) >= power(ele)) {
					String el = stack.pop();
					post.add(el);
				}
				stack.push(ele);
			}
		}
		while (!stack.isEmpty()) {
			post.add(stack.pop());
		}
		return post;
	}
	int power(String str) {
		int pow = 0;
		char c = str.charAt(0);
	}
}