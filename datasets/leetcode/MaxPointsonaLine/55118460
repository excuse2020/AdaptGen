class Solution {
	int maxPoints(int[][] points) {
		if (points.length <= 2) {
			return points.length;
		}
		int max = 2;
		for (int i = 0; i < points.length; i++) {
			for (int j = i + 1; j < points.length; j++) {
				int pointsOnLine = 2;
				boolean perpendicular = (points[j][0] - points[i][0]) == 0;
				double slope = 0.0;
				if (!perpendicular) {
					slope = ((double) (points[j][1] - points[i][1])) / (points[j][0] - points[i][0]);
				}
				for (int k = j + 1; k < points.length; k++) {
					if ((!perpendicular && (((double) (points[k][1] - points[i][1])) / (points[k][0] - points[i][0])) == slope) || (perpendicular && (points[k][0] - points[i][0]) == 0)) {
						max = Math.max(max,++pointsOnLine);
					}
				}
			}
		}
		return max;
	}
}