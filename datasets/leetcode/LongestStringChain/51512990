class Solution {
	List<String>[] groups;
	int longestChain;
	void dfs(String word, int k, int length) {
		if (k == groups.length) {
			return;
		}
		for (int i = 0; i < groups[k].size(); i++) {
			if (isGood(word,groups[k].get(i))) {
				longestChain = Math.max(longestChain,length + 1);
				dfs(groups[k].get(i),k + 1,length + 1);
				groups[k].remove(i--);
			}
		}
	}
	boolean isGood(String word1, String word2) {
		int i = 0;
		int j = 0;
		int count = 0;
		while (count != 2 && i < word1.length()) {
			if (word1.charAt(i) == word2.charAt(j)) {
				i++;
				j++;
			} 
			else {
				j++;
				count++;
			}
		}
		return count != 2;
	}
	int longestStrChain(String[] words) {
		int maxLength = 0;
		for (String word: words) {	
			maxLength = Math.max(maxLength,word.length());
		}
		longestChain = 1;
		groups = new List[maxLength + 1];
		for (int i = 0; i <= maxLength; i++) {
			groups[i] = new ArrayList<String>();
		}
		for (String word: words) {	
			groups[word.length()].add(word);
		}
		for (int k = 1; k < maxLength; k++) {
			for (int i = 0; i < groups[k].size(); i++) {
				dfs(groups[k].get(i),k + 1,1);
				if (longestChain > maxLength - k) {
					return longestChain;
				}
			}
		}
		return longestChain;
	}
}