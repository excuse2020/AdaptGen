class Solution {
	int edges = 0, currSubtree = 0;
	boolean hasParent;
	boolean invalid = false;
	int[] visited, leftChildren, rightChildren;
	void traverse(int node) {
		if (invalid) {
			return;
		}
		visited[node] = currSubtree;
		if (leftChildren[node] != -1) {
			if (visited[leftChildren[node]] == currSubtree || hasParent[leftChildren[node]]) {
				invalid = true;
				return;
			}
			visited[node] = currSubtree;
			hasParent[leftChildren[node]] = true;
			edges++;
			if (visited[leftChildren[node]] == 0) {
				traverse(leftChildren[node]);
			}
		}
		if (rightChildren[node] != -1) {
			if (visited[rightChildren[node]] == currSubtree || hasParent[rightChildren[node]]) {
				invalid = true;
				return;
			}
			visited[node] = currSubtree;
			hasParent[rightChildren[node]] = true;
			edges++;
			if (visited[rightChildren[node]] == 0) {
				traverse(rightChildren[node]);
			}
		}
	}
	boolean validateBinaryTreeNodes(int n, int[] leftChild, int[] rightChild) {
		visited = new int[n];
		hasParent = new boolean[n];
		leftChildren = leftChild;
		rightChildren = rightChild;
		for (int i = 0; i < n; i++) {
			if (visited[i] == 0) {
				currSubtree++;
				traverse(i);
			}
		}
		return !invalid && edges == n - 1;
	}
}