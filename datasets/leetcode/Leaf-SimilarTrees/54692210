class Solution {
	void getLeaves(TreeNode node, List<Integer> leaves) {
		if (node.left == null && node.right == null) {
			leaves.add(node.val);
		}
		if (node.left != null) {
			getLeaves(node.left,leaves);
		}
		if (node.right != null) {
			getLeaves(node.right,leaves);
		}
	}
	boolean leafSimilar(TreeNode root1, TreeNode root2) {
		List<Integer> root1Leaves = new ArrayList<>();
		getLeaves(root1,root1Leaves);
		List<Integer> root2Leaves = new ArrayList<>();
		getLeaves(root2,root2Leaves);
		if (root1Leaves.size() != root2Leaves.size()) {
			return false;
		}
		for (int i = 0; i < root1Leaves.size(); i++) {
			if (!root1Leaves.get(i).equals(root2Leaves.get(i))) {
				return false;
			}
		}
		return true;
	}
}