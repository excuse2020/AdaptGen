class Solution {
	int maxSumMinProduct(int[] A) {
		long res = 0;
		Stack<Integer> stack = new Stack();
		int[] left = new int[A.length];
		int[] right = new int[A.length];
		for (int i = 0; i < A.length; i++) {
			while (!stack.empty() && A[stack.peek()] >= A[i]) {
				stack.pop();
			}
			if (stack.empty()) {
				left[i] = 0;
			} 
			else {
				left[i] = stack.peek() + 1;
			}
			stack.push(i);
		}
		stack.clear();
		for (int i = A.length - 1; i >= 0; i--) {
			while (!stack.empty() && A[stack.peek()] >= A[i]) {
				stack.pop();
			}
			if (stack.empty()) {
				right[i] = A.length - 1;
			} 
			else {
				right[i] = stack.peek() - 1;
			}
			stack.push(i);
		}
		long[] sum = new long[A.length + 1];
		for (int i = 0; i < A.length; i++) {
			sum[i + 1] = sum[i] + A[i];
		}
		for (int i = 0; i < A.length; i++) {
			res = Math.max(res,(sum[right[i] + 1] - sum[left[i]]) * A[i]);
		}
		return (int) (res % 1000_000_007);
	}
}