class Solution {
	void getRightResult(TreeNode tree, List<Integer> result, int height) {
		if (tree == null) {
			return;
		}
		if (result.size() <= height) {
			result.add(tree.val);
		}
		getRightResult(tree.right,result,height + 1);
		getRightResult(tree.left,result,height + 1);
	}
	TreeNode reConstructBinaryTree(int[] pre, int[] vin) {
		if (pre.length == 0 || vin.length == 0) {
			return null;
		}
		TreeNode curNode = new TreeNode(pre[0]);
		for (int i = 0; i < vin.length; i++) {
			if (pre[0] == vin[i]) {
				curNode.left = reConstructBinaryTree(Arrays.copyOfRange(pre,1,i + 1),Arrays.copyOfRange(vin,0,i));
				curNode.right = reConstructBinaryTree(Arrays.copyOfRange(pre,i + 1,pre.length),Arrays.copyOfRange(vin,i + 1,vin.length));
			}
		}
		return curNode;
	}
	int[] solve(int[] xianxu, int[] zhongxu) {
		TreeNode tree = reConstructBinaryTree(xianxu,zhongxu);
		List<Integer> rightResult = new ArrayList<>();
		getRightResult(tree,rightResult,0);
		return rightResult.stream().mapToInt().toArray();
	}
}