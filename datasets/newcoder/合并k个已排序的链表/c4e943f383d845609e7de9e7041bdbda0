class Solution {
	ListNode merge(ListNode list1, ListNode list2) {
		ListNode p = new ListNode(-1);
		p.next = null;
		ListNode pre = null;
		pre = p;
		while (list1 != null && list2 != null) {
			if (list1.val >= list2.val) {
				ListNode cur = list2.next;
				pre.next = list2;
				list2 = cur;
			} 
			else {
				ListNode cur = list1.next;
				pre.next = list1;
				list1 = cur;
			}
			pre = pre.next;
			System.out.println(pre.val);
		}
		if (list1 != null) {
			pre.next = list1;
		}
		if (list2 != null) {
			pre.next = list2;
		}
		return p.next;
	}
	ListNode mergeKLists(ArrayList<ListNode> lists) {
		if (lists.size() == 0) {
			return null;
		}
		if (lists.size() == 1) {
			return lists.get(0);
		}
		ListNode cur = new ListNode(-1);
		int count = 0;
		for (int i = 0; i < lists.size(); i++) {
			if (count == 0) {
				cur.next = lists.get(i);
				cur = cur.next;
				count = 1;
			} 
			else {
				cur = merge(cur,lists.get(i));
			}
		}
		return cur;
	}
}