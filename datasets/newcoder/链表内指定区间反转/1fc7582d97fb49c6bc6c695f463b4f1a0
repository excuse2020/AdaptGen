class Solution {
	ListNode reverse(ListNode head, int length) {
		ListNode cur = head;
		ListNode tmp = null;
		ListNode last = null;
		for (int i = 0; i < length; i++) {
			tmp = cur.next;
			cur.next = last;
			last = cur;
			cur = tmp;
		}
		head.next = tmp;
		return last;
	}
	ListNode reverseBetween(ListNode head, int m, int n) {
		int index = 1;
		ListNode lastNode = null;
		ListNode curNode = head;
		ListNode childNodeHead = null;
		while (curNode != null) {
			if (index == m) {
				childNodeHead = reverse(curNode,n - m + 1);
				break;
			}
			lastNode = curNode;
			curNode = curNode.next;
			index++;
		}
		if (lastNode != null) {
			lastNode.next = childNodeHead;
		} 
		else {
			head = childNodeHead;
		}
		return head;
	}
}