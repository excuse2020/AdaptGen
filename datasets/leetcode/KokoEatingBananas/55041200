class Solution {
	int calculatehour(int[] piles, int hr) {
		int totalh = 0;
		for (int i = 0; i < piles.length; i++) {
			totalh += Math.ceil((double) piles[i] / (double) hr);
		}
		return totalh;
	}
	int maxnumber(int[] piles) {
		int mxx = Integer.MIN_VALUE;
		for (int i = 0; i < piles.length; i++) {
			mxx = Math.max(mxx,piles[i]);
		}
		return mxx;
	}
	int minEatingSpeed(int[] piles, int h) {
		int r = maxnumber(piles);
		int l = 1;
		int ans = r;
		while (l <= r) {
			int mid = l + (r - l) / 2;
			int total = calculatehour(piles,mid);
			if (total <= h) {
				ans = mid;
				r = mid - 1;
			} 
			else {
				l = mid + 1;
			}
		}
		return ans;
	}
}