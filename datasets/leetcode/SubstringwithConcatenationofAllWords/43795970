class Solution {
	List<Integer> findSubstring(String s, String[] words) {
		var m = words.length;
		var n = words[0].length();
		var result = new ArrayList<Integer>();
		if (s.length() < m * n) {
			return result;
		}
		var map = new HashMap<String, Integer>();
		for (var word: words) {	
			map.put(word,map.getOrDefault(word,0) + 1);
		}
		for (var i = 0; i <= s.length() - m * n; i++) {
			var windowMap = new HashMap<String, Integer>();
			for (var j = 0; j < m; j++) {
				var temp = s.substring(i + j * n,i + j * n + n);
				windowMap.put(temp,windowMap.getOrDefault(temp,0) + 1);
			}
			if (windowMap.equals(map)) {
				result.add(i);
			}
		}
		return result;
	}
}