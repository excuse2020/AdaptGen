class Solution {
	int[] findOrder(int numCourses, int[][] prerequisites) {
		List<List<Integer>> adjList = new ArrayList<>();
		for (int i = 0; i < numCourses; i++) {
			adjList.add(new ArrayList<>());
		}
		int m = prerequisites.length;
		for (int i = 0; i < m; i++) {
			adjList.get(prerequisites[i][0]).add(prerequisites[i][1]);
		}
		int indegree = new int[numCourses];
		for (int i = 0; i < numCourses; i++) {
			for (int node: adjList.get(i)) {	
				indegree[node]++;
			}
		}
		Queue<Integer> q = new LinkedList<>();
		for (int i = 0; i < numCourses; i++) {
			if (indegree[i] == 0) {
				q.add(i);
			}
		}
		int cnt = 0;
		int res = new int[numCourses];
		while (!q.isEmpty()) {
			int node = q.poll();
			res[cnt] = node;
			cnt++;
			for (int i: adjList.get(node)) {	
				indegree[i]--;
				if (indegree[i] == 0) {
					q.add(i);
				}
			}
		}
		if (cnt == numCourses) {
			int result = new int[numCourses];
			int j = 0;
			for (int i = numCourses - 1; i >= 0; i--) {
				result[j++] = res[i];
			}
			return result;
		}
		return new int[0];
	}
}