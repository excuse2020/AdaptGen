class Solution {
	int DFS(HashMap<Integer, List<int[]>> graph, int node, boolean[] visited) {
		int res = 0;
		visited[node] = true;
		for (int[] edge: graph.get(node)) {	
			int neig = edge[0];
			int type = edge[1];
			if (visited[neig]) {
				continue;
			}
			if (type == 1) {
				res += 1 + DFS(graph,neig,visited);
			} 
			else {
				res += DFS(graph,neig,visited);
			}
		}
		return res;
	}
	int minReorder(int n, int[][] connections) {
		HashMap<Integer, List<int[]>> graph = new HashMap<>();
		boolean[] visited = new boolean[n];
		for (int i = 0; i < n; i++) {
			graph.put(i,new ArrayList<>());
		}
		for (int[] arr: connections) {	
			int v = arr[0];
			int e = arr[1];
			graph.get(v).add(new int{e, 1});
			graph.get(e).add(new int{v, 0});
		}
		return DFS(graph,0,visited);
	}
}