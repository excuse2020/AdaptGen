class Solution {
	Integer[][] dp;
	int getScore(List<List<Integer>> piles, int i, int k) {
		if (i < 0 || k < 0) {
			return 0;
		}
		if (dp[i][k] != null) {
			return dp[i][k];
		}
		int N = Math.min(k,piles.get(i).size());
		int exclude = getScore(piles,i - 1,k);
		int include = 0, sum = 0;
		for (int j = 0; j < N; j++) {
			sum += piles.get(i).get(j);
			include = Math.max(include,sum + getScore(piles,i - 1,k - j));
		}
		return dp[i][k] = Math.max(include,exclude);
	}
	int maxValueOfCoins(List<List<Integer>> piles, int k) {
		int N = piles.size();
		dp = new Integer[N + 1][k + 1];
		return getScore(piles,N - 1,k);
	}
}