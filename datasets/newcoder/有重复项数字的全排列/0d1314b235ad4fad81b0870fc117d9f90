class Solution {
	void getList(Map<Integer, Integer> map, ArrayList<ArrayList<Integer>> list, ArrayList<Integer> result, int size) {
		if (result.size() == size) {
			list.add(new ArrayList<>(result));
		}
		for (int num: map.keySet()) {	
			result.add(num);
			Map<Integer, Integer> map1 = new HashMap<>(map);
			if (map1.get(num) > 1) {
				map1.put(num,map1.get(num) - 1);
			} 
			else {
				map1.remove(num);
			}
			getList(map1,list,result,size);
			result.remove(result.size() - 1);
		}
	}
	ArrayList<ArrayList<Integer>> permuteUnique(int[] num) {
		ArrayList<ArrayList<Integer>> list = new ArrayList<>();
		if (num.length == 0) {
			return list;
		}
		Map<Integer, Integer> map = new HashMap<>();
		for (int i: num) {	
			if (map.containsKey(i)) {
				map.put(i,map.get(i) + 1);
			} 
			else {
				map.put(i,1);
			}
		}
		getList(map,list,new ArrayList<>(),num.length);
		Collections.sort(list,new Comparator<ArrayList<Integer>>());
		return list;
	}
}