class Solution {
	int[][] dp;
	Map<Integer, List<Integer>> m = new HashMap();
	List<Boolean> checkIfPrerequisite(int numCourses, int[][] prerequisites, int[][] queries) {
		dp = new int[numCourses][numCourses];
		for (int i = 0; i < numCourses; i++) {
			m.put(i,new ArrayList());
		}
		for (int i = 0; i < prerequisites.length; i++) {
			m.get(prerequisites[i][0]).add(prerequisites[i][1]);
			dp[prerequisites[i][0]][prerequisites[i][1]] = 1;
		}
		List<Boolean> result = new ArrayList();
		for (int i = 0; i < queries.length; i++) {
			boolean val = pathExists(numCourses,queries[i][0],queries[i][1]);
			dp[queries[i][0]][queries[i][1]] = val ? 1 : -1;
			result.add(val);
		}
		return result;
	}
	boolean pathExists(int numCourses, int from, int to) {
		if (dp[from][to] != 0) {
			return dp[from][to] == 1 ? true : false;
		}
		Queue<Integer> q = new LinkedList();
		boolean[] visited = new boolean[numCourses];
		q.add(from);
		visited[from] = true;
		while (!q.isEmpty()) {
			int node = (int) q.remove();
			if (node == to) {
				return true;
			}
			List<Integer> neighbors = (List<Integer>) m.get(node);
			for (int neighbor: neighbors) {	
				if (dp[neighbor][to] == 1) {
					return true;
				}
				if (dp[neighbor][to] == 0) {
					if (!visited[neighbor]) {
						visited[neighbor] = true;
						q.add(neighbor);
					}
				}
			}
		}
		return false;
	}
}