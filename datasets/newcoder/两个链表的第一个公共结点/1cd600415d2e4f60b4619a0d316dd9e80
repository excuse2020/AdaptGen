class Solution {
	ListNode FindFirstCommonNode(ListNode pHead1, ListNode pHead2) {
		int len1 = getListNodeLength(pHead1);
		int len2 = getListNodeLength(pHead2);
		int commonlength = Math.min(len1,len2);
		ListNode l1 = FindKthToTail(pHead1,commonlength);
		ListNode l2 = FindKthToTail(pHead2,commonlength);
		while (l1 != l2) {
			l1 = l1.next;
			l2 = l2.next;
		}
		return l1;
	}
	ListNode FindKthToTail(ListNode pHead, int k) {
		int count = 1;
		ListNode pre = pHead;
		ListNode back = pHead;
		ListNode kong = null;
		if (pHead == null) {
			return kong;
		}
		while (pre.next != null) {
			if (count < k) {
				pre = pre.next;
				count++;
			} 
			else {
				pre = pre.next;
				back = back.next;
			}
		}
		if (count != k) {
			return kong;
		}
		return back;
	}
	int getListNodeLength(ListNode pHead) {
		int len = 0;
		ListNode l1 = pHead;
		while (l1 != null) {
			len++;
			l1 = l1.next;
		}
		return len;
	}
}