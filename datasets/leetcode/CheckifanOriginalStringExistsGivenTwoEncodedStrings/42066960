class Solution {
	Boolean[][][] dp;
	int l1, l2;
	String s1, s2;
	boolean helper(int s1I, int s2I, int diff, String s1, String s2, Boolean[][][] dp) {
		if (s1I == s1.length() && s2I == s2.length()) {
			return diff == 0;
		}
		if (dp[s1I][s2I][diff + 1000] != null) {
			return dp[s1I][s2I][diff + 1000];
		}
		char c1 = (s1I < s1.length()) ? s1.charAt(s1I) : 0;
		char c2 = (s2I < s2.length()) ? s2.charAt(s2I) : 0;
		int k1 = s1I, k2 = s2I, val1 = 0, val2 = 0;
	}
	boolean possiblyEquals(String s1, String s2) {
		this.s1 = s1;
		this.s2 = s2;
		this.l1 = s1.length();
		this.l2 = s2.length();
		this.dp = new Boolean[l1 + 1][l2 + 1][2001];
		return helper(0,0,0);
	}
}