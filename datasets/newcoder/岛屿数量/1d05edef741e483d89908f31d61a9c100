class Solution {
	void deepSearch(char[][] grid, int i, int j) {
		if (i >= grid.length || i < 0) {
			return;
		}
		if (j >= grid[i].length || j < 0) {
			return;
		}
		if (grid[i][j] == '0') {
			return;
		}
		if (grid[i][j] == '1') {
			grid[i][j] = '0';
		}
		deepSearch(grid,i + 1,j);
		deepSearch(grid,i - 1,j);
		deepSearch(grid,i,j + 1);
		deepSearch(grid,i,j - 1);
	}
	int solve(char[][] grid) {
		int count = 0;
		for (int i = 0; i < grid.length; i++) {
			for (int j = 0; j < grid[i].length; j++) {
				if (grid[i][j] == '0') {
					continue;
				} 
				else {
					count++;
					deepSearch(grid,i,j);
				}
			}
		}
		return count;
	}
}