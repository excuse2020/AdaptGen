class Solution {
	boolean validPath(int n, int[][] edges, int source, int destination) {
		List<List<Integer>> list = new ArrayList<>();
		for (int i = 0; i < n; i++) {
			list.add(new ArrayList<>());
		}
		for (int[] i: edges) {	
			list.get(i[0]).add(i[1]);
			list.get(i[1]).add(i[0]);
		}
		boolean[] vis = new boolean[n];
		Queue<Integer> queue = new LinkedList<>();
		queue.add(source);
		vis[source] = true;
		while (!queue.isEmpty()) {
			Integer out = queue.poll();
			if (out == destination) {
				return true;
			}
			for (Integer i: list.get(out)) {	
				if (!vis[i]) {
					queue.add(i);
					vis[i] = true;
				}
			}
		}
		return false;
	}
}