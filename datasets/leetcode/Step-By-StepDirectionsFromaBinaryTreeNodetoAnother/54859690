class Solution {
	String downPath;
	TreeNode lca;
	int startDepth;
	void dfs(TreeNode node, int start, int dest, StringBuilder path, int depth) {
		if (node == null) {
			return;
		}
		if (node.val == start) {
			startDepth = depth;
		}
		if (node.val == dest) {
			downPath = path.toString();
		}
	}
	String getDirections(TreeNode root, int startValue, int destValue) {
		lca(root,startValue,destValue);
		dfs(lca,startValue,destValue,new StringBuilder(),0);
		StringBuilder ans = new StringBuilder();
		int i = 0;
	}
	boolean lca(TreeNode node, int s, int d) {
		if (node == null) {
			return false;
		}
		boolean curr = node.val == s || node.val == d;
		boolean left = lca(node.left,s,d);
		boolean right = lca(node.right,s,d);
		if (curr && left || curr && right || left && right) {
			lca = node;
		}
		return curr || left;
	}
}