class Solution {
	int profitableSchemes(int n, int minProfit, int[] group, int[] profit) {
		int crimes = group.length, ans = 0;
		int dp = new int[n + 1][minProfit + 1][crimes];
		dp[0][0][0] = 1;
		if (group[0] <= n) {
			dp[group[0]][Math.min(profit[0],minProfit)][0] = 1;
		}
		for (int k = 0; k < crimes; k++) {
			for (int j = 0; j <= minProfit; j++) {
				for (int i = 0; i <= n; i++) {
					if (k > 0) {
						dp[i][j][k] = (dp[i][j][k] + dp[i][j][k - 1]) % 1000000007;
					}
					if (i + group[k] <= n) {
						int profitAfterK = Math.min(j + profit[k],minProfit);
						if (k != 0) {
							dp[i + group[k]][profitAfterK][k] = (dp[i + group[k]][profitAfterK][k] + dp[i][j][k - 1]) % 1000000007;
						}
					}
					if (j == minProfit && k == (crimes - 1)) {
						ans = (ans + dp[i][j][k]) % 1000000007;
					}
				}
			}
		}
		return ans;
	}
}