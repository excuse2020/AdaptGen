class Solution {
	int count = 0;
	void helper(TreeNode root, Map<Integer, Integer> map, int cnt, int odd) {
		if (root == null) {
			return;
		}
		cnt += 1;
		map.put(root.val,map.getOrDefault(root.val,0) + 1);
		if (root.left == null && root.right == null) {
			for (int v: map.values()) {	
				if (v % 2 != 0) {
					odd++;
				}
			}
			if (cnt % 2 == 1 && odd == 1) {
				count++;
			} 
			else if (cnt % 2 == 0 && odd == 0) {
				count++;
			}
		}
		helper(root.left,map,cnt,odd);
		helper(root.right,map,cnt,odd);
		map.put(root.val,map.get(root.val) - 1);
		if (map.get(root.val) == 0) {
			map.remove(root.val);
		}
	}
	int pseudoPalindromicPaths(TreeNode root) {
		if (root == null) {
			return 0;
		}
		Map<Integer, Integer> map = new HashMap<>();
		helper(root,map,0,0);
		return count;
	}
}