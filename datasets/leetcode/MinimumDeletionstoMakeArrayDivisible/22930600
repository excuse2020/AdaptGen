class Solution {
	boolean isPossible(int num, int[] arr) {
		for (int index = 0; index < arr.length; index++) {
			if (arr[index] % num != 0) {
				return false;
			}
		}
		return true;
	}
	int minOperations(int[] nums, int[] numsDivide) {
		int len = nums.length;
		int max = Arrays.stream(nums).max().getAsInt();
		Map<Integer, Integer> hash = new TreeMap<>();
		int mindel = 0;
		for (int index = 0; index < len; index++) {
			hash.put(nums[index],hash.getOrDefault(nums[index],0) + 1);
		}
		for (Map.Entry<Integer, Integer> x: hash.entrySet()) {	
			if (x.getValue() > 0) {
				if (isPossible(x.getKey(),numsDivide)) {
					return mindel;
				} 
				else {
					mindel += x.getValue();
				}
			}
		}
		return -1;
	}
}