class Solution {
	int maxIncreaseKeepingSkyline(int[][] grid) {
		Map<Integer, Integer> row = maxOfEachRow(grid);
		Map<Integer, Integer> colum = maxOfColumn(grid);
		int count = 0;
		for (int i = 0; i < grid.length; i++) {
			for (int j = 0; j < grid[i].length; j++) {
				int min = Math.min(row.get(i),colum.get(j));
				count = count + (min - grid[i][j]);
			}
		}
		return count;
	}
	Map<Integer, Integer> maxOfColumn(int[][] grid) {
		Map<Integer, Integer> list = new LinkedHashMap<>();
		for (int i = 0; i < grid.length; i++) {
			int max = 0;
			for (int j = 0; j < grid[i].length; j++) {
				if (grid[j][i] > max) {
					max = grid[j][i];
				}
			}
			list.put(i,max);
		}
		return list;
	}
	Map<Integer, Integer> maxOfEachRow(int[][] grid) {
		Map<Integer, Integer> list = new LinkedHashMap<>();
		for (int i = 0; i < grid.length; i++) {
			int max = 0;
			for (int j = 0; j < grid[i].length; j++) {
				if (grid[i][j] > max) {
					max = grid[i][j];
				}
			}
			list.put(i,max);
		}
		return list;
	}
}