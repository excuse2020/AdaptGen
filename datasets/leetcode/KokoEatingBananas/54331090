class Solution {
	int findmax(int piles) {
		int maxi = Integer.MIN_VALUE;
		int n = piles.length;
		for (int i = 0; i < n; i++) {
			maxi = Math.max(maxi,piles[i]);
		}
		return maxi;
	}
	int minEatingSpeed(int[] piles, int h) {
		int low = 1;
		int high = findmax(piles);
		while (low <= high) {
			int mid = (low + high) / 2;
			int total = totalhour(piles,mid);
			if (total <= h) {
				high = mid - 1;
			} 
			else {
				low = mid + 1;
			}
		}
		return low;
	}
	int totalhour(int piles, int hourly) {
		int totalhour = 0;
		int n = piles.length;
		for (int i = 0; i < n; i++) {
			totalhour += Math.ceil((double) (piles[i]) / (double) (hourly));
		}
		return totalhour;
	}
}