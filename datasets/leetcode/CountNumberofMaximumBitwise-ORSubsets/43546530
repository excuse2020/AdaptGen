class Solution {
	List<List<Integer>> ans = new ArrayList<List<Integer>>();
	void backtrack(List<List<Integer>> arr, List<Integer> arrl, int[] nums, int start, int sum) {
		arr.add(new ArrayList<>(arrl));
		for (int i = start; i < nums.length; i++) {
			arrl.add(nums[i]);
			backtrack(arr,arrl,nums,i + 1,sum);
			arrl.remove(arrl.size() - 1);
		}
	}
	int countMaxOrSubsets(int[] nums) {
		int sum = 0, sum1 = 0;
		for (int i = 0; i < nums.length; i += 1) {
			sum = sum | nums[i];
		}
		List<List<Integer>> arr = new ArrayList<List<Integer>>();
		backtrack(arr,new ArrayList<Integer>(),nums,0,sum);
		int c = 0;
		for (int i = 0; i < arr.size(); i++) {
			sum1 = 0;
			for (int j = 0; j < arr.get(i).size(); j++) {
				sum1 = sum1 | arr.get(i).get(j);
			}
			if (sum1 == sum) {
				c++;
			}
		}
		return c;
	}
}