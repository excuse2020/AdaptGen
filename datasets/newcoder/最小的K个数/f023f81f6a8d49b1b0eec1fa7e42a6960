class Solution {
	ArrayList<Integer> GetLeastNumbers_Solution(int[] input, int k) {
		ArrayList<Integer> res = new ArrayList<>();
		if (k == 0 || k > input.length) {
			return res;
		}
		PriorityQueue<Integer> queue = new PriorityQueue<>(new Comparator<Integer>());
		for (int i = 0; i < k; i++) {
			queue.offer(input[i]);
		}
		for (int i = k, len = input.length; i < len; i++) {
			if (queue.peek() > input[i]) {
				queue.poll();
				queue.offer(input[i]);
			}
		}
		for (int i = 0; i < k; i++) {
			res.add(queue.poll());
		}
		return res;
	}
	void quickSort(int[] input, int left, int right, int k) {
		if (left < right) {
			if (right - left + 1 <= k) {
				return;
			}
			int i = left, j = right;
			int temp = input[i];
			while (i < j) {
				while (i < j && input[j] >= temp) {
					j--;
				}
				if (i < j) {
					input[i] = input[j];
					i++;
				}
				while (i < j && input[i] <= temp) {
					i++;
				}
				if (i < j) {
					input[j] = input[i];
					j--;
				}
			}
			input[i] = temp;
			int kk = k - (i - left + 1);
			if (kk == 0) {
				return;
			} 
			else if (kk > 0) {
				quickSort(input,i + 1,right,kk);
			} 
			else {
				quickSort(input,left,i - 1,k);
			}
		}
	}
}