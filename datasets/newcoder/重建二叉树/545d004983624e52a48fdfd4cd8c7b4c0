class Solution {
	TreeNode reConstructBinaryTree(int[] preOrder, int[] vinOrder) {
		if (preOrder.length == 0 || vinOrder.length == 0) {
			return null;
		}
		int root = preOrder[0];
		TreeNode r = new TreeNode(root);
		int rIndex = 0;
		for (int i = 0; i < vinOrder.length; i++) {
			if (vinOrder[i] == root) {
				rIndex = i;
			}
		}
		int[] preLeft = Arrays.copyOfRange(preOrder,1,rIndex + 1);
		int[] preRight = Arrays.copyOfRange(preOrder,rIndex + 1,preOrder.length);
		int[] inLeft = Arrays.copyOfRange(vinOrder,0,rIndex);
		int[] inRight = Arrays.copyOfRange(vinOrder,rIndex + 1,vinOrder.length);
		r.left = reConstructBinaryTree(preLeft,inLeft);
		r.right = reConstructBinaryTree(preRight,inRight);
		return r;
	}
}