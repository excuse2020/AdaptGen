class Solution {
	boolean isPossible(int[] q, int n, int check) {
		int total = 0;
		for (int val: q) {	
			total += ((val - 1) + check) / check;
			if (total > n) {
				return false;
			}
		}
		return true;
	}
	int minimizedMaximum(int n, int[] q) {
		int big = Arrays.stream(q).max().getAsInt();
		if (q.length == 1) {
			return q[0];
		}
		if (n == q.length) {
			return big;
		}
		int start = 1, end = big, ans = 0;
		while (start < end) {
			int mid = (start + end) >> 1;
			if (isPossible(q,n,mid)) {
				ans = mid;
				end = mid;
			} 
			else {
				start = mid + 1;
			}
		}
		return ans;
	}
}