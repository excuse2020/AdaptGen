class Solution {
	int dfs(List<List<Integer>> adj, boolean vis, List<Boolean> hasApple, int n, int ind) {
		int cnt = 0;
		vis[ind] = true;
		for (int e: adj.get(ind)) {	
			if (!vis[e]) {
				cnt += dfs(adj,vis,hasApple,n,e);
			}
		}
		if (ind == 0) {
			return cnt;
		}
		return cnt + ((hasApple.get(ind) || cnt > 0) ? 2 : 0);
	}
	int minTime(int n, int[][] edges, List<Boolean> hasApple) {
		List<List<Integer>> adj = new ArrayList<>();
		for (int i = 0; i < n; i++) {
			adj.add(new ArrayList<>());
		}
		for (int e: edges) {	
			adj.get(e[0]).add(e[1]);
			adj.get(e[1]).add(e[0]);
		}
		boolean vis = new boolean[n];
		return dfs(adj,vis,hasApple,n,0);
	}
}