class Solution {
	List<List<Integer>> mergeSimilarItems(int[][] items1, int[][] items2) {
		Arrays.sort(items1,Comparator.comparingInt((arr) -> {arr[0]}));
		Arrays.sort(items2,Comparator.comparingInt((arr) -> {arr[0]}));
		ArrayList<List<Integer>> ans = new ArrayList<List<Integer>>();
		int i = 0;
		int j = 0;
		while (i < items1.length && j < items2.length) {
			int firstColItem1 = items1[i][0];
			int firstColItem2 = items2[j][0];
			if (firstColItem1 == firstColItem2) {
				int sum = items1[i][1] + items2[j][1];
				List<Integer> tempList = new ArrayList<>();
				tempList.add(firstColItem1);
				tempList.add(sum);
				ans.add(tempList);
				i++;
				j++;
			} 
			else if (firstColItem1 < firstColItem2) {
				List<Integer> tempList = new ArrayList<>();
				tempList.add(firstColItem1);
				tempList.add(items1[i][1]);
				ans.add(tempList);
				i++;
			} 
			else {
				List<Integer> tempList = new ArrayList<>();
				tempList.add(firstColItem2);
				tempList.add(items2[j][1]);
				ans.add(tempList);
				j++;
			}
		}
		while (i < items1.length) {
			List<Integer> tempList = new ArrayList<>();
			tempList.add(items1[i][0]);
			tempList.add(items1[i][1]);
			ans.add(tempList);
			i++;
		}
		while (j < items2.length) {
			List<Integer> tempList = new ArrayList<>();
			tempList.add(items2[j][0]);
			tempList.add(items2[j][1]);
			ans.add(tempList);
			j++;
		}
		return ans;
	}
}