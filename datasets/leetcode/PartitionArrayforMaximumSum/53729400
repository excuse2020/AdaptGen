class Solution {
	int maxSumAfterPartitioning(int[] arr, int k) {
		int n = arr.length;
		int sum = 0;
		int dp = new int[n];
		Arrays.fill(dp,-1);
		return traverseT(0,arr,k,dp);
	}
	int traverseT(int i, int[] arr, int k, int[] dp) {
		int n = arr.length;
		int max = -1;
		int res = 0;
		int t = 0;
		if (i == n) {
			return 0;
		}
		if (dp[i] != -1) {
			return dp[i];
		}
		for (int j = i; j < i + k && j < n; j++) {
			t++;
			max = Math.max(max,arr[j]);
			res = Math.max(res,max * t + traverseT(j + 1,arr,k,dp));
		}
		dp[i] = res;
		return res;
	}
}