class Solution {
	ListNode merge(ListNode left, ListNode right) {
		ListNode head = new ListNode(0);
		ListNode temp = head;
		while (left != null && right != null) {
			if (left.val < right.val) {
				temp.next = left;
				left = left.next;
			} 
			else {
				temp.next = right;
				right = right.next;
			}
			temp = temp.next;
		}
		if (left != null) {
			temp.next = left;
		}
		if (right != null) {
			temp.next = right;
		}
		return head.next;
	}
	ListNode sortList(ListNode head) {
		if (head == null || head.next == null) {
			return head;
		}
		ListNode prev = null, slow = head, fast = head;
		while (fast != null && fast.next != null) {
			prev = slow;
			slow = slow.next;
			fast = fast.next.next;
		}
		prev.next = null;
		ListNode left = sortList(head);
		ListNode right = sortList(slow);
		ListNode newHead = merge(left,right);
		return newHead;
	}
}