class Solution {
	void quickSort(List<Integer> nums, int left, int right) {
		if (left < right) {
			int i = left, j = right;
			int temp = nums.get(i);
			while (i < j) {
				while (i < j && nums.get(j) >= temp) {
					j--;
				}
				if (i < j) {
					nums.set(i,nums.get(j));
					i++;
				}
				while (i < j && nums.get(i) <= temp) {
					i++;
				}
				if (i < j) {
					nums.set(j,nums.get(i));
					j--;
				}
			}
			nums.set(i,temp);
			quickSort(nums,left,i - 1);
			quickSort(nums,i + 1,right);
		}
	}
	ListNode sortInList(ListNode head) {
		List<Integer> nums = new ArrayList<>();
		ListNode dummyHead = new ListNode(-1);
		while (head != null) {
			nums.add(head.val);
			head = head.next;
		}
		quickSort(nums,0,nums.size() - 1);
		ListNode cur = dummyHead;
		for (int x: nums) {	
			ListNode temp = new ListNode(x);
			cur.next = temp;
			cur = cur.next;
		}
		return dummyHead.next;
	}
}