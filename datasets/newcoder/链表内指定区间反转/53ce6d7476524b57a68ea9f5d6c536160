class Solution {
	ListNode reverseBetween(ListNode head, int left, int right) {
		if (head == null || head.next == null || left > right || left == right) {
			return head;
		}
		ListNode resNode = new ListNode(-1);
		resNode.next = head;
		ListNode prev = resNode;
		int step = left - 1;
		for (int i = 0; i < left - 1; i++) {
			prev = prev.next;
		}
		ListNode rightNode = prev;
		for (int i = 0; i < right - left + 1; i++) {
			rightNode = rightNode.next;
		}
		ListNode leftNode = prev.next;
		ListNode rightNext = rightNode.next;
		prev.next = null;
		rightNode.next = null;
		reverseLinkList(leftNode);
		prev.next = rightNode;
		leftNode.next = rightNext;
		return resNode.next;
	}
	void reverseLinkList(ListNode head) {
		ListNode curr = head;
		ListNode prev = null, next = null;
		while (curr != null) {
			next = curr.next;
			curr.next = prev;
			prev = curr;
			curr = next;
		}
	}
}