class Solution {
	int findParent(int p, int[] parent) {
		if (parent[p] == -1) {
			return p;
		}
		return findParent(parent[p],parent);
	}
	boolean validateBinaryTreeNodes(int n, int[] leftChild, int[] rightChild) {
		int[] parent = new int[n];
		for (int i = 0; i < n; i++) {
			parent[i] = -1;
		}
		for (int i = 0; i < n; i++) {
			int left = leftChild[i];
			int right = rightChild[i];
			if (left != -1) {
				if (parent[left] != -1) {
					return false;
				}
				parent[left] = findParent(i,parent);
				if (parent[i] == left) {
					return false;
				}
			}
			if (right != -1) {
				if (parent[right] != -1) {
					return false;
				}
				parent[right] = findParent(i,parent);
				if (parent[i] == right) {
					return false;
				}
			}
		}
		int rootCount = 0;
		for (int i = 0; i < parent.length; i++) {
			if (parent[i] == -1) {
				rootCount++;
			}
		}
		return rootCount == 1;
	}
}