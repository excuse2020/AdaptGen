class Solution {
	List<List<Integer>> ans = new ArrayList<>();
	void helper(int[] nums, int idx) {
		if (idx == nums.length) {
			ArrayList<Integer> ls = new ArrayList<>();
			for (int a: nums) {	
				ls.add(a);
			}
			ans.add(ls);
			return;
		}
		HashSet<Integer> set = new HashSet<>();
		for (int i = idx; i < nums.length; i++) {
			if (set.contains(nums[i])) {
				continue;
			}
			set.add(nums[i]);
			swap(nums,i,idx);
			helper(nums,idx + 1);
			swap(nums,i,idx);
		}
	}
	List<List<Integer>> permuteUnique(int[] nums) {
		helper(nums,0);
		return ans;
	}
	void swap(int[] nums, int a, int b) {
		int temp = nums[a];
		nums[a] = nums[b];
		nums[b] = temp;
	}
}