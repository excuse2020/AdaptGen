class Solution {
	int captureForts(int[] forts) {
		boolean canConquerForward = false;
		boolean canConquerBackward = false;
		int forwardConquered = 0;
		int backwardConquered = 0;
		int maxFortsConquered = 0;
		int i = 0;
		int j = forts.length - 1;
		while (i < forts.length) {
			if (!canConquerForward && forts[i] == 1) {
				canConquerForward = true;
			}
			if (canConquerForward) {
				if (forts[i] == 1) {
					forwardConquered = 0;
				} 
				else if (forts[i] == 0) {
					forwardConquered++;
				} 
				else if (forts[i] == -1) {
					maxFortsConquered = Math.max(maxFortsConquered,forwardConquered);
					forwardConquered = 0;
					canConquerForward = false;
				}
			}
			if (!canConquerBackward && forts[j] == 1) {
				canConquerBackward = true;
			}
			if (canConquerBackward) {
				if (forts[j] == 1) {
					backwardConquered = 0;
				} 
				else if (forts[j] == 0) {
					backwardConquered++;
				} 
				else if (forts[j] == -1) {
					maxFortsConquered = Math.max(maxFortsConquered,backwardConquered);
					backwardConquered = 0;
					canConquerBackward = false;
				}
			}
			i++;
			j--;
		}
		return maxFortsConquered;
	}
}