class Solution {
	List<List<Integer>> ans = new ArrayList<>();
	List<List<Integer>> combinationSum(int[] candidates, int target) {
		helper(candidates,target,0,new ArrayList<>(),0);
		return ans;
	}
	void helper(int[] candidates, int target, int currSum, ArrayList<Integer> currPath, int start) {
		if (currSum > target) {
			return;
		}
		if (currSum == target) {
			ans.add(new ArrayList<>(currPath));
			return;
		}
		for (int i = start; i < candidates.length; i++) {
			currPath.add(candidates[i]);
			helper(candidates,target,currSum + candidates[i],currPath,i);
			currPath.remove(currPath.size() - 1);
		}
	}
}