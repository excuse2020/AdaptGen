class Solution {
	int res = 0;
	void backtrack(int[] nums, int target, List<Integer> list) {
		if (list.size() > 0 && target == 0) {
			res++;
			return;
		}
		for (int i = 0; i < nums.length; i++) {
			if (target - nums[i] < 0) {
				break;
			}
			target -= nums[i];
			list.add(nums[i]);
			backtrack(nums,target,list);
			target += nums[i];
			list.remove(list.size() - 1);
		}
	}
	int combination(int[] nums, int target) {
		if (nums == null || nums.length < 1) {
			return 0;
		}
		Arrays.sort(nums);
		backtrack(nums,target,new ArrayList<>());
		return res;
	}
}