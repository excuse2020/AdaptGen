class Solution {
	int dfs(int idx, int[] left, int[] right, Integer[] memo) {
		if (idx == -1) {
			return 0;
		}
		if (memo[idx] != null) {
			return memo[idx];
		}
		return memo[idx] = Math.max(dfs(left[idx],left,right,memo),dfs(right[idx],left,right,memo)) + 1;
	}
	int maxJumps(int[] arr, int d) {
		int n = arr.length;
		int[] right = new int[n];
		int[] left = new int[n];
		Arrays.fill(right,-1);
		Arrays.fill(left,-1);
		Deque<Integer> rStack = new ArrayDeque<>();
		Deque<Integer> lStack = new ArrayDeque<>();
		for (int i = 0, j = n - 1; i < n; i++, j--) {
			while (!rStack.isEmpty() && i - rStack.peekLast() > d) {
				rStack.pollLast();
			}
			while (!lStack.isEmpty() && lStack.peekLast() - j > d) {
				lStack.pollLast();
			}
			while (!rStack.isEmpty() && arr[i] > arr[rStack.peek()]) {
				right[rStack.pop()] = i;
			}
			while (!lStack.isEmpty() && arr[j] > arr[lStack.peek()]) {
				left[lStack.pop()] = j;
			}
			rStack.push(i);
			lStack.push(j);
		}
		int ans = 0;
		Integer[] memo = new Integer[n];
		for (int i = 0; i < n; i++) {
			ans = Math.max(ans,dfs(i,left,right,memo));
		}
		return ans;
	}
}