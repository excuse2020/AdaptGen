class Solution {
	long maximumSumOfHeights(List<Integer> maxHeights) {
		int len = maxHeights.size();
		long[] prefix = new long[len];
		Deque<Integer> stack = new ArrayDeque<>();
		for (int index = 0; index < len; index++) {
			while (!stack.isEmpty() && maxHeights.get(stack.peek()) >= maxHeights.get(index)) {
				stack.pop();
			}
			int prevSmall = stack.isEmpty() ? -1 : stack.peek();
			prefix[index] = (long) (index - prevSmall) * (long) maxHeights.get(index);
			if (prevSmall >= 0) {
				prefix[index] += prefix[prevSmall];
			}
			stack.push(index);
		}
		long max = 0;
		stack.clear();
		for (int index = len - 1; index >= 0; index--) {
			while (!stack.isEmpty() && maxHeights.get(stack.peek()) >= maxHeights.get(index)) {
				stack.pop();
			}
			int nextSmall = stack.isEmpty() ? len : stack.peek();
			long val = prefix[index];
			prefix[index] = (long) (nextSmall - index) * (long) maxHeights.get(index);
			if (nextSmall < len) {
				prefix[index] += prefix[nextSmall];
			}
			max = Math.max(max,prefix[index] + val - maxHeights.get(index));
			stack.push(index);
		}
		return max;
	}
}