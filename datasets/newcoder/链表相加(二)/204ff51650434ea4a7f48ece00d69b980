class Solution {
	ListNode addInList(ListNode head1, ListNode head2) {
		ListNode l1 = reverse(head1);
		ListNode l2 = reverse(head2);
		ListNode result = null;
		int flag = 0;
		int i = 0;
		while (l1 != null && l2 != null) {
			ListNode temp = new ListNode((l1.val + l2.val) % 10);
			flag = (l1.val + l2.val) / 10;
			temp.next = result;
			result = temp;
			l1 = l1.next;
			l2 = l2.next;
			System.out.print(++i);
			System.out.println(result.val);
		}
		if (l2 == null) {
			while (l1 != null) {
				ListNode temp = new ListNode((l1.val + flag) % 10);
				flag = (l1.val + flag) / 10;
				temp.next = result;
				result = temp;
				l1 = l1.next;
			}
		}
		if (l1 == null) {
			while (l2 != null) {
				ListNode temp = new ListNode((l2.val + flag) % 10);
				flag = (l2.val + flag) / 10;
				temp.next = result;
				result = temp;
				l2 = l2.next;
			}
		}
		if (flag == 1) {
			ListNode temp = new ListNode(flag);
			temp.next = result;
			result = temp;
		}
		return result;
	}
	ListNode reverse(ListNode head) {
		ListNode q = null;
		ListNode p = head;
		while (p != null) {
			ListNode Temp = p.next;
			p.next = q;
			q = p;
			p = Temp;
		}
		return q;
	}
}