class Solution {
	int getDepth(TreeNode root) {
		if (root == null) {
			return 0;
		}
		return Math.max(getDepth(root.left),getDepth(root.right)) + 1;
	}
	TreeNode helper(TreeNode root, int depth, int currDepth) {
		if (root == null) {
			return null;
		}
		if (currDepth == depth) {
			return root;
		}
		TreeNode left = helper(root.left,depth,currDepth + 1);
		TreeNode right = helper(root.right,depth,currDepth + 1);
		if (left == null) {
			return right;
		}
		if (right == null) {
			return left;
		}
		return root;
	}
	TreeNode lcaDeepestLeaves(TreeNode root) {
		return helper(root,getDepth(root),1);
	}
}