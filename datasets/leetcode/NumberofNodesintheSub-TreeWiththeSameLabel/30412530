class Solution {
	int[] countSubTrees(int n, int[][] edges, String labels) {
		List<List<Integer>> graph = new ArrayList<List<Integer>>();
		for (int i = 0; i < n; i++) {
			graph.add(new ArrayList<Integer>());
		}
		for (int[] edge: edges) {	
			graph.get(edge[0]).add(edge[1]);
			graph.get(edge[1]).add(edge[0]);
		}
		int[] ans = new int[n];
		int[] visited = new int[n];
		find(0,graph,ans,labels,visited);
		return ans;
	}
	int[] find(int node, List<List<Integer>> graph, int[] ans, String labels, int[] visited) {
		int[] curr = new int[26];
		visited[node] = 1;
		for (int i: graph.get(node)) {	
			if (visited[i] == 0) {
				int[] contains = find(i,graph,ans,labels,visited);
				for (int ind = 0; ind < 26; ind++) {
					curr[ind] += contains[ind];
				}
			}
		}
	}
}