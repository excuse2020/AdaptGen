class Solution {
	ListNode merge(ListNode head1, ListNode head2) {
		ListNode dummy = new ListNode(0);
		ListNode current = dummy;
		while (head1 != null && head2 != null) {
			if (head1.val <= head2.val) {
				current.next = head1;
				head1 = head1.next;
			} 
			else {
				current.next = head2;
				head2 = head2.next;
			}
			current = current.next;
		}
		if (head1 != null) {
			current.next = head1;
		} 
		else {
			current.next = head2;
		}
		return dummy.next;
	}
	ListNode middle(ListNode head) {
		if (head == null || head.next == null) {
			return head;
		}
		ListNode slow = head;
		ListNode fast = head.next;
		while (fast != null && fast.next != null) {
			slow = slow.next;
			fast = fast.next.next;
		}
		return slow;
	}
	ListNode sortList(ListNode head) {
		if (head == null || head.next == null) {
			return head;
		}
		ListNode mid = middle(head);
		ListNode right = mid.next;
		mid.next = null;
		ListNode left = sortList(head);
		right = sortList(right);
		return merge(left,right);
	}
}