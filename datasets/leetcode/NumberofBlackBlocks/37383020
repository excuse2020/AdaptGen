class Solution {
	long[] countBlackBlocks(int m, int n, int[][] coordinates) {
		long[] result = new long[5];
		Map<Pair<Integer, Integer>, Integer> map = new HashMap<>();
		for (int i = 0; i < coordinates.length; i++) {
			int[] coordinate = coordinates[i];
			int x = coordinate[0];
			int y = coordinate[1];
			if (x - 1 >= 0 && y - 1 >= 0) {
				Pair p = new Pair(x - 1, y - 1);
				map.put(p,map.getOrDefault(p,0) + 1);
			}
			if (x + 1 < m && y - 1 >= 0) {
				Pair p = new Pair(x, y - 1);
				map.put(p,map.getOrDefault(p,0) + 1);
			}
			if (x - 1 >= 0 && y + 1 < n) {
				Pair p = new Pair(x - 1, y);
				map.put(p,map.getOrDefault(p,0) + 1);
			}
			if (x + 1 < m && y + 1 < n) {
				Pair p = new Pair(x, y);
				map.put(p,map.getOrDefault(p,0) + 1);
			}
		}
		long total = (long) (m - 1) * (long) (n - 1);
		for (Map.Entry<Pair<Integer, Integer>, Integer> entry: map.entrySet()) {	
			result[entry.getValue()]++;
		}
		result[0] = total - map.size();
		return result;
	}
}