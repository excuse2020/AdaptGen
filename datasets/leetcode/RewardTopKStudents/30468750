class Solution {
	HashSet<String> makefeedback(String[] array) {
		HashSet<String> set = new HashSet<>();
		for (String word: array) {	
			set.add(word);
		}
		return set;
	}
	List<Integer> topStudents(String[] positive_feedback, String[] negative_feedback, String[] report, int[] student_id, int k) {
		Set<String> positive = makefeedback(positive_feedback);
		Set<String> negative = makefeedback(negative_feedback);
		PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> {a[1] == b[1] ? a[0] - b[0] : b[1] - a[1]});
		List<Integer> ans = new ArrayList<>();
		for (int i = 0; i < report.length; i++) {
			int points = 0;
			for (String word: report[i].split(" ")) {	
				if (positive.contains(word)) {
					points += 3;
				}
				if (negative.contains(word)) {
					points -= 1;
				}
			}
			pq.add(new int{student_id[i], points});
		}
		while (k-- > 0) {
			ans.add(pq.peek()[0]);
			pq.remove();
		}
		return ans;
	}
}