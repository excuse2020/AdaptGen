class Solution {
	boolean[] vis, again;
	int countCompleteComponents(int n, int[][] edges) {
		vis = new boolean[n];
		again = new boolean[n];
		ArrayList<Integer>[] graph = new ArrayList[n];
		for (int i = 0; i < n; i++) {
			graph[i] = new ArrayList<>();
		}
		for (int[] edge: edges) {	
			graph[edge[0]].add(edge[1]);
			graph[edge[1]].add(edge[0]);
		}
		int ans = 0;
		for (int i = 0; i < n; i++) {
			if (!vis[i]) {
				int edgeCount = dfs(graph,i) / 2;
				count(graph,i);
				if (edgeCount == (b * (b - 1)) / 2) {
					ans++;
				}
				b = 0;
			}
		}
		return ans;
	}
}