class Solution {
	List<TreeNode> allPossibleFBT(int n) {
		if (n % 2 == 0) {
			return new ArrayList<TreeNode>();
		}
		List<List<TreeNode>> dp = new ArrayList<List<TreeNode>>();
		for (int i = 0; i <= n; i++) {
			dp.add(new ArrayList<TreeNode>());
		}
		dp.get(1).add(new TreeNode(0));
		for (int count = 3; count <= n; count += 2) {
			for (int i = 1; i < count; i += 2) {
				for (TreeNode left: dp.get(i)) {	
					for (TreeNode right: dp.get(count - i)) {	
						TreeNode root = new TreeNode(0);
						root.left = left;
						root.right = right;
						dp.get(count).add(root);
					}
				}
			}
		}
		return dp.get(n);
	}
}