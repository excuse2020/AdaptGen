class Solution {
	void helper(TreeNode node, int currDepth, List<Integer> sumOfLevels) {
		if (node == null) {
			return;
		}
		if (sumOfLevels.size() >= currDepth + 1) {
			sumOfLevels.set(currDepth,sumOfLevels.get(currDepth) + node.val);
		} 
		else {
			sumOfLevels.add(node.val);
		}
		helper(node.left,currDepth + 1,sumOfLevels);
		helper(node.right,currDepth + 1,sumOfLevels);
	}
	int maxLevelSum(TreeNode root) {
		List<Integer> list = new ArrayList<>();
		helper(root,0,list);
		int max = Integer.MIN_VALUE;
		int answer = 0;
		for (int i = 0; i < list.size(); i++) {
			if (max < list.get(i)) {
				max = list.get(i);
				answer = i + 1;
			}
		}
		return answer;
	}
}