class Solution {
	int dfs(int[] prefixSum, int[][] memo, int i, int n) {
		if (i == n) {
			return 0;
		}
		if (i > n) {
			return 0;
		}
		if (memo[i][3] != -100000000) {
			return memo[i][3];
		}
		int max = -1000000000;
		for (int x = 1; x <= 3; x++) {
			int temp = prefixSum[i] - dfs(prefixSum,memo,i + x,n);
			memo[i][x] = temp;
			if (temp > max) {
				max = temp;
			}
		}
		return memo[i][3] = max;
	}
	String stoneGameIII(int[] stoneValue) {
		int n = stoneValue.length;
		int[] prefixSum = new int[n];
		prefixSum[n - 1] = stoneValue[n - 1];
		for (int i = n - 2; i >= 0; i--) {
			prefixSum[i] = prefixSum[i + 1] + stoneValue[i];
		}
		int[][] memo = new int[n][4];
		for (int[] row: memo) {	
			Arrays.fill(row,-100000000);
		}
		int maxAlice = dfs(prefixSum,memo,0,n);
		int aliceIndex = -1;
		for (int i = 1; i <= 3; i++) {
			if (memo[0][i] == maxAlice) {
				aliceIndex = i;
				break;
			}
		}
		int maxBob = 0;
		if (aliceIndex >= n) {
			maxBob = 0;
		} 
		else {
			maxBob = memo[aliceIndex][3];
		}
		if (maxAlice == maxBob) {
			return "Tie";
		}
		return maxAlice > maxBob ? "Alice" : "Bob";
	}
}