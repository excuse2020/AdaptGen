class Solution {
	int dfs(List<List<Integer>> tree, List<Boolean> hasApple, int u, int pre) {
		int time = 0;
		for (Integer v: tree.get(u)) {	
			if (v != pre) {
				time += dfs(tree,hasApple,v,u);
			}
		}
		if (u != 0 && (time != 0 || hasApple.get(u))) {
			return time + 2;
		}
		return time;
	}
	int minTime(int n, int[][] edges, List<Boolean> hasApple) {
		List<List<Integer>> adjList = new ArrayList<>(n);
		for (int i = 0; i < n; i++) {
			adjList.add(new LinkedList<>());
		}
		for (int i = 0; i < edges.length; i++) {
			int a = edges[i][0];
			int b = edges[i][1];
			adjList.get(a).add(b);
			adjList.get(b).add(a);
		}
		return dfs(adjList,hasApple,0,-1);
	}
}