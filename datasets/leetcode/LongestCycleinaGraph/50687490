class Solution {
	int ans = -1;
	void dfs(int node, List<Integer>[] g, boolean[] vis, boolean[] pathVis, int[] dis, int d) {
		vis[node] = true;
		pathVis[node] = true;
		dis[node] = d;
		for (int ad: g[node]) {	
			if (!vis[ad]) {
				dfs(ad,g,vis,pathVis,dis,d + 1);
			} 
			else if (pathVis[ad]) {
				ans = Math.max(ans,Math.abs(dis[node] - dis[ad]) + 1);
			}
		}
		pathVis[node] = false;
	}
	int longestCycle(int[] edges) {
		int n = edges.length;
		List<Integer>[] g = new ArrayList[n];
		for (int i = 0; i < n; i++) {
			g[i] = new ArrayList<>();
		}
		for (int i = 0; i < n; i++) {
			if (edges[i] == -1) {
				continue;
			}
			g[i].add(edges[i]);
		}
		boolean[] vis = new boolean[n];
		boolean[] pathVis = new boolean[n];
		int[] dis = new int[n];
		for (int i = 0; i < n; i++) {
			if (!vis[i]) {
				dfs(i,g,vis,pathVis,dis,0);
			}
		}
		return ans;
	}
}