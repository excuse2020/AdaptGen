class Solution {
	int mod = 1000000007;
	long DFS(int i, int j, int[][] grid, long[][] DP) {
		if (DP[i][j] != 0) {
			return DP[i][j];
		}
		long ans = 0;
		if (i - 1 >= 0 && grid[i - 1][j] > grid[i][j]) {
			ans = (ans + DFS(i - 1,j,grid,DP)) % mod;
		}
		if (j - 1 >= 0 && grid[i][j - 1] > grid[i][j]) {
			ans = (ans + DFS(i,j - 1,grid,DP)) % mod;
		}
		if (i + 1 < grid.length && grid[i + 1][j] > grid[i][j]) {
			ans = (ans + DFS(i + 1,j,grid,DP)) % mod;
		}
		if (j + 1 < grid[0].length && grid[i][j + 1] > grid[i][j]) {
			ans = (ans + DFS(i,j + 1,grid,DP)) % mod;
		}
		return DP[i][j] = ans + 1;
	}
	int countPaths(int[][] grid) {
		int n = grid.length;
		int m = grid[0].length;
		long[][] DP = new long[n][m];
		long ans = 0;
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < m; j++) {
				ans = (ans + DFS(i,j,grid,DP)) % mod;
			}
		}
		return (int) ans;
	}
}