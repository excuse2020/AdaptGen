class Solution {
	int find(int node, int[] parent) {
		while (parent[node] >= 0 && parent[node] != node) {
			node = parent[node];
		}
		return node;
	}
	String smallestStringWithSwaps(String s, List<List<Integer>> pairs) {
		int[] parent = new int[s.length()];
		Arrays.fill(parent,-1);
		for (int i = 0; i < pairs.size(); i++) {
			int u = pairs.get(i).get(0);
			int v = pairs.get(i).get(1);
			u = find(u,parent);
			v = find(v,parent);
			if (u != v) {
				if (parent[u] > parent[v]) {
					parent[v] += parent[u];
					parent[u] = v;
				} 
				else {
					parent[u] += parent[v];
					parent[v] = u;
				}
			}
		}
		Map<Integer, PriorityQueue<Character>> map = new HashMap<Integer, PriorityQueue<Character>>();
		for (int i = 0; i < parent.length; i++) {
			if (parent[i] < 0) {
				map.put(i,new PriorityQueue<Character>());
			}
		}
		PriorityQueue<Character> pq;
		for (int i = 0; i < parent.length; i++) {
			int u = find(i,parent);
			parent[i] = u;
			pq = map.get(u);
			pq.offer(s.charAt(i));
		}
		StringBuilder st = new StringBuilder();
		for (int i = 0; i < parent.length; i++) {
			int u = parent[i];
			pq = map.get(u);
			st.append(pq.poll());
		}
		return st.toString();
	}
}