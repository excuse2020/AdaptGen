class Solution {
	int dfs(int i, int j, int[][] grid, int count) {
		if (i < 0 || j < 0 || i >= grid.length || j >= grid[0].length || grid[i][j] == 0) {
			return 0;
		}
		count = grid[i][j];
		grid[i][j] = 0;
		count += dfs(i + 1,j,grid,count) + dfs(i - 1,j,grid,count);
		return count;
	}
	int findMaxFish(int[][] grid) {
		int max = 0;
		int m = grid.length;
		int n = grid[0].length;
		boolean[][] vis = new boolean[m][n];
		for (int i = 0; i < m; i++) {
			for (int j = 0; j < n; j++) {
				if (grid[i][j] != 0) {
					max = Math.max(max,dfs(i,j,grid,0));
				}
			}
		}
		return max;
	}
}