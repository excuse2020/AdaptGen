class Solution {
	ListNode convertarr2LL(int[] arr) {
		ListNode head = new ListNode(arr[0]);
		ListNode mover = head;
		for (int i = 1; i < arr.length; i++) {
			ListNode temp = new ListNode(arr[i]);
			mover.next = temp;
			mover = mover.next;
		}
		return head;
	}
	int[] listNodeToArray(ListNode head) {
		int length = 0;
		ListNode current = head;
		while (current != null) {
			length++;
			current = current.next;
		}
		int[] array = new int[length];
		current = head;
		int index = 0;
		while (current != null) {
			array[index++] = current.val;
			current = current.next;
		}
		return array;
	}
	ListNode mergeNodes(ListNode head) {
		int[] nums = listNodeToArray(head);
		ArrayList<Integer> arr2 = new ArrayList<Integer>();
		for (int i = 0; i < nums.length; ) {
			if (nums[i] == 0) {
				int j = i + 1;
				int sum = 0;
				while (j < nums.length && nums[j] != 0) {
					sum += nums[j];
					j++;
				}
				if (j < nums.length && nums[j] == 0) {
					arr2.add(sum);
				}
				i = j;
			} 
			else {
				i++;
			}
		}
		int[] result = new int[arr2.size()];
		for (int k = 0; k < arr2.size(); k++) {
			result[k] = arr2.get(k);
		}
		ListNode head1 = convertarr2LL(result);
		return head1;
	}
	int sumbetindex(int i, int j, int[] arr) {
		int sum = 0;
		for (int k = i + 1; k < j; k++) {
			sum += arr[k];
		}
		return sum;
	}
}