class Solution {
	int helper(int x) {
		int sum = 0;
		while (x > 0) {
			sum += x % 10;
			x = x / 10;
		}
		return sum;
	}
	int maximumSum(int[] nums) {
		PriorityQueue<Integer> pq = new PriorityQueue<>(Collections.reverseOrder());
		pq.add(-1);
		HashMap<Integer, Integer> h = new HashMap<>();
		for (int i = 0; i < nums.length; i++) {
			int t = helper(nums[i]);
			if (!h.containsKey(t)) {
				h.put(t,nums[i]);
			} 
			else {
				int ans = 0;
				int x = h.get(t);
				ans += x;
				ans += nums[i];
				pq.add(ans);
				h.put(t,Math.max(nums[i],x));
			}
		}
		return pq.poll();
	}
}