class Solution {
	ArrayList<ArrayList<Integer>> h = new ArrayList<>();
	void dg(int[] num, ArrayList<Integer> a, boolean[] now) {
		if (a.size() == num.length) {
			if (h.contains(a)) {
				return;
			} 
			else {
				h.add(new ArrayList<>(a));
				return;
			}
		}
		for (int i = 0; i < num.length; i++) {
			if (now[i] == true) {
				continue;
			}
			now[i] = true;
			a.add(num[i]);
			dg(num,a,now);
			a.remove(a.size() - 1);
			now[i] = false;
		}
	}
	ArrayList<ArrayList<Integer>> permuteUnique(int[] num) {
		Arrays.sort(num);
		ArrayList<Integer> a = new ArrayList<>();
		boolean[] now = new boolean[num.length];
		dg(num,a,now);
		return h;
	}
}