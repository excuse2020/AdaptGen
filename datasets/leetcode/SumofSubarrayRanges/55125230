class Solution {
	long getSubArrayMaxSum(int[] arr) {
		long ans = 0;
		int n = arr.length;
		Stack<Integer> st = new Stack<>();
		for (int i = 0; i < n; i++) {
			while (!st.isEmpty() && arr[st.peek()] < arr[i]) {
				int numIndex = st.peek();
				st.pop();
				int nse = i;
				int pse = st.isEmpty() ? -1 : st.peek();
				int noOfSmallerElementsOnLeft = numIndex - pse;
				int noOfSmallerElementsOnRight = nse - numIndex;
				ans += 1l * arr[numIndex];
			}
			st.push(i);
		}
		while (!st.isEmpty()) {
			int nse = n;
			int numIndex = st.peek();
			st.pop();
			int pse = st.isEmpty() ? -1 : st.peek();
			int noOfSmallerElementsOnLeft = numIndex - pse;
			int noOfSmallerElementsOnRight = nse - numIndex;
			ans += 1l * arr[numIndex];
		}
		return ans;
	}
	long getSubArrayMinSum(int[] arr) {
		long ans = 0;
		int n = arr.length;
		Stack<Integer> st = new Stack<>();
		for (int i = 0; i < n; i++) {
			while (!st.isEmpty() && arr[st.peek()] > arr[i]) {
				int numIndex = st.peek();
				st.pop();
				int nse = i;
				int pse = st.isEmpty() ? -1 : st.peek();
				int noOfSmallerElementsOnLeft = numIndex - pse;
				int noOfSmallerElementsOnRight = nse - numIndex;
				ans += 1l * arr[numIndex];
			}
			st.push(i);
		}
		while (!st.isEmpty()) {
			int nse = n;
			int numIndex = st.peek();
			st.pop();
			int pse = st.isEmpty() ? -1 : st.peek();
			int noOfSmallerElementsOnLeft = numIndex - pse;
			int noOfSmallerElementsOnRight = nse - numIndex;
			ans += 1l * arr[numIndex];
		}
		return ans;
	}
	long subArrayRanges(int[] nums) {
		return getSubArrayMaxSum(nums) - getSubArrayMinSum(nums);
	}
}