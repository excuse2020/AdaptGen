class Solution {
	int n;
	ArrayList<Integer> path = new ArrayList<>();
	ArrayList<ArrayList<Integer>> res = new ArrayList<>();
	boolean[] used = new boolean[n];
	void dfs(int start, int k, int[] nums) {
		if (k == 0) {
			res.add(new ArrayList<>(path));
			return;
		}
		for (int i = start; i < n; i++) {
			if (i > start && nums[i - 1] == nums[i]) {
				continue;
			}
			path.add(nums[i]);
			dfs(i + 1,k - 1,nums);
			path.remove(path.size() - 1);
		}
	}
	ArrayList<ArrayList<Integer>> subsets(int[] nums) {
		Arrays.sort(nums);
		n = nums.length;
		for (int i = 0; i <= n; i++) {
			dfs(0,i,nums);
		}
		res.sort(new Comparator());
		return res;
	}
}