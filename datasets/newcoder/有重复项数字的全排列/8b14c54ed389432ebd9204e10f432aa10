class Solution {
	ArrayList<ArrayList<Integer>> res = new ArrayList<>();
	ArrayList<ArrayList<Integer>> permuteUnique(int[] num) {
		ArrayList<Integer> list = new ArrayList<>();
		sort(num);
		solve(list,num);
		for (int i = 0; i < res.size(); i++) {
			for (int j = i + 1; j < res.size(); j++) {
				if (res.get(i).equals(res.get(j)) == true) {
					res.remove(j--);
					continue;
				}
			}
		}
		return res;
	}
	void solve(ArrayList<Integer> list, int[] num) {
		if (list.size() == num.length) {
			res.add(new ArrayList<>(list));
			return;
		}
		for (int i = 0; i < num.length; i++) {
			if (num[i] == -3) {
				continue;
			}
			list.add(num[i]);
			int nums = num[i];
			num[i] = -3;
			solve(list,num);
			list.remove(list.size() - 1);
			num[i] = nums;
		}
	}
	void sort(int[] a) {
		int temp;
		for (int i = 0; i < a.length; i++) {
			for (int j = 0; j < a.length - i; j++) {
				if (a[j] > a[j + 1]) {
					temp = a[j];
					a[j] = a[j + 1];
					a[j + 1] = temp;
				}
			}
		}
	}
}