class Solution {
	int maxPath = 0;
	int DFS(int node, List<List<Integer>> graph, String s) {
		int max1 = 0, max2 = 0;
		for (int neighbour: graph.get(node)) {	
			int neighbourResp = DFS(neighbour,graph,s);
			if (s.charAt(node) == s.charAt(neighbour)) {
				continue;
			}
			if (neighbourResp > max1) {
				max2 = max1;
				max1 = neighbourResp;
			} 
			else if (neighbourResp > max2) {
				max2 = neighbourResp;
			}
		}
		maxPath = Math.max(maxPath,1 + max1);
		return 1 + max1;
	}
	int longestPath(int[] parent, String s) {
		int n = parent.length;
		List<List<Integer>> graph = new ArrayList<>();
		for (int i = 0; i < n; i++) {
			graph.add(new ArrayList<>());
		}
		for (int i = 1; i < n; i++) {
			graph.get(parent[i]).add(i);
		}
		DFS(0,graph,s);
		return maxPath;
	}
}