class Solution {
	boolean Valid(String str1, String str2) {
		if (str1.length() == 0) {
			return true;
		}
		if (str2.length() - str1.length() != 1) {
			return false;
		}
		int count = 0;
		int i = 0;
		int j = 0;
		while (i < str1.length() && j < str2.length()) {
			if (str1.charAt(i) == str2.charAt(j)) {
				i++;
				j++;
			} 
			else {
				if (count == 0) {
					count++;
					j++;
				} 
				else {
					return false;
				}
			}
		}
		return true;
	}
	int longestStrChain(String[] words) {
		Arrays.sort(words,(a, b) -> {Integer.compare(a.length(),b.length())});
		int dp = new int[words.length];
		dp[0] = 1;
		int max = 1;
		for (int i = 1; i < words.length; i++) {
			dp[i] = 1;
			for (int j = 0; j < i; j++) {
				if (Valid(words[j],words[i])) {
					dp[i] = Math.max(dp[i],dp[j] + 1);
				}
			}
			max = Math.max(dp[i],max);
		}
		return max;
	}
}