class Solution {
	boolean validateBinaryTreeNodes(int n, int[] leftChild, int[] rightChild) {
		if (n == 1) {
			return true;
		}
		int[] parents = new int[n];
		for (int i = 0; i < n; i++) {
			if (leftChild[i] != -1) {
				if (parents[leftChild[i]] > 0) {
					return false;
				}
				parents[leftChild[i]]++;
			}
			if (rightChild[i] != -1) {
				if (parents[rightChild[i]] > 0) {
					return false;
				}
				parents[rightChild[i]]++;
			}
		}
		int root = -1;
		for (int i = 0; i < n; i++) {
			if (parents[i] == 0) {
				if (root != -1) {
					return false;
				}
				root = i;
			}
		}
		if (root == -1) {
			return false;
		}
		Queue<Integer> q = new LinkedList<>();
		HashSet<Integer> visit = new HashSet<>();
		q.add(root);
		visit.add(root);
		while (!q.isEmpty()) {
			int size = q.size();
			for (int i = 0; i < size; i++) {
				int cur = q.poll();
				if (leftChild[cur] != -1) {
					if (visit.contains(leftChild[cur])) {
						return false;
					}
					q.add(leftChild[cur]);
					visit.add(leftChild[cur]);
				}
				if (rightChild[cur] != -1) {
					if (visit.contains(rightChild[cur])) {
						return false;
					}
					q.add(rightChild[cur]);
					visit.add(rightChild[cur]);
				}
			}
		}
		return visit.size() == n;
	}
}