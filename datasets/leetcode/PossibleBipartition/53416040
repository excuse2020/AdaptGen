class Solution {
	boolean possibleBipartition(int n, int[][] dislikes) {
		List<Integer> graph = new List[n + 1];
		for (int i = 1; i <= n; i++) {
			graph[i] = new ArrayList<>();
		}
		for (int[] dislike: dislikes) {	
			graph[dislike[0]].add(dislike[1]);
			graph[dislike[1]].add(dislike[0]);
		}
		int colors = new int[n + 1];
		for (int i = 1; i <= n; i++) {
			if (colors[i] == 0 && !validColor(graph,colors,i,1)) {
				return false;
			}
		}
		return true;
	}
	boolean validColor(List<Integer> graph, int colors, int node, int color) {
		if (colors[node] != 0) {
			return colors[node] == color;
		}
		colors[node] = color;
		for (int neighbor: graph[node]) {	
			if (!validColor(graph,colors,neighbor,-color)) {
				return false;
			}
		}
		return true;
	}
}