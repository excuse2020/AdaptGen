class Solution {
	char findRoot(Map<Character, Character> hm, char c) {
		if (!hm.containsKey(c)) {
			hm.put(c,c);
			return c;
		}
		while (hm.get(c) != c) {
			c = hm.get(c);
		}
		return c;
	}
	String smallestEquivalentString(String s1, String s2, String baseStr) {
		Map<Character, Character> hm = new HashMap<>();
		int n = s1.length();
		for (int i = 0; i < n; i++) {
			char c1 = s1.charAt(i);
			char c2 = s2.charAt(i);
			char root1 = findRoot(hm,c1);
			char root2 = findRoot(hm,c2);
			char minRoot = root1 <= root2 ? root1 : root2;
			hm.put(root1,minRoot);
			hm.put(root2,minRoot);
		}
		StringBuilder sb = new StringBuilder();
		for (int i = 0; i < baseStr.length(); i++) {
			char c = findRoot(hm,baseStr.charAt(i));
			sb.append(c);
		}
		return sb.toString();
	}
}