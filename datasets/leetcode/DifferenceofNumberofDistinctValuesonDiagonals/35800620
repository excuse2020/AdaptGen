class Solution {
	int[][] differenceOfDistinctValues(int[][] grid) {
		int n = grid.length;
		int m = grid[0].length;
		int[][] bottom = new int[n];
		int[][] up = new int[n];
		for (int i = 0; i < n; i++) {
			bottom[i] = new int[m];
			up[i] = new int[m];
		}
		HashMap<Integer, HashSet<Integer>> map = new HashMap<>();
		for (int i = n - 2; i >= 0; i--) {
			for (int j = m - 1; j >= 0; j--) {
				if (i + 1 < n && j + 1 < m) {
					int key = i - j;
					if (!map.containsKey(key)) {
						map.put(key,new HashSet<Integer>());
					}
					map.get(key).add(grid[i + 1][j + 1]);
					bottom[i][j] = map.get(key).size();
				}
			}
		}
		map.clear();
		for (int i = 1; i < n; i++) {
			for (int j = 0; j < m; j++) {
				if (i - 1 >= 0 && j - 1 >= 0) {
					int key = i - j;
					if (!map.containsKey(key)) {
						map.put(key,new HashSet<Integer>());
					}
					map.get(key).add(grid[i - 1][j - 1]);
					up[i][j] = map.get(key).size();
				}
				bottom[i][j] = Math.abs(bottom[i][j] - up[i][j]);
			}
		}
		return bottom;
	}
}