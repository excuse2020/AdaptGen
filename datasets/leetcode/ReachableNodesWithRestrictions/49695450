class Solution {
	int[] id;
	int[] sz;
	int find(int p) {
		int root = p;
		while (root != id[root]) {
			root = id[root];
		}
		while (p != root) {
			int next = id[p];
			id[p] = root;
			p = next;
		}
		return root;
	}
	int reachableNodes(int n, int[][] edges, int[] restricted) {
		id = new int[n];
		sz = new int[n];
		for (int i = 0; i < n; i++) {
			id[i] = i;
			sz[i] = 1;
		}
		boolean[] isRestricted = new boolean[n + 1];
		for (int restriction: restricted) {	
			isRestricted[restriction] = true;
		}
		for (int[] edge: edges) {	
			if (isRestricted[edge[0]] || isRestricted[edge[1]]) {
				continue;
			}
			union(edge[0],edge[1]);
		}
		return sz[find(0)];
	}
	void union(int p, int q) {
		int pRoot = find(p);
		int qRoot = find(q);
		if (pRoot == qRoot) {
			return;
		}
		if (sz[pRoot] < sz[qRoot]) {
			id[pRoot] = qRoot;
			sz[qRoot] += sz[pRoot];
		} 
		else {
			id[qRoot] = pRoot;
			sz[pRoot] += sz[qRoot];
		}
	}
}