class Solution {
	int maxPoints(int[][] points) {
		int n = points.length;
		if (n <= 2) {
			return n;
		}
		int maxCount = 1;
		for (int i = 0; i < n; i++) {
			HashMap<Double, Integer> m = new HashMap<>();
			int countInf = 0;
			int x1 = points[i][0];
			int y1 = points[i][1];
			for (int j = i + 1; j < n; j++) {
				int x2 = points[j][0];
				int y2 = points[j][1];
				if (x2 - x1 != 0) {
					double slope = (double) (y2 - y1) / (double) (x2 - x1);
					if (y2 - y1 == 0) {
						slope = 0.0;
					}
					if (m.containsKey(slope)) {
						m.put(slope,m.get(slope) + 1);
					} 
					else {
						m.put(slope,2);
					}
					maxCount = Math.max(maxCount,m.get(slope));
				} 
				else {
					if (countInf == 0) {
						countInf = 2;
					} 
					else {
						countInf++;
					}
					maxCount = Math.max(maxCount,countInf);
				}
			}
		}
		return maxCount;
	}
}