class Solution {
	Set<Integer> isPossible(int n) {
		Set<Integer> st = new HashSet<>();
		for (int i = 1; i <= Math.sqrt(n); i++) {
			if (n % i == 0) {
				st.add(i);
				if (i != n / i) {
					st.add(n / i);
				}
			}
		}
		return st;
	}
	long numberOfPairs(int[] nums1, int[] nums2, int k) {
		int n = nums1.length;
		int m = nums2.length;
		long ans = 0;
		Map<Integer, List<Integer>> mp = new HashMap<>();
		for (int i = 0; i < m; i++) {
			mp.computeIfAbsent(nums2[i],(z) -> {new ArrayList<>()}).add(i);
		}
		for (int i = 0; i < n; i++) {
			Set<Integer> st = isPossible(nums1[i]);
			for (int val: st) {	
				if (st.contains(k) && mp.get(val) != null && nums1[i] % (k * val) == 0) {
					ans += mp.get(val).size();
				}
			}
		}
		return ans;
	}
}