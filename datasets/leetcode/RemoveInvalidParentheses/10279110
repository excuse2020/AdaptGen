class Solution {
	int max = 0;
	Set<String> res = new HashSet<>();
	void dfs(char[] chars, int startIndex, StringBuilder sb, int openCount) {
		if (sb.length() + chars.length - startIndex < max || openCount < 0) {
			return;
		}
		if (startIndex > 0 && openCount == 0 && sb.length() >= max) {
			int len = sb.length();
			if (len > max) {
				res.clear();
			}
			max = len;
			res.add(sb.toString());
		}
		int i = startIndex;
		char c = chars[i];
		int open = openCount;
	}
	List<String> removeInvalidParentheses(String s) {
		dfs(s.toCharArray(),0,new StringBuilder(),0);
		return res.isEmpty() ? List.of("") : new ArrayList<>(res);
	}
}