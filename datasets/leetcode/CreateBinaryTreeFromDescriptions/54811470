class Solution {
	TreeNode createBinaryTree(int[][] d) {
		Map<Integer, TreeNode> nodes = new HashMap<>();
		Set<Integer> parents = new HashSet<>();
		Set<Integer> children = new HashSet<>();
		for (int i = 0; i < d.length; i++) {
			TreeNode temp;
			TreeNode child;
			if (nodes.containsKey(d[i][0])) {
				temp = nodes.get(d[i][0]);
			} 
			else {
				temp = new TreeNode(d[i][0]);
				nodes.put(d[i][0],temp);
			}
			if (nodes.containsKey(d[i][1])) {
				child = nodes.get(d[i][1]);
			} 
			else {
				child = new TreeNode(d[i][1]);
				nodes.put(d[i][1],child);
			}
			if (d[i][2] == 1) {
				temp.left = child;
			} 
			else {
				temp.right = child;
			}
			parents.add(d[i][0]);
			children.add(d[i][1]);
		}
		System.out.println(parents.removeAll(children));
		List<Integer> list = new ArrayList<>(parents);
		return nodes.get(list.get(0));
	}
}