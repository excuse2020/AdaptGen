class Solution {
	void PreOrder(TreeNode root, List<TreeNode> nodes) {
		if (root == null) {
			return;
		}
		nodes.add(root);
		PreOrder(root.left,nodes);
		PreOrder(root.right,nodes);
	}
	int averageOfSubtree(TreeNode root) {
		List<TreeNode> nodes = new ArrayList<>();
		if (root == null) {
			return 0;
		}
		PreOrder(root,nodes);
		int ans = 0;
		for (int i = 0; i < nodes.size(); i++) {
			TreeNode tNode = nodes.get(i);
			int nodeInfo = new int[2];
			nodeInfo[0] = 0;
			nodeInfo[1] = 0;
			check(tNode,nodeInfo);
			if ((nodeInfo[0] / nodeInfo[1]) == tNode.val) {
				ans++;
			}
		}
		return ans;
	}
	void check(TreeNode rootNode, int nodeInfo) {
		if (rootNode == null) {
			return;
		}
		nodeInfo[0] += rootNode.val;
		nodeInfo[1] += 1;
		check(rootNode.left,nodeInfo);
		check(rootNode.right,nodeInfo);
	}
}