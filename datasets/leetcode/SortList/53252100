class Solution {
	ListNode findMid(ListNode head) {
		if (head == null || head.next == null) {
			return head;
		}
		ListNode slow = head;
		ListNode fast = head;
		while (fast.next != null && fast.next.next != null) {
			slow = slow.next;
			fast = fast.next.next;
		}
		return slow;
	}
	ListNode merge(ListNode l1, ListNode l2) {
		ListNode dummyhead = new ListNode(0);
		ListNode tail = dummyhead;
		while (l1 != null && l2 != null) {
			if (l1.val < l2.val) {
				tail.next = l1;
				l1 = l1.next;
			} 
			else {
				tail.next = l2;
				l2 = l2.next;
			}
			tail = tail.next;
		}
		tail.next = (l1 != null) ? l1 : l2;
		return dummyhead.next;
	}
	ListNode sortList(ListNode head) {
		if (head == null || head.next == null) {
			return head;
		}
		ListNode mid = findMid(head);
		ListNode newHead = mid.next;
		mid.next = null;
		ListNode leftHalf = sortList(head);
		ListNode rightHalf = sortList(newHead);
		return merge(leftHalf,rightHalf);
	}
}