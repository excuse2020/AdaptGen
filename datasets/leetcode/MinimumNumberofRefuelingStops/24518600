class Solution {
	int minRefuelStops(int target, int startFuel, int[][] stations) {
		int n = stations.length;
		if (n == 0) {
			return (target <= startFuel) ? 0 : -1;
		}
		int fd = target - stations[n - 1][0];
		for (int i = n - 1; i > 0; i--) {
			stations[i][0] -= stations[i - 1][0];
		}
		long[][] matrix = new long[n + 1][n + 1];
		matrix[0][0] = startFuel;
		for (int r = 1; r <= n; r++) {
			for (int c = 0; c <= r; c++) {
				if (matrix[r - 1][c] == -1) {
					matrix[r][c] = -1;
				} 
				else if (c == 0) {
					matrix[r][c] = Math.max(-1,matrix[r - 1][c] - stations[r - 1][0]);
				} 
				else if (c == r) {
					long prevPetrol = matrix[r - 1][c - 1] - stations[r - 1][0];
					if (prevPetrol < 0) {
						return -1;
					}
					matrix[r][c] = prevPetrol + stations[r - 1][1];
				} 
				else {
					long petrolComingFromLeft = matrix[r - 1][c - 1] - stations[r - 1][0];
					long petrolComingFromTop = matrix[r - 1][c] - stations[r - 1][0];
					if (petrolComingFromLeft < 0 && petrolComingFromTop < 0) {
						matrix[r][c] = -1;
					} 
					else if (petrolComingFromLeft < 0) {
						matrix[r][c] = petrolComingFromTop;
					} 
					else if (petrolComingFromTop < 0) {
						matrix[r][c] = petrolComingFromLeft + stations[r - 1][1];
					} 
					else {
						matrix[r][c] = Math.max(petrolComingFromLeft + stations[r - 1][1],petrolComingFromTop);
					}
				}
			}
		}
		for (int i = 0; i <= n; i++) {
			if (matrix[n][i] - fd >= 0) {
				return i;
			}
		}
		return -1;
	}
}