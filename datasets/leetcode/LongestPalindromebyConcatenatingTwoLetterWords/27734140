class Solution {
	int longestPalindrome(String[] words) {
		HashMap<String, Integer> map = new HashMap<>();
		for (int i = 0; i < words.length; i++) {
			map.put(words[i],map.getOrDefault(words[i],0) + 1);
		}
		Set<String> key = map.keySet();
		int len = 0;
		int count = 0;
		for (String s: key) {	
			String rev = "" + s.charAt(1);
			if (map.get(s) > 0) {
				if (s.charAt(0) == s.charAt(1) && map.get(s) > 1) {
					len = len + 4 * (map.get(s) / 2);
					map.put(s,map.get(s) % 2);
				}
				if (s.charAt(0) == s.charAt(1) && count == 0 && map.get(s) > 0) {
					len = len + 2;
					map.put(s,map.get(s) - 1);
					count++;
				} 
				else if (map.containsKey(rev) && s.charAt(0) != s.charAt(1) && map.get(rev) > 0) {
					len = len + (map.get(s) == map.get(rev) ? 4 * map.get(s) : 4 * Math.min(map.get(s),map.get(rev)));
					map.put(rev,0);
					map.put(s,0);
				}
			}
		}
		return len;
	}
}