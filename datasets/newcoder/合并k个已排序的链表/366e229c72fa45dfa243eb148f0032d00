class Solution {
	ListNode merge(ArrayList<ListNode> lists, int l, int r) {
		if (l == r) {
			return lists.get(l);
		}
		if (l > r) {
			return null;
		}
		int mid = l + (r - l) / 2;
		return mergeTwoList(merge(lists,l,mid),merge(lists,mid + 1,r));
	}
	ListNode mergeKLists(ArrayList<ListNode> lists) {
		return merge(lists,0,lists.size() - 1);
	}
	ListNode mergeTwoList(ListNode node1, ListNode node2) {
		ListNode node = new ListNode(-1);
		ListNode tmp = node;
		while (node1 != null && node2 != null) {
			if (node1.val <= node2.val) {
				tmp.next = node1;
				node1 = node1.next;
			} 
			else {
				tmp.next = node2;
				node2 = node2.next;
			}
			tmp = tmp.next;
		}
		tmp.next = node1 != null ? node1 : node2;
		return node.next;
	}
}