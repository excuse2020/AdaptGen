class Solution {
	int[] findRedundantConnection(int[][] edges) {
		HashSet<Integer> heads = new HashSet<>();
		boolean loopFound = false;
		while (!loopFound) {
			HashMap<Integer, Integer> map = new HashMap<>();
			for (int i = 0; i < edges.length; i++) {
				int[] edge = edges[i];
				if (heads.contains(edge[0]) || heads.contains(edge[1])) {
					continue;
				} 
				else {
					map.put(edge[0],map.getOrDefault(edge[0],0) + 1);
					map.put(edge[1],map.getOrDefault(edge[1],0) + 1);
				}
			}
			loopFound = true;
			for (int node: map.keySet()) {	
				if (map.get(node) == 1) {
					heads.add(node);
					loopFound = false;
				}
			}
			if (loopFound) {
				for (int i = edges.length - 1; i >= 0; i--) {
					int[] edge = edges[i];
					if (heads.contains(edge[0]) || heads.contains(edge[1])) {
						continue;
					} 
					else {
						return edge;
					}
				}
			}
		}
		return new int[0];
	}
}