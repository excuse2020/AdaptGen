class Solution {
	int findBlueRed(int red, int blue) {
		if (red == 1 && blue == 1) {
			return 1;
		}
		int count = 1;
		int pointer = 1;
		while (red != 0 || blue != 0) {
			if (red < count && blue < count) {
				break;
			}
			if (pointer % 2 == 1 && blue >= count) {
				blue = blue - count;
				count++;
				pointer++;
			}
			if (red < count || red == 0) {
				break;
			}
			if (pointer % 2 == 0 && red >= count) {
				red = red - count;
				count++;
				pointer++;
			}
			if (blue == 0 || blue < count) {
				break;
			}
		}
		return count - 1;
	}
	int findRedBlue(int red, int blue) {
		if (red == 1 && blue == 1) {
			return 1;
		}
		int count = 1;
		int pointer = 1;
		while (red != 0 || blue != 0) {
			if (red < count && blue < count) {
				break;
			}
			if (pointer % 2 == 1 && red >= count) {
				red = red - count;
				count++;
				pointer++;
			}
			if (blue < count || blue == 0) {
				break;
			}
			if (pointer % 2 == 0 && blue >= count) {
				blue = blue - count;
				count++;
				pointer++;
			}
			if (red == 0 || red < count) {
				break;
			}
		}
		return count - 1;
	}
	int maxHeightOfTriangle(int red, int blue) {
		int rb = findRedBlue(red,blue);
		int br = findBlueRed(red,blue);
		return Math.max(rb,br);
	}
}