class Solution {
	int minCostToEqualizeArray(int[] nums, int cost1, int cost2) {
		int n = nums.length;
		if (n == 0 || n == 1) {
			return 0;
		}
		int mod = 1000000007;
		long max = Long.MIN_VALUE;
		long min = Long.MAX_VALUE;
		long sum = 0;
		for (int i = 0; i < nums.length; i++) {
			sum += nums[i];
			max = Math.max(max,nums[i]);
			min = Math.min(min,nums[i]);
		}
		long totalGaps = 1L * max - sum;
		long maxGap = max - min;
		if (2 * cost1 <= cost2 || n == 2) {
			return (int) ((totalGaps * cost1) % mod);
		}
		long op1 = Math.max(0L,maxGap - (totalGaps - maxGap));
		long op2 = totalGaps - op1;
		long ans = ((((long) cost1 * (op1 + op2 % 2)) + ((long) cost2 * (op2 / 2))) % mod);
		totalGaps += op1 / (n - 2) * n;
		op1 = op1 % (n - 2);
		op2 = totalGaps - op1;
		ans = Math.min(ans,(cost1 * (op1 + op2 % 2)) + (cost2 * (op2 / 2)));
		for (int i = 0; i < 2; i++) {
			totalGaps += n;
			ans = Math.min(ans,(cost1 * (totalGaps % 2)) + cost2 * (totalGaps / 2));
		}
		return (int) (ans) % mod;
	}
}