class Solution {
	int cnt = 0;
	void dfs(int[][] grid, int row, int col, int n, int m) {
		if (row < 0 || row >= n || col < 0 || col >= m || grid[row][col] <= 0) {
			return;
		}
		if (grid[row][col] > 0) {
			cnt += grid[row][col];
			grid[row][col] = 0;
		}
		dfs(grid,row + 1,col,n,m);
		dfs(grid,row,col + 1,n,m);
		dfs(grid,row - 1,col,n,m);
		dfs(grid,row,col - 1,n,m);
	}
	int findMaxFish(int[][] grid) {
		int n = grid.length;
		int m = grid[0].length;
		int max = 0;
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < m; j++) {
				if (grid[i][j] > 0) {
					dfs(grid,i,j,n,m);
					if (cnt > max) {
						max = cnt;
					}
				}
				cnt = 0;
			}
		}
		return max;
	}
}