class Solution {
	Map<String, Integer> dp;
	Set<String> hs;
	int dfs(String word) {
		if (!hs.contains(word)) {
			return 0;
		}
		if (dp.containsKey(word)) {
			return dp.get(word);
		}
		int len = 0;
		for (int i = 0; i < word.length(); i++) {
			String newW = word.substring(0,i) + word.substring(i + 1);
			len = Math.max(len,dfs(newW) + 1);
		}
		dp.put(word,len);
		return len;
	}
	int longestStrChain(String[] words) {
		hs = new HashSet<>(Arrays.asList(words));
		dp = new HashMap<>();
		int ans = 0;
		for (int i = words.length - 1; i >= 0; i--) {
			int len = dfs(words[i]);
			ans = Math.max(ans,len);
		}
		return ans;
	}
}