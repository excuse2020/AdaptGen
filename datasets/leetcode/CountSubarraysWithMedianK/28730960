class Solution {
	int countSubarrays(int[] nums, int k) {
		int idx, n = nums.length, ans = 0;
		for (idx = 0; idx < n; idx++) {
			if (nums[idx] == k) {
				break;
			}
		}
		int arr = new int[n - idx][2];
		for (int i = idx + 1, j = 1; i < n; i++) {
			if (nums[i] < k) {
				arr[j][0] = arr[j - 1][0] + 1;
				arr[j][1] = arr[j - 1][1];
			} 
			else {
				arr[j][1] = arr[j - 1][1] + 1;
				arr[j][0] = arr[j - 1][0];
			}
			j++;
		}
		Map<Integer, Integer> map = new HashMap<>();
		for (int i = 0; i < arr.length; i++) {
			int d2 = arr[i][1] - arr[i][0];
			map.put(d2,map.getOrDefault(d2,0) + 1);
		}
		int s1 = 0, g1 = 0;
		for (int i = idx; i >= 0; i--) {
			if (nums[i] < k) {
				s1++;
			} 
			else if (nums[i] > k) {
				g1++;
			}
			int d1 = g1 - s1;
			int cur = map.getOrDefault(0 - d1,0) + map.getOrDefault(1 - d1,0);
			ans += cur;
		}
		return ans;
	}
}