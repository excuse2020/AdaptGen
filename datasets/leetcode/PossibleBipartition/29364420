class Solution {
	int find(int parent, int i) {
		if (parent[i] == i) {
			return i;
		}
		return parent[i] = find(parent,parent[i]);
	}
	boolean possibleBipartition(int n, int[][] dislikes) {
		int parent = new int[n + 1];
		for (int i = 0; i <= n; i++) {
			parent[i] = i;
		}
		HashMap<Integer, ArrayList<Integer>> hm = new HashMap<>();
		for (int i = 0; i < dislikes.length; i++) {
			int a = dislikes[i][0];
			int b = dislikes[i][1];
			if (hm.containsKey(a)) {
				hm.get(a).add(b);
			} 
			else {
				ArrayList<Integer> temp = new ArrayList<>();
				temp.add(b);
				hm.put(a,temp);
			}
			if (hm.containsKey(b)) {
				hm.get(b).add(a);
			} 
			else {
				ArrayList<Integer> temp = new ArrayList<>();
				temp.add(a);
				hm.put(b,temp);
			}
		}
		for (int i = 1; i < dislikes.length; i++) {
			if (hm.containsKey(dislikes[i][0])) {
				for (int j: hm.get(dislikes[i][0])) {	
					if (find(parent,dislikes[i][0]) == find(parent,j)) {
						return false;
					}
					union(parent,dislikes[i][1],j);
				}
			}
		}
		return true;
	}
	void union(int parent, int a, int b) {
		int aa = find(parent,a);
		int bb = find(parent,b);
		if (aa != bb) {
			parent[aa] = bb;
		}
	}
}