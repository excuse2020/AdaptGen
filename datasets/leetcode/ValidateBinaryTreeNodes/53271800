class Solution {
	boolean dfs(int[] leftChild, int[] rightChild, boolean[] visited, int root) {
		if (root == -1) {
			return true;
		}
		if (visited[root]) {
			return false;
		}
		visited[root] = true;
		return dfs(leftChild,rightChild,visited,leftChild[root]) && dfs(leftChild,rightChild,visited,rightChild[root]);
	}
	boolean isAllVisited(boolean[] visited) {
		for (boolean bool: visited) {	
			if (!bool) {
				return false;
			}
		}
		return true;
	}
	boolean validateBinaryTreeNodes(int n, int[] leftChild, int[] rightChild) {
		boolean[] visited = new boolean[n];
		int root = -1;
		for (int i = 0; i < n; i++) {
			if (leftChild[i] != -1) {
				if (visited[leftChild[i]]) {
					return false;
				}
				visited[leftChild[i]] = true;
			}
			if (rightChild[i] != -1) {
				if (visited[rightChild[i]]) {
					return false;
				}
				visited[rightChild[i]] = true;
			}
		}
		for (int i = 0; i < n; i++) {
			if (!visited[i] && root != -1) {
				return false;
			}
			if (!visited[i]) {
				root = i;
				continue;
			}
			visited[i] = false;
		}
		return dfs(leftChild,rightChild,visited,root) && isAllVisited(visited);
	}
}