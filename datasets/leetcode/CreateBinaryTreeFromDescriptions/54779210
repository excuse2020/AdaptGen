class Solution {
	TreeNode createBinaryTree(int[][] desc) {
		HashMap<Integer, TreeNode> hm = new HashMap<Integer, TreeNode>();
		HashSet<Integer> set = new HashSet<Integer>();
		for (int x: desc) {	
			int p = x[0];
			int c = x[1];
			int l = x[2];
			if (!hm.containsKey(p)) {
				hm.put(p,new TreeNode(p));
			}
			if (!hm.containsKey(c)) {
				hm.put(c,new TreeNode(c));
			}
			if (l == 1) {
				hm.get(p).left = hm.get(c);
			} 
			else {
				hm.get(p).right = hm.get(c);
			}
			set.add(c);
		}
		for (Map.Entry<Integer, TreeNode> x: hm.entrySet()) {	
			if (!set.contains(x.getKey())) {
				return x.getValue();
			}
		}
		return null;
	}
}