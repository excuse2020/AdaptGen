class Solution {
	int INF = (int) 1e9;
	int minCost(int[] houses, int[][] cost, int m, int n, int target) {
		int[][][] dp = new int[target + 1][m + 1][n + 1];
		for (int i = 0; i <= target; i++) {
			for (int j = 0; j <= m; j++) {
				Arrays.fill(dp[i][j],INF);
			}
		}
		Arrays.fill(dp[0][0],0);
		for (int k = 1; k <= target; k++) {
			for (int i = 1; i <= m; i++) {
				if (houses[i - 1] != 0) {
					int c = houses[i - 1];
					for (int c2 = 1; c2 <= n; c2++) {
						dp[k][i][c] = Math.min(dp[k][i][c],dp[k - (c == c2 ? 0 : 1)][i - 1][c2]);
					}
				} 
				else {
					for (int c = 1; c <= n; c++) {
						for (int c2 = 1; c2 <= n; c2++) {
							dp[k][i][c] = Math.min(dp[k][i][c],cost[i - 1][c - 1] + dp[k - (c == c2 ? 0 : 1)][i - 1][c2]);
						}
					}
				}
			}
		}
		int ans = INF;
		for (int c = 1; c <= n; c++) {
			ans = Math.min(ans,dp[target][m][c]);
		}
		return ans == INF ? -1 : ans;
	}
}