class Solution {
	TreeNode build(int[] in, int is, int ie, int[] po, int ps, int pe, HashMap<Integer, Integer> map) {
		if (is > ie || ps > pe) {
			return null;
		}
		TreeNode root = new TreeNode(po[pe]);
		int iRoot = map.get(po[pe]);
		root.left = build(in,is,iRoot - 1,po,ps,ps + iRoot - is - 1,map);
		root.right = build(in,iRoot + 1,ie,po,ps + iRoot - is,pe - 1,map);
		return root;
	}
	TreeNode buildTree(int inorder, int postorder) {
		int n = inorder.length;
		if (inorder.length != postorder.length) {
			return null;
		}
		HashMap<Integer, Integer> map = new HashMap<>();
		for (int i = 0; i < n; i++) {
			map.put(inorder[i],i);
		}
		return build(inorder,0,n - 1,postorder,0,n - 1,map);
	}
}