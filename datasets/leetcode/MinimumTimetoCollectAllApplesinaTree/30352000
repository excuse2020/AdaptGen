class Solution {
	int minTime(int n, int[][] edges, List<Boolean> hasApple) {
		Map<Integer, List<Integer>> map = new HashMap<>();
		Map<Integer, Boolean> visited = new HashMap<>();
		for (int[] arr: edges) {	
			if (map.containsKey(arr[0])) {
				map.get(arr[0]).add(arr[1]);
			} 
			else {
				List<Integer> list = new ArrayList<>();
				list.add(arr[1]);
				map.put(arr[0],list);
			}
			if (map.containsKey(arr[1])) {
				map.get(arr[1]).add(arr[0]);
			} 
			else {
				List<Integer> list = new ArrayList<>();
				list.add(arr[0]);
				map.put(arr[1],list);
			}
		}
		return recur(map,hasApple,visited,0);
	}
	int recur(Map<Integer, List<Integer>> tree, List<Boolean> hasApple, Map<Integer, Boolean> visited, int idx) {
		if (visited.getOrDefault(idx,false)) {
			return 0;
		}
		visited.put(idx,true);
		int count = 0;
		if (!tree.containsKey(idx)) {
			if (hasApple.get(idx)) {
				return 2;
			}
			return 0;
		}
		List<Integer> list = tree.get(idx);
		for (int i: list) {	
			count += recur(tree,hasApple,visited,i);
		}
		if (count == 0 && !hasApple.get(idx)) {
			return 0;
		}
		return idx == 0 ? count : 2 + count;
	}
}