class Solution {
	void mergeSort(int[] nums, int start, int end) {
		if (start == end) {
			return;
		}
		int mid = (start + end) / 2;
		mergeSort(nums,start,mid);
		mergeSort(nums,mid + 1,end);
		int temp = new int[end - start + 1];
		int i = start, j = mid + 1;
		int i1 = 0;
		while (i <= mid && j <= end) {
			if (nums[i] <= nums[j]) {
				temp[i1] = nums[i];
				i1++;
				i++;
			} 
			else {
				temp[i1] = nums[j];
				j++;
				i1++;
			}
		}
		while (i <= mid) {
			temp[i1] = nums[i];
			i++;
			i1++;
		}
		while (j <= end) {
			temp[i1] = nums[j];
			j++;
			i1++;
		}
		for (int k = start; k <= end; k++) {
			nums[k] = temp[k - start];
		}
		return;
	}
	int[] sortArray(int[] nums) {
		int n = nums.length;
		mergeSort(nums,0,n - 1);
		return nums;
	}
}