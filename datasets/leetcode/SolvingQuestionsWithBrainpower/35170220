class Solution {
	long combinations(int[][] questions, int index, Map<Integer, Long> memo) {
		int n = questions.length;
		if (index >= n) {
			return 0;
		}
		if (memo.containsKey(index)) {
			return memo.get(index);
		}
		int nextValidIndex = index + questions[index][1];
		int points = questions[index][0];
		long max = Math.max(points + combinations(questions,nextValidIndex,memo),combinations(questions,index + 1,memo));
		memo.put(index,max);
		return max;
	}
	long mostPoints(int[][] questions) {
		Map<Integer, Long> memo = new HashMap<>();
		return combinations(questions,0,memo);
	}
}