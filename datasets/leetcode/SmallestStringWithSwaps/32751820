class Solution {
	void dfs(List<List<Integer>> graph, int currVertex, String s, boolean[] vis, List<Character> characters, List<Integer> indexes) {
		if (vis[currVertex]) {
			return;
		}
		characters.add(s.charAt(currVertex));
		indexes.add(currVertex);
		vis[currVertex] = true;
		for (Integer i: graph.get(currVertex)) {	
			dfs(graph,i,s,vis,characters,indexes);
		}
	}
	String smallestStringWithSwaps(String s, List<List<Integer>> pairs) {
		int n = s.length();
		List<List<Integer>> list = new ArrayList<>();
		for (int i = 0; i < n; i++) {
			list.add(new ArrayList<>());
		}
		for (List<Integer> pair: pairs) {	
			list.get(pair.get(0)).add(pair.get(1));
			list.get(pair.get(1)).add(pair.get(0));
		}
		boolean[] vis = new boolean[n];
		char[] ans = new char[n];
		for (int i = 0; i < n; i++) {
			if (!vis[i]) {
				List<Character> characters = new ArrayList<>();
				List<Integer> indexes = new ArrayList<>();
				dfs(list,i,s,vis,characters,indexes);
				Collections.sort(characters);
				Collections.sort(indexes);
				for (int j = 0; j < indexes.size(); j++) {
					ans[indexes.get(j)] = characters.get(j);
				}
			}
		}
		return new String(ans);
	}
}