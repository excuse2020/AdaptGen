class Solution {
	boolean canFinish(int numCourses, int[][] prerequisites) {
		@r int n = prerequisites.length;
		@r ArrayList<ArrayList<Integer>> li = new ArrayList<>();
		for (int i = 0; i <= numCourses; i++) {
			li.add(new ArrayList<>());
		}
		for (int i = 0; i < n; i++) {
			li.get(prerequisites[i][0]).add(prerequisites[i][1]);
		}
		int vis = new int[numCourses + 1];
		@r int path = new int[numCourses + 1];
		for (int i = 0; i < numCourses; i++) {
			if (dfs(li,vis,path,i) == true) {
				return false;
			}
		}
		return true;
	}
	boolean dfs(ArrayList<ArrayList<Integer>> li, int vis, int path, int node) {
	}
}