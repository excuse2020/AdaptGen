class Solution {
	int calculateTotalHrs(int[] nums, int mid) {
		int totalHrs = 0;
		int len = nums.length;
		for (int i = 0; i < len; i++) {
			totalHrs += Math.ceil((double) (nums[i]) / (double) (mid));
		}
		return totalHrs;
	}
	int findMax(int[] nums) {
		int max = Integer.MAX_VALUE;
		int len = nums.length;
		for (int i = 0; i < len; i++) {
			max = Math.max(max,nums[i]);
		}
		return max;
	}
	int minEatingSpeed(int[] piles, int h) {
		int start = 1, end = findMax(piles);
		while (start <= end) {
			int mid = start + (end - start) / 2;
			int totalHrs = calculateTotalHrs(piles,mid);
			if (totalHrs <= h) {
				end = mid - 1;
			} 
			else {
				start = mid + 1;
			}
		}
		return start;
	}
}