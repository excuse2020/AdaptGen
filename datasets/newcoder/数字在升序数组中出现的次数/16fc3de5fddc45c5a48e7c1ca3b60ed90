class Solution {
	int GetNumberOfK(int[] array, int k) {
		if (array == null || array.length == 0) {
			return 0;
		}
		int result = 0;
		if (findLast(array,0,array.length - 1,k) > -1 && findFirst(array,0,array.length - 1,k) > -1) {
			result = findLast(array,0,array.length - 1,k) - findFirst(array,0,array.length - 1,k) + 1;
		}
		return result;
	}
	int findFirst(int[] array, int start, int end, int k) {
		if (start > end) {
			return -1;
		}
		int midIndex = (start + end) / 2;
		if (array[midIndex] == k) {
			if (((midIndex - 1) >= 0 && array[midIndex - 1] != k) || midIndex == 0) {
				return midIndex;
			} 
			else {
				end = midIndex - 1;
			}
		} 
		else if (array[midIndex] > k) {
			end = midIndex - 1;
		} 
		else {
			start = midIndex + 1;
		}
		return findFirst(array,start,end,k);
	}
	int findLast(int[] array, int start, int end, int k) {
		if (start > end) {
			return -1;
		}
		int midIndex = (start + end) / 2;
		if (array[midIndex] == k) {
			if (((midIndex + 1) < array.length && array[midIndex + 1] != k) || midIndex == array.length - 1) {
				return midIndex;
			} 
			else {
				start = midIndex + 1;
			}
		} 
		else if (array[midIndex] < k) {
			start = midIndex + 1;
		} 
		else {
			end = midIndex - 1;
		}
		return findLast(array,start,end,k);
	}
}