class Solution {
	int superEggDrop(int k, int n) {
		int[][] dp = new int[k + 1][n + 1];
		int m = 0;
		while (dp[k][m] < n) {
			m++;
			for (int i = 1; i <= k; i++) {
				dp[i][m] = dp[i][m - 1] + dp[i - 1][m - 1];
			}
		}
		return m;
	}
	class Solution {
		int[][] dp;
		int dp(int k, int n) {
			if (k == 1) {
				return n;
			}
			if (n == 0) {
				return 0;
			}
			if (dp[k][n] != 0) {
				return dp[k][n];
			}
			int res = Integer.MAX_VALUE;
			int lo = 1, hi = n;
			while (lo <= hi) {
				int mid = lo + (hi - lo) / 2;
				int broken = dp(k - 1,mid - 1);
				int notBroken = dp(k,n - mid);
				if (broken > notBroken) {
					hi = mid - 1;
					res = Math.min(res,broken + 1);
				} 
				else {
					lo = mid + 1;
					res = Math.min(res,notBroken + 1);
				}
			}
			dp[k][n] = res;
			return res;
		}
		int superEggDrop(int k, int n) {
			dp = new int[k + 1][n + 1];
			return dp(k,n);
		}
	}
}