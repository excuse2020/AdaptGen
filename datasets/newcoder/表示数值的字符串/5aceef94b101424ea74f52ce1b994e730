class Solution {
	Set<Character> legalChars = new HashSet<>(Arrays.asList('0','1','2','3','4','5','6','7','8','9','+','-','.','e'));
	boolean doDudge(String str) {
		if (str == null || str.length() == 0) {
			return false;
		}
		if (str.contains("e")) {
			if (str.endsWith("e") || str.indexOf('.') > str.indexOf('e')) {
				return false;
			}
			return doDudge(str.split("e")[0]) && doDudge(str.split("e")[1]);
		} 
		else if (str.startsWith("+") || str.startsWith("-")) {
			if (str.length() == 1 || str.charAt(1) == '+' || str.charAt(1) == '-') {
				return false;
			}
			return doDudge(str.substring(1));
		} 
		else {
			return !str.endsWith(".") && !str.contains("+");
		}
	}
	boolean hasCharMoreThan(char[] arr, char c, int count) {
		int cnt = 0;
		for (char ch: arr) {	
			if (ch == c) {
				++cnt;
			}
		}
		if (cnt > count) {
			return true;
		}
		return false;
	}
	boolean hasIllegalChar(char[] arr) {
		for (char c: arr) {	
			if (!legalChars.contains(c)) {
				return true;
			}
		}
		return false;
	}
	boolean isNumeric(String str) {
		if (str == null || str.length() == 0) {
			return false;
		}
		str = str.toLowerCase();
		char[] charArr = str.toCharArray();
		if (hasIllegalChar(charArr) || hasCharMoreThan(charArr,'.',1)) {
			return false;
		}
		return doDudge(str);
	}
}