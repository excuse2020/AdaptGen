class Solution {
	int[] nextPermutation(int[] nums) {
		Integer[] origin = new Integer[nums.length];
		Integer[] originCopy = new Integer[nums.length];
		for (int i = 0; i < nums.length; i++) {
			origin[i] = nums[i];
			originCopy[i] = nums[i];
		}
		Arrays.sort(originCopy,new ComparaInverted());
		if (Arrays.equals(originCopy,origin)) {
			Arrays.sort(originCopy);
			int[] res = new int[originCopy.length];
			for (int i = 0; i < originCopy.length; i++) {
				res[i] = originCopy[i];
			}
			return res;
		} 
		else {
			int index = 0;
			for (int i = origin.length - 1; i > 0; i--) {
				if (origin[i] > origin[i - 1]) {
					index = i;
					break;
				}
			}
			int minP = 0;
			int minVal = origin[index];
			for (int i = origin.length - 1; i >= index; i--) {
				if (origin[i] > origin[index - 1] && origin[i] <= minVal) {
					minP = i;
					minVal = origin[i];
				}
			}
			int swap = origin[index - 1];
			origin[index - 1] = origin[minP];
			origin[minP] = swap;
			Arrays.sort(origin,index,origin.length - 1);
			int[] res = new int[origin.length];
			for (int i = 0; i < origin.length; i++) {
				res[i] = origin[i];
			}
			return res;
		}
	}
	class ComparaInverted {
		int compare(Integer num1, Integer num2) {
			return num2 - num1;
		}
	}
}