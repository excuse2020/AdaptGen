class Solution {
	int knightDialer(int n) {
		int mod = 1000000007;
		Map<Integer, int[]> map = new HashMap<>();
		map.put(0,new int{4, 6});
		map.put(1,new int{6, 8});
		map.put(2,new int{7, 9});
		map.put(3,new int{4, 8});
		map.put(4,new int{3, 9, 0});
		map.put(5,new int{});
		map.put(6,new int{1, 7, 0});
		map.put(7,new int{2, 6});
		map.put(8,new int{1, 3});
		map.put(9,new int{2, 4});
		int dp = new int[n][10];
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < 10; j++) {
				if (i == 0) {
					dp[i][j] = 1;
				} 
				else {
					int[] nextL = map.get(j);
					long res = 0;
					for (int next: nextL) {	
						res += dp[i - 1][next] % mod;
					}
					dp[i][j] = (int) (res % mod);
				}
			}
		}
		long ans = 0;
		for (int num: dp[n - 1]) {	
			ans += num % mod;
		}
		return (int) (ans % mod);
	}
}