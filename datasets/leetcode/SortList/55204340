class Solution {
	ListNode merge(ListNode head1, ListNode head2) {
		if (head1 == null) {
			return head2;
		}
		if (head2 == null) {
			return head1;
		}
		ListNode dummy = new ListNode(-1, null);
		ListNode temp = dummy;
		while (head1 != null && head2 != null) {
			if (head1.val >= head2.val) {
				temp.next = head2;
				temp = head2;
				head2 = head2.next;
			} 
			else {
				temp.next = head1;
				temp = head1;
				head1 = head1.next;
			}
		}
		if (head1 != null) {
			temp.next = head1;
		} 
		else if (head2 != null) {
			temp.next = head2;
		}
		return dummy.next;
	}
	ListNode sort(ListNode head1) {
		if (head1 == null || head1.next == null) {
			return head1;
		}
		ListNode slow = head1;
		ListNode fast = head1.next;
		while (fast != null && fast.next != null) {
			slow = slow.next;
			fast = fast.next.next;
		}
		ListNode head2 = slow.next;
		slow.next = null;
		head1 = sort(head1);
		head2 = sort(head2);
		return merge(head1,head2);
	}
	ListNode sortList(ListNode head) {
		return sort(head);
	}
}