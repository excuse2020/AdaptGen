class Solution {
	void DFS(int ancestor, int currNode, List<List<Integer>> mp, List<List<Integer>> ans) {
		for (int map: mp.get(currNode)) {	
			if (ans.get(map).size() == 0 || ans.get(map).get(ans.get(map).size() - 1) != ancestor) {
				ans.get(map).add(ancestor);
				DFS(ancestor,map,mp,ans);
			}
		}
	}
	List<List<Integer>> getAncestors(int n, int[][] edges) {
		List<List<Integer>> ans = new ArrayList<>();
		List<List<Integer>> mp = new ArrayList<>();
		for (int i = 0; i < n; i++) {
			ans.add(new ArrayList<>());
			mp.add(i,new ArrayList<>());
		}
		for (int[] edge: edges) {	
			mp.get(edge[0]).add(edge[1]);
		}
		for (int i = 0; i < n; i++) {
			int ancestor = i;
			DFS(ancestor,i,mp,ans);
		}
		return ans;
	}
}