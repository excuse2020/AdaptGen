class Solution {
	boolean validateBinaryTreeNodes(int n, int[] leftChild, int[] rightChild) {
		int[] counts = new int[n];
		for (int i = 0; i < n; i++) {
			if (leftChild[i] != -1) {
				counts[leftChild[i]] += 1;
			}
			if (rightChild[i] != -1) {
				counts[rightChild[i]] += 1;
			}
		}
		int startPoint = -1;
		for (int i = 0; i < n; i++) {
			if (counts[i] == 0) {
				if (startPoint != -1) {
					return false;
				}
				startPoint = i;
			}
			if (counts[i] > 1) {
				return false;
			}
		}
		if (startPoint == -1) {
			return false;
		}
		Set<Integer> hasVisited = new HashSet<>();
		Stack<Integer> stack = new Stack<>();
		stack.push(leftChild[startPoint]);
		stack.push(rightChild[startPoint]);
		hasVisited.add(startPoint);
		while (stack.size() > 0) {
			int node = stack.pop();
			if (node == -1) {
				continue;
			}
			if (hasVisited.contains(node)) {
				return false;
			}
			hasVisited.add(node);
			stack.push(leftChild[node]);
			stack.push(rightChild[node]);
		}
		return hasVisited.size() == n;
	}
}