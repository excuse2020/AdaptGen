class Solution {
	int sumSubarrayMins(int[] arr) {
		long mod = (int) 1e9 + 7;
		long ans = 0;
		int n = arr.length;
		Stack<Integer> st = new Stack<>();
		int totalCount = new int[n];
		for (int i = n - 1; i >= 0; i--) {
			while (!st.isEmpty() && arr[i] <= arr[st.peek()]) {
				st.pop();
			}
			if (st.isEmpty()) {
				totalCount[i] = n - i;
			} 
			else {
				totalCount[i] = st.peek() - i;
			}
			st.push(i);
		}
		st = new Stack<Integer>();
		for (int i = 0; i < n; i++) {
			while (!st.isEmpty() && arr[i] < arr[st.peek()]) {
				st.pop();
			}
			if (st.isEmpty()) {
				totalCount[i] *= (i + 1);
			} 
			else {
				totalCount[i] *= (i - st.peek());
			}
			st.push(i);
		}
		for (int i = 0; i < n; i++) {
			ans += (long) (((totalCount[i] % mod) * (arr[i] % mod)) % mod);
		}
		return (int) (ans % mod);
	}
}