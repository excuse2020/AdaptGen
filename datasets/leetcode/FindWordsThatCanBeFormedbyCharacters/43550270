class Solution {
	boolean canWordBeFormed(Map<Character, Integer> wordMap, Map<Character, Integer> charsMap) {
		for (Map.Entry<Character, Integer> wordEntry: wordMap.entrySet()) {	
			char ch = wordEntry.getKey();
			int countRequired = wordEntry.getValue();
			Integer countAvailable = charsMap.get(ch);
			if (countAvailable == null || countRequired > countAvailable) {
				return false;
			}
		}
		return true;
	}
	int countCharacters(String[] words, String chars) {
		Map<Character, Integer> charsMap = makeFreqMapOfChars(chars);
		int sum = 0;
		for (String word: words) {	
			Map<Character, Integer> wordMap = makeFreqMapOfChars(word);
			if (canWordBeFormed(wordMap,charsMap)) {
				sum += word.length();
			}
		}
		return sum;
	}
	Map<Character, Integer> makeFreqMapOfChars(String chars) {
		Map<Character, Integer> charsMap = new HashMap<>();
		for (int i = 0; i < chars.length(); i++) {
			char ch = chars.charAt(i);
			charsMap.put(ch,charsMap.getOrDefault(ch,0) + 1);
		}
		return charsMap;
	}
}