class Solution {
	List<List<Integer>> closestNodes(TreeNode root, List<Integer> queries) {
		ArrayList<Integer> arr = new ArrayList<Integer>();
		inorder(root,arr);
		List<List<Integer>> ans = new ArrayList<List<Integer>>();
		for (int i = 0; i < queries.size(); i++) {
			ans.add(new ArrayList<>());
			ans.get(i).add(-1);
			ans.get(i).add(-1);
			int x = queries.get(i);
			int start = 0;
			int end = arr.size() - 1;
			while (start <= end) {
				int mid = start - ((start - end) / 2);
				if (arr.get(mid) == x) {
					ans.get(i).set(0,x);
					ans.get(i).set(1,x);
					break;
				} 
				else if (arr.get(mid) < x) {
					ans.get(i).set(0,arr.get(mid));
					start = mid + 1;
				} 
				else {
					ans.get(i).set(1,arr.get(mid));
					end = mid - 1;
				}
			}
		}
		return ans;
	}
	void inorder(TreeNode root, ArrayList<Integer> arr) {
		if (root == null) {
			return;
		}
		inorder(root.left,arr);
		arr.add(root.val);
		inorder(root.right,arr);
	}
}