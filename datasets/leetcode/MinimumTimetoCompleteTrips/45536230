class Solution {
	boolean canCompleteTrips(int[] time, int totalTrips, long givenTime) {
		long tripsCompleted = 0;
		for (int n: time) {	
			tripsCompleted += givenTime / n;
		}
		return tripsCompleted >= totalTrips;
	}
	long minimumTime(int[] time, int totalTrips) {
		long minTime = time[0];
		for (int t: time) {	
			minTime = Math.min(minTime,t);
		}
		long left = 1;
		long right = (minTime * totalTrips);
		while (left < right) {
			long mid = left + (right - left) / 2;
			if (canCompleteTrips(time,totalTrips,mid)) {
				right = mid;
			} 
			else {
				left = mid + 1;
			}
		}
		return right;
	}
}