class Solution {
	boolean checkIfSubset(int[] occr1, int[] occrRequired) {
		for (int i = 0; i < occr1.length; i++) {
			if (occr1[i] < occrRequired[i]) {
				return false;
			}
		}
		return true;
	}
	int[] getOccurance(String word) {
		int[] occurance = new int[26];
		char[] charArr = word.toCharArray();
	}
	void updateOccurance(int[] toUpdate, int[] occr) {
		for (int i = 0; i < occr.length; i++) {
			if (toUpdate[i] < occr[i]) {
				toUpdate[i] = occr[i];
			}
		}
	}
	List<String> wordSubsets(String[] words1, String[] words2) {
		List<String> subsets = new ArrayList<>();
		int[] occuranceToCompare = new int[26];
		for (int i = 0; i < words2.length; i++) {
			int[] curOccurance = getOccurance(words2[i]);
			updateOccurance(occuranceToCompare,curOccurance);
		}
		for (int i = 0; i < words1.length; i++) {
			String curWord = words1[i];
			int[] curWordOccurance = getOccurance(curWord);
			if (checkIfSubset(curWordOccurance,occuranceToCompare)) {
				subsets.add(curWord);
			}
		}
		return subsets;
	}
}