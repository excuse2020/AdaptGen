class Solution {
	int helperMem(int[] prices, int index, int buy, int[][] dp) {
		if (index == prices.length) {
			return 0;
		}
		if (dp[index][buy] != -1) {
			return dp[index][buy];
		}
		int totalProfit = 0;
		if (buy == 1) {
			int buyKaro = -prices[index] + helperMem(prices,index + 1,0,dp);
			int skipKaro = helperMem(prices,index + 1,1,dp);
			totalProfit = Math.max(buyKaro,skipKaro);
		} 
		else {
			int sellKaro = prices[index];
			if (index + 2 <= prices.length - 1) {
				sellKaro += helperMem(prices,index + 2,1,dp);
			}
			int skipKaro = helperMem(prices,index + 1,0,dp);
			totalProfit = Math.max(sellKaro,skipKaro);
		}
		return dp[index][buy] = totalProfit;
	}
	int maxProfit(int[] prices) {
		int[][] dp = new int[prices.length][2];
		for (int[] row: dp) {	
			Arrays.fill(row,-1);
		}
		return helperMem(prices,0,1,dp);
	}
}