class Solution {
	ListNode findmiddle(ListNode head) {
		if (head == null || head.next == null) {
			return head;
		}
		ListNode slow = head, fast = head.next;
		while (fast != null && fast.next != null) {
			slow = slow.next;
			fast = fast.next.next;
		}
		return slow;
	}
	ListNode mergetwoLists(ListNode l1, ListNode l2) {
		ListNode dummynode = new ListNode(-1);
		ListNode temp = dummynode;
		while (l1 != null && l2 != null) {
			if (l1.val < l2.val) {
				temp.next = l1;
				l1 = l1.next;
			} 
			else {
				temp.next = l2;
				l2 = l2.next;
			}
			temp = temp.next;
		}
		if (l1 != null) {
			temp.next = l1;
		} 
		else {
			temp.next = l2;
		}
		return dummynode.next;
	}
	ListNode sortList(ListNode head) {
		if (head == null || head.next == null) {
			return head;
		}
		ListNode middle = findmiddle(head);
		ListNode right = middle.next;
		middle.next = null;
		ListNode left = head;
		left = sortList(left);
		right = sortList(right);
		return mergetwoLists(left,right);
	}
}