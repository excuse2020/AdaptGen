class Solution {
	ListNode Merge(ListNode pHead1, ListNode pHead2) {
		if (null == pHead1 && null == pHead2) {
			return null;
		}
		ListNode newList = new ListNode(0);
		recursiveCompare(pHead1,pHead2,newList);
		return newList;
	}
	void recursiveCompare(ListNode n1, ListNode n2, ListNode newList) {
		if (null == n1 && null == n2) {
			return;
		}
		if (null == n1) {
			newList.val = n2.val;
			newList.next = n2.next;
			return;
		}
		if (null == n2) {
			newList.val = n1.val;
			newList.next = n1.next;
			return;
		}
		if (n1.val <= n2.val) {
			newList.val = n1.val;
			newList.next = new ListNode(0);
			recursiveCompare(n1.next,n2,newList.next);
		} 
		else {
			newList.val = n2.val;
			newList.next = new ListNode(0);
			recursiveCompare(n1,n2.next,newList.next);
		}
	}
}