class Solution {
	ListNode mergeKLists(ListNode[] lists) {
		if (lists.length == 0) {
			return null;
		}
		PriorityQueue<Integer> pq = new PriorityQueue<>();
		for (int i = 0; i < lists.length; i++) {
			ListNode head = lists[i];
			while (head != null) {
				pq.add(head.val);
				head = head.next;
			}
		}
		if (pq.size() == 0) {
			return null;
		}
		ListNode newHead = null;
		ListNode newTail = null;
		while (!pq.isEmpty()) {
			int val = pq.poll();
			if (newHead == null) {
				ListNode temp = new ListNode(val);
				newHead = temp;
				newTail = temp;
			} 
			else {
				ListNode temp = new ListNode(val);
				newTail.next = temp;
				newTail = newTail.next;
			}
		}
		if (newTail != null) {
			newTail.next = null;
		}
		return newHead;
	}
}