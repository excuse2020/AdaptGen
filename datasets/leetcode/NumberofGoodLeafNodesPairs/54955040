class Solution {
	int countPairs(TreeNode root, int distance) {
		if (root == null) {
			return 0;
		}
		int[] res = new int[1];
		countPairsDFS(root,distance,res);
		return res[0];
	}
	int[] countPairsDFS(TreeNode node, int distance, int[] res) {
		if (node == null) {
			return new int[distance + 1];
		}
		if (node.left == null && node.right == null) {
			int[] leaves = new int[distance + 1];
			leaves[1] = 1;
			return leaves;
		}
		int[] leftDistances = countPairsDFS(node.left,distance,res);
		int[] rightDistances = countPairsDFS(node.right,distance,res);
		for (int i = 1; i <= distance; i++) {
			for (int j = 1; j <= distance; j++) {
				if (i + j <= distance) {
					res[0] += leftDistances[i] * rightDistances[j];
				}
			}
		}
		int[] newDistances = new int[distance + 1];
		for (int i = 1; i < distance; i++) {
			newDistances[i + 1] = leftDistances[i] + rightDistances[i];
		}
		return newDistances;
	}
}