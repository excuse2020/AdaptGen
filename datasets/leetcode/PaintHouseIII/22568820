class Solution {
	int MAX_COST = 10_000_000;
	int min(int[][] minCosts, int curColor, int nIdx) {
		int min = Integer.MAX_VALUE;
		for (int color = minCosts.length - 1; color >= 0; color--) {
			if (color != curColor) {
				min = Math.min(min,minCosts[color][nIdx]);
			}
		}
		return min;
	}
	int minCost(int[] houses, int[][] cost, int houseCount, int colorCount, int target) {
		int[][][] dp = new int[houseCount][colorCount][target];
		for (int house = houseCount - 1; house >= 0; house--) {
			for (int color = colorCount - 1; color >= 0; color--) {
				int[] dpHC = dp[house][color];
				for (int nIdx = Math.min(houseCount - house,target - 1); nIdx >= 0; nIdx--) {
					dpHC[nIdx] = MAX_COST;
				}
			}
		}
		if (houses[0] != 0) {
			dp[0][houses[0] - 1][target - 1] = 0;
		} 
		else {
			for (int color = colorCount - 1; color >= 0; color--) {
				dp[0][color][target - 1] = cost[0][color];
			}
		}
		int lowNIdx = target - 1;
		for (int house = 1; house < houseCount; house++) {
			int highNIdx = Math.min(houseCount - house,target - 1);
			if (houses[house] > 0) {
				int curColor = houses[house] - 1;
				int[] dpHC = dp[house][curColor];
				for (int nIdx = highNIdx; nIdx >= lowNIdx; nIdx--) {
					dpHC[nIdx] = Math.min(dpHC[nIdx],dp[house - 1][curColor][nIdx]);
					if (houses[house - 1] > 0 && houses[house - 1] - 1 != curColor) {
						dpHC[nIdx - 1] = dp[house - 1][houses[house - 1] - 1][nIdx];
					} 
					else {
						dpHC[nIdx - 1] = min(dp[house - 1],curColor,nIdx);
					}
				}
				if (lowNIdx == 1) {
					dpHC[0] = Math.min(dpHC[0],dp[house - 1][curColor][0]);
				}
			} 
			else {
				int[] costH = cost[house];
				int[][] dpHMinus1 = dp[house - 1];
				int prevHouseColor = houses[house - 1];
				for (int color = colorCount - 1; color >= 0; color--) {
					int[] dpHC = dp[house][color];
					for (int nIdx = highNIdx; nIdx >= lowNIdx; nIdx--) {
						dpHC[nIdx] = Math.min(dpHC[nIdx],dpHMinus1[color][nIdx] + costH[color]);
						if (prevHouseColor > 0 && prevHouseColor - 1 != color) {
							dpHC[nIdx - 1] = dpHMinus1[prevHouseColor - 1][nIdx] + costH[color];
						} 
						else {
							dpHC[nIdx - 1] = min(dpHMinus1,color,nIdx) + costH[color];
						}
					}
					if (lowNIdx == 1) {
						dpHC[0] = Math.min(dpHC[0],dpHMinus1[color][0] + costH[color]);
					}
				}
			}
			if (lowNIdx > 1) {
				lowNIdx--;
			}
		}
		int min = MAX_COST;
		for (int color = colorCount - 1; color >= 0; color--) {
			min = Math.min(min,dp[houseCount - 1][color][0]);
		}
		return (min < MAX_COST) ? min : -1;
	}
}