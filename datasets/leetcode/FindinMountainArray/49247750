class Solution {
	int findInMountainArray(int target, MountainArray mountainArr) {
		int start = 0;
		int end = mountainArr.length() - 1;
		while (start < end) {
			int mid = start + (end - start) / 2;
			if (mountainArr.get(mid) < mountainArr.get(mid + 1)) {
				start = mid + 1;
			} 
			else if (mountainArr.get(mid) > mountainArr.get(mid + 1)) {
				end = mid;
			}
		}
		if (mountainArr.get(start) == target) {
			return start;
		} 
		else {
			int ans = searchInLeftArray(mountainArr,start,target);
			if (ans == -1) {
				ans = searchInRightArray(mountainArr,start,target);
			}
			if (ans != -1) {
				return ans;
			} 
			else {
				return -1;
			}
		}
	}
	int searchInLeftArray(MountainArray mountainArr, int peakIndex, int target) {
		int peak = mountainArr.get(peakIndex);
		int start = 0;
		int end = peakIndex - 1;
		while (start <= end) {
			int mid = start + (end - start) / 2;
			if (mountainArr.get(mid) > target) {
				end = mid - 1;
			} 
			else if (mountainArr.get(mid) < target) {
				start = mid + 1;
			} 
			else {
				return mid;
			}
		}
		return -1;
	}
	int searchInRightArray(MountainArray mountainArr, int peakIndex, int target) {
		int peak = mountainArr.get(peakIndex);
		int start = peakIndex + 1;
		int end = mountainArr.length() - 1;
		while (start <= end) {
			int mid = start + (end - start) / 2;
			if (mountainArr.get(mid) < target) {
				end = mid - 1;
			} 
			else if (mountainArr.get(mid) > target) {
				start = mid + 1;
			} 
			else {
				return mid;
			}
		}
		return -1;
	}
}