class Solution {
	int solve(char[][] matrix) {
		int max_l = 0;
		int max_lr = 0;
		for (int i = 0; i < matrix.length; i++) {
			for (int j = 0; j < matrix[i].length; j++) {
				if (matrix[i][j] == '1') {
					int k = j + 1;
					for (k = j + 1; k < matrix[i].length; k++) {
						if (matrix[i][k] == '0') {
							break;
						}
					}
					max_l = k - j;
					if (max_l < max_lr) {
						continue;
					}
					int l = i + 1;
					for (l = i + 1; (l < i + max_l) && (l < matrix.length); l++) {
						if (matrix[l][j] == '0') {
							break;
						}
					}
					max_l = l - i;
					if (max_l < max_lr) {
						continue;
					}
					for (int m = i + 1; (m < i + max_l) && (m < matrix.length); m++) {
						for (int n = j + 1; (n < j + max_l) && (n < matrix[m].length); n++) {
							if (matrix[m][n] == '0') {
								max_l = (m - i > n - j) ? m - i : n - j;
								if (max_l < max_lr) {
									continue;
								}
							}
						}
					}
					if (max_lr < max_l) {
						max_lr = max_l;
					}
				}
			}
		}
		return max_lr * max_lr;
	}
}