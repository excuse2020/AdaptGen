class Solution {
	boolean isPseudoPalindrom(int currLen, Map<Integer, Integer> map) {
		if (currLen % 2 == 0) {
			for (Integer val: map.values()) {	
				if (val % 2 != 0) {
					return false;
				}
			}
		} 
		else {
			boolean found = false;
			for (Integer val: map.values()) {	
				if (val % 2 != 0 && found) {
					return false;
				} 
				else if (val % 2 != 0 && !found) {
					found = true;
				}
			}
		}
		return true;
	}
	int pseudoPalindromicPaths(TreeNode root) {
		if (root == null || (root.left == null && root.right == null)) {
			return 1;
		}
		Map<Integer, Integer> map = new HashMap<>();
		return pseudoPalindromicPaths(root,1,map);
	}
	int pseudoPalindromicPaths(TreeNode root, int currLen, Map<Integer, Integer> map) {
		if (root == null) {
			return 0;
		}
		if (root.left == null && root.right == null) {
			map.put(root.val,map.getOrDefault(root.val,0) + 1);
			boolean isPseudoPalin = isPseudoPalindrom(currLen,map);
			updateMap(map,root);
			if (isPseudoPalin) {
				return 1;
			}
			return 0;
		}
		map.put(root.val,map.getOrDefault(root.val,0) + 1);
		int val = pseudoPalindromicPaths(root.left,currLen + 1,map) + pseudoPalindromicPaths(root.right,currLen + 1,map);
		updateMap(map,root);
		return val;
	}
	void updateMap(Map<Integer, Integer> map, TreeNode root) {
		int currVal = map.get(root.val);
		if (currVal == 1) {
			map.remove(root.val);
		} 
		else {
			map.put(root.val,currVal - 1);
		}
	}
}