class Solution {
	int dfsBackTrack(int[][] grid, int r, int c, int k, int sum, int[][][] dp) {
		int n = grid.length - 1;
		int m = grid[0].length - 1;
		if (r > n || c > m) {
			return 0;
		}
		if (r == n && m == c) {
			sum += grid[r][c];
			if (sum % k == 0) {
				return 1;
			}
			return 0;
		}
		if (dp[r][c][sum % k] != -1) {
			return dp[r][c][sum % k];
		}
		dp[r][c][sum % k] = ((dfsBackTrack(grid,r + 1,c,k,sum + grid[r][c],dp)) % 1000000007 + (dfsBackTrack(grid,r,c + 1,k,sum + grid[r][c],dp)) % 1000000007) % 1000000007;
		return dp[r][c][sum % k];
	}
	int numberOfPaths(int[][] grid, int k) {
		int[][][] dp = new int[grid.length + 1][grid[0].length + 1][k + 1];
		int r = dp.length + 1;
		int c = dp[0].length + 1;
		for (int[][] a: dp) {	
			for (int[] b: a) {	
				Arrays.fill(b,-1);
			}
		}
		return dfsBackTrack(grid,0,0,k,0,dp);
	}
}