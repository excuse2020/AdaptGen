class Solution {
	int dfs(Node root) {
		if (root == null) {
			return 0;
		}
		if (root.map.isEmpty()) {
			return root.level;
		}
		int sum = 0;
		for (Node child: root.map.values()) {	
			sum += dfs(child);
		}
		return sum;
	}
	void insert(char[] str, Node root) {
		Node curr = root;
		int prevLevel = curr.level;
		for (int i = str.length - 1; i >= 0; i--) {
			char c = str[i];
			if (!curr.map.containsKey(c)) {
				curr.map.put(c,new Node());
			}
			curr = curr.map.get(c);
			curr.level = prevLevel + 1;
			prevLevel = curr.level;
		}
	}
	int minimumLengthEncoding(String[] words) {
		Node root = new Node();
		for (String str: words) {	
			insert(str.toCharArray(),root);
		}
		return dfs(root);
	}
	class Node {
		int level = 1;
		Map<Character, Node> map = new HashMap<>();
	}
}