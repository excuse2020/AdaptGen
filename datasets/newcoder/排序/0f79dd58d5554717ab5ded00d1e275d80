class Solution {
	void Merge(int[] arr, int low, int mid, int height) {
		int s = low, k = 0, i;
		int[] temp = new int[height - low + 1];
		for (i = mid + 1; low <= mid && i <= height; k++) {
			if (arr[low] < arr[i]) {
				temp[k] = arr[low++];
			} 
			else {
				temp[k] = arr[i++];
			}
		}
		for (; low <= mid; k++) {
			temp[k] = arr[low++];
		}
		for (; i <= height; k++) {
			temp[k] = arr[i++];
		}
		for (int p = 0; p < k; p++) {
			arr[s++] = temp[p];
		}
	}
	int[] MergeSort(int[] arr, int low, int height) {
		if (low < height) {
			int mid = (low + height) / 2;
			MergeSort(arr,low,mid);
			MergeSort(arr,mid + 1,height);
			Merge(arr,low,mid,height);
		}
		return arr;
	}
	int[] MySort(int[] arr) {
		int[] data = MergeSort(arr,0,arr.length - 1);
		return data;
	}
}