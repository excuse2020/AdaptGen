class Solution {
	int answer = 0;
	boolean check(String s, List<String> powers, int steps) {
		if (s.isEmpty()) {
			answer = steps;
			return true;
		}
		for (int i = powers.size() - 1; i >= 0; i--) {
			if (s.length() < powers.get(i).length()) {
				continue;
			}
			if (s.startsWith(powers.get(i)) && check(s.substring(powers.get(i).length()),powers,steps + 1)) {
				return true;
			}
		}
		return false;
	}
	int minimumBeautifulSubstrings(String s) {
		List<String> powers = new ArrayList<>();
		for (int i = 0; i <= 6; i++) {
			powers.add(Integer.toBinaryString((int) Math.pow(5,i)));
		}
		return check(s,powers,0) ? answer : -1;
	}
}