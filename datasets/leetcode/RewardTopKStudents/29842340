class Solution {
	List<Integer> topStudents(String[] positive_feedback, String[] negative_feedback, String[] report, int[] student_id, int k) {
		Set<String> positive = new HashSet<>();
		for (String s: positive_feedback) {	
			positive.add(s);
		}
		Set<String> negative = new HashSet<>();
		for (String s: negative_feedback) {	
			negative.add(s);
		}
		PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> {a[0] == b[0] ? b[1] - a[1] : a[0] - b[0]});
		for (int i = 0; i < report.length; i++) {
			String[] arr = report[i].split(" ");
			int val = 0;
			for (String feed: arr) {	
				if (positive.contains(feed)) {
					val += 3;
				} 
				else if (negative.contains(feed)) {
					val -= 1;
				}
			}
			pq.offer(new int{val, student_id[i]});
			if (pq.size() > k) {
				pq.poll();
			}
		}
		List<Integer> res = new ArrayList<>();
		while (!pq.isEmpty()) {
			res.add(pq.poll()[1]);
		}
		Collections.reverse(res);
		return res;
	}
}