class Solution {
	void backtrack(int[] candidates, List<List<Integer>> ll, int target, List<Integer> al, int s) {
		if (target < 0) {
			return;
		} 
		else if (target == 0) {
			ll.add(new ArrayList<>(al));
		} 
		else {
			for (int i = s; i < candidates.length; i++) {
				if (i > s && candidates[i] == candidates[i - 1]) {
					continue;
				}
				al.add(candidates[i]);
				backtrack(candidates,ll,target - candidates[i],al,i + 1);
				al.remove(al.size() - 1);
			}
		}
	}
	List<List<Integer>> combinationSum2(int[] candidates, int target) {
		List<List<Integer>> ll = new ArrayList<>();
		Arrays.sort(candidates);
		backtrack(candidates,ll,target,new ArrayList<>(),0);
		return ll;
	}
}