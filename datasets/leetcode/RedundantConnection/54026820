class Solution {
	int findPar(int u, int[] parent) {
		if (u == parent[u]) {
			return u;
		}
		return parent[u] = findPar(parent[u],parent);
	}
	int[] findRedundantConnection(int[][] edges) {
		int n = edges.length;
		int parent = new int[n + 1];
		int rank = new int[n + 1];
		for (int i = 1; i <= n; i++) {
			parent[i] = i;
			rank[i] = 0;
		}
		for (int[] it: edges) {	
			int u = it[0];
			int v = it[1];
			if (!union(u,v,parent,rank)) {
				return it;
			}
		}
		throw new AssertionError()
	}
	boolean union(int u, int v, int[] parent, int[] rank) {
		int pu = findPar(u,parent);
		int pv = findPar(v,parent);
		if (pu == pv) {
			return false;
		}
		if (rank[pu] < rank[pv]) {
			parent[pu] = pv;
		} 
		else if (rank[pv] < rank[pu]) {
			parent[pv] = pu;
		} 
		else {
			parent[pv] = pu;
			rank[pu]++;
		}
		return true;
	}
}