class Solution {
	int time = 0;
	List<List<Integer>> criticalConnections(int n, List<List<Integer>> connections) {
		int time = 0;
		List<Integer> graph = new ArrayList[n];
		for (int i = 0; i < n; i++) {
			graph[i] = new ArrayList<>();
		}
		for (List<Integer> connection: connections) {	
			int src = connection.get(0);
			int dest = connection.get(1);
			graph[src].add(dest);
			graph[dest].add(src);
		}
		int dt = new int[n];
		Arrays.fill(dt,-1);
		int low = new int[n];
		boolean visited = new boolean[n];
		List<List<Integer>> critical = new ArrayList<>();
		dfs(graph,0,-1,dt,low,visited,critical);
		return critical;
	}
	void dfs(List<Integer> graph, int curr, int parent, int dt, int low, boolean visited, List<List<Integer>> critical) {
		visited[curr] = true;
		dt[curr] = low[curr] = ++time;
		for (int neighbor: graph[curr]) {	
			if (parent == neighbor) {
				continue;
			}
			if (visited[neighbor]) {
				low[curr] = Math.min(low[curr],dt[neighbor]);
			} 
			else {
				dfs(graph,neighbor,curr,dt,low,visited,critical);
				low[curr] = Math.min(low[curr],low[neighbor]);
				if (dt[curr] < low[neighbor]) {
					List<Integer> res = new ArrayList<>();
					res.add(curr);
					res.add(neighbor);
					critical.add(res);
				}
			}
		}
	}
}