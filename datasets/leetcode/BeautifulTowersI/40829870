class Solution {
	long helper(int ind, List<Integer> maxHeights) {
		int n = maxHeights.size();
		int[] heights = new int[n];
		heights[ind] = maxHeights.get(ind);
		int i = ind - 1;
		while (i >= 0) {
			if (heights[i + 1] < maxHeights.get(i)) {
				heights[i] = heights[i + 1];
			} 
			else {
				heights[i] = maxHeights.get(i);
			}
			i--;
		}
		i = ind + 1;
		while (i < n) {
			if (heights[i - 1] < maxHeights.get(i)) {
				heights[i] = heights[i - 1];
			} 
			else {
				heights[i] = maxHeights.get(i);
			}
			i++;
		}
		long ans = 0;
		for (int p = 0; p < n; p++) {
			ans += heights[p];
		}
		return ans;
	}
	long maximumSumOfHeights(List<Integer> maxHeights) {
		long ans = 0;
		int n = maxHeights.size();
		for (int i = 0; i < maxHeights.size(); i++) {
			ans = Math.max(ans,helper(i,maxHeights));
		}
		return ans;
	}
}