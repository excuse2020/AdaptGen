class Solution {
	int max = -1;
	boolean[] visited;
	int check(int i, Map<Integer, Integer> map, boolean[] inStack) {
		Map<Integer, Integer> vis = new HashMap<>();
		int len = 0;
		int curr = i;
		while (curr != -1 && !vis.containsKey(curr)) {
			if (visited[curr]) {
				return max;
			}
			vis.put(curr,len++);
			inStack[curr] = true;
			curr = map.get(curr);
		}
		if (curr != -1 && vis.containsKey(curr)) {
			max = Math.max(max,len - vis.get(curr));
		}
		for (int node: vis.keySet()) {	
			visited[node] = true;
			inStack[node] = false;
		}
		return max;
	}
	int longestCycle(int[] edges) {
		Map<Integer, Integer> map = new HashMap<>();
		visited = new boolean[edges.length];
		boolean[] inStack = new boolean[edges.length];
		for (int i = 0; i < edges.length; i++) {
			map.put(i,edges[i]);
		}
		for (int i = 0; i < edges.length; i++) {
			if (edges[i] != -1 && !visited[i]) {
				check(i,map,inStack);
			}
		}
		return max;
	}
}