class Solution {
	Map<Integer, List<TreeNode>> memo = new HashMap<>();
	List<TreeNode> allPossibleFBT(int n) {
		List<TreeNode> res = new ArrayList<>();
		if (n % 2 == 0) {
			return res;
		}
		if (n == 1) {
			res.add(new TreeNode(0));
			return res;
		}
		if (memo.containsKey(n)) {
			return memo.get(n);
		}
		n -= 1;
		for (int i = 1; i < n; i += 2) {
			List<TreeNode> left = allPossibleFBT(i);
			List<TreeNode> right = allPossibleFBT(n - i);
			for (TreeNode nl: left) {	
				for (TreeNode nr: right) {	
					TreeNode cur = new TreeNode(0);
					cur.left = nl;
					cur.right = nr;
					res.add(cur);
				}
			}
		}
		memo.put(n + 1,res);
		return res;
	}
}