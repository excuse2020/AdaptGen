class Solution {
	int[] parent;
	int[] rank;
	int find(int x) {
		if (parent[x] == x) {
			return x;
		}
		return parent[x] = find(parent[x]);
	}
	String smallestStringWithSwaps(String s, List<List<Integer>> pairs) {
		int n = s.length();
		parent = new int[n];
		rank = new int[n];
		for (int i = 0; i < n; i++) {
			parent[i] = i;
			rank[i] = 1;
		}
		for (List<Integer> l: pairs) {	
			union(l.get(0),l.get(1));
		}
		HashMap<Integer, PriorityQueue<Character>> map = new HashMap<>();
		for (int i = 0; i < n; i++) {
			int parent = find(i);
			PriorityQueue<Character> temp = new PriorityQueue<>();
			if (map.containsKey(parent)) {
				temp = map.get(parent);
			}
			temp.add(s.charAt(i));
			map.put(parent,temp);
		}
		char[] ans = s.toCharArray();
		for (int i = 0; i < n; i++) {
			ans[i] = map.get(find(i)).poll();
		}
		return new String(ans);
	}
	void union(int a, int b) {
		a = find(a);
		b = find(b);
		if (a != b) {
			if (rank[a] > rank[b]) {
				parent[b] = a;
			} 
			else if (rank[b] > rank[a]) {
				parent[a] = b;
			} 
			else {
				parent[b] = a;
				rank[a]++;
			}
		}
	}
}