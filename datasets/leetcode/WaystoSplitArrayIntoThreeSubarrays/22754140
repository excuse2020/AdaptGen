class Solution {
	int bs(int[] A, boolean leftSearch, int index, int leftSum) {
		int lo = index, hi = A.length - 2, res = -1;
		while (lo <= hi) {
			int m = (lo + hi) / 2;
			int midSum = A[m] - leftSum;
			int rightSum = A[A.length - 1] - A[m];
			if (leftSum <= midSum && midSum <= rightSum) {
				res = m;
				if (leftSearch) {
					hi = m - 1;
				} 
				else {
					lo = m + 1;
				}
			} 
			else if (midSum > rightSum) {
				hi = m - 1;
			} 
			else {
				lo = m + 1;
			}
		}
		return res;
	}
	int waysToSplit(int[] nums) {
		int n = nums.length;
		int MOD = 1_000_000_007;
		int[] prefixSum = new int[n];
		long res = 0l;
		prefixSum[0] = nums[0];
		for (int i = 1; i < n; i++) {
			prefixSum[i] += prefixSum[i - 1] + nums[i];
		}
		for (int i = 1; i < n - 1; i++) {
			int left = bs(prefixSum,true,i,prefixSum[i - 1]);
			int right = bs(prefixSum,false,i,prefixSum[i - 1]);
			if (left == -1 || right == -1) {
				continue;
			}
			res = (res + (right - left + 1) % MOD) % MOD;
		}
		return (int) res;
	}
}