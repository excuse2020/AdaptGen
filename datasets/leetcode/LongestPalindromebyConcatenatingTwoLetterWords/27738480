class Solution {
	int longestPalindrome(String[] words) {
		HashMap<String, Integer> hs = new HashMap<String, Integer>();
		for (int i = 0; i < words.length; i++) {
			String s = words[i];
			if (hs.containsKey(s)) {
				hs.put(s,hs.get(s) + 1);
			} 
			else {
				hs.put(s,1);
			}
		}
		int value = 0;
		int flag = 0;
		for (Map.Entry<String, Integer> set: hs.entrySet()) {	
			String p = set.getKey();
			if (p.charAt(0) == p.charAt(1)) {
				int a = set.getValue();
				if (a % 2 != 0) {
					flag = 1;
				}
				value = value + 4 * (a / 2);
			} 
			else {
				if (p.charAt(0) < p.charAt(1)) {
					String m = "" + p.charAt(1);
					if (hs.containsKey(m)) {
						int x = Math.min(hs.get(m),hs.get(p));
						value = value + 4 * x;
					}
				}
			}
		}
		if (flag == 1) {
			value = value + 2;
		}
		return value;
	}
}