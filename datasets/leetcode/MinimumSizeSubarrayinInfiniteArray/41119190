class Solution {
	int minSizeSubarray(int[] nums, int target) {
		int baseLen = 0;
		int n = nums.length;
		int sm = 0;
		for (int num: nums) {	
			sm += num;
		}
		if (target > sm) {
			baseLen = (target / sm) * n;
			target = target % sm;
		}
		int[] extendedNums = new int[2 * n];
		for (int i = 0; i < 2 * n; i++) {
			extendedNums[i] = nums[i % n];
		}
		int left = 0;
		int right = 0;
		int x = 0;
		int minLen = Integer.MAX_VALUE;
		while (right < 2 * n) {
			while (right < 2 * n && x < target) {
				x += extendedNums[right];
				right++;
			}
			while (left < right && x > target) {
				x -= extendedNums[left];
				left++;
			}
			if (x == target) {
				minLen = Math.min(minLen,right - left);
				left++;
				right = left;
				x = 0;
			}
		}
		if (minLen == Integer.MAX_VALUE) {
			return -1;
		}
		return baseLen + minLen;
	}
}