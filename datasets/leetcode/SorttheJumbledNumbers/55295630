class Solution {
	void merge(int[] arr, int[] indices, int left, int mid, int right) {
		int n1 = mid - left + 1;
		int n2 = right - mid;
		int[] L = new int[n1];
		int[] R = new int[n2];
		int[] LIndices = new int[n1];
		int[] RIndices = new int[n2];
		for (int i = 0; i < n1; i++) {
			L[i] = arr[left + i];
			LIndices[i] = indices[left + i];
		}
		for (int j = 0; j < n2; j++) {
			R[j] = arr[mid + 1 + j];
			RIndices[j] = indices[mid + 1 + j];
		}
		int i = 0, j = 0, k = left;
		while (i < n1 && j < n2) {
			if (L[i] <= R[j]) {
				arr[k] = L[i];
				indices[k] = LIndices[i];
				i++;
			} 
			else {
				arr[k] = R[j];
				indices[k] = RIndices[j];
				j++;
			}
			k++;
		}
		while (i < n1) {
			arr[k] = L[i];
			indices[k] = LIndices[i];
			i++;
			k++;
		}
		while (j < n2) {
			arr[k] = R[j];
			indices[k] = RIndices[j];
			j++;
			k++;
		}
	}
	void mergeSort(int[] arr, int[] indices, int left, int right) {
		if (left < right) {
			int mid = left + (right - left) / 2;
			mergeSort(arr,indices,left,mid);
			mergeSort(arr,indices,mid + 1,right);
			merge(arr,indices,left,mid,right);
		}
	}
	int[] sortJumbled(int[] mapping, int[] nums) {
		int n = nums.length;
		int[] arr = new int[n];
		int[] ans = new int[n];
		for (int i = 0; i < n; i++) {
			int number = nums[i], m = 1, p = 0;
			if (number == 0) {
				arr[i] = mapping[0];
			} 
			else {
				while (number != 0) {
					int digit = number % 10;
					number = number / 10;
					p = p + (mapping[digit] * m);
					m = m * 10;
				}
				arr[i] = p;
			}
		}
		int[] indices = new int[n];
		for (int i = 0; i < n; i++) {
			indices[i] = i;
		}
		mergeSort(arr,indices,0,n - 1);
		for (int i = 0; i < n; i++) {
			ans[i] = nums[indices[i]];
		}
		return ans;
	}
}