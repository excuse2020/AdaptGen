class Solution {
	int BinarySearch(MountainArray arr, int target, int start, int end, boolean isAsc) {
		while (start <= end) {
			int mid = start + (end - start) / 2;
			if (isAsc) {
				if (target > arr.get(mid)) {
					start = mid + 1;
				} 
				else if (target == arr.get(mid)) {
					return mid;
				} 
				else {
					end = mid - 1;
				}
			} 
			else {
				if (target < arr.get(mid)) {
					start = mid + 1;
				} 
				else if (target == arr.get(mid)) {
					return mid;
				} 
				else {
					end = mid - 1;
				}
			}
		}
		return -1;
	}
	int findInMountainArray(int target, MountainArray mountainArr) {
		int peak = peakElement(mountainArr,target);
		boolean isAsc = mountainArr.get(0) < mountainArr.get(peak);
		int result = BinarySearch(mountainArr,target,0,peak,isAsc);
		if (result != -1) {
			return result;
		} 
		else {
			int sol = BinarySearch(mountainArr,target,peak,mountainArr.length() - 1,false);
			return sol;
		}
	}
	int peakElement(MountainArray arr, int target) {
		int start = 0;
		int end = arr.length() - 1;
		while (start < end) {
			int mid = start + (end - start) / 2;
			if (arr.get(mid) > arr.get(mid + 1)) {
				end = mid;
			} 
			else if (arr.get(mid) < arr.get(mid + 1)) {
				start = mid + 1;
			}
		}
		return start;
	}
}