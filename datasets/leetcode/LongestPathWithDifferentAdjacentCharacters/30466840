class Solution {
	int longPath = -1;
	int longestPath(int[] parent, String s) {
		List<List<Integer>> adj = new ArrayList<>();
		for (int i = 0; i < parent.length; i++) {
			adj.add(new ArrayList<>());
		}
		for (int i = 1; i < parent.length; i++) {
			adj.get(parent[i]).add(i);
			adj.get(i).add(parent[i]);
		}
		boolean[] visited = new boolean[parent.length];
		util(0,adj,s,visited);
		return longPath;
	}
	int util(int root, List<List<Integer>> adj, String s, boolean[] visited) {
		visited[root] = true;
		int max = 0, max1 = 0;
		for (int v: adj.get(root)) {	
			if (visited[v]) {
				continue;
			}
			int value = util(v,adj,s,visited);
			if (s.charAt(v) != s.charAt(root)) {
				if (value > max) {
					max1 = max;
					max = value;
				} 
				else if (value > max1) {
					max1 = value;
				}
			}
		}
		longPath = Math.max(longPath,max + max1);
		return max + 1;
	}
}