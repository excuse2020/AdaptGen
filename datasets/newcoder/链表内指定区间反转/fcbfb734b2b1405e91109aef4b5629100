class Solution {
	ListNode reverseBetween(ListNode head, int m, int n) {
		if (head == null || head.next == null || m == n) {
			return head;
		}
		ListNode head0 = head;
		ListNode prep0 = head;
		int m0 = m - 2;
		while (m0 > 0) {
			prep0 = prep0.next;
			m0--;
		}
		if (m == 1) {
			prep0 = null;
			head0 = head;
		} 
		else {
			head0 = prep0.next;
		}
		ListNode head1 = head;
		ListNode prep1 = head;
		int n0 = n - 2;
		while (n0 > 0) {
			prep1 = prep1.next;
			n0--;
		}
		if (n == 1) {
			prep1 = null;
			head1 = head;
		} 
		else {
			head1 = prep1.next;
		}
		ListNode tail = head1.next;
		ListNode prep = prep0;
		ListNode next = head0.next;
		ListNode head0Temp = head0;
		while (head0 != tail) {
			next = head0.next;
			head0.next = prep;
			prep = head0;
			head0 = next;
		}
		if (m != 1) {
			prep0.next = head1;
		}
		head0Temp.next = tail;
		return m == 1 ? prep : head;
	}
}