class Solution {
	boolean compare(ListNode A, ListNode B) {
		while (B != null) {
			if (A.val != B.val) {
				return false;
			}
			A = A.next;
			B = B.next;
		}
		return true;
	}
	boolean isPail(ListNode head) {
		if (head == null || head.next == null) {
			return true;
		}
		ListNode A_end = mid(head);
		ListNode B_start = A_end.next;
		A_end.next = null;
		B_start = reverse(B_start);
		boolean res = compare(head,B_start);
		A_end.next = reverse(B_start);
		return res;
	}
	ListNode mid(ListNode head) {
		ListNode f = head;
		ListNode s = head;
		while (f.next != null && f.next.next != null) {
			f = f.next.next;
			s = s.next;
		}
		return s;
	}
	ListNode reverse(ListNode head) {
		ListNode pre = null;
		ListNode tmp = null;
		while (head != null) {
			tmp = head.next;
			head.next = pre;
			pre = head;
			head = tmp;
		}
		return pre;
	}
}