class Solution {
	int swimInWater(int[][] grid) {
		int rowLen = grid.length - 1;
		int colLen = grid[0].length - 1;
		boolean visited = new boolean[rowLen + 1][colLen + 1];
		Queue<int[]> heap = new PriorityQueue<>((a, b) -> {a[2] - b[2]});
		int maxElevation = -1;
		heap.add(new int{0, 0, grid[0][0]});
		while (!heap.isEmpty()) {
			int row = heap.peek()[0];
			int col = heap.peek()[1];
			int weight = heap.peek()[2];
			heap.poll();
			if (visited[row][col]) {
				continue;
			}
			visited[row][col] = true;
			maxElevation = Math.max(maxElevation,weight);
			if (row == rowLen && col == colLen) {
				break;
			}
			if (row < rowLen) {
				heap.add(new int{row + 1, col, grid[row + 1][col]});
			}
			if (row > 0) {
				heap.add(new int{row - 1, col, grid[row - 1][col]});
			}
			if (col < colLen) {
				heap.add(new int{row, col + 1, grid[row][col + 1]});
			}
			if (col > 0) {
				heap.add(new int{row, col - 1, grid[row][col - 1]});
			}
		}
		return maxElevation;
	}
}