class Solution {
	ListNode addTwoNumbers(ListNode l1, ListNode l2) {
		int x, y, carry = 0, sum = 0;
		ListNode head = new ListNode(0);
		ListNode current = head;
		while (l1 != null && l2 != null) {
			x = l1.val;
			y = l2.val;
			sum = x + y;
			carry = 0;
			if (sum > 9) {
				carry = sum / 10;
				sum = sum % 10;
			}
			ListNode newNode = new ListNode(sum);
			current.next = newNode;
			current = newNode;
			l1 = l1.next;
			l2 = l2.next;
		}
		while (l1 != null) {
			x = l1.val;
			sum = x + carry;
			carry = sum / 10;
			sum = sum % 10;
			ListNode newNode = new ListNode(sum);
			current.next = newNode;
			current = newNode;
			l1 = l1.next;
		}
		while (l2 != null) {
			y = l2.val;
			sum = y + carry;
			carry = sum / 10;
			sum = sum % 10;
			ListNode newNode = new ListNode(sum);
			current.next = newNode;
			current = newNode;
			l2 = l2.next;
		}
		if (carry != 0) {
			ListNode newNode = new ListNode(carry);
			current.next = newNode;
		}
		return head.next;
	}
}
class Main {
	void main(String[] args) {
		ListNode list1 = new ListNode(2);
		list1.next = new ListNode(4);
		list1.next.next = new ListNode(3);
		ListNode list2 = new ListNode(5);
		list2.next = new ListNode(6);
		list2.next.next = new ListNode(4);
		Solution s = new Solution();
		ListNode result = s.addTwoNumbers(list1,list2);
		while (result != null) {
			System.out.print(result.val + " -> ");
			result = result.next;
		}
		System.out.println("null");
	}
}