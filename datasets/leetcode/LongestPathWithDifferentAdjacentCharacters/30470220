class Solution {
	int result = 0;
	int longestPath(int[] parent, String s) {
		int n = parent.length;
		ArrayList<ArrayList<Integer>> adj = new ArrayList<>();
		for (int i = 0; i < n; i++) {
			adj.add(new ArrayList<>());
		}
		for (int i = 1; i < n; i++) {
			adj.get(i).add(parent[i]);
			adj.get(parent[i]).add(i);
		}
		result = 0;
		solution(0,adj,-1,s);
		return result;
	}
	int solution(int root, ArrayList<ArrayList<Integer>> adj, int parent, String s) {
		int largest = 0, slargest = 0;
		for (int e: adj.get(root)) {	
			if (e == parent) {
				continue;
			}
			int childLongestLength = solution(e,adj,root,s);
			if (s.charAt(e) == s.charAt(root)) {
				continue;
			}
			if (childLongestLength > largest) {
				slargest = largest;
				largest = childLongestLength;
			} 
			else if (slargest < childLongestLength) {
				slargest = childLongestLength;
			}
		}
		int onlyRoot = 1;
		int onlyOneSide = 1 + Math.max(largest,slargest);
		int onlyBelowSubTree = 1 + largest;
		result = Math.max(result,onlyOneSide);
		result = Math.max(result,onlyBelowSubTree);
		result = Math.max(result,onlyRoot);
		return Math.max(onlyRoot,onlyOneSide);
	}
}