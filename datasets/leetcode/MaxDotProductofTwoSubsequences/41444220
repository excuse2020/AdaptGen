class Solution {
	Integer[][] memo;
	int[] nums1;
	int[] nums2;
	int dp(int i1, int i2) {
		if (i1 == nums1.length || i2 == nums2.length) {
			return 0;
		}
		if (memo[i1][i2] != null) {
			return memo[i1][i2];
		}
		int res1 = nums1[i1] * nums2[i2];
		int res2 = nums1[i1] * nums2[i2] + dp(i1 + 1,i2 + 1);
		int res3 = res2;
		if (i1 < nums1.length - 1) {
			res3 = dp(i1 + 1,i2);
		}
		int res4 = res2;
		if (i2 < nums2.length - 1) {
			res4 = dp(i1,i2 + 1);
		}
		int tmp1 = Math.max(res1,res2);
		int tmp2 = Math.max(res3,res4);
		int max = Math.max(tmp1,tmp2);
		memo[i1][i2] = max;
		return max;
	}
	int maxDotProduct(int[] nums1, int[] nums2) {
		memo = new Integer[nums1.length][nums2.length];
		this.nums1 = nums1;
		this.nums2 = nums2;
		return dp(0,0);
	}
}