class Solution {
	int maxMoves(int[][] grid) {
		int m = grid.length;
		int n = grid[0].length;
		int dp = new int[m];
		int dp1 = new int[m];
		Arrays.fill(dp,0);
		int mx = 0;
		for (int c = 1; c < n; c++) {
			for (int r = 0; r < m; r++) {
				if ((c == 1 || dp[r] > 0) && grid[r][c] > grid[r][c - 1]) {
					dp1[r] = Math.max(dp1[r],dp[r] + 1);
				}
				if (r > 0 && (c == 1 || dp[r - 1] > 0) && grid[r][c] > grid[r - 1][c - 1]) {
					dp1[r] = Math.max(dp1[r],dp[r - 1] + 1);
				}
				if (r + 1 < m && (c == 1 || dp[r + 1] > 0) && grid[r][c] > grid[r + 1][c - 1]) {
					dp1[r] = Math.max(dp1[r],dp[r + 1] + 1);
				}
				mx = Math.max(dp1[r],mx);
			}
			System.arraycopy(dp1,0,dp,0,dp1.length);
			Arrays.fill(dp1,0);
		}
		return mx;
	}
}