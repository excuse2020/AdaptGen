class Solution {
	int binarySearch(MountainArray mountainArr, int target, int start, int end) {
		boolean isAsc;
		isAsc = mountainArr.get(start) < mountainArr.get(end);
		while (start <= end) {
			int mid = start + (end - start) / 2;
			if (mountainArr.get(mid) == target) {
				return mid;
			}
			if (isAsc) {
				if (target < mountainArr.get(mid)) {
					end = mid - 1;
				} 
				else {
					start = mid + 1;
				}
			} 
			else {
				if (target > mountainArr.get(mid)) {
					end = mid - 1;
				} 
				else {
					start = mid + 1;
				}
			}
		}
		return -1;
	}
	int findInMountainArray(int target, MountainArray mountainArr) {
		int size = mountainArr.length();
		int start = 0;
		int end = size - 1;
		while (start < end) {
			int mid = start + (end - start) / 2;
			if (mountainArr.get(mid) > mountainArr.get(mid + 1)) {
				end = mid;
			} 
			else if (mountainArr.get(mid) < mountainArr.get(mid + 1)) {
				start = mid + 1;
			}
		}
		int peakIndex = end;
		int ans1 = binarySearch(mountainArr,target,0,peakIndex);
		if (ans1 != -1) {
			return ans1;
		} 
		else {
			return binarySearch(mountainArr,target,peakIndex + 1,size - 1);
		}
	}
}