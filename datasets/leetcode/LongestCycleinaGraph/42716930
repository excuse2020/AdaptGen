class Solution {
	int longestCycle(int[] edges) {
		boolean[] visited = new boolean[edges.length];
		int result = -1;
		for (int i = 0; i < edges.length; i++) {
			if (visited[i]) {
				continue;
			}
			Map<Integer, Integer> distancesFromI = new HashMap<>();
			int cur = i;
			int dist = 0;
			while (cur != -1 && !visited[cur]) {
				visited[cur] = true;
				distancesFromI.put(cur,dist++);
				cur = edges[cur];
			}
			Integer distToLoopStart = distancesFromI.get(cur);
			if (distToLoopStart != null) {
				result = Math.max(result,distancesFromI.size() - distToLoopStart);
			}
		}
		return result;
	}
}