class Solution {
	ListNode findMid(ListNode head) {
		ListNode fast = head;
		ListNode prev = head;
		while (fast != null && fast.next != null) {
			prev = head;
			head = head.next;
			fast = fast.next.next;
		}
		prev.next = null;
		return head;
	}
	TreeNode sortedListToBST(ListNode head) {
		if (head == null) {
			return null;
		}
		if (head.next == null) {
			TreeNode node = new TreeNode(head.val);
			return node;
		}
		ListNode mid = findMid(head);
		TreeNode root = new TreeNode(mid.val);
		root.left = sortedListToBST(head);
		root.right = sortedListToBST(mid.next);
		return root;
	}
}