class Solution {
	int[][] memo;
	int dp(int k, int n) {
		if (k == 1) {
			return n;
		}
		if (n == 0) {
			return 0;
		}
		if (memo[k][n] != -1) {
			return memo[k][n];
		}
		int res = Integer.MAX_VALUE;
		int lo = 1, hi = n;
		while (lo <= hi) {
			int mid = lo + ((hi - lo) >> 1);
			int broken = dp(k - 1,mid - 1);
			int unBroken = dp(k,n - mid);
			if (broken > unBroken) {
				hi = mid - 1;
				res = Math.min(res,broken + 1);
			} 
			else {
				lo = mid + 1;
				res = Math.min(res,unBroken + 1);
			}
		}
		memo[k][n] = res;
		return res;
	}
	int solve(int n, int k) {
		memo = new int[k + 1][n + 1];
		for (int[] m: memo) {	
			Arrays.fill(m,-1);
		}
		return dp(k,n);
	}
}