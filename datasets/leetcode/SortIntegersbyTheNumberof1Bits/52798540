class Solution {
	int countBits(int n) {
		int c = 0;
		while (n > 0) {
			int chk = n & 1;
			if (chk != 0) {
				c++;
			}
			n >>= 1;
		}
		return c;
	}
	int[] sortByBits(int[] a) {
		Arrays.sort(a);
		HashMap<Integer, List<Integer>> map = new HashMap<>();
		for (int i: a) {	
			int one = countBits(i);
			if (map.containsKey(one)) {
				map.get(one).add(i);
			} 
			else {
				List<Integer> lst = new ArrayList<>();
				lst.add(i);
				map.put(one,lst);
			}
		}
		int idx = 0;
		for (int i: map.keySet()) {	
			for (int j = 0; j < map.get(i).size(); j++) {
				a[idx++] = map.get(i).get(j);
			}
		}
		return a;
	}
}