class Solution {
	int minimumOperations(int[] nums, int start, int goal) {
		Queue<Integer> queue = new LinkedList<>();
		Set<Integer> visited = new HashSet<>();
		queue.add(start);
		visited.add(start);
		int operations = 0;
		while (!queue.isEmpty()) {
			int size = queue.size();
			for (int i = 0; i < size; i++) {
				int current = queue.poll();
				if (current == goal) {
					return operations;
				}
				for (int num: nums) {	
					int add = current + num;
					int subtract = current - num;
					int xor = current ^ num;
					if (add == goal || subtract == goal || xor == goal) {
						return operations + 1;
					}
					if (add >= 0 && add <= 1000 && visited.add(add)) {
						queue.add(add);
					}
					if (subtract >= 0 && subtract <= 1000 && visited.add(subtract)) {
						queue.add(subtract);
					}
					if (xor >= 0 && xor <= 1000 && visited.add(xor)) {
						queue.add(xor);
					}
				}
			}
			operations++;
		}
		return -1;
	}
}