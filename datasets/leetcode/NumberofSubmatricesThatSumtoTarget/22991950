class Solution {
	boolean matrixSum(int[][] matrix, int minI, int maxI, int minJ, int maxJ, int[][] prefix, int target) {
		int sum = prefix[maxI][maxJ] - prefix[maxI][minJ - 1] + prefix[minI - 1][minJ - 1];
		return sum == target;
	}
	int numSubmatrixSumTarget(int[][] matrix, int target) {
		int row = matrix.length;
		int col = matrix[0].length;
		int[][] prefix = new int[row + 1][col + 1];
		for (int i = 1; i <= row; i++) {
			for (int j = 1; j <= col; j++) {
				prefix[i][j] += prefix[i - 1][j] + prefix[i][j - 1] - prefix[i - 1][j - 1] + matrix[i - 1][j - 1];
			}
		}
		int count = 0;
		for (int sRow = 0; sRow < row; sRow++) {
			for (int eRow = sRow; eRow < row; eRow++) {
				for (int sCol = 0; sCol < col; sCol++) {
					for (int eCol = sCol; eCol < col; eCol++) {
						if (matrixSum(matrix,sRow + 1,eRow + 1,sCol + 1,eCol + 1,prefix,target)) {
							count += 1;
						}
					}
				}
			}
		}
		return count;
	}
}