class Solution {
	void backtrack(char[][] board, int r, int c, Node parent, List<String> ans) {
	}
	List<String> findWords(char[][] board, String[] words) {
		Node trie = new Node();
		for (String w: words) {	
			trie.insert(w);
		}
		List<String> ans = new ArrayList<>();
		for (int r = 0; r < board.length; r++) {
			for (int c = 0; c < board[0].length; c++) {
				backtrack(board,r,c,trie,ans);
			}
		}
		return ans;
	}
	class Node {
		Node[] nodes = new Node[26];
		String word;
		boolean contains(char c) {
		}
		boolean hasChildren() {
			for (Node n: nodes) {	
				if (n != null) {
					return true;
				}
			}
			return false;
		}
		void insert(String word) {
			Node[] nodes = this.nodes;
			Node node = null;
			int i = 0;
			char c = word.charAt(i);
		}
	}
}