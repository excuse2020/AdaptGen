class Solution {
	void fill(int[] count, char[] result, int max, int index) {
		int i = max;
	}
	String largestTimeFromDigits(int[] A) {
		int[] count = new int[10];
		for (int n: A) {	
			count[n]++;
		}
		int[] presum = new int[10];
		for (int i = 0; i < 10; i++) {
			presum[i] = i == 0 ? count[0] : presum[i - 1] + count[i];
		}
		char[] result = new char[5];
		if (count[2] >= 1 && presum[3] >= 2 && presum[5] >= 3) {
			fill(count,result,2,0);
			fill(count,result,3,1);
		} 
		else if (presum[1] >= 1 && presum[5] >= 2) {
			fill(count,result,1,0);
			fill(count,result,9,1);
		} 
		else {
			return "";
		}
	}
}