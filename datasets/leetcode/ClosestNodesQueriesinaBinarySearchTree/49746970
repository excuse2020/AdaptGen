class Solution {
	List<Integer> elementList = new ArrayList<>();
	List<List<Integer>> closestNodes(TreeNode root, List<Integer> queries) {
		inorder(root);
		List<List<Integer>> ans = new ArrayList<>();
		int minimum = elementList.get(0);
		int maximum = elementList.get(elementList.size() - 1);
		for (int i = 0; i < queries.size(); i++) {
			ans.add(new ArrayList<>());
		}
		for (int i = 0; i < queries.size(); i++) {
			if (queries.get(i) < minimum) {
				ans.get(i).add(-1);
			} 
			else {
				ans.get(i).add(smaller(elementList,queries.get(i)));
			}
			if (queries.get(i) > maximum) {
				ans.get(i).add(-1);
			} 
			else {
				ans.get(i).add(greater(elementList,queries.get(i)));
			}
		}
		return ans;
	}
	int greater(List<Integer> list, int n) {
		int left = 0;
		int right = list.size() - 1;
		int ans = 0;
		while (left <= right) {
			int mid = left + (right - left) / 2;
			if (list.get(mid) == n) {
				return list.get(mid);
			}
			if (list.get(mid) > n) {
				ans = list.get(mid);
				right = mid - 1;
			} 
			else {
				left = mid + 1;
			}
		}
		return ans;
	}
	void inorder(TreeNode root) {
		if (root == null) {
			return;
		}
		inorder(root.left);
		elementList.add(root.val);
		inorder(root.right);
	}
	int smaller(List<Integer> list, int n) {
		int left = 0;
		int right = list.size() - 1;
		int ans = 0;
		while (left <= right) {
			int mid = left + (right - left) / 2;
			if (list.get(mid) == n) {
				return list.get(mid);
			}
			if (list.get(mid) > n) {
				right = mid - 1;
			} 
			else {
				ans = list.get(mid);
				left = mid + 1;
			}
		}
		return ans;
	}
}