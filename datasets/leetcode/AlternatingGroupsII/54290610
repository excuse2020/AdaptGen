class Solution {
	int f(int colors, int k) {
		int nums = colors;
		int n = colors.length;
		List<Integer> List = new ArrayList<>();
		for (int i: nums) {	
			List.add(i);
		}
		for (int i = 0; i < k - 1; i++) {
			List.add(nums[i]);
		}
		int ans = 0;
		n = List.size();
		int cnt = 1;
		int curr = 0;
		int prev = -1;
		for (int i = 1; i < n; i++) {
			prev = List.get(i - 1);
			curr = List.get(i);
			if (prev != curr) {
				cnt++;
			} 
			else {
				int temp = cnt - (k - 1);
				if (temp > 0) {
					ans += temp;
				}
				cnt = 1;
			}
		}
		if (cnt > 0) {
			int temp = cnt - (k - 1);
			if (temp > 0) {
				ans += temp;
			}
		}
		return ans;
	}
	int f2(int colors, int k) {
		int nums = colors;
		int n = colors.length;
		List<Integer> List = new ArrayList<>();
		for (int i = ((n) - k + 1); i < n; i++) {
			List.add(nums[i]);
		}
		for (int i: nums) {	
			List.add(i);
		}
		int ans = 0;
		n = List.size();
		int cnt = 1;
		int curr = 0;
		int prev = -1;
		for (int i = 1; i < n; i++) {
			prev = List.get(i - 1);
			curr = List.get(i);
			if (prev != curr) {
				cnt++;
			} 
			else {
				int temp = cnt - (k - 1);
				if (temp > 0) {
					ans += temp;
				}
				cnt = 1;
			}
		}
		if (cnt > 0) {
			int temp = cnt - (k - 1);
			if (temp > 0) {
				ans += temp;
			}
		}
		return ans;
	}
	int numberOfAlternatingGroups(int[] colors, int k) {
		return Math.max(f(colors,k),f2(colors,k));
	}
}