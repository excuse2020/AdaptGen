class Solution {
	Map<Integer, Integer> map = new HashMap<>();
	int countMaxOrSubsets(int[] nums) {
		f(nums,0,new ArrayList<>());
		int key = Collections.max(map.keySet());
		return map.get(key);
	}
	void f(int nums, int start, List<Integer> temp) {
		int orResult = getBitwiseOR(temp);
		map.put(orResult,map.getOrDefault(orResult,0) + 1);
		for (int i = start; i < nums.length; ++i) {
			temp.add(nums[i]);
			f(nums,i + 1,temp);
			temp.remove(temp.size() - 1);
		}
	}
	int getBitwiseOR(List<Integer> nums) {
		int result = 0;
		for (int i: nums) {	
			result |= i;
		}
		return result;
	}
}