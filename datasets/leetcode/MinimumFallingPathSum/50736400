class Solution {
	int[][] dp;
	int dfs(int row, int col, int[][] arr) {
		if (row == arr.length) {
			return 0;
		}
		if (col < 0 || col >= arr[0].length) {
			return Integer.MAX_VALUE;
		}
		if (dp[row][col] != Integer.MAX_VALUE) {
			return dp[row][col];
		}
		return dp[row][col] = arr[row][col] + Math.min(dfs(row + 1,col - 1,arr),Math.min(dfs(row + 1,col,arr),dfs(row + 1,col + 1,arr)));
	}
	int minFallingPathSum(int[][] matrix) {
		dp = new int[matrix.length][matrix[0].length];
		for (int[] subDp: dp) {	
			Arrays.fill(subDp,Integer.MAX_VALUE);
		}
		int ans = Integer.MAX_VALUE;
		for (int i = 0; i < matrix[0].length; i++) {
			ans = Math.min(ans,dfs(0,i,matrix));
		}
		return ans;
	}
}