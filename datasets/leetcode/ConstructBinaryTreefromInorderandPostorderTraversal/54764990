class Solution {
	TreeNode buildTree(int[] inorder, int[] postorder) {
		if (inorder == null || postorder == null || inorder.length != postorder.length) {
			return null;
		}
		HashMap<Integer, Integer> hm = new HashMap<Integer, Integer>();
		for (int i = 0; i < inorder.length; ++i) {
			hm.put(inorder[i],i);
		}
		return buildTree(inorder,0,inorder.length - 1,postorder,0,postorder.length - 1,hm);
	}
	TreeNode buildTree(int[] inorder, int is, int ie, int[] postorder, int ps, int pe, HashMap<Integer, Integer> hm) {
		if (ps > pe || is > ie) {
			return null;
		}
		TreeNode root = new TreeNode(postorder[pe]);
		int inroot = hm.get(postorder[pe]);
		int numsleft = inroot - is;
		root.left = buildTree(inorder,is,inroot - 1,postorder,ps,ps + numsleft - 1,hm);
		root.right = buildTree(inorder,inroot + 1,ie,postorder,ps + numsleft,pe - 1,hm);
		return root;
	}
}