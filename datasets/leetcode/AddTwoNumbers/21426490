class Solution {
	ListNode addTwoNumbers(ListNode l1, ListNode l2) {
		ListNode s1 = l1;
		ListNode s2 = l2;
		ListNode ans = new ListNode(0);
		int carry = 0;
		if (s1 != null && s2 != null) {
			int temp = s1.val + s2.val;
			if (temp > 9) {
				carry = temp / 10;
				ans.val = temp % 10;
			} 
			else {
				ans.val = temp;
			}
		}
		s1 = s1.next;
		s2 = s2.next;
		ListNode ansNode = ans;
		while (s1 != null && s2 != null) {
			int temp = s1.val + s2.val;
			if (temp > 9) {
				carry = temp / 10;
				ListNode newNode = new ListNode(temp % 10);
				ansNode.next = newNode;
			} 
			else {
				carry = 0;
				ListNode newNode = new ListNode(temp);
				ansNode.next = newNode;
			}
			s1 = s1.next;
			s2 = s2.next;
			ansNode = ansNode.next;
		}
		while (s1 != null) {
			int temp = s1.val + carry;
			if (temp > 9) {
				carry = temp / 10;
				ansNode.next = new ListNode(temp % 10);
			} 
			else {
				carry = 0;
				ansNode.next = new ListNode(temp);
			}
			s1 = s1.next;
			ansNode = ansNode.next;
		}
		while (s2 != null) {
			int temp = s2.val + carry;
			if (temp > 9) {
				carry = temp / 10;
				ansNode.next = new ListNode(temp % 10);
			} 
			else {
				carry = 0;
				ansNode.next = new ListNode(temp);
			}
			s2 = s2.next;
			ansNode = ansNode.next;
		}
		if (carry > 0) {
			ansNode.next = new ListNode(carry);
			ansNode = ansNode.next;
			ansNode.next = null;
		}
		return ans;
	}
}