class Solution {
	Map<TreeNode, Integer> dh = new HashMap<>();
	boolean IsBalanced_Solution(TreeNode pRoot) {
		depth(pRoot);
		return isBalancedTree(pRoot);
	}
	Integer depth(TreeNode root) {
		if (root == null) {
			return 0;
		}
		if (dh.containsKey(root)) {
			return dh.get(root);
		}
		int d = Math.max(depth(root.left),depth(root.right)) + 1;
		dh.put(root,d);
		return d;
	}
	boolean isBalancedTree(TreeNode root) {
		if (root == null) {
			return true;
		}
		if (!isBalancedTree(root.left)) {
			return false;
		}
		if (!isBalancedTree(root.right)) {
			return false;
		}
		return Math.abs(depth(root.left) - depth(root.right)) <= 1;
	}
}