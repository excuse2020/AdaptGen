class Solution {
	int maxPathLen = 0;
	int root = 0;
	List<Integer>[] buildTree(int[] parent) {
		List<Integer>[] tree = new ArrayList[parent.length];
		for (int index = 0; index < parent.length; index++) {
			tree[index] = new ArrayList<>();
		}
		for (int index = 0; index < parent.length; index++) {
			if (parent[index] == -1) {
				root = index;
				continue;
			}
			tree[parent[index]].add(index);
		}
		return tree;
	}
	int dfs(List<Integer>[] tree, String s, int parent) {
		int max1 = 0;
		int max2 = 0;
		for (Integer child: tree[parent]) {	
			int max = dfs(tree,s,child);
			if (s.charAt(child) == s.charAt(parent)) {
				max = 0;
				continue;
			} 
			else {
				max++;
			}
			if (max1 < max) {
				max2 = max1;
				max1 = max;
			} 
			else if (max2 < max) {
				max2 = max;
			}
		}
		maxPathLen = Math.max(maxPathLen,max1 + max2);
		return max1;
	}
	int longestPath(int[] parent, String s) {
		List<Integer>[] tree = buildTree(parent);
		dfs(tree,s,root);
		return maxPathLen + 1;
	}
}