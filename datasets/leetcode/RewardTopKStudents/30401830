class Solution {
	HashSet<String> fillHashSet(String[] feedback) {
		HashSet<String> set = new HashSet<>();
		for (String word: feedback) {	
			set.add(word);
		}
		return set;
	}
	List<Integer> topStudents(String[] positive_feedback, String[] negative_feedback, String[] report, int[] student_id, int k) {
		HashSet<String> positiveFeedback = fillHashSet(positive_feedback);
		HashSet<String> negativeFeedback = fillHashSet(negative_feedback);
		PriorityQueue<int[]> studentByScore = new PriorityQueue<>((a, b) -> {a[1] == b[1] ? a[0] - b[0] : b[1] - a[1]});
		for (int i = 0; i < report.length; i++) {
			int raiting = 0;
			String[] reportWords = report[i].split(" ");
			for (String word: reportWords) {	
				if (positiveFeedback.contains(word)) {
					raiting += 3;
				}
				if (negativeFeedback.contains(word)) {
					raiting--;
				}
			}
			studentByScore.add(new int{student_id[i], raiting});
		}
		List<Integer> result = new LinkedList<>();
		for (int i = 0; i < k; i++) {
			result.add(studentByScore.poll()[0]);
		}
		return result;
	}
}