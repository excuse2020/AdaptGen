class Solution {
	int INF = 0x3f3f3f3f;
	int N = 510, M = 5010;
	int[] dist = new int[N];
	int[] he = new int[N], e = new int[M], ne = new int[M], w = new int[M];
	int n, k, idx;
	boolean[] vis = new boolean[N];
	void add(int a, int b, int c) {
		e[idx] = b;
		ne[idx] = he[a];
		he[a] = idx;
		w[idx] = c;
		idx++;
	}
	int findShortestPath(int _n, int _k, int[][] graph) {
		n = _n;
		k = _k;
		Arrays.fill(he,-1);
		for (int[] t: graph) {	
			int u = t[0], v = t[1], c = t[2];
			add(u,v,c);
		}
		spfa();
		return dist[n] >= INF / 2 ? -1 : dist[n];
	}
	void spfa() {
		Arrays.fill(vis,false);
		Arrays.fill(dist,INF);
		dist[1] = 0;
		Deque<Integer> d = new ArrayDeque<>();
		d.addLast(1);
		vis[1] = true;
		while (!d.isEmpty()) {
			int poll = d.pollFirst();
			vis[poll] = false;
			for (int i = he[poll]; i != -1; i = ne[i]) {
				int j = e[i];
				if (dist[j] > dist[poll] + w[i]) {
					dist[j] = dist[poll] + w[i];
					if (vis[j]) {
						continue;
					}
					d.addLast(j);
					vis[j] = true;
				}
			}
		}
	}
}