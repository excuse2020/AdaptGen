class Solution {
	int findMaxFish(int[][] grid) {
		int m = grid.length;
		int n = grid[0].length;
		int max = 0;
		boolean[][] vis = new boolean[m][n];
		for (int i = 0; i < m; i++) {
			for (int j = 0; j < n; j++) {
				if (!vis[i][j] && grid[i][j] > 0) {
					max = Math.max(max,solve(i,j,m,n,grid,vis));
				}
			}
		}
		return max;
	}
	int solve(int i, int j, int m, int n, int[][] grid, boolean[][] vis) {
		if (i < 0 || j < 0 || i == m || j == n || vis[i][j] || grid[i][j] == 0) {
			return 0;
		}
		vis[i][j] = true;
		int total = grid[i][j];
		total += solve(i + 1,j,m,n,grid,vis);
		total += solve(i,j + 1,m,n,grid,vis);
		total += solve(i,j - 1,m,n,grid,vis);
		total += solve(i - 1,j,m,n,grid,vis);
		return total;
	}
}