class Solution {
	boolean canFinish(int numCourses, int[][] prerequisites) {
		ArrayList<ArrayList<Integer>> courses = new ArrayList<>();
		int[] visited = new int[numCourses];
		for (int i = 0; i < numCourses; i++) {
			courses.add(new ArrayList<>());
		}
		for (int[] p: prerequisites) {	
			courses.get(p[1]).add(p[0]);
		}
		for (int i = 0; i < numCourses; i++) {
			if (visited[i] == 0) {
				if (dfs(i,courses,visited) == false) {
					return false;
				}
			}
		}
		return true;
	}
	boolean dfs(int curr, ArrayList<ArrayList<Integer>> courses, int[] visited) {
		visited[curr] = 1;
		ArrayList<Integer> childrenCourses = courses.get(curr);
		for (int i = 0; i < childrenCourses.size(); i++) {
			int child = childrenCourses.get(i);
			if (visited[child] == 1) {
				return false;
			} 
			else if (visited[child] == 0) {
				if (dfs(child,courses,visited) == false) {
					return false;
				}
			}
		}
		visited[curr] = 2;
		return true;
	}
}