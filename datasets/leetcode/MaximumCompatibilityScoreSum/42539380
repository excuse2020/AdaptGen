class Solution {
	int result = 0;
	void dfs(int[][] mat, int start, int size, int sum, boolean[][] selected) {
		if (start == size) {
			result = Math.max(result,sum);
			return;
		}
		for (int i = 0; i < size; i++) {
			if (!isSelected(selected,i,start)) {
				sum += mat[start][i];
				selected[start][i] = true;
				dfs(mat,start + 1,size,sum,selected);
				selected[start][i] = false;
				sum -= mat[start][i];
			}
		}
	}
	boolean isSelected(boolean[][] arr, int s, int e) {
		for (int i = 0; i < arr.length; i++) {
			if (i == e) {
				continue;
			}
			if (arr[i][s]) {
				return true;
			}
		}
		return false;
	}
	int maxCompatibilitySum(int[][] students, int[][] mentors) {
		int l = students.length;
		int[][] mat = new int[l][l];
		for (int i = 0; i < l; i++) {
			for (int j = 0; j < l; j++) {
				int[] s = students[i];
				int[] m = mentors[j];
				int cnt = 0;
				for (int k = 0; k < s.length; k++) {
					cnt += s[k] == m[k] ? 1 : 0;
				}
				mat[i][j] = cnt;
			}
		}
		dfs(mat,0,l,0,new boolean[l][l]);
		return result;
	}
	void print2DArray(int[][] mat) {
		for (int i = 0; i < mat.length; i++) {
			System.out.println(Arrays.toString(mat[i]));
		}
	}
}