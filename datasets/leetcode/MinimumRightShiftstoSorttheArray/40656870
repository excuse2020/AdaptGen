class Solution {
	boolean isSorted(List<Integer> nums, int[] sortedArray) {
		for (int i = 0; i < nums.size(); i++) {
			if (!nums.get(i).equals(sortedArray[i])) {
				return false;
			}
		}
		return true;
	}
	int minimumRightShifts(List<Integer> nums) {
		int n = nums.size();
		int[] sortedArray = nums.stream().sorted().mapToInt().toArray();
		for (int i = 0; i < n; i++) {
			if (isSorted(nums,sortedArray)) {
				return i;
			}
			rightShift(nums);
		}
		return -1;
	}
	void rightShift(List<Integer> nums) {
		int n = nums.size();
		int lastElement = nums.get(n - 1);
		for (int i = n - 1; i > 0; i--) {
			nums.set(i,nums.get(i - 1));
		}
		nums.set(0,lastElement);
	}
}