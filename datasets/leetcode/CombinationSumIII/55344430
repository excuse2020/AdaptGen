class Solution {
	void backtrack(List<List<Integer>> result, List<Integer> currentIntegerList, int k, int n, int start) {
		if (currentIntegerList.size() == k) {
			if (n == 0) {
				result.add(new ArrayList<>(currentIntegerList));
			}
			return;
		}
		for (int i = start; i < 10; i++) {
			currentIntegerList.add(i);
			backtrack(result,currentIntegerList,k,n - i,i + 1);
			currentIntegerList.removeLast();
		}
	}
	List<List<Integer>> combinationSum3(int k, int n) {
		List<List<Integer>> result = new LinkedList<>();
		backtrack(result,new ArrayList<>(k),k,n,1);
		return result;
	}
}