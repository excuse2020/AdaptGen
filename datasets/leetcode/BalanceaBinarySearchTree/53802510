class Solution {
	TreeNode balanceBST(TreeNode root) {
		ArrayList<Integer> list = new ArrayList<>();
		inorderTraversal(root,list);
		int start = 0;
		int end = list.size();
		return constructbinaryTree(list,start,end);
	}
	TreeNode constructbinaryTree(ArrayList<Integer> list, int start, int end) {
		if (start >= end) {
			return null;
		}
		int mid = start + (end - start) / 2;
		TreeNode node = new TreeNode(list.get(mid));
		node.left = constructbinaryTree(list,start,mid);
		node.right = constructbinaryTree(list,mid + 1,end);
		return node;
	}
	void inorderTraversal(TreeNode root, ArrayList<Integer> list) {
		if (root == null) {
			return;
		}
		inorderTraversal(root.left,list);
		list.add(root.val);
		inorderTraversal(root.right,list);
	}
}