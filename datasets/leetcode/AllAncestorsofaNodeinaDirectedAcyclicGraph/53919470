class Solution {
	ArrayList<Integer> ans;
	List<List<Integer>> getAncestors(int n, int[][] edges) {
		ArrayList<Integer> pa = new ArrayList[n];
		ans = new ArrayList[n];
		for (int i = 0; i < n; i++) {
			pa[i] = new ArrayList<>();
			ans[i] = new ArrayList<>();
		}
		for (int i: edges) {	
			pa[i[0]].add(i[1]);
		}
		for (int i = 0; i < n; i++) {
			run(i,i,pa,new boolean[n]);
		}
		ArrayList<List<Integer>> ans1 = new ArrayList<>();
		for (List<Integer> i: ans) {	
			ans1.add(i);
		}
		return ans1;
	}
	void run(int n, int head, ArrayList<Integer>[] pa, boolean bo) {
		bo[n] = true;
		for (int i: pa[n]) {	
			if (bo[i]) {
				continue;
			}
			ans[i].add(head);
			run(i,head,pa,bo);
		}
	}
}