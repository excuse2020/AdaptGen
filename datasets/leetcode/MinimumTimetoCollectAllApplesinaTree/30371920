class Solution {
	int minTime(int n, int[][] edges, List<Boolean> hasApple) {
		int[] parent = new int[n];
		Arrays.fill(parent,-1);
		parent[0] = 0;
		for (int[] edge: edges) {	
			if (parent[edge[1]] == -1) {
				parent[edge[1]] = edge[0];
			} 
			else {
				parent[edge[0]] = edge[1];
			}
		}
		int timeSpent = 0;
		boolean[] visited = new boolean[n];
		visited[0] = true;
		for (int node = 1; node < n; node = $missing$) {
			if (hasApple.get(node)) {
				int parentNode = node;
				while (!visited[parentNode]) {
					visited[parentNode] = true;
					timeSpent++;
					parentNode = parent[parentNode];
				}
			}
		}
		return 2 * timeSpent;
	}
}