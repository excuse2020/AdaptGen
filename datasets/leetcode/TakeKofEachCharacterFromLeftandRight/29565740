class Solution {
	int binSearch(int[][] dp, int l, int r, int[] count) {
		int ans = r + 1;
		int oldr = r;
		int a = count[0], b = count[1], c = count[2];
		if (a <= 0 && b <= 0 && c <= 0) {
			return 0;
		}
		if (a > 0) {
			int minA = r;
			int currL = l;
			while (currL <= r) {
				int mid = (currL + r) / 2;
				if (dp[mid][0] >= a) {
					minA = mid;
					currL = mid + 1;
					ans = minA;
				} 
				else {
					r = mid - 1;
				}
			}
			a -= dp[minA][0];
			r = minA;
		}
		if (b > 0) {
			int minB = r;
			int currL = l;
			while (currL <= r) {
				int mid = (currL + r) / 2;
				if (dp[mid][1] >= b) {
					minB = mid;
					currL = mid + 1;
					ans = minB;
				} 
				else {
					r = mid - 1;
				}
			}
			b -= dp[minB][1];
			r = minB;
			System.out.println(minB + " minB");
		}
		if (c > 0) {
			int minC = r;
			int currL = l;
			while (currL <= r) {
				int mid = (currL + r) / 2;
				if (dp[mid][2] >= c) {
					minC = mid;
					currL = mid + 1;
					ans = minC;
				} 
				else {
					r = mid - 1;
				}
			}
			a -= dp[minC][0];
			b -= dp[minC][1];
			c -= dp[minC][2];
			r = minC;
		}
		System.out.println("bin " + ans);
		if (a <= 0 && b <= 0 && c <= 0) {
			return dp[ans][0] + dp[ans][1];
		}
		return Integer.MAX_VALUE;
	}
	int takeCharacters(String s, int k) {
		if (k == 0) {
			return 0;
		}
		int[] count = new int[3];
		int i = 0;
	}
}