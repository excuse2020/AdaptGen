class Solution {
	TreeNode reConstructBinaryTree(int[] pre, int[] vin) {
		if (pre == null || vin == null || pre.length == 0 || vin.length == 0) {
			return null;
		}
		return reConstructBinaryTree(pre,vin,0,pre.length - 1,0,vin.length - 1);
	}
	TreeNode reConstructBinaryTree(int[] pre, int[] vin, int preStart, int preEnd, int vinStart, int vinEnd) {
		if (preStart > preEnd || vinStart > vinEnd) {
			return null;
		}
		TreeNode root = new TreeNode(pre[preStart]);
		int index = 0;
		while (vin[index] != root.val) {
			index++;
		}
		int lenth = index - vinStart;
		root.left = reConstructBinaryTree(pre,vin,preStart + 1,preStart + lenth,vinStart,index - 1);
		root.right = reConstructBinaryTree(pre,vin,preStart + lenth,preEnd,index + 1,vinEnd);
		return root;
	}
}