class Solution {
	int bsearch(int target, MountainArray arr, int s, int e) {
		boolean asc = arr.get(s) < arr.get(e);
		int ans = 0;
		while (s <= e) {
			int mid = s + (e - s) / 2;
			if (arr.get(mid) == target) {
				return mid;
			}
			if (asc == true) {
				if (arr.get(mid) > target) {
					e = mid - 1;
				} 
				else {
					s = mid + 1;
				}
			} 
			else {
				if (arr.get(mid) > target) {
					s = mid + 1;
				} 
				else {
					e = mid - 1;
				}
			}
		}
		return -1;
	}
	int findInMountainArray(int target, MountainArray mountainArr) {
		int s = 0;
		int e = mountainArr.length() - 1;
		int p = peak(mountainArr);
		System.out.println(p);
		int x = bsearch(target,mountainArr,s,p);
		if (x != -1) {
			return x;
		} 
		else {
			int y = bsearch(target,mountainArr,p + 1,e);
			return y;
		}
	}
	int peak(MountainArray mountainArr) {
		int s = 0;
		int e = mountainArr.length() - 1;
		while (s < e) {
			int mid = s + (e - s) / 2;
			if (mountainArr.get(mid) > mountainArr.get(mid + 1)) {
				e = mid;
			} 
			else {
				s = mid + 1;
			}
		}
		return s;
	}
}