class Solution {
	long maximumSubarraySum(int[] nums, int k) {
		int n = nums.length;
		long sum = 0;
		long maxSum = 0;
		Map<Integer, Integer> map = new HashMap<>();
		for (int i = 0; i < k; i++) {
			map.put(nums[i],map.getOrDefault(nums[i],0) + 1);
			sum += nums[i];
		}
		if (map.size() == k) {
			maxSum = sum;
		}
		for (int i = k; i < n; i++) {
			sum += nums[i];
			sum -= nums[i - k];
			map.put(nums[i],map.getOrDefault(nums[i],0) + 1);
			map.put(nums[i - k],map.get(nums[i - k]) - 1);
			if (map.get(nums[i - k]) == 0) {
				map.remove(nums[i - k]);
			}
			if (map.size() == k) {
				maxSum = Math.max(maxSum,sum);
			}
		}
		return maxSum;
	}
}