class Solution {
	int[] countSubTrees(int n, int[][] edges, String labels) {
		int[] ans = new int[n];
		List<List<Integer>> graph = new ArrayList();
		for (int i = 0; i <= n; i++) {
			graph.add(new ArrayList());
		}
		for (int i = 0; i < edges.length; i++) {
			graph.get(edges[i][0]).add(edges[i][1]);
			graph.get(edges[i][1]).add(edges[i][0]);
		}
		dfs(graph,0,ans,labels,new boolean[n]);
		return ans;
	}
	int[] dfs(List<List<Integer>> graph, int src, int[] ans, String labels, boolean[] vis) {
		vis[src] = true;
		List<Integer> nbrs = graph.get(src);
		int[] arr = new int[26];
	}
}