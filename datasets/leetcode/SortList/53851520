class Solution {
	ListNode getMid(ListNode node) {
		ListNode slow = node;
		ListNode fast = node.next;
		while (fast != null && fast.next != null) {
			slow = slow.next;
			fast = fast.next.next;
		}
		return slow;
	}
	ListNode merge(ListNode head1, ListNode head2) {
		ListNode demo = new ListNode(-1);
		ListNode temp = demo;
		while (head1 != null && head2 != null) {
			if (head1.val < head2.val) {
				temp.next = head1;
				head1 = head1.next;
				temp = temp.next;
			} 
			else {
				temp.next = head2;
				head2 = head2.next;
				temp = temp.next;
			}
		}
		if (head1 != null) {
			temp.next = head1;
		}
		if (head2 != null) {
			temp.next = head2;
		}
		return demo.next;
	}
	ListNode sortList(ListNode head) {
		if (head == null || head.next == null) {
			return head;
		}
		ListNode mid = getMid(head);
		ListNode rightHead = mid.next;
		mid.next = null;
		ListNode ls = sortList(head);
		ListNode rs = sortList(rightHead);
		return merge(ls,rs);
	}
}