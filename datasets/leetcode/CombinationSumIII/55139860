class Solution {
	List<List<Integer>> combinationSum3(int k, int n) {
		return combinationSumHelper(k,n,n,1,new ArrayList<>());
	}
	List<List<Integer>> combinationSumHelper(int k, int n, int rem, int num, List<Integer> l) {
		List<List<Integer>> list = new ArrayList<>();
		if (k == l.size()) {
			if (rem == 0) {
				list.add(new ArrayList<>(l));
			}
			return list;
		}
		if (num > 9) {
			return list;
		}
		if (rem >= num) {
			l.add(num);
			List<List<Integer>> l1 = combinationSumHelper(k,n,rem - num,num + 1,l);
			list.addAll(l1);
			l.remove(l.size() - 1);
		}
		List<List<Integer>> l2 = combinationSumHelper(k,n,rem,num + 1,l);
		list.addAll(l2);
		return list;
	}
}