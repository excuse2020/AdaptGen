class Solution {
	int[] countSubTrees(int n, int[][] edges, String labels) {
		List<List<Integer>> adjList = new ArrayList<>();
		List<int[]> charCnt = new ArrayList<>();
		for (int i = 0; i < n; i++) {
			adjList.add(new ArrayList<>());
			charCnt.add(new int[26]);
		}
		for (int[] edge: edges) {	
			int src = edge[0];
			int dest = edge[1];
			List<Integer> srcList = adjList.get(src);
			List<Integer> destList = adjList.get(dest);
			srcList.add(dest);
			destList.add(src);
			adjList.set(src,srcList);
			adjList.set(dest,destList);
		}
		int[] vis = new int[n];
		dfs(0,adjList,charCnt,vis,labels);
		int[] ans = new int[n];
		int i = 0;
		char ch = labels.charAt(i);
	}
	int[] dfs(int curr, List<List<Integer>> adjList, List<int[]> charCnt, int[] vis, String labels) {
		vis[curr] = 1;
		int[] currCharCnt = charCnt.get(curr);
		char ch = labels.charAt(curr);
	}
}