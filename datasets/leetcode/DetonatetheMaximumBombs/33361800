class Solution {
	int dfs(int node, boolean[] visited, int[][] bombs) {
		int total = 1;
		visited[node] = true;
		for (int i = 0; i < bombs.length; i++) {
			if (!visited[i] && inRange(bombs[node],bombs[i])) {
				total += dfs(i,visited,bombs);
			}
		}
		return total;
	}
	boolean inRange(int[] a, int[] b) {
		long dx = a[0] - b[0], dy = a[1] - b[1], r = a[2];
		return dx * dx + dy * dy <= r * r;
	}
	int maximumDetonation(int[][] bombs) {
		int MAX = Integer.MIN_VALUE;
		for (int i = 0; i < bombs.length; i++) {
			int count = dfs(i,new boolean[bombs.length],bombs);
			MAX = Math.max(MAX,count);
		}
		return MAX;
	}
}