class Solution {
	int maxMoves(int[][] grid) {
		int n = grid.length;
		int m = grid[0].length;
		int[][] dp = new int[n][m];
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < m; j++) {
				dp[i][j] = -1;
			}
		}
		int maxMoves = 0;
		for (int i = 0; i < n; i++) {
			maxMoves = Math.max(maxMoves,solve(i,0,grid,dp));
		}
		return maxMoves;
	}
	int solve(int i, int j, int[][] grid, int[][] dp) {
		if (i < 0 || i >= grid.length || j < 0 || j >= grid[0].length) {
			return 0;
		}
		if (dp[i][j] != -1) {
			return dp[i][j];
		}
		int right = 0;
		if (j + 1 < grid[0].length) {
			if (grid[i][j + 1] > grid[i][j]) {
				right = 1 + solve(i,j + 1,grid,dp);
			}
		}
		int rUpper = 0;
		if (i - 1 >= 0 && j + 1 < grid[0].length) {
			if (grid[i - 1][j + 1] > grid[i][j]) {
				rUpper = 1 + solve(i - 1,j + 1,grid,dp);
			}
		}
		int rBottom = 0;
		if (i + 1 < grid.length && j + 1 < grid[0].length) {
			if (grid[i + 1][j + 1] > grid[i][j]) {
				rBottom = 1 + solve(i + 1,j + 1,grid,dp);
			}
		}
		return dp[i][j] = Math.max(right,Math.max(rUpper,rBottom));
	}
}