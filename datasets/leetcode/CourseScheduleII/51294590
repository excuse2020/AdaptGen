class Solution {
	int[] findOrder(int numCourses, int[][] prerequisites) {
		List<List<Integer>> graph = new ArrayList<>();
		for (int i = 0; i < numCourses; i++) {
			graph.add(new ArrayList<>());
		}
		ArrayList<Integer> ans = new ArrayList<>();
		int inDegree = new int[numCourses];
		for (int i = 0; i < prerequisites.length; i++) {
			int v1 = prerequisites[i][0];
			int v2 = prerequisites[i][1];
			inDegree[v1]++;
			graph.get(v2).add(v1);
		}
		Queue<Integer> queue = new LinkedList<>();
		for (int i = 0; i < numCourses; i++) {
			if (inDegree[i] == 0) {
				queue.add(i);
			}
		}
		while (!queue.isEmpty()) {
			int curr = queue.poll();
			ans.add(curr);
			for (int i: graph.get(curr)) {	
				inDegree[i]--;
				if (inDegree[i] == 0) {
					queue.add(i);
				}
			}
		}
		if (ans.size() == numCourses) {
			int arr = new int[numCourses];
			for (int i = 0; i < ans.size(); i++) {
				arr[i] = ans.get(i);
			}
			return arr;
		} 
		else {
			return new int[0];
		}
	}
}