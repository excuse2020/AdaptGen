class Solution {
	void backtrack(int[] candidates, List<List<Integer>> ans, List<Integer> list, int pos, int target) {
		if (target == 0) {
			ans.add(new ArrayList(list));
			return;
		}
		for (int i = pos; i < candidates.length; i++) {
			if (candidates[i] > target) {
				break;
			}
			list.add(candidates[i]);
			backtrack(candidates,ans,list,i + 1,target - candidates[i]);
			list.remove(list.size() - 1);
			while (i + 1 < candidates.length && candidates[i] == candidates[i + 1]) {
				i++;
			}
		}
	}
	List<List<Integer>> combinationSum2(int[] candidates, int target) {
		List<List<Integer>> ans = new ArrayList();
		List<Integer> list = new ArrayList();
		Arrays.sort(candidates);
		backtrack(candidates,ans,list,0,target);
		return ans;
	}
}