class Solution {
	ListNode addInList(ListNode head1, ListNode head2) {
		if (head1 == null) {
			return head2;
		}
		if (head2 == null) {
			return head1;
		}
		ListNode node1 = reverse(head1);
		ListNode node2 = reverse(head2);
		int carry = 0;
		ListNode pre = new ListNode(-1);
		ListNode head = pre;
		while (node1 != null || node2 != null || carry != 0) {
			int val1 = node1 == null ? 0 : node1.val;
			int val2 = node2 == null ? 0 : node2.val;
			int sum = val1 + val2;
			carry = sum / 10;
			sum = sum % 10;
			head.next = new ListNode(sum);
			head = head.next;
			if (node1 != null) {
				node1 = node1.next;
			}
			if (node2 != null) {
				node2 = node2.next;
			}
		}
		return reverse(pre.next);
	}
	ListNode reverse(ListNode head) {
		if (head == null) {
			return null;
		}
		ListNode cur = head;
		ListNode pre = null;
		while (cur != null) {
			ListNode temp = cur.next;
			cur.next = pre;
			pre = cur;
			cur = temp;
		}
		return pre;
	}
}