class Solution {
	void backtrack(String string, int left, int right, List<String> result) {
		if (left == 0 && right == 0) {
			result.add(string);
			return;
		}
		if (left == right) {
			backtrack(string + '(',--left,right,result);
		} 
		else {
			if (left >= 1) {
				backtrack(string + '(',left - 1,right,result);
			}
			if (right >= 1) {
				backtrack(string + ')',left,right - 1,result);
			}
		}
	}
	ArrayList<String> generateParenthesis(int n) {
		ArrayList<String> result = new ArrayList<>();
		backtrack("",n,n,result);
		return result;
	}
}