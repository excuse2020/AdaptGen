class Solution {
	int longestSubarray(int[] nums, int limit) {
		int length = 0;
		if (nums.length == 1) {
			return 1;
		}
		Deque<Integer> maxq = new LinkedList<>();
		Deque<Integer> minq = new LinkedList<>();
		int i = 0;
		for (int j = 0; j < nums.length; j++) {
			while (!maxq.isEmpty() && maxq.peekLast() < nums[j]) {
				maxq.removeLast();
			}
			maxq.addLast(nums[j]);
			while (!minq.isEmpty() && minq.peekLast() > nums[j]) {
				minq.removeLast();
			}
			minq.addLast(nums[j]);
			while (maxq.peekFirst() - minq.peekFirst() > limit) {
				if (maxq.peekFirst() == nums[i]) {
					maxq.removeFirst();
				}
				if (minq.peekFirst() == nums[i]) {
					minq.removeFirst();
				}
				i++;
			}
			length = Math.max(length,j - i + 1);
		}
		return length;
	}
}