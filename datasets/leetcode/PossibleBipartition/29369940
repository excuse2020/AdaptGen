class Solution {
	int GROUP_A = 1;
	int GROUP_B = 2;
	int UNASSIGNED = 0;
	boolean canMerge(List<Integer>[] graph, int[] groups, int person) {
		int group = groups[person];
		int enemyGroup = group == GROUP_A ? GROUP_B : GROUP_A;
		for (Integer enemy: graph[person]) {	
			if (groups[enemy] == group) {
				return false;
			}
			if (groups[enemy] == UNASSIGNED) {
				groups[enemy] = enemyGroup;
				if (!canMerge(graph,groups,enemy)) {
					return false;
				}
			}
		}
		return true;
	}
	boolean possibleBipartition(int n, int[][] dislikes) {
		List<Integer>[] graph = new List[n];
		for (int i = 0; i < n; i++) {
			graph[i] = new ArrayList<>();
		}
		for (int[] dislike: dislikes) {	
			graph[dislike[0] - 1].add(dislike[1] - 1);
			graph[dislike[1] - 1].add(dislike[0] - 1);
		}
		int[] groups = new int[n];
		for (int i = 0; i < n; i++) {
			if (groups[i] == UNASSIGNED) {
				groups[i] = GROUP_A;
				if (!canMerge(graph,groups,i)) {
					return false;
				}
			}
		}
		return true;
	}
}