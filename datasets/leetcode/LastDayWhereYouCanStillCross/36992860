class Solution {
	boolean dfs(int grid, int i, int j, boolean visited, int row) {
		if (i == row - 1) {
			return true;
		}
		visited[i][j] = true;
		if (i + 1 < row && grid[i + 1][j] == 0 && visited[i + 1][j] == false) {
			if (dfs(grid,i + 1,j,visited,row)) {
				return true;
			}
		}
		if (i - 1 >= 0 && grid[i - 1][j] == 0 && visited[i - 1][j] == false) {
			if (dfs(grid,i - 1,j,visited,row)) {
				return true;
			}
		}
		if (j + 1 < grid[0].length && grid[i][j + 1] == 0 && visited[i][j + 1] == false) {
			if (dfs(grid,i,j + 1,visited,row)) {
				return true;
			}
		}
		if (j - 1 >= 0 && grid[i][j - 1] == 0 && visited[i][j - 1] == false) {
			if (dfs(grid,i,j - 1,visited,row)) {
				return true;
			}
		}
		return false;
	}
	int latestDayToCross(int row, int col, int[][] cells) {
		int grid = new int[row][col];
		for (int i = 0; i < row; i++) {
			Arrays.fill(grid[i],0);
		}
		int low = 0;
		int high = cells.length - 1;
		int ans = 0;
		while (low <= high) {
			int mid = low + (high - low) / 2;
			if (travel(mid,cells,grid,row,col)) {
				ans = mid;
				low = mid + 1;
			} 
			else {
				high = mid - 1;
			}
		}
		return ans + 1;
	}
	boolean travel(int day, int cells, int grid, int row, int col) {
		for (int i = 0; i <= day; i++) {
			grid[cells[i][0] - 1][cells[i][1] - 1] = 1;
		}
		boolean visited = new boolean[row][col];
		for (int i = 0; i < row; i++) {
			Arrays.fill(visited[i],false);
		}
		for (int i = 0; i < col; i++) {
			if (grid[0][i] == 0 && dfs(grid,0,i,visited,row)) {
				for (int j = 0; j <= day; j++) {
					grid[cells[j][0] - 1][cells[j][1] - 1] = 0;
				}
				return true;
			}
		}
		for (int j = 0; j <= day; j++) {
			grid[cells[j][0] - 1][cells[j][1] - 1] = 0;
		}
		return false;
	}
}