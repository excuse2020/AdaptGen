class Solution {
	int minReorder(int n, int[][] connections) {
		List<List<Integer>> graph = new ArrayList<>();
		for (int i = 0; i < n; i++) {
			graph.add(new ArrayList<>());
		}
		for (int[] con: connections) {	
			graph.get(con[0]).add(con[1]);
			graph.get(con[1]).add(-con[0]);
		}
		Queue<Integer> q = new LinkedList<>();
		q.add(0);
		boolean[] visited = new boolean[n];
		int count = 0;
		while (!q.isEmpty()) {
			int node = q.poll();
			if (!visited[node]) {
				visited[node] = true;
				for (int neighbor: graph.get(node)) {	
					if (!visited[Math.abs(neighbor)]) {
						q.add(Math.abs(neighbor));
						if (neighbor > 0) {
							count += 1;
						}
					}
				}
			}
		}
		return count;
	}
}