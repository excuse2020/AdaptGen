class Solution {
	int BinarySearch(int[] arr, int low, int high, int n) {
		int l = 0, h = 0;
		while (low <= high) {
			int mid = low + (high - low) / 2;
			if (arr[mid] == n) {
				return arr[mid];
			} 
			else if (arr[mid] > n) {
				high = mid - 1;
				h = arr[mid];
			} 
			else {
				low = mid + 1;
				l = arr[mid];
			}
		}
		int diff1 = Math.abs(l - n);
		int diff2 = Math.abs(h - n);
		if (diff1 < diff2) {
			return l;
		}
		return h;
	}
	int minOperations(int n) {
		int[] arr = new int[300];
		for (int i = 0; i < 300; i++) {
			arr[i] = ((int) Math.pow((long) 2,(long) i));
		}
		String check = Arrays.toString(arr);
		int ctr = 0;
		while (n > 0) {
			int num = BinarySearch(arr,0,299,n);
			System.out.print(num + " ");
			if (num == n) {
				ctr++;
				break;
			} 
			else {
				int diff = Math.abs(n - num);
				n = diff;
				ctr++;
			}
		}
		return ctr;
	}
}