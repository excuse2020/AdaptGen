class Solution {
	boolean isValid(int x, int y, int rows, int cols) {
		return x >= 0 && x < rows & y >= 0 && y < cols;
	}
	int solve(char[][] grid) {
		if (grid == null || grid.length == 0 || grid[0].length == 0) {
			return -1;
		}
		int rows = grid.length;
		int cols = grid[0].length;
		int nums = 0;
		Queue<String> queue = new LinkedList<>();
		for (int i = 0; i < rows; i++) {
			for (int j = 0; j < cols; j++) {
				if (grid[i][j] == '1') {
					grid[i][j] = '#';
					queue.add(i + "!");
					while (!queue.isEmpty()) {
						String[] split = queue.poll().split("!");
						int x = Integer.parseInt(split[0]);
						int y = Integer.parseInt(split[1]);
						if (isValid(x - 1,y,rows,cols) && grid[x - 1][y] == '1') {
							grid[x - 1][y] = '#';
							queue.add((x - 1) + "!");
						}
						if (isValid(x,y + 1,rows,cols) && grid[x][y + 1] == '1') {
							grid[x][y + 1] = '#';
							queue.add(x + "!");
						}
						if (isValid(x + 1,y,rows,cols) && grid[x + 1][y] == '1') {
							grid[x + 1][y] = '#';
							queue.add((x + 1) + "!");
						}
						if (isValid(x,y - 1,rows,cols) && grid[x][y - 1] == '1') {
							grid[x][y - 1] = '#';
							queue.add(x + "!");
						}
					}
					nums++;
				}
			}
		}
		return nums;
	}
}