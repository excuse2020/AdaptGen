class Solution {
	TreeNode balanceBST(TreeNode root) {
		List<Integer> lst = new ArrayList<>();
		inorderTraversal(root,lst);
		root = buildTree(lst,0,lst.size() - 1);
		return root;
	}
	TreeNode buildTree(List<Integer> lst, int low, int high) {
		if (low > high) {
			return null;
		}
		int mid = (low + high) / 2;
		TreeNode root = new TreeNode(lst.get(mid));
		root.left = buildTree(lst,low,mid - 1);
		root.right = buildTree(lst,mid + 1,high);
		return root;
	}
	void inorderTraversal(TreeNode root, List<Integer> lst) {
		if (root != null) {
			inorderTraversal(root.left,lst);
			lst.add(root.val);
			inorderTraversal(root.right,lst);
		}
	}
}