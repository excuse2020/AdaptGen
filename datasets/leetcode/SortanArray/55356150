class Solution {
	int[] merge(int[] lst, int[] rst) {
		int n = lst.length;
		int m = rst.length;
		int[] ans = new int[n + m];
		int i = 0;
		int j = 0;
		int k = 0;
		while (i < n && j < m) {
			if (lst[i] <= rst[j]) {
				ans[k] = lst[i];
				i++;
			} 
			else {
				ans[k] = rst[j];
				j++;
			}
			k++;
		}
		while (i < n) {
			ans[k] = lst[i];
			i++;
			k++;
		}
		while (j < m) {
			ans[k] = rst[j];
			j++;
			k++;
		}
		return ans;
	}
	int[] mergeSort(int[] nums, int s, int e) {
		if (s == e) {
			int[] ans = new int[1];
			ans[0] = nums[s];
			return ans;
		}
		int mid = (s + e) / 2;
		int[] lst = mergeSort(nums,s,mid);
		int[] rst = mergeSort(nums,mid + 1,e);
		return merge(lst,rst);
	}
	int[] sortArray(int[] nums) {
		int n = nums.length;
		return mergeSort(nums,0,n - 1);
	}
}