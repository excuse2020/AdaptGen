class Solution {
	Set<Integer> exist = new HashSet();
	int max = 0;
	int countDifferentSubsequenceGCDs(int[] nums) {
		getMax(nums);
		for (int num: nums) {	
			exist.add(num);
		}
		int count = 0;
		for (int i = 1; i <= max; i++) {
			if (findGCD(i)) {
				count++;
			}
		}
		return count;
	}
	boolean findGCD(int num) {
		int val = 0;
		for (int i = num; i <= max; i += num) {
			if (exist.contains(i)) {
				val = gcd(i,val);
			}
		}
		return (val == num);
	}
	int gcd(int a, int b) {
		return (a == 0) ? b : gcd(b % a,a);
	}
	void getMax(int[] nums) {
		for (int i: nums) {	
			max = Math.max(max,i);
		}
	}
}