class Solution {
	int DP(int row, int col, int prev, int[][] grid, int n, int m, int[][] dp) {
		if (row < 0 || row >= n || col < 0 || col >= m) {
			return 0;
		}
		if (grid[row][col] <= prev) {
			return 0;
		}
		if (dp[row][col] != -1) {
			return dp[row][col];
		}
		int curr = grid[row][col];
		int rightUD = DP(row - 1,col + 1,curr,grid,n,m,dp) + 1;
		int right = DP(row,col + 1,curr,grid,n,m,dp) + 1;
		int rightLD = DP(row + 1,col + 1,curr,grid,n,m,dp) + 1;
		return dp[row][col] = Math.max(rightUD,Math.max(right,rightLD));
	}
	int maxMoves(int[][] grid) {
		int max = 0;
		int[][] dp = new int[grid.length][grid[0].length];
		for (int i = 0; i < grid.length; i++) {
			for (int j = 0; j < grid[0].length; j++) {
				dp[i][j] = -1;
			}
		}
		for (int i = 0; i < grid.length; i++) {
			max = Math.max(max,DP(i,0,-1,grid,grid.length,grid[0].length,dp));
		}
		return max - 1;
	}
}