class Solution {
	List<List<Integer>> graph;
	int explode(int source, boolean visited) {
		visited[source] = true;
		int count = 1;
		for (int adj: graph.get(source)) {	
			if (!visited[adj]) {
				count += explode(adj,visited);
			}
		}
		return count;
	}
	long getDistance(long x1, long x2, long y1, long y2) {
		return ((x2 - x1) * (x2 - x1)) + ((y2 - y1) * (y2 - y1));
	}
	int maximumDetonation(int[][] bombs) {
		graph = new ArrayList<>();
		for (int i = 0; i < bombs.length; i++) {
			graph.add(new ArrayList<Integer>());
		}
		for (int i = 0; i < bombs.length; i++) {
			for (int j = 0; j < bombs.length; j++) {
				if (i == j) {
					continue;
				}
				long x1 = bombs[i][0], y1 = bombs[i][1], r1 = bombs[i][2];
				long x2 = bombs[j][0], y2 = bombs[j][1];
				long distance = getDistance(x1,x2,y1,y2);
				if (distance <= (long) (r1 * r1)) {
					graph.get(i).add(j);
				}
			}
		}
		int count = 0;
		for (int i = 0; i < bombs.length; i++) {
			boolean visited = new boolean[bombs.length];
			count = Math.max(count,explode(i,visited));
		}
		return count;
	}
}