class Solution {
	int[] par;
	int find(int x) {
		if (par[x] == x) {
			return x;
		}
		return par[x] = find(par[x]);
	}
	int[] findRedundantDirectedConnection(int[][] edges) {
		int n = edges.length;
		int[] haspar = new int[n + 1];
		for (int[] edge: edges) {	
			int v = edge[1];
			haspar[v]++;
		}
		par = new int[n + 1];
		for (int i = 0; i < par.length; i++) {
			par[i] = i;
		}
		for (int[] edge: edges) {	
			int u = edge[0];
			int v = edge[1];
			if (haspar[v] == 1) {
				int lu = find(u);
				int lv = find(v);
				if (lu != lv) {
					par[lu] = lv;
				} 
				else {
					return edge;
				}
			}
		}
		for (int[] edge: edges) {	
			int u = edge[0];
			int v = edge[1];
			if (haspar[v] > 1) {
				int lu = find(u);
				int lv = find(v);
				if (lu != lv) {
					par[lu] = lv;
				} 
				else {
					return edge;
				}
			}
		}
		return new int[2];
	}
}