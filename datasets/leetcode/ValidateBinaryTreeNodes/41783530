class Solution {
	boolean validateBinaryTreeNodes(int n, int[] leftChild, int[] rightChild) {
		int indegree = new int[n];
		for (int i = 0; i < leftChild.length; i++) {
			if (leftChild[i] != -1) {
				indegree[leftChild[i]]++;
			}
			if (rightChild[i] != -1) {
				indegree[rightChild[i]]++;
			}
		}
		int root = -1;
		for (int i = 0; i < n; i++) {
			if (indegree[i] == 0) {
				if (root == -1) {
					root = i;
				} 
				else {
					return false;
				}
			}
		}
		if (root == -1) {
			return false;
		}
		Queue<Integer> q = new LinkedList<>();
		HashSet<Integer> hs = new HashSet<>();
		q.add(root);
		while (!q.isEmpty()) {
			int tmp = q.remove();
			if (hs.contains(tmp)) {
				return false;
			}
			hs.add(tmp);
			if (leftChild[tmp] != -1) {
				q.add(leftChild[tmp]);
			}
			if (rightChild[tmp] != -1) {
				q.add(rightChild[tmp]);
			}
		}
		if (hs.size() == n) {
			return true;
		} 
		else {
			return false;
		}
	}
}