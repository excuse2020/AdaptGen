class Solution {
	int findMaxFish(int[][] grid) {
		int maxFish = 0;
		for (int i = 0; i < grid.length; i++) {
			for (int j = 0; j < grid[0].length; j++) {
				if (grid[i][j] > 0) {
					int fish = search(grid,i,j);
					maxFish = Math.max(fish,maxFish);
				}
			}
		}
		return maxFish;
	}
	int search(int[][] grid, int startRow, int startCol) {
		int fish = 0;
		Stack<Pair<Integer, Integer>> toVisit = new Stack<>();
		toVisit.push(new Pair(startRow, startCol));
		while (!toVisit.isEmpty()) {
			Pair<Integer, Integer> coords = toVisit.pop();
			int row = coords.getKey();
			int col = coords.getValue();
			if (row >= grid.length || row < 0 || col >= grid[0].length || col < 0) {
				continue;
			}
			if (grid[row][col] == 0) {
				continue;
			}
			fish += grid[row][col];
			grid[row][col] = 0;
			toVisit.push(new Pair(row + 1, col));
			toVisit.push(new Pair(row - 1, col));
			toVisit.push(new Pair(row, col + 1));
			toVisit.push(new Pair(row, col - 1));
		}
		return fish;
	}
}