class Solution {
	boolean isPalindrome(ListNode head) {
		if (head == null || head.next == null) {
			return true;
		}
		ListNode middle = middleOfLists(head);
		ListNode firstHalfStart = head;
		ListNode secondHalfStart = reverseList(middle);
		while (secondHalfStart != null) {
			if (firstHalfStart.val != secondHalfStart.val) {
				return false;
			}
			firstHalfStart = firstHalfStart.next;
			secondHalfStart = secondHalfStart.next;
		}
		return true;
	}
	ListNode middleOfLists(ListNode head) {
		ListNode turtle = head;
		ListNode hare = head;
		while (hare != null && hare.next != null) {
			turtle = turtle.next;
			hare = hare.next.next;
		}
		return turtle;
	}
	ListNode reverseList(ListNode head) {
		ListNode prev = null;
		ListNode curr = head;
		while (curr != null) {
			ListNode nextNode = curr.next;
			curr.next = prev;
			prev = curr;
			curr = nextNode;
		}
		return prev;
	}
}