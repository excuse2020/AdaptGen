class Solution {
	List<Integer> ar = new ArrayList<>();
	List<Integer> largestDivisibleSubset(int[] nums) {
		Integer[] num = Arrays.stream(nums).boxed().toArray();
		Arrays.sort(num);
		int[] dp = new int[nums.length];
		for (int i = 0; i < num.length; i++) {
			for (int j = i + 1; j < num.length; j++) {
				if (num[j] % num[i] == 0) {
					dp[j] = Math.max(dp[j],1 + dp[i]);
				}
			}
		}
		int max = 0, ind = 0;
		for (int i = 0; i < nums.length; i++) {
			if (max < dp[i]) {
				max = dp[i];
				ind = i;
			}
		}
		for (int i = ind; i >= 0; i--) {
			if (max == dp[i] && ar.size() == 0) {
				ar.add(num[i]);
				max -= 1;
			} 
			else if (max == dp[i] && ar.get(ar.size() - 1) % num[i] == 0) {
				ar.add(num[i]);
				max -= 1;
			}
		}
		return ar;
	}
}