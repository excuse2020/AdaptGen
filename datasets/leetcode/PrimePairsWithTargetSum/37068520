class Solution {
	List<List<Integer>> findPrimePairs(int n) {
		List<List<Integer>> resList = new ArrayList<>();
		boolean[] notPrimes = getPrimeNumbers(n);
		for (int i = 2; i <= n; i++) {
			int left = i;
			int right = n - i;
			if (left > right) {
				break;
			}
			if (!notPrimes[left] && !notPrimes[right]) {
				var tmp = new ArrayList<Integer>();
				tmp.add(left);
				tmp.add(right);
				resList.add(tmp);
			}
		}
		return resList;
	}
	boolean[] getPrimeNumbers(int n) {
		boolean[] notPrime = new boolean[n];
		int count = 0;
		for (int i = 2; i < n; i++) {
			if (notPrime[i] == false) {
				count++;
				for (int j = 2; i * j < n; j++) {
					notPrime[i * j] = true;
				}
			}
		}
		return notPrime;
	}
}