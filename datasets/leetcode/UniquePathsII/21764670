class Solution {
	void dfs(int[][] matrix, List<Integer> paths, int row, int col) {
		int botRow = matrix.length - 1;
		int botCol = matrix[0].length - 1;
		if (row == botRow && col == botCol) {
			paths.add(1);
			return;
		}
		if (row + 1 < matrix.length && matrix[row + 1][col] != 1) {
			dfs(matrix,paths,row + 1,col);
		}
		if (col + 1 < matrix[0].length && matrix[row][col + 1] != 1) {
			dfs(matrix,paths,row,col + 1);
		}
	}
	int uniquePathsWithObstacles(int[][] obstacleGrid) {
		if (obstacleGrid[0][0] == 1) {
			return 0;
		}
		List<Integer> list = new ArrayList<Integer>();
		dfs(obstacleGrid,list,0,0);
		return list.size();
	}
}