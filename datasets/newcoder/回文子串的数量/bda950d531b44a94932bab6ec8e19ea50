class Solution {
	int Substrings(String str) {
		return solution3(str);
	}
	boolean checkPalindrome(String str) {
		StringBuilder sb = new StringBuilder(str);
		return sb.reverse().toString().equals(str);
	}
	int expand(String str, int i, int j) {
		int count = 0;
		while (0 <= i && j < str.length() && str.charAt(i--) == str.charAt(j++)) {
			count++;
		}
		return count;
	}
	boolean isPalindrome(String str) {
		for (int i = 0, j = str.length() - 1; i <= j; i++, j--) {
			if (str.charAt(i) != str.charAt(j)) {
				return false;
			}
		}
		return true;
	}
	int solution1(String str) {
		int count = 0;
		for (int i = 0; i < str.length(); i++) {
			for (int j = 0; j <= i; j++) {
				if (str.charAt(j) == str.charAt(i)) {
					if (isPalindrome(str.substring(j,i + 1))) {
						count++;
					}
				}
			}
		}
		return count;
	}
	int solution2(String str) {
		int len = str.length();
		boolean[][] dp = new boolean[len][len];
		int count = 0;
		for (int i = 0; i < len; i++) {
			for (int j = 0; j <= i; j++) {
				if (str.charAt(j) == str.charAt(i)) {
					if (i - j <= 1) {
						count++;
						dp[j][i] = true;
					} 
					else {
						if (dp[j + 1][i - 1]) {
							count++;
							dp[j][i] = true;
						}
					}
				}
			}
		}
		return count;
	}
	int solution3(String str) {
		int len = str.length();
		int count = 0;
		for (int i = 0; i < len; i++) {
			count += expand(str,i,i);
			count += expand(str,i,i + 1);
		}
		return count;
	}
}