class Solution {
	boolean can_make_alloys(int n, int budget, List<Integer> comp, List<Integer> stock, List<Integer> cost, long num_alloys) {
		long curr_cost = 0;
		for (int i = 0; i < n; i++) {
			long ketli_banavani = num_alloys * comp.get(i);
			long ketli_ready = stock.get(i);
			long bachi = Math.max(0,ketli_banavani - ketli_ready);
			long bacheli_no_cost = bachi * cost.get(i);
			curr_cost += bacheli_no_cost;
		}
		boolean ans = curr_cost <= budget;
		return ans;
	}
	int maxNumberOfAlloys(int n, int k, int budget, List<List<Integer>> composition, List<Integer> stock, List<Integer> cost) {
		int max_ans = 0;
		for (int machine = 0; machine < k; machine++) {
			int alloys_for_this_machine = 0;
			long low = 0, high = 2 * ((int) 10e8);
			while (low <= high) {
				long mid = low + (high - low) / 2;
				if (can_make_alloys(n,budget,composition.get(machine),stock,cost,mid)) {
					alloys_for_this_machine = (int) mid;
					low = mid + 1;
				} 
				else {
					high = mid - 1;
				}
			}
			max_ans = Math.max(max_ans,alloys_for_this_machine);
			System.out.println(" max_ans =>  " + max_ans);
		}
		return max_ans;
	}
}