class Solution {
	int helper(int r1, int r2, int c1, int c2, int[] horizontalCut, int[] verticalCut, int dp) {
		if (r2 - r1 == 1 && c2 - c1 == 1) {
			return 0;
		}
		int ans1 = Integer.MAX_VALUE;
		int ans2 = Integer.MAX_VALUE;
		if (dp[r1][r2][c1][c2] != -1) {
			return dp[r1][r2][c1][c2];
		}
		for (int i = r1 + 1; i < r2; i++) {
			ans1 = Math.min(ans1,horizontalCut[i - 1] + helper(r1,i,c1,c2,horizontalCut,verticalCut,dp));
		}
		for (int i = c1 + 1; i < c2; i++) {
			ans2 = Math.min(ans2,verticalCut[i - 1] + helper(r1,r2,c1,i,horizontalCut,verticalCut,dp));
		}
		return dp[r1][r2][c1][c2] = Math.min(ans1,ans2);
	}
	int minimumCost(int m, int n, int[] horizontalCut, int[] verticalCut) {
		int dp = new int[21][21][21][21];
		for (int[][][] arr3: dp) {	
			for (int[][] arr2: arr3) {	
				for (int[] arr: arr2) {	
					Arrays.fill(arr,-1);
				}
			}
		}
		return helper(0,m,0,n,horizontalCut,verticalCut,dp);
	}
}