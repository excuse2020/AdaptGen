class Solution {
	int[][] dp;
	int find(int pos, int sum, List<Integer> nums) {
		if (pos == nums.size()) {
			return 0;
		}
		if (dp[pos][sum] != -1) {
			return dp[pos][sum];
		}
		int ans = 0;
		if (nums.get(pos) > sum) {
			ans = Math.max(ans,nums.get(pos) + find(pos + 1,sum + nums.get(pos),nums));
			ans = Math.max(ans,find(pos + 1,sum,nums));
		} 
		else {
			ans = Math.max(ans,find(pos + 1,sum,nums));
		}
		dp[pos][sum] = ans;
		return ans;
	}
	int maxTotalReward(int[] rv) {
		Set<Integer> s = new HashSet<>();
		for (int value: rv) {	
			s.add(value);
		}
		List<Integer> nums = new ArrayList<>(s);
		Collections.sort(nums);
		int n = nums.size();
		int maxSum = 2000;
		dp = new int[n][2 * maxSum + 1];
		for (int i = 0; i < n; i++) {
			Arrays.fill(dp[i],-1);
		}
		return find(0,0,nums);
	}
}