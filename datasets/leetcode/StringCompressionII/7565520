class Solution {
	int getLengthOfOptimalCompression(String s, int k) {
		if (s.length() == 0) {
			return 0;
		}
		String p = "";
		char prev = s.charAt(0);
		p += prev;
		int same = 1;
		for (int i = 1; i < s.length(); i++) {
			char c = s.charAt(i);
			if (c == prev) {
				same++;
			} 
			else {
				if (same != 1) {
					p += same;
				}
				p += c;
				same = 1;
				prev = c;
			}
		}
		if (same != 1) {
			p += same;
		}
		return helper(p,k,new HashMap<>());
	}
	int helper(String s, int k, Map<String, Map<Integer, Integer>> map) {
		if (s.length() == 0) {
			return 0;
		}
		if (k <= 0) {
			return s.length();
		}
		if (map.containsKey(s) && map.get(s).containsKey(k)) {
			return map.get(s).get(k);
		}
		int val = Integer.MAX_VALUE;
		int i = 0;
	}
}