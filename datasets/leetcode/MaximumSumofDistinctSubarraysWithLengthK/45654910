class Solution {
	long maximumSubarraySum(int[] arr, int k) {
		int n = arr.length;
		HashMap<Long, Long> hp = new HashMap<>();
		long sum = 0;
		long ans = Long.MIN_VALUE;
		for (int i = 0; i < k; i++) {
			hp.put((long) arr[i],hp.getOrDefault((long) arr[i],(long) 0) + 1);
			sum += arr[i];
		}
		if (hp.size() == k) {
			ans = Math.max(ans,sum);
		}
		for (int i = k; i < n; i++) {
			hp.put((long) arr[i - k],hp.get((long) arr[i - k]) - 1);
			if (hp.get((long) arr[i - k]) == 0) {
				hp.remove((long) arr[i - k]);
			}
			hp.put((long) arr[i],hp.getOrDefault((long) arr[i],(long) 0) + 1);
			sum = sum - arr[i - k] + arr[i];
			if (hp.size() == k) {
				ans = Math.max(ans,sum);
			}
		}
		return Math.max(ans,0);
	}
}