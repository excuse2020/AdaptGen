class Solution {
	double maxProbability(int n, int[][] edges, double[] succProb, int start, int end) {
		Map<Integer, List<double[]>> a_list = new HashMap<>();
		for (int i = 0; i < edges.length; i++) {
			double[] curr = new double[2];
			curr[1] = succProb[i];
			curr[0] = edges[i][1];
			if (a_list.containsKey(edges[i][0])) {
				List<double[]> curr_ = a_list.get(edges[i][0]);
				curr_.add(curr.clone());
				a_list.put(edges[i][0],curr_);
			} 
			else {
				List<double[]> curr_ = new ArrayList<>();
				curr_.add(curr.clone());
				a_list.put(edges[i][0],curr_);
			}
			curr[0] = edges[i][0];
			if (a_list.containsKey(edges[i][1])) {
				List<double[]> curr_ = a_list.get(edges[i][1]);
				curr_.add(curr.clone());
				a_list.put(edges[i][1],curr_);
			} 
			else {
				List<double[]> curr_ = new ArrayList<>();
				curr_.add(curr.clone());
				a_list.put(edges[i][1],curr_);
			}
		}
		Queue<double[]> q = new LinkedList<>();
		double[] prob = new double[n];
		for (int i = 0; i < n; i++) {
			prob[i] = -1.0d;
		}
		double[] curr = new double[2];
		curr[0] = start;
		curr[1] = 1;
		q.add(curr.clone());
		prob[start] = 1;
		while (!q.isEmpty()) {
			double[] node = q.poll();
			if (a_list.get((int) node[0]) == null) {
				continue;
			}
			for (double[] comp: a_list.get((int) node[0])) {	
				double curr_prob = node[1] * comp[1];
				int idx = (int) comp[0];
				if (prob[idx] == -1 || prob[idx] < curr_prob) {
					prob[idx] = curr_prob;
					curr[0] = idx;
					curr[1] = curr_prob;
					q.add(curr.clone());
				}
			}
		}
		if (prob[end] == -1) {
			return 0d;
		}
		return prob[end];
	}
}