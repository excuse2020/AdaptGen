class Solution {
	int longestPalindrome(String[] words) {
		HashMap<String, Integer> map = new HashMap<>();
		for (int i = 0; i < words.length; i++) {
			map.put(words[i],map.getOrDefault(words[i],0) + 1);
		}
		int ans = 0, flag = 0;
		for (int i = 0; i < words.length; i++) {
			StringBuilder sb = new StringBuilder(words[i]);
			String s = sb.reverse().toString();
			if (s.equals(words[i]) && map.containsKey(s) && flag == 0) {
				ans += 2;
				flag = 1;
				map.remove(words[i]);
			} 
			else if (s.equals(words[i]) && map.containsKey(s)) {
				ans += 4;
				int b = map.get(s);
				if (b == 2) {
					map.remove(s);
				} 
				else {
					map.put(s,b - 2);
				}
			} 
			else if (!s.equals(words[i]) && map.containsKey(s)) {
				ans += 4;
				int a = map.get(words[i]);
				int b = map.get(s);
				if (a == 1) {
					map.remove(words[i]);
				} 
				else {
					map.put(words[i],--a);
				}
				if (b == 1) {
					map.remove(s);
				} 
				else {
					map.put(s,--b);
				}
			}
		}
		return ans;
	}
}