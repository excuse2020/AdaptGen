class Solution {
	int[] cycleLengthQueries(int n, int[][] queries) {
		int[] results = new int[queries.length];
		for (int i = 0; i < queries.length; i++) {
			int ancestor = lca(queries[i][0],queries[i][1]);
			int dist = level(queries[i][0]) - 2 * level(ancestor) + level(queries[i][1]) + 1;
			results[i] = dist;
		}
		return results;
	}
	int lca(int n1, int n2) {
		while (level(n1) != level(n2)) {
			if (level(n1) > level(n2)) {
				n1 /= 2;
			} 
			else {
				n2 /= 2;
			}
		}
		while (n1 != n2) {
			n1 /= 2;
			n2 /= 2;
		}
		return n1;
	}
	int level(int node) {
		return (int) (Math.log(node) / Math.log(2));
	}
}