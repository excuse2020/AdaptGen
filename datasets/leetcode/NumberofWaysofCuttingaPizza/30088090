class Solution {
	int MOD = (int) (Math.pow(10,9) + 7);
	int makeCuts(int[][] sum, Integer[][][] dp, int m, int n, int cuts, int r, int c) {
		if (sum[r][c] == 0) {
			return 0;
		}
		if (dp[cuts][r][c] != null) {
			return dp[cuts][r][c];
		}
		if (cuts == 1) {
			return 1;
		}
		int result = 0;
		for (int cut = r + 1; cut < m; cut++) {
			if (sum[r][c] > sum[cut][c]) {
				result = (result + makeCuts(sum,dp,m,n,cuts - 1,cut,c)) % MOD;
			}
		}
		for (int cut = c + 1; cut < n; cut++) {
			if (sum[r][c] > sum[r][cut]) {
				result = (result + makeCuts(sum,dp,m,n,cuts - 1,r,cut)) % MOD;
			}
		}
		return dp[cuts][r][c] = result;
	}
	int ways(String[] pz, int cuts) {
		if (pz == null || pz.length == 0) {
			return 0;
		}
		int m = pz.length;
		int n = pz[0].length();
		Integer[][][] dp = new Integer[cuts + 1][m + 1][n + 1];
		int[][] sum = new int[m + 1][n + 1];
		int i = m - 1;
		int j = n - 1, jSum = 0;
	}
}