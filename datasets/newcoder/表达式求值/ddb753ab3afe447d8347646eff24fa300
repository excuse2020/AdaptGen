class Solution {
	void calcu(Stack<Integer> nums, Stack<Character> ops) {
		int num1 = nums.pop();
		int num2 = nums.pop();
		char op = ops.pop();
		if (op == '+') {
			nums.push(num1 + num2);
		} 
		else if (op == '-') {
			nums.push(num2 - num1);
		} 
		else if (op == '*') {
			nums.push(num1 * num2);
		}
	}
	boolean isNumber(char a) {
		return Character.isDigit(a);
	}
	int solve(String s) {
		Map<Character, Integer> map = new HashMap<Character, Integer>();
		map.put('+',1);
		map.put('-',1);
		map.put('*',2);
		Stack<Integer> nums = new Stack<Integer>();
		Stack<Character> ops = new Stack<Character>();
		int num = s.length();
		char[] ss = s.toCharArray();
		for (int i = 0; i < num; i++) {
			char ch = ss[i];
			if (isNumber(ch)) {
				int temp = 0;
				int j = i;
				while (j < num && isNumber(ss[j])) {
					temp = temp * 10 + (ss[j] - '0');
					j++;
				}
				nums.push(temp);
				i = j - 1;
			} 
			else if (ch == '(') {
				ops.push(ch);
			} 
			else if (ch == ')') {
				while (ops.peek() != '(') {
					calcu(nums,ops);
				}
				ops.pop();
			} 
			else {
				if (!ops.isEmpty() && ops.peek() != '(' && (map.get(ops.peek()) >= map.get(ch))) {
					calcu(nums,ops);
				}
				ops.push(ch);
			}
		}
		while (!ops.isEmpty()) {
			calcu(nums,ops);
		}
		return nums.pop();
	}
}