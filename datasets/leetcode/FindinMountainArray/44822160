class Solution {
	int bSearch(int target, MountainArray mountainArr, int l, int h, boolean inc) {
		int low = l;
		int high = h;
		while (low <= high) {
			int mid = low + (high - low) / 2;
			int midValue = mountainArr.get(mid);
			if (midValue == target) {
				return mid;
			} 
			else if (target < midValue) {
				if (inc) {
					high = mid - 1;
				} 
				else {
					low = mid + 1;
				}
			} 
			else {
				if (!inc) {
					high = mid - 1;
				} 
				else {
					low = mid + 1;
				}
			}
		}
		return -1;
	}
	int findInMountainArray(int target, MountainArray mountainArr) {
		int n = mountainArr.length();
		int peak = peakFinder(mountainArr,n);
		if (peak == -1) {
			return peak;
		}
		if (mountainArr.get(peak) == target) {
			return peak;
		}
		int ans = bSearch(target,mountainArr,0,peak - 1,true);
		if (ans != -1 && mountainArr.get(ans) == target) {
			return ans;
		} 
		else {
			ans = bSearch(target,mountainArr,peak + 1,n - 1,false);
			if (ans != -1 && mountainArr.get(ans) == target) {
				return ans;
			}
		}
		return -1;
	}
	int peakFinder(MountainArray mountainArr, int n) {
		int low = 0;
		int high = n - 1;
		while (low < high) {
			int mid = low + (high - low) / 2;
			if (mid == n - 1) {
				return mid - 1;
			} 
			else if (mountainArr.get(mid) < mountainArr.get(mid + 1)) {
				low = mid + 1;
			} 
			else if (mountainArr.get(mid) > mountainArr.get(mid + 1)) {
				high = mid;
			}
		}
		return low;
	}
}