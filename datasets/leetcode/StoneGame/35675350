class Solution {
	int sol(int[] piles, int i, int j, int[][] memo) {
		if (i == j) {
			return piles[i];
		}
		if (memo[i][j] != 0) {
			return memo[i][j];
		}
		memo[i][j] = Math.max(piles[i] + sol(piles,i + 1,j,memo),piles[j] + sol(piles,i,j - 1,memo));
		return memo[i][j];
	}
	boolean stoneGame(int[] piles) {
		int n = piles.length;
		int[][] dp = new int[n][n];
		for (int i = 0; i < n; i++) {
			dp[i][i] = piles[i];
		}
		for (int len = 2; len <= n; len++) {
			for (int i = 0; i <= n - len; i++) {
				int j = i + len - 1;
				dp[i][j] = Math.max(piles[i] - dp[i + 1][j],piles[j] - dp[i][j - 1]);
			}
		}
		return dp[0][n - 1] > 0;
	}
}