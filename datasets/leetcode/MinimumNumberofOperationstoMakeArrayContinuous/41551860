class Solution {
	int minOperations(int[] nums) {
		List<Integer> sorted = IntStream.of(nums).sorted().boxed().collect(Collectors.toList());
		int i = 0;
		int j = 0;
		int unchanged = 1;
		int duplicates = 0;
		while (j < sorted.size()) {
			if (j + 1 < sorted.size() && sorted.get(j + 1) - sorted.get(i) < nums.length) {
				j++;
				if (sorted.get(j).equals(sorted.get(j - 1))) {
					duplicates++;
				}
				unchanged = Math.max(unchanged,j - i + 1 - duplicates);
			} 
			else if (i == j) {
				j++;
				if (j < sorted.size() && sorted.get(j).equals(sorted.get(j - 1))) {
					duplicates++;
				}
			} 
			else {
				i++;
				if (sorted.get(i).equals(sorted.get(i - 1))) {
					duplicates--;
				}
			}
		}
		return sorted.size() - unchanged;
	}
}