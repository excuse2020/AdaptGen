class Solution {
	boolean isDivisonPossible(int quantities, int maxproducts, int store) {
		int currstore = 0;
		for (int i = 0; i < quantities.length; i++) {
			currstore += quantities[i] / maxproducts;
			if (quantities[i] % maxproducts != 0) {
				currstore += 1;
			}
			if (currstore > store) {
				return false;
			}
		}
		return true;
	}
	int minimizedMaximum(int n, int[] quantities) {
		int start = 1;
		int end = Integer.MIN_VALUE;
		for (int i = 0; i < quantities.length; i++) {
			if (quantities[i] > end) {
				end = quantities[i];
			}
		}
		int res = -1;
		while (start <= end) {
			int mid = start + (end - start) / 2;
			if (isDivisonPossible(quantities,mid,n)) {
				res = mid;
				end = mid - 1;
			} 
			else {
				start = mid + 1;
			}
		}
		return res;
	}
}