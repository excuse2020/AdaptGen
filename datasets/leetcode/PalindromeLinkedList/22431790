class Solution {
	ListNode getMiddle(ListNode head) {
		ListNode slow = head;
		ListNode fast = head;
		while (fast != null && fast.next != null) {
			slow = slow.next;
			fast = fast.next.next;
		}
		return slow;
	}
	boolean isPalindrome(ListNode head) {
		ListNode cur = head;
		ListNode middleNode = getMiddle(head);
		ListNode anotherHalf = reverseLinkedList(middleNode);
		while (anotherHalf != null) {
			if (cur.val == anotherHalf.val) {
				cur = cur.next;
				anotherHalf = anotherHalf.next;
			} 
			else {
				return false;
			}
		}
		return true;
	}
	ListNode reverseLinkedList(ListNode head) {
		ListNode prev = null;
		ListNode cur = head;
		ListNode next_node = cur.next;
		while (cur != null) {
			next_node = cur.next;
			cur.next = prev;
			prev = cur;
			cur = next_node;
		}
		return prev;
	}
}