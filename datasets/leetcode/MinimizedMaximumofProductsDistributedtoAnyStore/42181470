class Solution {
	int f(int quantities, int mid) {
		int sum = 0;
		for (int i = 0; i < quantities.length; i++) {
			sum += Math.ceil((double) quantities[i] / (double) mid);
		}
		return sum;
	}
	int minimizedMaximum(int n, int[] quantities) {
		int max = 0;
		for (int i = 0; i < quantities.length; i++) {
			max = Math.max(max,quantities[i]);
		}
		int low = 1;
		int high = max;
		while (low <= high) {
			int mid = (low + high) / 2;
			int product = f(quantities,mid);
			if (product <= n) {
				high = mid - 1;
			} 
			else {
				low = mid + 1;
			}
		}
		return low;
	}
}