class Solution {
	PriorityQueue<Integer> high = new PriorityQueue();
	PriorityQueue<Integer> low = new Comparator<Integer>();
	Double GetMedian() {
		return high.size() > low.size() ? (double) high.peek() : (high.peek() + low.peek()) / 2.0;
	}
	void Insert(Integer num) {
		if (low.size() < high.size()) {
			if (num > high.peek()) {
				high.offer(num);
				num = high.poll();
			}
			low.offer(num);
		} 
		else {
			if (!low.isEmpty() && num < low.peek()) {
				low.offer(num);
				num = low.poll();
			}
			high.offer(num);
		}
	}
}