class Solution {
	List<List<Integer>> res;
	void backtrack(List<Integer> list, int currSum, int k, int n) {
		if (list.size() == k) {
			if (currSum == n) {
				res.add(new ArrayList<Integer>(list));
				return;
			}
		}
		int last = 0;
		if (list.size() != 0) {
			last = list.getLast();
		}
		for (int i = last + 1; i < 10; i++) {
			list.add(i);
			currSum += i;
			backtrack(list,currSum,k,n);
			list.removeLast();
			currSum -= i;
		}
	}
	List<List<Integer>> combinationSum3(int k, int n) {
		res = new ArrayList<>();
		backtrack(new ArrayList<Integer>(),0,k,n);
		return res;
	}
}