class Solution {
	List<List<Integer>> levelOrderBottom(TreeNode root) {
		List<List<Integer>> result = new ArrayList<List<Integer>>();
		if (root == null) {
			return result;
		}
		if (root.left == null && root.right == null) {
			List<Integer> list = new ArrayList<Integer>();
			list.add(root.val);
			result.add(list);
			return result;
		}
		Queue<TreeNode> queue = new LinkedList<>();
		queue.offer(root);
		Stack<List<Integer>> stack = new Stack<List<Integer>>();
		while (!queue.isEmpty()) {
			int size = queue.size();
			List<Integer> list = new ArrayList<Integer>();
			for (int i = 0; i < size; i++) {
				TreeNode curr = queue.poll();
				list.add(curr.val);
				if (curr.left != null) {
					queue.add(curr.left);
				}
				if (curr.right != null) {
					queue.add(curr.right);
				}
			}
			stack.push(list);
		}
		while (stack.size() > 0) {
			result.add(stack.pop());
		}
		return result;
	}
}