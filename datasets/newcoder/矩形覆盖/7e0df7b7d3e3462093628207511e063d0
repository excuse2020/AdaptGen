class Solution {
	int rectCover(int target) {
		if (target == 0) {
			return 0;
		}
		if (target == 1) {
			return 1;
		}
		if (target == 2) {
			return 2;
		}
		return rectCover(target - 1) + rectCover(target - 2);
	}
	int rectCover2(int target) {
		if (target == 0) {
			return 0;
		}
		if (target == 1) {
			return 1;
		}
		if (target == 2) {
			return 2;
		}
		int[] dp = new int[target + 1];
		dp[1] = 1;
		dp[2] = 2;
		for (int i = 3; i <= target; i++) {
			dp[i] = dp[i - 1] + dp[i - 2];
		}
		return dp[target];
	}
	int rectCover3(int target) {
		if (target == 0) {
			return 0;
		}
		if (target == 1) {
			return 1;
		}
		if (target == 2) {
			return 2;
		}
		int num1 = 1;
		int num2 = 2;
		int result = 0;
		for (int i = 3; i <= target; i++) {
			result = num1 + num2;
			num1 = num2;
			num2 = result;
		}
		return result;
	}
}