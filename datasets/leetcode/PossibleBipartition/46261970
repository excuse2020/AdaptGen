class Solution {
	boolean bfs(int node, List<List<Integer>> e, int color) {
		Queue<Integer> q = new LinkedList<>();
		color[node] = 1;
		q.add(node);
		while (!q.isEmpty()) {
			int n = q.poll();
			for (int i: e.get(n)) {	
				if (color[i] == 0) {
					color[i] = 3 - color[n];
					q.add(i);
				} 
				else if (color[i] == color[n]) {
					return false;
				}
			}
		}
		return true;
	}
	boolean possibleBipartition(int n, int[][] g) {
		List<List<Integer>> e = new ArrayList<>();
		for (int i = 0; i <= n; i++) {
			e.add(new ArrayList<>());
		}
		for (int i = 0; i < g.length; i++) {
			e.get(g[i][0]).add(g[i][1]);
			e.get(g[i][1]).add(g[i][0]);
		}
		int color = new int[n + 1];
		for (int i = 0; i < n; i++) {
			if (color[i] == 0) {
				if (bfs(i,e,color) == false) {
					return false;
				}
			}
		}
		return true;
	}
}