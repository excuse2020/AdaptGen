class Solution {
	int base = 26;
	int p = 5381;
	boolean contains(String str, String substr) {
		int n = str.length();
		int m = substr.length();
		if (m > n) {
			return false;
		}
		int hashValOfSubstr = hashValue(substr);
		String window = str.substring(0,m);
		int hashValOfWindow = hashValue(window);
		int highestPowerOfBase = 1;
		for (int i = 1; i <= m - 1; i++) {
			highestPowerOfBase = (highestPowerOfBase * base) % p;
		}
		int i = 0;
		int p = 5381;
		int num1;
	}
	int hashValue(String str) {
		int n = str.length();
		int res = 0;
		int x = 1;
		int i = n - 1;
		int num;
	}
	int repeatedStringMatch(String a, String b) {
		int m = a.length();
		int n = b.length();
		String original = new String(a);
		for (int i = 1; i <= n / m + 2; i++) {
			if (contains(a,b) == true) {
				return i;
			}
			a = a + original;
		}
		return -1;
	}
}