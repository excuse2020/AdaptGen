class Solution {
	int dfs(ArrayList<ArrayList<Integer>> adj, List<Boolean> hasApple, int node, boolean[] vis) {
		vis[node] = true;
		int ans = 0;
		for (Integer ni: adj.get(node)) {	
			if (!vis[ni]) {
				int res = dfs(adj,hasApple,ni,vis);
				if (res > 0 || hasApple.get(ni)) {
					ans += (res + 2);
				}
			}
		}
		return ans;
	}
	int minTime(int n, int[][] edges, List<Boolean> hasApple) {
		ArrayList<ArrayList<Integer>> adj = new ArrayList<>();
		for (int i = 0; i < n; i++) {
			adj.add(new ArrayList<>());
		}
		for (int i = 0; i < edges.length; i++) {
			adj.get(edges[i][0]).add(edges[i][1]);
			adj.get(edges[i][1]).add(edges[i][0]);
		}
		boolean[] vis = new boolean[n];
		return dfs(adj,hasApple,0,vis);
	}
}