class Solution {
	List<List<Integer>> closestNodes(TreeNode root, List<Integer> queries) {
		List<Integer> treeAsList = new ArrayList<>();
		inorder(root,treeAsList);
		List<List<Integer>> answer = new ArrayList<>();
		for (Integer query: queries) {	
			List<Integer> ans = new ArrayList<>();
			int left = 0;
			int right = treeAsList.size() - 1;
			while (left <= right) {
				int mid = left + (right - left) / 2;
				if (treeAsList.get(mid).equals(query)) {
					ans.add(treeAsList.get(mid));
					ans.add(treeAsList.get(mid));
					break;
				} 
				else if (treeAsList.get(mid) > query) {
					right = mid - 1;
				} 
				else {
					left = mid + 1;
				}
			}
			if (ans.size() == 0) {
				int leftPosition = -1;
				if (left != 0) {
					leftPosition = treeAsList.get(left - 1);
				}
				int rightPosition = -1;
				if (left != treeAsList.size()) {
					rightPosition = treeAsList.get(left);
				}
				ans.add(leftPosition);
				ans.add(rightPosition);
			}
			answer.add(ans);
		}
		return answer;
	}
	void inorder(TreeNode root, List<Integer> treeAsList) {
		if (root == null) {
			return;
		} 
		else {
			inorder(root.left,treeAsList);
			treeAsList.add(root.val);
			inorder(root.right,treeAsList);
		}
	}
}