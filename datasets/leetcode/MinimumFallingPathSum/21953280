class Solution {
	int minFallingPathSum(int[][] matrix) {
		int m = matrix.length;
		int n = matrix[0].length;
		int dp = new int[m][n];
		for (int i = m - 1; i >= 0; i--) {
			for (int j = n - 1; j >= 0; j--) {
				if (i == m - 1) {
					dp[i][j] = matrix[i][j];
				} 
				else if (j == 0) {
					dp[i][j] = Math.min(dp[i + 1][j],dp[i + 1][j + 1]) + matrix[i][j];
				} 
				else if (j == m - 1) {
					dp[i][j] = Math.min(dp[i + 1][j],dp[i + 1][j - 1]) + matrix[i][j];
				} 
				else {
					dp[i][j] = Math.min(dp[i + 1][j],Math.min(dp[i + 1][j + 1],dp[i + 1][j - 1])) + matrix[i][j];
				}
			}
		}
		int min = dp[0][0];
		for (int h = 0; h < n; h++) {
			min = Math.min(min,dp[0][h]);
		}
		return min;
	}
}