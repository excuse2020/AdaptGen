class Solution {
	int minCost(int n, int[] cuts) {
		int c = cuts.length;
		if (c == 1) {
			return n;
		}
		int[][] dp = new int[c][c];
		Arrays.sort(cuts);
		dp[0][0] = cuts[1];
		dp[c - 1][c - 1] = n - cuts[c - 2];
		for (int i = 1; i < c - 1; i++) {
			dp[i][i] = cuts[i + 1] - cuts[i - 1];
		}
		for (int col = 1; col < c; col++) {
			int j = col;
			for (int i = 0; j < c; j++, i++) {
				int mini = Integer.MAX_VALUE;
				int l = (i != 0) ? cuts[i - 1] : 0;
				int r = (j != c - 1) ? cuts[j + 1] : n;
				for (int k = i; k <= j; k++) {
					int left = (k != i) ? dp[i][k - 1] : 0;
					int right = (k != j) ? dp[k + 1][j] : 0;
					mini = Math.min(mini,left + right);
				}
				dp[i][j] = mini + r - l;
			}
		}
		return dp[0][c - 1];
	}
}