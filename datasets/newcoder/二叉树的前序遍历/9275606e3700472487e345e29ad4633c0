class Solution {
	void preorder(List<Integer> list, TreeNode root) {
		if (root == null) {
			return;
		}
		list.add(root.val);
		preorder(list,root.left);
		preorder(list,root.right);
	}
	int[] preorderTraversal(TreeNode root) {
		return solution1(root);
	}
	int[] solution1(TreeNode root) {
		List<Integer> list = new ArrayList<>();
		preorder(list,root);
		int[] result = new int[list.size()];
		for (int i = 0; i < list.size(); i++) {
			result[i] = list.get(i);
		}
		return result;
	}
	int[] solution2(TreeNode root) {
		List<Integer> list = new ArrayList<>();
		Stack<TreeNode> stack = new Stack<>();
		if (root == null) {
			return new int[0];
		}
		stack.push(root);
		TreeNode node;
		while (!stack.isEmpty()) {
			node = stack.pop();
			list.add(node.val);
			if (node.right != null) {
				stack.push(node.right);
			}
			if (node.left != null) {
				stack.push(node.left);
			}
		}
		int[] result = new int[list.size()];
		for (int i = 0; i < list.size(); i++) {
			result[i] = list.get(i);
		}
		return result;
	}
}