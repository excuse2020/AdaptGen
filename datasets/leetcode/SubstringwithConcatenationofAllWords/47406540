class Solution {
	boolean check(int[] count, int[] text, int l, int r, String s, int length, Map<String, Integer> map) {
		for (int i = 0; i < 26; i++) {
			if (count[i] != text[i]) {
				return false;
			}
		}
		Map<String, Integer> newMap = new HashMap<>(map);
		int a = l, b = l;
		int totalElement = 0;
		while (b <= r) {
			String key = s.substring(a,b + 1);
			if (newMap.containsKey(key)) {
				newMap.put(key,newMap.get(key) - 1);
				if (newMap.get(key) <= 0) {
					newMap.remove(key);
				}
				b++;
				a = b;
				totalElement++;
			} 
			else {
				b++;
			}
		}
		return totalElement == length && newMap.isEmpty();
	}
	List<Integer> findSubstring(String s, String[] words) {
		int count = new int[26];
		int text = new int[26];
		int totalLength = 0;
		List<Integer> list = new ArrayList<>();
		Map<String, Integer> map = new HashMap<>();
		for (String word: words) {	
			map.put(word,map.getOrDefault(word,0) + 1);
		}
		int i = 0;
	}
}