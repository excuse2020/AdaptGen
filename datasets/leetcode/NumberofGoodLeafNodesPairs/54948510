class Solution {
	int count = 0;
	int countPairs(TreeNode root, int distance) {
		count = 0;
		dfs(root,distance);
		return count;
	}
	ArrayList<Integer> dfs(TreeNode root, int distance) {
		if (root == null) {
			return new ArrayList<>();
		}
		if (root.left == null && root.right == null) {
			ArrayList<Integer> list = new ArrayList<>();
			list.add(1);
			return list;
		}
		ArrayList<Integer> leftList = dfs(root.left,distance);
		ArrayList<Integer> rightList = dfs(root.right,distance);
		for (int i = 0; i < leftList.size(); i++) {
			for (int j = 0; j < rightList.size(); j++) {
				if (leftList.get(i) + rightList.get(j) <= distance) {
					count++;
				}
			}
		}
		for (int i = 0; i < leftList.size(); i++) {
			int e = leftList.get(i);
			leftList.set(i,e + 1);
		}
		for (Integer i: rightList) {	
			leftList.add(i + 1);
		}
		return leftList;
	}
}