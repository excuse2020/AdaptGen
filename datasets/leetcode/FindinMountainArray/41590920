class Solution {
	int binarySearchAscending(MountainArray mountainArr, int target, int left, int right) {
		while (left <= right) {
			int mid = left + (right - left) / 2;
			int midValue = mountainArr.get(mid);
			if (midValue == target) {
				return mid;
			} 
			else if (midValue < target) {
				left = mid + 1;
			} 
			else {
				right = mid - 1;
			}
		}
		return -1;
	}
	int binarySearchDescending(MountainArray mountainArr, int target, int left, int right) {
		while (left <= right) {
			int mid = left + (right - left) / 2;
			int midValue = mountainArr.get(mid);
			if (midValue == target) {
				return mid;
			} 
			else if (midValue > target) {
				left = mid + 1;
			} 
			else {
				right = mid - 1;
			}
		}
		return -1;
	}
	int findInMountainArray(int target, MountainArray mountainArr) {
		int peakIndex = findPeak(mountainArr);
		int targetIndex = binarySearchAscending(mountainArr,target,0,peakIndex);
		if (targetIndex != -1) {
			return targetIndex;
		}
		return binarySearchDescending(mountainArr,target,peakIndex + 1,mountainArr.length() - 1);
	}
	int findPeak(MountainArray mountainArr) {
		int left = 0;
		int right = mountainArr.length() - 1;
		while (left < right) {
			int mid = left + (right - left) / 2;
			if (mountainArr.get(mid) < mountainArr.get(mid + 1)) {
				left = mid + 1;
			} 
			else {
				right = mid;
			}
		}
		return left;
	}
}