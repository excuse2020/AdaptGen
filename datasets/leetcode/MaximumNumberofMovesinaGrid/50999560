class Solution {
	int arr;
	int dp;
	int m;
	int n;
	int helper(int r, int c) {
		if (c >= m - 1) {
			return 0;
		}
		if (dp[r][c] != -1) {
			return dp[r][c];
		}
		int x = arr[r][c];
		int a = 0, b = 0, d = 0;
		if ((r - 1) >= 0 && arr[r - 1][c + 1] > x) {
			a = 1 + helper(r - 1,c + 1);
		}
		if ((r + 1) < n && arr[r + 1][c + 1] > x) {
			b = 1 + helper(r + 1,c + 1);
		}
		if (arr[r][c + 1] > x) {
			d = 1 + helper(r,c + 1);
		}
		return dp[r][c] = Math.max(a,Math.max(b,d));
	}
	int maxMoves(int[][] grid) {
		arr = grid;
		n = arr.length;
		m = arr[0].length;
		dp = new int[1005][1005];
		for (var a: dp) {	
			Arrays.fill(a,-1);
		}
		int ans = (int) (-1e9);
		for (int i = 0; i < n; i++) {
			ans = Math.max(ans,helper(i,0));
		}
		return ans;
	}
}