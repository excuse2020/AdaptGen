class Solution {
	void addNode(TreeNode parentTreeNode, TreeNode toAddNode) {
		if (toAddNode.val > parentTreeNode.val) {
			if (parentTreeNode.right == null) {
				parentTreeNode.right = toAddNode;
			} 
			else {
				addNode(parentTreeNode.right,toAddNode);
			}
		} 
		else {
			if (parentTreeNode.left == null) {
				parentTreeNode.left = toAddNode;
			} 
			else {
				addNode(parentTreeNode.left,toAddNode);
			}
		}
	}
	void sortElesToBST(List<Integer> resultList, List<Integer> list) {
		if (list == null || list.size() == 0) {
			return;
		}
		if (list.size() == 1) {
			resultList.add(list.get(0));
			return;
		}
		int midEleIndex = list.size() / 2;
		resultList.add(list.get(midEleIndex));
		List<Integer> leftList = list.subList(0,midEleIndex);
		sortElesToBST(resultList,leftList);
		List<Integer> rightList = list.subList(midEleIndex + 1,list.size());
		sortElesToBST(resultList,rightList);
	}
	TreeNode sortedArrayToBST(int[] nums) {
		if (nums.length == 0) {
			return null;
		}
		if (nums.length == 1) {
			return new TreeNode(nums[0]);
		}
		List<Integer> list = new ArrayList<>();
		for (int ele: nums) {	
			list.add(ele);
		}
	}
}