class Solution {
	int count = 0;
	PriorityQueue<Integer> maxHeap = new PriorityQueue<>(new Comparator<Integer>());
	PriorityQueue<Integer> minHeap = new PriorityQueue<>();
	Double GetMedian() {
		if (count % 2 == 0) {
			return new Double(minHeap.peek() + maxHeap.peek()) / 2;
		} 
		else {
			return new Double(minHeap.peek());
		}
	}
	void Insert(Integer num) {
		if (count % 2 == 0) {
			maxHeap.offer(num);
			int temp = maxHeap.poll();
			minHeap.offer(temp);
		} 
		else {
			minHeap.offer(num);
			int temp = minHeap.poll();
			maxHeap.offer(temp);
		}
		count++;
	}
}