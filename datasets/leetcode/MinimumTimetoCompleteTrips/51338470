class Solution {
	boolean isPossible(long ans, int[] arr, int totalTrips) {
		long curans = 0;
		for (int i = 0; i < arr.length; i++) {
			curans = curans + ans / arr[i];
		}
		if (curans >= totalTrips) {
			return true;
		} 
		else {
			return false;
		}
	}
	long minimumTime(int[] time, int totalTrips) {
		long min = time[0];
		for (int i = 1; i < time.length; i++) {
			min = Math.min(min,time[i]);
		}
		long low = 1;
		long high = min * totalTrips;
		if (time.length == 1) {
			return high;
		}
		long ans = high;
		while (low <= high) {
			long mid = (low + high) / 2;
			if (isPossible(mid,time,totalTrips)) {
				high = mid - 1;
				ans = mid;
			} 
			else {
				low = mid + 1;
			}
		}
		return ans;
	}
}