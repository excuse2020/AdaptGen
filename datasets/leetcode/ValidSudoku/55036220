class Solution {
	boolean isValidSudoku(char[][] board) {
		int i = 0;
		int j = 0;
	}
	boolean validCol(char[][] board, int row, int col, int num) {
		for (int i = 0; i < board.length; i++) {
			if (board[i][col] == num && i != row) {
				return false;
			}
		}
		return true;
	}
	boolean validGrid(char[][] board, int row, int col, int num) {
		int startRow = row - (row % 3);
		int startCol = col - (col % 3);
		for (int i = startRow; i < startRow + 3; i++) {
			for (int j = startCol; j < startCol + 3; j++) {
				if (board[i][j] == num && i != row && j != col) {
					return false;
				}
			}
		}
		return true;
	}
	boolean validRow(char[][] board, int row, int col, int num) {
		for (int i = 0; i < board[0].length; i++) {
			if (board[row][i] == num && i != col) {
				return false;
			}
		}
		return true;
	}
}