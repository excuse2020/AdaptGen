class Solution {
	String LCS(String s1, String s2) {
		if (s1 == null || s2 == null) {
			return "-1";
		}
		int[][] dp = new int[s1.length() + 1][s2.length() + 1];
		int m = s1.length() + 1;
		int n = s2.length() + 1;
		for (int i = 0; i < m; i++) {
			for (int j = 0; j < n; j++) {
				if (i == 0 || j == 0) {
					dp[i][j] = 0;
					continue;
				}
				if (s1.charAt(i - 1) == s2.charAt(j - 1)) {
					dp[i][j] = dp[i - 1][j - 1] + 1;
				} 
				else {
					dp[i][j] = Math.max(dp[i - 1][j],dp[i][j - 1]);
				}
			}
		}
		int s1L = m - 1, s2L = n - 1;
		StringBuilder sb = new StringBuilder();
		while (s1L != 0 && s2L != 0) {
			if (s1.charAt(s1L - 1) == s2.charAt(s2L - 1)) {
				sb.append(s1.charAt(s1L - 1));
				s1L--;
				s2L--;
			} 
			else {
				if (dp[s1L - 1][s2L] > dp[s1L][s2L - 1]) {
					s1L--;
				} 
				else {
					s2L--;
				}
			}
		}
		if (sb.length() == 0) {
			return "-1";
		}
		return sb.reverse().toString();
	}
}