class Solution {
	HashMap<String, Integer> map;
	void dfs(ArrayList<String> res, StringBuilder sb, int n2, int cnt) {
		if (sb.length() == n2) {
			if (cnt == 0) {
				res.add(new String(sb));
			}
			return;
		}
		if (cnt < 0) {
			return;
		}
		for (String key: map.keySet()) {	
			int n;
			if ((n = map.get(key)) > 0) {
				if ("(".equals(key)) {
					sb.append(key);
					map.put(key,n - 1);
					dfs(res,sb,n2,cnt + 1);
					sb.deleteCharAt(sb.length() - 1);
					map.put(key,n);
				} 
				else {
					sb.append(key);
					map.put(key,n - 1);
					dfs(res,sb,n2,cnt - 1);
					sb.deleteCharAt(sb.length() - 1);
					map.put(key,n);
				}
			}
		}
	}
	void dfs1(ArrayList<String> res, StringBuilder sb, int left, int right) {
		if (left == 0 && right == 0) {
			res.add(new String(sb));
			return;
		}
		if (left > right) {
			return;
		}
		if (left > 0) {
			sb.append("(");
			dfs1(res,sb,left - 1,right);
			sb.deleteCharAt(sb.length() - 1);
		}
		if (right > 0) {
			sb.append(")");
			dfs1(res,sb,left,right - 1);
			sb.deleteCharAt(sb.length() - 1);
		}
	}
	ArrayList<String> generateParenthesis(int n) {
		ArrayList<String> res = new ArrayList<String>();
		dfs1(res,new StringBuilder(),n,n);
		return res;
	}
}