class Solution {
	int getMaximumGold(int[][] grid) {
		int m = grid.length;
		int n = grid[0].length;
		int ans = 0;
		for (int i = 0; i < m; i++) {
			for (int j = 0; j < n; j++) {
				if (grid[i][j] != 0) {
					ans = Math.max(ans,rec(grid,i,j));
				}
			}
		}
		return ans;
	}
	int rec(int[][] grid, int i, int j) {
		int m = grid.length;
		int n = grid[0].length;
		if (i < 0 || i >= m || j < 0 || j >= n || grid[i][j] == 0 || grid[i][j] == 101) {
			return 0;
		}
		int curr = grid[i][j];
		grid[i][j] = 101;
		int left = rec(grid,i,j - 1);
		int right = rec(grid,i,j + 1);
		int top = rec(grid,i - 1,j);
		int bottom = rec(grid,i + 1,j);
		grid[i][j] = curr;
		return curr + Math.max(left,Math.max(right,Math.max(bottom,top)));
	}
}