class Solution {
	int maxLength(int[] arr) {
		if (arr == null) {
			return 0;
		}
		if (arr.length == 1) {
			return 1;
		}
		int max = 0;
		Map<Integer, Integer> map = new HashMap<>();
		int leftIndex = 0;
		int len = arr.length;
		while (leftIndex < len) {
			int repeatData = -1;
			for (int i = leftIndex; i < len; i++) {
				if (map.keySet().contains(arr[i])) {
					repeatData = arr[i];
					break;
				}
				map.put(arr[i],i);
			}
			if (repeatData == -1) {
				return Math.max(max,map.size());
			} 
			else {
				leftIndex = map.get(repeatData) + 1;
				max = Math.max(max,map.size());
				map.clear();
			}
		}
		return max;
	}
}