class Solution {
	int timer = 1;
	List<List<Integer>> criticalConnections(int n, List<List<Integer>> connections) {
		List<List<Integer>> ans = new ArrayList<>();
		List<List<Integer>> adjList = new ArrayList<>();
		for (int i = 0; i < n; i++) {
			adjList.add(new ArrayList<>());
		}
		for (List<Integer> edge: connections) {	
			int u = edge.get(0);
			int v = edge.get(1);
			adjList.get(u).add(v);
			adjList.get(v).add(u);
		}
		int[] vis = new int[n];
		int[] tin = new int[n];
		int[] low = new int[n];
		dfs(0,-1,vis,tin,low,adjList,ans);
		return ans;
	}
	void dfs(int node, int parent, int[] vis, int[] tin, int[] low, List<List<Integer>> adjList, List<List<Integer>> ans) {
		vis[node] = 1;
		low[node] = tin[node] = timer;
		timer++;
		for (int adjNode: adjList.get(node)) {	
			if (parent == adjNode) {
				continue;
			}
			if (vis[adjNode] == 0) {
				dfs(adjNode,node,vis,tin,low,adjList,ans);
				low[node] = Math.min(low[node],low[adjNode]);
				if (tin[node] < low[adjNode]) {
					ans.add(Arrays.asList(node,adjNode));
				}
			} 
			else {
				low[node] = Math.min(low[node],low[adjNode]);
			}
		}
	}
}