class Solution {
	int[] disc;
	int[] low;
	int time;
	List<List<Integer>> criticalConnections(int n, List<List<Integer>> connections) {
		disc = new int[n];
		low = new int[n];
		time = 0;
		List<List<Integer>> ans = new ArrayList<>();
		boolean[] vis = new boolean[n];
		ArrayList<Integer>[] graph = new ArrayList[n];
		for (int i = 0; i < n; i++) {
			graph[i] = new ArrayList<>();
		}
		for (List<Integer> edge: connections) {	
			graph[edge.get(0)].add(edge.get(1));
			graph[edge.get(1)].add(edge.get(0));
		}
		criticalConnections(graph,0,-1,vis,ans);
		return ans;
	}
	void criticalConnections(ArrayList<Integer>[] graph, int src, int par, boolean[] vis, List<List<Integer>> ans) {
		disc[src] = low[src] = time++;
		vis[src] = true;
		for (int nbr: graph[src]) {	
			if (nbr == par) {
			} 
			else if (vis[nbr] == true) {
				low[src] = Math.min(low[src],disc[nbr]);
			} 
			else if (vis[nbr] == false) {
				criticalConnections(graph,nbr,src,vis,ans);
				low[src] = Math.min(low[src],low[nbr]);
				if (disc[src] < low[nbr]) {
					ArrayList<Integer> edge = new ArrayList<>();
					edge.add(src);
					edge.add(nbr);
					ans.add(edge);
				}
			}
		}
	}
}