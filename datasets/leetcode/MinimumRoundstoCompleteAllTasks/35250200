class Solution {
	int computeOptimalCount(int num) {
		if (num % 3 == 0) {
			return num / 3;
		} 
		else if (num % 3 == 2) {
			return num / 3 + 1;
		} 
		else if (num == 7) {
			return 3;
		} 
		else if (num > 7 && num % 7 == 0) {
			return num / 7 * 3;
		} 
		else if (num > 7 && (num - 7) % 3 == 0) {
			return (num - 7) / 3 + 3;
		} 
		else if (num % 2 == 0) {
			return num / 2;
		} 
		else {
			return -1;
		}
	}
	int minimumRounds(int[] tasks) {
		Map<Integer, Integer> tasksByDiff = new HashMap<>();
		for (int diff: tasks) {	
			tasksByDiff.merge(diff,1,);
		}
		int count = 0;
		for (Integer freq: tasksByDiff.values()) {	
			int optimal = computeOptimalCount(freq);
			if (optimal == -1) {
				return -1;
			}
			count += optimal;
		}
		return count;
	}
}