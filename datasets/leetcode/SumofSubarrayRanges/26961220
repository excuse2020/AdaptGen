class Solution {
	long subArrayRanges(int[] nums) {
		if (nums == null || nums.length <= 1) {
			return 0L;
		}
		int n = nums.length;
		long sum = 0;
		Deque<Integer> stack = new ArrayDeque<Integer>();
		for (int i = 0; i <= n; i++) {
			while (!stack.isEmpty() && (i == n || nums[stack.peekLast()] < nums[i])) {
				int currMax = stack.removeLast();
				int left = stack.isEmpty() ? -1 : stack.peekLast();
				int right = i;
				sum += (long) (currMax - left) * (right - currMax);
			}
			stack.add(i);
		}
		stack.clear();
		for (int i = 0; i <= n; i++) {
			while (!stack.isEmpty() && (i == n || nums[stack.peekLast()] > nums[i])) {
				int currMin = stack.removeLast();
				int left = stack.isEmpty() ? -1 : stack.peekLast();
				int right = i;
				sum -= (long) (currMin - left) * (right - currMin);
			}
			stack.add(i);
		}
		return sum;
	}
}