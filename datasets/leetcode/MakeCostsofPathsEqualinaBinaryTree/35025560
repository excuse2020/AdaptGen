class Solution {
	int max;
	int dfs(int node, int n, int cost) {
		if (node >= n) {
			return 0;
		}
		int left = dfs(2 * node + 1,n,cost);
		int right = dfs(2 * node + 2,n,cost);
		max[node] = Math.max(left,right) + cost[node];
		return Math.max(left,right) + cost[node];
	}
	int dfs2(int node, int value, int cost) {
		if (node >= cost.length) {
			return 0;
		}
		int temp = value - max[node];
		if (temp < 0) {
			return -1;
		}
		int left = dfs2(2 * node + 1,value - cost[node],cost);
		if (left == -1) {
			return -1;
		}
		int right = dfs2(2 * node + 2,value - cost[node],cost);
		if (right == -1) {
			return -1;
		}
		return left + right;
	}
	int minIncrements(int n, int[] cost) {
		max = new int[n];
		dfs(0,n,cost);
		int low = 1;
		int high = 1000000;
		int ans = 0;
		while (low <= high) {
			int mid = (low + high) / 2;
			int res = dfs2(0,mid,cost);
			if (res == -1) {
				low = mid + 1;
			} 
			else {
				ans = res;
				high = mid - 1;
			}
		}
		return ans;
	}
}