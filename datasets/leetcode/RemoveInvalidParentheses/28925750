class Solution {
	String buildString(String s, boolean[] removeMap) {
		StringBuilder sb = new StringBuilder();
		for (int i = 0; i < s.length(); ++i) {
			if (!removeMap[i]) {
				sb.append(s.charAt(i));
			}
		}
		return sb.toString();
	}
	void dfs(String s, int start, int leftRemove, int rightRemove, boolean[] removeMap, List<String> rst) {
		if (start >= s.length()) {
			if (leftRemove == 0 && rightRemove == 0 && isValid(s,removeMap)) {
				rst.add(buildString(s,removeMap));
			}
			return;
		}
		char cur = s.charAt(start);
	}
	boolean isValid(String s, boolean[] removeMap) {
		int open = 0;
		int i = 0;
		if (removeMap[i]) {
			continue;
		}
	}
	List<String> removeInvalidParentheses(String s) {
		int leftRemove = 0;
		int rightRemove = 0;
		int open = 0;
		int i = 0;
		char cur = s.charAt(i);
	}
}