class Solution {
	int cherryPickup(int[][] grid) {
		int[][][] memo = new int[grid.length][grid[0].length][grid[0].length];
		for (int i = 0; i < grid.length; i++) {
			for (int j = 0; j < grid[0].length; j++) {
				for (int k = 0; k < grid[0].length; k++) {
					memo[i][j][k] = -1;
				}
			}
		}
		return memoization(0,0,grid[0].length - 1,grid,memo);
	}
	int memoization(int i, int j1, int j2, int[][] grid, int[][][] memo) {
		if (j1 < 0 || j2 < 0 || j1 >= grid[0].length || j2 >= grid[0].length) {
			return Integer.MIN_VALUE;
		}
		if (i == grid.length - 1) {
			if (j1 == j2) {
				return grid[i][j1];
			} 
			else {
				return grid[i][j1] + grid[i][j2];
			}
		}
		if (memo[i][j1][j2] != -1) {
			return memo[i][j1][j2];
		}
		int max = 0;
		for (int k = -1; k <= 1; k++) {
			for (int l = -1; l <= 1; l++) {
				if (j1 == j2) {
					max = Math.max(max,grid[i][j1] + memoization(i + 1,j1 + k,j2 + l,grid,memo));
				} 
				else {
					max = Math.max(max,grid[i][j1] + grid[i][j2]);
				}
			}
		}
		memo[i][j1][j2] = max;
		return memo[i][j1][j2];
	}
}