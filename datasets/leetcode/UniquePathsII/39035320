class Solution {
	int helper(int[][] obs, int row, int col) {
		int ans = 0;
		if (row < 0 || row >= obs.length || col < 0 || col >= obs[row].length || obs[row][col] == 1) {
			return 0;
		}
		if (row == obs.length - 1 && col == obs[row].length - 1) {
			return 1;
		}
		ans += helper(obs,row + 1,col);
		ans += helper(obs,row,col + 1);
		return ans;
	}
	int uniquePathsWithObstacles(int[][] obs) {
		int m = obs.length, n = obs[0].length;
		if (obs[0][0] == 1 || obs[m - 1][n - 1] == 1) {
			return 0;
		}
		int[][] dp = new int[m][n];
		dp[0][0] = 1;
		for (int i = 0; i < m; i++) {
			for (int j = 0; j < n; j++) {
				if (i == 0 && j == 0) {
					continue;
				}
				if (obs[i][j] == 1) {
					dp[i][j] = 0;
				} 
				else {
					if (i - 1 >= 0) {
						dp[i][j] += dp[i - 1][j];
					}
					if (j - 1 >= 0) {
						dp[i][j] += dp[i][j - 1];
					}
				}
			}
		}
		return dp[m - 1][n - 1];
	}
}