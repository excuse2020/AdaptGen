class Solution {
	int GreatestBinary(MountainArray Arr) {
		int start = 0;
		int end = Arr.length() - 1;
		while (start < end - 1) {
			int mid = start + (end - start) / 2;
			if (Arr.get(mid + 1) < Arr.get(mid)) {
				end = mid;
			} 
			else if (Arr.get(mid + 1) > Arr.get(mid)) {
				start = mid;
			}
		}
		return end;
	}
	int findInMountainArray(int target, MountainArray mountainArr) {
		int index = GreatestBinary(mountainArr);
		int result1 = regBinary(mountainArr,target,0,index,true);
		int result2 = regBinary(mountainArr,target,index + 1,mountainArr.length() - 1,false);
		if (result1 != -1 && (result2 == -1 || result1 < result2)) {
			return result1;
		}
		return result2;
	}
	int regBinary(MountainArray arr, int target, int start, int end, boolean rightSlope) {
		while (start <= end) {
			int mid = start + (end - start) / 2;
			if (arr.get(mid) == target) {
				return mid;
			}
			if (rightSlope) {
				if (arr.get(mid) > target) {
					end = mid - 1;
				} 
				else {
					start = mid + 1;
				}
			} 
			else {
				if (arr.get(mid) < target) {
					end = mid - 1;
				} 
				else {
					start = mid + 1;
				}
			}
		}
		return -1;
	}
}