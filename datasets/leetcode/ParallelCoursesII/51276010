class Solution {
	List<Integer> dp;
	void generateCombinations(List<Integer> nodes, int k, int startIndex, List<Integer> currentCombination, List<List<Integer>> result) {
		if (k == 0) {
			result.add(new ArrayList<>(currentCombination));
			return;
		}
		for (int i = startIndex; i < nodes.size(); ++i) {
			currentCombination.add(nodes.get(i));
			generateCombinations(nodes,k - 1,i + 1,currentCombination,result);
			currentCombination.remove(currentCombination.size() - 1);
		}
	}
	int minNumberOfSemesters(int n, int[][] relations, int k) {
		List<Integer> indegree = new ArrayList<>(n);
		List<List<Integer>> adj = new ArrayList<>(n);
		for (int i = 0; i < n; i++) {
			indegree.add(0);
			adj.add(new ArrayList<>());
		}
		for (int[] rel: relations) {	
			int courseA = rel[0] - 1;
			int courseB = rel[1] - 1;
			indegree.set(courseB,indegree.get(courseB) + 1);
			adj.get(courseA).add(courseB);
		}
		int mask = (1 << n) - 1;
		dp = new ArrayList<>(mask + 1);
		for (int i = 0; i <= mask; i++) {
			dp.add(-1);
		}
		return solve(mask,indegree,adj,k);
	}
	int solve(int mask, List<Integer> indegree, List<List<Integer>> adj, int k) {
		if (mask == 0) {
			return 0;
		}
		if (dp.get(mask) != -1) {
			return dp.get(mask);
		}
		int ans = Integer.MAX_VALUE;
		List<Integer> nodes = new ArrayList<>();
		for (int i = 0; i < indegree.size(); i++) {
			if (((mask >> i) & 1) == 1 && indegree.get(i) == 0) {
				nodes.add(i);
			}
		}
		int val = nodes.size();
		List<List<Integer>> combinations = uniqueCombinations(nodes,Math.min(val,k));
		for (List<Integer> combination: combinations) {	
			int newMask = mask;
			List<Integer> newIndegree = new ArrayList<>(indegree);
			for (int j: combination) {	
				newMask ^= (1 << j);
				for (int child: adj.get(j)) {	
					newIndegree.set(child,newIndegree.get(child) - 1);
				}
			}
			ans = Math.min(ans,1 + solve(newMask,newIndegree,adj,k));
		}
		dp.set(mask,ans);
		return ans;
	}
	List<List<Integer>> uniqueCombinations(List<Integer> nodes, int k) {
		List<List<Integer>> result = new ArrayList<>();
		generateCombinations(nodes,k,0,new ArrayList<>(),result);
		return result;
	}
}