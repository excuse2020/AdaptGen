class Solution {
	long maximumSubarraySum(int[] nums, int k) {
		HashMap<Integer, Integer> map = new HashMap<>();
		long ans = 0, sum = 0;
		for (int i = 0; i < nums.length; i++) {
			map.put(nums[i],map.getOrDefault(nums[i],0) + 1);
			sum += nums[i];
			if (i >= k - 1) {
				if (map.size() == k) {
					ans = Math.max(ans,sum);
				}
				sum = sum - nums[i - k + 1];
				map.put(nums[i - k + 1],map.get(nums[i - k + 1]) - 1);
				if (map.get(nums[i - k + 1]) == 0) {
					map.remove(nums[i - k + 1]);
				}
			}
		}
		return ans;
	}
	long maximumSubarraySum2(int[] nums, int k) {
		int result = 0;
		int n = nums.length;
		int sum = 0;
		HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
		map.clear();
		int count = 0;
		for (int i = 0; i < n; i++) {
			sum = 0;
			count = 0;
			for (int j = i; j < n; j++) {
				count++;
				if (map.containsKey(nums[j])) {
					map.clear();
					sum = 0;
					break;
				} 
				else {
					map.put(nums[j],1);
					sum += nums[j];
				}
				if (count > k) {
					sum = 0;
					map.clear();
					break;
				}
				if (count == k && sum > result) {
					result = sum;
				}
			}
		}
		return result;
	}
	long maximumSubarraySum3(int[] nums, int k) {
		HashSet<Integer> set = new HashSet<Integer>();
		set.clear();
		long ans = 0, tempSum = 0;
		for (int i = 0; i < nums.length; i++) {
			if (set.size() == k && i - k >= 0) {
				set.remove(nums[i - k]);
				tempSum -= nums[i - k];
			}
			if (set.contains(nums[i])) {
				set.clear();
				set.add(nums[i]);
				tempSum = nums[i];
			} 
			else {
				tempSum += nums[i];
				set.add(nums[i]);
			}
			if (i == k - 1 || i >= k) {
				if (set.size() == k) {
					ans = Math.max(ans,tempSum);
				}
			}
		}
		return ans;
	}
}