class Solution {
	int knightDialer(int n) {
		int m = 1000000000 + 7;
		HashMap<Integer, List<Integer>> hm = new HashMap<Integer, List<Integer>>();
		hm.put(0,new LinkedList<Integer>());
		hm.get(0).add(4);
		hm.get(0).add(6);
		hm.put(1,new LinkedList<Integer>());
		hm.get(1).add(6);
		hm.get(1).add(8);
		hm.put(2,new LinkedList<Integer>());
		hm.get(2).add(7);
		hm.get(2).add(9);
		hm.put(3,new LinkedList<Integer>());
		hm.get(3).add(4);
		hm.get(3).add(8);
		hm.put(4,new LinkedList<Integer>());
		hm.get(4).add(0);
		hm.get(4).add(3);
		hm.get(4).add(9);
		hm.put(5,new LinkedList<Integer>());
		hm.put(6,new LinkedList<Integer>());
		hm.get(6).add(0);
		hm.get(6).add(1);
		hm.get(6).add(7);
		hm.put(7,new LinkedList<Integer>());
		hm.get(7).add(2);
		hm.get(7).add(6);
		hm.put(8,new LinkedList<Integer>());
		hm.get(8).add(1);
		hm.get(8).add(3);
		hm.put(9,new LinkedList<Integer>());
		hm.get(9).add(2);
		hm.get(9).add(4);
		int[][] arr = new int[n + 1][10];
		for (int i = 0; i < 10; i++) {
			arr[1][i] = 1;
		}
		for (int i = 2; i <= n; i++) {
			for (int j = 0; j < 10; j++) {
				arr[i][j] = 0;
				for (int num: hm.get(j)) {	
					arr[i][j] += arr[i - 1][num];
					arr[i][j] = arr[i][j] % m;
				}
			}
		}
		int sum = 0;
		for (int j = 0; j < 10; j++) {
			sum += arr[n][j];
			sum = sum % m;
		}
		return sum;
	}
}