class Solution {
	void AfterPrint(TreeNode root, List<Integer> list) {
		if (root == null) {
			return;
		}
		AfterPrint(root.left,list);
		AfterPrint(root.right,list);
		list.add(root.val);
	}
	void MiddlePrint(TreeNode root, List<Integer> list) {
		if (root == null) {
			return;
		}
		MiddlePrint(root.left,list);
		list.add(root.val);
		MiddlePrint(root.right,list);
	}
	void prePrint(TreeNode root, List<Integer> list) {
		if (root == null) {
			return;
		}
		list.add(root.val);
		prePrint(root.left,list);
		prePrint(root.right,list);
	}
	int[][] threeOrders(TreeNode root) {
		List<Integer> listA = new ArrayList<>();
		List<Integer> listB = new ArrayList<>();
		List<Integer> listC = new ArrayList<>();
		prePrint(root,listA);
		MiddlePrint(root,listB);
		AfterPrint(root,listC);
		int[][] arr = new int[3][listA.size()];
		for (int i = 0; i < listA.size(); i++) {
			arr[0][i] = listA.get(i);
			arr[1][i] = listB.get(i);
			arr[2][i] = listC.get(i);
		}
		return arr;
	}
}