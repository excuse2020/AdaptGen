class Solution {
	int superEggDrop(int n, int k) {
		int dp = new int[n + 1][k + 1];
		for (int j = 1; j <= k; j++) {
			dp[1][j] = j;
		}
		for (int i = 1; i <= n; i++) {
			dp[i][1] = 1;
		}
		for (int i = 2; i <= n; i++) {
			for (int j = 2; j <= k; j++) {
				int low = 1;
				int high = j;
				int min = Integer.MAX_VALUE;
				while (low <= high) {
					int mid = (low + high) / 2;
					int breaks = dp[i - 1][mid - 1];
					int survives = dp[i][j - mid];
					int ans = 1 + Math.max(breaks,survives);
					if (breaks > survives) {
						high = mid - 1;
						min = Math.min(ans,min);
					} 
					else {
						low = mid + 1;
						min = Math.min(ans,min);
					}
				}
				dp[i][j] = min;
			}
		}
		return dp[n][k];
	}
}