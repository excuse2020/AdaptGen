class Solution {
	Set<String> S = new HashSet<>();
	String beginWord;
	Map<String, Integer> dist = new HashMap<>();
	List<String> path = new ArrayList<>();
	Queue<String> q = new LinkedList<>();
	List<List<String>> res = new ArrayList<>();
	void dfs(String u) {
		List<String> tmp = new ArrayList<>(path);
		Collections.reverse(tmp);
		res.add(tmp);
		int i = 0;
		char[] str = u.toCharArray();
		char c;
	}
	List<List<String>> findLadders(String _beginWord, String endWord, List<String> wordList) {
		beginWord = _beginWord;
		S.addAll(wordList);
		if (!S.contains(endWord)) {
			return res;
		}
		dist.put(beginWord,0);
		q.offer(beginWord);
		String t = q.poll();
		int i = 0;
		char[] str = t.toCharArray();
		char c;
	}
}