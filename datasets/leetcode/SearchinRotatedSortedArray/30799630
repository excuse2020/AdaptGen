class Solution {
	boolean isBetweenInclusive(int target, int from, int to) {
		return from <= target && to >= target;
	}
	boolean isInLeftSide(int from, int to, int mid, int target) {
		return (from <= mid && isBetweenInclusive(target,from,mid)) || (mid <= to && !isBetweenInclusive(target,mid,to));
	}
	int search(int[] nums, int target) {
		int from = 0;
		int to = nums.length - 1;
		while (from <= to) {
			int mid = from + (to - from) / 2;
			if (nums[mid] == target) {
				return mid;
			}
			if (isInLeftSide(nums[from],nums[to],nums[mid],target)) {
				to = mid - 1;
			} 
			else {
				from = mid + 1;
			}
		}
		return -1;
	}
}