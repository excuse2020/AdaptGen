class Solution {
	void backtracking(int[] candidates, int target, int start, List<List<Integer>> result, List<Integer> currentConfig) {
		if (target == 0) {
			result.add(new ArrayList<>(currentConfig));
			return;
		}
		for (int i = start; i < candidates.length; i++) {
			if (i > start && candidates[i] == candidates[i - 1]) {
				continue;
			}
			if (target < candidates[i]) {
				break;
			}
			currentConfig.add(candidates[i]);
			backtracking(candidates,target - candidates[i],i + 1,result,new ArrayList<>(currentConfig));
			currentConfig.remove(currentConfig.size() - 1);
		}
	}
	List<List<Integer>> combinationSum2(int[] candidates, int target) {
		List<List<Integer>> result = new ArrayList<>();
		Arrays.sort(candidates);
		backtracking(candidates,target,0,result,new ArrayList<>());
		return result;
	}
}