class Solution {
	boolean binarySearch(int a, int n) {
		int start = 0, end = a.length - 1, mid;
		while (start <= end) {
			mid = (start + end) / 2;
			if (a[mid] == n) {
				return true;
			} 
			else if (a[mid] < n) {
				start = mid + 1;
			} 
			else {
				end = mid - 1;
			}
		}
		return false;
	}
	List<List<Integer>> findDifference(int[] n1, int[] n2) {
		int i, res, j;
		Arrays.sort(n1);
		Arrays.sort(n2);
		HashSet<Integer> hashSet = new HashSet<Integer>();
		HashSet<Integer> hashSet1 = new HashSet<Integer>();
		for (i = 0; i < n1.length; i++) {
			if (binarySearch(n2,n1[i])) {
				continue;
			} 
			else {
				hashSet.add(n1[i]);
			}
		}
		for (i = 0; i < n2.length; i++) {
			if (binarySearch(n1,n2[i])) {
				continue;
			} 
			else {
				hashSet1.add(n2[i]);
			}
		}
		List<List<Integer>> ans = new ArrayList<>();
		ArrayList<Integer> ans1 = new ArrayList<>(hashSet);
		ArrayList<Integer> ans2 = new ArrayList<>(hashSet1);
		ans.add(ans1);
		ans.add(ans2);
		return ans;
	}
}