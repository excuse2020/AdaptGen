class Solution {
	int longestAlternatingSubarray(int[] nums, int t) {
		int max = 0;
		int count = 0;
		int flag = 0;
		for (int i = 0; i < nums.length; i++) {
			if (i != nums.length - 1) {
				if (nums[i] % 2 == 0 && nums[i + 1] % 2 != 0 && nums[i] <= t && nums[i + 1] <= t) {
					flag = 1;
					count += 2;
					max = Math.max(count,max);
					i++;
				} 
				else if (nums[i] % 2 == 0 && nums[i + 1] % 2 == 0 && nums[i] <= t && nums[i + 1] <= t) {
					count++;
					flag = 1;
					max = Math.max(count,max);
					count = 0;
				} 
				else if (nums[i] % 2 == 0 && nums[i + 1] % 2 == 0 && nums[i] <= t && nums[i + 1] > t) {
					count++;
					flag = 1;
					max = Math.max(count,max);
					count = 0;
				} 
				else if (nums[i] % 2 == 0 && nums[i + 1] % 2 != 0 && nums[i] <= t && nums[i + 1] > t) {
					count++;
					flag = 1;
					max = Math.max(count,max);
					count = 0;
				} 
				else {
					count = 0;
				}
			} 
			else {
				if (count != 0 || flag == 0) {
					if (nums[nums.length - 1] % 2 == 0 && nums[nums.length - 1] <= t) {
						count++;
						max = Math.max(count,max);
					}
				}
			}
		}
		return max;
	}
}