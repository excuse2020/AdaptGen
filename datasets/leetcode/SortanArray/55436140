class Solution {
	void merge(int[] nums, int start, int mid, int end) {
		int n1 = (mid - start) + 1;
		int n2 = (end - mid);
		int[] arr_part1 = new int[n1];
		int[] arr_part2 = new int[n2];
		for (int i = 0; i < n1; i++) {
			arr_part1[i] = nums[start + i];
		}
		for (int j = 0; j < n2; j++) {
			arr_part2[j] = nums[(mid + 1) + j];
		}
		int i = 0;
		int j = 0;
		int k = start;
		while (i < n1 && j < n2) {
			if (arr_part1[i] <= arr_part2[j]) {
				nums[k] = arr_part1[i];
				i++;
			} 
			else {
				nums[k] = arr_part2[j];
				j++;
			}
			k++;
		}
		while (i < n1) {
			nums[k] = arr_part1[i];
			i++;
			k++;
		}
		while (j < n2) {
			nums[k] = arr_part2[j];
			j++;
			k++;
		}
	}
	void mergeSort(int[] nums, int start, int end) {
		if (start < end) {
			int mid = start + (end - start) / 2;
			mergeSort(nums,start,mid);
			mergeSort(nums,mid + 1,end);
			merge(nums,start,mid,end);
		}
	}
	int[] sortArray(int[] nums) {
		mergeSort(nums,0,nums.length - 1);
		return nums;
	}
}