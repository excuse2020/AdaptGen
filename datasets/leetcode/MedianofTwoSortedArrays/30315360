class Solution {
	double findMedianSortedArrays(int[] nums1, int[] nums2) {
		int totalLength = nums1.length + nums2.length;
		int left = (totalLength - 1) / 2;
		if (totalLength == 1) {
			if (nums1.length == 1) {
				return nums1[0];
			}
			return nums2[0];
		}
		if (totalLength == 2) {
			if (nums1.length == 2) {
				return (nums1[0] + nums1[1]) / 2d;
			} 
			else if (nums2.length == 2) {
				return (nums2[0] + nums2[1]) / 2d;
			}
			return (nums1[0] + nums2[0]) / 2d;
		}
		int i = 0;
		int j = 0;
		while (i < nums1.length && j < nums2.length && left-- > 0) {
			if (nums1[i] < nums2[j]) {
				i++;
			} 
			else {
				j++;
			}
		}
		while (i < nums1.length && left-- > 0) {
			i++;
		}
		while (j < nums2.length && left-- > 0) {
			j++;
		}
		if (totalLength % 2 != 0) {
			if (i < nums1.length && j < nums2.length) {
				return Math.min(nums1[i],nums2[j]);
			} 
			else if (i < nums1.length) {
				return nums1[i];
			} 
			else {
				return nums2[j];
			}
		}
		int a = 0;
		int b = 0;
		if (i + 1 < nums1.length && j + 1 < nums2.length) {
			if (nums1[i] < nums2[j]) {
				a = nums1[i];
				b = Math.min(nums1[i + 1],nums2[j]);
			} 
			else {
				a = nums2[j];
				b = Math.min(nums2[j + 1],nums1[i]);
			}
		}
		if (i + 1 == nums1.length) {
			if (nums1[i] < nums2[j]) {
				a = nums1[i];
				b = nums2[j];
			} 
			else {
				a = nums2[j];
				b = Math.min(nums2[j + 1],nums1[i]);
			}
		} 
		else if (j + 1 == nums2.length) {
			if (nums1[i] < nums2[j]) {
				a = nums1[i];
				b = Math.min(nums1[i + 1],nums2[j]);
			} 
			else {
				a = nums2[j];
				b = nums1[i];
			}
		} 
		else if (i == nums1.length && j < nums2.length) {
			a = nums2[j];
			b = nums2[j + 1];
		} 
		else if (j == nums2.length && i < nums1.length) {
			a = nums1[i];
			b = nums1[i + 1];
		}
		return (a + b) / 2d;
	}
}