class Solution {
	int s;
	boolean f(TreeNode n, int t, List<Integer> l, List<List<Integer>> ans) {
		if (n == null) {
			return false;
		}
		s = s + n.val;
		l.add(n.val);
		if (n.left == null && n.right == null) {
			if (s == t) {
				List<Integer> temp = new ArrayList<>(l);
				ans.add(temp);
			}
		}
		boolean p = f(n.left,t,l,ans);
		boolean q = f(n.right,t,l,ans);
		s = s - n.val;
		l.remove(l.size() - 1);
		return false;
	}
	List<List<Integer>> pathSum(TreeNode root, int targetSum) {
		s = 0;
		List<List<Integer>> ans = new ArrayList<>();
		List<Integer> l = new ArrayList<>();
		f(root,targetSum,l,ans);
		return ans;
	}
}