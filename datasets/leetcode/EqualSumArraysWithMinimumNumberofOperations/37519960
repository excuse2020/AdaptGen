class Solution {
	int find(int num1, int num2, int t) {
		int i = 0, j = num2.length - 1, c = 0;
		int n1 = num1.length, n2 = num2.length;
		while (t > 0) {
			if (i < n1 && j >= 0) {
				if (6 - num1[i] >= num2[j] - 1) {
					t -= 6 - num1[i];
					i++;
					c++;
				} 
				else {
					t -= num2[j] - 1;
					j--;
					c++;
				}
			} 
			else {
				if (i >= n1) {
					t -= num2[j] - 1;
					j--;
					c++;
				} 
				else {
					t -= 6 - num1[i];
					i++;
					c++;
				}
			}
		}
		return c;
	}
	int minOperations(int[] num1, int[] num2) {
		int x = 0, y = 0;
		for (int i = 0; i < num1.length; i++) {
			x += num1[i];
		}
		for (int i = 0; i < num2.length; i++) {
			y += num2[i];
		}
		int n1 = num1.length, n2 = num2.length;
		if (n1 > n2) {
			if (n1 > (6 * n2)) {
				return -1;
			}
		} 
		else if (n1 < n2) {
			if (n2 > (6 * n1)) {
				return -1;
			}
		}
		int u = 0;
		if (x > y) {
			u = 1;
		}
		if (x == y) {
			return 0;
		}
		int t = Math.max(x,y) - Math.min(x,y);
		Arrays.sort(num1);
		Arrays.sort(num2);
		return u == 0 ? find(num1,num2,t) : find(num2,num1,t);
	}
}