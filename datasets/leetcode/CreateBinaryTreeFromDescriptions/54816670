class Solution {
	TreeNode createBinaryTree(int[][] descriptions) {
		TreeNode[] nodes = new TreeNode[100001];
		boolean[] isChild = new boolean[100001];
		for (int[] d: descriptions) {	
			int parentVal = d[0];
			int childVal = d[1];
			boolean isLeft = d[2] == 1;
			if (nodes[parentVal] == null) {
				nodes[parentVal] = new TreeNode(parentVal);
			}
			if (nodes[childVal] == null) {
				nodes[childVal] = new TreeNode(childVal);
			}
			if (isLeft) {
				nodes[parentVal].left = nodes[childVal];
			} 
			else {
				nodes[parentVal].right = nodes[childVal];
			}
			isChild[childVal] = true;
		}
		for (int i = 0; i < nodes.length; i++) {
			if (nodes[i] != null && !isChild[i]) {
				return nodes[i];
			}
		}
		return null;
	}
}