class Solution {
	int minimumOperations(TreeNode root) {
		int count = 0;
		Queue<TreeNode> q = new LinkedList<>();
		q.offer(root);
		while (!q.isEmpty()) {
			int ans = new int[q.size()];
			int size = q.size();
			for (int i = 0; i < size; i++) {
				TreeNode node = q.peek();
				if (node.left != null) {
					q.offer(node.left);
				}
				if (node.right != null) {
					q.offer(node.right);
				}
				ans[i] = q.poll().val;
			}
			HashMap<Integer, Integer> hm = new HashMap<>();
			boolean vis = new boolean[ans.length];
			for (int i = 0; i < ans.length; i++) {
				hm.put(ans[i],i);
				vis[i] = false;
			}
			Arrays.sort(ans);
			for (int i = 0; i < ans.length; i++) {
				if (vis[i] == true || hm.get(ans[i]) == i) {
					continue;
				}
				int k = i;
				int temp = 0;
				while (!vis[k]) {
					vis[k] = true;
					k = hm.get(ans[k]);
					temp++;
				}
				if (temp >= 1) {
					count += (temp - 1);
				}
			}
		}
		return count;
	}
}