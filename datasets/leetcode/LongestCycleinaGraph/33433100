class Solution {
	HashSet<Integer> set;
	HashSet<Integer> setc;
	HashSet<Integer> visited;
	int findCycle(int[] edges, int node, int[] dp) {
		int i = edges[node];
		if (dp[node] != 0) {
			return dp[node];
		}
		if (i == -1) {
			dp[node] = -1;
			return -1;
		} 
		else {
			if (visited.contains(i)) {
				setc.add(node);
				setc.add(i);
				return 2;
			} 
			else {
				visited.add(i);
				set.add(i);
				int y = findCycle(edges,i,dp);
				if (y != 1) {
					if (setc.size() != 0) {
						int size = setc.size();
						if (setc.contains(node)) {
							Iterator value = setc.iterator();
							while (value.hasNext()) {
								int j = (int) value.next();
								dp[j] = size;
							}
							setc = new HashSet<>();
							return size;
						}
						setc.add(node);
						return y + 1;
					} 
					else {
						dp[node] = y;
						return y;
					}
				} 
				else {
					dp[node] = -1;
					return -1;
				}
			}
		}
	}
	int longestCycle(int[] edges) {
		set = new HashSet<>();
		setc = new HashSet<>();
		int len = edges.length;
		int[] dp = new int[len];
		int maxcycle = -1;
		for (int i = 0; i < len; i++) {
			if (!set.contains(i)) {
				visited = new HashSet<>();
				visited.add(i);
				set.add(i);
				int length = findCycle(edges,i,dp);
				if (length > maxcycle) {
					maxcycle = length;
				}
			}
		}
		return maxcycle;
	}
}