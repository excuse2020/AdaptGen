class Solution {
	int closestMeetingNode(int[] edges, int node1, int node2) {
		if (node1 == node2) {
			return node1;
		}
		int[] visitedBy = new int[edges.length];
		visitedBy[node1] = 1;
		visitedBy[node2] = 2;
		Queue<Integer> q = new LinkedList<>();
		q.offer(node1);
		q.offer(node2);
		while (!q.isEmpty()) {
			int res = Integer.MAX_VALUE;
			int k = q.size();
			while (k-- > 0) {
				int curr = q.poll();
				int next = edges[curr];
				if (next == -1) {
					continue;
				}
				if (visitedBy[next] != 0 && visitedBy[next] == visitedBy[curr]) {
					continue;
				}
				if (visitedBy[next] != 0 && visitedBy[next] != visitedBy[curr]) {
					res = Math.min(res,next);
					continue;
				}
				visitedBy[next] = visitedBy[curr];
				q.offer(next);
			}
			if (res != Integer.MAX_VALUE) {
				return res;
			}
		}
		return -1;
	}
}