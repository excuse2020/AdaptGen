class Solution {
	int findMin(int[] nums) {
		if (nums[nums.length - 1] > nums[0]) {
			return nums[0];
		}
		if (nums.length == 2) {
			return Math.min(nums[0],nums[1]);
		}
		return findPivot(nums,0,nums.length - 1);
	}
	int findPivot(int[] nums, int l, int r) {
		if (l > r) {
			return -1;
		}
		int m = (l + r) / 2;
		if (m == 0 || nums[m] < nums[m - 1]) {
			return nums[m];
		}
		if (nums[m] <= nums[0]) {
			return findPivot(nums,l,m);
		} 
		else if (nums[m] > nums[0]) {
			return findPivot(nums,m + 1,r);
		}
		return -1;
	}
}