class Solution {
	int binary(MountainArray Arr, int low, int high, int target) {
		while (low <= high) {
			int mid = (low + high) / 2;
			if (Arr.get(mid) == target) {
				return mid;
			} 
			else if (Arr.get(mid) < target) {
				low = mid + 1;
			} 
			else {
				high = mid - 1;
			}
		}
		return -1;
	}
	int findInMountainArray(int target, MountainArray list) {
		int len = list.length();
		if (len < 100) {
			for (int i = 0; i < len; i++) {
				if (list.get(i) == target) {
					return i;
				}
			}
			return -1;
		}
		int low = 0, high = len;
		int r = 0;
		while (low <= high) {
			int mid = (low + high) / 2;
			if (list.get(mid) > list.get(mid - 1) && list.get(mid) > list.get(mid + 1)) {
				r = mid;
				break;
			} 
			else if (list.get(mid) > list.get(mid - 1) && list.get(mid) < list.get(mid + 1)) {
				low = mid + 1;
			} 
			else {
				high = mid - 1;
			}
		}
		int e = binary(list,0,r,target);
		if (e != -1) {
			return e;
		}
		int f = binary(list,r,len - 1,target);
		return f;
	}
}