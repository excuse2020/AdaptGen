class Solution {
	int f(int egg, int f, int[][] dp) {
		if (egg == 1) {
			return f;
		}
		if (f == 0 || f == 1) {
			return f;
		}
		if (dp[egg][f] != -1) {
			return dp[egg][f];
		}
		int s = 1, e = f;
		int ans = Integer.MAX_VALUE;
		while (s <= e) {
			int mid = s + (e - s) / 2;
			int broke = f(egg - 1,mid - 1,dp);
			int survive = f(egg,f - mid,dp);
			int temp = 1 + Math.max(broke,survive);
			if (broke < survive) {
				s = mid + 1;
			} 
			else {
				e = mid - 1;
			}
			ans = Math.min(ans,temp);
		}
		return dp[egg][f] = ans;
	}
	int superEggDrop(int egg, int f) {
		int[][] dp = new int[egg + 1][f + 1];
		for (int i = 0; i <= f; i++) {
			dp[1][i] = i;
		}
		for (int i = 0; i <= egg; i++) {
			dp[i][0] = 0;
			dp[i][1] = 1;
		}
		for (int i = 2; i <= egg; i++) {
			for (int j = 2; j <= f; j++) {
				int s = 1, e = j;
				int ans = Integer.MAX_VALUE;
				while (s <= e) {
					int mid = s + (e - s) / 2;
					int broke = dp[i - 1][mid - 1];
					int survive = dp[i][j - mid];
					int temp = 1 + Math.max(broke,survive);
					if (broke < survive) {
						s = mid + 1;
					} 
					else {
						e = mid - 1;
					}
					ans = Math.min(ans,temp);
				}
				dp[i][j] = ans;
			}
		}
		return dp[egg][f];
	}
}