class Solution {
	void backtrack(int k, int target, int m, List<Integer> cur, List<List<Integer>> res) {
		if (cur.size() == k) {
			if (target == 0) {
				res.add(new ArrayList<Integer>(cur));
			}
			return;
		}
		for (int i = m; i <= 9; i++) {
			if (i > target) {
				break;
			}
			cur.add(i);
			backtrack(k,target - i,i + 1,cur,res);
			cur.remove(cur.size() - 1);
		}
	}
	List<List<Integer>> combinationSum3(int k, int n) {
		List<List<Integer>> res = new ArrayList<>();
		List<Integer> cur = new ArrayList<>();
		backtrack(k,n,1,cur,res);
		return res;
	}
}