class Solution {
	boolean flag = false;
	int countCompleteComponents(int n, int[][] edges) {
		ArrayList<Integer>[] adj = new ArrayList[n];
		int[] vis = new int[n];
		for (int i = 0; i < n; i++) {
			adj[i] = new ArrayList<>();
		}
		for (int[] edge: edges) {	
			int u = edge[0];
			int v = edge[1];
			adj[u].add(v);
			adj[v].add(u);
		}
		int count = 0;
		for (int i = 0; i < n; i++) {
			if (vis[i] != 1) {
				int[] parts = new int[n];
				int sz = dfs(adj,i,vis,parts);
				boolean flag = false;
				for (int j = 0; j < n; j++) {
					if (parts[j] > 0) {
						if ((sz - 1) != parts[j]) {
							flag = true;
							break;
						}
					}
				}
				if (!flag) {
					count++;
				}
			}
		}
		return count;
	}
	int dfs(ArrayList<Integer>[] adj, int i, int[] vis, int[] parts) {
		int count = 1;
		vis[i] = 1;
		for (int e: adj[i]) {	
			parts[i]++;
			if (vis[e] == 0) {
				count += dfs(adj,e,vis,parts);
			}
		}
		return count;
	}
}