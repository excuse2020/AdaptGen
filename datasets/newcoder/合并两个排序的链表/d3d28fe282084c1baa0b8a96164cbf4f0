class Solution {
	ListNode Merge(ListNode pHead1, ListNode pHead2) {
		if (pHead1 == null) {
			return pHead2;
		}
		if (pHead2 == null) {
			return pHead1;
		}
		if (pHead1 == null & pHead2 == null) {
			return null;
		}
		ArrayList<Integer> new_list = new ArrayList<>();
		while (pHead1 != null) {
			new_list.add(pHead1.val);
			pHead1 = pHead1.next;
		}
		while (pHead2 != null) {
			new_list.add(pHead2.val);
			pHead2 = pHead2.next;
		}
		Collections.sort(new_list);
		ListNode newnode = new ListNode(new_list.get(0));
		ListNode dummyHead = new ListNode(-1);
		ListNode cur = dummyHead;
		for (int i = 0; i < new_list.size(); i++) {
			cur.next = new ListNode(new_list.get(i));
			cur = cur.next;
		}
		return dummyHead.next;
	}
}