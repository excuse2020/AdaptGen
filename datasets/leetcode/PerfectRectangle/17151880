class Solution {
	boolean checkPerfection(int[][] map) {
		for (int i = 0; i < map.length; i++) {
			for (int j = 0; j < map[0].length; j++) {
				if (map[i][j] != 1) {
					return false;
				}
			}
		}
		return true;
	}
	int findMax(int a, int b) {
		return a > b ? a : b;
	}
	int findMin(int a, int b) {
		return a < b ? a : b;
	}
	boolean isRectangleCover(int[][] rectangles) {
		int lowestXi = rectangles[0][0];
		int lowestYi = rectangles[0][1];
		int highestAi = rectangles[0][2];
		int highestBi = rectangles[0][3];
		for (int i = 1; i < rectangles.length; i++) {
			lowestXi = findMin(rectangles[i][0],lowestXi);
			lowestYi = findMin(rectangles[i][1],lowestYi);
			highestAi = findMax(rectangles[i][2],highestAi);
			highestBi = findMax(rectangles[i][3],highestBi);
		}
		int[][] map = new int[highestAi - lowestXi][highestBi - lowestYi];
		for (int i = 0; i < rectangles.length; i++) {
			for (int ii = rectangles[i][0] - lowestXi; ii < rectangles[i][2] - lowestXi; ii++) {
				for (int jj = rectangles[i][1] - lowestYi; jj < rectangles[i][3] - lowestYi; jj++) {
					map[ii][jj]++;
				}
			}
		}
		return checkPerfection(map);
	}
}