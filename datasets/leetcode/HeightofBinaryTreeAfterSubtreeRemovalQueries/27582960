class Solution {
	int arr;
	int cur = 0;
	HashMap<Integer, Integer> h;
	HashMap<Integer, Integer> min, max;
	int allocate(TreeNode root) {
		if (root == null) {
			return 0;
		}
		int l = allocate(root.left);
		min.put(cur,cur - l);
		h.put(root.val,cur);
		root.val = cur;
		int ttt = cur;
		cur++;
		int r = allocate(root.right);
		max.put(ttt,ttt + r);
		return 1 + l;
	}
	int find(TreeNode root) {
		if (root == null) {
			return 0;
		}
		return 1 + find(root.left);
	}
	void fun(TreeNode root, int v) {
		if (root == null) {
			return;
		}
		fun(root.left,v + 1);
		arr[root.val] = v;
		fun(root.right,v + 1);
	}
	int[] treeQueries(TreeNode root, int[] q) {
		h = new HashMap<Integer, Integer>();
		min = new HashMap<Integer, Integer>();
		max = new HashMap<Integer, Integer>();
		int n = find(root);
		cur = 0;
		allocate(root);
		for (int i = 0; i < q.length; i++) {
			q[i] = h.get(q[i]);
		}
		arr = new int[n];
		fun(root,0);
		int ml = new int[n];
		int mr = new int[n];
		ml[0] = arr[0];
		for (int i = 1; i < n; i++) {
			ml[i] = Math.max(ml[i - 1],arr[i]);
		}
		mr[n - 1] = arr[n - 1];
		for (int i = n - 2; i >= 0; i--) {
			mr[i] = Math.max(mr[i + 1],arr[i]);
		}
		int ans = new int[q.length];
		for (int i = 0; i < q.length; i++) {
			int x = 0;
			if (min.get(q[i]) - 1 >= 0) {
				x = Math.max(x,ml[min.get(q[i]) - 1]);
			}
			if (max.get(q[i]) + 1 < n) {
				x = Math.max(x,mr[max.get(q[i]) + 1]);
			}
			ans[i] = x;
		}
		return ans;
	}
}