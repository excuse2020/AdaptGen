class Solution {
	boolean carPooling(int[][] trips, int capacity) {
		int maxLocation = 0;
		HashMap<Integer, Integer> startLocation = new HashMap<>();
		HashMap<Integer, Integer> endLocation = new HashMap<>();
		for (int i = 0; i < trips.length; i++) {
			maxLocation = Math.max(maxLocation,trips[i][2]);
			startLocation.put(trips[i][1],startLocation.getOrDefault(trips[i][1],0) + trips[i][0]);
			endLocation.put(trips[i][2],endLocation.getOrDefault(trips[i][2],0) + trips[i][0]);
		}
		int location = 0;
		while (location <= maxLocation) {
			if (endLocation.get(location) != null) {
				capacity = capacity + endLocation.get(location);
			}
			if (startLocation.get(location) != null) {
				capacity = capacity - startLocation.get(location);
				if (capacity < 0) {
					return false;
				}
				startLocation.remove(location);
			}
			++location;
		}
		return true;
	}
}