class Solution {
	boolean getPath(TreeNode root, TreeNode target, List<TreeNode> temp) {
		if (root == null) {
			return false;
		}
		temp.add(root);
		if (root == target) {
			return true;
		}
		if (getPath(root.left,target,temp) || getPath(root.right,target,temp)) {
			return true;
		}
		temp.remove(temp.size() - 1);
		return false;
	}
	TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
		if (p == q) {
			return p;
		}
		List<TreeNode> path_to_p = new ArrayList<>();
		List<TreeNode> path_to_q = new ArrayList<>();
		getPath(root,p,path_to_p);
		getPath(root,q,path_to_q);
		for (int i = 0, j = 0; ; i++, j++) {
			TreeNode a, b;
			a = i < path_to_p.size() ? path_to_p.get(i) : null;
			b = j < path_to_q.size() ? path_to_q.get(j) : null;
			if (a != b) {
				return path_to_p.get(i - 1);
			}
		}
	}
}