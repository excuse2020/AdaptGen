class Solution {
	int func(int i, int j, int c, int dp) {
		if (i > j) {
			return 0;
		}
		if (dp[i][j] != -1) {
			return dp[i][j];
		}
		int mini = Integer.MAX_VALUE;
		for (int k = i; k <= j; k++) {
			int cost = c[j + 1] - c[i - 1] + func(i,k - 1,c,dp) + func(k + 1,j,c,dp);
			mini = Math.min(mini,cost);
		}
		return dp[i][j] = mini;
	}
	int minCost(int n, int[] cuts) {
		int[] c = new int[cuts.length + 2];
		for (int i = 0; i < cuts.length; i++) {
			c[i + 1] = cuts[i];
		}
		c[c.length - 1] = n;
		Arrays.sort(c);
		int dp = new int[c.length][c.length];
		for (int row: dp) {	
			Arrays.fill(row,-1);
		}
		return func(1,cuts.length,c,dp);
	}
}