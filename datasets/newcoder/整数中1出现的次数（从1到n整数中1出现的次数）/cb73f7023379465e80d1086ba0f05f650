class Solution {
	int CountOfNWei(int NWei, int sumTk) {
		if (NWei == 0) {
			return NWei;
		}
		int k = NWei;
		sumTk = sumTk * 10 + (int) Math.pow(10,k - 1);
		return sumTk;
	}
	int NumberOf1Between1AndN_Solution(int n) {
		if (n <= 0) {
			return 0;
		}
		int iN = n;
		int sumT = 0;
		int res = 0;
		int k = 1;
		int preValue = 0;
		int curTk = 0;
		while (iN > 0) {
			int curValue = iN % 10;
			int iCountOfCurValue = 0;
			if (curValue == 0) {
				iCountOfCurValue = 0;
			} 
			else if (curValue == 1) {
				iCountOfCurValue = 1 + n % ((int) Math.pow(10,k - 1));
			} 
			else {
				iCountOfCurValue = (int) Math.pow(10,k - 1);
			}
			curTk = CountOfNWei(k - 1,curTk);
			int iCountOfCurRight = curValue * curTk;
			res += (iCountOfCurRight + iCountOfCurValue);
			iN /= 10;
			++k;
			preValue = curValue;
		}
		return res;
	}
}