class Solution {
	Integer[][][][] dp;
	int helper(int x, int y, int z, int f) {
		if (dp[x][y][z][f] != null) {
			return dp[x][y][z][f];
		}
		int a = 0;
		int b = 0;
		int c = 0;
		if (f == 3) {
			if (x > 0) {
				a = 2 + helper(x - 1,y,z,0);
			}
			if (y > 0) {
				b = 2 + helper(x,y - 1,z,1);
			}
			if (z > 0) {
				c = 2 + helper(x,y,z - 1,2);
			}
		} 
		else if (f == 0) {
			if (y > 0) {
				b = 2 + helper(x,y - 1,z,1);
			}
		} 
		else if (f == 1) {
			if (x > 0) {
				a = 2 + helper(x - 1,y,z,0);
			}
			if (z > 0) {
				c = 2 + helper(x,y,z - 1,2);
			}
		} 
		else {
			if (x > 0) {
				a = 2 + helper(x - 1,y,z,0);
			}
			if (z > 0) {
				c = 2 + helper(x,y,z - 1,2);
			}
		}
		return dp[x][y][z][f] = Math.max(a,Math.max(b,c));
	}
	int longestString(int x, int y, int z) {
		dp = new Integer[x + 1][y + 1][z + 1][4];
		return helper(x,y,z,3);
	}
}