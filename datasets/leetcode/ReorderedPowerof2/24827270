class Solution {
	int DIGITS = 10;
	int[] getFreq(int n) {
		int[] freq = new int[DIGITS];
		while (n != 0) {
			int rem = n % DIGITS;
			freq[rem]++;
			n /= DIGITS;
		}
		return freq;
	}
	boolean isEqual(int[] f1, int[] f2) {
		for (int i = 0; i < DIGITS; i++) {
			if (f1[i] != f2[i]) {
				return false;
			}
		}
		return true;
	}
	boolean reorderedPowerOf2(int n) {
		int[] nFreq = this.getFreq(n);
		int num = 1;
		int pow = 0;
		while (pow < 31) {
			int[] freq = this.getFreq(num);
			if (this.isEqual(nFreq,freq)) {
				return true;
			}
			num *= 2;
			pow++;
		}
		return false;
	}
}