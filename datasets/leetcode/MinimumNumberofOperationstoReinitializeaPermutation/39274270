class Solution {
	boolean isSorted(int[] a) {
		if (a == null || a.length <= 1) {
			return true;
		}
		for (int i = 0; i < a.length - 1; i++) {
			if (a[i] > a[i + 1]) {
				return false;
			}
		}
		return true;
	}
	int reinitializePermutation(int n) {
		int[] arr = new int[n];
		int[] perm = new int[n];
		for (int i = 0; i < n; i++) {
			arr[i] = i;
			perm[i] = i;
		}
		int count = 1;
		for (int i = 0; i < n; i++) {
			if (i % 2 == 0) {
				arr[i] = perm[i / 2];
			} 
			else {
				arr[i] = perm[n / 2 + (i - 1) / 2];
			}
		}
		for (int i = 0; i < n; i++) {
			perm[i] = arr[i];
		}
		while (!isSorted(perm)) {
			for (int i = 0; i < n; i++) {
				if (i % 2 == 0) {
					arr[i] = perm[i / 2];
				} 
				else {
					arr[i] = perm[n / 2 + (i - 1) / 2];
				}
			}
			for (int i = 0; i < n; i++) {
				perm[i] = arr[i];
			}
			count++;
		}
		return count;
	}
}