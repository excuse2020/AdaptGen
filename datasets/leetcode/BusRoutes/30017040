class Solution {
	int numBusesToDestination(int[][] routes, int source, int target) {
		Map<Integer, List<Integer>> adj = new HashMap<>();
		for (int j = 0; j < routes.length; j++) {
			for (int i: routes[j]) {	
				if (!adj.containsKey(i)) {
					adj.put(i,new ArrayList<Integer>());
				}
				adj.get(i).add(j);
			}
		}
		int toRet = 0;
		Queue<Integer> queue = new LinkedList<>();
		Set<Integer> visited = new HashSet<>();
		Set<Integer> visitedRoutes = new HashSet<>();
		queue.offer(source);
		visited.add(source);
		while (!queue.isEmpty()) {
			int size = queue.size();
			while (size > 0) {
				int current = queue.poll();
				if (current == target) {
					return toRet;
				}
				for (int next: adj.get(current)) {	
					if (visitedRoutes.contains(next)) {
						continue;
					}
					visitedRoutes.add(next);
					for (int route: routes[next]) {	
						if (visited.contains(route)) {
							continue;
						}
						visited.add(route);
						queue.offer(route);
					}
				}
				size--;
			}
			toRet++;
		}
		return -1;
	}
}