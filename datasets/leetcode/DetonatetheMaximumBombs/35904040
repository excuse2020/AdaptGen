class Solution {
	int bfs(int i, Map<Integer, List<Integer>> graph) {
		Deque<Integer> q = new ArrayDeque<>();
		Set<Integer> visited = new HashSet();
		q.offer(i);
		visited.add(i);
		while (!q.isEmpty()) {
			int curr = q.poll();
			for (int neib: graph.getOrDefault(curr,new ArrayList<>())) {	
				if (!visited.contains(neib)) {
					visited.add(neib);
					q.offer(neib);
				}
			}
		}
		return visited.size();
	}
	int maximumDetonation(int[][] bombs) {
		Map<Integer, List<Integer>> graph = new HashMap<>();
		int n = bombs.length;
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < n; j++) {
				int xi = bombs[i][0];
				int yi = bombs[i][1];
				int ri = bombs[i][2];
				int xj = bombs[j][0];
				int yj = bombs[j][1];
				if ((long) ri * ri >= (long) (xi - xj) * (xi - xj) + (long) (yi - yj) * (yi - yj)) {
					graph.computeIfAbsent(i,(k) -> {new ArrayList<>()}).add(j);
				}
			}
		}
		int answer = 0;
		for (int i = 0; i < n; i++) {
			answer = Math.max(answer,bfs(i,graph));
		}
		return answer;
	}
}