class Solution {
	int[][] dp = new int[105][105];
	int m;
	int n;
	int helper(int[][] grid, int i, int j) {
		if (i == n - 1 && j == m - 1) {
			return 1;
		}
		if (i < 0 || j < 0 || i >= n || j >= m) {
			return 0;
		}
		if (grid[i][j] == 1) {
			return 0;
		}
		if (dp[i][j] != -1) {
			return dp[i][j];
		}
		return dp[i][j] = helper(grid,i + 1,j) + helper(grid,i,j + 1);
	}
	int uniquePathsWithObstacles(int[][] obstacleGrid) {
		n = obstacleGrid.length;
		m = obstacleGrid[0].length;
		for (int i = 0; i < 105; i++) {
			Arrays.fill(dp[i],-1);
		}
		if (obstacleGrid[n - 1][m - 1] == 1) {
			return 0;
		}
		return helper(obstacleGrid,0,0);
	}
}