class Solution {
	int[] countServers(int total, int[][] logs, int x, int[] queries) {
		int n = queries.length;
		int[][] qs = new int[n][2];
		for (int i = 0; i < n; i++) {
			qs[i][0] = queries[i];
			qs[i][1] = i;
		}
		Arrays.sort(qs,(a, b) -> {Integer.compare(a[0],b[0])});
		Arrays.sort(logs,(a, b) -> {Integer.compare(a[1],b[1])});
		int[] res = new int[n];
		Arrays.fill(res,Integer.MAX_VALUE);
		int m = logs.length;
		HashMap<Integer, Integer> count = new HashMap<>();
		int j = 0;
		int left = 0, right = 0;
		while (j < n) {
			while (right < m && logs[right][1] <= qs[j][0]) {
				count.put(logs[right][0],1 + count.getOrDefault(logs[right][0],0));
				right++;
			}
			while (left < m && logs[left][1] < qs[j][0] - x) {
				int c = count.get(logs[left][0]);
				if (c == 1) {
					count.remove(logs[left][0]);
				} 
				else {
					count.put(logs[left][0],c - 1);
				}
				left++;
			}
			res[qs[j][1]] = total - count.size();
			j++;
		}
		return res;
	}
}