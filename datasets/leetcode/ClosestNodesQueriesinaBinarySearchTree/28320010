class Solution {
	int ceiling(TreeNode root, int n) {
		if (root == null) {
			return -1;
		} 
		else if (root.val == n) {
			return n;
		} 
		else if (root.val < n) {
			return ceiling(root.right,n);
		} 
		else {
			int leftCeiling = ceiling(root.left,n);
			return leftCeiling == -1 ? root.val : leftCeiling;
		}
	}
	List<List<Integer>> closestNodes(TreeNode root, List<Integer> queries) {
		List<List<Integer>> ret = new ArrayList<>();
		for (int n: queries) {	
			ret.add(List.of(floor(root,n),ceiling(root,n)));
		}
		return ret;
	}
	int floor(TreeNode root, int n) {
		if (root == null) {
			return -1;
		} 
		else if (root.val == n) {
			return n;
		} 
		else if (root.val < n) {
			int rightFloor = floor(root.right,n);
			return rightFloor == -1 ? root.val : rightFloor;
		} 
		else {
			return floor(root.left,n);
		}
	}
}