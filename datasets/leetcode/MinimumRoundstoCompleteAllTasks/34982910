class Solution {
	int getRounds(int frequency) {
		if (frequency < 2) {
			return 0;
		}
		if (frequency % 3 == 0) {
			return frequency / 3;
		} 
		else if (frequency % 3 == 1) {
			return (frequency - 1) / 3 + 1;
		} 
		else {
			return (frequency - 2) / 3 + 1;
		}
	}
	int minimumRounds(int[] tasks) {
		Map<Integer, Integer> freq = new HashMap<Integer, Integer>();
		if (tasks.length < 2) {
			return -1;
		}
		for (int i = 0; i < tasks.length; i++) {
			int task = tasks[i];
			Integer count = freq.get(task);
			if (count == null) {
				count = 0;
			}
			freq.put(task,count + 1);
		}
		int numRounds = 0;
		for (int key: freq.keySet()) {	
			int round = getRounds(freq.get(key));
			if (round == 0) {
				return -1;
			}
			numRounds += round;
		}
		return numRounds;
	}
}