class Solution {
	int[] count(int n) {
		int[] digitMap = new int[10];
		while (n > 0) {
			digitMap[n % 10]++;
			n /= 10;
		}
		return digitMap;
	}
	boolean isEqual(int[] arr1, int[] arr2) {
		for (int i = 0; i < arr1.length; i++) {
			if (arr1[i] != arr2[i]) {
				return false;
			}
		}
		return true;
	}
	boolean reorderedPowerOf2(int N) {
		int[] InputDigits = count(N);
		int powerOfTwo = 1;
		for (int i = 0; i < 31; i++) {
			int[] powerDigits = count(powerOfTwo);
			if (isEqual(InputDigits,powerDigits)) {
				return true;
			}
			powerOfTwo <<= 1;
		}
		return false;
	}
}