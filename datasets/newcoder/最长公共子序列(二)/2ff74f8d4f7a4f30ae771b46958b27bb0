class Solution {
	String LCS(String s1, String s2) {
		int len1 = s1.length();
		int len2 = s2.length();
		int[][] dp = new int[len1 + 1][len2 + 1];
		for (int i = 1; i <= len1; i++) {
			for (int j = 1; j <= len2; j++) {
				if (s1.charAt(i - 1) == s2.charAt(j - 1)) {
					dp[i][j] = dp[i - 1][j - 1] + 1;
				} 
				else {
					dp[i][j] = Math.max(dp[i - 1][j],dp[i][j - 1]);
				}
			}
		}
		int i = len1;
		int j = len2;
		StringBuffer sb = new StringBuffer();
		while (i != 0 && j != 0) {
			if (s1.charAt(i - 1) == s2.charAt(j - 1)) {
				sb.insert(0,s1.charAt(i - 1));
				i--;
				j--;
			} 
			else if (dp[i - 1][j] > dp[i][j - 1]) {
				i--;
			} 
			else {
				j--;
			}
		}
		return sb.length() == 0 ? "-1" : sb.toString();
	}
}