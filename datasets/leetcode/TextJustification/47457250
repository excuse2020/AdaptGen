class Solution {
	void dup(StringBuilder sb, char s, int count) {
		while (--count >= 0) {
			sb.append(s);
		}
	}
	List<String> fullJustify(String[] words, int maxWidth) {
		var r = new ArrayList<String>();
		var sb = new StringBuilder();
		int b = 0;
		int e = 0;
		int l = 0;
		while (e < words.length && l + words[e].length() <= maxWidth) {
			l += words[e++].length();
		}
		int spaces = maxWidth - l;
		int padding = getPadding(spaces,b,e,words.length);
		int extra = e >= words.length ? 0 : spaces - padding * (e - b);
		int i = b;
		sb.append(words[i]);
	}
	int getPadding(int spaces, int f, int t, int len) {
		if (t >= len) {
			return 1;
		}
		if (t - f <= 1) {
			return 0;
		}
		return spaces / (t - f);
	}
}