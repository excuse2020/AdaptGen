class Solution {
	boolean done(int[] piles, int k, int h) {
		int count = 0;
		for (int i = 0; i < piles.length; i++) {
			count += (piles[i] / k) + (piles[i] % k != 0 ? 1 : 0);
			if (count > h) {
				return false;
			}
		}
		return true;
	}
	int fun(int[] piles, int h, int low, int high) {
		while (low <= high) {
			int mid = low + (high - low) / 2;
			if (done(piles,mid,h)) {
				high = mid - 1;
			} 
			else {
				low = mid + 1;
			}
		}
		return high + 1;
	}
	int minEatingSpeed(int[] piles, int h) {
		int max = piles[0];
		for (int i = 0; i < piles.length; i++) {
			max = Integer.max(max,piles[i]);
		}
		return fun(piles,h,1,max);
	}
}