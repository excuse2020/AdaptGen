class Solution {
	int cycleSort(List<Integer> list) {
		int count = 0;
		int[] sorted = new int[list.size()];
		for (int i = 0; i < list.size(); i++) {
			sorted[i] = list.get(i);
		}
		Arrays.sort(sorted);
		Map<Integer, Integer> map = new HashMap<>();
		for (int i = 0; i < list.size(); i++) {
			map.put(list.get(i),i);
		}
		for (int i = 0; i < list.size(); i++) {
			if (list.get(i) != sorted[i]) {
				count++;
				map.put(list.get(i),map.get(sorted[i]));
				list.set(map.get(sorted[i]),list.get(i));
			}
		}
		return count;
	}
	int minimumOperations(TreeNode root) {
		int swapsCount = 0;
		LinkedList<TreeNode> bfs = new LinkedList<>();
		bfs.add(root);
		while (!bfs.isEmpty()) {
			int size = bfs.size();
			List<Integer> list = new ArrayList<>();
			for (int i = 0; i < size; i++) {
				TreeNode node = bfs.remove();
				if (node.left != null) {
					bfs.add(node.left);
					list.add(node.left.val);
				}
				if (node.right != null) {
					bfs.add(node.right);
					list.add(node.right.val);
				}
			}
			swapsCount += cycleSort(list);
		}
		return swapsCount;
	}
}