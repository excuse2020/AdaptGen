class Solution {
	int m, n;
	int calc(int m, int n, int arr) {
		int dp = new int[m + 1][n + 1];
		for (int rw: dp) {	
			Arrays.fill(rw,0);
		}
		for (int i = m - 1; i >= 0; i--) {
			for (int j = n - 1; j >= 0; j--) {
				if (i == m - 1 && j == n - 1 && arr[i][j] != 1) {
					dp[i][j] = 1;
				} 
				else {
					if (arr[i][j] != 1) {
						dp[i][j] = dp[i][j + 1] + dp[i + 1][j];
					} 
					else {
						dp[i][j] = 0;
					}
				}
			}
		}
		return dp[0][0];
	}
	int calc_rec(int i, int j, int arr, int dp) {
		if (j > n || i > m || arr[i][j] == 1) {
			return 0;
		}
		if (i == m && j == n) {
			return dp[i][j] = 1;
		}
		if (dp[i][j] != -1) {
			return dp[i][j];
		}
		return dp[i][j] = calc_rec(i + 1,j,arr,dp) + calc_rec(i,j + 1,arr,dp);
	}
	int uniquePathsWithObstacles(int[][] arr) {
		m = arr.length;
		n = arr[0].length;
		int dp = new int[m][n];
		for (int i = 0; i < m; i++) {
			for (int j = 0; j < n; j++) {
				dp[i][j] = -1;
			}
		}
		m--;
		n--;
		return calc_rec(0,0,arr,dp);
	}
}