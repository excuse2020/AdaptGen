class Solution {
	double maxProbability(int n, int[][] edges, double[] succProb, int start, int end) {
		boolean vis = new boolean[n];
		double dis = new double[n];
		List<List<Pair<Integer, Double>>> graph = new ArrayList<List<Pair<Integer, Double>>>();
		for (int j = 0; j < n; j++) {
			graph.add(new ArrayList<Pair<Integer, Double>>());
			dis[j] = Integer.MIN_VALUE;
		}
		for (int i = 0; i < edges.length; i++) {
			graph.get(edges[i][0]).add(new Pair<Integer, Double>(edges[i][1], succProb[i]));
			graph.get(edges[i][1]).add(new Pair<Integer, Double>(edges[i][0], succProb[i]));
		}
		PriorityQueue<Pair<Integer, Double>> queue = new PriorityQueue<Pair<Integer, Double>>((a, b) -> {a.getValue() - b.getValue() > 0 ? -1 : 1});
		queue.add(new Pair(start, 1));
		dis[start] = 1;
		while (queue.size() > 0) {
			Pair<Integer, Double> pair = queue.remove();
			if (vis[(int)pair.getKey()]) {
				continue;
			}
			vis[(int)pair.getKey()] = true;
			int src = pair.getKey();
			for (Pair<Integer, Double> p: graph.get(src)) {	
				int des = p.getKey();
				Double pro = p.getValue();
				if (dis[src] * pro > dis[des]) {
					dis[des] = dis[src] * pro;
				}
				queue.offer(new Pair(des, dis[des]));
			}
		}
		return dis[end] == Integer.MIN_VALUE ? 0 : dis[end];
	}
}