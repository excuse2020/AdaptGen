class Solution {
	int MOD = 1000_000_007;
	int gcd(int a, int b) {
		if (a < b) {
			int c = a;
			a = b;
			b = c;
		}
		while (b != 0) {
			int rem = a % b;
			a = b;
			b = rem;
		}
		return a;
	}
	int helper(int n, int a, int b, long num) {
		long A = a, B = b, N = n;
		long LCM = lcm(a,b);
		long x = num / A + num / B - num / LCM;
		if (x == N) {
			if (num % a == 0 || num % b == 0) {
				return 0;
			} 
			else {
				return 1;
			}
		}
		if (x < N) {
			return -1;
		} 
		else {
			return 1;
		}
	}
	int lcm(int a, int b) {
		return (a * b) / gcd(a,b);
	}
	int nthMagicalNumber(int n, int a, int b) {
		if (n == 1) {
			return a < b ? a : b;
		}
		long l = 1, r = 1000_000_000_000_00L;
		while (l <= r) {
			long mid = l + (r - l) / 2;
			int res = helper(n,a,b,mid);
			if (res == 0) {
				return (int) (mid % MOD);
			} 
			else if (res < 0) {
				l = mid + 1;
			} 
			else {
				r = mid - 1;
			}
		}
		return -1;
	}
}