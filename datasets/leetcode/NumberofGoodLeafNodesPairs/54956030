class Solution {
	int countPairs(TreeNode root, int distance) {
		int[] count = new int[1];
		dfs(root,distance,count);
		return count[0];
	}
	int[] dfs(TreeNode node, int distance, int[] count) {
		if (node == null) {
			return new int[distance + 1];
		}
		if (node.left == null && node.right == null) {
			int[] leafDistances = new int[distance + 1];
			leafDistances[1] = 1;
			return leafDistances;
		}
		int[] leftDistances = dfs(node.left,distance,count);
		int[] rightDistances = dfs(node.right,distance,count);
		for (int l = 1; l <= distance; l++) {
			for (int r = 1; r <= distance; r++) {
				if (l + r <= distance) {
					count[0] += leftDistances[l] * rightDistances[r];
				}
			}
		}
		int[] resultDistances = new int[distance + 1];
		for (int i = 1; i < distance; i++) {
			resultDistances[i + 1] = leftDistances[i] + rightDistances[i];
		}
		return resultDistances;
	}
}