class Solution {
	int HamDistance = 0;
	Map<Integer, Map<Integer, Integer>> Map = new HashMap<>();
	int[] Par;
	int[] Roots;
	int find(int Node) {
		if (Node == Par[Node]) {
			return Node;
		}
		return Par[Node] = find(Par[Node]);
	}
	int minimumHammingDistance(int[] source, int[] target, int[][] allowedSwaps) {
		Roots = new int[source.length];
		Par = new int[source.length];
		for (int i = 0; i < Par.length; i++) {
			Par[i] = i;
		}
		for (int[] swap: allowedSwaps) {	
			union(find(swap[0]),find(swap[1]));
		}
		for (int i = 0; i < source.length; i++) {
			int r = find(i);
			Roots[i] = r;
			int v = source[i];
			if (!Map.containsKey(r)) {
				Map.put(r,new HashMap<>());
			}
			Map<Integer, Integer> tempMap = Map.get(r);
			tempMap.put(v,(tempMap.getOrDefault(v,0) + 1));
		}
		for (int i = 0; i < target.length; i++) {
			int r = Roots[i];
			int v = target[i];
			Map<Integer, Integer> tempMap = Map.get(r);
			if (tempMap.getOrDefault(v,0) == 0) {
				HamDistance++;
			} 
			else {
				tempMap.put(v,(tempMap.get(v) - 1));
			}
		}
		return HamDistance;
	}
	void union(int N1, int N2) {
		if (N1 != N2) {
			Par[N2] = N1;
		}
	}
}