class Solution {
	void dfs(String begin, String end, HashMap<String, ArrayList<String>> adj, ArrayList<String> arr, List<List<String>> list) {
		if (begin.equals(end)) {
			list.add(new ArrayList<>(arr));
			return;
		}
		if (!adj.containsKey(begin)) {
			return;
		}
		for (String ele: adj.get(begin)) {	
			arr.add(ele);
			dfs(ele,end,adj,arr,list);
			arr.remove(arr.size() - 1);
		}
	}
	List<List<String>> findLadders(String beginWord, String endWord, List<String> wordList) {
		HashMap<String, Integer> visited = new HashMap<>();
		HashMap<String, ArrayList<String>> adj = new HashMap<>();
		HashSet<String> set = new HashSet<>();
		List<List<String>> list = new ArrayList<>();
		Queue<String> q = new ArrayDeque<>();
		for (String s: wordList) {	
			set.add(s);
		}
		if (!set.contains(endWord)) {
			return list;
		}
		visited.put(beginWord,0);
		q.add(beginWord);
		int depth = 0;
		String s = q.remove();
		int i = 0;
		int j = 0;
		String temp;
	}
}