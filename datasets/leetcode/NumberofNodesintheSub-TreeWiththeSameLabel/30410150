class Solution {
	int[] result;
	int[] countSubTrees(int n, int[][] edges, String labels) {
		result = new int[n];
		HashMap<Integer, List<Integer>> map = new HashMap();
		for (int[] edge: edges) {	
			if (!map.containsKey(edge[0])) {
				map.put(edge[0],new ArrayList<>());
			}
			if (!map.containsKey(edge[1])) {
				map.put(edge[1],new ArrayList<>());
			}
			map.get(edge[0]).add(edge[1]);
			map.get(edge[1]).add(edge[0]);
		}
		dfs(map,0,new boolean[n],labels.toCharArray());
		return result;
	}
	int[] dfs(HashMap<Integer, List<Integer>> map, int node, boolean[] visited, char[] labels) {
		visited[node] = true;
		int[] numOfLabels = new int[26];
	}
}