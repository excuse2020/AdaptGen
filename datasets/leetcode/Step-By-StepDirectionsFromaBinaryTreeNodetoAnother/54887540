class Solution {
	void dfs(TreeNode root, int destValue, StringBuilder path, Map<Integer, String> map) {
		if (root == null) {
			return;
		}
		if (root.val == destValue) {
			map.put(root.val,path.toString());
			return;
		}
		path.append("L");
		dfs(root.left,destValue,path,map);
		path.deleteCharAt(path.length() - 1);
		path.append("R");
		dfs(root.right,destValue,path,map);
		path.deleteCharAt(path.length() - 1);
	}
	String getDirections(TreeNode root, int startValue, int destValue) {
		TreeNode lca = getLCA(root,startValue,destValue);
		Map<Integer, String> map = new HashMap<>();
		dfs(lca,startValue,new StringBuilder(),map);
		StringBuilder ans = new StringBuilder();
		for (int i = 0; i < map.get(startValue).length(); i++) {
			ans.append("U");
		}
		dfs(lca,destValue,new StringBuilder(),map);
		ans.append(map.get(destValue));
		return ans.toString();
	}
	TreeNode getLCA(TreeNode root, int startValue, int destValue) {
		if (root == null || root.val == startValue || root.val == destValue) {
			return root;
		}
		TreeNode leftRes = getLCA(root.left,startValue,destValue);
		TreeNode rightRes = getLCA(root.right,startValue,destValue);
		if (leftRes != null && rightRes != null) {
			return root;
		}
		return leftRes != null ? leftRes : rightRes;
	}
}