class Solution {
	int[] detectCycle(int[][] edges) {
		boolean[] visited = new boolean[edges.length + 1];
		int[] parent = new int[edges.length + 1];
		for (int i = 0; i < parent.length; i++) {
			parent[i] = i;
		}
		for (int[] edge: edges) {	
			int u = edge[0];
			int v = edge[1];
			int parentU = find(parent,u);
			int parentV = find(parent,v);
			if (parentU == parentV) {
				return edge;
			}
			parent[parentV] = parentU;
		}
		return null;
	}
	int find(int[] parent, int node) {
		if (parent[node] != node) {
			parent[node] = find(parent,parent[node]);
		}
		return parent[node];
	}
	int[] findRedundantConnection(int[][] edges) {
		return detectCycle(edges);
	}
}