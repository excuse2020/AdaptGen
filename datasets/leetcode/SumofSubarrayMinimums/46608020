class Solution {
	int sumSubarrayMins(int[] arr) {
		int mod = 1000000007;
		long sum = 0;
		Stack<Integer> stk = new Stack<>();
		int n = arr.length;
		int[] left = new int[n];
		int[] right = new int[n];
		for (int i = 0; i < n; i++) {
			int count = 1;
			while (stk.size() > 0 && arr[stk.peek()] > arr[i]) {
				count += left[stk.peek()];
				stk.pop();
			}
			stk.push(i);
			left[i] = count;
		}
		stk.clear();
		for (int i = n - 1; i >= 0; i--) {
			int count = 1;
			while (stk.size() > 0 && arr[stk.peek()] >= arr[i]) {
				count += right[stk.peek()];
				stk.pop();
			}
			stk.push(i);
			right[i] = count;
		}
		for (int i = 0; i < n; i++) {
			sum += (long) arr[i] * left[i];
		}
		sum %= mod;
		return (int) sum;
	}
}