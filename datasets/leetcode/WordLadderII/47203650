class Solution {
	List<List<String>> ans;
	String b;
	HashMap<String, Integer> mpp;
	void dfs(String word, List<String> seq) {
		if (word.equals(b)) {
			List<String> temp = new ArrayList<>(seq);
			Collections.reverse(temp);
			ans.add(temp);
			return;
		}
		int step = mpp.get(word);
		int size = word.length();
		int i = 0;
		char ch;
	}
	List<List<String>> findLadders(String startWord, String targetWord, List<String> wordList) {
		int len = wordList.size();
		HashSet<String> st = new HashSet<>(wordList);
		mpp = new HashMap<>();
		Queue<String> q = new LinkedList<>();
		q.add(startWord);
		mpp.put(startWord,1);
		b = startWord;
		st.remove(startWord);
		String word = q.poll();
		int step = mpp.get(word);
		int n = word.length();
		if (word.equals(targetWord)) {
			break;
		}
		int i = 0;
		char ch;
	}
}