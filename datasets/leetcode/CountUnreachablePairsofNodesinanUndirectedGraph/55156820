class Solution {
	int parent;
	int rank;
	long countPairs(int n, int[][] edges) {
		parent = new int[n];
		rank = new int[n];
		for (int i = 0; i < n; i++) {
			parent[i] = i;
		}
		for (int edge: edges) {	
			int a = edge[0], b = edge[1];
			union(a,b);
		}
		for (int i = 0; i < n; i++) {
			find(i);
		}
		Map<Integer, Integer> freqMap = createFrequencyMap(parent);
		return findUncommonPairs(freqMap);
	}
	int find(int x) {
		if (parent[x] != x) {
			parent[x] = find(parent[x]);
		}
		return parent[x];
	}
	void union(int x, int y) {
		int rootX = find(x);
		int rootY = find(y);
		if (rootX != rootY) {
			if (rank[rootX] < rank[rootY]) {
				parent[rootX] = rootY;
			} 
			else if (rank[rootX] > rank[rootY]) {
				parent[rootY] = rootX;
			} 
			else {
				parent[rootY] = rootX;
				rank[rootX]++;
			}
		}
		return;
	}
}