class Solution {
	int maxUncrossedLines(int[] nums1, int[] nums2) {
		return solveTab(nums1,nums2);
	}
	int solve(int idx1, int idx2, int nums1, int nums2, int dp) {
		if (idx1 == nums1.length || idx2 == nums2.length) {
			return 0;
		}
		if (dp[idx1][idx2] != -1) {
			return dp[idx1][idx2];
		}
		int max = 0;
		for (int i = idx1; i < nums1.length; i++) {
			for (int j = idx2; j < nums2.length; j++) {
				if (nums1[i] == nums2[j]) {
					int ans = 1 + solve(i + 1,j + 1,nums1,nums2,dp);
					max = Math.max(max,ans);
				}
			}
		}
		return dp[idx1][idx2] = max;
	}
	int solveTab(int nums1, int nums2) {
		int n = nums1.length;
		int m = nums2.length;
		int dp = new int[n][m];
		if (nums1[n - 1] == nums2[m - 1]) {
			dp[n - 1][m - 1] = 1;
		} 
		else {
			dp[n - 1][m - 1] = 0;
		}
		for (int j = m - 2; j >= 0; j--) {
			if (nums1[n - 1] == nums2[j]) {
				dp[n - 1][j] = 1;
			} 
			else {
				dp[n - 1][j] = dp[n - 1][j + 1];
			}
		}
		for (int i = n - 2; i >= 0; i--) {
			if (nums1[i] == nums2[m - 1]) {
				dp[i][m - 1] = 1;
			} 
			else {
				dp[i][m - 1] = dp[i + 1][m - 1];
			}
		}
		for (int i = n - 2; i >= 0; i--) {
			for (int j = m - 2; j >= 0; j--) {
				if (nums1[i] == nums2[j]) {
					dp[i][j] = Math.max(1 + dp[i + 1][j + 1],Math.max(dp[i + 1][j],dp[i][j + 1]));
				} 
				else {
					dp[i][j] = Math.max(dp[i + 1][j],dp[i][j + 1]);
				}
			}
		}
		return dp[0][0];
	}
}