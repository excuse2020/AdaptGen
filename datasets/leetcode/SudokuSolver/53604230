class Solution {
	boolean backtrack(char[][] board, int row, int col) {
		if (row == 9) {
			return true;
		}
		int nextRow = row;
		int nextCol = col + 1;
		if (col == 8) {
			nextRow = row + 1;
			nextCol = 0;
		}
	}
	boolean isSafe(char[][] board, int row, int col, char digit) {
		for (int j = 0; j < 9; j++) {
			if (board[row][j] == digit) {
				return false;
			}
		}
		for (int i = 0; i < 9; i++) {
			if (board[i][col] == digit) {
				return false;
			}
		}
		int sRow = (row / 3) * 3;
		int sCol = (col / 3) * 3;
		for (int i = sRow; i < sRow + 3; i++) {
			for (int j = sCol; j < sCol + 3; j++) {
				if (board[i][j] == digit) {
					return false;
				}
			}
		}
		return true;
	}
	void solveSudoku(char[][] board) {
		backtrack(board,0,0);
	}
}