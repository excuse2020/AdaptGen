class Solution {
	int[] MySort(int[] arr) {
		mergeSort(arr,0,arr.length - 1);
		return arr;
	}
	void merge(int[] A, int L, int M, int R) {
		int[] tmp = new int[R - L + 1];
		int index = 0;
		int i = L, j = M + 1;
		while (i <= M && j <= R) {
			if (A[i] <= A[j]) {
				tmp[index++] = A[i++];
			} 
			else {
				tmp[index++] = A[j++];
			}
		}
		while (i <= M) {
			tmp[index++] = A[i++];
		}
		while (j <= R) {
			tmp[index++] = A[j++];
		}
		for (int k = 0; k < tmp.length; k++) {
			A[L + k] = tmp[k];
		}
	}
	void mergeSort(int[] A, int L, int R) {
		if (L < R) {
			int M = L + ((R - L) >> 1);
			mergeSort(A,L,M);
			mergeSort(A,M + 1,R);
			merge(A,L,M,R);
		}
	}
}