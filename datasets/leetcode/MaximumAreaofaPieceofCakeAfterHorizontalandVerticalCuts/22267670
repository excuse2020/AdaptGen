class Solution {
	int MOD = 1000000007;
	int maxArea(int h, int w, int[] horizontalCuts, int[] verticalCuts) {
		int i;
		int lenV = verticalCuts.length;
		int lenH = horizontalCuts.length;
		long maxHorizontalDiff = -1, maxVerticalDiff = -1, tempDiff;
		Arrays.sort(horizontalCuts);
		Arrays.sort(verticalCuts);
		for (i = 0; i < lenH; i++) {
			if (i == 0) {
				tempDiff = horizontalCuts[i] - 0;
			} 
			else {
				tempDiff = (horizontalCuts[i] - horizontalCuts[i - 1]);
			}
			if (tempDiff > maxHorizontalDiff) {
				maxHorizontalDiff = tempDiff;
			}
		}
		tempDiff = h - horizontalCuts[lenH - 1];
		if (tempDiff > maxHorizontalDiff) {
			maxHorizontalDiff = tempDiff;
		}
		for (i = 0; i < lenV; i++) {
			if (i == 0) {
				tempDiff = verticalCuts[i] - 0;
			} 
			else {
				tempDiff = verticalCuts[i] - verticalCuts[i - 1];
			}
			if (tempDiff > maxVerticalDiff) {
				maxVerticalDiff = tempDiff;
			}
		}
		tempDiff = w - verticalCuts[lenV - 1];
		if (tempDiff > maxVerticalDiff) {
			maxVerticalDiff = tempDiff;
		}
		return (int) (((maxHorizontalDiff % MOD) * (maxVerticalDiff % MOD)) % MOD);
	}
}