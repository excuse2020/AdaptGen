class Solution {
	int findLower(int n) {
		for (int i = 0; i < 18; ) {
			if (Math.pow(2,i) < n) {
				i++;
			} 
			else {
				return (int) Math.pow(2,i - 1);
			}
		}
		return 1;
	}
	int findUpper(int n) {
		for (int i = 18; i >= 0; ) {
			if (Math.pow(2,i) >= n) {
				i--;
			} 
			else {
				return (int) Math.pow(2,i + 1);
			}
		}
		return 1;
	}
	int minOperations(int n) {
		int minOperations = 0;
		Set<Integer> visited = new HashSet<Integer>();
		Queue<Integer> q = new LinkedList<Integer>();
		int upper = findUpper(n);
		int lower = findLower(n);
		q.add(n);
		while (!q.isEmpty()) {
			int size = q.size();
			for (int i = 0; i < size; i++) {
				int curr = q.remove();
				if (visited.contains(curr)) {
					continue;
				}
				visited.add(curr);
				if (curr == upper || curr == lower) {
					return minOperations + 1;
				}
				for (int j = 0; j < 17; j++) {
					int plus = (int) (curr + Math.pow(2,j));
					if (plus <= upper) {
						q.add(plus);
					} 
					else {
						break;
					}
				}
				for (int j = 0; j < 17; j++) {
					int minus = (int) (curr - Math.pow(2,j));
					if (minus >= lower) {
						q.add(minus);
					} 
					else {
						break;
					}
				}
			}
			minOperations++;
		}
		return minOperations;
	}
}