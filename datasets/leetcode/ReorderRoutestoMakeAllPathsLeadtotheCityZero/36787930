class Solution {
	int minReorder(int n, int[][] connections) {
		Queue<Integer> queue = new ArrayDeque<>();
		ArrayList<Integer>[] edge = (ArrayList<Integer>[]) new ArrayList[n];
		int count = 0;
		System.out.println(edge.length);
		for (int i = 0; i < connections.length; i++) {
			if (edge[connections[i][0]] == null) {
				edge[connections[i][0]] = new ArrayList<>();
			}
			if (edge[connections[i][1]] == null) {
				edge[connections[i][1]] = new ArrayList<>();
			}
			edge[connections[i][1]].add(connections[i][0]);
			edge[connections[i][0]].add(-connections[i][1]);
		}
		queue.add(0);
		HashSet<Integer> vis = new HashSet<>();
		while (!queue.isEmpty()) {
			int size = queue.size();
			while (size-- > 0) {
				int ele = Math.abs(queue.remove());
				vis.add(ele);
				System.out.println(ele);
				for (int i: edge[ele]) {	
					if (vis.contains(Math.abs(i))) {
						continue;
					}
					if (i > 0) {
					} 
					else {
						count++;
					}
					queue.add(i);
				}
			}
		}
		return count;
	}
}