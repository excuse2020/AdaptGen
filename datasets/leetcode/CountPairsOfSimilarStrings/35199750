class Solution {
	String removeDupAndSort(String str) {
		StringBuilder sb = new StringBuilder();
		HashSet<Character> charSet = new HashSet<>();
		char[] chars = str.toCharArray();
		Arrays.sort(chars);
		for (char ch: chars) {	
			if (charSet.add(ch)) {
				sb.append(ch);
			}
		}
		return sb.toString();
	}
	int similarPairs(String[] words) {
		if (words == null || words.length == 0) {
			return -1;
		}
		String[] sortedWords = new String[words.length];
		System.arraycopy(words,0,sortedWords,0,words.length);
		for (int i = 0; i < sortedWords.length; i++) {
			sortedWords[i] = removeDupAndSort(sortedWords[i]);
		}
		Arrays.sort(sortedWords);
		int result = 0;
		for (int i = 0; i < sortedWords.length; i++) {
			for (int j = i + 1; j < sortedWords.length; j++) {
				if (sortedWords[i].equals(sortedWords[j])) {
					result++;
				}
			}
		}
		return result;
	}
}