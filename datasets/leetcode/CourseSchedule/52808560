class Solution {
	boolean canFinish(int numCourses, int[][] prerequisites) {
		List<List<Integer>> graph = new ArrayList<>();
		for (int i = 0; i < numCourses; ++i) {
			graph.add(new ArrayList<>());
		}
		for (int i = 0; i < prerequisites.length; ++i) {
			int from = prerequisites[i][1];
			int to = prerequisites[i][0];
			graph.get(from).add(to);
		}
		boolean[] visited = new boolean[numCourses];
		boolean[] currentPath = new boolean[numCourses];
		for (int i = 0; i < numCourses; ++i) {
			if (isCycle(graph,visited,currentPath,i)) {
				return false;
			}
		}
		return true;
	}
	boolean isCycle(List<List<Integer>> graph, boolean[] visited, boolean[] currentPath, int node) {
		if (currentPath[node]) {
			return true;
		}
		if (visited[node]) {
			return false;
		}
		visited[node] = true;
		currentPath[node] = true;
		for (int v: graph.get(node)) {	
			if (isCycle(graph,visited,currentPath,v)) {
				return true;
			}
		}
		currentPath[node] = false;
		return false;
	}
}