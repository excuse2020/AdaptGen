class Solution {
	int solve(int i, int j, int[] piles, int[][] dp) {
		if (i > j) {
			return 0;
		}
		if (i == j) {
			return dp[i][j] = piles[i];
		}
		if (dp[i][j] != -1) {
			return dp[i][j];
		}
		int take_i = piles[i] + Math.min(solve(i + 1,j - 1,piles,dp),solve(i + 2,j,piles,dp));
		int take_j = piles[j] + Math.min(solve(i + 1,j - 1,piles,dp),solve(i,j - 2,piles,dp));
		return dp[i][j] = Math.max(take_i,take_j);
	}
	boolean stoneGame(int[] piles) {
		int n = piles.length;
		int total = 0;
		int[][] dp = new int[501][501];
		for (int[] y: dp) {	
			Arrays.fill(y,-1);
		}
		for (int x: piles) {	
			total += x;
		}
		int alice = solve(0,n - 1,piles,dp);
		int bob = total - alice;
		return alice > bob;
	}
}