class Solution {
	boolean validPath(int n, int[][] edges, int source, int destination) {
		List<List<Integer>> list = new ArrayList<>();
		for (int i = 0; i < n; i++) {
			list.add(new ArrayList<>());
		}
		for (int[] edge: edges) {	
			int u = edge[0];
			int v = edge[1];
			list.get(u).add(v);
			list.get(v).add(u);
		}
		boolean[] visited = new boolean[n];
		Queue<Integer> q = new LinkedList<>();
		q.add(source);
		while (!q.isEmpty()) {
			int size = q.size();
			for (int i = 0; i < size; i++) {
				int node = q.poll();
				if (node == destination) {
					return true;
				}
				if (visited[node]) {
					continue;
				}
				visited[node] = true;
				for (int neighbour: list.get(node)) {	
					if (!visited[neighbour]) {
						q.add(neighbour);
					}
				}
			}
		}
		return visited[destination];
	}
}