class Solution {
	int binarySearch(int target, MountainArray arr) {
		int start = 0;
		int end = findpeak(arr);
		while (start <= end) {
			int mid = (start + end) / 2;
			int midValue = arr.get(mid);
			if (target < midValue) {
				end = mid - 1;
			} 
			else if (target > midValue) {
				start = mid + 1;
			} 
			else {
				return mid;
			}
		}
		return -1;
	}
	int binarySearchDesc(MountainArray arr, int target, int start) {
		int end = arr.length() - 1;
		while (start <= end) {
			int mid = (start + end) / 2;
			int midValue = arr.get(mid);
			if (target < midValue) {
				start = mid + 1;
			} 
			else if (target > midValue) {
				end = mid - 1;
			} 
			else {
				return mid;
			}
		}
		return -1;
	}
	int findInMountainArray(int target, MountainArray arr) {
		int ans = binarySearch(target,arr);
		if (ans != -1) {
			System.out.println(ans);
		} 
		else {
			int start = findpeak(arr);
			return binarySearchDesc(arr,target,start);
		}
		return ans;
	}
	int findpeak(MountainArray arr) {
		int start = 0;
		int end = arr.length() - 1;
		while (start < end) {
			int mid = (start + end) / 2;
			int midValue = arr.get(mid);
			int midNextValue = arr.get(mid + 1);
			if (midValue < midNextValue) {
				start = mid + 1;
			} 
			else if (midValue > midNextValue) {
				end = mid - 1;
			} 
			else {
				return mid;
			}
		}
		return start;
	}
}