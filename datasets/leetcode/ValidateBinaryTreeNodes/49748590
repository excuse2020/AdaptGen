class Solution {
	boolean valid = true;
	int[] visited = null;
	void dfs(int cur, int[] leftChild, int[] rightChild) {
		if (cur == -1) {
			return;
		}
		if (visited[cur] == 1) {
			valid = false;
			return;
		}
		visited[cur] = 1;
		dfs(leftChild[cur],leftChild,rightChild);
		dfs(rightChild[cur],leftChild,rightChild);
		return;
	}
	boolean validateBinaryTreeNodes(int n, int[] leftChild, int[] rightChild) {
		int[] count = new int[n];
		for (int i = 0; i < n; i++) {
			if (leftChild[i] != -1) {
				count[leftChild[i]] += 1;
			}
		}
		for (int i = 0; i < n; i++) {
			if (rightChild[i] != -1) {
				count[rightChild[i]] += 1;
			}
		}
		int countRoot = 0;
		int root = 0;
		for (int i = 0; i < n; i++) {
			if (count[i] == 0) {
				countRoot += 1;
				root = i;
			}
		}
		if (countRoot == 1) {
			validateRoot(n,leftChild,rightChild,root);
			for (int i = 0; i < n; i++) {
				if (visited[i] != 1) {
					return false;
				}
			}
			return valid;
		}
		return false;
	}
	boolean validateRoot(int n, int[] leftChild, int[] rightChild, int i) {
		visited = new int[n];
		dfs(i,leftChild,rightChild);
		return valid;
	}
}