class Solution {
	int[] arr;
	int[][] memo;
	int dp(int l, int r) {
		if (memo[l][r] != -1) {
			return memo[l][r];
		}
		if (l + 1 >= r) {
			return 0;
		}
		int ans = Integer.MAX_VALUE;
		for (int k = l + 1; k < r; k++) {
			ans = Math.min(ans,dp(l,k) + dp(k,r));
		}
		return memo[l][r] = ans;
	}
	int findMax(int l, int r) {
		int ans = -1;
		for (int i = l; i < r; i++) {
			ans = Math.max(ans,arr[i]);
		}
		return ans;
	}
	int mctFromLeafValues(int[] arr) {
		int n = arr.length;
		this.arr = arr;
		memo = new int[n + 1][n + 1];
		for (int i = 0; i <= n; i++) {
			Arrays.fill(memo[i],-1);
		}
		return dp(0,n);
	}
}