class Solution {
	TreeNode createBinaryTree(int[][] descriptions) {
		Map<Integer, TreeNode> map = new HashMap<>();
		Set<Integer> childs = new HashSet<>();
		for (int i: descriptions) {	
			int parent = i[0];
			int child = i[1];
			int dir = i[2];
			TreeNode parentNode = null;
			TreeNode childNode = null;
			if (map.containsKey(parent)) {
				parentNode = map.get(parent);
			} 
			else {
				parentNode = new TreeNode(parent);
				map.put(parent,parentNode);
			}
			if (map.containsKey(child)) {
				childNode = map.get(child);
			} 
			else {
				childNode = new TreeNode(child);
				map.put(child,childNode);
			}
			if (dir == 1) {
				parentNode.left = childNode;
			} 
			else {
				parentNode.right = childNode;
			}
			childs.add(child);
		}
		for (int i: descriptions) {	
			if (!childs.contains(i[0])) {
				return map.get(i[0]);
			}
		}
		return null;
	}
}