class Solution {
	int minimumSum(int num) {
		String s = Integer.toString(num);
		int n = s.length();
		int x = num;
		int[] nums = new int[n];
		int i = 0;
		while (x > 0) {
			nums[i] = x % 10;
			i++;
			x = x / 10;
		}
		Arrays.sort(nums);
		Stack<Integer> even = new Stack<Integer>();
		Stack<Integer> odd = new Stack<Integer>();
		for (int i1 = 0; i1 < n; i1++) {
			if (i1 % 2 == 0) {
				even.add(nums[i1]);
			} 
			else {
				odd.add(nums[i1]);
			}
		}
		int num1 = 0;
		int i2 = 0;
		while (!even.empty()) {
			int power = (int) Math.pow(10,i2);
			i2++;
			num1 = num1 + (even.pop() * power);
		}
		int num2 = 0;
		int j = 0;
		while (!odd.empty()) {
			int power1 = (int) Math.pow(10,j);
			j++;
			num1 = num1 + (odd.pop() * power1);
		}
		return num1 + num2;
	}
}