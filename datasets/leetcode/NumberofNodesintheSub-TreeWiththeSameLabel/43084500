class Solution {
	int[] ch, ans;
	String labels;
	int[] countSubTrees(int n, int[][] edges, String labels) {
		ch = new int[26];
		ans = new int[n];
		this.labels = labels;
		boolean[] visited = new boolean[n];
		List<Integer>[] adj = new ArrayList[n];
		for (int i = 0; i < n; i++) {
			adj[i] = new ArrayList<>();
		}
		for (int[] ed: edges) {	
			adj[ed[0]].add(ed[1]);
			adj[ed[1]].add(ed[0]);
		}
		dfs(0,adj,false,visited);
		return ans;
	}
	void dfs(int i, List<Integer>[] adj, boolean left, boolean[] visited) {
		visited[i] = true;
		boolean onedone = false;
		int ind;
	}
}