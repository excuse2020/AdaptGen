class Solution {
	ArrayList<Integer> graph;
	void createGraph(int edges, int n) {
		graph = new ArrayList[n];
		for (int i = 0; i < n; i++) {
			graph[i] = new ArrayList<>();
		}
		for (int a: edges) {	
			int u = a[0];
			int v = a[1];
			graph[v].add(u);
		}
	}
	void dfs(HashMap<Integer, int[]> map, int curr) {
		if (map.containsKey(curr)) {
			return;
		}
		map.put(curr,new int[graph.length]);
		int a = map.get(curr);
		for (int i: graph[curr]) {	
			dfs(map,i);
			int arr = map.get(i);
			for (int j = 0; j < arr.length; j++) {
				if (arr[j] != 0) {
					a[j]++;
				}
			}
			a[i]++;
		}
	}
	List<List<Integer>> getAncestors(int n, int[][] edges) {
		HashMap<Integer, int[]> map = new HashMap<>();
		createGraph(edges,n);
		for (int i = n - 1; i >= 0; i--) {
			dfs(map,i);
		}
		List<List<Integer>> res = new LinkedList<>();
		List<Integer> temp = new LinkedList<>();
		for (Map.Entry<Integer, int[]> it: map.entrySet()) {	
			temp = new LinkedList<>();
			int arr = it.getValue();
			for (int i = 0; i < arr.length; i++) {
				if (arr[i] != 0) {
					temp.add(i);
				}
			}
			res.add(temp);
		}
		return res;
	}
}