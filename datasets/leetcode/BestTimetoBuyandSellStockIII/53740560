class Solution {
	int maxProfit(int[] prices) {
		int dp = new int[prices.length][2][3];
		for (int i = 0; i < prices.length; i++) {
			for (int j = 0; j < 2; j++) {
				for (int k = 0; k <= 2; k++) {
					dp[i][j][k] = -1;
				}
			}
		}
		return solve(0,1,prices,2,dp);
	}
	int solve(int idx, int buy, int[] pr, int limit, int dp) {
		if (idx == pr.length) {
			return 0;
		}
		if (limit == 0) {
			return 0;
		}
		int profit = 0;
		if (dp[idx][buy][limit] != -1) {
			return dp[idx][buy][limit];
		}
		if (buy == 1) {
			int buykro = -pr[idx] + solve(idx + 1,0,pr,limit,dp);
			int skipkro = 0 + solve(idx + 1,1,pr,limit,dp);
			profit = Math.max(buykro,skipkro);
			dp[idx][buy][limit] = profit;
		} 
		else {
			int sellkro = pr[idx] + solve(idx + 1,1,pr,limit - 1,dp);
			int skipkro = 0 + solve(idx + 1,0,pr,limit,dp);
			profit = Math.max(sellkro,skipkro);
			dp[idx][buy][limit] = profit;
		}
		return dp[idx][buy][limit];
	}
}