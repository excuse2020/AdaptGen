class Solution {
	int m, n;
	int dp(int[][] grid, int i, int j, int[][] arr) {
		if (i >= m || j >= n) {
			return Integer.MAX_VALUE;
		}
		if (i == m - 1 && j == n - 1) {
			return grid[m - 1][n - 1];
		}
		if (arr[i][j] != 0) {
			return arr[i][j];
		}
		int left_sum = dp(grid,i,j + 1,arr);
		int down_sum = dp(grid,i + 1,j,arr);
		arr[i][j] = grid[i][j] + Math.min(left_sum,down_sum);
		return grid[i][j] + Math.min(left_sum,down_sum);
	}
	int minPathSum(int[][] grid) {
		m = grid.length;
		n = grid[0].length;
		int[][] arr = new int[m][n];
		return dp(grid,0,0,arr);
	}
}