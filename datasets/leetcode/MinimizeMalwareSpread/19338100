class Solution {
	int[] par;
	int[] size;
	int find(int u) {
		if (par[u] == u) {
			return u;
		}
		par[u] = find(par[u]);
		return par[u];
	}
	void merge(int p1, int p2) {
		if (p1 != p2) {
			if (size[p1] > size[p2]) {
				par[p2] = p1;
				size[p1] += size[p2];
			} 
			else {
				par[p1] = p2;
				size[p2] += size[p1];
			}
		}
	}
	int minMalwareSpread(int[][] graph, int[] initial) {
		size = new int[graph.length];
		par = new int[graph.length];
		for (int i = 0; i < graph.length; i++) {
			size[i] = 1;
			par[i] = i;
		}
		for (int i = 0; i < graph.length; i++) {
			for (int j = 0; j < graph[0].length; j++) {
				if (graph[i][j] == 1) {
					int p1 = find(i);
					int p2 = find(j);
					merge(p1,p2);
				}
			}
		}
		int[] infected = new int[graph.length];
		for (int e: initial) {	
			int p = find(e);
			infected[p]++;
		}
		int curr_size = -1;
		int ans = -1;
		for (int e: initial) {	
			int p = find(e);
			if (infected[p] == 1 && size[p] >= curr_size) {
				if (size[p] > curr_size) {
					ans = e;
				} 
				else {
					ans = Math.min(ans,e);
				}
				curr_size = size[p];
			}
		}
		if (ans == -1) {
			ans = initial[0];
			for (int i = 0; i < initial.length; i++) {
				ans = Math.min(ans,initial[i]);
			}
		}
		return ans;
	}
}