class Solution {
	int agnosticSearch(int target, MountainArray mountainArr, int start, int end) {
		int ans = -1;
		if (mountainArr.get(start) < mountainArr.get(end)) {
			while (start <= end) {
				int mid = start + (end - start) / 2;
				if (mountainArr.get(mid) < target) {
					start = mid + 1;
				} 
				else if (mountainArr.get(mid) > target) {
					end = mid - 1;
				} 
				else {
					ans = mid;
					break;
				}
			}
		} 
		else {
			while (start <= end) {
				int mid = start + (end - start) / 2;
				if (mountainArr.get(mid) < target) {
					end = mid - 1;
				} 
				else if (mountainArr.get(mid) > target) {
					start = mid + 1;
				} 
				else {
					ans = mid;
					break;
				}
			}
		}
		return ans;
	}
	int findInMountainArray(int target, MountainArray mountainArr) {
		int peakKeyVal = peakIndex(mountainArr);
		int val = agnosticSearch(target,mountainArr,0,peakKeyVal);
		if (val != -1) {
			return val;
		}
		return agnosticSearch(target,mountainArr,peakKeyVal,mountainArr.length() - 1);
	}
	int peakIndex(MountainArray mountainArr) {
		int start = 0;
		int end = mountainArr.length() - 1;
		while (start < end) {
			int mid = start + (end - start) / 2;
			if (mountainArr.get(mid) < mountainArr.get(mid + 1)) {
				start = mid + 1;
			} 
			else {
				end = mid;
			}
		}
		return start;
	}
}