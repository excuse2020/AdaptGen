class Solution {
	int[][] grid;
	int m = 0;
	int[][] memo;
	int n = 0;
	int dfs(int i, int j) {
		if (i == m || j == n) {
			return Integer.MAX_VALUE;
		}
		if (i == m - 1 && j == n - 1) {
			return grid[i][j];
		}
		if (memo[i][j] != -1) {
			return memo[i][j];
		}
		memo[i][j] = grid[i][j] + Math.min(dfs(i + 1,j),dfs(i,j + 1));
		return memo[i][j];
	}
	int minPathSum(int[][] grid) {
		m = grid.length;
		n = grid[0].length;
		memo = new int[m][n];
		this.grid = grid;
		for (int[] row: memo) {	
			Arrays.fill(row,-1);
		}
		return dfs(0,0);
	}
}