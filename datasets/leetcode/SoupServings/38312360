class Solution {
	double[][] dp;
	double serve(int a, int b) {
		if (a <= 0 || b <= 0) {
			if (a <= 0 && b <= 0) {
				return 0.5;
			} 
			else if (a <= 0) {
				return 1.0;
			} 
			else {
				return 0;
			}
		}
		if (dp[a][b] != -1) {
			return dp[a][b];
		}
		double s1 = serve(a - 100,b - 0);
		double s2 = serve(a - 75,b - 25);
		double s3 = serve(a - 50,b - 50);
		double s4 = serve(a - 25,b - 75);
		return dp[a][b] = (s1 + s2) / 4;
	}
	double soupServings(int n) {
		if (n >= 5000) {
			return 1;
		}
		dp = new double[n + 1][n + 1];
		for (double[] d: dp) {	
			Arrays.fill(d,-1);
		}
		return serve(n,n);
	}
}