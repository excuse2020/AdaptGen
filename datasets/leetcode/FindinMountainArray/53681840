class Solution {
	int findInMountainArray(int target, MountainArray arr) {
		int n = arr.length();
		int i = 0;
		int j = n - 1;
		int peak = -1;
		while (i <= j) {
			int mid = i + (j - i) / 2;
			if (mid == 0) {
				i = mid + 1;
				continue;
			}
			if (mid == n - 1) {
				j = mid - 1;
				continue;
			}
			int a = arr.get(mid);
			int l = arr.get(mid - 1);
			int r = arr.get(mid + 1);
			if (a > l && a > r) {
				peak = mid;
				break;
			} 
			else if (a > l && a < r) {
				i = mid + 1;
			} 
			else {
				j = mid - 1;
			}
		}
		int a = searchInc(arr,0,peak,target);
		int b = searchDec(arr,peak,n - 1,target);
		if (a == -1 && b == -1) {
			return -1;
		} 
		else if (a == -1) {
			return b;
		} 
		else if (b == -1) {
			return a;
		} 
		else {
			return Math.min(a,b);
		}
	}
	int searchDec(MountainArray arr, int st, int end, int target) {
		int ans = -1;
		while (st <= end) {
			int mid = st + (end - st) / 2;
			int a = arr.get(mid);
			if (a == target) {
				ans = mid;
				end = mid - 1;
			} 
			else if (a > target) {
				st = mid + 1;
			} 
			else {
				end = mid - 1;
			}
		}
		return ans;
	}
	int searchInc(MountainArray arr, int st, int end, int target) {
		int ans = -1;
		while (st <= end) {
			int mid = st + (end - st) / 2;
			int a = arr.get(mid);
			if (a == target) {
				ans = mid;
				end = mid - 1;
			} 
			else if (a > target) {
				end = mid - 1;
			} 
			else {
				st = mid + 1;
			}
		}
		return ans;
	}
}