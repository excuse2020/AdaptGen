class Solution {
	TreeNode Deserialize(String str) {
		TreeNode res = null;
		if (str.length() == 0) {
			return res;
		}
		String[] string = str.split("\\*");
		res = new TreeNode(Integer.valueOf(string[0]).intValue());
		int n = 2;
		int index = 1;
		int count = 2;
		Queue<TreeNode> que = new LinkedList<TreeNode>();
		que.add(res);
		while (count != 0 && !que.isEmpty()) {
			n = count;
			count = 0;
			for (int i = 0; i < n; i += 2) {
				TreeNode temp = que.poll();
				if (!string[index + i].equals("#")) {
					count += 2;
					temp.left = new TreeNode(Integer.valueOf(string[index + i]).intValue());
					que.add(temp.left);
				}
				if (!string[index + i + 1].equals("#")) {
					count += 2;
					temp.right = new TreeNode(Integer.valueOf(string[index + i + 1]).intValue());
					que.add(temp.right);
				}
			}
			index += n;
		}
		return res;
	}
	String Serialize(TreeNode root) {
		StringBuffer res = new StringBuffer("");
		if (root == null) {
			return res.toString();
		}
		Queue<TreeNode> que = new LinkedList<TreeNode>();
		que.add(root);
		res.append(root.val);
		res.append('*');
		while (!que.isEmpty()) {
			int n = que.size();
			for (int i = 0; i < n; i++) {
				TreeNode temp = que.poll();
				if (temp.left == null) {
					res.append("#*");
				}
				if (temp.left != null) {
					res.append(temp.left.val);
					res.append('*');
					que.add(temp.left);
				}
				if (temp.right == null) {
					res.append("#*");
				}
				if (temp.right != null) {
					res.append(temp.right.val);
					res.append('*');
					que.add(temp.right);
				}
			}
		}
		return res.toString();
	}
}