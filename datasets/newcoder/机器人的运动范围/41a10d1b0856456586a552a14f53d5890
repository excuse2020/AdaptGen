class Solution {
	int getNum(boolean[][] visited, int i, int j, int count) {
		if (i < 0 || j < 0 || i >= visited.length || j >= visited[0].length || visited[i][j]) {
			return count;
		}
		count++;
		visited[i][j] = true;
		count = getNum(visited,i,j + 1,count);
		count = getNum(visited,i,j - 1,count);
		count = getNum(visited,i + 1,j,count);
		count = getNum(visited,i - 1,j,count);
		return count;
	}
	int getSum(int num) {
		int result = 0;
		while (num > 0) {
			result = result + num % 10;
			num = num / 10;
		}
		return result;
	}
	int movingCount(int threshold, int rows, int cols) {
		if (rows > 0 && cols > 0) {
			boolean[][] visited = new boolean[rows][cols];
			for (int i = 0; i < rows; i++) {
				for (int j = 0; j < cols; j++) {
					visited[i][j] = ((getSum(i) + getSum(j)) > threshold);
				}
			}
			return getNum(visited,0,0,0);
		}
		return 0;
	}
}