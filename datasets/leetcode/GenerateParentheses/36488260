class Solution {
	void backtrack(String s, int open, int close, List<String> ans) {
		if (open > close) {
			return;
		}
		if (open > 0) {
			backtrack(s + "(",open - 1,close,ans);
		}
		if (close > 0) {
			backtrack(s + ")",open,close - 1,ans);
		}
		if (open == 0 && close == 0) {
			ans.add(s);
		}
	}
	List<String> generateParenthesis(int n) {
		List<String> ans = new ArrayList<>();
		backtrack("",n,n,ans);
		return ans;
	}
}