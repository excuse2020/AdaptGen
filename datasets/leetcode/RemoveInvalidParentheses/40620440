class Solution {
	void dfs(String s, int i, int open, StringBuilder sb, Set<String> set) {
		if (i == s.length()) {
			if (open == 0) {
				set.add(sb.toString());
			}
			return;
		}
		if (open < 0) {
			return;
		}
		int len = sb.length();
		char c = s.charAt(i);
	}
	List<String> removeInvalidParentheses(String s) {
		Set<String> set = new HashSet<>();
		StringBuilder sb = new StringBuilder();
		dfs(s,0,0,sb,set);
		int max = 0;
		for (String str: set) {	
			max = Math.max(max,str.length());
		}
		List<String> res = new ArrayList<>();
		for (String str: set) {	
			if (str.length() == max) {
				res.add(str);
			}
		}
		return res;
	}
}