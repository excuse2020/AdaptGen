class Solution {
	void conquer(int arr, int start, int mid, int end) {
		int merged = new int[end - start + 1];
		int ptr = 0;
		int i = start;
		int j = mid + 1;
		while (i <= mid && j <= end) {
			if (arr[i] <= arr[j]) {
				merged[ptr++] = arr[i++];
			} 
			else {
				merged[ptr++] = arr[j++];
			}
		}
		while (i <= mid) {
			merged[ptr++] = arr[i++];
		}
		while (j <= end) {
			merged[ptr++] = arr[j++];
		}
		for (i = 0, j = start; i < merged.length; i++, j++) {
			arr[j] = merged[i];
		}
	}
	void divide(int arr, int start, int end) {
		if (start >= end) {
			return;
		}
		int mid = start + (end - start) / 2;
		divide(arr,start,mid);
		divide(arr,mid + 1,end);
		conquer(arr,start,mid,end);
	}
	int[] sortArray(int[] nums) {
		int n = nums.length;
		divide(nums,0,n - 1);
		return nums;
	}
}