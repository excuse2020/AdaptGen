class TrieNode {
	TrieNode[] children = new TrieNode[2];
	int count = 0;
}
class Solution {
	int kHeight = 14;
	TrieNode root = new TrieNode();
	int countPairs(int[] nums, int low, int high) {
		int ans = 0;
		for (int num: nums) {	
			ans += getCount(num,high + 1) - getCount(num,low);
			insert(num);
		}
		return ans;
	}
	int getCount(int num, int limit) {
		int count = 0;
		TrieNode node = root;
		for (int i = kHeight; i >= 0; --i) {
			int bit = num >> i & 1;
			int bitLimit = ((limit >> i) & 1);
			if (bitLimit == 1) {
				if (node.children[bit] != null) {
					count += node.children[bit].count;
				}
				node = node.children[bit ^ 1];
			} 
			else {
				node = node.children[bit];
			}
			if (node == null) {
				break;
			}
		}
		return count;
	}
	void insert(int num) {
		TrieNode node = root;
		for (int i = kHeight; i >= 0; --i) {
			int bit = num >> i & 1;
			if (node.children[bit] == null) {
				node.children[bit] = new TrieNode();
			}
			node = node.children[bit];
			++node.count;
		}
	}
}