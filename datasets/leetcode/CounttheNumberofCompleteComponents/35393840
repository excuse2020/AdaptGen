class Solution {
	int countCompleteComponents(int n, int[][] edges) {
		List<List<Integer>> adjList = new ArrayList<>();
		for (int i = 0; i < n; i++) {
			adjList.add(new ArrayList<>());
		}
		for (int[] edge: edges) {	
			int u = edge[0];
			int v = edge[1];
			adjList.get(u).add(v);
			adjList.get(v).add(u);
		}
		boolean[] visited = new boolean[n];
		int count = 0;
		Queue<Integer> queue = new LinkedList<>();
		for (int i = 0; i < n; i++) {
			int edge = 0, nodes = 0;
			if (!visited[i]) {
				queue.offer(i);
				nodes++;
				visited[i] = true;
				while (!queue.isEmpty()) {
					int u = queue.poll();
					for (int v: adjList.get(u)) {	
						edge++;
						if (!visited[v]) {
							queue.offer(v);
							nodes++;
							visited[v] = true;
						}
					}
				}
				edge = edge / 2;
				if (edge == nodes * (nodes - 1) / 2) {
					count++;
				}
			}
		}
		return count;
	}
}