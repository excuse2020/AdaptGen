class Solution {
	int[] findNextCandleIndex(String s, int tableLength) {
		Stack<Integer> st = new Stack<Integer>();
		int[] nextCandleIdx = new int[tableLength];
		int i = 0;
	}
	int[] findPrevCandleIndex(String s, int tableLength) {
		Stack<Integer> st = new Stack<Integer>();
		int[] prevCandleIdx = new int[tableLength];
		int i = tableLength - 1;
	}
	int getFirstCandleIndex(int position, int[] candleIdx) {
		if (candleIdx[position] == -1) {
			return -1;
		}
		return candleIdx[position];
	}
	int[] getNumberOfPlatesTillEachIdx(String s, int tableLength) {
		int[] numberOfPlates = new int[tableLength];
	}
	int[] platesBetweenCandles(String s, int[][] queries) {
		int numberOfQueries = queries.length;
		int tableLength = s.length();
		int[] queryResult = new int[numberOfQueries];
		int[] numberOfPlates = getNumberOfPlatesTillEachIdx(s,tableLength);
		int[] nextCandleIdx = findNextCandleIndex(s,tableLength);
		int[] prevCandleIdx = findPrevCandleIndex(s,tableLength);
		for (int i = 0; i < numberOfQueries; i++) {
			int start = queries[i][0];
			int end = queries[i][1];
			int leftStart = getFirstCandleIndex(start,nextCandleIdx);
			int rightEnd = getFirstCandleIndex(end,prevCandleIdx);
			if (leftStart == -1 || rightEnd == -1 || leftStart > rightEnd) {
				queryResult[i] = 0;
				continue;
			}
			queryResult[i] = numberOfPlates[rightEnd] - numberOfPlates[leftStart];
		}
		return queryResult;
	}
}