class Solution {
	int minimumRounds(int[] tasks) {
		int ans = 0;
		Map<Integer, Integer> taskToCount = new HashMap<>();
		for (int task: tasks) {	
			taskToCount.put(task,taskToCount.getOrDefault(task,0) + 1);
		}
		for (int taskCount: taskToCount.values()) {	
			if (taskCount == 1) {
				return -1;
			}
			if (taskCount % 2 == 0) {
				int countOfTwos = taskCount / 2;
				int countOfGroupsOfThreeOfSizeTwo = countOfTwos / 3;
				int roundsCompletingThreeTasks = countOfGroupsOfThreeOfSizeTwo * 2;
				int roundsCompletingTwoTasks = countOfTwos - countOfGroupsOfThreeOfSizeTwo * 3;
				ans += roundsCompletingThreeTasks + roundsCompletingTwoTasks;
			} 
			else {
				int countOfTwos = (taskCount - 3) / 2;
				int countOfGroupsOfThreeOfSizeTwo = countOfTwos / 3;
				int roundsCompletingThreeTasks = countOfGroupsOfThreeOfSizeTwo * 2;
				int roundsCompletingTwoTasks = countOfTwos - countOfGroupsOfThreeOfSizeTwo * 3;
				ans += roundsCompletingThreeTasks + roundsCompletingTwoTasks;
			}
		}
		return ans;
	}
}