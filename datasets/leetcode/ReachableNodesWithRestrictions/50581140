class Solution {
	int reachableNodes(int n, int[][] edges, int[] restricted) {
		ArrayList<ArrayList<Integer>> list = new ArrayList<>();
		for (int i = 0; i < n; i++) {
			list.add(new ArrayList<Integer>());
		}
		for (int i: edges) {	
			list.get(i[0]).add(i[1]);
			list.get(i[1]).add(i[0]);
		}
		boolean visited = new boolean[n];
		for (int i: restricted) {	
			visited[i] = true;
		}
		visited[0] = true;
		Queue<Integer> q = new LinkedList<>();
		q.add(0);
		int count = 0;
		while (!q.isEmpty()) {
			int a = q.remove();
			count++;
			for (int i: list.get(a)) {	
				if (!visited[i]) {
					q.add(i);
					visited[i] = true;
				}
			}
		}
		return count;
	}
}