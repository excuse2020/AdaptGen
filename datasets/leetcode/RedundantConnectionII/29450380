class Solution {
	int[] parent;
	int find(int i) {
		if (parent[i] == i) {
			return i;
		}
		return parent[i] = find(parent[i]);
	}
	int[] findRedundantDirectedConnection(int[][] edges) {
		parent = new int[edges.length + 1];
		for (int i = 0; i < parent.length; i++) {
			parent[i] = i;
		}
		int[] indegree = new int[edges.length];
		for (int[] e: edges) {	
			indegree[e[1] - 1]++;
		}
		int[] e1 = null;
		int[] e2 = null;
		for (int[] e: edges) {	
			if (indegree[e[1] - 1] == 2) {
				if (e1 == null) {
					e1 = e;
				} 
				else {
					e2 = e;
				}
			}
		}
		for (int[] e: edges) {	
			if (e == e1 || e == e2) {
				continue;
			}
			int u = find(e[0]);
			int v = find(e[1]);
			if (u == v) {
				return e;
			} 
			else {
				parent[v] = u;
			}
		}
		int u = find(e1[0]);
		int v = find(e1[1]);
		if (u == v) {
			return e1;
		} 
		else {
			parent[v] = u;
		}
		u = find(e2[0]);
		v = find(e2[1]);
		if (u == v) {
			return e2;
		} 
		else {
			parent[v] = u;
		}
		return edges[0];
	}
}