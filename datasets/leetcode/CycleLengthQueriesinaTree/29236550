class Solution {
	int[] cycleLengthQueries(int n, int[][] queries) {
		int[] ans = new int[queries.length];
		int index = 0;
		for (int[] q: queries) {	
			ans[index++] = solveQuery(q[0],q[1]);
		}
		return ans;
	}
	int solveQuery(int a, int b) {
		List<Integer> pathToRootA = new ArrayList<>();
		int node = a;
		while (node != 0) {
			pathToRootA.add(node);
			node = node / 2;
		}
		List<Integer> pathToRootB = new ArrayList<>();
		node = b;
		while (node != 0) {
			pathToRootB.add(node);
			node = node / 2;
		}
		int i = pathToRootA.size() - 1;
		int j = pathToRootB.size() - 1;
		while (i >= 0 && j >= 0 && pathToRootA.get(i).equals(pathToRootB.get(j))) {
			i--;
			j--;
		}
		i++;
		j++;
		return i + j;
	}
}