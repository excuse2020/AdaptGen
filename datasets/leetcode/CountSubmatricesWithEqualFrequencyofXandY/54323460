class Solution {
	int getInc(char c) {
	}
	int numberOfSubmatrices(char[][] grid) {
		int[][] dp = new int[grid.length][grid[0].length];
		boolean[][] hasX = new boolean[grid.length][grid[0].length];
		dp[0][0] = getInc(grid[0][0]);
		hasX[0][0] = seenX(grid[0][0]);
		for (int col = 1; col < grid[0].length; col++) {
			hasX[0][col] = hasX[0][col - 1] || seenX(grid[0][col]);
			dp[0][col] = dp[0][col - 1] + getInc(grid[0][col]);
		}
		for (int row = 1; row < grid.length; row++) {
			hasX[row][0] = hasX[row - 1][0] || seenX(grid[row][0]);
			dp[row][0] = dp[row - 1][0] + getInc(grid[row][0]);
		}
		for (int row = 1; row < grid.length; row++) {
			for (int col = 1; col < grid[0].length; col++) {
				hasX[row][col] = hasX[row - 1][col] || hasX[row][col - 1];
				dp[row][col] = dp[row - 1][col] + dp[row][col - 1] - dp[row - 1][col - 1] + getInc(grid[row][col]);
			}
		}
		int res = 0;
		for (int row = 0; row < grid.length; row++) {
			for (int col = 0; col < grid[0].length; col++) {
				if (hasX[row][col] && dp[row][col] == 0) {
					res++;
				}
			}
		}
		return res;
	}
	boolean seenX(char c) {
	}
}