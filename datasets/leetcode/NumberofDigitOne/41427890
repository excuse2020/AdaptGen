class Solution {
	Integer dp = new Integer[2][10];
	int countDigitOne(int n) {
		String strn = Integer.toString(n);
		int num = new int[strn.length()];
		int i = 0;
	}
	int f(boolean wasItMax, int num, int currInd, int numint) {
		int wtm = wasItMax ? 1 : 0;
		if (dp[wtm][currInd] != null) {
			return dp[wtm][currInd];
		}
		int res = 0, maxDig = wasItMax ? num[currInd] : 9;
		if (currInd == num.length - 1) {
			return maxDig < 1 ? 0 : 1;
		}
		for (int i = 0; i <= maxDig; i++) {
			res += f(i == maxDig && wasItMax,num,currInd + 1,numint);
			if (i == 1) {
				if (maxDig != i) {
					res += (int) Math.pow(10,num.length - currInd);
				} 
				else {
					res += numint % (int) Math.pow(10,num.length - currInd) + 1;
				}
			}
		}
		return dp[wtm][currInd] = res;
	}
}