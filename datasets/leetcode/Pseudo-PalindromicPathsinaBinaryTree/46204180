class Solution {
	boolean isPseudoPalindrome(boolean[] oddFreq) {
		int oddFreqCnt = 0;
		for (int i = 0; i < 10; i++) {
			if (oddFreq[i]) {
				oddFreqCnt++;
			}
			if (oddFreqCnt > 1) {
				return false;
			}
		}
		return true;
	}
	int pseudoPalindromicPaths(TreeNode root) {
		int[] ans = new int[1];
		boolean[] oddFreq = new boolean[10];
		ans[0] = 0;
		pseudoPalindromicPaths(root,oddFreq,ans);
		return ans[0];
	}
	void pseudoPalindromicPaths(TreeNode root, boolean[] oddFreq, int[] ans) {
		if (root == null) {
			return;
		}
		int val = root.val;
		oddFreq[val] = !oddFreq[val];
		if (root.left == null && root.right == null) {
			if (isPseudoPalindrome(oddFreq)) {
				ans[0]++;
			}
			oddFreq[val] = !oddFreq[val];
			return;
		}
		pseudoPalindromicPaths(root.left,oddFreq,ans);
		pseudoPalindromicPaths(root.right,oddFreq,ans);
		oddFreq[val] = !oddFreq[val];
	}
}