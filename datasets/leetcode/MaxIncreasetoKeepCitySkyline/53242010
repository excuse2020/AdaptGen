class Solution {
	int maxIncreaseKeepingSkyline(int[][] grid) {
		int n = grid.length;
		int[] rowMax = new int[n];
		int[] colMax = new int[n];
		for (int i = 0; i < n; i++) {
			int maxR = 0;
			int maxC = 0;
			for (int j = 0; j < n; j++) {
				if (grid[i][j] > maxR) {
					maxR = grid[i][j];
				}
				if (grid[j][i] > maxC) {
					maxC = grid[j][i];
				}
			}
			rowMax[i] = maxR;
			colMax[i] = maxC;
		}
		int result = 0;
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < n; j++) {
				if (grid[i][j] == Math.max(rowMax[i],colMax[j])) {
					continue;
				}
				int temp = Math.min(rowMax[i],colMax[j]);
				result += temp - grid[i][j];
			}
		}
		return result;
	}
	void printList(int[] lt) {
		for (int i = 0; i < lt.length; i++) {
			System.out.println(lt[i]);
		}
		System.out.println();
	}
}