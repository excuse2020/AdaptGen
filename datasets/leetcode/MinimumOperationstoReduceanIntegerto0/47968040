class Solution {
	int find(int n) {
		int left = 1;
		int right = n / 2 + 1;
		while (left < right) {
			int mid = left + (right - left) / 2;
			int val = (int) Math.pow(2,mid);
			if (val >= n) {
				right = mid;
			} 
			else {
				left = mid + 1;
			}
		}
		return right;
	}
	int minOperations(int n) {
		int count = 0;
		while (n != 0) {
			int power = find(n);
			int lowestNumber = (int) Math.pow(2,power - 1);
			int highestNumber = (int) Math.pow(2,power);
			if (highestNumber - n <= n - lowestNumber) {
				n = highestNumber - n;
			} 
			else {
				n = n - lowestNumber;
			}
			count++;
		}
		return count;
	}
}