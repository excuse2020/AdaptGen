class Solution {
	boolean helper(int[] nums, int i, int[] dp) {
		if (i == nums.length) {
			return true;
		}
		if (dp[i] != 0) {
			return dp[i] == 1 ? true : false;
		}
		if (i + 1 < nums.length && nums[i] == nums[i + 1]) {
			if (helper(nums,i + 2,dp)) {
				dp[i] = 1;
				return true;
			}
			if (i + 2 < nums.length && nums[i] == nums[i + 2]) {
				if (helper(nums,i + 3,dp)) {
					dp[i] = 1;
					return true;
				}
			}
		}
		if (i + 2 < nums.length && nums[i] + 1 == nums[i + 1] && nums[i + 1] + 1 == nums[i + 2]) {
			if (helper(nums,i + 3,dp)) {
				dp[i] = 1;
				return true;
			}
		}
		dp[i] = -1;
		return false;
	}
	boolean validPartition(int[] nums) {
		int[] dp = new int[nums.length];
		return helper(nums,0,dp);
	}
}