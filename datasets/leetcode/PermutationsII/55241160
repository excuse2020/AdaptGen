class Solution {
	void helper(int[] nums, int idx, List<List<Integer>> ans) {
		int n = nums.length;
		if (idx == n) {
			List<Integer> l = new ArrayList<>();
			for (int i = 0; i < n; i++) {
				l.add(nums[i]);
			}
			if (!ans.contains(l)) {
				ans.add(l);
			}
			return;
		}
		for (int i = idx; i < n; i++) {
			swap(idx,i,nums);
			helper(nums,idx + 1,ans);
			swap(idx,i,nums);
		}
	}
	List<List<Integer>> permuteUnique(int[] nums) {
		List<List<Integer>> res = new ArrayList<>();
		Arrays.sort(nums);
		helper(nums,0,res);
		return res;
	}
	void swap(int i, int j, int[] nums) {
		int temp = nums[i];
		nums[i] = nums[j];
		nums[j] = temp;
	}
}