class Solution {
	int MOD = 1000000007;
	int ans = 0;
	int InversePairs(int[] nums) {
		mergeSort(nums,0,nums.length - 1);
		return ans;
	}
	void merge(int[] nums, int l, int mid, int r) {
		int[] tmp = new int[r - l + 1];
		int idx = 0, i = l, j = mid + 1;
		while (i <= mid && j <= r) {
			if (nums[i] <= nums[j]) {
				tmp[idx++] = nums[i++];
			} 
			else {
				ans += (mid - i + 1);
				ans %= MOD;
				tmp[idx++] = nums[j++];
			}
		}
		while (i <= mid) {
			tmp[idx++] = nums[i++];
		}
		while (j <= r) {
			tmp[idx++] = nums[j++];
		}
		System.arraycopy(tmp,0,nums,l,r - l + 1);
	}
	void mergeSort(int[] nums, int l, int r) {
		if (l >= r) {
			return;
		}
		int mid = l + (r - l) / 2;
		mergeSort(nums,l,mid);
		mergeSort(nums,mid + 1,r);
		merge(nums,l,mid,r);
	}
}