class Solution {
	int helper(long n, Map<Long, Integer> dp) {
		if (n <= 1) {
			return 0;
		} 
		else if (dp.containsKey(n)) {
			return dp.get(n);
		} 
		else {
			if (n % 2 == 0) {
				dp.put(n,helper(n / 2,dp) + 1);
				return dp.get(n);
			} 
			else {
				dp.put(n,Math.min(helper(n + 1,dp),helper(n - 1,dp)) + 1);
				return dp.get(n);
			}
		}
	}
	int integerReplacement(int n) {
		Map<Long, Integer> dp = new HashMap<>();
		return helper(n,dp);
	}
}