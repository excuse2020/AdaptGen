class Solution {
	int MOD = (int) 1e9 + 7;
	int f(int[] nums, int index, int sum) {
		if (index < 0) {
			return sum;
		}
		sum += nums[index];
		if (sum > 1) {
			return 0;
		}
		int pick = f(nums,index - 1,sum);
		int skip = sum == 1 ? f(nums,index - 1,0) : 0;
		return (pick + skip) % MOD;
	}
	int memoize(int[] nums, int[][] dp, int index, int sum) {
		if (index < 0) {
			return sum;
		}
		sum += nums[index];
		if (sum > 1) {
			return 0;
		}
		if (dp[index][sum] != -1) {
			return dp[index][sum];
		}
		int pick = memoize(nums,dp,index - 1,sum);
		int skip = sum == 1 ? memoize(nums,dp,index - 1,0) : 0;
		return dp[index][sum] = (pick + skip) % MOD;
	}
	int numberOfGoodSubarraySplits(int[] nums) {
		int n = nums.length;
		int[][] dp = new int[n][2];
		for (int[] d: dp) {	
			Arrays.fill(d,-1);
		}
		return memoize(nums,dp,n - 1,0);
	}
}