class Solution {
	int MOD = 1_000_000_007;
	long factorial(int number) {
		long result = 1;
		for (int i = 2; i <= number; i++) {
			result = (result * i) % MOD;
		}
		return result;
	}
	boolean isPrime(int number) {
		if (number <= 1) {
			return false;
		}
		for (int i = 2; i * i <= number; i++) {
			if (number % i == 0) {
				return false;
			}
		}
		return true;
	}
	int numPrimeArrangements(int n) {
		int numPrime = 0;
		for (int i = 1; i <= n; i++) {
			if (isPrime(i)) {
				numPrime++;
			}
		}
		int numNotPrime = n - numPrime;
		long res = (factorial(numPrime) * factorial(numNotPrime)) % MOD;
		return (int) res;
	}
}