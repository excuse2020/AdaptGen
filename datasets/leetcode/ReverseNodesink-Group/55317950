class Solution {
	ListNode getKthNode(ListNode temp, int k) {
		while (k > 1 && temp != null) {
			k--;
			temp = temp.next;
		}
		return temp;
	}
	ListNode reverseKGroup(ListNode head, int k) {
		ListNode temp = head;
		ListNode prevNode = null;
		while (temp != null) {
			ListNode KthNode = getKthNode(temp,k);
			if (KthNode == null) {
				if (prevNode != null) {
					prevNode.next = temp;
				}
				break;
			}
			ListNode nextNode = KthNode.next;
			KthNode.next = null;
			reverselinkedList(temp);
			if (temp == head) {
				head = KthNode;
			} 
			else {
				prevNode.next = KthNode;
			}
			prevNode = temp;
			temp = nextNode;
		}
		return head;
	}
	void reverselinkedList(ListNode head) {
		ListNode previous = head;
		ListNode current = head.next;
		while (current != null) {
			ListNode NextNode = current.next;
			current.next = previous;
			previous = current;
			current = NextNode;
		}
		head.next = null;
		head = previous;
	}
}