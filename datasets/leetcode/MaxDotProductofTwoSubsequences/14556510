class Solution {
	int maxD(int[] nums1, int[] nums2, int n, int m, int[][] dp) {
		if (m == 0 || n == 0) {
			return dp[n][m] = -(int)1e8;
		}
		if (dp[n][m] != -(int)1e9) {
			return dp[n][m];
		}
		int val = nums1[n - 1] * nums2[m - 1];
		int accept = maxD(nums1,nums2,n - 1,m - 1,dp) + val;
		int a = maxD(nums1,nums2,n - 1,m,dp);
		int b = maxD(nums1,nums2,n,m - 1,dp);
		return dp[n][m] = Math.max(val,Math.max(accept,Math.max(a,b)));
	}
	int maxDotProduct(int[] nums1, int[] nums2) {
		int n = nums1.length, m = nums2.length;
		int[][] dp = new int[n + 1][m + 1];
		for (int[] d: dp) {	
			Arrays.fill(d,-(int)1e9);
		}
		int ans = maxD(nums1,nums2,n,m,dp);
		return ans;
	}
}