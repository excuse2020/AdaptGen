class Solution {
	List<Boolean> checkIfPrerequisite(int numCourses, int[][] prerequisites, int[][] queries) {
		ArrayList<Integer>[] adj = new ArrayList[numCourses];
		for (int i = 0; i < numCourses; i++) {
			adj[i] = new ArrayList<>();
		}
		int[] inDegree = new int[numCourses];
		for (int[] pre: prerequisites) {	
			adj[pre[0]].add(pre[1]);
			inDegree[pre[1]]++;
		}
		List<Integer> queue = new ArrayList<>();
		for (int i = 0; i < numCourses; i++) {
			if (inDegree[i] == 0) {
				queue.add(i);
			}
		}
		boolean[][] mat = new boolean[numCourses][numCourses];
		while (!queue.isEmpty()) {
			int cur = queue.remove(0);
			for (int next: adj[cur]) {	
				mat[cur][next] = true;
				for (int i = 0; i < numCourses; i++) {
					if (mat[i][cur]) {
						mat[i][next] = true;
					}
				}
				if (--inDegree[next] == 0) {
					queue.add(next);
				}
			}
		}
		List<Boolean> res = new ArrayList<>();
		for (int[] query: queries) {	
			res.add(mat[query[0]][query[1]]);
		}
		return res;
	}
}