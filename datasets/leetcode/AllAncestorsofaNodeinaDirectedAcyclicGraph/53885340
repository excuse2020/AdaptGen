class Solution {
	void dfs(List<List<Integer>> res, boolean[] visited, int parent, int curr, List<List<Integer>> graph) {
		visited[curr] = true;
		for (int des: graph.get(curr)) {	
			if (!visited[des]) {
				res.get(des).add(parent);
				dfs(res,visited,parent,des,graph);
			}
		}
	}
	List<List<Integer>> getAncestors(int n, int[][] edges) {
		List<List<Integer>> graph = new ArrayList();
		for (int i = 0; i < n; i++) {
			graph.add(new ArrayList());
		}
		for (int[] edge: edges) {	
			graph.get(edge[0]).add(edge[1]);
		}
		List<List<Integer>> res = new ArrayList();
		for (int i = 0; i < n; i++) {
			res.add(new ArrayList());
		}
		for (int i = 0; i < n; i++) {
			dfs(res,new boolean[n],i,i,graph);
		}
		for (int i = 0; i < n; i++) {
			Collections.sort(res.get(i));
		}
		return res;
	}
}