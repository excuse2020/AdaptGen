class Solution {
	boolean sol(int[] l, int i, int j, int a, int b, boolean flag, int[][] dp, boolean[][] booldp) {
		if (i > j) {
			if (a > b) {
				return true;
			}
			return false;
		}
		if (dp[i][j] != -1) {
			dp[i][j] = 0;
			return booldp[i][j];
		}
		dp[i][j] = 0;
		if (flag) {
			return booldp[i][j] = sol(l,i + 1,j,l[i] + a,b,false,dp,booldp) || sol(l,i,j - 1,a + l[j],b,false,dp,booldp);
		}
		return booldp[i][j] = sol(l,i + 1,j,a,l[i] + b,true,dp,booldp) || sol(l,i,j - 1,a,b + l[j],true,dp,booldp);
	}
	boolean stoneGame(int[] piles) {
		int[][] dp = new int[piles.length + 1][piles.length + 1];
		boolean[][] booldp = new boolean[piles.length + 1][piles.length + 1];
		for (int i = 0; i < dp.length; i++) {
			for (int j = 0; j < dp[0].length; j++) {
				dp[i][j] = -1;
			}
		}
		return sol(piles,0,piles.length - 1,0,0,true,dp,booldp);
	}
}