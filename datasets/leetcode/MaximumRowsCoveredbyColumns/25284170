class Solution {
	ArrayList<ArrayList<Integer>> func(int n, int cols) {
		int x = new int[n + 1];
		ArrayList<ArrayList<Integer>> res = new ArrayList<>();
		helper(new ArrayList<Integer>(),x,cols,res,0);
		return res;
	}
	void helper(ArrayList<Integer> al, int x, int k, ArrayList<ArrayList<Integer>> res, int start) {
		if (k == al.size()) {
			ArrayList<Integer> al2 = new ArrayList<>(al);
			res.add(al2);
			return;
		}
		for (int i = start; i < x.length; i++) {
			if (x[i] != 1) {
				x[i] = 1;
				al.add(i);
				helper(al,x,k,res,i + 1);
				x[i] = 0;
				al.remove(al.size() - 1);
			}
		}
	}
	int maximumRows(int[][] mat, int cols) {
		ArrayList<ArrayList<Integer>> x = func(mat[0].length - 1,cols);
		int ans = 0;
		for (ArrayList<Integer> p: x) {	
			int curr = 0;
			for (int i = 0; i < mat.length; i++) {
				boolean flag = true;
				for (int j = 0; j < mat[0].length; j++) {
					if (p.contains(j) == false && mat[i][j] == 1) {
						flag = false;
						break;
					}
				}
				if (flag == true) {
					curr++;
				}
			}
			ans = Math.max(ans,curr);
		}
		return ans;
	}
}