class Solution {
	List<TreeNode> allPossibleFBT(int n) {
		if (n % 2 == 0) {
			return new ArrayList<TreeNode>();
		}
		return dfs(n);
	}
	List<TreeNode> dfs(int n) {
		if (n == 1) {
			return new ArrayList<TreeNode>(Arrays.asList(new TreeNode(0)));
		}
		List<TreeNode> ans = new ArrayList<TreeNode>();
		for (int i = 1; i < n; i += 2) {
			List<TreeNode> leftList = dfs(i);
			List<TreeNode> rightList = dfs(n - i);
			for (TreeNode leftNode: leftList) {	
				for (TreeNode rightNode: rightList) {	
					TreeNode root = new TreeNode();
					root.left = leftNode;
					root.right = rightNode;
					ans.add(root);
				}
			}
		}
		return ans;
	}
}