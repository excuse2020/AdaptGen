class Solution {
	List<List<Integer>> combinationSum(int[] candidates, int target) {
		return combinationSumHelper(candidates,0,target,target,new ArrayList<>());
	}
	List<List<Integer>> combinationSumHelper(int[] candidates, int index, int target, int rem, List<Integer> l) {
		List<List<Integer>> list = new ArrayList<>();
		if (rem == 0) {
			list.add(new ArrayList<>(l));
			return list;
		}
		if (index >= candidates.length) {
			return list;
		}
		if (candidates[index] <= rem) {
			l.add(candidates[index]);
			List<List<Integer>> l1 = combinationSumHelper(candidates,index,target,rem - candidates[index],l);
			list.addAll(l1);
			l.remove(l.size() - 1);
		}
		List<List<Integer>> l2 = combinationSumHelper(candidates,index + 1,target,rem,l);
		list.addAll(l2);
		return list;
	}
}