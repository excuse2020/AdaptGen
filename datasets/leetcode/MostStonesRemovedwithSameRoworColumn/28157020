class Solution {
	HashSet<Pair<Integer, Integer>> visited = new HashSet<>();
	void dfs(int[][] stones, int i, int j) {
		visited.add(getPair(i,j));
		for (int k = 0; k < stones.length; k++) {
			if (!visited.contains(getPair(stones[k][0],stones[k][1]))) {
				if (i == stones[k][0] || j == stones[k][1]) {
					dfs(stones,stones[k][0],stones[k][1]);
				}
			}
		}
	}
	Pair<Integer, Integer> getPair(int i, int j) {
		return new Pair<Integer, Integer>(i, j);
	}
	int removeStones(int[][] stones) {
		int ans = stones.length;
		for (int i = 0; i < stones.length; i++) {
			if (!visited.contains(getPair(stones[i][0],stones[i][1]))) {
				dfs(stones,stones[i][0],stones[i][1]);
				ans--;
			}
		}
		return ans;
	}
}