class Solution {
	int[] avoidFlood(int[] rains) {
		Map<Integer, Integer> lake = new HashMap<>();
		List<Integer> dryDays = new ArrayList<>();
		int[] res = new int[rains.length];
		for (int i = 0; i < rains.length; i++) {
			if (rains[i] == 0) {
				dryDays.add(i);
			} 
			else if (lake.containsKey(rains[i])) {
				int low = lake.get(rains[i]);
				int high = i;
				int index = search(dryDays,low,high);
				if (index != -1) {
					res[dryDays.get(index)] = rains[i];
					lake.remove(rains[i]);
					dryDays.remove(index);
				} 
				else {
					return new int[0];
				}
			}
			lake.put(rains[i],i);
			res[i] = -1;
		}
		for (int i = 0; i < dryDays.size(); i++) {
			res[dryDays.get(i)] = 1;
		}
		return res;
	}
	int search(List<Integer> dryDays, int low, int high) {
		for (int i = 0; i < dryDays.size(); i++) {
			if (dryDays.get(i) > low && dryDays.get(i) < high) {
				return i;
			}
		}
		return -1;
	}
}