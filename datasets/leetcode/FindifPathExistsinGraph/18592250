class Solution {
	boolean validPath(int n, int[][] edges, int source, int destination) {
		if (source == destination) {
			return true;
		}
		Map<Integer, List<Integer>> map = new HashMap<>();
		for (int i = 0; i < edges.length; i++) {
			if (map.containsKey(edges[i][0])) {
				map.get(edges[i][0]).add(edges[i][1]);
			} 
			else {
				List<Integer> list = new ArrayList<>();
				list.add(edges[i][1]);
				map.put(edges[i][0],list);
			}
			if (map.containsKey(edges[i][1])) {
				map.get(edges[i][1]).add(edges[i][0]);
			} 
			else {
				List<Integer> list = new ArrayList<>();
				list.add(edges[i][0]);
				map.put(edges[i][1],list);
			}
		}
		HashSet<Integer> seenSet = new HashSet<Integer>();
		Queue<Integer> queue = new LinkedList<>();
		if (map.containsKey(source)) {
			queue.add(source);
			while (!queue.isEmpty()) {
				Integer element = queue.poll();
				seenSet.add(element);
				if (element == destination) {
					return true;
				}
				if (map.containsKey(element)) {
					for (Integer val: map.get(element)) {	
						if (!seenSet.contains(val)) {
							queue.add(val);
						}
					}
				}
			}
		} 
		else {
			return false;
		}
		return false;
	}
}