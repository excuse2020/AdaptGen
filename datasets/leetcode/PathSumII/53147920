class Solution {
	List<List<Integer>> pathSum(TreeNode root, int targetSum) {
		List<List<Integer>> listHost = new ArrayList<>();
		pathSumHelper(root,targetSum,new ArrayList<>(),listHost);
		return listHost;
	}
	void pathSumHelper(TreeNode root, int targetSum, List<Integer> currentList, List<List<Integer>> listHost) {
		if (root == null) {
			return;
		}
		currentList.add(root.val);
		if (root.val == targetSum && root.left == null && root.right == null) {
			listHost.add(new ArrayList<>(currentList));
		} 
		else {
			pathSumHelper(root.left,targetSum - root.val,currentList,listHost);
			pathSumHelper(root.right,targetSum - root.val,currentList,listHost);
		}
		currentList.remove(currentList.size() - 1);
	}
}