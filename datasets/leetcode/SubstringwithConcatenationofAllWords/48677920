class Solution {
	List<Integer> findSubstring(String s, String[] words) {
		List<Integer> result = new ArrayList<>();
		if (s == null || s.length() == 0 || words == null || words.length == 0) {
			return result;
		}
		int wordLength = words[0].length();
		int totalWords = words.length;
		int totalLength = wordLength * totalWords;
		Map<String, Integer> wordCount = new HashMap<>();
		for (String word: words) {	
			wordCount.put(word,wordCount.getOrDefault(word,0) + 1);
		}
		for (int i = 0; i <= s.length() - totalLength; i++) {
			Map<String, Integer> currentCount = new HashMap<>(wordCount);
			int j = i;
			while (j < i + totalLength) {
				String currentWord = s.substring(j,j + wordLength);
				if (currentCount.containsKey(currentWord)) {
					int count = currentCount.get(currentWord);
					if (count == 0) {
						break;
					}
					currentCount.put(currentWord,count - 1);
					j += wordLength;
				} 
				else {
					break;
				}
			}
			if (j == i + totalLength) {
				result.add(i);
			}
		}
		return result;
	}
}