class Solution {
	int ans = -1;
	void dfs(int node, ArrayList<Integer>[] graph, boolean[] visited, Map<Integer, Integer> map, int d) {
		visited[node] = true;
		map.put(node,d);
		for (int child: graph[node]) {	
			if (!visited[child]) {
				dfs(child,graph,visited,map,d + 1);
			} 
			else if (map.containsKey(child)) {
				ans = Math.max(ans,d + 1 - map.get(child));
			}
		}
	}
	int longestCycle(int[] edges) {
		int n = edges.length;
		ArrayList<Integer>[] graph = new ArrayList[n];
		for (int i = 0; i < n; i++) {
			graph[i] = new ArrayList<>();
		}
		for (int i = 0; i < n; i++) {
			if (edges[i] != -1) {
				graph[i].add(edges[i]);
			}
		}
		boolean[] visited = new boolean[n];
		for (int j = 0; j < n; j++) {
			Map<Integer, Integer> map = new HashMap<>();
			dfs(j,graph,visited,map,0);
		}
		return ans;
	}
}