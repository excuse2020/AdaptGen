class Solution {
	int closetTarget(String[] words, String target, int startIndex) {
		int left = startIndex;
		int right = startIndex;
		int leftMost = 0;
		int rightMost = 0;
		while (left >= 0 && !words[left].equals(target)) {
			left--;
			leftMost = left;
		}
		while (right < words.length && !words[right].equals(target)) {
			right++;
			rightMost = right;
		}
		int l = left;
		int r = right;
		while (l >= 0) {
			if (words[l].equals(target)) {
				leftMost = l;
			}
			l--;
		}
		while (r < words.length) {
			if (words[r].equals(target)) {
				rightMost = r;
			}
			r++;
		}
		int res1 = Integer.MAX_VALUE;
		boolean flag = false;
		if (left >= 0 && words[left].equals(target)) {
			flag = true;
			res1 = Math.min(startIndex - left,words.length - startIndex + leftMost);
		}
		int res2 = Integer.MAX_VALUE;
		if (right < words.length && words[right].equals(target)) {
			flag = true;
			res2 = Math.min(right - startIndex,startIndex + words.length - rightMost);
		}
		if (flag) {
			return Math.min(res1,res2);
		} 
		else {
			return -1;
		}
	}
}