class Solution {
	boolean stoneGame(int[] piles) {
		if (piles.length == 2) {
			return true;
		}
		int total = 0;
		for (int i = 0; i < piles.length; i++) {
			total = total + piles[i];
		}
		int n = piles.length;
		int[][] dp = new int[n][n];
		for (int j = 0; j < n; j++) {
			for (int i = 0; i <= j; i++) {
				if (i == j) {
					dp[i][j] = piles[i];
				} 
				else if (j - i == 1) {
					dp[i][j] = Math.max(piles[i],piles[j]);
				} 
				else {
					int pickLeft = 0;
					int pickRight = 0;
					int left1 = piles[i] + dp[i + 2][j];
					int left2 = piles[i] + dp[i][j - 1];
					pickLeft = Math.max(left1,left2);
					int right1 = piles[j] + dp[i + 1][j - 1];
					int right2 = piles[j] + dp[i][j - 2];
					pickRight = Math.max(right1,right2);
					dp[i][j] = Math.max(pickLeft,pickRight);
				}
			}
		}
		return total - dp[0][n - 1] > dp[0][n - 1] ? false : true;
	}
}