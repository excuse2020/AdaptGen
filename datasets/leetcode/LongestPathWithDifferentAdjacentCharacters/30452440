class Solution {
	int ans;
	List<List<Integer>> graph;
	int longestPath(int[] parent, String s) {
		int n = parent.length;
		if (n == 1) {
			return 1;
		}
		graph = new ArrayList<>();
		for (int i = 0; i < n; i++) {
			graph.add(new ArrayList<>());
		}
		for (int i = 1; i < n; i++) {
			graph.get(parent[i]).add(i);
		}
		ans = 0;
		solve(s,0);
		return ans;
	}
	int solve(String s, int currPos) {
		if (graph.get(currPos).size() == 0) {
			return 1;
		}
		int max1 = 0, max2 = 0;
		for (int i: graph.get(currPos)) {	
			int pathSum = solve(s,i);
			if (s.charAt(currPos) != s.charAt(i)) {
				if (pathSum > max1) {
					max2 = max1;
					max1 = pathSum;
				} 
				else if (pathSum > max2) {
					max2 = pathSum;
				}
			}
		}
		ans = Math.max(ans,max1 + max2);
		return 1 + max1;
	}
}