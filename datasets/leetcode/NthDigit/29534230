class Solution {
	int findNthDigit(int n) {
		if (n < 10) {
			return n;
		}
		int c = 0;
		while (true) {
			long cur = (long) (9 * Math.pow(10,c));
			if (n >= cur) {
				n -= cur;
			} 
			else {
				break;
			}
			c++;
		}
		c++;
		int nthDigit = n % c;
		int nthNumber = nthDigit == 0 ? n / c : n / c + 1;
		if (nthDigit == 0) {
			nthDigit = c;
		}
		int t = (int) (Math.pow(10,c - 1) + nthNumber - 1);
		List<Integer> digitsOfT = new ArrayList<>();
		while (t > 0) {
			digitsOfT.add(t % 10);
			t /= 10;
		}
		Collections.reverse(digitsOfT);
		return digitsOfT.get(nthDigit - 1);
	}
}