class Solution {
	int getLen(String source, int leftIndex, int rightIndex) {
		int length = 0;
		while (leftIndex >= 0 && rightIndex < source.length()) {
			if (source.charAt(leftIndex) == source.charAt(rightIndex)) {
				length = rightIndex - leftIndex + 1;
				leftIndex--;
				rightIndex++;
			} 
			else {
				break;
			}
		}
		return length;
	}
	int getLongestPalindrome(String A) {
		int length = 1;
		int maxLength = 0;
		if (A.length() <= 2) {
			maxLength = A.length();
			return maxLength;
		}
		char[] chars = A.toCharArray();
		for (int i = 1; i < chars.length; i++) {
			int stringLen = getLen(A,i,i);
			int stringLen1 = getLen(A,i,i + 1);
			maxLength = Math.max(stringLen,maxLength);
			maxLength = Math.max(stringLen1,maxLength);
		}
		return maxLength;
	}
}