class Solution {
	int MOD = (int) 1e9 + 7;
	int numDistinct(String s, String t) {
		int n = s.length();
		int m = t.length();
		int[][] dp = new int[n][m];
		for (int[] i: dp) {	
			Arrays.fill(i,-1);
		}
		return solve(n - 1,m - 1,s,t,dp);
	}
	int solve(int n, int m, String s, String t, int[][] dp) {
		if (m < 0) {
			return 1;
		}
		if (n < 0) {
			return 0;
		}
		if (dp[n][m] != -1) {
			return dp[n][m];
		}
		if (s.charAt(n) == t.charAt(m)) {
			int leave = solve(n - 1,m - 1,s,t,dp);
			int stay = solve(n - 1,m,s,t,dp);
			return dp[n][m] = (leave + stay) % MOD;
		}
		return dp[n][m] = solve(n - 1,m,s,t,dp) % MOD;
	}
}