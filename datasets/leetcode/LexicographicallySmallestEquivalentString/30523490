class Solution {
	String smallestEquivalentString(String s1, String s2, String baseStr) {
		Map<Character, Set<Character>> connectionMap = new HashMap<>();
		for (int i = 0; i < s1.length(); i++) {
			char ch1 = s1.charAt(i);
			char ch2 = s2.charAt(i);
			if (connectionMap.containsKey(ch1) && connectionMap.containsKey(ch2)) {
				Set<Character> temp = new TreeSet<>();
				temp.addAll(connectionMap.get(ch1));
				temp.addAll(connectionMap.get(ch2));
				temp.add(ch1);
				temp.add(ch2);
				for (Character ch: new ArrayList<>(temp)) {	
					connectionMap.put(ch,temp);
				}
			} 
			else if (connectionMap.containsKey(ch1)) {
				connectionMap.put(ch2,connectionMap.get(ch1));
				connectionMap.get(ch1).add(ch2);
			} 
			else if (connectionMap.containsKey(ch2)) {
				connectionMap.put(ch1,connectionMap.get(ch2));
				connectionMap.get(ch2).add(ch1);
			} 
			else {
				connectionMap.putIfAbsent(ch1,new TreeSet<>());
				connectionMap.putIfAbsent(ch2,connectionMap.get(ch1));
				connectionMap.get(ch1).add(ch2);
				connectionMap.get(ch1).add(ch1);
			}
		}
		StringBuilder sb = new StringBuilder();
		for (char ch: baseStr.toCharArray()) {	
			if (connectionMap.containsKey(ch)) {
				sb.append(connectionMap.get(ch).iterator().next());
			} 
			else {
				sb.append(ch);
			}
		}
		return sb.toString();
	}
}