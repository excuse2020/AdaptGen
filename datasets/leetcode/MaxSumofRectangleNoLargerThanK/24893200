class Solution {
	int find(int[] sum, int k) {
		int result = Integer.MIN_VALUE;
		TreeSet<Integer> set = new TreeSet<>();
		set.add(0);
		int prefixSum = 0;
		for (int i = 0; i < sum.length; i++) {
			prefixSum += sum[i];
			Integer target = set.ceiling(prefixSum - k);
			if (target != null) {
				result = Math.max(result,prefixSum - target);
			}
			set.add(prefixSum);
		}
		return result;
	}
	int maxSumSubmatrix(int[][] matrix, int k) {
		int n = matrix.length;
		int m = matrix[0].length;
		int ans = Integer.MIN_VALUE;
		for (int i = 0; i < n; i++) {
			int[] colsum = new int[m];
			for (int j = i; j < n; j++) {
				for (int c = 0; c < m; c++) {
					colsum[c] += matrix[j][c];
				}
				ans = Math.max(ans,find(colsum,k));
			}
		}
		return ans;
	}
}