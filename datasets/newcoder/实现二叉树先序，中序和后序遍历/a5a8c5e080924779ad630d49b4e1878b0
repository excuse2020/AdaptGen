class Solution {
	ArrayList<Integer> inOrder;
	ArrayList<Integer> postOrder;
	ArrayList<Integer> preOrder;
	int[][] threeOrders(TreeNode root) {
		preOrder = new ArrayList<>();
		postOrder = new ArrayList<>();
		inOrder = new ArrayList<>();
		travel(root);
		int[][] result = new int[3];
		result[0] = new int[preOrder.size()];
		result[1] = new int[preOrder.size()];
		result[2] = new int[preOrder.size()];
		for (int i = 0; i < preOrder.size(); i++) {
			result[0][i] = preOrder.get(i);
			result[1][i] = inOrder.get(i);
			result[2][i] = postOrder.get(i);
		}
		return result;
	}
	void travel(TreeNode root) {
		if (root == null) {
			return;
		}
		preOrder.add(root.val);
		travel(root.left);
		inOrder.add(root.val);
		travel(root.right);
		postOrder.add(root.val);
	}
}