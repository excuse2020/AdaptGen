class Solution {
	boolean dfs(List<List<Integer>> adj, int s, int parent, int d, boolean[] visited) {
		if (s == d) {
			return true;
		}
		visited[s] = true;
		boolean flag = false;
		for (int i: adj.get(s)) {	
			if (parent != i && visited[i] == false) {
				flag = flag | dfs(adj,i,s,d,visited);
			}
		}
		return flag;
	}
	boolean validPath(int n, int[][] edges, int source, int destination) {
		List<List<Integer>> adj = new ArrayList<>();
		for (int i = 0; i < n; i++) {
			adj.add(new ArrayList<>());
		}
		for (int i = 0; i < edges.length; i++) {
			adj.get(edges[i][0]).add(edges[i][1]);
			adj.get(edges[i][1]).add(edges[i][0]);
		}
		boolean[] visited = new boolean[n];
		visited[source] = true;
		return dfs(adj,source,-1,destination,visited);
	}
}