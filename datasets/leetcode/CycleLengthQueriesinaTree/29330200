class Solution {
	int[] cycleLengthQueries(int n, int[][] queries) {
		int l = queries.length;
		int[] ans = new int[l];
		int i = 0;
		for (int[] a: queries) {	
			int first = a[0], second = a[1];
			int level1 = findLevel(first);
			int level2 = findLevel(second);
			int root = findCommonRoot(first,second);
			int rootLevel = findLevel2(root);
			ans[i] = level1 + level2 - 2 * rootLevel + 1;
			i++;
		}
		return ans;
	}
	int findCommonRoot(int first, int second) {
		HashSet<Integer> rootsOfFirst = new HashSet<>();
		while (first != 0) {
			rootsOfFirst.add(first);
			first /= 2;
		}
		while (second != 0) {
			if (rootsOfFirst.contains(second)) {
				return second;
			}
			second /= 2;
		}
		return -1;
	}
	int findLevel(int a) {
		int count = 0, two = 1;
		while (two <= a) {
			two *= 2;
			count++;
		}
		return count;
	}
	int findLevel2(int a) {
		int count = 0, two = 1;
		while (two <= a) {
			two *= 2;
			count++;
		}
		return count;
	}
}