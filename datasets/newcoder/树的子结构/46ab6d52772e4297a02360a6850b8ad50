class Solution {
	TreeNode root3 = new TreeNode(0);
	boolean HasSubtree(TreeNode root1, TreeNode root2) {
		if (root2 == null || root1 == null) {
			return false;
		}
		root3 = root2;
		return is(root1,root2,root1);
	}
	boolean is(TreeNode root1, TreeNode root2, TreeNode root4) {
		if (root2 == null) {
			return true;
		}
		if (root1 == null) {
			return false;
		}
		if (root1.val == root2.val && root1.left == null && root1.right == null && root2.left == null && root2.right == null) {
			return true;
		}
		if (root1.val == root2.val) {
			return is(root1.left,root2.left,root4) && is(root1.right,root2.right,root4);
		} 
		else {
			return is(root4.left,root3,root4.left) || is(root4.right,root3,root4.right);
		}
	}
}