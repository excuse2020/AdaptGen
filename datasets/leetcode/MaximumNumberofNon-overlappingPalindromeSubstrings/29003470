class Solution {
	boolean calc;
	int dp;
	boolean palin;
	int dp_help(int idx, int k, String s) {
		if (idx == s.length()) {
			return 0;
		}
		if (dp[idx] != -1) {
			return dp[idx];
		}
		dp[idx] = dp_help(idx + 1,k,s);
		for (int j = idx + k - 1; j < s.length(); j++) {
			if (palin_check(s,idx,j)) {
				dp[idx] = Math.max(dp[idx],1 + dp_help(j + 1,k,s));
			}
		}
		return dp[idx];
	}
	int maxPalindromes(String s, int k) {
		int n = s.length();
		dp = new int[n];
		Arrays.fill(dp,-1);
		palin = new boolean[n][n];
		calc = new boolean[n][n];
		for (int i = 0; i < palin.length; i++) {
			for (int j = 0; j < palin.length; j++) {
				palin[i][j] = false;
			}
		}
		for (int i = 0; i < palin.length; i++) {
			for (int j = 0; j < palin.length; j++) {
				calc[i][j] = false;
			}
		}
		return dp_help(0,k,s);
	}
	boolean palin_check(String s, int left, int right) {
		if (left >= right) {
			return true;
		}
		if (calc[left][right] == true) {
			return palin[left][right];
		}
		calc[left][right] = true;
		if (s.charAt(left) == s.charAt(right)) {
			palin[left][right] = palin_check(s,left + 1,right - 1);
		} 
		else {
			palin[left][right] = false;
		}
		return palin[left][right];
	}
}