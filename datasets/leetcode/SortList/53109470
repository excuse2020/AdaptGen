class Solution {
	ListNode merge(ListNode l1, ListNode l2) {
		ListNode head = new ListNode(-1);
		ListNode dummy = head;
		while (l1 != null && l2 != null) {
			if (l1.val < l2.val) {
				dummy.next = new ListNode(l1.val);
				dummy = dummy.next;
				l1 = l1.next;
			} 
			else {
				dummy.next = new ListNode(l2.val);
				dummy = dummy.next;
				l2 = l2.next;
			}
		}
		while (l1 != null) {
			dummy.next = new ListNode(l1.val);
			dummy = dummy.next;
			l1 = l1.next;
		}
		while (l2 != null) {
			dummy.next = new ListNode(l2.val);
			dummy = dummy.next;
			l2 = l2.next;
		}
		return head.next;
	}
	ListNode middleNode(ListNode head) {
		ListNode slow = head;
		ListNode fast = head.next;
		while (fast != null && fast.next != null) {
			slow = slow.next;
			fast = fast.next.next;
		}
		return slow;
	}
	ListNode sortList(ListNode head) {
		if (head == null || head.next == null) {
			return head;
		}
		ListNode middle = middleNode(head);
		ListNode sh = middle.next;
		middle.next = null;
		ListNode l1 = sortList(head);
		ListNode l2 = sortList(sh);
		return merge(l1,l2);
	}
}