class Solution {
	boolean isValid(int adjRow, int adjCol, int n, int m) {
		return (adjRow >= 0 && adjRow < n && adjCol >= 0 && adjCol < m);
	}
	int shortestPathBinaryMatrix(int[][] grid) {
		int n = grid.length;
		int m = grid[0].length;
		int srcRow = 0, srcCol = 0, destRow = n - 1, destCol = m - 1;
		if (srcRow == destRow && srcCol == destCol && grid[srcRow][srcCol] == 0) {
			return 1;
		}
		if (grid[srcRow][srcCol] == 1 || grid[destRow][destCol] == 1) {
			return -1;
		}
		Queue<int[]> que = new LinkedList<>();
		int[][] distances = new int[n][m];
		for (int[] row: distances) {	
			Arrays.fill(row,Integer.MAX_VALUE);
		}
		distances[srcRow][srcCol] = 0;
		que.offer(new int{srcRow, srcCol, 1});
		while (!que.isEmpty()) {
			int[] entry = que.poll();
			int row = entry[0];
			int col = entry[1];
			int distance = entry[2];
			for (int r = -1; r <= 1; r++) {
				for (int c = -1; c <= 1; c++) {
					int adjRow = row + r;
					int adjCol = col + c;
					int adjDistance = distance + 1;
					if (adjRow == destRow && adjCol == destCol) {
						return adjDistance;
					}
					if (isValid(adjRow,adjCol,n,m) && grid[adjRow][adjCol] == 0 && adjDistance < distances[adjRow][adjCol]) {
						distances[adjRow][adjCol] = adjDistance;
						que.offer(new int{adjRow, adjCol, adjDistance});
					}
				}
			}
		}
		return -1;
	}
}