class Solution {
	double maxProbability(int n, int[][] edges, double[] succProb, int start_node, int end_node) {
		List<double[]>[] adjlist = new ArrayList[n];
		for (int i = 0; i < n; i++) {
			adjlist[i] = new ArrayList<>();
		}
		for (int i = 0; i < edges.length; i++) {
			int u = edges[i][0];
			int v = edges[i][1];
			double p = succProb[i];
			adjlist[edges[i][1]].add(new double{edges[i][0], succProb[i]});
			adjlist[edges[i][0]].add(new double{edges[i][1], succProb[i]});
		}
		PriorityQueue<double[]> pq = new PriorityQueue<>((a, b) -> {Double.compare(b[1],a[1])});
		pq.add(new double{start_node, 1});
		boolean[] vis = new boolean[n];
		while (pq.size() != 0) {
			double[] temp = pq.poll();
			if (temp[0] == end_node) {
				return temp[1];
			}
			if (vis[(int)temp[0]]) {
				continue;
			}
			vis[(int)temp[0]] = true;
			for (double[] l: adjlist[(int)temp[0]]) {	
				pq.add(new double{l[0], l[1] * temp[1]});
			}
		}
		return 0.0;
	}
}