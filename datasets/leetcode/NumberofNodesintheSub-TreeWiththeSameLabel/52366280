class Solution {
	void DFS(List<List<Integer>> adj, int u, int parent, int[] result, String labels, int[] count) {
		char myLabel = labels.charAt(u);
		int countBeforeExploringMySubtree;
	}
	int[] countSubTrees(int n, int[][] edges, String labels) {
		List<List<Integer>> adj = new ArrayList<>();
		for (int i = 0; i < n; i++) {
			adj.add(new ArrayList<>());
		}
		for (int[] edge: edges) {	
			int u = edge[0];
			int v = edge[1];
			adj.get(u).add(v);
			adj.get(v).add(u);
		}
		int[] result = new int[n];
		int[] count = new int[26];
		DFS(adj,0,-1,result,labels,count);
		return result;
	}
}