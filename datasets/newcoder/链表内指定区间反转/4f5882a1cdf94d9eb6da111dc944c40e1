class Solution {
	List rev(List list) {
		Collections.reverse(list);
		return list;
	}
	ListNode reverseBetween(ListNode head, int m, int n) {
		List<Integer> list = new ArrayList<>();
		ListNode head1 = head;
		while (head1 != null) {
			list.add(head1.val);
			head1 = head1.next;
		}
		List<Integer> tt = new ArrayList<>();
		tt.addAll(list.subList(0,m - 1));
		tt.addAll(rev(list.subList(m - 1,n)));
		tt.addAll(list.subList(n,list.size()));
		Iterator iter = list.iterator();
		ListNode first = new ListNode(0);
		ListNode head2 = first;
		while (iter.hasNext()) {
			ListNode temp = new ListNode((int) iter.next());
			head2.next = temp;
			head2 = temp;
		}
		return first.next;
	}
}