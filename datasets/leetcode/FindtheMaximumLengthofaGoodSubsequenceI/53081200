class Solution {
	int[][] dp;
	int maximumLength(int[] nums, int k) {
		dp = new int[nums.length][k + 1];
		int ans = 0;
		for (int x = 0; x < nums.length; x++) {
			ans = Math.max(ans,recurr(nums,x,k));
		}
		return ans;
	}
	int recurr(int[] nums, int i, int k) {
		if (i >= nums.length || k < 0) {
			return 0;
		} 
		else {
			if (dp[i][k] != 0) {
				return dp[i][k];
			}
			int max = 0;
			for (int x = i + 1; x < nums.length; x++) {
				if (nums[x] == nums[i]) {
					max = Math.max(max,recurr(nums,x,k));
				} 
				else {
					max = Math.max(max,recurr(nums,x,k - 1));
				}
			}
			dp[i][k] = 1 + max;
			return 1 + max;
		}
	}
}