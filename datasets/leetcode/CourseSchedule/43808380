class Solution {
	boolean canFinish(int numCourses, int[][] prerequisites) {
		Map<Integer, List<Integer>> preMap = new HashMap();
		for (int i = 0; i < numCourses; i++) {
			preMap.put(i,new ArrayList());
		}
		for (int[] edge: prerequisites) {	
			preMap.get(edge[0]).add(edge[1]);
		}
		for (int i = 0; i < numCourses - 1; i++) {
			if (!dfs(i,preMap,new HashSet())) {
				return false;
			}
		}
		return true;
	}
	boolean dfs(int i, Map<Integer, List<Integer>> preMap, Set<Integer> visitSet) {
		if (visitSet.contains(i)) {
			return false;
		}
		List<Integer> pres = preMap.get(i);
		if (pres.size() == 0) {
			return true;
		}
		visitSet.add(i);
		for (int pre: pres) {	
			if (!dfs(pre,preMap,visitSet)) {
				return false;
			}
		}
		visitSet.remove(i);
		preMap.put(i,new ArrayList());
		return true;
	}
}