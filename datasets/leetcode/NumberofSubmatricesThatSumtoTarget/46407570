class Solution {
	int numSubmatrixSumTarget(int[][] matrix, int target) {
		Map<Integer, Integer> map = new HashMap<>();
		int m = matrix.length, n = matrix[0].length;
		int[][] sum = new int[m][n];
		sum[0][0] = matrix[0][0];
		for (int i = 1; i < n; i++) {
			sum[0][i] += matrix[0][i] + sum[0][i - 1];
		}
		for (int j = 1; j < m; j++) {
			sum[j][0] = matrix[j][0] + sum[j - 1][0];
		}
		for (int i = 1; i < m; i++) {
			for (int j = 1; j < n; j++) {
				sum[i][j] += matrix[i][j] + sum[i - 1][j] - sum[i - 1][j - 1];
			}
		}
		int res = 0, count = 0;
		for (int i = 0; i < m; i++) {
			for (int j = i; j < m; j++) {
				for (int k = 0; k < n; k++) {
					for (int l = k; l < n; l++) {
						res = sum[j][l];
						if (i > 0) {
							res -= sum[i - 1][l];
						}
						if (k > 0) {
							res -= sum[j][k - 1];
						}
						if (i > 0 && k > 0) {
							res += sum[i - 1][k - 1];
						}
						if (res == target) {
							count++;
						}
					}
				}
			}
		}
		return count;
	}
}