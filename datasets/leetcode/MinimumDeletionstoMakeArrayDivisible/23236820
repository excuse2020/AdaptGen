class Solution {
	int minOperations(int[] nums, int[] numsDivide) {
		PriorityQueue<Integer> pq = new PriorityQueue<>();
		for (int val: nums) {	
			pq.offer(val);
		}
		int n = numsDivide.length;
		int l = nums.length;
		int ld = -1;
		int count = 0;
		while (pq.size() > 0) {
			int rem = pq.poll();
			if (ld == rem) {
				count++;
				continue;
			}
			int len = 0;
			for (int val: numsDivide) {	
				if (val % rem != 0) {
					count++;
					ld = rem;
					break;
				} 
				else {
					len++;
				}
			}
			if (len == n) {
				break;
			}
		}
		return count == l ? -1 : count;
	}
}