class Solution {
	int findLength(int i, int[] edges, boolean[] visited, int n) {
		int len = 0, temp = i;
		while (len++ < n) {
			if (temp == -1 || !visited[temp]) {
				return -1;
			}
			if (edges[temp] == i) {
				return len;
			}
			temp = edges[temp];
		}
		return -1;
	}
	int longestCycle(int[] edges) {
		int n = edges.length;
		int maxCycleLength = -1;
		boolean[] visited = new boolean[n];
		for (int i = 0; i < n; i++) {
			if (!visited[i]) {
				visited[i] = true;
				maxCycleLength = Math.max(maxCycleLength,findLength(i,edges,visited,n));
			}
		}
		return maxCycleLength;
	}
}