class Solution {
	int uniquePath(int[][] obsGrid, int m, int n, int dp) {
		if ((m < 0 || n < 0) || (obsGrid[m][n] == 1)) {
			return 0;
		}
		if (m == 0 && n == 0) {
			return 1;
		}
		if (dp[m][n] != -1) {
			return dp[m][n];
		}
		return dp[m][n] = uniquePath(obsGrid,m,n - 1,dp) + uniquePath(obsGrid,m - 1,n,dp);
	}
	int uniquePathsWithObstacles(int[][] obstacleGrid) {
		int dp = new int[obstacleGrid.length][obstacleGrid[0].length];
		for (int[] row: dp) {	
			Arrays.fill(row,-1);
		}
		return uniquePath(obstacleGrid,obstacleGrid.length - 1,obstacleGrid[0].length - 1,dp);
	}
}