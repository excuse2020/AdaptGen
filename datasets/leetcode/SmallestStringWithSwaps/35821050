class Solution {
	int find(int u, int[] par) {
		if (u == par[u]) {
			return u;
		}
		return par[u] = find(par[u],par);
	}
	String smallestStringWithSwaps(String s, List<List<Integer>> pairs) {
		int n = s.length();
		int[] par = new int[n];
		int[] rank = new int[n];
		HashMap<Integer, PriorityQueue<Character>> map = new HashMap<>();
		StringBuilder res = new StringBuilder("");
		for (int i = 0; i < n; i++) {
			par[i] = i;
			rank[i] = 1;
		}
		for (List<Integer> lst: pairs) {	
			union(lst.get(0),lst.get(1),par,rank);
		}
		for (int i = 0; i < n; i++) {
			int p = find(i,par);
			if (!map.containsKey(p)) {
				map.put(p,new PriorityQueue<>());
			}
			map.get(p).add(s.charAt(i));
		}
		for (int i = 0; i < n; i++) {
			int key = par[i];
			char c = map.get(key).poll();
			res.append(c + "");
		}
		return res.toString();
	}
	void union(int u, int v, int[] par, int[] rank) {
		int pu = find(u,par), pv = find(v,par);
		if (pu == pv) {
			return;
		}
		if (rank[pu] == rank[pv]) {
			par[pv] = pu;
			rank[pu]++;
		} 
		else if (rank[pu] > rank[pv]) {
			par[pv] = pu;
		} 
		else {
			par[pu] = pv;
		}
	}
}