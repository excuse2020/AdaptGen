class Solution {
	int MOD = 1000000007;
	int a = 0, e = 1, i = 2, o = 3, u = 4;
	long[][] dp;
	int countVowelPermutation(int n) {
		dp = new long[6][n + 1];
		for (int i = 0; i < 6; i++) {
			Arrays.fill(dp[i],-1);
		}
		long result = 0;
		result = (result + solve(a,n - 1)) % MOD;
		result = (result + solve(e,n - 1)) % MOD;
		result = (result + solve(i,n - 1)) % MOD;
		result = (result + solve(o,n - 1)) % MOD;
		result = (result + solve(u,n - 1)) % MOD;
		return (int) result;
	}
	long solve(int ch, int n) {
		if (n == 0) {
			return 1;
		}
		if (dp[ch][n] != -1) {
			return dp[ch][n];
		}
		if (ch == a) {
			return dp[ch][n] = (solve(e,n - 1)) % MOD;
		} 
		else if (ch == e) {
			return dp[ch][n] = (solve(a,n - 1) + solve(i,n - 1)) % MOD;
		} 
		else if (ch == i) {
			return dp[ch][n] = (solve(a,n - 1) + solve(e,n - 1)) % MOD;
		} 
		else if (ch == o) {
			return dp[ch][n] = (solve(i,n - 1) + solve(u,n - 1)) % MOD;
		} 
		else {
			return dp[ch][n] = (solve(a,n - 1)) % MOD;
		}
	}
}