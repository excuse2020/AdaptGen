class Solution {
	boolean compare(HashMap<Integer, Integer> hm, HashMap<Integer, Integer> map) {
		if (hm.size() != map.size()) {
			return false;
		}
		for (int key: hm.keySet()) {	
			if (map.containsKey(key) == false || hm.get(key) != map.get(key)) {
				return false;
			}
		}
		return true;
	}
	boolean reorderedPowerOf2(int n) {
		HashMap<Integer, Integer> hm = new HashMap<>();
		while (n > 0) {
			int last = n % 10;
			n /= 10;
			hm.put(last,hm.getOrDefault(last,0) + 1);
		}
		int temp = 1;
		while (temp > 0 && temp != 0) {
			HashMap<Integer, Integer> map = new HashMap<>();
			int temp1 = temp;
			while (temp1 > 0) {
				int last = temp1 % 10;
				temp1 /= 10;
				map.put(last,map.getOrDefault(last,0) + 1);
			}
			if (compare(hm,map)) {
				return true;
			}
			temp = temp << 1;
		}
		return false;
	}
}