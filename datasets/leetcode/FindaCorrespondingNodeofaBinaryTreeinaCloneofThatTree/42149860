class Solution {
	TreeNode dfsWithUnique(TreeNode cloned, TreeNode target) {
		if (cloned == null) {
			return null;
		} 
		else if (cloned.val == target.val) {
			return cloned;
		}
		TreeNode left = dfsWithUnique(cloned.left,target);
		if (left != null) {
			return left;
		}
		TreeNode right = dfsWithUnique(cloned.right,target);
		if (right != null) {
			return right;
		}
		return null;
	}
	TreeNode dfsWithoutUnique(TreeNode original, TreeNode cloned, TreeNode target) {
		if (original == null) {
			return null;
		}
		if (original == target) {
			return cloned;
		}
		TreeNode left = dfsWithoutUnique(original.left,cloned.left,target);
		if (left != null) {
			return left;
		}
		TreeNode right = dfsWithoutUnique(original.right,cloned.right,target);
		if (right != null) {
			return right;
		}
		return null;
	}
	TreeNode getTargetCopy(TreeNode original, TreeNode cloned, TreeNode target) {
		return dfsWithoutUnique(original,cloned,target);
	}
	TreeNode getTargetCopyIterativeWithUnique(TreeNode original, TreeNode cloned, TreeNode target) {
		if (cloned == null) {
			return null;
		}
		Queue<TreeNode> queue = new LinkedList<>();
		queue.offer(cloned);
		while (!queue.isEmpty()) {
			TreeNode curr = queue.poll();
			if (curr.val == target.val) {
				return curr;
			}
			if (curr.left != null) {
				queue.offer(curr.left);
			}
			if (curr.right != null) {
				queue.offer(curr.right);
			}
		}
		return null;
	}
	TreeNode getTargetCopyIterativeWithoutUnique(TreeNode original, TreeNode cloned, TreeNode target) {
		if (original == null) {
			return null;
		}
		Queue<TreeNode> q1 = new LinkedList<>();
		Queue<TreeNode> q2 = new LinkedList<>();
		q1.offer(original);
		q2.offer(cloned);
		while (!q1.isEmpty() && !q2.isEmpty()) {
			TreeNode n1 = q1.poll();
			TreeNode n2 = q2.poll();
			if (n1 != null && n1 == target) {
				return n2;
			}
			if (n1.left != null) {
				q1.offer(n1.left);
			}
			if (n1.right != null) {
				q1.offer(n1.right);
			}
			if (n2.left != null) {
				q2.offer(n2.left);
			}
			if (n2.right != null) {
				q2.offer(n2.right);
			}
		}
		return null;
	}
}