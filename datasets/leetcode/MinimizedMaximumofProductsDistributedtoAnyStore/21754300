class Solution {
	boolean isValid(int[] quantities, int number, int n) {
		int count = 0;
		for (int i = 0; i < quantities.length; i++) {
			int div = quantities[i] / number;
			int rem = quantities[i] % number;
			count += div;
			if (rem != 0) {
				count++;
			}
			if (count > n) {
				return false;
			}
		}
		return true;
	}
	int max(int[] quantities) {
		int max = Integer.MIN_VALUE;
		for (int i = 0; i < quantities.length; i++) {
			if (max < quantities[i]) {
				max = quantities[i];
			}
		}
		return max;
	}
	int minimizedMaximum(int n, int[] quantities) {
		int low = 1;
		int high = max(quantities);
		while (low < high) {
			int mid = low + (high - low) / 2;
			if (isValid(quantities,mid,n)) {
				high = mid;
			} 
			else {
				low = mid + 1;
			}
		}
		return low;
	}
}