class Solution {
	String LCS(String str1, String str2) {
		int m = str1.length();
		int n = str2.length();
		int length = 0;
		int maxlength = 0;
		int end = 0;
		boolean[][] dp = new boolean[m][n];
		for (int i = 0; i < m; i++) {
			for (int j = 0; j < n; j++) {
				dp[i][j] = str1.charAt(i) == str2.charAt(j);
			}
		}
		for (int i = 0; i < m; i++) {
			for (int j = 0; j < n; j++) {
				if (dp[i][j] == true) {
					while (i < m && j < n && dp[i][j]) {
						length++;
						i++;
						j++;
					}
					if (length > maxlength) {
						maxlength = length;
						end = i - 1;
						while (length != 0) {
							length--;
							i--;
							j--;
						}
					} 
					else {
						while (length != 0) {
							length--;
							i--;
							j--;
						}
					}
				}
			}
		}
		StringBuilder res = new StringBuilder();
		for (int i = (end - maxlength + 1); i <= end; i++) {
			res.append(str1.charAt(i));
		}
		return res.toString();
	}
}