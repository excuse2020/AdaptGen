class Solution {
	HashSet<Integer> set;
	int helper(String s, int idx, int tight, int rotated, int[][][] dp) {
		if (idx == s.length()) {
			if (rotated == 1) {
				return 1;
			}
			return 0;
		}
		if (dp[idx][tight][rotated] != -1) {
			return dp[idx][tight][rotated];
		}
		int limit;
	}
	int rotatedDigits(int n) {
		set = new HashSet<>();
		set.add(2);
		set.add(5);
		set.add(6);
		set.add(9);
		String s = Integer.toString(n);
		int m = s.length();
		int[][][] dp = new int[6][2][2];
		for (int[][] d1: dp) {	
			for (int[] d2: d1) {	
				Arrays.fill(d2,-1);
			}
		}
		return helper(s,0,1,0,dp);
	}
}