class Solution {
	void put(Map<Integer, Set<Integer>> map, int key, int val) {
		if (map.containsKey(key)) {
			map.get(key).add(val);
		} 
		else {
			Set<Integer> set = new HashSet<>();
			set.add(val);
			map.put(key,set);
		}
	}
	boolean validPath(int n, int[][] edges, int source, int destination) {
		Map<Integer, Set<Integer>> map = new HashMap<>();
		for (int i = 0; i < edges.length; i++) {
			put(map,edges[i][0],edges[i][1]);
			put(map,edges[i][1],edges[i][0]);
		}
		if (source == destination) {
			return true;
		}
		if (!map.containsKey(source) || !map.containsKey(destination)) {
			return false;
		}
		Set<Integer> seen = new HashSet<>();
		Queue<Integer> queue = new LinkedList<>();
		queue.add(source);
		while (queue.size() != 0) {
			int next = queue.poll();
			if (next == destination) {
				return true;
			}
			seen.add(next);
			for (int node: map.get(next)) {	
				if (!seen.contains(node)) {
					queue.add(node);
				}
			}
		}
		return false;
	}
}