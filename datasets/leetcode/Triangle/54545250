class Solution {
	int helper(List<List<Integer>> triangle, int i, int j, int[][] dp) {
		if (i == triangle.size()) {
			return 0;
		}
		if (dp[i][j] != -1) {
			return dp[i][j];
		}
		int left = helper(triangle,i + 1,j,dp);
		int right = helper(triangle,i + 1,j + 1,dp);
		dp[i][j] = Math.min(left,right) + triangle.get(i).get(j);
		return Math.min(left,right) + triangle.get(i).get(j);
	}
	int minimumTotal(List<List<Integer>> triangle) {
		int[][] dp = new int[triangle.size()][triangle.get(triangle.size() - 1).size()];
		for (int[] i: dp) {	
			Arrays.fill(i,-1);
		}
		return helper(triangle,0,0,dp);
	}
}