class Solution {
	ListNode addInList(ListNode head1, ListNode head2) {
		ListNode end = null;
		ListNode node1 = reverseListNode(head1);
		ListNode node2 = reverseListNode(head2);
		int carry = 0;
		while (node1 != null || node2 != null) {
			int currentSum = 0;
			int subSum = ((node1 != null) ? node1.val : 0) + ((node2 != null) ? node2.val : 0);
			if (subSum >= 10) {
				currentSum = subSum % 10;
				carry = 1;
			} 
			else {
				currentSum = subSum;
				carry = 0;
			}
			ListNode cur = new ListNode(currentSum);
			cur.next = end;
			end = cur;
			node1 = (node1 != null) ? node1.next : null;
			node2 = (node2 != null) ? node2.next : null;
		}
		return end;
	}
	ListNode reverseListNode(ListNode head) {
		ListNode pre = null;
		ListNode cur = head;
		ListNode next = null;
		int len = 0;
		while (cur != null) {
			next = cur.next;
			cur.next = pre;
			pre = cur;
			cur = next;
			len++;
		}
		return pre;
	}
}