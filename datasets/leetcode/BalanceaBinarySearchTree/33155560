class Solution {
	TreeNode CreateBST(ArrayList<Integer> inorder, int left, int right) {
		if (left > right) {
			return null;
		}
		int m = (right + left) / 2;
		TreeNode root = new TreeNode(inorder.get(m));
		root.left = CreateBST(inorder,left,m - 1);
		root.right = CreateBST(inorder,m + 1,right);
		return root;
	}
	TreeNode balanceBST(TreeNode root) {
		ArrayList<Integer> inorder = new ArrayList<>();
		getInOrder(root,inorder);
		root = CreateBST(inorder,0,inorder.size() - 1);
		return root;
	}
	void getInOrder(TreeNode root, ArrayList<Integer> inorder) {
		if (root == null) {
			return;
		}
		getInOrder(root.left,inorder);
		inorder.add(root.val);
		getInOrder(root.right,inorder);
	}
}