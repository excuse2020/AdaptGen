class Solution {
	int[][] memo;
	int dp(int[] nums, int i, int k) {
		if (i >= nums.length || k < 0) {
			return 0;
		}
		if (memo[i][k] != -1) {
			return memo[i][k];
		}
		int res = 0;
		for (int j = i + 1; j < nums.length; j++) {
			if (nums[i] == nums[j]) {
				res = Math.max(res,dp(nums,j,k));
			} 
			else {
				res = Math.max(res,dp(nums,j,k - 1));
			}
		}
		return memo[i][k] = res + 1;
	}
	int maximumLength(int[] nums, int k) {
		this.memo = new int[nums.length][k + 1];
		for (int[] row: memo) {	
			Arrays.fill(row,-1);
		}
		int max = 0;
		for (int i = 0; i < nums.length; i++) {
			max = Math.max(max,dp(nums,i,k));
		}
		return max;
	}
}