class Solution {
	Map<Integer, Integer> map = new HashMap();
	int maxDepth = 0;
	int maxDepthCount = 0;
	TreeNode ret = null;
	void dfs(TreeNode node, int level) {
		if (node == null) {
			return;
		}
		map.put(node.val,level);
		maxDepth = Math.max(maxDepth,level);
		dfs(node.left,level + 1);
		dfs(node.right,level + 1);
	}
	int dfs2(TreeNode node) {
		if (node == null) {
			return 0;
		}
		int self = (map.get(node.val) == maxDepth ? 1 : 0);
		int left = dfs2(node.left);
		int right = dfs2(node.right);
		int sum = self + left;
		if (sum == maxDepthCount && ret == null) {
			ret = node;
		}
		return sum;
	}
	TreeNode lcaDeepestLeaves(TreeNode root) {
		dfs(root,1);
		for (Integer key: map.keySet()) {	
			if (map.get(key) == maxDepth) {
				maxDepthCount += 1;
			}
		}
		dfs2(root);
		return ret;
	}
}