class Solution {
	Map<Pt, Long> costs = new HashMap<>();
	record Pt(int x, int y) {
	}
	long distance(Pt from, Pt to) {
		return Math.abs(to.x() - from.x()) + Math.abs(to.y() - from.y());
	}
	int minimumCost(int[] start, int[] target, int[][] specialRoads) {
		Pt targetPt = new Pt(target[0], target[1]);
		Pt startPt = new Pt(start[0], start[1]);
		Queue<Object[]> q = new ArrayDeque<>();
		costs.put(startPt,0L);
		q.add(new Object{startPt, 0L});
		long min = Long.MAX_VALUE;
		while (!q.isEmpty()) {
			Object[] o = q.remove();
			Pt point = (Pt) o[0];
			long costToThisPoint = (long) o[1];
			if (costToThisPoint > costs.get(point)) {
				continue;
			}
			costs.put(point,costToThisPoint);
			min = Math.min(min,costToThisPoint + distance(point,targetPt));
			for (int[] road: specialRoads) {	
				int roadCost = road[4];
				Pt startOfRoad = new Pt(road[0], road[1]);
				Pt endOfRoad = new Pt(road[2], road[3]);
				long costToEndOfRoad = costToThisPoint + distance(point,startOfRoad);
				if (costToEndOfRoad >= costs.getOrDefault(endOfRoad,Long.MAX_VALUE)) {
					continue;
				}
				costs.put(endOfRoad,costToEndOfRoad);
				q.add(new Object{endOfRoad, costToEndOfRoad});
			}
		}
		return (int) min;
	}
}