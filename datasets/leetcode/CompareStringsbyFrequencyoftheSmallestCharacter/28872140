class Solution {
	int BinarySeach(int[] A, int target) {
		int s = 0, e = A.length - 1;
		int ans = 0;
		while (s <= e) {
			int mid = s + (e - s) / 2;
			if (A[mid] > target) {
				e = mid - 1;
				ans = Math.max(ans,A.length - mid);
			} 
			else {
				s = mid + 1;
			}
		}
		return ans;
	}
	int countFreq(String a) {
		char minChar = a.charAt(0);
		int freq = 0;
		for (int i = 0; i < a.length(); ++i) {
			if (a.charAt(i) < minChar) {
				minChar = a.charAt(i);
				freq = 1;
			} 
			else if (a.charAt(i) == minChar) {
				freq++;
			}
		}
		return freq;
	}
	int[] numSmallerByFrequency(String[] queries, String[] words) {
		int n = words.length, m = queries.length;
		int[] wordsFreq = new int[n];
		int[] queriesFreq = new int[m];
		int[] res = new int[m];
		for (int i = 0; i < words.length; ++i) {
			wordsFreq[i] = countFreq(words[i]);
		}
		for (int i = 0; i < queries.length; ++i) {
			queriesFreq[i] = countFreq(queries[i]);
		}
		Arrays.sort(wordsFreq);
		for (int i = 0; i < queries.length; ++i) {
			res[i] = BinarySeach(wordsFreq,queriesFreq[i]);
		}
		return res;
	}
}