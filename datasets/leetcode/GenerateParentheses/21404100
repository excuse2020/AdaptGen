class Solution {
	void backTrack(String currWord, List<String> res, int openCount, int closedCount, int n) {
		if (currWord.length() == n * 2) {
			res.add(currWord);
			return;
		}
		if (openCount < n) {
			backTrack(currWord + "(",res,openCount + 1,closedCount,n);
		}
		if (closedCount < openCount) {
			backTrack(currWord + ")",res,openCount,closedCount + 1,n);
		}
	}
	List<String> generateParenthesis(int n) {
		List<String> res = new ArrayList<String>();
		backTrack("",res,0,0,n);
		return res;
	}
}