class Solution {
	boolean checkTasks(int[] tasks) {
		HashMap<Integer, Integer> hashMap = new HashMap<>();
		for (int i = 0; i < tasks.length; i++) {
			if (hashMap.containsKey(tasks[i])) {
				int addNumber = hashMap.get(tasks[i]);
				addNumber = addNumber + 1;
				hashMap.replace(tasks[i],addNumber);
			} 
			else {
				hashMap.put(tasks[i],1);
			}
		}
		for (int i: hashMap.keySet()) {	
			if (hashMap.get(i) < 2) {
				return false;
			}
		}
		return true;
	}
	int findMin(int number) {
		if (number == 3 || number == 2) {
			return 1;
		}
		if (number % 3 == 0) {
			return (number / 3);
		}
		int x = number / 3;
		int y = (number % 3) / 2;
		if (x * 3 + y * 2 == number) {
			return (x + y);
		}
		int a = (number / 3) - 1;
		int b = (number - (3 * a)) / 2;
		return (a + b);
	}
	int minimumRounds(int[] tasks) {
		HashMap<Integer, Integer> hashMap = new HashMap<>();
		for (int i = 0; i < tasks.length; i++) {
			if (hashMap.containsKey(tasks[i])) {
				int addNumber = hashMap.get(tasks[i]);
				addNumber = addNumber + 1;
				hashMap.replace(tasks[i],addNumber);
			} 
			else {
				hashMap.put(tasks[i],1);
			}
		}
		for (int i: hashMap.keySet()) {	
			if (hashMap.get(i) < 2) {
				return -1;
			}
		}
		int result = 0;
		for (int i: hashMap.keySet()) {	
			result += findMin(hashMap.get(i));
		}
		return result;
	}
}