class Solution {
	int[] countSubTrees(int n, int[][] edges, String labels) {
		int[] ans = new int[n];
		char[] lab = labels.toCharArray();
		boolean[] visited = new boolean[n];
		List<Integer>[] map = new ArrayList[n];
		for (int[] e: edges) {	
			if (map[e[0]] == null) {
				map[e[0]] = new ArrayList<>();
			}
			if (map[e[1]] == null) {
				map[e[1]] = new ArrayList<>();
			}
			map[e[0]].add(e[1]);
			map[e[1]].add(e[0]);
		}
		dfs(0,map,visited,lab,ans);
		return ans;
	}
	int[] dfs(int idx, List<Integer>[] map, boolean[] visited, char[] lab, int[] ans) {
		visited[idx] = true;
		int[] cnt = new int[26];
	}
}