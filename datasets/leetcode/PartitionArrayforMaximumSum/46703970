class Solution {
	int dfs(int[] arr, int k, int i, int[] dp) {
		if (i >= arr.length) {
			return 0;
		}
		if (dp[i] != -1) {
			return dp[i];
		}
		int temp = Integer.MIN_VALUE;
		for (int j = i; j < k + i && j < arr.length; j++) {
			temp = Math.max(temp,arr[j]);
			dp[i] = Math.max(dp[i],(temp * (j - i + 1)) + dfs(arr,k,j + 1,dp));
		}
		return dp[i];
	}
	int maxSumAfterPartitioning(int[] arr, int k) {
		int[] dp = new int[arr.length];
		Arrays.fill(dp,-1);
		return dfs(arr,k,0,dp);
	}
}