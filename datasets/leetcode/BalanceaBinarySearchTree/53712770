class Solution {
	TreeNode balanceBST(TreeNode root) {
		List<Integer> inorder = new ArrayList<>();
		inOrder(root,inorder);
		return constructBST(inorder,0,inorder.size() - 1);
	}
	TreeNode constructBST(List<Integer> elements, int start, int end) {
		if (start > end) {
			return null;
		}
		int mid = start + (end - start) / 2;
		TreeNode node = new TreeNode(elements.get(mid));
		node.left = constructBST(elements,start,mid - 1);
		node.right = constructBST(elements,mid + 1,end);
		return node;
	}
	void inOrder(TreeNode node, List<Integer> inorder) {
		if (node == null) {
			return;
		}
		inOrder(node.left,inorder);
		inorder.add(node.val);
		inOrder(node.right,inorder);
	}
}