class Solution {
	int maxSumAfterPartitioning(int[] arr, int k) {
		int dp = new int[arr.length];
		return solve(0,arr,k,dp);
	}
	int solve(int ind, int arr, int k, int dp) {
		int n = arr.length;
		if (ind >= n) {
			return 0;
		}
		if (dp[ind] != 0) {
			return dp[ind];
		}
		int max = arr[ind];
		for (int i = ind; i < ind + k && i < n; i++) {
			max = Math.max(max,arr[i]);
			int r = 0;
			r = solve(i + 1,arr,k,dp);
			dp[ind] = Math.max(dp[ind],max * (i - ind + 1) + r);
		}
		return dp[ind];
	}
}