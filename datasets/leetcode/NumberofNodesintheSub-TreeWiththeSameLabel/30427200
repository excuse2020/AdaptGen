class Solution {
	int[] res;
	int[] countSubTrees(int n, int[][] edges, String labels) {
		List<Integer>[] graph = new List[n];
		res = new int[n];
		boolean[] visited = new boolean[n];
		for (int i = 0; i < n; i++) {
			graph[i] = new ArrayList<>();
		}
		for (int[] e: edges) {	
			graph[e[0]].add(e[1]);
			graph[e[1]].add(e[0]);
		}
		dfs(0,labels,graph,visited);
		return res;
	}
	int[] dfs(int node, String labels, List<Integer>[] graph, boolean[] visited) {
		visited[node] = true;
		int[] cnt = new int[26];
		char ch;
		for (int x: graph[node]) {	
			if (!visited[x]) {
				int[] adj = dfs(x,labels,graph,visited);
				for (int i = 0; i < 26; i++) {
					cnt[i] += adj[i];
				}
			}
		}
		ch = labels.charAt(node);
	}
}