class Solution {
	List<List<Integer>> adj;
	int[] result;
	boolean[] vis;
	int[] countSubTrees(int n, int[][] edges, String labels) {
		adj = new ArrayList<>();
		vis = new boolean[n];
		result = new int[n];
		for (int i = 0; i < n; i++) {
			adj.add(new ArrayList<>());
		}
		for (int[] edge: edges) {	
			adj.get(edge[0]).add(edge[1]);
			adj.get(edge[1]).add(edge[0]);
		}
		dfs(0,labels);
		return result;
	}
	int[] dfs(int node, String labels) {
		vis[node] = true;
		int[] count = new int[26];
		for (int it: adj.get(node)) {	
			if (!vis[it]) {
				int[] adjCount = dfs(it,labels);
				for (int i = 0; i < 26; i++) {
					count[i] += adjCount[i];
				}
			}
		}
		char ch = labels.charAt(node);
	}
}