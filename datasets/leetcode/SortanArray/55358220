class Solution {
	int[] merge(int[] left, int[] right, int[] arr) {
		int i = 0, j = 0, k = 0;
		while (i < left.length && j < right.length) {
			if (left[i] <= right[j]) {
				arr[k] = left[i];
				i++;
				k++;
			} 
			else {
				arr[k] = right[j];
				j++;
				k++;
			}
		}
		while (i < left.length) {
			arr[k] = left[i];
			i++;
			k++;
		}
		while (j < right.length) {
			arr[k] = right[j];
			j++;
			k++;
		}
		return arr;
	}
	int[] sortArray(int[] nums) {
		if (nums.length < 2) {
			return nums;
		}
		int mid = nums.length / 2;
		int[] arr1 = new int[mid];
		int[] arr2 = new int[nums.length - mid];
		for (int i = 0; i < mid; i++) {
			arr1[i] = nums[i];
		}
		for (int i = mid; i < nums.length; i++) {
			arr2[i - mid] = nums[i];
		}
		sortArray(arr1);
		sortArray(arr2);
		return merge(arr1,arr2,nums);
	}
}