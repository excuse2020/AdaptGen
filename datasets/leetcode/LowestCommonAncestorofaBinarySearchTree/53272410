class Solution {
	TreeNode findLowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q, boolean PFound, boolean qFound, TreeNode res) {
		if (root == null) {
			return null;
		}
		if (root.val == p.val) {
			PFound = true;
		}
		if (root.val == q.val) {
			qFound = true;
		}
		if (PFound || qFound) {
			return root;
		}
		TreeNode left = null;
		TreeNode right = null;
		if (root.left != null) {
			left = findLowestCommonAncestor(root.left,p,q,PFound,qFound,res);
		}
		if (root.right != null) {
			right = findLowestCommonAncestor(root.right,p,q,PFound,qFound,res);
		}
		if (left != null && right != null) {
			res = root;
			return root;
		} 
		else if (left != null) {
			return left;
		} 
		else if (right != null) {
			return right;
		} 
		else {
			return null;
		}
	}
	TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
		boolean PFound = false;
		boolean qFound = false;
		TreeNode res = null;
		TreeNode resNode = findLowestCommonAncestor(root,p,q,PFound,qFound,res);
		return resNode;
	}
}