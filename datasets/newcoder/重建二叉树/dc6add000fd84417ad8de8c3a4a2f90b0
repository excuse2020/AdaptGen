class Solution {
	Map<Integer, Integer> map = new HashMap();
	TreeNode f(int[] preOrder, int h, int f, int[] vinOrder, int h1, int f1) {
		if (h > f && h1 > f1) {
			return null;
		}
		TreeNode root = new TreeNode(preOrder[h]);
		int i = map.get(preOrder[h]);
		root.left = f(preOrder,h + 1,h + (i - h1),vinOrder,h1,i - 1);
		root.right = f(preOrder,h + (i - h1),f,vinOrder,i + 1,f1);
		return root;
	}
	TreeNode reConstructBinaryTree(int[] preOrder, int[] vinOrder) {
		if (preOrder == null || preOrder.length <= 0) {
			return null;
		}
		for (int i = 0; i < vinOrder.length; i++) {
			map.put(vinOrder[i],i);
		}
		TreeNode node = f(preOrder,0,preOrder.length - 1,vinOrder,0,vinOrder.length - 1);
		return node;
	}
}