class Solution {
	String dis(String s) {
		Set<Character> h = new TreeSet();
		for (int i = 0; i < s.length(); i++) {
			if (!h.contains(s.charAt(i))) {
				h.add(s.charAt(i));
			}
		}
		StringBuilder sb = new StringBuilder();
		for (Character c: h) {	
			sb.append(c);
		}
		return sb.toString();
	}
	int similarPairs(String[] words) {
		int n = words.length, c = 0;
		for (int i = 0; i < words.length; i++) {
			words[i] = dis(words[i]);
		}
		Map<String, Integer> m = new HashMap();
		for (int i = 0; i < words.length; i++) {
			m.put(words[i],m.getOrDefault(words[i],0) + 1);
		}
		int ans = 0;
		for (String s: m.keySet()) {	
			ans += (m.get(s) * (m.get(s) - 1)) / 2;
		}
		return ans;
	}
}