class Solution {
	boolean compare(String s1, String s2) {
		if (s1.length() != s2.length() + 1) {
			return false;
		}
		int p1 = 0, p2 = 0;
		while (p1 < s1.length()) {
			if (p2 < s2.length() && s1.charAt(p1) == s2.charAt(p2)) {
				p1++;
				p2++;
			} 
			else {
				p1++;
			}
		}
		if (p1 == s1.length() && p2 == s2.length()) {
			return true;
		}
		return false;
	}
	int longestStrChain(String[] words) {
		int maxlen = 1;
		int dp = new int[words.length];
		Arrays.fill(dp,1);
		Arrays.sort(words,(String a, String b) -> {a.length() - b.length()});
		for (int i = 1; i < words.length; i++) {
			for (int prev = 0; prev < i; prev++) {
				if (compare(words[i],words[prev]) && dp[i] < dp[prev] + 1) {
					dp[i] = 1 + dp[prev];
				}
				if (dp[i] > maxlen) {
					maxlen = dp[i];
				}
			}
		}
		return maxlen;
	}
}