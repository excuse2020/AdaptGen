class Solution {
	int[] findOriginalArray(int[] changed) {
		Arrays.sort(changed);
		int n = changed.length;
		if (n % 2 != 0) {
			return new int[0];
		}
		boolean[] vis = new boolean[n];
		List<Integer> list = new ArrayList<>();
		for (int i = 0; i < n - 1; i++) {
			if (vis[i]) {
				continue;
			}
			int x = changed[i];
			int lptr = i + 1, rptr = n - 1;
			int doubindex = -1;
			while (lptr <= rptr) {
				int mid = lptr + (rptr - lptr) / 2;
				if (vis[mid] == true && changed[mid] == x * 2) {
					lptr = mid + 1;
				} 
				else if (changed[mid] == x * 2) {
					doubindex = mid;
					rptr = mid - 1;
				} 
				else if (changed[mid] < x * 2) {
					lptr = mid + 1;
				} 
				else {
					rptr = mid - 1;
				}
			}
			if (doubindex == -1) {
				return new int[0];
			}
			list.add(changed[i]);
			vis[doubindex] = true;
		}
		int ans = new int[n / 2];
		for (int i = 0; i < n / 2; i++) {
			ans[i] = list.get(i);
		}
		return ans;
	}
}