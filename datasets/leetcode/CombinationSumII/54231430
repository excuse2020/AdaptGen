class Solution {
	List<List<Integer>> combinationSum2(int[] candidates, int target) {
		ArrayList<List<Integer>> results = new ArrayList<>();
		ArrayList<Integer> currentCombination = new ArrayList<>();
		Arrays.sort(candidates);
		findCombinations(candidates,target,0,currentCombination,results);
		return results;
	}
	void findCombinations(int[] candidates, int target, int startIndex, ArrayList<Integer> currentCombination, ArrayList<List<Integer>> results) {
		if (target == 0) {
			results.add(new ArrayList<>(currentCombination));
			return;
		}
		for (int i = startIndex; i < candidates.length; i++) {
			if (i != startIndex && candidates[i - 1] == candidates[i]) {
				continue;
			}
			if (candidates[i] <= target) {
				currentCombination.add(candidates[i]);
				findCombinations(candidates,target - candidates[i],i + 1,currentCombination,results);
				currentCombination.remove(currentCombination.size() - 1);
			}
		}
	}
}