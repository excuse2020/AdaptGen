class Solution {
	int getValueOrZero(int[] arr, int index) {
		return index >= 0 ? arr[index] : 0;
	}
	int maxSumAfterPartitioning(int[] arr, int k) {
		int[] dp = new int[arr.length];
		dp[0] = arr[0];
		for (int i = 1; i < arr.length; i++) {
			int max = 0;
			int windowSize = Math.min(k,i + 1);
			for (int j = 0; j < windowSize; j++) {
				max = Math.max(max,arr[i - j]);
				dp[i] = Math.max(dp[i],getValueOrZero(dp,i - j) + max * (j + 1));
			}
		}
		return dp[arr.length - 1];
	}
}