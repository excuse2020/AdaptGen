class Solution {
	int minimumOperations(TreeNode root) {
		LinkedList<TreeNode> queue = new LinkedList<TreeNode>();
		ArrayList<Integer> list = new ArrayList<Integer>();
		queue.add(root);
		list.add(root.val);
		int swaps = 0;
		while (!queue.isEmpty()) {
			swaps += totalSwapsRequired(list);
			list = new ArrayList<Integer>();
			int n = queue.size();
			while (n-- > 0) {
				TreeNode front = queue.removeFirst();
				if (front.left != null) {
					queue.add(front.left);
					list.add(front.left.val);
				}
				if (front.right != null) {
					queue.add(front.right);
					list.add(front.right.val);
				}
			}
		}
		return swaps;
	}
	int totalSwapsRequired(ArrayList<Integer> list) {
		int n = list.size(), swaps = 0;
		ArrayList<Integer> sortedList = new ArrayList<Integer>(n);
		for (int val: list) {	
			sortedList.add(val);
		}
		Collections.sort(sortedList);
		HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
		for (int i = 0; i < n; ++i) {
			map.put(sortedList.get(i),i);
		}
		sortedList = null;
		for (int idx = 0; idx < n; ++idx) {
			int val = list.get(idx), sortedIdx = map.get(val);
			if (idx == sortedIdx) {
				continue;
			}
			while (idx != sortedIdx) {
				int temp = list.get(sortedIdx);
				list.set(sortedIdx,val);
				list.set(idx,temp);
				sortedIdx = map.get(temp);
				val = temp;
				++swaps;
			}
		}
		return swaps;
	}
}