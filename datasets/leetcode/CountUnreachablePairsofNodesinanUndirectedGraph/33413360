class Solution {
	List<Integer> parent = new ArrayList<>();
	List<Integer> size = new ArrayList<>();
	void UnionBySize(int u, int v) {
		if (u == v) {
			return;
		}
		int uP = findUPar(u);
		int vP = findUPar(v);
		if (uP == vP) {
			return;
		}
		if (size.get(uP) < size.get(vP)) {
			parent.set(uP,vP);
			size.set(vP,size.get(vP) + size.get(uP));
		} 
		else {
			parent.set(vP,uP);
			size.set(uP,size.get(vP) + size.get(uP));
		}
	}
	long countPairs(int n, int[][] edges) {
		for (int i = 0; i < n; i++) {
			parent.add(i,i);
			size.add(i,1);
		}
		for (int[] edge: edges) {	
			UnionBySize(edge[0],edge[1]);
		}
		boolean[] componentMembers = new boolean[n];
		for (int i = 0; i < n; i++) {
			int par = findUPar(i);
			componentMembers[par] = true;
		}
		long pairs = 0;
		long remainingComponents = n;
		for (int i = 0; i < n; i++) {
			if (!componentMembers[i]) {
				continue;
			}
			long currentComponents = size.get(i);
			remainingComponents -= currentComponents;
			pairs += currentComponents * remainingComponents;
		}
		return pairs;
	}
	int findUPar(int n) {
		if (n == parent.get(n)) {
			return n;
		}
		int par = findUPar(parent.get(n));
		parent.set(n,par);
		return parent.get(n);
	}
}