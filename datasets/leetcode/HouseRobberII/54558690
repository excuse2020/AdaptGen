class Solution {
	int helper(int[] nums) {
		int prev1 = nums[0];
		int prev2 = 0;
		for (int i = 1; i < nums.length; i++) {
			int pick = nums[i];
			if (i != 1) {
				pick += prev2;
			}
			int notPick = prev1 + 0;
			int cur = Math.max(pick,notPick);
			prev2 = prev1;
			prev1 = cur;
		}
		return prev1;
	}
	int rob(int[] nums) {
		int n = nums.length;
		if (n == 1) {
			return nums[0];
		}
		int[] includeLast = new int[n - 1];
		int[] includeFirst = new int[n - 1];
		int iOne = 0, iTwo = 0;
		for (int i = 0; i < n; i++) {
			if (i != 0) {
				includeLast[iOne++] = nums[i];
			}
			if (i != n - 1) {
				includeFirst[iTwo++] = nums[i];
			}
		}
		int arrayOne = helper(includeFirst);
		int arrayTwo = helper(includeLast);
		return Math.max(arrayOne,arrayTwo);
	}
}