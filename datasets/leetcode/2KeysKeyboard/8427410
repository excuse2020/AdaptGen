class Solution {
	boolean isPrime(int n) {
		if (n % 2 == 0) {
			return false;
		}
		for (int i = 2; i <= Math.sqrt(n); i++) {
			if (n % i == 0) {
				return false;
			}
		}
		return true;
	}
	int minSteps(int n) {
		int[] dp = new int[n + 1];
		Arrays.fill(dp,Integer.MAX_VALUE);
		dp[0] = 0;
		dp[1] = 0;
		for (int i = 2; i <= n; i++) {
			if (isPrime(i)) {
				dp[i] = i;
			} 
			else if (i % 2 == 0) {
				dp[i] = dp[i / 2] + 2;
			} 
			else {
				for (int k = 1; k < i / 2; k++) {
					if (i % k == 0) {
						dp[i] = Math.min(dp[i],dp[k] + i / k);
					}
				}
			}
		}
		return dp[n];
	}
}