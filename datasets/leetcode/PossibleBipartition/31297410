class Solution {
	boolean dfs(int node, int color, int[] colors, List<Integer>[] graph) {
		if (colors[node] != 0) {
			return color == colors[node];
		}
		colors[node] = color;
		if (graph[node] != null) {
			for (int neighbor: graph[node]) {	
				boolean check = dfs(neighbor,-color,colors,graph);
				if (!check) {
					return false;
				}
			}
		}
		return true;
	}
	boolean possibleBipartition(int n, int[][] dislikes) {
		List<Integer>[] graph = new ArrayList[n + 1];
		for (int[] dislike: dislikes) {	
			if (graph[dislike[0]] == null) {
				graph[dislike[0]] = new ArrayList<>();
			}
			if (graph[dislike[1]] == null) {
				graph[dislike[1]] = new ArrayList<>();
			}
			graph[dislike[0]].add(dislike[1]);
			graph[dislike[1]].add(dislike[0]);
		}
		int[] colors = new int[n + 1];
		for (int i = 1; i < n + 1; i++) {
			if (colors[i] == 0) {
				boolean check = dfs(i,1,colors,graph);
				if (!check) {
					return false;
				}
			}
		}
		return true;
	}
}