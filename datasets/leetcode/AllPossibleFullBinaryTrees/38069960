class Solution {
	List<TreeNode> allPossibleFBT(int n) {
		HashMap<Integer, List<TreeNode>> map = new HashMap<>();
		map.put(1,List.of(new TreeNode()));
		if (n % 2 == 0) {
			return new ArrayList<>();
		}
		for (int i = 3; i <= n; i += 2) {
			for (int l = 1; l < i - 1; l += 2) {
				int r = i - l;
				List<TreeNode> left = map.get(l);
				List<TreeNode> right = map.get(r);
				System.out.println(i + " ");
				for (TreeNode n1: left) {	
					for (TreeNode n2: right) {	
						TreeNode root = new TreeNode();
						root.left = n1;
						root.right = n2;
						List<TreeNode> current = map.getOrDefault(i,new ArrayList<>());
						current.add(root);
						map.put(i,current);
					}
				}
			}
		}
		return map.get(n);
	}
}