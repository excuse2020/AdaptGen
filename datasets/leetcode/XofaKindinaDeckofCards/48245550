class Solution {
	int findNod(int num1, int num2) {
		while (num1 != 0 && num2 != 0) {
			if (num1 > num2) {
				num1 %= num2;
			} 
			else {
				num2 %= num1;
			}
		}
		return num1 + num2;
	}
	boolean hasGroupsSizeX(int[] deck) {
		List<Integer> groupList = Arrays.stream(deck).boxed().collect(Collectors.groupingBy(,Collectors.toList())).entrySet().stream().map((entry) -> {entry.getValue().size()}).sorted().collect(Collectors.toList());
		int min = groupList.get(0);
		List<Integer> nodeList = groupList.stream().map((num) -> {findNod(min,num)}).sorted().collect(Collectors.toList());
		int minNod = nodeList.get(0);
		return deck.length == 1 || minNod == 1 ? false : !nodeList.stream().filter(num -> (num % minNod) != 0).findFirst().isPresent();
	}
}