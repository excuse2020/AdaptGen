class Solution {
	List<List<Integer>> findPrimePairs(int n) {
		List<List<Integer>> pairs = new ArrayList<>();
		if (n <= 3) {
			return pairs;
		}
		boolean prime = new boolean[n + 1];
		sieve(n,prime);
		for (int i = 2; i <= n; i++) {
			if (!prime[i]) {
				List<Integer> pair = new ArrayList<>();
				if (!prime[n - i] && n - i > 1) {
					pair.add(i);
					pair.add(n - i);
					prime[n - i] = true;
					pairs.add(pair);
				}
			}
		}
		return pairs;
	}
	void sieve(int x, boolean[] prime) {
		int c = 0;
		for (int i = 2; i * i <= x; i++) {
			if (!prime[i]) {
				for (int j = i * 2; j <= x; j = j + i) {
					prime[j] = true;
				}
			}
		}
	}
}