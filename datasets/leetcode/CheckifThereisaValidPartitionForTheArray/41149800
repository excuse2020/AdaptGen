class Solution {
	int n;
	Boolean[] t;
	boolean rec(int i, int[] nums) {
		if (i == n) {
			return true;
		}
		if (i == n - 2) {
			return nums[i] == nums[i + 1];
		}
		if (i == n - 1) {
			return false;
		}
		if (t[i] != null) {
			return t[i];
		}
		if (nums[i] == nums[i + 1]) {
			if (rec(i + 2,nums)) {
				return true;
			}
		}
		if (nums[i] == nums[i + 1] && nums[i + 2] == nums[i]) {
			if (rec(i + 3,nums)) {
				return true;
			}
		} 
		else if (nums[i] + 1 == nums[i + 1] && nums[i + 1] + 1 == nums[i + 2]) {
			if (rec(i + 3,nums)) {
				return true;
			}
		}
		return t[i] = false;
	}
	boolean validPartition(int[] nums) {
		n = nums.length;
		t = new Boolean[n + 1];
		if (n == 2) {
			return nums[0] == nums[1];
		}
		return rec(0,nums);
	}
}