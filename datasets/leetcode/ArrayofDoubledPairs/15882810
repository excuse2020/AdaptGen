class Solution {
	boolean canReorder(TreeMap<Integer, Integer> freqMap) {
		while (!freqMap.isEmpty()) {
			int a = freqMap.firstKey();
			freqMapDec(freqMap,a);
			if (!freqMapDec(freqMap,a * 2)) {
				return false;
			}
		}
		return true;
	}
	boolean canReorderDoubled(int[] arr) {
		TreeMap<Integer, Integer> freqMapPos = new TreeMap<>();
		TreeMap<Integer, Integer> freqMapNeg = new TreeMap<>();
		for (int a: arr) {	
			if (a >= 0) {
				freqMapInc(freqMapPos,a);
			} 
			else {
				freqMapInc(freqMapNeg,-a);
			}
		}
		return canReorder(freqMapPos) && canReorder(freqMapNeg);
	}
	boolean freqMapDec(TreeMap<Integer, Integer> freqMap, int a) {
		int count = freqMap.getOrDefault(a,0);
		count--;
		if (count > 0) {
			freqMap.put(a,count);
		} 
		else if (count == 0) {
			freqMap.remove(a);
		}
		return count >= 0;
	}
	void freqMapInc(TreeMap<Integer, Integer> freqMap, int a) {
		int count = freqMap.getOrDefault(a,0);
		count++;
		freqMap.put(a,count);
	}
}