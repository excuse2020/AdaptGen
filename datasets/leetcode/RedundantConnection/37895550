class Solution {
	boolean dfs(ArrayList<ArrayList<Integer>> graph, int u, int v, boolean[] visited) {
		if (u == v) {
			return true;
		}
		visited[u] = true;
		for (int next: graph.get(u)) {	
			if (!visited[next]) {
				if (dfs(graph,next,v,visited)) {
					return true;
				}
			}
		}
		return false;
	}
	int[] findRedundantConnection(int[][] edges) {
		int n = edges.length;
		ArrayList<ArrayList<Integer>> graph = new ArrayList<>();
		for (int i = 0; i < n; i++) {
			graph.add(new ArrayList<>());
		}
		for (int[] edge: edges) {	
			int u = edge[0] - 1;
			int v = edge[1] - 1;
			boolean[] visited = new boolean[n];
			if (dfs(graph,u,v,visited)) {
				return edge;
			}
			graph.get(u).add(v);
			graph.get(v).add(u);
		}
		return new int[0];
	}
}