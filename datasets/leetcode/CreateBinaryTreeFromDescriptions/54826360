class Solution {
	TreeNode createBinaryTree(int[][] arr) {
		HashSet<TreeNode> childSet = new HashSet<>();
		HashMap<Integer, TreeNode> treeMap = new HashMap<>();
		for (int tree: arr) {	
			int parent = tree[0];
			int child = tree[1];
			boolean isLeaf = (tree[2] == 1) ? true : false;
			if (treeMap.containsKey(parent)) {
				TreeNode parentNode = treeMap.get(parent);
				if (treeMap.containsKey(child)) {
					TreeNode childNode = treeMap.get(child);
					treeMap.put(child,childNode);
					childSet.add(childNode);
					if (isLeaf) {
						parentNode.left = childNode;
					} 
					else {
						parentNode.right = childNode;
					}
				} 
				else {
					TreeNode childNode = new TreeNode(child);
					treeMap.put(child,childNode);
					childSet.add(childNode);
					if (isLeaf) {
						parentNode.left = childNode;
					} 
					else {
						parentNode.right = childNode;
					}
				}
			} 
			else {
				TreeNode parentNode = new TreeNode(parent);
				if (treeMap.containsKey(child)) {
					TreeNode childNode = treeMap.get(child);
					treeMap.put(child,childNode);
					childSet.add(childNode);
					if (isLeaf) {
						parentNode.left = childNode;
					} 
					else {
						parentNode.right = childNode;
					}
				} 
				else {
					TreeNode childNode = new TreeNode(child);
					treeMap.put(child,childNode);
					childSet.add(childNode);
					if (isLeaf) {
						parentNode.left = childNode;
					} 
					else {
						parentNode.right = childNode;
					}
				}
				treeMap.put(parent,parentNode);
			}
		}
		for (Map.Entry<Integer, TreeNode> map: treeMap.entrySet()) {	
			if (!childSet.contains(map.getValue())) {
				return map.getValue();
			}
		}
		return null;
	}
}