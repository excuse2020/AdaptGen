class Solution {
	int minimumOperations(TreeNode root) {
		int count = 0;
		Queue<TreeNode> q = new LinkedList<>();
		q.add(root);
		while (!q.isEmpty()) {
			int n = q.size();
			List<Integer> row = new ArrayList<>();
			List<Integer> copy = new ArrayList<>();
			for (int i = 0; i < n; i++) {
				TreeNode front = q.peek();
				q.poll();
				if (front.left != null) {
					q.add(front.left);
				}
				if (front.right != null) {
					q.add(front.right);
				}
				row.add(front.val);
				copy.add(front.val);
			}
			Collections.sort(copy);
			Map<Integer, Integer> index = new HashMap<>();
			for (int i = 0; i < copy.size(); i++) {
				index.put(copy.get(i),i);
			}
			for (int i = 0; i < row.size(); i++) {
				if (index.get(row.get(i)) != i) {
					Collections.swap(row,index.get(row.get(i)),i);
					count++;
					i--;
				}
			}
		}
		return count;
	}
}