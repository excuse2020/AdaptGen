class Solution {
	int par;
	int size;
	int findpar(int x) {
		if (par[x] == x) {
			return x;
		}
		int temp = findpar(par[x]);
		par[x] = temp;
		return temp;
	}
	void merge(int p1, int p2) {
		if (size[p1] > size[p2]) {
			par[p2] = p1;
			size[p1] += size[p2];
		} 
		else {
			par[p1] = p2;
			size[p2] += size[p1];
		}
	}
	int minMalwareSpread(int[][] graph, int[] initial) {
		int n = graph.length;
		par = new int[n];
		size = new int[n];
		for (int i = 0; i < n; i++) {
			par[i] = i;
			size[i] = 1;
		}
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < n; j++) {
				if (graph[i][j] == 1) {
					int p1 = findpar(i);
					int p2 = findpar(j);
					if (p1 != p2) {
						merge(p1,p2);
					}
				}
			}
		}
		int infected = new int[n];
		for (int e: initial) {	
			int p = findpar(e);
			infected[p]++;
		}
		int ans = -1;
		int maxSize = 0;
		for (int e: initial) {	
			int p = findpar(e);
			if (infected[p] == 1 && maxSize <= size[p]) {
				if (maxSize == size[p]) {
					ans = Math.min(e,ans);
				} 
				else {
					ans = e;
				}
				maxSize = size[p];
			}
		}
		if (ans == -1) {
			int min = Integer.MAX_VALUE;
			for (int e: initial) {	
				min = Math.min(min,e);
			}
			return min;
		}
		return ans;
	}
}