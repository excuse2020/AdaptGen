class Solution {
	int findParent(int node, int[] sets) {
		if (node == sets[node]) {
			return node;
		}
		return sets[node] = findParent(sets[sets[node]],sets);
	}
	void union(int node1, int node2, int[] sets) {
		sets[findParent(node1,sets)] = findParent(node2,sets);
	}
	boolean validPath(int n, int[][] edges, int source, int destination) {
		if (source == destination) {
			return true;
		}
		int[] sets = new int[n];
		for (int i = 0; i < n; i++) {
			sets[i] = i;
		}
		for (int[] edge: edges) {	
			union(edge[0],edge[1],sets);
		}
		return findParent(source,sets) == findParent(destination,sets);
	}
}