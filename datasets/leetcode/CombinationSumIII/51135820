class Solution {
	List<List<Integer>> allValList = new ArrayList<>();
	int mLimit;
	List<List<Integer>> combinationSum3(int k, int n) {
		int limit = k * (k - 1) / 2;
		mLimit = Math.min(n - limit,9);
		getCombSum(0,1,n,k,new ArrayList<>());
		return allValList;
	}
	void getCombSum(int sum, int v, int n, int k, List<Integer> valList) {
		if (valList.size() == k) {
			if (sum == n) {
				allValList.add(new ArrayList<>(valList));
			}
			return;
		} 
		else if (sum > n) {
			return;
		}
		for (int i = v; i <= mLimit; i++) {
			valList.add(i);
			sum += i;
			getCombSum(sum,i + 1,n,k,valList);
			sum -= i;
			valList.remove(valList.size() - 1);
		}
	}
}