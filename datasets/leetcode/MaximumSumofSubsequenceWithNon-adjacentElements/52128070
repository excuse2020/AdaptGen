class Solution {
	int helper(int[] nums) {
		if (nums.length == 0) {
			return 0;
		}
		if (nums.length == 1) {
			return nums[0];
		}
		int[] dp = new int[nums.length];
		dp[0] = nums[0];
		dp[1] = Math.max(nums[0],nums[1]);
		for (int i = 2; i < nums.length; i++) {
			dp[i] = Math.max(nums[i],Math.max(dp[i - 1],dp[i - 2] + nums[i]));
		}
		return dp[nums.length - 1];
	}
	int maximumSumSubsequence(int[] nums, int[][] queries) {
		long sum = 0;
		for (int[] temp: queries) {	
			int x = temp[0];
			int y = temp[1];
			nums[x] = y;
			int t = helper(nums);
			if (t <= 0) {
				t = 0;
			}
			sum += t;
		}
		sum = sum % 1000000007;
		return (int) sum;
	}
}