class Solution {
	int shortestPathBinaryMatrix(int[][] grid) {
		boolean[][] visited = new boolean[grid.length][grid[0].length];
		Queue<int[]> queue = new LinkedList<>();
		int step = 0;
		if (grid[0][0] == 0) {
			visited[0][0] = true;
			queue.offer(new int{0, 0});
		}
		while (!queue.isEmpty()) {
			step++;
			int queueSize = queue.size();
			for (int i = 0; i < queueSize; i++) {
				int[] curr = queue.poll();
				if (curr[0] == grid.length - 1 && curr[1] == grid[0].length - 1) {
					return step;
				}
				for (int x = -1; x <= 1; x++) {
					for (int y = -1; y <= 1; y++) {
						int m = curr[0] + x;
						int n = curr[1] + y;
						if (m >= 0 && m < grid.length && n >= 0 && n < grid[0].length && !visited[m][n] && grid[m][n] == 0) {
							visited[m][n] = true;
							queue.offer(new int{m, n});
						}
					}
				}
			}
		}
		return -1;
	}
}