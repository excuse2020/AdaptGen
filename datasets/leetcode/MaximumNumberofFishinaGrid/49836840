class Solution {
	int dfs(int i, int j, int grid) {
		if (i < 0 || j < 0 || i >= grid.length || j >= grid[0].length || grid[i][j] == 0) {
			return 0;
		}
		int res = grid[i][j];
		grid[i][j] = 0;
		res = Math.max(res,res + dfs(i + 1,j,grid));
		res = Math.max(res,res + dfs(i - 1,j,grid));
		res = Math.max(res,res + dfs(i,j + 1,grid));
		res = Math.max(res,res + dfs(i,j - 1,grid));
		return res;
	}
	int findMaxFish(int[][] grid) {
		int res = 0;
		for (int i = 0; i < grid.length; i++) {
			for (int j = 0; j < grid[0].length; j++) {
				if (grid[i][j] != 0) {
					res = Math.max(res,dfs(i,j,grid));
				}
			}
		}
		return res;
	}
}