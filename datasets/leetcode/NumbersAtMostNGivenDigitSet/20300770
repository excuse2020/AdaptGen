class Solution {
	Integer[][][] digitdp;
	int atMostNGivenDigitSet(String[] digits, int n) {
		String num = n + "";
		Integer[] dig = new Integer[digits.length];
		for (int i = 0; i < dig.length; i++) {
			dig[i] = Integer.parseInt(digits[i]);
		}
		digitdp = new Integer[20][2][2];
		return solve(num,0,true,dig,true) - 1;
	}
	int solve(String num, int pos, boolean bound, Integer[] dig, boolean lead) {
		if (pos == num.length()) {
			return 1;
		}
		int maxDigit = -1;
		if (digitdp[pos][(bound == true) ? 1 : 0][(lead == true) ? 1 : 0] != null) {
			return digitdp[pos][(bound == true) ? 1 : 0][(lead == true) ? 1 : 0];
		}
	}
}