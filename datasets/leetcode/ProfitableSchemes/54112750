class Solution {
	int MOD = (int) 1e09 + 7;
	int helper(int curProfit, int n, int minProfit, int[] group, int[] profit, int index, int count) {
		if (count > n) {
			return 0;
		}
		if (index == profit.length) {
			if (curProfit >= minProfit) {
				return 1;
			}
			return 0;
		}
		int a = helper(Math.min(curProfit + profit[index],minProfit),n,minProfit,group,profit,index + 1,count + group[index]) % MOD;
		int b = helper(curProfit,n,minProfit,group,profit,index + 1,count) % MOD;
		return (a + b) % MOD;
	}
	int profitableSchemes(int n, int minProfit, int[] group, int[] profit) {
		return helper(0,n,minProfit,group,profit,0,0);
	}
}