class Solution {
	long maximumSubarraySum(int[] nums, int k) {
		int start = 0;
		long max_sum = 0L;
		int max_window = 0;
		long sum = 0L;
		HashSet<Integer> hashSet = new HashSet<>();
		for (int end = 0; end < nums.length; end++) {
			sum = sum + nums[end];
			while (hashSet.contains(nums[end]) || end - start + 1 > k) {
				hashSet.remove(nums[start]);
				sum = sum - nums[start];
				start++;
			}
			hashSet.add(nums[end]);
			if (end - start + 1 == k) {
				max_sum = Math.max(max_sum,sum);
			}
		}
		return max_sum;
	}
}