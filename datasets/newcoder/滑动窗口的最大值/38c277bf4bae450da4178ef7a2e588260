class Solution {
	int getMax(int[] subNum) {
		Stack<Integer> stack = new Stack<>();
		for (int i = 0; i < subNum.length; i++) {
			if (stack.isEmpty()) {
				stack.push(subNum[i]);
			} 
			else {
				if (subNum[i] > stack.peek()) {
					stack.push(subNum[i]);
				}
			}
		}
		return stack.pop();
	}
	ArrayList<Integer> maxInWindows(int[] num, int size) {
		if (size > num.length || size == 0 || num.length == 0) {
			return new ArrayList<Integer>();
		}
		ArrayList<Integer> list = new ArrayList<Integer>();
		int index = num.length - size + 1;
		for (int i = 0; i < index; i++) {
			list.add(getMax(Arrays.copyOfRange(num,i,i + size)));
		}
		return list;
	}
}