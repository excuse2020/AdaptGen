class Solution {
	List<List<Integer>> ans = new ArrayList<>();
	List<List<Integer>> combinationSum(int[] candidates, int target) {
		ArrayList<Integer> curr = new ArrayList<Integer>();
		permute(candidates,target,0,0,curr);
		return ans;
	}
	void permute(int[] nums, int target, int currSum, int index, ArrayList<Integer> curr) {
		if (currSum == target) {
			ans.add(new ArrayList<>(curr));
		} 
		else {
			for (int i = index; i < nums.length; i++) {
				if (currSum + nums[i] <= target) {
					currSum += nums[i];
					curr.add(nums[i]);
					permute(nums,target,currSum,i,curr);
					currSum -= nums[i];
					curr.remove(curr.size() - 1);
				}
			}
		}
	}
}