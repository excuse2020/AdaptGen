class Solution {
	int start = 1, end = (int) 10e9, res = 0;
	boolean isPossibleOptimised(int maxVal, int[] nums, int k) {
		int size = 1;
		int prev = nums[0];
		Integer ceiling = null;
		for (int i = 1; i < nums.length; i++) {
			if ((nums[i] - prev) >= maxVal) {
				prev = nums[i];
				size += 1;
			}
			if (size >= k) {
				return true;
			}
		}
		return false;
	}
	int maximumTastiness(int[] nums, int k) {
		Arrays.sort(nums);
		while (start <= end) {
			int mid = (start) + (end - start) / 2;
			if (isPossibleOptimised(mid,nums,k)) {
				res = mid;
				start = mid + 1;
			} 
			else {
				end = mid - 1;
			}
		}
		return res;
	}
}