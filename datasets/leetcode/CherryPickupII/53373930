class Solution {
	int cherryPickup(int[][] grid) {
		int n = grid.length;
		int m = grid[0].length;
		int[][][] dp = new int[n][m][m];
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < m; j++) {
				Arrays.fill(dp[i][j],-1);
			}
		}
		return recursion(0,0,m - 1,grid,m,n,dp);
	}
	int recursion(int i, int j1, int j2, int[][] arr, int m, int n, int[][][] dp) {
		if (j1 < 0 || j2 < 0 || j1 >= m || j2 >= m || i < 0) {
			return (int) -1e9;
		}
		if (i == n - 1) {
			if (j1 == j2) {
				return arr[i][j1];
			} 
			else {
				return arr[i][j1] + arr[i][j2];
			}
		}
		if (dp[i][j1][j2] != -1) {
			return dp[i][j1][j2];
		}
		int maxi = (int) -1e9;
		for (int dj1 = -1; dj1 <= 1; dj1++) {
			for (int dj2 = -1; dj2 <= 1; dj2++) {
				int value = (j1 == j2) ? arr[i][j1] : arr[i][j1] + arr[i][j2];
				value += recursion(i + 1,j1 + dj1,j2 + dj2,arr,m,n,dp);
				maxi = Math.max(maxi,value);
			}
		}
		return dp[i][j1][j2] = maxi;
	}
}