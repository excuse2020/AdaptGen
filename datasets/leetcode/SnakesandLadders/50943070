class Solution {
	int jump(int jumpSpace, int gridVal) {
		return gridVal == -1 ? jumpSpace : gridVal;
	}
	int snakesAndLadders(int[][] board) {
		int end = board.length * board.length - 1;
		int[] grid = new int[board.length * board.length];
		int idx = 0;
		for (int i = board.length - 1; i >= 0; i--) {
			if (i % 2 != board.length % 2) {
				for (int j = 0; j < board.length; j++) {
					grid[idx++] = board[i][j] != -1 ? board[i][j] - 1 : board[i][j];
				}
			} 
			else {
				for (int j = board.length - 1; j >= 0; j--) {
					grid[idx++] = board[i][j] != -1 ? board[i][j] - 1 : board[i][j];
				}
			}
		}
		Queue<Integer> que = new LinkedList<Integer>();
		que.offer(0);
		int count = 0;
		HashSet<Integer> seen = new HashSet<>();
		while (!que.isEmpty()) {
			int size = que.size();
			for (int i = 0; i < size; i++) {
				int curr = que.poll();
				if (curr >= end) {
					return count;
				}
				if (seen.contains(curr)) {
					continue;
				}
				seen.add(curr);
				if (curr + 1 < grid.length) {
					que.offer(jump(curr + 1,grid[curr + 1]));
				}
				if (curr + 2 < grid.length) {
					que.offer(jump(curr + 2,grid[curr + 2]));
				}
				if (curr + 3 < grid.length) {
					que.offer(jump(curr + 3,grid[curr + 3]));
				}
				if (curr + 4 < grid.length) {
					que.offer(jump(curr + 4,grid[curr + 4]));
				}
				if (curr + 5 < grid.length) {
					que.offer(jump(curr + 5,grid[curr + 5]));
				}
				if (curr + 6 < grid.length) {
					que.offer(jump(curr + 6,grid[curr + 6]));
				}
			}
			count++;
		}
		return -1;
	}
}