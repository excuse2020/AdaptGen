class Solution {
	long maxStrength(int[] nums) {
		int x = 0;
		if (nums.length == 1) {
			return nums[0];
		}
		if (nums.length == 2) {
			if (nums[0] < 0 || nums[1] < 0) {
				if (nums[0] < 0 && nums[1] < 0) {
					return nums[0] * nums[1];
				} 
				else {
					return Math.max(nums[0],nums[1]);
				}
			} 
			else if (nums[0] >= 0 && nums[1] >= 0) {
				if (nums[0] == 0 || nums[1] == 0) {
					return Math.max(nums[1],nums[0]);
				}
				return nums[1] * nums[0];
			}
		}
		for (int i = 0; i < nums.length; i++) {
			if (nums[i] < 0) {
				x++;
			}
		}
		int[] temp = new int[x];
		int c = 0;
		for (int i = 0; i < nums.length; i++) {
			if (nums[i] < 0) {
				temp[c++] = -nums[i];
				nums[i] = 10;
			}
		}
		Arrays.sort(nums);
		Arrays.sort(temp);
		int y = 0;
		if (x % 2 == 0) {
			y = x;
		} 
		else {
			y = x - 1;
		}
		long ans = 1;
		int z = 0;
		for (int i = temp.length - 1; i >= 0 && z < y; i--) {
			ans = ans * temp[i];
			z++;
		}
		int j = 0;
		for (j = 0; j < nums.length; j++) {
			if (nums[j] != 0) {
				if (nums[j] != 10) {
					ans = ans * nums[j];
				}
			}
		}
		if (j == nums.length) {
			if (nums[1] == 1) {
				if (ans == 1) {
					return ans;
				}
			}
		}
		if (ans != 1) {
			return ans;
		} 
		else {
			return 0;
		}
	}
}