class Solution {
	byte[][] ocurr;
	boolean areSame(byte[] oc, byte[] freq) {
		for (int i = 0; i < oc.length; i++) {
			if (oc[i] != freq[i]) {
				return false;
			}
		}
		return true;
	}
	byte[] countFreqs(int pow) {
		byte[] freq = new byte[10];
		while (pow > 0) {
			int digit = pow % 10;
			freq[digit]++;
			pow /= 10;
		}
		return freq;
	}
	byte[][] fillOccurencesForEachPowerOf2() {
		byte[][] res = new byte[30][10];
		for (int i = 0; i < res.length; i++) {
			int pow = (int) Math.pow(2,i);
			res[i] = countFreqs(pow);
		}
		return res;
	}
	boolean reorderedPowerOf2(int n) {
		if (n == 1) {
			return true;
		}
		if (ocurr == null) {
			ocurr = fillOccurencesForEachPowerOf2();
		}
		byte[] freq = countFreqs(n);
		for (byte[] oc: ocurr) {	
			if (areSame(oc,freq)) {
				return true;
			}
		}
		return false;
	}
}