class Solution {
	boolean canFinish(int numCourses, int[][] prerequisites) {
		ArrayList<ArrayList<Integer>> adj = new ArrayList<>(numCourses);
		for (int i = 0; i < numCourses; i++) {
			adj.add(new ArrayList<Integer>());
		}
		for (int i = 0; i < prerequisites.length; i++) {
			adj.get(prerequisites[i][0]).add(prerequisites[i][1]);
		}
		int[] visited = new int[numCourses];
		for (int i = 0; i < numCourses; i++) {
			if (visited[i] == 0) {
				if (isCycleExist(i,adj,visited)) {
					return false;
				}
			}
		}
		return true;
	}
	boolean isCycleExist(int currNode, ArrayList<ArrayList<Integer>> adj, int[] visited) {
		if (visited[currNode] == 2) {
			return true;
		}
		visited[currNode] = 2;
		for (int neighbour: adj.get(currNode)) {	
			if (visited[neighbour] != 1) {
				if (isCycleExist(neighbour,adj,visited)) {
					return true;
				}
			}
		}
		visited[currNode] = 1;
		return false;
	}
}