class Solution {
	int binarySearch(int target, MountainArray mountainArr, int start, int end, boolean asc) {
		while (start <= end) {
			int mid = start + (end - start) / 2;
			if (mountainArr.get(mid) < target) {
				if (asc) {
					start = mid + 1;
				} 
				else {
					end = mid - 1;
				}
			} 
			else if (mountainArr.get(mid) > target) {
				if (asc) {
					end = mid - 1;
				} 
				else {
					start = mid + 1;
				}
			} 
			else {
				return mid;
			}
		}
		return -1;
	}
	int findInMountainArray(int target, MountainArray mountainArr) {
		int ans = binarySearch(target,mountainArr,0,peak(mountainArr),true);
		if (ans == -1) {
			ans = binarySearch(target,mountainArr,peak(mountainArr),mountainArr.length() - 1,false);
		}
		return ans;
	}
	int peak(MountainArray mountainArr) {
		int start = 0;
		int end = mountainArr.length() - 1;
		while (start < end) {
			int mid = start + (end - start) / 2;
			if (mountainArr.get(mid) < mountainArr.get(mid + 1)) {
				start = mid + 1;
			} 
			else {
				end = mid;
			}
		}
		return end;
	}
}