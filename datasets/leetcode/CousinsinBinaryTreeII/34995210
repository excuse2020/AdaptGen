class Solution {
	TreeNode replaceValueInTree(TreeNode root) {
		HashMap<TreeNode, Integer> mp = new HashMap<>();
		Queue<TreeNode> q = new LinkedList<>();
		q.add(root);
		root.val = 0;
		TreeNode temp = root;
		update(temp,q,mp,root.val);
		return root;
	}
	void update(TreeNode temp, Queue<TreeNode> q, HashMap<TreeNode, Integer> mp, long sum) {
		while (!q.isEmpty()) {
			int size = q.size();
			long childsum = 0;
			for (int i = 0; i < size; i++) {
				TreeNode top = q.poll();
				if (!mp.containsKey(top)) {
					top.val = (int) sum - top.val;
				} 
				else {
					top.val = (int) (sum - (top.val + mp.get(top)));
				}
				if (top.left != null) {
					childsum += top.left.val;
					q.add(top.left);
				}
				if (top.right != null) {
					childsum += top.right.val;
					q.add(top.right);
				}
				if (top.left != null && top.right != null) {
					mp.put(top.left,top.right.val);
					mp.put(top.right,top.left.val);
				}
			}
			sum = childsum;
		}
	}
}