class Solution {
	int f(int i, int j, ArrayList<Integer> arr, int[][] dp) {
		if (i > j) {
			return 0;
		}
		if (dp[i][j] != -1) {
			return dp[i][j];
		}
		int mini = Integer.MAX_VALUE;
		for (int ind = i; ind <= j; ind++) {
			int len = arr.get(j + 1) - arr.get(i - 1) + f(i,ind - 1,arr,dp) + f(ind + 1,j,arr,dp);
			mini = Math.min(mini,len);
		}
		return dp[i][j] = mini;
	}
	int minCost(int n, int[] cuts) {
		Arrays.sort(cuts);
		ArrayList<Integer> arr = new ArrayList<>();
		for (int i = 0; i < cuts.length; i++) {
			arr.add(cuts[i]);
		}
		arr.add(0,0);
		arr.add(n);
		int cutlen = arr.size();
		int[][] dp = new int[cutlen][cutlen];
		for (int[] row: dp) {	
			Arrays.fill(row,-1);
		}
		return f(1,cuts.length,arr,dp);
	}
}