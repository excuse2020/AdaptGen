class Solution {
	String removeDuplicates(String s, int k) {
		Stack<Character> charStack = new Stack<>();
		Stack<Integer> countStack = new Stack<>();
		int count = 0;
		while (count < s.length()) {
			if (!charStack.isEmpty() && charStack.peek() == s.charAt(count)) {
				countStack.push(countStack.pop() + 1);
			} 
			else {
				charStack.push(s.charAt(count));
				countStack.push(1);
			}
			if (countStack.peek() == k) {
				countStack.pop();
				charStack.pop();
			}
			count++;
		}
		StringBuilder sb = new StringBuilder();
		while (!charStack.isEmpty()) {
			char curr = charStack.pop();
			int curcount = countStack.pop();
			for (int i = 0; i < curcount; i++) {
				sb.insert(0,curr);
			}
		}
		return sb.toString();
	}
}