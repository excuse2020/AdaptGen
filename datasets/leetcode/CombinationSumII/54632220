class Solution {
	List<List<Integer>> combinationSum2(int[] candidates, int target) {
		List<List<Integer>> list = new ArrayList<>();
		Arrays.sort(candidates);
		int n = candidates.length;
		combinationSum2Helper(0,target,n,candidates,new ArrayList<>(),list);
		return list;
	}
	void combinationSum2Helper(int index, int target, int n, int[] candidates, List<Integer> ds, List<List<Integer>> list) {
		if (target == 0) {
			list.add(new ArrayList<>(ds));
			return;
		}
		for (int i = index; i < n; i++) {
			if (i != index && candidates[i] == candidates[i - 1]) {
				continue;
			}
			if (candidates[i] > target) {
				break;
			}
			ds.add(candidates[i]);
			combinationSum2Helper(i + 1,target - candidates[i],n,candidates,ds,list);
			ds.remove(ds.size() - 1);
		}
	}
}