class Solution {
	int dfs(int i, int j, int n, int m, int[][] grid, boolean visited) {
		if (i < 0 || j < 0 || i >= n || j >= m || grid[i][j] == 0 || visited[i][j] == true) {
			return 0;
		}
		visited[i][j] = true;
		int bottom = dfs(i + 1,j,n,m,grid,visited);
		int top = dfs(i - 1,j,n,m,grid,visited);
		int right = dfs(i,j + 1,n,m,grid,visited);
		int left = dfs(i,j - 1,n,m,grid,visited);
		visited[i][j] = false;
		return grid[i][j] + Math.max(Math.max(bottom,top),Math.max(left,right));
	}
	int getMaximumGold(int[][] grid) {
		int n = grid.length;
		int m = grid[0].length;
		int ans = 0;
		boolean visited = new boolean[n][m];
		for (int i = 0; i < n; i++) {
			Arrays.fill(visited[i],false);
		}
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < m; j++) {
				if (grid[i][j] != 0) {
					ans = Math.max(ans,dfs(i,j,n,m,grid,visited));
				}
			}
		}
		return ans;
	}
}