class Solution {
	int semiOrderedPermutation(int[] nums) {
		int step = 0;
		int l = nums.length;
		int k = 0;
		int e = 0;
		if (nums[0] == 1 && nums[l - 1] == l) {
			return 0;
		}
		if (nums[0] != 1) {
			for (int j = 0; j < l; j++) {
				if (nums[j] == 1) {
					k = j;
				}
			}
			for (int i = k; i > 0; i--) {
				if (nums[i - 1] > nums[i]) {
					int temp = nums[i - 1];
					nums[i - 1] = nums[i];
					nums[i] = temp;
					step++;
				}
			}
		}
		if (nums[l - 1] != l) {
			for (int n = 0; n < l; n++) {
				if (nums[n] == l) {
					e = n;
				}
			}
			for (int p = e; p < l - 1; p++) {
				if (nums[p + 1] < nums[p]) {
					int temp = nums[p + 1];
					nums[p + 1] = nums[p];
					nums[p] = temp;
					step++;
				}
			}
		}
		return step;
	}
}