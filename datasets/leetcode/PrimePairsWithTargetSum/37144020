class Solution {
	List<List<Integer>> findPrimePairs(int n) {
		List<List<Integer>> res = new ArrayList<>();
		if (n <= 3) {
			return res;
		}
		List<Integer> primes = new ArrayList<>();
		boolean[] arr = new boolean[n + 1];
		Arrays.fill(arr,true);
		for (int i = 2; i * i < n; i++) {
			if (arr[i]) {
				for (int j = 2 * i; j < n; j += i) {
					arr[j] = false;
				}
			}
		}
		for (int i = 2; i <= n; i++) {
			if (arr[i]) {
				primes.add(i);
			}
		}
		int left = 0;
		int right = primes.size() - 1;
		while (left <= right) {
			int sum = primes.get(left) + primes.get(right);
			if (sum < n) {
				left++;
			} 
			else if (sum > n) {
				right--;
			} 
			else {
				List<Integer> temp = new ArrayList<>();
				temp.add(primes.get(left));
				temp.add(primes.get(right));
				res.add(temp);
				left++;
				right--;
			}
		}
		return res;
	}
}