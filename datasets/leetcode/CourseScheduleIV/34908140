class Solution {
	Set<Integer> balance(Map<Integer, Set<Integer>> map, int i, boolean[] mem) {
		if (mem[i]) {
			return map.get(i);
		}
		Set<Integer> t = new HashSet<>(map.get(i));
		for (Integer a: t) {	
			map.get(i).addAll(balance(map,a,mem));
		}
		mem[i] = true;
		return map.get(i);
	}
	List<Boolean> checkIfPrerequisite(int numCourses, int[][] prerequisites, int[][] queries) {
		Map<Integer, Set<Integer>> map = new HashMap<>();
		boolean[] mem = new boolean[numCourses];
		for (int i = 0; i < numCourses; i++) {
			map.put(i,new HashSet());
		}
		for (int a: prerequisites) {	
			map.get(a[1]).add(a[0]);
		}
		for (int i = 0; i < numCourses; i++) {
			balance(map,i,mem);
		}
		List<Boolean> res = new ArrayList<>();
		for (int a: queries) {	
			res.add(map.get(a[1]).contains(a[0]));
		}
		return res;
	}
}