class Solution {
	ListNode findMid(ListNode head) {
		ListNode slow = head;
		ListNode fast = head.next;
		while (fast != null && fast.next != null) {
			slow = slow.next;
			fast = fast.next.next;
		}
		return slow;
	}
	ListNode merge(ListNode left, ListNode right) {
		ListNode d = new ListNode(-1);
		ListNode temp = d;
		while (left != null && right != null) {
			if (left.val <= right.val) {
				temp.next = left;
				temp = left;
				left = left.next;
			} 
			else {
				temp.next = right;
				temp = right;
				right = right.next;
			}
			if (left != null) {
				temp.next = left;
			} 
			else {
				temp.next = right;
			}
		}
		return d.next;
	}
	ListNode sortList(ListNode head) {
		if (head == null || head.next == null) {
			return head;
		}
		ListNode middle = findMid(head);
		ListNode right = middle.next;
		middle.next = null;
		ListNode left = head;
		left = sortList(left);
		right = sortList(right);
		return merge(left,right);
	}
}