class Solution {
	boolean canFinish(int numCourses, int[][] prerequisites) {
		List<Integer>[] graph = new ArrayList[numCourses];
		for (int i = 0; i < numCourses; i++) {
			graph[i] = new ArrayList();
		}
		for (int[] arr: prerequisites) {	
			graph[arr[1]].add(arr[0]);
		}
		boolean[] visited = new boolean[numCourses];
		boolean[] instack = new boolean[numCourses];
		for (int i = 0; i < numCourses; i++) {
			if (isCycle(i,visited,graph,instack)) {
				return false;
			}
		}
		return true;
	}
	boolean isCycle(int vertex, boolean[] visited, List<Integer>[] graph, boolean[] instack) {
		if (instack[vertex] == true) {
			return true;
		}
		if (visited[vertex] == true) {
			return false;
		}
		visited[vertex] = true;
		instack[vertex] = true;
		for (int child: graph[vertex]) {	
			if (isCycle(child,visited,graph,instack)) {
				return true;
			}
		}
		instack[vertex] = false;
		return false;
	}
}