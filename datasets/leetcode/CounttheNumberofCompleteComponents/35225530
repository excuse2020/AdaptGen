class Solution {
	boolean connected(Map<Integer, Set<Integer>> graph, int node, boolean[] visited) {
		Set<Integer> nexts = graph.get(node);
		for (Integer next: nexts) {	
			visited[next] = true;
			Set<Integer> connects = graph.get(next);
			if (!nexts.equals(connects)) {
				return false;
			}
		}
		return true;
	}
	int countCompleteComponents(int n, int[][] edges) {
		Map<Integer, Set<Integer>> graph = new HashMap<>();
		for (int i = 0; i < n; i++) {
			graph.put(i,new HashSet<>());
			graph.get(i).add(i);
		}
		for (int[] edge: edges) {	
			graph.get(edge[0]).add(edge[1]);
			graph.get(edge[1]).add(edge[0]);
		}
		int count = 0;
		boolean[] visited = new boolean[n];
		for (int i = 0; i < n; i++) {
			if (!visited[i]) {
				if (connected(graph,i,visited)) {
					count++;
				}
			}
		}
		return count;
	}
}