class Solution {
	int dp(int n, int diff, int[] rods, int[][] mem) {
		if (diff < 0) {
			return -1;
		}
		if (n == -1) {
			if (diff == 0) {
				return 0;
			}
			return -1;
		}
		if (mem[n][diff] != -2) {
			return mem[n][diff];
		}
		int temp1 = -1;
		if (diff - rods[n] > 0 && dp(n - 1,diff - rods[n],rods,mem) != -1) {
			temp1 = dp(n - 1,diff - rods[n],rods,mem);
		} 
		else if (dp(n - 1,rods[n] - diff,rods,mem) != -1) {
			temp1 = dp(n - 1,rods[n] - diff,rods,mem) + rods[n] - diff;
		}
		int temp2 = -1;
		if (dp(n - 1,rods[n] + diff,rods,mem) != -1) {
			temp2 = dp(n - 1,rods[n] + diff,rods,mem) + rods[n];
		}
		int temp3 = dp(n - 1,diff,rods,mem);
		int ans = Math.max(temp1,Math.max(temp2,temp3));
		mem[n][diff] = ans;
		return ans;
	}
	int tallestBillboard(int[] rods) {
		int sum = 0;
		for (int i = 0; i < rods.length; i++) {
			sum += rods[i];
		}
		int[][] mem = new int[rods.length][sum + 1];
		for (int i = 0; i < rods.length; i++) {
			Arrays.fill(mem[i],-2);
		}
		return dp(rods.length - 1,0,rods,mem);
	}
}