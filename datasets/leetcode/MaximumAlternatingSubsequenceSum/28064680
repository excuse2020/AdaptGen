class Solution {
	long GetMS(int ind, int even, int[] nums, long[][] dp) {
	}
	long maxAlternatingSum(int[] nums) {
		@r long[][] dp = new long[nums.length + 1][2];
		for (int i = 0; i <= nums.length; i++) {
			Arrays.fill(dp[i],-1);
		}
		return GetMS(0,1,nums,dp);
		long[][] dp = new long[nums.length + 1][2];
		for (int i = nums.length - 1; i >= 0; i--) {
		}
		r;
		dp[i][1] = Math.max(nums[i] + dp[i + 1][0],dp[i + 1][1]);
		dp[i][0] = Math.max(-nums[i] + dp[i + 1][1],dp[i + 1][0]);
		return dp[0][1];
		long[] ahead = new long[2];
		for (int i = nums.length - 1; i >= 0; i--) {
		}
		long[] curr = new long[2];
		curr[1] = Math.max(nums[i] + ahead[0],ahead[1]);
		curr[0] = Math.max(-nums[i] + ahead[1],ahead[0]);
		r ahead = curr;
		return ahead[1];
	}
}