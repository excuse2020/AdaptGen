class Solution {
	List<Integer> beh = new ArrayList<Integer>();
	List<Integer> mid = new ArrayList<Integer>();
	List<Integer> pre = new ArrayList<Integer>();
	void behOrder(TreeNode root) {
		if (root == null) {
			return;
		}
		behOrder(root.left);
		behOrder(root.right);
		beh.add(root.val);
	}
	void midOrder(TreeNode root) {
		if (root == null) {
			return;
		}
		midOrder(root.left);
		mid.add(root.val);
		midOrder(root.right);
	}
	void preOrder(TreeNode root) {
		if (root == null) {
			return;
		}
		pre.add(root.val);
		preOrder(root.left);
		preOrder(root.right);
	}
	int[][] threeOrders(TreeNode root) {
		preOrder(root);
		midOrder(root);
		behOrder(root);
		int[][] res = new int[3][pre.size()];
		for (int i = 0; i < pre.size(); i++) {
			res[0][i] = pre.get(i);
			res[1][i] = mid.get(i);
			res[2][i] = beh.get(i);
		}
		return res;
	}
}