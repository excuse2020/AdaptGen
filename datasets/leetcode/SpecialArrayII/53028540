class Solution {
	boolean binarySearch(int[] query, List<int[]> pairs) {
		int left = 0, right = pairs.size() - 1;
		while (left <= right) {
			int mid = left + (right - left) / 2;
			int[] pair = pairs.get(mid);
			if (query[0] > pair[1]) {
				left = mid + 1;
			} 
			else if (query[1] < pair[0]) {
				right = mid - 1;
			} 
			else if (query[0] >= pair[0] && query[1] <= pair[1]) {
				return true;
			} 
			else {
				return false;
			}
		}
		return false;
	}
	boolean[] isArraySpecial(int[] nums, int[][] queries) {
		List<int[]> pairs = new ArrayList<>();
		int j = 0, i = 0;
		while (i < nums.length) {
			if (i == j || nums[i] % 2 != nums[i - 1] % 2) {
				i++;
			} 
			else {
				pairs.add(new int{j, i - 1});
				j = i;
			}
		}
		pairs.add(new int{j, i - 1});
		boolean[] ans = new boolean[queries.length];
		for (i = 0; i < queries.length; i++) {
			ans[i] = binarySearch(queries[i],pairs);
		}
		return ans;
	}
}