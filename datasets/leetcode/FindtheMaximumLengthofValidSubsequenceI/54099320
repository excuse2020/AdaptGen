class Solution {
	int helper(int[] nums, int pattern) {
		if (pattern == 00) {
			int len = 0;
			for (int n: nums) {	
				if (n % 2 == 0) {
					len += 1;
				}
			}
			return len;
		} 
		else if (pattern == 11) {
			int len = 0;
			for (int n: nums) {	
				if (n % 2 == 1) {
					len += 1;
				}
			}
			return len;
		} 
		else if (pattern == 01) {
			int len = 0;
			int prev = 1;
			for (int n: nums) {	
				if (n % 2 != prev) {
					len += 1;
					prev = n % 2;
				}
			}
			return len;
		} 
		else {
			int len = 0;
			int prev = 0;
			for (int n: nums) {	
				if (n % 2 != prev) {
					len += 1;
					prev = n % 2;
				}
			}
			return len;
		}
	}
	int maximumLength(int[] nums) {
		return Math.max(helper(nums,00),Math.max(helper(nums,11),Math.max(helper(nums,01),helper(nums,10))));
	}
}