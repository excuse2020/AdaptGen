class Solution {
	int INF = 1_000;
	int maxDistance(int[][] grid) {
		int n = grid.length;
		for (int i = 0; i < n; ++i) {
			for (int j = 0; j < n; ++j) {
				if (grid[i][j] == 1) {
					grid[i][j] = 0;
				} 
				else if (grid[i][j] == 0) {
					int left = j > 0 ? grid[i][j - 1] + 1 : INF;
					int top = i > 0 ? grid[i - 1][j] + 1 : INF;
					grid[i][j] = Math.min(left,top);
				}
			}
		}
		int max = 0;
		for (int i = n - 1; i >= 0; --i) {
			for (int j = n - 1; j >= 0; --j) {
				if (grid[i][j] > 0) {
					int right = j < n - 1 ? grid[i][j + 1] + 1 : INF;
					int bottom = i < n - 1 ? grid[i + 1][j] + 1 : INF;
					grid[i][j] = Math.min(grid[i][j],Math.min(right,bottom));
					max = Math.max(grid[i][j],max);
				}
			}
		}
		return max == 0 || max >= INF ? -1 : max;
	}
}