class Solution {
	int res = 0;
	boolean[][] visited;
	int dfs(int[][] grid, int row, int col, int cnt) {
		if (row < 0 || col < 0 || row >= grid.length || col >= grid[0].length || grid[row][col] == 0 || visited[row][col]) {
			return cnt;
		}
		visited[row][col] = true;
		cnt += grid[row][col];
		res = Math.max(res,cnt);
		cnt = dfs(grid,row + 1,col,cnt);
		cnt = dfs(grid,row,col + 1,cnt);
		cnt = dfs(grid,row - 1,col,cnt);
		cnt = dfs(grid,row,col - 1,cnt);
		return cnt;
	}
	int findMaxFish(int[][] grid) {
		for (int i = 0; i < grid.length; i++) {
			for (int j = 0; j < grid[0].length; j++) {
				visited = new boolean[grid.length][grid[0].length];
				dfs(grid,i,j,0);
			}
		}
		return res;
	}
}