class Solution {
	long calculate(int[] arr, int n) {
		long sum = 0;
		for (int i = 0; i < n - 1; i++) {
			if (arr[i + 1] > arr[i]) {
				sum += arr[i + 1] - arr[i];
			}
		}
		return sum;
	}
	long make(int[] arr) {
		int n = arr.length, i = 1, x = 2;
		if (n == 0) {
			return 0l;
		}
		if (n == 1) {
			return (arr[0]);
		}
		int[] nums = new int[2 * n];
		nums[1] = (arr[0]);
		if ((arr[1]) < (arr[0])) {
			nums[2] = (arr[1]);
			x = 3;
		}
		while (i < n - 1) {
			if ((arr[i]) > (arr[i + 1])) {
				nums[x++] = (arr[i]);
				nums[x++] = (arr[i + 1]);
			}
			i++;
		}
		nums[x++] = (arr[n - 1]);
		return calculate(nums,x);
	}
	long minimumOperations(int[] nums, int[] target) {
		int n = nums.length, i = 0, j = 0;
		long ans = 0;
		while (j < n) {
			while (j < n && (target[j] - nums[j]) < 0) {
				nums[j] = -(target[j] - nums[j]);
				j++;
			}
			ans += make(Arrays.copyOfRange(nums,i,j));
			i = j;
			while (j < n && (target[j] - nums[j]) >= 0) {
				nums[j] = (target[j] - nums[j]);
				j++;
			}
			ans += make(Arrays.copyOfRange(nums,i,j));
			i = j;
		}
		return ans;
	}
}