class Solution {
	List<Integer> findAllPeople(int n, int[][] meetings, int firstPerson) {
		HashSet<Integer> agents = new HashSet();
		Arrays.sort(meetings,new Comparator<int[]>());
		agents.add(0);
		agents.add(firstPerson);
		int ts = -1;
		List<Integer> candidates = new ArrayList();
		boolean converged;
		for (int i = 0; i < meetings.length; i++) {
			while (i < meetings.length && meetings[i][2] == ts) {
				candidates.add(meetings[i][0]);
				candidates.add(meetings[i][1]);
				i++;
			}
			converged = false;
			while (!converged) {
				converged = true;
				for (int k = 0; k < candidates.size(); k += 2) {
					int oldSize = agents.size();
					if (agents.contains(candidates.get(k)) || agents.contains(candidates.get(k + 1))) {
						agents.add(candidates.get(k));
						agents.add(candidates.get(k + 1));
					}
					if (agents.size() > oldSize) {
						converged = false;
					}
				}
			}
			candidates.clear();
			if (i >= meetings.length) {
				break;
			}
			if (agents.contains(meetings[i][0]) || agents.contains(meetings[i][1])) {
				agents.add(meetings[i][0]);
				agents.add(meetings[i][1]);
			} 
			else {
				candidates.add(meetings[i][0]);
				candidates.add(meetings[i][1]);
				ts = meetings[i][2];
			}
		}
		return new ArrayList<Integer>(agents);
	}
}