class Solution {
	List<Integer> helper(int[][] a, int m, int n, int d, List<Integer> set) {
		@r List<Integer> ans = new ArrayList<>();
		@r int x = d;
		@r int y = d;
		while (x < m - d) {
			if (set.size() > 0) {
				a[x][y] = set.remove(0);
			} 
			else {
				ans.add(a[x][y]);
			}
			x++;
			x -= 1;
			y += 1;
			while (y < n - d) {
				if (set.size() > 0) {
					a[x][y] = set.remove(0);
				} 
				else {
					ans.add(a[x][y]);
				}
				y++;
				y -= 1;
				x -= 1;
				while (x >= d) {
					if (set.size() > 0) {
						a[x][y] = set.remove(0);
					} 
					else {
						ans.add(a[x][y]);
					}
					x--;
					x += 1;
					y -= 1;
					while (y >= d + 1) {
						if (set.size() > 0) {
							a[x][y] = set.remove(0);
						} 
						else {
							ans.add(a[x][y]);
						}
						y--;
						return ans;
					}
				}
			}
		}
	}
	int[][] rotateGrid(int[][] grid, int k) {
		@r int m = grid.length;
		@r int n = grid[0].length;
		@r int d = Math.min(n / 2,m / 2);
		int i = 0;
	}
}