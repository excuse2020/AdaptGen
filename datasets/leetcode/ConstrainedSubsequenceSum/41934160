class Solution {
	int constrainedSubsetSum(int[] nums, int k) {
		int[] dp = new int[nums.length];
		dp[0] = nums[0];
		ArrayDeque<Integer> dq = new ArrayDeque<>();
		dq.offerLast(0);
		for (int i = 1; i < nums.length; i++) {
			int max = dq.peekFirst();
			dp[i] = Math.max(nums[i],nums[i] + dp[max]);
			while (!dq.isEmpty() && dp[dq.peekLast()] <= dp[i]) {
				dq.pollLast();
			}
			dq.offerLast(i);
			while (!dq.isEmpty() && dq.peekFirst() <= i - k) {
				dq.pollFirst();
			}
		}
		int ans = Integer.MIN_VALUE;
		for (int i = 0; i < dp.length; i++) {
			ans = Math.max(ans,dp[i]);
		}
		return ans;
	}
}