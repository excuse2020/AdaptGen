class Solution {
	int maxPerformance(int n, int[] speed, int[] efficiency, int k) {
		int mod = 1000000007;
		int[][] performValue = new int[n][2];
		for (int i = 0; i < n; i++) {
			performValue[i][0] = efficiency[i];
			performValue[i][1] = speed[i];
		}
		Arrays.sort(performValue,(a, b) -> {b[0] - a[0]});
		long maxPerformence = Long.MIN_VALUE;
		PriorityQueue<Integer> topPerformer = new PriorityQueue<>();
		long sum = 0;
		for (int i = 0; i < n; i++) {
			sum += performValue[i][1];
			topPerformer.add(performValue[i][1]);
			if (topPerformer.size() > k) {
				sum -= topPerformer.remove();
			}
			long performence = (sum * performValue[i][0]);
			maxPerformence = Math.max(maxPerformence,performence);
		}
		return (int) (maxPerformence % mod);
	}
}