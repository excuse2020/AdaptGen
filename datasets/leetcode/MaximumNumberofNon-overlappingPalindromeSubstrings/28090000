class Solution {
	int[] dp;
	int p = 31, mod1 = (int) (1e9 + 7);
	int[] record;
	int getMax(int i, int n) {
		if (i >= n) {
			return 0;
		}
		if (dp[i] != -1) {
			return dp[i];
		}
		int ans = getMax(i + 1,n);
		if (record[i] != -1) {
			ans = Math.max(ans,1 + getMax(i + record[i],n));
		}
		return dp[i] = ans;
	}
	int maxPalindromes(String s, int k) {
		int n = s.length();
		record = new int[n];
		Arrays.fill(record,-1);
		util(s,n,k);
		dp = new int[n];
		Arrays.fill(dp,-1);
		return getMax(0,n);
	}
	void util(String s, int n, int k) {
		int ii = 0;
		long hashff = 0, hashss = 0, power = 1;
		int i = ii;
		int ascii;
	}
}