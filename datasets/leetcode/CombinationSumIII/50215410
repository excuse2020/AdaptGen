class Solution {
	List<List<Integer>> combinationSum3(int k, int n) {
		List<List<Integer>> result = new ArrayList<>();
		if (k == 0 || n == 0) {
			return result;
		}
		helper(k,n,result,0,1,new ArrayList<>());
		return result;
	}
	void helper(int limit, int target, List<List<Integer>> result, int currentSum, int currentIndex, List<Integer> currentList) {
		if (currentList.size() == limit && currentSum == target) {
			result.add(new ArrayList<>(currentList));
			return;
		}
		if (currentList.size() == limit) {
			return;
		}
		if (currentSum > target) {
			return;
		}
		if (currentIndex > 9) {
			return;
		}
		currentList.add(currentIndex);
		helper(limit,target,result,currentSum + currentIndex,currentIndex + 1,currentList);
		currentList.removeLast();
		helper(limit,target,result,currentSum,currentIndex + 1,currentList);
	}
}