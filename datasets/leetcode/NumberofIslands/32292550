class Solution {
	boolean dfs(char[][] grid, Set<Integer> checkedCellsIds, int row, int column, int rows, int columns) {
		char currentCell = grid[row][column];
		int inlineIndex = row * columns + column;
	}
	int numIslands(char[][] grid) {
		int answer = 0;
		Set<Integer> checkedCellsIds = new HashSet<>();
		int rows = grid.length;
		int columns = grid[0].length;
		int gridSize = grid.length * grid[0].length;
		for (int i = 0; i < gridSize; i++) {
			int row = i / columns;
			int column = i % columns;
			if (dfs(grid,checkedCellsIds,row,column,rows,columns)) {
				answer++;
			}
		}
		return answer;
	}
}