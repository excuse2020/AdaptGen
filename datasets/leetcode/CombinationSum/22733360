class Solution {
	List<List<Integer>> combinationSum(int[] candidates, int target) {
		List<List<Integer>> list = new ArrayList<>();
		List<Integer> tempList = new ArrayList<>();
		sum(candidates,target,tempList,list,0);
		return list;
	}
	void sum(int[] candidates, int target, List<Integer> tempList, List<List<Integer>> list, int index) {
		if (index == candidates.length) {
			if (target == 0) {
				list.add(new ArrayList(tempList));
			}
			return;
		}
		if (target >= candidates[index]) {
			tempList.add(candidates[index]);
			sum(candidates,target - candidates[index],tempList,list,index);
			tempList.remove(tempList.size() - 1);
		}
		sum(candidates,target,tempList,list,index + 1);
	}
}