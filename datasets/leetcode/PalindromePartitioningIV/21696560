class Solution {
	boolean checkPartitioning(String s) {
		int n = s.length();
		int dp = new int[n][n];
		for (int i = 0; i < n; i++) {
			dp[i][i] = 1;
		}
		for (int i = 0; i < n - 1; i++) {
			if (s.charAt(i) == s.charAt(i + 1)) {
				dp[i][i + 1] = 1;
			}
		}
		int count = n - 2;
		int j = n - count;
		while (count > 0) {
			for (int i = 0; i < count; i++) {
				if (s.charAt(i) == s.charAt(j) && dp[i + 1][j - 1] != 0) {
					dp[i][j] = 1;
				}
				j++;
			}
			count--;
			j = n - count;
		}
		for (int i = 1; i < n - 1; i++) {
			if (dp[0][i - 1] != 1) {
				continue;
			}
			for (j = i; j < n - 1; j++) {
				if (dp[i][j] == 1 && dp[j + 1][n - 1] == 1) {
					return true;
				}
			}
		}
		return false;
	}
}