class Solution {
	HashMap<Integer, Long> levelSum;
	HashMap<TreeNode, Long> parentSum;
	TreeNode replaceValueInTree(TreeNode root) {
		Queue<TreeNode> q = new LinkedList<>();
		q.add(root);
		parentSum = new HashMap<>();
		levelSum = new HashMap<>();
		parentSum.put(null,(long) (root.val));
		int level = 0;
		while (!q.isEmpty()) {
			int size = q.size();
			long sum = 0;
			while (size-- > 0) {
				TreeNode temp = q.poll();
				sum += temp.val;
				long t = 0;
				if (temp.left != null) {
					q.add(temp.left);
					t += temp.left.val;
				}
				if (temp.right != null) {
					t += temp.right.val;
					q.add(temp.right);
				}
				parentSum.put(temp,t);
			}
			levelSum.put(level,sum);
			level++;
		}
		solve(root,null,0);
		return root;
	}
	void solve(TreeNode root, TreeNode parent, int depth) {
		if (root == null) {
			return;
		}
		long sumLevel = levelSum.get(depth);
		long sumParent = parentSum.get(parent);
		root.val = (int) (sumLevel - sumParent);
		solve(root.left,root,depth + 1);
		solve(root.right,root,depth + 1);
	}
}