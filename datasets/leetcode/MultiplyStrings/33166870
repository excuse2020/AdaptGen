class Solution {
	String add(String num1, String num2) {
		if (num1.length() == 0) {
			return num2;
		}
		if (num2.length() == 0) {
			return num1;
		}
		StringBuilder result = new StringBuilder();
		int index = 1;
		int remain = 0;
		while (index <= num1.length() || index <= num2.length()) {
			int num1Value = index <= num1.length() ? Integer.parseInt("" + num1.charAt(num1.length() - index)) : 0;
			int num2Value = index <= num2.length() ? Integer.parseInt("" + num2.charAt(num2.length() - index)) : 0;
			remain += num1Value + num2Value;
			result.append(remain % 10);
			remain = remain / 10;
			index++;
		}
		if (remain != 0) {
			result.append(remain);
		}
		return result.reverse().toString();
	}
	String addZeros(int count) {
		String result = "";
		for (int i = 0; i < count; i++) {
			result += "0";
		}
		return result;
	}
	String multiply(String num1, String num2) {
		String topNumber = num1.length() <= num2.length() ? num2 : num1;
		String downNumber = num1.length() <= num2.length() ? num1 : num2;
		List<String> sumitionList = new LinkedList<String>();
		if (num1.length() == 0) {
			return num2;
		}
		if (num2.length() == 0) {
			return num1;
		}
		if ((num2.length() == 1 && Integer.parseInt(num2) == 0) || (num1.length() == 1 && Integer.parseInt(num1) == 0)) {
			return "0";
		}
		int indexDown = 1;
		while (indexDown <= downNumber.length()) {
			int downNumberValue = Integer.parseInt("" + downNumber.charAt(downNumber.length() - indexDown));
			int remain = 0;
			int indexTop = 1;
			StringBuilder subResult = new StringBuilder();
			while (indexTop <= topNumber.length()) {
				int topNumberValue = Integer.parseInt("" + topNumber.charAt(topNumber.length() - indexTop));
				int newValue = (topNumberValue * downNumberValue) + remain;
				subResult.append(newValue % 10);
				remain = newValue / 10;
				indexTop++;
			}
			if (remain != 0) {
				subResult.append(remain);
			}
			sumitionList.add(subResult.reverse().toString());
			indexDown++;
		}
		StringBuilder totalSum = new StringBuilder("0");
		for (int i = 0; i < sumitionList.size(); i++) {
			totalSum = new StringBuilder(add(totalSum.toString(),sumitionList.get(i) + addZeros(i)));
		}
		return totalSum.toString();
	}
}