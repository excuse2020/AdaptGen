class Solution {
	TreeNode reConstructBinaryTree(int[] pre, int[] vin) {
		int j = vin.length - 1;
		if (j < 0) {
			return null;
		} 
		else {
			int i = 0;
			int h = 0;
			return reConstructBinaryTreeRoot(pre,vin,i,j,h);
		}
	}
	TreeNode reConstructBinaryTreeRoot(int[] pre, int[] vin, int i, int j, int h) {
		if (i > j) {
			return null;
		} 
		else {
			TreeNode root = new TreeNode(pre[h]);
			int m;
			for (m = i; m <= j; m++) {
				if (pre[h] == vin[m]) {
					break;
				}
			}
			int lh, rh;
			lh = h + 1;
			rh = h + m - i + 1;
			root.left = reConstructBinaryTreeRoot(pre,vin,i,m - 1,lh);
			root.right = reConstructBinaryTreeRoot(pre,vin,m + 1,j,rh);
			return root;
		}
	}
}