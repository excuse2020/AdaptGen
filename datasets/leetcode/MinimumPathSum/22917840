class Solution {
	int minPathSum(int[][] grid) {
		int n = grid.length;
		int m = grid[0].length;
		int[][] dp = new int[n][m];
		for (int[] i: dp) {	
			Arrays.fill(i,-1);
		}
		int sum = pathSum(grid,n,m,0,0,dp);
		return sum;
	}
	int pathSum(int[][] grid, int n, int m, int i, int j, int[][] dp) {
		if (i == n - 1 && j == m - 1) {
			return grid[i][j];
		}
		if (i == n || j == m) {
			return Integer.MAX_VALUE;
		}
		if (dp[i][j] != -1) {
			return dp[i][j];
		}
		int rightSum = pathSum(grid,n,m,i,j + 1,dp);
		int downSum = pathSum(grid,n,m,i + 1,j,dp);
		dp[i][j] = grid[i][j] + Math.min(rightSum,downSum);
		return dp[i][j];
	}
}