class Solution {
	int[] maxSlidingWindow(int[] nums, int k) {
		if (nums == null || nums.length == 0 || k <= 0) {
			return new int[0];
		}
		int n = nums.length;
		int[] leftMax = new int[n];
		int[] rightMax = new int[n];
		leftMax[0] = nums[0];
		for (int i = 1; i < n; i++) {
			if (i % k == 0) {
				leftMax[i] = nums[i];
			} 
			else {
				leftMax[i] = Math.max(leftMax[i - 1],nums[i]);
			}
		}
		rightMax[n - 1] = nums[n - 1];
		for (int i = n - 2; i >= 0; i--) {
			if ((i + 1) % k == 0) {
				rightMax[i] = nums[i];
			} 
			else {
				rightMax[i] = Math.max(rightMax[i + 1],nums[i]);
			}
		}
		int[] result = new int[n - k + 1];
		for (int i = 0; i <= n - k; i++) {
			result[i] = Math.max(rightMax[i],leftMax[i + k - 1]);
		}
		return result;
	}
}