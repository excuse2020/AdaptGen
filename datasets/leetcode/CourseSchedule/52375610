class Solution {
	boolean canFinish(int numCourses, int[][] prerequisites) {
		if (prerequisites.length == 0) {
			return true;
		}
		int[] indegree = new int[numCourses];
		List<List<Integer>> adj = new ArrayList<>();
		for (int i = 0; i < numCourses; i += 1) {
			adj.add(new ArrayList<>());
		}
		Queue<Integer> queue = new LinkedList<>();
		for (int[] pre: prerequisites) {	
			indegree[pre[0]] += 1;
			adj.get(pre[1]).add(pre[0]);
		}
		for (int i = 0; i < numCourses; i += 1) {
			if (indegree[i] == 0) {
				queue.add(i);
			}
		}
		int visited = 0;
		while (!queue.isEmpty()) {
			int curr = queue.poll();
			visited += 1;
			for (int neighbor: adj.get(curr)) {	
				indegree[neighbor] -= 1;
				if (indegree[neighbor] == 0) {
					queue.add(neighbor);
				}
			}
		}
		return visited == numCourses;
	}
}