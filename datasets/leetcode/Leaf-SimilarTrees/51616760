class Solution {
	ArrayList<Integer> getDepth1(TreeNode root1, ArrayList<Integer> arr1) {
		if (root1 == null) {
			return arr1;
		}
		if (root1.left == null && root1.right == null) {
			arr1.add(root1.val);
			return arr1;
		} 
		else {
			arr1 = getDepth1(root1.left,arr1);
			arr1 = getDepth1(root1.right,arr1);
			return arr1;
		}
	}
	ArrayList<Integer> getDepth2(TreeNode root1, ArrayList<Integer> arr1) {
		if (root1 == null) {
			return arr1;
		}
		if (root1.left == null && root1.right == null) {
			arr1.add(root1.val);
			return arr1;
		} 
		else {
			arr1 = getDepth2(root1.left,arr1);
			arr1 = getDepth2(root1.right,arr1);
			return arr1;
		}
	}
	boolean leafSimilar(TreeNode root1, TreeNode root2) {
		ArrayList<Integer> arr1 = getDepth1(root1,new ArrayList<Integer>());
		ArrayList<Integer> arr2 = getDepth2(root2,new ArrayList<Integer>());
		if (arr1.size() != arr2.size()) {
			return false;
		}
		for (int i = 0; i < arr1.size(); i++) {
			int leaf1 = arr1.get(i);
			int leaf2 = arr2.get(i);
			if (leaf1 != leaf2) {
				return false;
			}
		}
		return true;
	}
}