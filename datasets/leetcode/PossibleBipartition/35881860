class Solution {
	boolean dfs(int person, int color, int[] colors, List<List<Integer>> graph) {
		colors[person] = color;
		for (int neighbor: graph.get(person)) {	
			if (colors[neighbor] == color) {
				return false;
			}
			if (colors[neighbor] == 0 && !dfs(neighbor,-color,colors,graph)) {
				return false;
			}
		}
		return true;
	}
	boolean possibleBipartition(int n, int[][] dislikes) {
		List<List<Integer>> graph = new ArrayList<>();
		for (int i = 0; i <= n; i++) {
			graph.add(new ArrayList<>());
		}
		for (int[] dislike: dislikes) {	
			int a = dislike[0];
			int b = dislike[1];
			graph.get(a).add(b);
			graph.get(b).add(a);
		}
		int[] colors = new int[n + 1];
		for (int i = 1; i <= n; i++) {
			if (colors[i] == 0 && !dfs(i,1,colors,graph)) {
				return false;
			}
		}
		return true;
	}
}
class Solution {
	boolean dfs(int person, int color, int[] colors, List<List<Integer>> graph) {
		colors[person] = color;
		for (int neighbor: graph.get(person)) {	
			if (colors[neighbor] == color) {
				return false;
			}
			if (colors[neighbor] == 0 && !dfs(neighbor,-color,colors,graph)) {
				return false;
			}
		}
		return true;
	}
	boolean possibleBipartition(int n, int[][] dislikes) {
		List<List<Integer>> graph = new ArrayList<>();
		for (int i = 0; i <= n; i++) {
			graph.add(new ArrayList<>());
		}
		for (int[] dislike: dislikes) {	
			int a = dislike[0];
			int b = dislike[1];
			graph.get(a).add(b);
			graph.get(b).add(a);
		}
		int[] colors = new int[n + 1];
		for (int i = 1; i <= n; i++) {
			if (colors[i] == 0 && !dfs(i,1,colors,graph)) {
				return false;
			}
		}
		return true;
	}
}