class Solution {
	int result = 0;
	int countPairs(TreeNode root, int distance) {
		dfs(root,distance);
		return result;
	}
	List<Integer> dfs(TreeNode node, int distance) {
		if (node == null) {
			return new ArrayList<>();
		}
		if (node.left == null && node.right == null) {
			List<Integer> path = new ArrayList<>();
			path.add(0);
			return path;
		}
		List<Integer> leftPath = dfs(node.left,distance);
		List<Integer> rightPath = dfs(node.right,distance);
		for (int leftDepth: leftPath) {	
			for (int rightDepth: rightPath) {	
				if (leftDepth + rightDepth <= distance) {
					result++;
				}
			}
		}
		List<Integer> path = new ArrayList<>();
		for (int depth: leftPath) {	
			path.add(depth + 1);
		}
		for (int depth: rightPath) {	
			path.add(depth + 1);
		}
		return path;
	}
}