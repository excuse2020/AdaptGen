class Solution {
	int[][] dp = new int[105][105];
	int solve(int r, int c, int[][] grid) {
		int n = grid.length, m = grid[0].length;
		if (r < 0 || c < 0 || grid[r][c] == 1) {
			return 0;
		}
		if (dp[r][c] != -1) {
			return dp[r][c];
		}
		if (r == 0 && c == 0) {
			return 1;
		}
		int cost = 0;
		int a = solve(r,c - 1,grid);
		int b = solve(r - 1,c,grid);
		cost += a + b;
		return dp[r][c] = cost;
	}
	int uniquePathsWithObstacles(int[][] obstacleGrid) {
		int n = obstacleGrid.length, m = obstacleGrid[0].length;
		for (int[] ar: dp) {	
			Arrays.fill(ar,-1);
		}
		return solve(n - 1,m - 1,obstacleGrid);
	}
}