class Solution {
	int binarySearchL(MountainArray mountainArr, int peak, int target) {
		int start = 0;
		int end = peak - 1;
		while (start <= end) {
			int mid = start + (end - start) / 2;
			int temp = mountainArr.get(mid);
			if (temp > target) {
				end = mid - 1;
			} 
			else if (temp < target) {
				start = mid + 1;
			} 
			else {
				return mid;
			}
		}
		return -1;
	}
	int binarySearchR(MountainArray mountainArr, int peak, int target) {
		int end = mountainArr.length() - 1;
		int start = peak + 1;
		while (start <= end) {
			int mid = start + (end - start) / 2;
			int temp = mountainArr.get(mid);
			if (temp < target) {
				end = mid - 1;
			} 
			else if (temp > target) {
				start = mid + 1;
			} 
			else {
				return mid;
			}
		}
		return -1;
	}
	int findInMountainArray(int target, MountainArray mountainArr) {
		int peak = findPeak(mountainArr);
		if (target == mountainArr.get(peak)) {
			return peak;
		}
		int left = binarySearchL(mountainArr,peak,target);
		if (binarySearchL(mountainArr,peak,target) != -1) {
			return left;
		}
		int right = binarySearchR(mountainArr,peak,target);
		if (binarySearchR(mountainArr,peak,target) != -1) {
			return right;
		}
		return -1;
	}
	int findPeak(MountainArray mountainArr) {
		int start = 0;
		int end = mountainArr.length() - 1;
		while (start < end) {
			int mid = start + (end - start) / 2;
			if (mountainArr.get(mid) > mountainArr.get(mid + 1)) {
				end = mid;
			} 
			else {
				start = mid + 1;
			}
		}
		return start;
	}
}