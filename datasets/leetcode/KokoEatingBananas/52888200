class Solution {
	boolean istrue(int[] piles, int h, int mid) {
		int time = 0;
		for (int i = 0; i < piles.length; i++) {
			int x = (int) Math.ceil(piles[i] * 1.0 / mid);
			time = time + x;
		}
		return time <= h;
	}
	int minEatingSpeed(int[] piles, int h) {
		int max = Integer.MIN_VALUE;
		for (int i = 0; i < piles.length; i++) {
			max = Math.max(max,piles[i]);
		}
		if (piles.length == h) {
			return max;
		}
		int low = 0, high = max, speed = 0;
		while (low <= high) {
			int mid = low + (high - low) / 2;
			if (istrue(piles,h,mid) == true) {
				speed = mid;
				high = mid - 1;
			} 
			else {
				low = mid + 1;
			}
		}
		return speed;
	}
}