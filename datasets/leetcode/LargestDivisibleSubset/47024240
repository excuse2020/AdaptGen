class Solution {
	List<Integer> largestDivisibleSubset(int[] nums) {
		int n = nums.length;
		Arrays.sort(nums);
		List<Integer> ans = new ArrayList<>();
		int[] dp = new int[n];
		int[] prev = new int[n];
		Arrays.fill(dp,1);
		Arrays.fill(prev,-1);
		int max = 1, dpindex = 0;
		dp[0] = 1;
		for (int i = 1; i < n; i++) {
			for (int j = i - 1; j >= 0; j--) {
				if (nums[i] % nums[j] == 0 || nums[j] % nums[i] == 0) {
					if (dp[i] < dp[j] + 1) {
						dp[i] = dp[j] + 1;
						prev[i] = j;
						if (max < dp[i]) {
							max = dp[i];
							dpindex = i;
						}
					}
				}
			}
		}
		while (dpindex != -1) {
			ans.add(nums[dpindex]);
			dpindex = prev[dpindex];
		}
		return ans;
	}
}