class Solution {
	ListNode getMid(ListNode head) {
		ListNode slow = head;
		ListNode fast = head;
		while (fast != null) {
			if (fast.next == null) {
				break;
			}
			slow = slow.next;
			fast = fast.next.next;
		}
		return slow;
	}
	int pairSum(ListNode head) {
		ListNode mid = getMid(head);
		ListNode rev = reverse(mid);
		int ans = 0;
		while (rev != null) {
			ans = Math.max((head.val + rev.val),ans);
			head = head.next;
			rev = rev.next;
		}
		return ans;
	}
	ListNode reverse(ListNode head) {
		if (head == null || head.next == null) {
			return head;
		}
		ListNode prev = head;
		ListNode cur = head.next;
		while (cur != null) {
			ListNode next = cur.next;
			cur.next = prev;
			prev = cur;
			cur = next;
		}
		head.next = null;
		head = prev;
		return prev;
	}
}