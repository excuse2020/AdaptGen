class Solution {
	int calculate(String s) {
		int n = s.length();
		Stack<String> st = new Stack<>();
		int i = 0;
		char c = s.charAt(i);
	}
	void evaluateAndAdd(Stack<String> st) {
		int amount = 0;
		while (!st.isEmpty()) {
			String topElement = st.pop();
			if (Objects.equals(topElement,"(")) {
				if (!st.isEmpty() && Objects.equals(st.peek(),"-")) {
					amount = amount * -1;
					st.pop();
				}
				break;
			}
			amount = amount + Integer.parseInt(topElement);
		}
		st.push(String.valueOf(amount));
	}
	int evaluateSumOfStack(Stack<String> st) {
		int sum = 0;
		while (!st.isEmpty()) {
			String topElement = st.pop();
			if (Objects.equals(topElement,"-")) {
				sum = sum * -1;
			} 
			else {
				sum = sum + Integer.parseInt(topElement);
			}
		}
		return sum;
	}
	int getNumber(Character startChar, Integer index, Stack<String> st, String s) {
		StringBuilder word = new StringBuilder();
		word.append(startChar);
		while (index + 1 < s.length() && isDigit(s.charAt(index + 1))) {
			index++;
			word.append(s.charAt(index));
		}
		st.push(word.toString());
		return index;
	}
	boolean isDigit(Character c) {
	}
}