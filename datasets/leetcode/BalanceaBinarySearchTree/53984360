class Solution {
	TreeNode balance(ArrayList<Integer> sortedValues, int low, int high) {
		if (low > high) {
			return null;
		}
		int mid = (low + high) / 2;
		TreeNode root = new TreeNode(sortedValues.get(mid));
		root.left = balance(sortedValues,low,mid - 1);
		root.right = balance(sortedValues,mid + 1,high);
		return root;
	}
	TreeNode balanceBST(TreeNode root) {
		ArrayList<Integer> sortedValues = new ArrayList<>();
		inorder(root,sortedValues);
		return balance(sortedValues,0,sortedValues.size() - 1);
	}
	void inorder(TreeNode root, ArrayList<Integer> sortedValues) {
		if (root == null) {
			return;
		}
		inorder(root.left,sortedValues);
		sortedValues.add(root.val);
		inorder(root.right,sortedValues);
	}
}