class Solution {
	void firstOrder(TreeNode root, ArrayList<Integer> scanList) {
		if (root != null) {
			scanList.add(root.val);
			firstOrder(root.left,scanList);
			firstOrder(root.right,scanList);
		}
	}
	void lastOrder(TreeNode root, ArrayList<Integer> scanList) {
		if (root != null) {
			lastOrder(root.left,scanList);
			lastOrder(root.right,scanList);
			scanList.add(root.val);
		}
	}
	void middleOrder(TreeNode root, ArrayList<Integer> scanList) {
		if (root != null) {
			middleOrder(root.left,scanList);
			scanList.add(root.val);
			middleOrder(root.right,scanList);
		}
	}
	int[][] threeOrders(TreeNode root) {
		ArrayList<ArrayList<Integer>> returnList = new ArrayList<>();
		returnList.add(new ArrayList<Integer>());
		returnList.add(new ArrayList<Integer>());
		returnList.add(new ArrayList<Integer>());
		firstOrder(root,returnList.get(0));
		middleOrder(root,returnList.get(1));
		lastOrder(root,returnList.get(2));
		int[][] returnMatrix = new int[3];
		for (int i = 0; i < 3; i++) {
			returnMatrix[i] = new int[returnList.get(i).size()];
			for (int j = 0; j < returnList.get(i).size(); j++) {
				returnMatrix[i][j] = returnList.get(i).get(j);
			}
		}
		return returnMatrix;
	}
}