class Solution {
	long calculateSum(List<Integer> maxHeights, int peakIndex) {
		long minValueFromLeft = Long.MAX_VALUE;
		long sumLeft = 0;
		for (int i = peakIndex - 1; i >= 0; i--) {
			minValueFromLeft = Math.min(maxHeights.get(peakIndex),Math.min(minValueFromLeft,maxHeights.get(i)));
			sumLeft = sumLeft + minValueFromLeft;
		}
		long minValueFromRight = Long.MAX_VALUE;
		long sumRight = 0;
		for (int i = peakIndex + 1; i < maxHeights.size(); i++) {
			minValueFromRight = Math.min(maxHeights.get(peakIndex),Math.min(minValueFromRight,maxHeights.get(i)));
			sumRight = sumRight + minValueFromRight;
		}
		return sumLeft + sumRight;
	}
	long maximumSumOfHeights(List<Integer> maxHeights) {
		long result = Long.MIN_VALUE;
		for (int i = 0; i < maxHeights.size(); i++) {
			result = Math.max(result,calculateSum(maxHeights,i));
		}
		return result;
	}
}