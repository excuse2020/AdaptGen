class Solution {
	ArrayList<Integer> getMazePaths(int[][] grid, int sr, int sc, int dr, int dc) {
		if (sr > dr || sc > dc) {
			return new ArrayList<>();
		}
		if (sr == dr && sc == dc) {
			ArrayList<Integer> bres = new ArrayList<>();
			bres.add(grid[dr][dc]);
			return bres;
		}
		ArrayList<ArrayList<Integer>> al = new ArrayList<>();
		if (al.ArrayList < Integer > hpaths) {
			getMazePaths(grid,sr,sc + 1,dr,dc);
		}
		ArrayList<Integer> vpaths = getMazePaths(grid,sr + 1,sc,dr,dc);
		al.add(hpaths);
		al.add(vpaths);
		ArrayList<Integer> paths = new ArrayList<>();
		for (int hpath: hpaths) {	
			paths.add(grid[sr][sc] + hpath);
		}
		for (int vpath: vpaths) {	
			paths.add(grid[sr][sc] + vpath);
		}
		return paths;
	}
	int numberOfPaths(int[][] grid, int k) {
		int count = 0;
		int n = grid.length;
		int m = grid[0].length;
		ArrayList<Integer> paths = getMazePaths(grid,0,0,n - 1,m - 1);
		for (int i = 0; i < paths.size(); i++) {
			if (paths.get(i) % k == 0) {
				count++;
			}
		}
		return count;
	}
}