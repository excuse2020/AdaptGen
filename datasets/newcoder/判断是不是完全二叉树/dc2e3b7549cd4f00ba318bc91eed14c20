class Solution {
	int depth(TreeNode root) {
		if (root == null) {
			return 0;
		} 
		else {
			return Math.max(depth(root.left),depth(root.right)) + 1;
		}
	}
	boolean isComplete(TreeNode root) {
		if (root == null) {
			return true;
		}
		if (root.right != null && root.left == null) {
			return false;
		}
		return isComplete(root.left) && isComplete(root.right);
	}
	boolean isCompleteTree(TreeNode root) {
		if (root == null || (root.right == null && root.left == null)) {
			return true;
		}
		if (depth(root.left) - depth(root.right) > 1 || depth(root.left) < depth(root.right)) {
			return false;
		} 
		else {
			if (isFull(root.left)) {
				return isComplete(root.right);
			} 
			else {
				if (depth(root.left) == depth(root.right)) {
					return false;
				} 
				else {
					return isComplete(root.left);
				}
			}
		}
	}
	boolean isFull(TreeNode root) {
		if (depth(root.left) == depth(root.right)) {
			return true;
		}
		return false;
	}
}