class Solution {
	int[][] matrixBlockSum(int[][] mat, int k) {
		int n = mat.length;
		int m = mat[0].length;
		int[][] arr = new int[n][m];
		for (int i = 0; i < n; i++) {
			for (int j = 1; j < m; j++) {
				mat[i][j] += mat[i][j - 1];
			}
		}
		for (int i = 1; i < n; i++) {
			for (int j = 0; j < m; j++) {
				mat[i][j] += mat[i - 1][j];
			}
		}
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < m; j++) {
				int r1 = ((i - k) <= 0) ? 0 : (i - k);
				int c1 = ((j - k) <= 0) ? 0 : (j - k);
				int r2 = ((i + k) < n) ? (i + k) : (n - 1);
				int c2 = ((j + k) < m) ? (j + k) : (m - 1);
				if (r1 == 0 && c1 == 0) {
					arr[i][j] = mat[r2][c2];
				} 
				else if (r1 == 0) {
					arr[i][j] = mat[r2][c2] - mat[r2][c1 - 1];
				} 
				else if (c1 == 0) {
					arr[i][j] = mat[r2][c2] - mat[r1 - 1][c2];
				} 
				else {
					arr[i][j] = mat[r2][c2] - mat[r2][c1 - 1] + mat[r1 - 1][c1 - 1];
				}
			}
		}
		return arr;
	}
}