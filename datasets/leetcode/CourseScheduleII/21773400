class Solution {
	int[] findOrder(int numCourses, int[][] prerequisites) {
		int[] result = new int[numCourses];
		int[] indegree = new int[numCourses];
		List<Integer>[] map = new List[numCourses];
		Queue<Integer> queue = new LinkedList<Integer>();
		int courseCount = numCourses;
		for (int[] pair: prerequisites) {	
			indegree[pair[0]]++;
			if (map[pair[1]] == null) {
				map[pair[1]] = new ArrayList<>();
			}
			map[pair[1]].add(pair[0]);
		}
		for (int i = 0; i < indegree.length; i++) {
			if (indegree[i] == 0) {
				queue.add(i);
			}
		}
		while (!queue.isEmpty()) {
			int course = queue.poll();
			result[numCourses - courseCount] = course;
			courseCount--;
			if (map[course] == null) {
				continue;
			}
			for (int item: map[course]) {	
				indegree[item]--;
				if (indegree[item] == 0) {
					queue.add(item);
				}
			}
		}
		return courseCount == 0 ? result : new int[0];
	}
}