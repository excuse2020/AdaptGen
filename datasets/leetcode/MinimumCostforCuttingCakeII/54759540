class Solution {
	long minimumCost(int m, int n, int[] x, int[] y) {
		Arrays.sort(x);
		Arrays.sort(y);
		reverseArray(x);
		reverseArray(y);
		long horizontal = 1;
		long vertical = 1;
		long sum = 0;
		int i = 0;
		int j = 0;
		while (i < x.length && j < y.length) {
			if (x[i] <= y[j]) {
				sum += vertical * y[j];
				j++;
				horizontal++;
			} 
			else {
				sum += x[i] * horizontal;
				i++;
				vertical++;
			}
		}
		while (i < x.length) {
			sum += x[i] * horizontal;
			i++;
		}
		while (j < y.length) {
			sum += y[j] * vertical;
			j++;
		}
		return sum;
	}
	void reverseArray(int[] arr) {
		int left = 0;
		int right = arr.length - 1;
		while (left < right) {
			int temp = arr[left];
			arr[left] = arr[right];
			arr[right] = temp;
			left++;
			right--;
		}
	}
}