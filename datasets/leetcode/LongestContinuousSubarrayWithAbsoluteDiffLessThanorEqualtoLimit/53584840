class Solution {
	int longestSubarray(int[] nums, int limit) {
		LinkedList<Integer> incr = new LinkedList();
		LinkedList<Integer> decr = new LinkedList();
		int max = 0;
		for (int l = 0, r = 0; r < nums.length; r++) {
			int n = nums[r];
			while (incr.size() > 0 && n < incr.peekLast()) {
				incr.pollLast();
			}
			incr.add(n);
			while (decr.size() > 0 && n > decr.peekLast()) {
				decr.pollLast();
			}
			decr.add(n);
			while (decr.peekFirst() - incr.peekFirst() > limit) {
				if (decr.peekFirst() == nums[l]) {
					decr.pollFirst();
				}
				if (incr.peekFirst() == nums[l]) {
					incr.pollFirst();
				}
				l++;
			}
			int size = r - l + 1;
			max = Math.max(max,size);
		}
		return max;
	}
}