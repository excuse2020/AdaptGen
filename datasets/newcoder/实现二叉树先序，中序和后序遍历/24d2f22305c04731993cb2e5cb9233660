class Solution {
	List<Integer> inOrder;
	List<Integer> postOrder;
	List<Integer> preOrder;
	void setInOrder(TreeNode root) {
		if (root != null) {
			setInOrder(root.left);
			inOrder.add(root.val);
			setInOrder(root.right);
		}
	}
	void setPostOrder(TreeNode root) {
		if (root != null) {
			setPostOrder(root.left);
			setPostOrder(root.right);
			postOrder.add(root.val);
		}
	}
	void setPreOder(TreeNode root) {
		if (root != null) {
			preOrder.add(root.val);
			setPreOder(root.left);
			setPreOder(root.right);
		}
	}
	int[][] threeOrders(TreeNode root) {
		preOrder = new ArrayList<>();
		inOrder = new ArrayList<>();
		postOrder = new ArrayList<>();
		setPreOder(root);
		setInOrder(root);
		setPostOrder(root);
		int[][] ans = new int[3][preOrder.size()];
		for (int i = 0; i < preOrder.size(); i++) {
			ans[0][i] = preOrder.get(i).intValue();
			ans[1][i] = inOrder.get(i).intValue();
			ans[2][i] = postOrder.get(i).intValue();
		}
		return ans;
	}
}