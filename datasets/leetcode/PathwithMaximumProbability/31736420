class Solution {
	double maxProbability(int n, int[][] edges, double[] succProb, int start, int end) {
		Map<Integer, Map<Integer, Double>> graph = new HashMap<>();
		for (int i = 0; i < edges.length; i++) {
			int[] edge = edges[i];
			graph.computeIfAbsent(edge[0],(k) -> {new HashMap<>()}).put(edge[1],succProb[i]);
			graph.computeIfAbsent(edge[1],(k) -> {new HashMap<>()}).put(edge[0],succProb[i]);
		}
		double[] maxProb = new double[n];
		Arrays.fill(maxProb,Integer.MIN_VALUE);
		Queue<double[]> queue = new LinkedList<>();
		queue.add(new double{start, 1.0});
		while (!queue.isEmpty()) {
			var node = queue.poll();
			int prevNode = (int) node[0];
			double prevProb = node[1];
			Map<Integer, Double> neighbors = graph.get(prevNode);
			if (neighbors != null) {
				for (var entry: neighbors.entrySet()) {	
					int neighborNode = entry.getKey();
					double totalProb = prevProb * entry.getValue();
					if (totalProb > maxProb[neighborNode]) {
						maxProb[neighborNode] = totalProb;
						queue.add(new double{neighborNode, totalProb});
					}
				}
			}
		}
		if (maxProb[end] == Integer.MIN_VALUE) {
			return 0;
		} 
		else {
			return maxProb[end];
		}
	}
}