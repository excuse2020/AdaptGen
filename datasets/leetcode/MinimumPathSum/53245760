class Solution {
	int minPathSum(int[][] grid) {
		int m = grid.length;
		int n = grid[0].length;
		int[][] dp = new int[m][n];
		for (int[] rows: dp) {	
			Arrays.fill(rows,-1);
		}
		return minimumpath(m - 1,n - 1,dp,grid);
	}
	int minimumpath(int i, int j, int[][] dp, int[][] grid) {
		if (i < 0 || j < 0) {
			return Integer.MAX_VALUE;
		}
		if (i == 0 && j == 0) {
			return grid[0][0];
		}
		if (dp[i][j] != -1) {
			return dp[i][j];
		}
		int up = (i > 0) ? minimumpath(i - 1,j,dp,grid) : Integer.MAX_VALUE;
		int left = (j > 0) ? minimumpath(i,j - 1,dp,grid) : Integer.MAX_VALUE;
		dp[i][j] = grid[i][j] + Math.min(up,left);
		return dp[i][j];
	}
}