class Solution {
	int findPar(int i, int[] par) {
		if (i == par[i]) {
			return i;
		}
		return par[i] = findPar(par[i],par);
	}
	int minMalwareSpread(int[][] graph, int[] initial) {
		int n = graph.length;
		int[] par = new int[n];
		int[] size = new int[n];
		for (int i = 0; i < n; ++i) {
			par[i] = i;
			size[i] = 1;
		}
		for (int i = 0; i < n; ++i) {
			int par1 = findPar(i,par);
			for (int j = i + 1; j < n; ++j) {
				if (graph[i][j] == 1) {
					int par2 = findPar(j,par);
					if (par1 != par2) {
						par[par2] = par1;
						size[par1] += size[par2];
					}
				}
			}
		}
		Arrays.sort(initial);
		int[] ipc = new int[n];
		for (int i: initial) {	
			int p = findPar(i,par);
			ipc[p]++;
		}
		int maxPopulation = 0;
		int ans = initial[0];
		for (int i: initial) {	
			int p = findPar(i,par);
			if (ipc[p] == 1 && size[p] > maxPopulation) {
				maxPopulation = size[p];
				ans = i;
			}
		}
		return ans;
	}
}