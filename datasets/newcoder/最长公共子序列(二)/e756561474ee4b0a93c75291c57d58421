class Solution {
	String LCS(String s1, String s2) {
		if (s1.length() == 0 || s2.length() == 0) {
			return "-1";
		}
		int len1 = s1.length();
		int len2 = s2.length();
		int[][] dp = new int[len1 + 1][len2 + 1];
		for (int i = 1; i <= len1; i++) {
			for (int j = 1; j <= len2; j++) {
				if (s1.charAt(i - 1) == s2.charAt(j - 1)) {
					dp[i][j] = dp[i - 1][j - 1] + 1;
				} 
				else {
					dp[i][j] = Math.max(dp[i - 1][j],dp[i][j - 1]);
				}
			}
		}
		int i = len1, j = len2;
		Stack<Character> s = new Stack<Character>();
		while (dp[i][j] != 0) {
			if (dp[i][j] == dp[i - 1][j]) {
				i--;
			} 
			else if (dp[i][j] == dp[i][j - 1]) {
				j--;
			} 
			else if (dp[i][j] > dp[i - 1][j - 1]) {
				i--;
				j--;
				s.push(s1.charAt(i));
			}
		}
		String res = "";
		while (!s.isEmpty()) {
			res += s.pop();
		}
		return !res.isEmpty() ? res : "-1";
	}
}