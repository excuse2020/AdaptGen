class Solution {
	int getMin(int curNode, ArrayList<ArrayList<Integer>> adj, ArrayList<ArrayList<Integer>> adj2, boolean[] isVisited) {
		int count = 0;
		for (int ele: adj.get(curNode)) {	
			if (!isVisited[ele]) {
				isVisited[ele] = true;
				count++;
				count += getMin(ele,adj,adj2,isVisited);
			}
		}
		for (int ref: adj2.get(curNode)) {	
			if (!isVisited[ref]) {
				isVisited[ref] = true;
				count += getMin(ref,adj,adj2,isVisited);
			}
		}
		return count;
	}
	int minReorder(int n, int[][] arr) {
		ArrayList<ArrayList<Integer>> adj = new ArrayList<>();
		ArrayList<ArrayList<Integer>> adj1 = new ArrayList<>();
		for (int i = 0; i < n; i++) {
			adj.add(new ArrayList<>());
			adj1.add(new ArrayList<>());
		}
		for (int i = 0; i < arr.length; i++) {
			int src = arr[i][0];
			int dest = arr[i][1];
			adj.get(src).add(dest);
			adj1.get(dest).add(src);
		}
		boolean[] isVisited = new boolean[n];
		isVisited[0] = true;
		return getMin(0,adj,adj1,isVisited);
	}
}