class Solution {
	double maxProbability(int n, int[][] edges, double[] succProb, int start, int end) {
		List<List<Pair<Integer, Double>>> adj = new ArrayList();
		for (int i = 0; i < n; i++) {
			adj.add(new ArrayList());
		}
		for (int i = 0; i < edges.length; i++) {
			int u = edges[i][0];
			int v = edges[i][1];
			double p = succProb[i];
			adj.get(u).add(new Pair<>(v, p));
			adj.get(v).add(new Pair<>(u, p));
		}
		double[] dist = new double[n];
		dist[start] = 1.0;
		Queue<Integer> q = new LinkedList();
		q.add(start);
		while (!q.isEmpty()) {
			int size = q.size();
			while (size-- > 0) {
				int curr = q.poll();
				for (Pair<Integer, Double> pair: adj.get(curr)) {	
					int node = pair.getKey();
					double prob = pair.getValue();
					double newProb = dist[curr] * prob;
					if (newProb > dist[node]) {
						dist[node] = newProb;
						q.add(node);
					}
				}
			}
		}
		return dist[end];
	}
}