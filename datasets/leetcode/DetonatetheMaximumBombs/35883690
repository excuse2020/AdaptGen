class Solution {
	Map<Integer, List<Integer>> buildneigbours(int[][] bombs) {
		Map<Integer, List<Integer>> graph = new HashMap<>();
		for (int i = 0; i < bombs.length; i++) {
			List<Integer> neighbours = new ArrayList<>();
			long x1 = bombs[i][0];
			long y1 = bombs[i][1];
			long r1 = bombs[i][2];
			for (int j = 0; j < bombs.length; j++) {
				long x2 = bombs[j][0];
				long y2 = bombs[j][1];
				if (i != j) {
					if ((x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2) <= r1 * r1) {
						neighbours.add(j);
					}
				}
			}
			graph.put(i,neighbours);
		}
		return graph;
	}
	int maximumCount(int i, Map<Integer, List<Integer>> neighbours) {
		Queue<Integer> q = new LinkedList<>();
		q.offer(i);
		Set<Integer> s = new HashSet<>();
		s.add(i);
		int maxCount = 0;
		while (!q.isEmpty()) {
			int size = q.size();
			while (size-- > 0) {
				int k = q.poll();
				for (int neighbour: neighbours.get(k)) {	
					if (!s.contains(neighbour)) {
						q.add(neighbour);
						s.add(neighbour);
					}
				}
			}
		}
		return s.size();
	}
	int maximumDetonation(int[][] bombs) {
		Map<Integer, List<Integer>> neighbours = buildneigbours(bombs);
		int maxCount = 0;
		for (int i = 0; i < bombs.length; i++) {
			int count = maximumCount(i,neighbours);
			maxCount = Math.max(maxCount,count);
		}
		return maxCount;
	}
}