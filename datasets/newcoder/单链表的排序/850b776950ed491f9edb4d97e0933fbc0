class Solution {
	ListNode merge(ListNode left, ListNode right) {
		ListNode p = new ListNode(-1);
		ListNode head = p;
		while (left != null && right != null) {
			if (left.val < right.val) {
				p.next = left;
				left = left.next;
			} 
			else {
				p.next = right;
				right = right.next;
			}
			p = p.next;
		}
		if (left != null) {
			p.next = left;
		}
		if (right != null) {
			p.next = right;
		}
		return head.next;
	}
	ListNode sortInList(ListNode head) {
		if (head == null || head.next == null) {
			return head;
		}
		ListNode slow = head;
		ListNode fast = head.next;
		while (slow != null && fast != null && fast.next != null) {
			slow = slow.next;
			fast = fast.next.next;
		}
		ListNode left = head;
		ListNode right = slow.next;
		slow.next = null;
		left = sortInList(left);
		right = sortInList(right);
		return merge(left,right);
	}
}