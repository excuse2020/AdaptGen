class Solution {
	int solve(int i, int j, int[][] dp, int[][] nums) {
		if (i < 0 || j < 0 || nums[i][j] == 1) {
			return 0;
		}
		if (i == 0 && j == 0) {
			return 1;
		}
		if (dp[i][j] != -1) {
			return dp[i][j];
		}
		int left = solve(i,j - 1,dp,nums);
		int up = solve(i - 1,j,dp,nums);
		return dp[i][j] = left + up;
	}
	int uniquePathsWithObstacles(int[][] obstacleGrid) {
		int m = obstacleGrid.length, n = obstacleGrid[0].length;
		int[][] dp = new int[m + 1][n + 1];
		for (int[] row: dp) {	
			Arrays.fill(row,-1);
		}
		return solve(m - 1,n - 1,dp,obstacleGrid);
	}
}