class Solution {
	TreeNode build(int[] inorder, int is, int ie, int[] postorder, int ps, int pe, Map<Integer, Integer> mp) {
		if (ps > pe || is > ie) {
			return null;
		}
		TreeNode root = new TreeNode(postorder[pe]);
		int ri = mp.get(postorder[pe]);
		root.left = build(inorder,is,ri - 1,postorder,ps,ps + ri - is - 1,mp);
		root.right = build(inorder,ri + 1,ie,postorder,ps + ri - is,pe - 1,mp);
		return root;
	}
	TreeNode buildTree(int[] inorder, int[] postorder) {
		int n = inorder.length;
		if (inorder == null || postorder == null) {
			return null;
		}
		if (n != postorder.length) {
			return null;
		}
		Map<Integer, Integer> mp = new HashMap<>();
		for (int i = 0; i < n; i++) {
			mp.put(inorder[i],i);
		}
		return build(inorder,0,n - 1,postorder,0,n - 1,mp);
	}
}