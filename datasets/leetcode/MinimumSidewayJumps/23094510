class Solution {
	int minSideJumps(int[] obstacles) {
		int n = obstacles.length;
		int[][] dp = new int[n][3];
		dp[0][0] = 1;
		dp[0][2] = 1;
		dp[0][1] = 0;
		for (int i = 1; i < n; i++) {
			for (int j = 2; j >= 0; j--) {
				if (obstacles[i] == j + 1) {
					dp[i][j] = Integer.MAX_VALUE;
				} 
				else {
					int case1 = Integer.MAX_VALUE;
					int case2 = Integer.MAX_VALUE;
					int case3 = Integer.MAX_VALUE;
					if (obstacles[i] != 1) {
						if (j == 0) {
							case1 = dp[i - 1][0];
						} 
						else {
							if (dp[i - 1][0] != Integer.MAX_VALUE) {
								case1 = dp[i - 1][0] + 1;
							} 
							else {
								case1 = dp[i - 1][0];
							}
						}
					}
					if (obstacles[i] != 2) {
						if (j == 1) {
							case2 = dp[i - 1][1];
						} 
						else {
							if (dp[i - 1][1] != Integer.MAX_VALUE) {
								case2 = dp[i - 1][1] + 1;
							} 
							else {
								case2 = dp[i - 1][1];
							}
						}
					}
					if (obstacles[i] != 3) {
						if (j == 2) {
							case3 = dp[i - 1][2];
						} 
						else {
							if (dp[i - 1][2] != Integer.MAX_VALUE) {
								case3 = dp[i - 1][2] + 1;
							} 
							else {
								case3 = dp[i - 1][2];
							}
						}
					}
					dp[i][j] = Math.min(case1,Math.min(case2,case3));
				}
			}
		}
		return Math.min(dp[n - 1][0],Math.min(dp[n - 1][1],dp[n - 1][2]));
	}
}