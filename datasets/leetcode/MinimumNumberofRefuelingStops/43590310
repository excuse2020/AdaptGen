class Solution {
	int minRefuelStops(int target, int startFuel, int[][] stations) {
		if (startFuel >= target) {
			return 0;
		}
		int stops = 0;
		int maxDistance = startFuel;
		int i = 0;
		PriorityQueue<Integer> maxHeap = new PriorityQueue<Integer>(Collections.reverseOrder());
		while (maxDistance < target) {
			if (i < stations.length && stations[i][0] <= maxDistance) {
				maxHeap.add(stations[i][1]);
				i++;
			} 
			else if (maxHeap.isEmpty()) {
				return -1;
			} 
			else {
				maxDistance += maxHeap.poll();
				stops++;
			}
		}
		return stops;
	}
}