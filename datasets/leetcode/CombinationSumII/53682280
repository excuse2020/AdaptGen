class Solution {
	List<List<Integer>> combinationSum2(int[] candidates, int target) {
		List<List<Integer>> ans = new ArrayList<>();
		ArrayList<Integer> l = new ArrayList<>();
		Arrays.sort(candidates);
		helper(candidates,target,ans,l,0);
		return ans;
	}
	void helper(int[] arr, int t, List<List<Integer>> ans, ArrayList<Integer> l, int index) {
		if (t == 0) {
			ans.add(new ArrayList<>(l));
			return;
		}
		for (int i = index; i < arr.length; i++) {
			if (i > index && arr[i] == arr[i - 1]) {
				continue;
			}
			if (arr[i] > t) {
				break;
			}
			l.add(arr[i]);
			helper(arr,t - arr[i],ans,l,i + 1);
			l.remove(l.size() - 1);
		}
	}
}