class Solution {
	boolean solve(int nums, int i, Boolean[] dp) {
		int n = nums.length;
		if (i >= n) {
			return true;
		}
		boolean result = false;
		if (dp[i] != null) {
			return dp[i];
		}
		if (i + 1 < n && nums[i] == nums[i + 1]) {
			result = solve(nums,i + 2,dp);
		}
		if (result == true) {
			return result;
		}
		if (i + 2 < n && nums[i] == nums[i + 1] && nums[i + 1] == nums[i + 2]) {
			result = solve(nums,i + 3,dp);
		}
		if (result == true) {
			return true;
		}
		if (i + 2 < n && nums[i + 1] - nums[i] == 1 && nums[i + 2] - nums[i + 1] == 1) {
			result = solve(nums,i + 3,dp);
		}
		if (result == true) {
			return true;
		}
		return dp[i] = result;
	}
	boolean validPartition(int[] nums) {
		return solve(nums,0,new Boolean[100001]);
	}
}