class Solution {
	boolean HasSubtree(TreeNode root1, TreeNode root2) {
		if (root1 == null || root2 == null) {
			return false;
		}
		LinkedList<TreeNode> Nodearray = new LinkedList();
		LinkedList<TreeNode> Node = new LinkedList();
		Node.add(root1);
		while (Node.size() != 0) {
			TreeNode node = Node.poll();
			Nodearray.add(node);
			if (node.left != null) {
				Node.add(node.left);
			}
			if (node.right != null) {
				Node.add(node.right);
			}
		}
		for (int i = 0; i < Nodearray.size(); i++) {
			if (equalTree(Nodearray.get(i),root2)) {
				return true;
			}
		}
		return false;
	}
	boolean equalTree(TreeNode root1, TreeNode root2) {
		if (root1.val != root2.val) {
			return false;
		}
		if ((root1.left != null && root2.left != null) && !equalTree(root1.left,root2.left)) {
			return false;
		} 
		else if ((root1.left == null && root2.left != null)) {
			return false;
		}
		if ((root1.right != null && root2.right != null) && !equalTree(root1.right,root2.right)) {
			return false;
		} 
		else if ((root1.right == null && root2.right != null)) {
			return false;
		}
		return true;
	}
}