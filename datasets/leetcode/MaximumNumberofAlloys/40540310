class Solution {
	int maxNumberOfAlloys(int n, int k, int budget, List<List<Integer>> composition, List<Integer> stock, List<Integer> cost) {
		int low = 0, hi = 1000000007;
		int ans = 0;
		while (low <= hi) {
			int mid = (hi - low) / 2 + low;
			boolean f = false;
			for (int i = 0; i < k; i++) {
				if (verify(composition.get(i),budget,mid,stock,cost)) {
					f = true;
					ans = mid;
					break;
				}
			}
			if (f) {
				low = mid + 1;
			} 
			else {
				hi = mid - 1;
			}
		}
		return ans;
	}
	boolean verify(List<Integer> composition, int budget, int req, List<Integer> stock, List<Integer> cost) {
		long sum = 0;
		for (int j = 0; j < composition.size(); j++) {
			long quant = (long) composition.get(j) * req;
			int type = j;
			if (quant >= stock.get(j)) {
				quant -= stock.get(j);
			} 
			else {
				continue;
			}
			if (quant > 0) {
				sum += cost.get(j) * quant;
			}
		}
		if (sum > (long) budget) {
			return false;
		}
		return true;
	}
}