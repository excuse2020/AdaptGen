class Solution {
	ListNode merge(ListNode l1, ListNode l2) {
		ListNode head = new ListNode(-1);
		ListNode temp = head;
		ListNode t1 = l1;
		ListNode t2 = l2;
		while (t1 != null && t2 != null) {
			if (t1.val < t2.val) {
				temp.next = t1;
				temp = t1;
				t1 = t1.next;
			} 
			else {
				temp.next = t2;
				temp = t2;
				t2 = t2.next;
			}
		}
		if (t1 == null) {
			temp.next = t2;
		}
		if (t2 == null) {
			temp.next = t1;
		}
		return head.next;
	}
	ListNode middle(ListNode head) {
		ListNode slow = head;
		ListNode fast = head.next;
		while (fast != null && fast.next != null) {
			slow = slow.next;
			fast = fast.next.next;
		}
		return slow;
	}
	ListNode sortList(ListNode head) {
		if (head == null || head.next == null) {
			return head;
		}
		ListNode mid = middle(head);
		ListNode right = mid.next;
		mid.next = null;
		ListNode l = sortList(head);
		ListNode r = sortList(right);
		return merge(l,r);
	}
}