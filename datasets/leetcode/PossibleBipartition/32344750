class Solution {
	int[] colors;
	Map<Integer, ArrayList<Integer>> graph;
	boolean dfs(int node, int color) {
		if (colors[node - 1] != 0) {
			return colors[node - 1] == color;
		}
		colors[node - 1] = color;
		for (int nei: graph.get(node)) {	
			if (!dfs(nei,-color)) {
				return false;
			}
		}
		return true;
	}
	boolean possibleBipartition(int n, int[][] dislikes) {
		graph = new HashMap<>();
		colors = new int[n];
		for (int i = 1; i <= n; i++) {
			graph.put(i,new ArrayList<Integer>());
		}
		for (int[] dislike: dislikes) {	
			int v = dislike[0], u = dislike[1];
			graph.get(v).add(u);
			graph.get(u).add(v);
		}
		for (int i = 1; i <= n; i++) {
			if (colors[i - 1] == 0 && !dfs(i,1)) {
				return false;
			}
		}
		return true;
	}
}