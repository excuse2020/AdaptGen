class Solution {
	long maximumSubarraySum(int[] nums, int k) {
		long max = 0, n = nums.length, sum = 0;
		HashMap<Integer, Integer> map = new HashMap<>();
		for (int i = 0; i < k; i++) {
			sum += nums[i];
			map.put(nums[i],map.getOrDefault(nums[i],0) + 1);
		}
		if (map.size() == k) {
			max = Math.max(max,sum);
		}
		for (int i = 1, j = i + k - 1; j < n; i++, j++) {
			map.put(nums[i - 1],map.getOrDefault(nums[i - 1],1) - 1);
			if (map.get(nums[i - 1]) < 1) {
				map.remove(nums[i - 1]);
			}
			map.put(nums[j],map.getOrDefault(nums[j],0) + 1);
			sum = sum - nums[i - 1] + nums[j];
			if (map.size() == k) {
				max = Math.max(max,sum);
			}
		}
		return max;
	}
}