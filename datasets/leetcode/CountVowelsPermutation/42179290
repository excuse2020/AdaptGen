class Solution {
	int countVowelPermutation(int n) {
		int MOD = 1000000007;
		int res = 0;
		int dp = new int[5];
		int tmp_a = 0, tmp_e = 0, tmp_i = 0, tmp_o = 0, tmp_u = 0;
		for (int i = 0; i < 5; i++) {
			dp[i] = 1;
		}
		for (int i = 1; i < n; i++) {
			tmp_a = ((dp[1] + dp[2]) % MOD + dp[4]) % MOD;
			tmp_e = (dp[0] + dp[2]) % MOD;
			tmp_i = (dp[1] + dp[3]) % MOD;
			tmp_o = dp[2] % MOD;
			tmp_u = (dp[2] + dp[3]) % MOD;
			dp[0] = tmp_a;
			dp[1] = tmp_e;
			dp[2] = tmp_i;
			dp[3] = tmp_o;
			dp[4] = tmp_u;
		}
		res = (((dp[0] + dp[1]) % MOD + (dp[2] + dp[3]) % MOD) % MOD + dp[4]) % MOD;
		return (int) res;
	}
	int countVowelPermutation_mem(int n) {
		int MOD = 1000000007;
		int res = 0;
		int dp = new int[n][5];
		for (int i = 0; i < 5; i++) {
			dp[0][i] = 1;
		}
		for (int i = 1; i < n; i++) {
			dp[i][0] = ((dp[i - 1][1] + dp[i - 1][2]) % MOD + dp[i - 1][4]) % MOD;
			dp[i][1] = (dp[i - 1][0] + dp[i - 1][2]) % MOD;
			dp[i][2] = (dp[i - 1][1] + dp[i - 1][3]) % MOD;
			dp[i][3] = dp[i - 1][2] % MOD;
			dp[i][4] = (dp[i - 1][2] + dp[i - 1][3]) % MOD;
		}
		res = (((dp[n - 1][0] + dp[n - 1][1]) % MOD + (dp[n - 1][2] + dp[n - 1][3]) % MOD) % MOD + dp[n - 1][4]) % MOD;
		return (int) res;
	}
}