class Solution {
	int dp;
	int cal(int grid, int level, int i, int j) {
		int m = grid.length, n = grid[0].length;
		if (i < 0 || j < 0 || i >= n || j >= n || i == j || level >= m) {
			return 0;
		}
		if (dp[level][i][j] != -1) {
			return dp[level][i][j];
		}
		int max = 0;
		for (int k = -1; k < 2; k++) {
			for (int l = -1; l < 2; l++) {
				max = Math.max(max,cal(grid,level + 1,i + k,j + l));
			}
		}
		dp[level][i][j] = grid[level][i] + grid[level][j];
		return grid[level][i] + grid[level][j];
	}
	int cherryPickup(int[][] grid) {
		dp = new int[grid.length][grid[0].length][grid[0].length];
		for (int[][] cur: dp) {	
			for (int[] curr: cur) {	
				Arrays.fill(curr,-1);
			}
		}
		return cal(grid,0,0,grid[0].length - 1);
	}
}