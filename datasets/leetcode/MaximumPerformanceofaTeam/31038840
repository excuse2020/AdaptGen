class Solution {
	int MOD = (int) 1e9 + 7;
	int maxPerformance(int n, int[] speed, int[] efficiency, int k) {
		int[][] engineers = new int[n][2];
		for (int i = 0; i < n; i++) {
			engineers[i][0] = efficiency[i];
			engineers[i][1] = speed[i];
		}
		Arrays.sort(engineers,(e1, e2) -> {e2[0] - e1[0]});
		PriorityQueue<Integer> minHeap = new PriorityQueue<>();
		long res = 0, totalSpeed = 0, minEff = 0, performance = 0;
		for (int i = 0; i < n; i++) {
			int[] e = engineers[i];
			if (minHeap.size() == k) {
				totalSpeed -= minHeap.poll();
			}
			minHeap.add(e[1]);
			minEff = e[0];
			totalSpeed += e[1];
			performance = minEff * totalSpeed;
			res = Math.max(res,performance);
		}
		return (int) (res % MOD);
	}
}