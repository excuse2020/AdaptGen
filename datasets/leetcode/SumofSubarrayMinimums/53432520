class Solution {
	int sumSubarrayMins(int[] arr) {
		int N = arr.length;
		int MOD = 1_000_000_007;
		int[] left = new int[N];
		int[] right = new int[N];
		Stack<int[]> st1 = new Stack<>();
		Stack<int[]> st2 = new Stack<>();
		for (int i = 0; i < N; i++) {
			int cnt = 1;
			while (!st1.isEmpty() && st1.peek()[0] > arr[i]) {
				cnt += st1.peek()[1];
				st1.pop();
			}
			st1.push(new int{arr[i], cnt});
			left[i] = cnt;
		}
		for (int i = N - 1; i >= 0; i--) {
			int cnt = 1;
			while (!st2.isEmpty() && st2.peek()[0] >= arr[i]) {
				cnt += st2.peek()[1];
				st2.pop();
			}
			st2.push(new int{arr[i], cnt});
			right[i] = cnt;
		}
		long ans = 0;
		for (int i = 0; i < N; i++) {
			ans = (ans + (long) arr[i] * left[i]) % MOD;
		}
		return (int) ans;
	}
}