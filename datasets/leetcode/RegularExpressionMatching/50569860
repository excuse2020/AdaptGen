class Solution {
	boolean isMatch(char[] text, int i, char[] pattern, int j, int[][] memo) {
		int m = text.length;
		int n = pattern.length;
		if (j >= n) {
			return i >= m;
		}
		if (i < m && j < n && memo[i][j] != -1) {
			return memo[i][j] == 1;
		}
		boolean result;
		boolean initialMatch;
	}
	boolean isMatch(String text, String pattern) {
		int m = text.length();
		int n = pattern.length();
		int[][] memo = new int[m][n];
		for (int[] row: memo) {	
			Arrays.fill(row,-1);
		}
		return isMatch(text.toCharArray(),0,pattern.toCharArray(),0,memo);
	}
	boolean isMatch2(String text, String pattern) {
		if (pattern.isEmpty()) {
			return text.isEmpty();
		}
		boolean initialMatch;
	}
	boolean isMatch3(char[] text, int i, char[] pattern, int j) {
		int m = text.length;
		int n = pattern.length;
		if (j >= n) {
			return i >= m;
		}
		boolean initialMatch;
	}
	boolean isMatch3(String text, String pattern) {
		return isMatch3(text.toCharArray(),0,pattern.toCharArray(),0);
	}
}