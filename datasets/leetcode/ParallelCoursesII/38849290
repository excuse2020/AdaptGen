class Solution {
	int N;
	List<Integer>[] children;
	int dp;
	void generateMasks(int start, List<Integer> masks, int newMask, int k, int available) {
		if (k == 0) {
			masks.add(newMask);
			return;
		}
		for (int i = start; i < N; i++) {
			if ((1 << i & available) == 0) {
				continue;
			}
			generateMasks(i + 1,masks,newMask | 1 << i,k - 1,available);
		}
	}
	int helper(int currentMask, int k, int[] indegree) {
		if (currentMask == ((1 << N) - 1)) {
			return 0;
		}
		if (dp[currentMask] > 0) {
			return dp[currentMask];
		}
		int available = 0;
		int size = 0;
		for (int i = 0; i < N; i++) {
			if (indegree[i] > 0) {
				continue;
			}
			if (((1 << i) & currentMask) > 0) {
				continue;
			}
			size++;
			available = available | (1 << i);
		}
		List<Integer> masks = new ArrayList<>();
		generateMasks(0,masks,0,Math.min(size,k),available);
		dp[currentMask] = 20;
		for (int mask: masks) {	
			for (int i = 0; i < N; i++) {
				if ((1 << i & mask) > 0) {
					for (int child: children[i]) {	
						indegree[child]--;
					}
				}
			}
			dp[currentMask] = Math.min(dp[currentMask],helper(currentMask | mask,k,indegree));
			for (int i = 0; i < N; i++) {
				if ((1 << i & mask) > 0) {
					for (int child: children[i]) {	
						indegree[child]++;
					}
				}
			}
		}
		dp[currentMask]++;
		return dp[currentMask];
	}
	int minNumberOfSemesters(int n, int[][] relations, int k) {
		N = n;
		int course_mask = (1 << n) - 1;
		dp = new int[course_mask + 1];
		children = new ArrayList[N];
		for (int i = 0; i < N; i++) {
			children[i] = new ArrayList<>();
		}
		int[] indegree = new int[N];
		for (int i = 0; i < relations.length; i++) {
			relations[i][0]--;
			relations[i][1]--;
			children[relations[i][0]].add(relations[i][1]);
			indegree[relations[i][1]]++;
		}
		return helper(0,k,indegree);
	}
}