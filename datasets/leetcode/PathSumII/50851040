class Solution {
	void calSum(TreeNode root, List<List<Integer>> ans, int targetSum, List<Integer> sub) {
		if (root == null) {
			return;
		}
		if (root.left == null && root.right == null) {
			sub.add(root.val);
			int sum = 0;
			System.out.println(sub);
			for (int i = 0; i < sub.size(); i++) {
				sum = sum + sub.get(i);
			}
			System.out.println(sum);
			if (sum == targetSum) {
				ans.add(new ArrayList<Integer>(sub));
			}
		}
		sub.add(root.val);
		calSum(root.left,ans,targetSum,new ArrayList<Integer>(sub));
		calSum(root.right,ans,targetSum,new ArrayList<Integer>(sub));
	}
	List<List<Integer>> pathSum(TreeNode root, int targetSum) {
		List<List<Integer>> ans = new ArrayList<List<Integer>>();
		if (root == null) {
			return ans;
		}
		calSum(root,ans,targetSum,new ArrayList<Integer>());
		return ans;
	}
}