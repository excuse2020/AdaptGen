class Solution {
	boolean is_column_valid(char[][] board, int current_column, int current_value) {
		int current_row = 0;
	}
	boolean is_row_valid(char[][] board, int current_row, int current_value) {
		int current_column = 0;
	}
	boolean is_subgrid_valid(char[][] board, int current_row, int current_column, int current_value) {
		int x = 3 * (current_row / 3);
		int y = 3 * (current_column / 3);
		int i = 0;
		int j = 0;
	}
	boolean is_valid(char[][] board, int current_row, int current_column, int current_value) {
		return (is_row_valid(board,current_row,current_value) && is_column_valid(board,current_column,current_value));
	}
	void solveSudoku(char[][] board) {
		sudoku_solver(board,0,0);
		return;
	}
	boolean sudoku_solver(char[][] board, int current_row, int current_column) {
		int next_row_pos;
		int next_col_pos;
		if (current_row == 9) {
			return true;
		}
		if (current_column == 8) {
			next_row_pos = current_row + 1;
			next_col_pos = 0;
		} 
		else {
			next_row_pos = current_row;
			next_col_pos = current_column + 1;
		}
	}
}