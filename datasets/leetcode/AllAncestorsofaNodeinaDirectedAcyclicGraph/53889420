class Solution {
	List<List<Integer>> getAncestors(int n, int[][] edges) {
		List<Integer>[] adjacencyList = new ArrayList[n];
		for (int i = 0; i < n; i++) {
			adjacencyList[i] = new ArrayList<>();
		}
		int[] indegree = new int[n];
		for (int[] edge: edges) {	
			int from = edge[0];
			int to = edge[1];
			adjacencyList[from].add(to);
			indegree[to]++;
		}
		Queue<Integer> nodesWithZeroIndegree = new LinkedList<>();
		for (int i = 0; i < indegree.length; i++) {
			if (indegree[i] == 0) {
				nodesWithZeroIndegree.add(i);
			}
		}
		List<Integer> topologicalOrder = new ArrayList<>();
		while (!nodesWithZeroIndegree.isEmpty()) {
			int currentNode = nodesWithZeroIndegree.poll();
			topologicalOrder.add(currentNode);
			for (int neighbor: adjacencyList[currentNode]) {	
				indegree[neighbor]--;
				if (indegree[neighbor] == 0) {
					nodesWithZeroIndegree.add(neighbor);
				}
			}
		}
		List<List<Integer>> ancestorsList = new ArrayList<>();
		List<Set<Integer>> ancestorsSetList = new ArrayList<>();
		for (int i = 0; i < n; i++) {
			ancestorsList.add(new ArrayList<>());
			ancestorsSetList.add(new HashSet<>());
		}
		for (int node: topologicalOrder) {	
			for (int neighbor: adjacencyList[node]) {	
				ancestorsSetList.get(neighbor).add(node);
				ancestorsSetList.get(neighbor).addAll(ancestorsSetList.get(node));
			}
		}
		for (int i = 0; i < ancestorsList.size(); i++) {
			ancestorsList.get(i).addAll(ancestorsSetList.get(i));
			Collections.sort(ancestorsList.get(i));
		}
		return ancestorsList;
	}
}