class Solution {
	int ans;
	void helper(int[][] students, int[][] mentors, boolean track, int index, int index2, int max) {
		int count = 0;
		for (int i = 0; i < mentors[0].length; i++) {
			if (students[index][i] == mentors[index2][i]) {
				count++;
			}
		}
		max += count;
		if (students.length - 1 <= index) {
			ans = Math.max(ans,max);
			return;
		}
		for (int i = 0; i < mentors.length; i++) {
			if (!track[i]) {
				track[i] = true;
				helper(students,mentors,track,index + 1,i,max);
				track[i] = false;
			}
		}
	}
	int maxCompatibilitySum(int[][] students, int[][] mentors) {
		ans = 0;
		for (int i = 0; i < mentors.length; i++) {
			boolean track = new boolean[students.length];
			track[i] = true;
			helper(students,mentors,track,0,i,0);
		}
		return ans;
	}
}