class Solution {
	StringBuilder st = new StringBuilder();
	String getDirections(TreeNode root, int startValue, int destValue) {
		st.setLength(0);
		TreeNode r = lca(root,startValue,destValue);
		StringBuilder l = new StringBuilder();
		StringBuilder ans = new StringBuilder();
		System.out.println(r.val);
		if (r.val == startValue) {
			trav(r,l,destValue);
			return st.toString();
		}
		trav(r,l,startValue);
		int a = st.length();
		st.setLength(0);
		int i = 0;
	}
	TreeNode lca(TreeNode root, int a, int b) {
		if (root == null) {
			return null;
		}
		if (root.val == a || root.val == b) {
			return root;
		}
		TreeNode left = lca(root.left,a,b);
		TreeNode right = lca(root.right,a,b);
		if (left == null && right != null) {
			return right;
		} 
		else if (left == null && right == null) {
			return null;
		} 
		else if (left != null && right == null) {
			return left;
		}
		return root;
	}
	void trav(TreeNode root, StringBuilder op, int val) {
		if (root == null) {
			return;
		}
		if (root.val == val) {
			st.append(op);
		}
	}
}