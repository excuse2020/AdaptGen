class Solution {
	int dfs(int i, List<List<Integer>> g, int vis, List<Boolean> b) {
		int res = 0;
		for (int j: g.get(i)) {	
			if (vis[j] == 0) {
				vis[j] = 1;
				res += dfs(j,g,vis,b);
			}
		}
		if (i == 0) {
			return res;
		}
		if (res > 0 || b.get(i) == true) {
			return res + 2;
		}
		return 0;
	}
	int minTime(int n, int[][] edges, List<Boolean> hasApple) {
		List<List<Integer>> l = new ArrayList<>();
		for (int i = 0; i < n; i++) {
			l.add(new ArrayList<>());
		}
		List<Integer> t = new ArrayList<>();
		for (int i: edges) {	
			t = l.get(i[0]);
			t.add(i[1]);
			l.set(i[0],new ArrayList<>(t));
			t = l.get(i[1]);
			t.add(i[0]);
			l.set(i[1],new ArrayList<>(t));
		}
		int vis = new int[n];
		vis[0] = 1;
		return dfs(0,l,vis,hasApple);
	}
}