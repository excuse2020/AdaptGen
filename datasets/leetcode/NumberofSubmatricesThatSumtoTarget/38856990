class Solution {
	int helper(int arr, int target) {
		int count = 0;
		HashMap<Integer, Integer> map = new HashMap<>();
		int sum = 0;
		for (int i = 0; i < arr.length; i++) {
			sum += arr[i];
			if (sum == target) {
				count++;
			}
			if (map.containsKey(sum - target)) {
				count += map.get(sum - target);
			}
			if (map.containsKey(sum)) {
				map.put(sum,map.get(sum) + 1);
			} 
			else {
				map.put(sum,1);
			}
		}
		return count;
	}
	int numSubmatrixSumTarget(int[][] matrix, int target) {
		int count = 0;
		for (int col1 = 0; col1 < matrix[0].length; col1++) {
			int dp = new int[matrix.length];
			for (int col2 = col1; col2 < matrix[0].length; col2++) {
				for (int row = 0; row < matrix.length; row++) {
					dp[row] += matrix[row][col2];
				}
				count += helper(dp,target);
			}
		}
		return count;
	}
}