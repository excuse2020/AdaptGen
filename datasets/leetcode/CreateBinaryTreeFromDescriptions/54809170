class Solution {
	TreeNode createBinaryTree(int[][] descriptions) {
		HashMap<Integer, TreeNode> map = new HashMap<>();
		HashSet<Integer> memberNodes = new HashSet<>();
		for (int[] descp: descriptions) {	
			TreeNode pnode = map.getOrDefault(descp[0],new TreeNode(descp[0]));
			TreeNode cnode = map.getOrDefault(descp[1],new TreeNode(descp[1]));
			if (descp[2] == 1) {
				pnode.left = cnode;
			} 
			else {
				pnode.right = cnode;
			}
			map.put(pnode.val,pnode);
			map.put(cnode.val,cnode);
			memberNodes.add(cnode.val);
		}
		for (int nodeVal: map.keySet()) {	
			if (!memberNodes.contains(nodeVal)) {
				return map.get(nodeVal);
			}
		}
		return new TreeNode(-1);
	}
}