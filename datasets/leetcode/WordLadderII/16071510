class Solution {
	List<List<String>> findLadders(String beginWord, String endWord, List<String> wordList) {
		List<List<String>> res = new ArrayList<>();
		Deque<Pair<String, List<String>>> queue = new ArrayDeque<>();
		Set<String> set = new HashSet<>();
		for (String word: wordList) {	
			set.add(word);
		}
		Set<String> visited = new HashSet<>();
		if (!set.contains(endWord)) {
			return res;
		}
		List<String> path = new ArrayList<>();
		path.add(beginWord);
		queue.add(new Pair(beginWord, path));
		int min = Integer.MAX_VALUE;
		int size = queue.size();
		Pair<String, List<String>> p = queue.poll();
		String curr = p.getKey();
		List<String> sub = p.getValue();
		if (curr.equals(endWord)) {
			min = Math.min(min,sub.size());
			res.add(sub);
		}
		visited.add(curr);
		char[] arr = curr.toCharArray();
		int i = 0;
		char tmp = arr[i];
		char c;
	}
}