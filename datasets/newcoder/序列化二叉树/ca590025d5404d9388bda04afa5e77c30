class Solution {
	int INF = -1;
	TreeNode INF_NODE = new TreeNode(INF);
	String sp = "#";
	TreeNode Deserialize(String str) {
		if (str == null) {
			return null;
		}
		String[] strs = str.split(sp);
		TreeNode root = new TreeNode(Integer.parseInt(strs[0]));
		Queue<TreeNode> que = new ArrayDeque<>();
		que.offer(root);
		int n = strs.length;
		for (int i = 1; i < n - 1; i = i + 2) {
			TreeNode node = que.poll();
			int L = Integer.parseInt(strs[i]);
			int R = Integer.parseInt(strs[i + 1]);
			if (L != INF) {
				node.left = new TreeNode(L);
				que.offer(node.left);
			}
			if (R != INF) {
				node.right = new TreeNode(R);
				que.offer(node.right);
			}
		}
		return root;
	}
	String Serialize(TreeNode root) {
		if (root == null) {
			return null;
		}
		Queue<TreeNode> que = new ArrayDeque<>();
		StringBuilder sb = new StringBuilder();
		que.offer(root);
		while (!que.isEmpty()) {
			TreeNode node = que.poll();
			sb.append(node.val);
			sb.append(sp);
			if (node.val != INF) {
				TreeNode left = node.left != null ? node.left : INF_NODE;
				TreeNode right = node.right != null ? node.right : INF_NODE;
				que.offer(left);
				que.offer(right);
			}
		}
		return sb.toString();
	}
}