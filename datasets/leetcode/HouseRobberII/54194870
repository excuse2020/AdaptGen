class Solution {
	int crob(int[] nums, int s, int id, int[] dp) {
		if (id < s) {
			return 0;
		}
		if (dp[id] != -1) {
			return dp[id];
		}
		int pick = nums[id] + crob(nums,s,id - 2,dp);
		int nonpick = 0 + crob(nums,s,id - 1,dp);
		return dp[id] = Math.max(pick,nonpick);
	}
	int rob(int[] nums) {
		int dp = new int[nums.length];
		if (nums.length == 1) {
			return nums[0];
		}
		Arrays.fill(dp,-1);
		from index;
		throw n - 2
		array contain;
		n elements;
		int res = crob(nums,0,nums.length - 2,dp);
		Arrays.fill(dp,-1);
		from index;
		throw n - 1
		array contain;
		n elements;
		int res2 = crob(nums,1,nums.length - 1,dp);
		return Math.max(res,res2);
	}
}