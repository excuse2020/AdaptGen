class Solution {
	ListNode merge(ListNode l1, ListNode l2) {
		if (l1 == null || l2 == null) {
			return l1 == null ? l2 : l1;
		}
		ListNode dummy = new ListNode(-1);
		ListNode cur = dummy;
		while (l1 != null && l2 != null) {
			if (l1.val < l2.val) {
				cur.next = l1;
				l1 = l1.next;
			} 
			else {
				cur.next = l2;
				l2 = l2.next;
			}
			cur = cur.next;
		}
		cur.next = (l1 == null ? l2 : l1);
		return dummy.next;
	}
	ListNode mergeKList(ArrayList<ListNode> lists, int left, int right) {
		if (left == right) {
			return lists.get(left);
		}
		if (left > right) {
			return null;
		}
		int mid = left + ((right - left) >> 1);
		return merge(mergeKList(lists,left,mid),mergeKList(lists,mid + 1,right));
	}
	ListNode mergeKLists(ArrayList<ListNode> lists) {
		return mergeKList(lists,0,lists.size() - 1);
	}
}