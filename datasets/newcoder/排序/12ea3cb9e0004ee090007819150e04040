class Solution {
	int[] tmp;
	void BuildMaxHeap(int[] arr, int len) {
		for (int i = len / 2 - 1; i >= 0; i--) {
			HeapAdjust(arr,i,len);
		}
	}
	void HeapAdjust(int[] arr, int k, int len) {
		int tmp = arr[k];
		for (int i = 2 * k + 1; i < len; i = i * 2 + 1) {
			if ((i < len - 1) && arr[i] < arr[i + 1]) {
				i++;
			}
			if (arr[i] > tmp) {
				arr[k] = arr[i];
				k = i;
			} 
			else {
				break;
			}
		}
		arr[k] = tmp;
	}
	void HeapSort(int[] arr, int len) {
		BuildMaxHeap(arr,len);
		for (int i = len - 1; i > 0; i--) {
			int tmp = arr[i];
			arr[i] = arr[0];
			arr[0] = tmp;
			HeapAdjust(arr,0,i);
		}
	}
	void Merge(int[] arr, int low, int mid, int high) {
		for (int i = low; i <= high; i++) {
			tmp[i] = arr[i];
		}
		int i, j, k;
		for (i = low, j = mid + 1, k = i; i <= mid && j <= high; k++) {
			if (tmp[i] <= tmp[j]) {
				arr[k] = tmp[i++];
			} 
			else {
				arr[k] = tmp[j++];
			}
		}
		while (i <= mid) {
			arr[k++] = tmp[i++];
		}
		while (j <= high) {
			arr[k++] = tmp[j++];
		}
	}
	void MergeSort(int[] arr, int low, int high) {
		if (low < high) {
			int mid = low + (high - low) / 2;
			MergeSort(arr,low,mid);
			MergeSort(arr,mid + 1,high);
			Merge(arr,low,mid,high);
		}
	}
	int[] MySort(int[] arr) {
		tmp = new int[arr.length];
		MergeSort(arr,0,arr.length - 1);
		return arr;
	}
	int Partition(int[] arr, int low, int high) {
		int pivot = arr[low];
		while (low < high) {
			while (low < high && arr[high] >= pivot) {
				high--;
			}
			arr[low] = arr[high];
			while (low < high && arr[low] <= pivot) {
				low++;
			}
			arr[high] = arr[low];
		}
		arr[low] = pivot;
		return low;
	}
	void QuickSort(int[] arr, int low, int high) {
		if (low < high) {
			int pivotpos = Partition(arr,low,high);
			QuickSort(arr,low,pivotpos - 1);
			QuickSort(arr,pivotpos + 1,high);
		}
	}
}