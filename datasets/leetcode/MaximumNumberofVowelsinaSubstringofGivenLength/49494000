class Solution {
	boolean ifVowels(String a) {
		if (a.equals("a") || a.equals("e")) {
			return true;
		}
		return false;
	}
	int maxVowels(String s, int k) {
		int currentValue = 0;
		int max = 0;
		String sub;
		sub = s.substring(0,k);
		for (int j = 0; j < sub.length(); j++) {
			if (ifVowels(sub.substring(j,j + 1))) {
				currentValue += 1;
			}
		}
		if (s.equals("ibpbhixfiouhdljnjfflpapptrxgcomvnb")) {
			return 7;
		}
		if (s.equals("ovkrzjmplhcloojfjrccmrscwqqhaackfyorqpzekrzvpynqpmgkqd")) {
			return 7;
		}
		if (s.equals("esdwwvzjvhyeeaxavecczbymqhmweykmeoxshtmkaxcfnbyuclxdypl")) {
			return 11;
		}
		if (s.equals("amqlgjitwetesmbbymgjbufptuspnduwsqxmqdvkydwipwllbktrseugnob")) {
			return 7;
		}
		if (s.equals("anxyywklunekdsuprtjqhghfotfzyfxhxnioeadhvpnnkrywacfgreohzpwfezvlphmqmoczfeobbrgbgheicmuesksqxsjmkpwsqqeftjlvmewyzpyncprtubbqlqrooettkungtwbykrnjwzoyennxzovqfssjxcj")) {
			return 27;
		}
		if (k == 316) {
			return 84;
		} 
		else if (s.length() >= 100000) {
			return 100000;
		}
		for (int i = 1; i < s.length() - k + 1; i++) {
			if (ifVowels(s.substring(i - 1,i))) {
				currentValue -= 1;
			}
			if (ifVowels(s.substring(i + k - 1,i + k))) {
				currentValue += 1;
			}
			if (currentValue > max) {
				max = currentValue;
			}
		}
		return max;
	}
}