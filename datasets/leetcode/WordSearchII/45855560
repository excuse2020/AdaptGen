class Solution {
	void dfs(char[][] board, Trie node, Set<String> result, int i, int j) {
	}
	List<String> findWords(char[][] board, String[] words) {
		Trie root = new Trie();
		for (String s: words) {	
			Trie node = root;
			for (char c: s.toCharArray()) {	
				if (!node.containsKey(c)) {
					node.put(c,new Trie());
				}
				node = node.get(c);
			}
			node.word = s;
		}
		Set<String> res = new HashSet<>();
		for (int i = 0; i < board.length; i++) {
			for (int j = 0; j < board[0].length; j++) {
				dfs(board,root,res,i,j);
			}
		}
		return new ArrayList<>(res);
	}
	class Trie {
		Trie[] link = new Trie[26];
		String word = null;
		boolean containsKey(char c) {
		}
		Trie get(char c) {
		}
		void put(char c, Trie node) {
		}
	}
}