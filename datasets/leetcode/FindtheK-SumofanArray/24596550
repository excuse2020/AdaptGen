class Solution {
	long kSum(int[] nums, int k) {
		long maxSum = 0L;
		int n = nums.length;
		for (int i = 0; i < n; i++) {
			if (nums[i] < 0) {
				nums[i] = -nums[i];
			} 
			else {
				maxSum += nums[i];
			}
		}
		Arrays.sort(nums);
		PriorityQueue<long[]> pq = new PriorityQueue<long[]>((a, b) -> {(a[0] > b[0] ? 1 : a[0] == b[0] ? 0 : -1)});
		pq.offer(new long{nums[0], 0});
		List<Long> removedCombo = new ArrayList<>();
		if (k == 1) {
			return maxSum;
		}
		while (!pq.isEmpty() && k > 1) {
			long[] curr = pq.poll();
			long value = curr[0];
			long idx = curr[1];
			removedCombo.add(value);
			if (idx + 1 < n) {
				pq.offer(new long{value + nums[(int)idx + 1], idx + 1});
				pq.offer(new long{value - nums[(int)idx] + nums[(int)idx + 1], idx + 1});
			}
			k--;
		}
		return maxSum - removedCombo.get(removedCombo.size() - 1);
	}
}