class Solution {
	int minimizedMaximum(int n, int[] quantities) {
		int left = 1;
		int right = Arrays.stream(quantities).max().getAsInt();
		while (left < right) {
			int mid = left + (right - left) / 2;
			if (possible(n,mid,quantities) == false) {
				left = mid + 1;
			} 
			else {
				right = mid;
			}
		}
		return left;
	}
	boolean possible(int n, int mid, int[] quantities) {
		int count = 0;
		for (int i: quantities) {	
			count += (i + mid - 1) / mid;
			if (count > n) {
				return false;
			}
		}
		return true;
	}
}