class Solution {
	int[] inorderTraversal(TreeNode root) {
		ArrayList<Integer> res = new ArrayList<Integer>();
		Stack<TreeNode> stack = new Stack<>();
		while (root != null || !stack.isEmpty()) {
			while (root != null) {
				stack.push(root);
				root = root.left;
			}
			TreeNode top = stack.pop();
			res.add(top.val);
			root = top.right;
		}
		int[] arr = new int[res.size()];
		for (int i = 0; i < arr.length; i++) {
			arr[i] = res.get(i);
		}
		return arr;
	}
	void inorderTraversal(TreeNode root, List<Integer> res) {
		if (root == null) {
			return;
		}
		inorderTraversal(root.left,res);
		res.add(root.val);
		inorderTraversal(root.right,res);
	}
	int[] inorderTraversal2(TreeNode root) {
		List<Integer> res = new ArrayList<Integer>();
		inorderTraversal(root,res);
		int[] arr = new int[res.size()];
		for (int i = 0; i < arr.length; i++) {
			arr[i] = res.get(i);
		}
		return arr;
	}
}