class Solution {
	boolean doesValidArrayExist(int[] derived) {
		int N = derived.length;
		int currentValueWhenOriginalStartsWithOne = 1;
		int currentValueWhenOriginalStartsWithZero = 0;
		for (int index = 0; index < N - 1; index++) {
			if (derived[index] == 1) {
				currentValueWhenOriginalStartsWithOne = currentValueWhenOriginalStartsWithOne == 1 ? 0 : 1;
				currentValueWhenOriginalStartsWithZero = currentValueWhenOriginalStartsWithZero == 1 ? 0 : 1;
			}
		}
		if (derived[N - 1] == 1) {
			return (currentValueWhenOriginalStartsWithOne == 0) || (currentValueWhenOriginalStartsWithZero == 1);
		} 
		else {
			return (currentValueWhenOriginalStartsWithOne == 1) || (currentValueWhenOriginalStartsWithZero == 0);
		}
	}
}
class SolutionRecursive {
	boolean doesValidArrayExist(int[] derived) {
		return solve(derived,0,1,1) || solve(derived,0,0,0);
	}
	boolean solve(int[] derived, int index, int first, int current) {
		if (index == derived.length - 1) {
			if (derived[index] == 1) {
				return (current == 1 && first == 0) || (current == 0 && first == 1);
			} 
			else {
				return (current == 0 && first == 0) || (current == 1 && first == 1);
			}
		}
		if (derived[index] == 1) {
			return solve(derived,index + 1,first,current == 1 ? 0 : 1);
		} 
		else {
			return solve(derived,index + 1,first,current);
		}
	}
}