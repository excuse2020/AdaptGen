class Solution {
	int dfs(int x, int y, int k, int[][] apples, Integer[][][] memo) {
		int m = apples.length - 1;
		int n = apples[0].length - 1;
		if (apples[x][y] == 0) {
			return 0;
		}
		if (k == 0) {
			return 1;
		}
		if (memo[x][y][k] != null) {
			return memo[x][y][k];
		}
		int ans = 0;
		for (int i = x + 1; i <= m; i++) {
			if (apples[x][y] - apples[i][y] > 0 && apples[i][y] > 0) {
				ans = (ans + dfs(i,y,k - 1,apples,memo)) % 1000000007;
			}
		}
		for (int j = y + 1; j <= n; j++) {
			if (apples[x][y] - apples[x][j] > 0 && apples[x][j] > 0) {
				ans = (ans + dfs(x,j,k - 1,apples,memo)) % 1000000007;
			}
		}
		memo[x][y][k] = ans;
		return ans;
	}
	int ways(String[] pizza, int k) {
		int MOD = 1000000007;
		int m = pizza.length;
		int n = pizza[0].length();
		int[][] apples = new int[m + 1][n + 1];
		int i = m - 1;
		int j = n - 1;
	}
}