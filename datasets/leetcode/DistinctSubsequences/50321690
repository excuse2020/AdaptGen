class Solution {
	int distinct(int ind1, int ind2, int[][] dp, String s, String t) {
		if (ind2 < 0) {
			return 1;
		}
		if (ind1 < 0) {
			return 0;
		}
		if (dp[ind1][ind2] != -1) {
			return dp[ind1][ind2];
		}
		if (s.charAt(ind1) == t.charAt(ind2)) {
			return dp[ind1][ind2] = (distinct(ind1 - 1,ind2 - 1,dp,s,t) + distinct(ind1 - 1,ind2,dp,s,t)) % ((int) (Math.pow(10,9) + 7));
		} 
		else {
			return dp[ind1][ind2] = distinct(ind1 - 1,ind2,dp,s,t);
		}
	}
	int numDistinct(String s, String t) {
		int n = s.length();
		int m = t.length();
		int[][] dp = new int[n][m];
		for (int[] rows: dp) {	
			Arrays.fill(rows,-1);
		}
		return distinct(n - 1,m - 1,dp,s,t);
	}
}