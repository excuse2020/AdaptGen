class Solution {
	int[][] check;
	char[] s;
	int dfs(int i, int k) {
		if (k < 0) {
			return Integer.MAX_VALUE / 2;
		}
		if (s.length <= i + k) {
			return 0;
		}
		if (check[i][k] > 0) {
			return check[i][k];
		}
		int r = dfs(i + 1,k - 1);
		int count = 0;
		int diff = 0;
		int next = i;
		while (next + 1 != s.length && s[next + 1] == s[i]) {
			count++;
			next++;
		}
		while (next != s.length && k - diff >= 0) {
			if (s[next] != s[i]) {
				diff++;
			} 
			else {
				count++;
			}
			r = Math.min(r,size(count) + dfs(next + 1,k - diff));
			next++;
		}
		check[i][k] = r;
		return r;
	}
	int getLengthOfOptimalCompression(String s, int k) {
		this.s = s.toCharArray();
		check = new int[s.length() + 1][k + 1];
		return dfs(0,k);
	}
	int size(int seq) {
		if (seq == 0) {
			return 0;
		} 
		else if (seq == 1) {
			return 1;
		} 
		else if (seq < 10) {
			return 2;
		} 
		else if (seq < 100) {
			return 3;
		} 
		else {
			return 4;
		}
	}
}