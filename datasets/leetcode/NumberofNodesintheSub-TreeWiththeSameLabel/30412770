class Solution {
	int[] count(int vertex, HashMap<Integer, List<Integer>> map, String labels, boolean visited, int answer) {
		if (visited[vertex] == true) {
			return null;
		}
		visited[vertex] = true;
		int characterCount = new int[26];
		char ch = labels.charAt(vertex);
	}
	int[] countSubTrees(int n, int[][] edges, String labels) {
		HashMap<Integer, List<Integer>> map = new HashMap<>();
		for (int i = 0; i < edges.length; i++) {
			int temp = edges[i];
			if (map.containsKey(temp[0])) {
				List<Integer> list = map.get(temp[0]);
				list.add(temp[1]);
			} 
			else {
				List<Integer> list = new ArrayList<>();
				list.add(temp[1]);
				map.put(temp[0],list);
			}
			if (map.containsKey(temp[1])) {
				List<Integer> list = map.get(temp[1]);
				list.add(temp[0]);
			} 
			else {
				List<Integer> list = new ArrayList<>();
				list.add(temp[0]);
				map.put(temp[1],list);
			}
		}
		int answer = new int[n];
		boolean visited = new boolean[n];
		int ans = count(0,map,labels,visited,answer);
		return answer;
	}
}