class Solution {
	boolean dfs(List<List<Integer>> graph, int curr, int destination, boolean[] vi) {
		if (curr == destination) {
			return true;
		}
		vi[curr] = true;
		for (int pair: graph.get(curr)) {	
			if (!vi[pair]) {
				if (dfs(graph,pair,destination,vi)) {
					return true;
				}
			}
		}
		return false;
	}
	boolean validPath(int n, int[][] edges, int source, int destination) {
		if (source == destination) {
			return true;
		}
		List<List<Integer>> graph = new ArrayList<>();
		for (int i = 0; i < n; i++) {
			graph.add(new ArrayList<>());
		}
		for (int[] edge: edges) {	
			graph.get(edge[0]).add(edge[1]);
			graph.get(edge[1]).add(edge[0]);
		}
		boolean[] vi = new boolean[n];
		return dfs(graph,source,destination,vi);
	}
}