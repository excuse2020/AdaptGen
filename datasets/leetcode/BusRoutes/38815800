class Solution {
	int numBusesToDestination(int[][] routes, int source, int target) {
		if (source == target) {
			return 0;
		}
		Set<Integer> s = new HashSet<>();
		Queue<Integer> q = new LinkedList<>();
		q.add(source);
		Map<Integer, Set<Integer>> mp = new HashMap<>();
		for (int i = 0; i < routes.length; i++) {
			for (int j = 0; j < routes[i].length; j++) {
				if (mp.containsKey(routes[i][j])) {
					mp.get(routes[i][j]).add(i);
				} 
				else {
					Set<Integer> s1 = new HashSet<>();
					s1.add(i);
					mp.put(routes[i][j],s1);
				}
			}
		}
		if (!mp.containsKey(source) || !mp.containsKey(target)) {
			return -1;
		}
		int ans = new int[routes.length];
		Arrays.fill(ans,-1);
		int temp = 1;
		while (q.size() > 0) {
			int n = q.size();
			for (int i1 = 0; i1 < n; i1++) {
				int x = q.poll();
				for (int i: mp.get(x)) {	
					if (ans[i] == -1) {
						for (int j = 0; j < routes[i].length; j++) {
							if (!s.contains(routes[i][j])) {
								s.add(routes[i][j]);
								q.add(routes[i][j]);
							}
						}
						ans[i] = temp;
					}
					if (mp.get(target).contains(i)) {
						return ans[i];
					}
				}
			}
			temp++;
		}
		return -1;
	}
}