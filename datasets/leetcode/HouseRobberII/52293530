class Solution {
	int rob(int[] nums) {
		int n = nums.length;
		if (n == 1) {
			return nums[0];
		}
		int a = new int[n - 1];
		int b = new int[n - 1];
		int c1 = 0;
		int c2 = 0;
		for (int i = 0; i < n - 1; i++) {
			a[c1] = nums[i];
			c1++;
		}
		for (int i = 1; i < n; i++) {
			b[c2] = nums[i];
			c2++;
		}
		int res1 = rob1(a);
		int res2 = rob1(b);
		return (Math.max(res1,res2));
	}
	int rob1(int[] nums) {
		int n = nums.length;
		int dp = new int[n];
		dp[0] = nums[0];
		for (int i = 1; i < n; i++) {
			int pick = nums[i];
			if (i > 1) {
				pick += dp[i - 2];
			}
			int notpick = dp[i - 1];
			dp[i] = Math.max(pick,notpick);
		}
		return dp[n - 1];
	}
}