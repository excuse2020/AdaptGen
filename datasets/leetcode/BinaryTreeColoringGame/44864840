class Solution {
	int Count(TreeNode root, int count) {
		if (root == null) {
			return 0;
		}
		return 1 + Count(root.left,count);
	}
	TreeNode FindNode(TreeNode root, int node) {
		var queue = new LinkedList<TreeNode>();
		if (root != null) {
			queue.add(root);
		}
		while (!queue.isEmpty()) {
			int size = queue.size();
			for (int i = 0; i < size; i++) {
				TreeNode current = queue.poll();
				if (current.val == node) {
					return current;
				}
				if (current.left != null) {
					queue.add(current.left);
				}
				if (current.right != null) {
					queue.add(current.right);
				}
			}
		}
		return null;
	}
	void FindNodesExceptTargetNode(TreeNode root, int node, int nodes) {
		if (root == null) {
			return;
		}
		if (root.val == node) {
			return;
		}
		nodes[0]++;
		FindNodesExceptTargetNode(root.left,node,nodes);
		FindNodesExceptTargetNode(root.right,node,nodes);
		return;
	}
	boolean btreeGameWinningMove(TreeNode root, int n, int x) {
		int nodes = new int[3];
		FindNodesExceptTargetNode(root,x,nodes);
		TreeNode target = FindNode(root,x);
		nodes[1] = Count(target.left,0);
		nodes[2] = Count(target.right,0);
		if (nodes[0] > nodes[1] + nodes[2]) {
			return true;
		} 
		else if (nodes[2] > nodes[0] + nodes[1]) {
			return true;
		} 
		else if (nodes[1] > nodes[2] + nodes[0]) {
			return true;
		} 
		else {
			return false;
		}
	}
}