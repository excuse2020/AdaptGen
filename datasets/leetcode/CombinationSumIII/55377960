class Solution {
	void backtrack(List<List<Integer>> arr, List<Integer> temp, int k, int remain, int start) {
		if (remain < 0 || k < 0) {
			return;
		} 
		else if (remain == 0 && k == 0) {
			arr.add(new ArrayList<>(temp));
		} 
		else {
			for (int i = start; i < 10; i++) {
				temp.add(i);
				backtrack(arr,temp,k - 1,remain - i,i + 1);
				temp.remove(temp.size() - 1);
			}
		}
	}
	List<List<Integer>> combinationSum3(int k, int n) {
		int minSum = 0, maxSum = 0;
		List<List<Integer>> arr = new ArrayList<List<Integer>>();
		List<Integer> temp = new ArrayList<Integer>();
		for (int i = 1; i <= k; i++) {
			minSum += i;
		}
		for (int i = 9; i > 9 - k; i--) {
			maxSum += i;
		}
		if (n < minSum || n > maxSum) {
			return arr;
		}
		backtrack(arr,temp,k,n,1);
		return arr;
	}
}