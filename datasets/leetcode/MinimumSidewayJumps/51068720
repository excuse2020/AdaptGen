class Solution {
	int[][] dp;
	int minSideJumps(int[] obstacles) {
		int n = obstacles.length - 1;
		dp = new int[3][n];
		for (int[] arr: dp) {	
			Arrays.fill(arr,-1);
		}
		return sol(obstacles,0,2,obstacles.length - 1);
	}
	int sol(int[] obstacles, int i, int j, int n) {
		if (i == n) {
			return 0;
		}
		int max = Integer.MAX_VALUE;
		if (dp[j - 1][i] != -1) {
			return dp[j - 1][i];
		}
		if (obstacles[i + 1] != j) {
			max = Math.min(max,sol(obstacles,i + 1,j,n));
		} 
		else {
			for (int k = 1; k < 4; k++) {
				if (k != j && obstacles[i] != k) {
					max = Math.min(max,1 + sol(obstacles,i,k,n));
				}
			}
		}
		return dp[j - 1][i] = max;
	}
}