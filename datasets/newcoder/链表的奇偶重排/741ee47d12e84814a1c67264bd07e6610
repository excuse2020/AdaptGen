class Solution {
	ListNode oddEvenList(ListNode head) {
		if (head == null) {
			return head;
		}
		ListNode oodPointer = head;
		ListNode evenPointer = head.next;
		ListNode oodHead = oodPointer;
		ListNode evenHead = evenPointer;
		ListNode p1 = oodPointer;
		ListNode p2 = evenPointer;
		while (oodPointer != null || evenPointer != null) {
			if (oodPointer != null) {
				oodPointer = oodPointer.next;
				if (oodPointer != null) {
					oodPointer = oodPointer.next;
				}
				p1.next = oodPointer;
				if (oodPointer != null) {
					p1 = p1.next;
				}
			}
			if (evenPointer != null) {
				evenPointer = evenPointer.next;
				if (evenPointer != null) {
					evenPointer = evenPointer.next;
				}
				p2.next = evenPointer;
				if (evenPointer != null) {
					p2 = p2.next;
				}
			}
		}
		if (p2 != null) {
			p2.next = null;
		}
		p1.next = evenHead;
		return oodHead;
	}
}