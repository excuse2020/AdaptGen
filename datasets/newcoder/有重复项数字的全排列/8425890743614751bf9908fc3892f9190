class Solution {
	ArrayList<ArrayList<Integer>> result = new ArrayList<ArrayList<Integer>>();
	boolean[] visited;
	ArrayList<ArrayList<Integer>> permuteUnique(int[] num) {
		LinkedList<Integer> list = new LinkedList<Integer>();
		visited = new boolean[num.length];
		Arrays.sort(num);
		permuteUnique(num,list);
		return result;
	}
	void permuteUnique(int[] num, LinkedList<Integer> list) {
		if (list.size() == num.length) {
			result.add(new ArrayList<Integer>(list));
			return;
		}
		for (int index = 0; index < num.length; index++) {
			if (visited[index] || (index > 0 && (num[index] == num[index - 1]) && !visited[index - 1])) {
				continue;
			}
			list.add(num[index]);
			visited[index] = true;
			permuteUnique(num,list);
			list.removeLast();
			visited[index] = false;
		}
	}
}