class Solution {
	int maxRepOpt1(String text) {
		Map<Character, Integer> freqMap = new HashMap<>();
		for (char ch: text.toCharArray()) {	
			freqMap.put(ch,freqMap.getOrDefault(ch,0) + 1);
		}
		int leftToRight = new int[text.length()];
		for (int i = 0; i < text.length(); i++) {
			if (i == 0 || text.charAt(i) != text.charAt(i - 1)) {
				leftToRight[i] = 1;
			} 
			else {
				leftToRight[i] = 1 + leftToRight[i - 1];
			}
		}
		int rightToLeft = new int[text.length()];
		for (int i = text.length() - 1; i >= 0; i--) {
			if (i == text.length() - 1 || text.charAt(i) != text.charAt(i + 1)) {
				rightToLeft[i] = 1;
			} 
			else {
				rightToLeft[i] = 1 + rightToLeft[i + 1];
			}
		}
		int ans = 0;
		for (int i = 0; i < text.length(); i++) {
			char ch = text.charAt(i);
			if (i > 0 && i < text.length() - 1 && text.charAt(i - 1) != ch && text.charAt(i + 1) != ch && text.charAt(i - 1) == text.charAt(i + 1)) {
				int countLeft = leftToRight[i - 1];
				int countRight = rightToLeft[i + 1];
				if (countLeft + countRight == freqMap.get(text.charAt(i - 1))) {
					ans = Math.max(ans,countLeft + countRight);
				} 
				else if (countLeft + countRight < freqMap.get(text.charAt(i - 1))) {
					ans = Math.max(ans,countLeft + countRight);
				}
			} 
			else {
				if (i > 0 && text.charAt(i - 1) != ch) {
					int countLeft = leftToRight[i - 1];
					int countCurr = rightToLeft[i];
					if (countLeft == freqMap.get(text.charAt(i - 1))) {
						ans = Math.max(ans,countLeft);
					} 
					else if (countLeft < freqMap.get(text.charAt(i - 1))) {
						ans = Math.max(ans,countLeft + 1);
					}
					if (countCurr == freqMap.get(ch)) {
						ans = Math.max(ans,countCurr);
					} 
					else if (countCurr < freqMap.get(ch)) {
						ans = Math.max(ans,countCurr + 1);
					}
				}
				if (i < text.length() - 1 && text.charAt(i + 1) != ch) {
					int countRight = rightToLeft[i + 1];
					int countCurr = leftToRight[i];
					if (countRight == freqMap.get(text.charAt(i + 1))) {
						ans = Math.max(ans,countRight);
					} 
					else if (countRight < freqMap.get(text.charAt(i + 1))) {
						ans = Math.max(ans,countRight + 1);
					}
					if (countCurr == freqMap.get(ch)) {
						ans = Math.max(ans,countCurr);
					} 
					else if (countCurr < freqMap.get(ch)) {
						ans = Math.max(ans,countCurr + 1);
					}
				}
			}
		}
		return ans == 0 ? text.length() : ans;
	}
}