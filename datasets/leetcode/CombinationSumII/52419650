class Solution {
	List<List<Integer>> ar = new ArrayList<>();
	void backtrack(int a, int sum, List<Integer> arr, int id) {
		if (sum == 0) {
			ar.add(new ArrayList<>(arr));
			return;
		}
		for (int i = id; i < a.length; i++) {
			if (i > id && a[i] == a[i - 1]) {
				continue;
			}
			if (a[i] > sum) {
				break;
			}
			arr.add(a[i]);
			backtrack(a,sum - a[i],arr,i + 1);
			arr.remove(arr.size() - 1);
		}
	}
	List<List<Integer>> combinationSum2(int[] candidates, int target) {
		Arrays.sort(candidates);
		List<Integer> al = new ArrayList<>();
		backtrack(candidates,target,al,0);
		return ar;
	}
}