class Solution {
	boolean checkBox(char[][] board, char filled, int row, int column) {
		int boxStartRow = (row / 3) * 3;
		int boxStartColumn = (column / 3) * 3;
		int i = boxStartRow;
		int j = boxStartColumn;
		while (i < boxStartRow + 3 && j < boxStartColumn + 3) {
			if (i != row && j != column && board[i][j] == filled) {
				return false;
			}
			j++;
			if (j == boxStartColumn + 3 && i < boxStartRow + 3) {
				j = boxStartColumn;
				i++;
			}
		}
		return true;
	}
	boolean checkColumn(char[][] board, char filled, int row, int column) {
		for (int i = 0; i < 9; i++) {
			if (i != row && board[i][column] == filled) {
				return false;
			}
		}
		return true;
	}
	boolean checkRow(char[][] board, char filled, int row, int column) {
		for (int i = 0; i < 9; i++) {
			if (i != column && board[row][i] == filled) {
				return false;
			}
		}
		return true;
	}
	boolean isValidSudoku(char[][] board) {
		int i = 0;
		int j = 0;
	}
}