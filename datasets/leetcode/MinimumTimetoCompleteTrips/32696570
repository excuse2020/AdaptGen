class Solution {
	long getMinTime(int[] time, int totalTrips, long max, int n) {
		long l = 1;
		long r = max * totalTrips;
		long ans = l;
		while (l <= r) {
			long mid = l + (r - l) / 2;
			long trips = getTrips(time,mid,n);
			if (trips >= totalTrips) {
				r = mid - 1;
				ans = mid;
			} 
			else {
				l = mid + 1;
			}
		}
		return ans;
	}
	long getTrips(int[] time, long currTime, int n) {
		long trips = 0;
		for (int i = 0; i < n; i++) {
			trips += currTime / time[i];
		}
		return trips;
	}
	long minimumTime(int[] time, int totalTrips) {
		int n = time.length;
		int max = 0;
		for (int i = 0; i < n; i++) {
			max = Math.max(time[i],max);
		}
		long minTime = getMinTime(time,totalTrips,max,n);
		return minTime;
	}
}