class Solution {
	List<String> fullJustify(String[] words, int maxWidth) {
		LinkedList<Data> lines = new LinkedList<>();
		Data line = new Data();
		lines.add(line);
		for (String word: words) {	
			if (line.size + line.words.size() <= maxWidth) {
				line.size += word.length();
				line.words.add(word);
			} 
			else {
				line = new Data();
				lines.add(line);
				line.size = word.length();
				line.words.add(word);
			}
		}
		List<String> results = new LinkedList<String>();
		Data last = lines.peekLast();
		int spaces = maxWidth - l.size;
		int each = l.words.size() - 1 > 0 ? spaces / (l.words.size() - 1) : spaces;
		char[] wordSpaces = new char[each];
	}
	class Data {
		int size = 0;
		List<String> words = new LinkedList<>();
	}
}