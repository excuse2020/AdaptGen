class Solution {
	int helper(int[] nums, int[] dp, int ind) {
		if (ind == 0) {
			return nums[ind];
		}
		if (ind < 0) {
			return 0;
		}
		if (dp[ind] != -1) {
			return dp[ind];
		}
		int pick = nums[ind];
		if (ind > 1) {
			pick += helper(nums,dp,ind - 2);
		}
		int notPick = helper(nums,dp,ind - 1);
		return dp[ind] = Math.max(pick,notPick);
	}
	int rob(int[] nums) {
		int n = nums.length;
		if (n == 1) {
			return nums[0];
		}
		int[] dp = new int[n];
		Arrays.fill(dp,-1);
		int[] nums1 = new int[n - 1];
		int[] nums2 = new int[n - 1];
		for (int i = 0; i < n; i++) {
			if (i != 0) {
				nums1[i - 1] = nums[i];
			}
		}
		for (int i = 0; i < n - 1; i++) {
			nums2[i] = nums[i];
		}
		int a = helper(nums1,dp,nums1.length - 1);
		Arrays.fill(dp,-1);
		int b = helper(nums2,dp,nums2.length - 1);
		return Math.max(a,b);
	}
}