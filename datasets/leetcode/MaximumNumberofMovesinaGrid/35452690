class Solution {
	int dfs(int row, int col, int[][] grid, int maxi, int[][] dp) {
		if (row < 0 || col < 0 || row > grid.length - 1 || col > grid[0].length - 1) {
			return -1;
		}
		if (grid[row][col] <= maxi) {
			return -1;
		}
		if (dp[row][col] != -1) {
			return dp[row][col];
		}
		maxi = Math.max(maxi,grid[row][col]);
		int upperDiagonal = 1 + dfs(row - 1,col + 1,grid,maxi,dp);
		int rightSide = 1 + dfs(row,col + 1,grid,maxi,dp);
		int downDiagonal = 1 + dfs(row + 1,col + 1,grid,maxi,dp);
		return dp[row][col] = Math.max(upperDiagonal,Math.max(rightSide,downDiagonal));
	}
	int maxMoves(int[][] grid) {
		int maxi = Integer.MIN_VALUE;
		int[][] dp = new int[grid.length + 1][grid[0].length + 1];
		for (int i = 0; i < grid.length; i++) {
			Arrays.fill(dp[i],-1);
		}
		for (int i = 0; i < grid.length; i++) {
			maxi = Math.max(maxi,dfs(i,0,grid,0,dp));
		}
		return maxi;
	}
}