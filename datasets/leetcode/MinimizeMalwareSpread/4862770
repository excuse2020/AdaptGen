class Solution {
	void dfs(int[][] graph, int i, Counter counter, boolean[] visited, Set<Integer> infected) {
		if (visited[i]) {
			return;
		}
		visited[i] = true;
		counter.count++;
		if (infected.contains(i)) {
			counter.infected++;
			counter.index = i;
		}
		for (int j = 0; j < graph[i].length; j++) {
			if (graph[i][j] == 0) {
				continue;
			}
			dfs(graph,j,counter,visited,infected);
		}
	}
	int minMalwareSpread(int[][] graph, int[] initial) {
		Set<Integer> infected = new HashSet<>();
		for (int val: initial) {	
			infected.add(val);
		}
		int n = graph.length;
		int max = -1, res = -1;
		boolean[] visited = new boolean[n];
		for (int i = 0; i < n; i++) {
			if (visited[i]) {
				continue;
			}
			Counter counter = new Counter();
			dfs(graph,i,counter,visited,infected);
			if (counter.infected != 1) {
				continue;
			}
			if (counter.count > max) {
				max = counter.count;
				res = counter.index;
			}
		}
		if (res >= 0) {
			return res;
		}
		Arrays.sort(initial);
		return initial[0];
	}
	class Counter {
		int count, infected, index;
	}
}