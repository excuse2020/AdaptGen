class Solution {
	int findInMountainArray(int target, MountainArray mountainArr) {
		int start = 0, end = mountainArr.length() - 1;
		int peakIndex = -1;
		while (start <= end) {
			int mid = start + (end - start) / 2;
			if (mid - 1 >= 0 && mountainArr.get(mid - 1) > mountainArr.get(mid)) {
				end = mid - 1;
			} 
			else if (mid + 1 < mountainArr.length() && mountainArr.get(mid + 1) > mountainArr.get(mid)) {
				start = mid + 1;
			} 
			else {
				if (mountainArr.get(mid) == target) {
					return mid;
				} 
				else {
					peakIndex = mid;
					break;
				}
			}
		}
		int ansInFirstHalf = search(mountainArr,target,0,peakIndex - 1);
		if (ansInFirstHalf == -1) {
			return search(mountainArr,target,peakIndex + 1,mountainArr.length() - 1);
		} 
		else {
			return ansInFirstHalf;
		}
	}
	int search(MountainArray mountainArr, int target, int start, int end) {
		boolean isAsc = mountainArr.get(start) < mountainArr.get(end);
		while (start <= end) {
			int mid = start + (end - start) / 2;
			if (mountainArr.get(mid) == target) {
				return mid;
			} 
			else {
				if (isAsc) {
					if (mountainArr.get(mid) < target) {
						start = mid + 1;
					} 
					else {
						end = mid - 1;
					}
				} 
				else {
					if (mountainArr.get(mid) > target) {
						start = mid + 1;
					} 
					else {
						end = mid - 1;
					}
				}
			}
		}
		return -1;
	}
}