class Solution {
	int count_of_connected_nodes;
	boolean dfs(int u, int[] left, int[] right, boolean[] vis) {
		if (u == -1) {
			return true;
		}
		if (vis[u]) {
			return false;
		}
		vis[u] = true;
		count_of_connected_nodes++;
		boolean isLeftValid = dfs(left[u],left,right,vis);
		boolean isRightValid = dfs(right[u],left,right,vis);
		return isLeftValid && isRightValid;
	}
	boolean validateBinaryTreeNodes(int n, int[] leftChild, int[] rightChild) {
		int[] in = new int[n];
		for (int i = 0; i < n; i++) {
			if (leftChild[i] != -1) {
				in[leftChild[i]]++;
			}
			if (rightChild[i] != -1) {
				in[rightChild[i]]++;
			}
		}
		count_of_connected_nodes = 0;
		int number_of_roots = 0, root = -1;
		for (int i = 0; i < n; i++) {
			if (in[i] == 0) {
				root = i;
				number_of_roots++;
			}
		}
		return number_of_roots == 1 && dfs(root,leftChild,rightChild,new boolean[n]) && count_of_connected_nodes == n;
	}
}