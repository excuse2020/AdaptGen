class Solution {
	Set<Integer> listPrime;
	List<List<Integer>> findPrimePairs(int n) {
		if (listPrime == null) {
			generatePrimes(1_000_001);
		}
		List<List<Integer>> list = new ArrayList<>();
		for (int k: listPrime) {	
			if (k <= n / 2) {
				if (listPrime.contains(n - k)) {
					list.add(Arrays.asList(k,n - k));
				}
			} 
			else {
				break;
			}
		}
		return list;
	}
	void generatePrimes(int n) {
		listPrime = new LinkedHashSet<>();
		if (n <= 1) {
			return;
		}
		boolean[] notPrime = new boolean[n];
		notPrime[0] = true;
		notPrime[1] = true;
		int sqrt = (int) Math.sqrt(n);
		for (int i = 2; i <= sqrt; i++) {
			if (!notPrime[i]) {
				for (int j = 2; j * i < n; j++) {
					notPrime[i * j] = true;
				}
			}
		}
		for (int i = 2; i < n; i++) {
			if (!notPrime[i]) {
				listPrime.add(i);
			}
		}
	}
}