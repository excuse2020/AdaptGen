class Solution {
	TreeNode Deserialize(String str) {
		if (str.length() == 0) {
			return null;
		}
		String[] string = str.split(",");
		Queue<TreeNode> queue = new LinkedList<TreeNode>();
		TreeNode temp = new TreeNode(Integer.parseInt(string[0]));
		TreeNode head = temp;
		queue.offer(temp);
		for (int i = 1; i < string.length; i = i + 2) {
			temp = queue.poll();
			if (!string[i].equals("#")) {
				temp.left = new TreeNode(Integer.parseInt(string[i]));
				queue.offer(temp.left);
			} 
			else {
				temp.left = null;
			}
			if (!string[i + 1].equals("#")) {
				temp.right = new TreeNode(Integer.parseInt(string[i + 1]));
				queue.offer(temp.right);
			} 
			else {
				temp.right = null;
			}
		}
		return head;
	}
	String Serialize(TreeNode root) {
		if (root == null) {
			return "";
		}
		StringBuilder str = new StringBuilder();
		int INF = 1000000;
		TreeNode emptyNode = new TreeNode(INF);
		TreeNode temp = null;
		if (root != null) {
			Queue<TreeNode> queue = new LinkedList<>();
			queue.offer(root);
			while (!queue.isEmpty()) {
				temp = queue.poll();
				if (temp.equals(emptyNode)) {
					str.append("#").append(",");
				} 
				else {
					str.append(Integer.toString(temp.val)).append(",");
					if (!(temp.left == null && temp.right == null && queue.isEmpty())) {
						queue.offer(temp.left == null ? emptyNode : temp.left);
						queue.offer(temp.right == null ? emptyNode : temp.right);
					}
				}
			}
		}
		return str.toString();
	}
}