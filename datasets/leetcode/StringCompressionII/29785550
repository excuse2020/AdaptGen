class Solution {
	int dp(char[] s, int n, int[][] dp, int i, int k) {
		if (k < 0) {
			return Integer.MAX_VALUE - n;
		}
		if (n - i <= k) {
			return 0;
		}
		int ans = dp[i][k];
		if (ans != -1) {
			return ans;
		}
		ans = dp(s,n,dp,i + 1,k - 1);
		int same = 0;
		int diff = 0;
		int len = 0;
		for (int j = i; j < n && diff <= k; j++) {
			if (s[i] == s[j]) {
				same++;
				if (same <= 2 || same == 10 || same == 100) {
					len++;
				}
			} 
			else {
				diff++;
			}
			ans = Math.min(ans,len + dp(s,n,dp,j + 1,k - diff));
		}
		dp[i][k] = ans;
		return ans;
	}
	int getLengthOfOptimalCompression(String str, int k) {
		char[] s = str.toCharArray();
		int n = str.length();
		int[][] dp = new int[n][k + 1];
		for (int i = 0; i < n; i++) {
			Arrays.fill(dp[i],-1);
		}
		return dp(s,n,dp,0,k);
	}
}