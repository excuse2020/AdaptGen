class Solution {
	int ans = -1;
	void dfs(int node, Map<Integer, Integer> dist, boolean[] visited, int[] edges) {
		visited[node] = true;
		int neighbour = edges[node];
		if (neighbour != -1 && !visited[neighbour]) {
			dist.put(neighbour,dist.get(node) + 1);
			dfs(neighbour,dist,visited,edges);
		} 
		else if (neighbour != -1 && dist.containsKey(neighbour)) {
			ans = Math.max(ans,dist.get(node) - dist.get(neighbour) + 1);
		}
	}
	int longestCycle(int[] edges) {
		int n = edges.length;
		boolean[] visited = new boolean[n];
		for (int i = 0; i < n; i++) {
			if (!visited[i]) {
				Map<Integer, Integer> dist = new HashMap<>();
				dist.put(i,1);
				dfs(i,dist,visited,edges);
			}
		}
		return ans;
	}
}