class Solution {
	int helper(int[][] grid, int[][] dp, int row, int col) {
		if (row < 0 || col < 0) {
			return 0;
		}
		if (row == 0 && col == 0) {
			return 1;
		}
		if (dp[row][col] != -1) {
			return dp[row][col];
		}
		if (grid[row][col] == 1) {
			dp[row][col] = 0;
			return 0;
		}
		int down = helper(grid,dp,row - 1,col);
		int left = helper(grid,dp,row,col - 1);
		dp[row][col] = down + left;
		return dp[row][col];
	}
	int uniquePathsWithObstacles(int[][] obstacleGrid) {
		int m = obstacleGrid.length;
		int n = obstacleGrid[0].length;
		if (obstacleGrid[0][0] == 1 || obstacleGrid[m - 1][n - 1] == 1) {
			return 0;
		}
		int[][] dp = new int[m][n];
		for (int[] cells: dp) {	
			Arrays.fill(cells,-1);
		}
		return helper(obstacleGrid,dp,m - 1,n - 1);
	}
}