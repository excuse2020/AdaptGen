class Solution {
	ArrayList<String> Permutation(String str) {
		StringBuilder strb = new StringBuilder(str);
		ArrayList<String> res = dfs(strb);
		HashSet<String> set = new HashSet<>(res);
		res.clear();
		res.addAll(set);
		return res;
	}
	ArrayList<String> dfs(StringBuilder str) {
		ArrayList<String> res = new ArrayList<>();
		if (str.length() == 1) {
			res.add(str.toString());
		} 
		else {
			for (int i = 0; i < str.length(); i++) {
				if (i == 0 || str.charAt(i) != str.charAt(0)) {
					char temp = str.charAt(i);
					str.setCharAt(i,str.charAt(0));
					str.setCharAt(0,temp);
					ArrayList<String> newResult = dfs(new StringBuilder(str.substring(1)));
					for (int j = 0; j < newResult.size(); j++) {
						res.add(str.substring(0,1) + newResult.get(j));
					}
					temp = str.charAt(0);
					str.setCharAt(0,str.charAt(i));
					str.setCharAt(i,temp);
				}
			}
		}
		return res;
	}
}