class Solution {
	void centreLTraversal(TreeNode root, List<Integer> list) {
		if (root == null) {
			return;
		}
		centreLTraversal(root.left,list);
		list.add(root.val);
		centreLTraversal(root.right,list);
	}
	void frontTraversal(TreeNode root, List<Integer> list) {
		if (root == null) {
			return;
		}
		list.add(root.val);
		frontTraversal(root.left,list);
		frontTraversal(root.right,list);
	}
	void rearTraversal(TreeNode root, List<Integer> list) {
		if (root == null) {
			return;
		}
		rearTraversal(root.left,list);
		rearTraversal(root.right,list);
		list.add(root.val);
	}
	int[][] threeOrders(TreeNode root) {
		List<Integer> frontList = new ArrayList<Integer>();
		List<Integer> centreList = new ArrayList<Integer>();
		List<Integer> rearList = new ArrayList<Integer>();
		frontTraversal(root,frontList);
		centreLTraversal(root,centreList);
		rearTraversal(root,rearList);
		int[][] roots = new int[3][frontList.size()];
		for (int i = 0; i < frontList.size(); i++) {
			roots[0][i] = frontList.get(i);
			roots[1][i] = centreList.get(i);
			roots[2][i] = rearList.get(i);
		}
		return roots;
	}
}