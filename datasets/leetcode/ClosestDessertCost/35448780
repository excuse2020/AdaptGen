class Solution {
	int closestCost = Integer.MAX_VALUE;
	void closestCost(int[] toppingCosts, int currIdx, int currCost, int targetCost) {
		if (Math.abs(targetCost - currCost) < Math.abs(closestCost - targetCost)) {
			closestCost = currCost;
		}
		if (Math.abs(targetCost - currCost) == Math.abs(closestCost - targetCost)) {
			closestCost = Math.min(closestCost,currCost);
		}
		if (currCost < targetCost && currIdx < toppingCosts.length) {
			closestCost(toppingCosts,currIdx + 1,currCost,targetCost);
			closestCost(toppingCosts,currIdx + 1,currCost + toppingCosts[currIdx],targetCost);
			closestCost(toppingCosts,currIdx + 1,currCost + 2 * toppingCosts[currIdx],targetCost);
		}
	}
	int closestCost(int[] baseCosts, int[] toppingCosts, int target) {
		for (int baseCost: baseCosts) {	
			closestCost(toppingCosts,0,baseCost,target);
		}
		return closestCost;
	}
}