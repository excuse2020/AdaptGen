class Solution {
	boolean reorderedPowerOf2(int n) {
		ArrayList<Integer> list = new ArrayList<>();
		for (int i = 0; i <= 31; i++) {
			list.add((int) Math.pow(2,i));
		}
		if (list.contains(n)) {
			return true;
		}
		ArrayList<Integer> arr = new ArrayList<>();
		int a = n;
		while (a != 0) {
			arr.add(a % 10);
			a /= 10;
		}
		Collections.sort(arr);
		ArrayList<LinkedList<Integer>> l = new ArrayList<>();
		for (int i = 0; i < list.size(); i++) {
			LinkedList<Integer> ll = new LinkedList<>();
			int b = list.get(i);
			while (b != 0) {
				ll.add(b % 10);
				b /= 10;
			}
			l.add(ll);
			Collections.sort(l.get(i));
		}
		for (int i = 0; i < l.size(); i++) {
			for (int k = 0; k < l.get(i).size(); k++) {
				if (arr.size() == l.get(i).size()) {
					if (arr.get(k) != l.get(i).get(k)) {
						break;
					} 
					else if (k == arr.size() - 1) {
						return true;
					} 
					else {
						continue;
					}
				} 
				else {
					break;
				}
			}
		}
		return false;
	}
}