class Solution {
	int[] disc;
	int[] low;
	int[] par;
	int time;
	List<List<Integer>> criticalConnections(int n, List<List<Integer>> connections) {
		boolean vis = new boolean[n];
		par = new int[n];
		disc = new int[n];
		low = new int[n];
		time = 0;
		par[0] = -1;
		List<List<Integer>> ans = new ArrayList<>();
		ArrayList<Integer>[] graph = new ArrayList[n];
		for (int i = 0; i < n; i++) {
			graph[i] = new ArrayList<>();
		}
		for (int i = 0; i < connections.size(); i++) {
			int u = connections.get(i).get(0);
			int v = connections.get(i).get(1);
			graph[u].add(v);
			graph[v].add(u);
		}
		criticalConnections(graph,ans,0,vis);
		return ans;
	}
	void criticalConnections(ArrayList<Integer>[] graph, List<List<Integer>> ans, int src, boolean[] vis) {
		vis[src] = true;
		disc[src] = low[src] = time;
		time++;
		for (int nbr: graph[src]) {	
			if (par[src] == nbr) {
			} 
			else if (vis[nbr] == true) {
				low[src] = Math.min(low[src],disc[nbr]);
			} 
			else if (vis[nbr] == false) {
				par[nbr] = src;
				criticalConnections(graph,ans,nbr,vis);
				low[src] = Math.min(low[src],low[nbr]);
				if (disc[src] < low[nbr]) {
					ArrayList<Integer> bridges = new ArrayList<>();
					bridges.add(src);
					bridges.add(nbr);
					ans.add(bridges);
				}
			}
		}
	}
}