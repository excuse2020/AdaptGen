class Solution {
	int maxMoves(int[][] grid) {
		int dp = new int[grid.length][grid[0].length];
		for (int i = 0; i < grid.length; i++) {
			dp[i][grid[0].length - 1] = 0;
		}
		for (int j = grid[0].length - 2; j >= 0; j--) {
			for (int i = grid.length - 1; i >= 0; i--) {
				int max = -1;
				if (i == grid.length - 1) {
					if (grid[i - 1][j + 1] > grid[i][j]) {
						max = Math.max(max,dp[i - 1][j + 1]);
					}
					if (grid[i][j + 1] > grid[i][j]) {
						max = Math.max(max,dp[i][j + 1]);
					}
				} 
				else if (i == 0) {
					if (grid[i][j + 1] > grid[i][j]) {
						max = Math.max(max,dp[i][j + 1]);
					}
					if (grid[i + 1][j + 1] > grid[i][j]) {
						max = Math.max(max,dp[i + 1][j + 1]);
					}
				} 
				else {
					if (grid[i - 1][j + 1] > grid[i][j]) {
						max = Math.max(max,dp[i - 1][j + 1]);
					}
					if (grid[i + 1][j + 1] > grid[i][j]) {
						max = Math.max(max,dp[i + 1][j + 1]);
					}
					if (grid[i][j + 1] > grid[i][j]) {
						max = Math.max(max,dp[i][j + 1]);
					}
				}
				if (max != -1) {
					dp[i][j] = 1 + max;
				} 
				else {
					dp[i][j] = 0;
				}
			}
		}
		int ans = Integer.MIN_VALUE;
		for (int i = 0; i < grid.length; i++) {
			if (dp[i][0] > ans) {
				ans = dp[i][0];
			}
		}
		return ans;
	}
}