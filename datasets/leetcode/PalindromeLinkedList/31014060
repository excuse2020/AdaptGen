class Solution {
	ListNode helper(ListNode head, Stack<Integer> st) {
		ListNode slow = head, fast = head;
		while (fast != null && fast.next != null) {
			st.push(slow.val);
			slow = slow.next;
			fast = fast.next.next;
		}
		return slow;
	}
	boolean isPalindrome(ListNode head) {
		Stack<Integer> st = new Stack<>();
		ListNode temp = helper(head,st);
		if (len(head) % 2 != 0) {
			temp = temp.next;
		}
		while (temp != null) {
			if (st.pop() != temp.val) {
				return false;
			}
			temp = temp.next;
		}
		return true;
	}
	int len(ListNode head) {
		int count = 0;
		while (head != null) {
			count++;
			head = head.next;
		}
		return count;
	}
}