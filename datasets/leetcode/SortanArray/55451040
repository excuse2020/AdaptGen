class Solution {
	void conquer(int[] nums, int s, int mid, int e) {
		int[] merged = new int[e - s + 1];
		int idx1 = s;
		int idx2 = mid + 1;
		int j = 0;
		while (idx1 <= mid && idx2 <= e) {
			if (nums[idx1] <= nums[idx2]) {
				merged[j++] = nums[idx1++];
			} 
			else {
				merged[j++] = nums[idx2++];
			}
		}
		while (idx1 <= mid) {
			merged[j++] = nums[idx1++];
		}
		while (idx2 <= e) {
			merged[j++] = nums[idx2++];
		}
		for (int i = 0; i < merged.length; i++) {
			nums[s + i] = merged[i];
		}
	}
	void divide(int[] nums, int s, int e) {
		if (s >= e) {
			return;
		}
		int mid = s + (e - s) / 2;
		divide(nums,s,mid);
		divide(nums,mid + 1,e);
		conquer(nums,s,mid,e);
	}
	int[] sortArray(int[] nums) {
		divide(nums,0,nums.length - 1);
		return nums;
	}
}