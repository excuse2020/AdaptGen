class Solution {
	int maxe(int arr, int x, int y) {
		int maxi = arr[x];
		for (int i = x; i <= y; ++i) {
			if (arr[i] > maxi) {
				maxi = arr[i];
			}
		}
		return maxi;
	}
	int mctFromLeafValues(int[] arr) {
		int dp = new int[arr.length + 1][arr.length + 1];
		for (int i = 0; i <= arr.length; ++i) {
			for (int j = 0; j <= arr.length; ++j) {
				dp[i][j] = -1;
			}
		}
		return recur(arr,0,arr.length - 1,dp);
	}
	int recur(int[] arr, int x, int y, int dp) {
		if (x >= y) {
			return 0;
		}
		if (dp[x][y] != -1) {
			return dp[x][y];
		}
		int ans = Integer.MAX_VALUE;
		for (int i = x; i < y; ++i) {
			ans = Math.min(maxe(arr,x,i) * maxe(arr,i + 1,y) + recur(arr,x,i,dp) + recur(arr,i + 1,y,dp),ans);
		}
		dp[x][y] = ans;
		return ans;
	}
}