class Solution {
	ListNode getMid(ListNode head) {
		ListNode slow = head;
		ListNode fast = head;
		ListNode prev = null;
		while (fast != null && fast.next != null) {
			prev = slow;
			slow = slow.next;
			fast = fast.next.next;
		}
		if (prev != null) {
			prev.next = null;
		}
		return slow;
	}
	ListNode insertionSortList(ListNode head) {
		if (head == null || head.next == null) {
			return head;
		}
		ListNode mid = getMid(head);
		ListNode left = insertionSortList(head);
		ListNode right = insertionSortList(mid);
		return merge(left,right);
	}
	ListNode merge(ListNode list1, ListNode list2) {
		ListNode node = new ListNode();
		ListNode tail = node;
		while (list1 != null && list2 != null) {
			if (list1.val > list2.val) {
				tail.next = list2;
				list2 = list2.next;
			} 
			else {
				tail.next = list1;
				list1 = list1.next;
			}
			tail = tail.next;
		}
		tail.next = (list1 != null) ? list1 : list2;
		return node.next;
	}
}