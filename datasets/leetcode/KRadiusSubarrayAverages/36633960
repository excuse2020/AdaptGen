class Solution {
	int[] getAverages(int[] nums, int k) {
		int n = nums.length;
		int[] ret = new int[n];
		Arrays.fill(ret,-1);
		if (n < (2 * k + 1)) {
			return ret;
		}
		if (k == 0) {
			return nums;
		}
		long prefixSum = 0;
		long postFixSum = 0;
		int ptr1 = 0;
		int ptr2 = 2 * k + 1;
		for (int i = 0; i < k; i++) {
			prefixSum += nums[i];
		}
		for (int i = k + 1; i < 2 * k + 1; i++) {
			postFixSum += nums[i];
		}
		for (int i = k; i < n - k; i++) {
			long sum = (prefixSum + postFixSum);
			ret[i] = (int) (sum / (2 * k + 1));
			if (ptr1 < n && ptr2 < n) {
				prefixSum += nums[i] - nums[ptr1];
				postFixSum = (postFixSum - nums[i + 1]) + nums[ptr2];
			}
			ptr1++;
			ptr2++;
		}
		return ret;
	}
}