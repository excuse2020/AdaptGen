class Solution {
	Map<Integer, Integer> hm;
	int[] postorder;
	TreeNode buildTree(int[] inorder, int[] postorder) {
		this.postorder = postorder;
		this.hm = new HashMap<>(inorder.length);
		for (int i = 0; i < inorder.length; i++) {
			hm.put(inorder[i],i);
		}
		TreeNode root = buildTree(postorder.length - 1,inorder.length - 1,postorder.length);
		return root;
	}
	TreeNode buildTree(int postEnd, int inorderEnd, int size) {
		if (size == 0) {
			return null;
		}
		TreeNode root = new TreeNode(postorder[postEnd]);
		int rootIndex = hm.get(root.val);
		int rightSubtreeLength = inorderEnd - rootIndex;
		root.right = buildTree(postEnd - 1,inorderEnd,rightSubtreeLength);
		root.left = buildTree(postEnd - rightSubtreeLength,rootIndex - 1,size - (rightSubtreeLength + 1));
		return root;
	}
}