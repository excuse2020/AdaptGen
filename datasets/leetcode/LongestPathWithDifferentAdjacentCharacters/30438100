class Solution {
	List<Integer>[] graph;
	int max = 0;
	int dfs(int node, String str) {
		int current_max = 0;
		ArrayList<Integer> list = new ArrayList<>();
		for (int child: graph[node]) {	
			int temp = dfs(child,str);
			if (str.charAt(node) != str.charAt(child) && temp > current_max) {
				list.add(temp);
			}
		}
		Collections.sort(list,Collections.reverseOrder());
		if (list.size() == 0) {
			current_max = 1;
		} 
		else if (list.size() == 1) {
			current_max = 1 + list.get(0);
		} 
		else {
			current_max = list.get(0) + list.get(1);
		}
		if (current_max > max) {
			max = current_max;
		}
		if (list.size() == 0) {
			return 1;
		}
		return 1 + list.get(0);
	}
	int longestPath(int[] parent, String s) {
		int n = parent.length;
		graph = new List[n];
		for (int i = 0; i < n; i++) {
			graph[i] = new ArrayList<>();
		}
		for (int i = 1; i < n; i++) {
			graph[parent[i]].add(i);
		}
		dfs(0,s);
		return max;
	}
}