class Solution {
	int[] nextsmaller(int arr) {
		int n = arr.length;
		Stack<Integer> stack = new Stack<>();
		int ans = new int[n];
		for (int i = n - 1; i >= 0; i--) {
			while (!stack.isEmpty() && arr[stack.peek()] >= arr[i]) {
				stack.pop();
			}
			if (stack.isEmpty()) {
				ans[i] = n;
			} 
			else {
				ans[i] = stack.peek();
			}
			stack.push(i);
		}
		return ans;
	}
	int[] prevsmaller(int arr) {
		int n = arr.length;
		Stack<Integer> stack = new Stack<>();
		int ans = new int[n];
		for (int i = 0; i < n; i++) {
			while (!stack.isEmpty() && arr[stack.peek()] > arr[i]) {
				stack.pop();
			}
			if (stack.isEmpty()) {
				ans[i] = -1;
			} 
			else {
				ans[i] = stack.peek();
			}
			stack.push(i);
		}
		return ans;
	}
	int sumSubarrayMins(int[] arr) {
		int[] ns = nextsmaller(arr);
		int[] ps = prevsmaller(arr);
		int mod = 1000000007;
		long count = 0;
		for (int i = 0; i < arr.length; i++) {
			int first = i - ps[i];
			int second = ns[i] - i;
			long prod = (first * second) % mod;
			prod = (prod * arr[i]) % mod;
			count = (count % mod + prod) % mod;
		}
		return (int) count;
	}
}