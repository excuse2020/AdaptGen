class Solution {
	int cherryPickup(int[][] grid) {
		Integer[][][] memo = new Integer[grid.length][grid[0].length][grid[0].length];
		return dp(grid,0,grid[0].length - 1,0,memo);
	}
	int dp(int[][] grid, int bot1, int bot2, int level, Integer[][][] memo) {
		if (level >= grid.length) {
			return 0;
		}
		if (memo[level][bot1][bot2] != null) {
			return memo[level][bot1][bot2];
		}
		if (level == 0) {
			return dp(grid,bot1,bot2,level + 1,memo) + grid[level][bot1];
		}
		int res = 0;
		for (int i = -1; i <= 1; i++) {
			if (bot1 + i >= 0 && bot1 + i < grid[0].length) {
				for (int j = -1; j <= 1; j++) {
					if (bot2 + j >= 0 && bot2 + j < grid[0].length && bot1 + i != bot2 + j) {
						res = Math.max(res,dp(grid,bot1 + i,bot2 + j,level + 1,memo) + grid[level][bot1 + i]);
					}
				}
			}
		}
		memo[level][bot1][bot2] = res;
		return res;
	}
}