class Solution {
	int getLengthOfOptimalCompression(String s, int k) {
		int n = s.length();
		int m = k;
		int[][] dp = new int[110][110];
		for (int i = 1; i <= n; ++i) {
			for (int j = 0; j <= i && j <= m; ++j) {
				int need_remove = 0;
				int group_count = 0;
				dp[i][j] = Integer.MAX_VALUE;
				if (j > 0) {
					dp[i][j] = dp[i - 1][j - 1];
				}
				for (int l = i; l >= 1; --l) {
					if (s.charAt(l - 1) != s.charAt(i - 1)) {
						need_remove += 1;
					} 
					else {
						group_count += 1;
					}
					if (need_remove > j) {
						break;
					}
					if (group_count == 1) {
						dp[i][j] = Math.min(dp[i][j],dp[l - 1][j - need_remove] + 1);
					} 
					else if (group_count < 10) {
						dp[i][j] = Math.min(dp[i][j],dp[l - 1][j - need_remove] + 2);
					} 
					else if (group_count < 100) {
						dp[i][j] = Math.min(dp[i][j],dp[l - 1][j - need_remove] + 3);
					} 
					else {
						dp[i][j] = Math.min(dp[i][j],dp[l - 1][j - need_remove] + 4);
					}
				}
			}
		}
		return dp[n][m];
	}
}