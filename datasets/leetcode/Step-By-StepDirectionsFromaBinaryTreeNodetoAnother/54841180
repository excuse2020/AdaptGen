class Solution {
	Deque<Character> pathStck = new ArrayDeque<>();
	StringBuilder shortestPath = new StringBuilder();
	TreeNode startNode = null, destNode = null;
	Set<TreeNode> visited = new HashSet<>();
	void buildParentGraph(TreeNode root, Map<TreeNode, TreeNode> parentGraph, int startValue, int destValue) {
		if (root == null) {
			return;
		}
		if (root.val == startValue) {
			startNode = root;
		}
		if (root.val == destValue) {
			destNode = root;
		}
		if (root.left != null) {
			parentGraph.put(root.left,root);
			buildParentGraph(root.left,parentGraph,startValue,destValue);
		}
		if (root.right != null) {
			parentGraph.put(root.right,root);
			buildParentGraph(root.right,parentGraph,startValue,destValue);
		}
	}
	void findPath(TreeNode currNode, Map<TreeNode, TreeNode> parentGraph) {
		if (currNode == null || visited.contains(currNode)) {
			return;
		}
		if (currNode == destNode) {
			while (!pathStck.isEmpty()) {
				shortestPath.append(pathStck.pollFirst());
			}
			return;
		}
		visited.add(currNode);
	}
	String getDirections(TreeNode root, int startValue, int destValue) {
		Map<TreeNode, TreeNode> parentGraph = new HashMap<>();
		buildParentGraph(root,parentGraph,startValue,destValue);
		findPath(startNode,parentGraph);
		return shortestPath.toString();
	}
}