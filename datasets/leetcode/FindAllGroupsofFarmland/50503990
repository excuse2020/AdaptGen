class Solution {
	void dfs(int[][] land, boolean[][] visited, int i, int j, int[] ans) {
		if (i > land.length - 1 || i < 0 || j > land[0].length - 1 || j < 0 || land[i][j] == 0 || visited[i][j]) {
			return;
		}
		int curr = i * j;
		if (i == 0 || j == 0) {
			ans[2] = ans[2] > i ? ans[2] : i;
			ans[3] = ans[3] > j ? ans[3] : j;
		} 
		else if (ans[2] * ans[3] < curr) {
			ans[2] = i;
			ans[3] = j;
		}
		visited[i][j] = true;
		dfs(land,visited,i + 1,j,ans);
		dfs(land,visited,i,j + 1,ans);
	}
	int[][] findFarmland(int[][] land) {
		boolean[][] visited = new boolean[land.length][land[0].length];
		ArrayList<int[]> result = new ArrayList<>();
		for (int i = 0; i < land.length; i++) {
			for (int j = 0; j < land[0].length; j++) {
				if (!visited[i][j] && land[i][j] == 1) {
					int[] ans = new int[4];
					ans[0] = i;
					ans[1] = j;
					dfs(land,visited,i,j,ans);
					result.add(ans);
				}
			}
		}
		int[][] array = result.toArray(new int[0]);
		return array;
	}
}