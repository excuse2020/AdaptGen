class Solution {
	ArrayList<Integer> list = new ArrayList<>();
	int max = 0;
	void Helper(int[][] matrix, int i, int j, boolean[][] used) {
		used[i][j] = true;
		list.add(matrix[i][j]);
		if (i - 1 >= 0 && matrix[i - 1][j] > matrix[i][j] && !used[i - 1][j]) {
			Helper(matrix,i - 1,j,used);
		}
		if (i + 1 < matrix.length && matrix[i + 1][j] > matrix[i][j] && !used[i + 1][j]) {
			Helper(matrix,i + 1,j,used);
		}
		if (j - 1 >= 0 && matrix[i][j - 1] > matrix[i][j] && !used[i][j - 1]) {
			Helper(matrix,i,j - 1,used);
		}
		if (j + 1 < matrix[i].length && matrix[i][j + 1] > matrix[i][j] && !used[i][j + 1]) {
			Helper(matrix,i,j + 1,used);
		}
		int size = list.size();
		if (size > max) {
			max = size;
		}
		list.remove(size - 1);
		used[i][j] = false;
	}
	int solve(int[][] matrix) {
		int row = matrix.length;
		int col = matrix[0].length;
		boolean[][] used = new boolean[row][col];
		for (int i = 0; i < row; i++) {
			for (int j = 0; j < col; j++) {
				Helper(matrix,i,j,used);
			}
		}
		return max;
	}
}