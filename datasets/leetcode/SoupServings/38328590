class Solution {
	double soupServings(int n) {
		if (n >= 4800) {
			return 1.0;
		}
		n = (n + 24) / 25;
		double dp = new double[n + 1][n + 1];
		dp[0][0] = 0.5;
		for (int i = 1; i <= n; i++) {
			dp[i][0] = 0.0;
		}
		for (int i = 1; i <= n; i++) {
			dp[0][i] = 1.0;
		}
		for (int i = 1; i <= n; i++) {
			for (int j = 1; j <= n; j++) {
				double x = 0.0;
				x += (i > 3) ? dp[i - 4][j] : dp[0][j];
				x += (i > 2) ? dp[i - 3][j - 1] : dp[0][j - 1];
				x += (j > 2) ? dp[i - 1][j - 3] : dp[i - 1][0];
				x += dp[Math.max(0,i - 2)][Math.max(0,j - 2)];
				dp[i][j] = 0.25 * x;
			}
		}
		return dp[n][n];
	}
}