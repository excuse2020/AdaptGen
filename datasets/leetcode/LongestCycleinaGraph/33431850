class Solution {
	int longestCycle(int[] edges) {
		int max = -1;
		boolean visited = new boolean[edges.length];
		for (int j = 0; j < edges.length; j++) {
			if (!visited[j]) {
				int dist = 0;
				int x = edges[j];
				Map<Integer, Integer> distMap = new HashMap<>();
				distMap.put(j,dist);
				visited[j] = true;
				dist++;
				while (x != -1) {
					if (!visited[x]) {
						visited[x] = true;
						dist++;
						distMap.put(x,dist - 1);
					} 
					else {
						if (distMap.get(x) != null) {
							max = Math.max(max,dist - distMap.get(x));
						}
						break;
					}
					x = edges[x];
				}
			}
		}
		return max;
	}
}