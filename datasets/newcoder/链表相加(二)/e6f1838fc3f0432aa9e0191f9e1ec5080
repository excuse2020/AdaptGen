class Solution {
	ListNode addInList(ListNode head1, ListNode head2) {
		ListNode ans = new ListNode(-1);
		ListNode p = ans;
		int pre = 0;
		head1 = reverse(head1);
		head2 = reverse(head2);
		while (head1 != null && head2 != null) {
			int sum = head1.val + head2.val;
			pre = sum / 10;
			p.next = new ListNode(sum % 10);
			p = p.next;
			head1 = head1.next;
			head2 = head2.next;
		}
		while (head1 != null) {
			int sum = head1.val + pre;
			pre = sum / 10;
			p.next = new ListNode(sum % 10);
			p = p.next;
			head1 = head1.next;
		}
		while (head2 != null) {
			int sum = head2.val + pre;
			pre = sum / 10;
			p.next = new ListNode(sum % 10);
			p = p.next;
			head2 = head2.next;
		}
		if (pre == 1) {
			p.next = new ListNode(1);
		}
		return reverse(ans.next);
	}
	ListNode reverse(ListNode head) {
		ListNode pre = null;
		while (head != null) {
			ListNode next = head.next;
			head.next = pre;
			pre = head;
			head = next;
		}
		return pre;
	}
}