class Solution {
	List<List<Integer>> composition;
	int n, budget;
	List<Integer> stock, cost;
	boolean f(long m) {
		long totm = Integer.MAX_VALUE;
		for (List<Integer> c: composition) {	
			long cost = 0;
			for (int i = 0; i < n; i++) {
				cost += Math.max(0,(m * c.get(i) - stock.get(i)) * this.cost.get(i));
			}
			totm = Math.min(totm,cost);
		}
		return totm <= budget;
	}
	int maxNumberOfAlloys(int n, int k, int budget, List<List<Integer>> composition, List<Integer> stock, List<Integer> cost) {
		this.n = n;
		this.budget = budget;
		this.composition = composition;
		this.stock = stock;
		this.cost = cost;
		long low = 0, high = 2000000000, mid, res = -1;
		while (low <= high) {
			mid = (low + high) / 2;
			if (f(mid)) {
				low = (res = mid) + 1;
			} 
			else {
				high = mid - 1;
			}
		}
		return (int) res;
	}
}