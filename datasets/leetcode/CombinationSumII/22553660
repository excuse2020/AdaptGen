class Solution {
	List<List<Integer>> list = new ArrayList<List<Integer>>();
	List<List<Integer>> combinationSum2(int[] candidates, int target) {
		int map = new int[51], n = candidates.length, count = 0, ar = new int[51], i, j;
		for (i = 0; i < n; i++) {
			if (map[candidates[i]] == 0) {
				ar[count++] = candidates[i];
			}
			map[candidates[i]]++;
		}
		go(new ArrayList<Integer>(),count,map,ar,target,0);
		return list;
	}
	void go(List ll, int count, int[] map, int[] ar, int target, int pos) {
		for (int i = pos; i < count; i++) {
			if (map[ar[i]] > 0 && (target - ar[i]) >= 0) {
				map[ar[i]]--;
				List<Integer> newlist = new ArrayList<Integer>(ll);
				newlist.add(ar[i]);
				if ((target - ar[i]) == 0) {
					list.add(newlist);
				} 
				else {
					go(newlist,count,map,ar,target - ar[i],i);
				}
				map[ar[i]]++;
			}
		}
	}
}