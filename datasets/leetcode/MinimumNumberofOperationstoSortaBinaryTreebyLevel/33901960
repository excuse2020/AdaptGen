class Solution {
	int check_position(int[][] arr) {
		int result = 0;
		Arrays.sort(arr,new Comparator<int[]>());
		for (int i = 0; i < arr.length; i++) {
			while (i != arr[i][1]) {
				swap(arr,i,arr[i][1]);
				result++;
			}
		}
		return result;
	}
	int minimumOperations(TreeNode root) {
		Queue<TreeNode> q = new LinkedList<TreeNode>();
		q.add(root);
		int result = 0;
		while (q.size() > 0) {
			int n = q.size();
			int[][] arr = new int[n][2];
			for (int i = 0; i < n; i++) {
				TreeNode temp = q.remove();
				arr[i][0] = temp.val;
				arr[i][1] = i;
				if (temp.left != null) {
					q.add(temp.left);
				}
				if (temp.right != null) {
					q.add(temp.right);
				}
			}
			result += check_position(arr);
		}
		return result;
	}
	void swap(int[][] arr, int i, int j) {
		int temp1 = arr[i][0];
		int temp2 = arr[i][1];
		arr[i][0] = arr[j][0];
		arr[i][1] = arr[j][1];
		arr[j][0] = temp1;
		arr[j][1] = temp2;
	}
}