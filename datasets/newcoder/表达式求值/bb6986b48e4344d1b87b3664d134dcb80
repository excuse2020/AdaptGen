class Solution {
	int getLongestPalindrome(String A, int n) {
		StringBuffer str = new StringBuffer();
		StringBuffer str2 = new StringBuffer();
		int m = 1;
		for (int k = 1; k < n; k++) {
			for (int i = k; i < n; i++) {
				for (int j = k - 1; j <= i; j++) {
					str2 = str.append(A.charAt(j));
				}
				if (str.toString().equals(str2.reverse().toString()) && m < i - k + 2) {
					m = i - k + 2;
				}
				str.delete(0,str.length());
				str2.delete(0,str.length());
			}
		}
		return m;
	}
	void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		String A = sc.nextLine();
		int n = sc.nextInt();
		System.out.println(new Solution().getLongestPalindrome(A,n));
	}
}