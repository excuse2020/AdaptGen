class Solution {
	void dfs(int source, int destination, List<List<Integer>> adjls, boolean[] vis) {
		vis[source] = true;
		if (source == destination) {
			return;
		}
		for (Integer it: adjls.get(source)) {	
			if (!vis[it]) {
				dfs(it,destination,adjls,vis);
			}
		}
	}
	boolean validPath(int n, int[][] edges, int source, int destination) {
		boolean vis = new boolean[n + 1];
		vis[source] = true;
		List<List<Integer>> adjls = new ArrayList<>();
		for (int i = 0; i <= n; i++) {
			adjls.add(new ArrayList<>());
		}
		for (int[] arr: edges) {	
			adjls.get(arr[0]).add(arr[1]);
			adjls.get(arr[1]).add(arr[0]);
		}
		dfs(source,destination,adjls,vis);
		return vis[source] && vis[destination];
	}
}