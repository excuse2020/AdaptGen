class Solution {
	int sol = 0;
	void dfs(List<List<Integer>> graph, int n, boolean[] visited) {
		if (visited[n]) {
			return;
		}
		sol++;
		visited[n] = true;
		for (int i = 0; i < graph.get(n).size(); ++i) {
			if (!visited[(int)graph.get(n).get(i)]) {
				dfs(graph,(int) graph.get(n).get(i),visited);
			}
		}
	}
	int reachableNodes(int n, int[][] edges, int[] restricted) {
		boolean[] visited = new boolean[n];
		for (int x: restricted) {	
			visited[x] = true;
		}
		List<List<Integer>> graph = new ArrayList();
		for (int i = 0; i < n; ++i) {
			graph.add(new ArrayList<>());
		}
		for (int j = 0; j < edges.length; ++j) {
			graph.get(edges[j][0]).add(edges[j][1]);
			graph.get(edges[j][1]).add(edges[j][0]);
		}
		dfs(graph,0,visited);
		return sol;
	}
}