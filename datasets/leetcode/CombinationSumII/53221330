class Solution {
	void backtrack(int[] nums, int target, int start, List<Integer> curr, List<List<Integer>> ans) {
		if (target == 0) {
			ans.add(new ArrayList<>(curr));
			return;
		}
		for (int i = start; i < nums.length; i++) {
			if (i > start && nums[i] == nums[i - 1]) {
				continue;
			}
			if (nums[i] <= target) {
				curr.add(nums[i]);
				backtrack(nums,target - nums[i],i + 1,curr,ans);
				curr.remove(curr.size() - 1);
			}
		}
	}
	List<List<Integer>> combinationSum2(int[] nums, int target) {
		List<List<Integer>> ans = new ArrayList<>();
		List<Integer> curr = new ArrayList<>();
		Arrays.sort(nums);
		backtrack(nums,target,0,curr,ans);
		return ans;
	}
}