class Solution {
	int kadanesMax(int[] nums) {
		int sum = 0;
		int max_sum = Integer.MIN_VALUE;
		for (int i = 0; i < nums.length; i++) {
			sum += nums[i];
			if (sum > max_sum) {
				max_sum = sum;
			}
			if (sum < 0) {
				sum = 0;
			}
		}
		return max_sum;
	}
	int kadanesMin(int[] nums) {
		int sum = 0;
		int min_sum = Integer.MAX_VALUE;
		for (int i = 0; i < nums.length; i++) {
			sum += nums[i];
			if (sum < min_sum) {
				min_sum = sum;
			}
			if (sum > 0) {
				sum = 0;
			}
		}
		return min_sum;
	}
	int maxSubarraySumCircular(int[] nums) {
		int n = nums.length;
		int total_sum = 0;
		for (int i: nums) {	
			total_sum += i;
		}
		int max_sum = kadanesMax(nums);
		int min_sum = kadanesMin(nums);
		int circular_sum = total_sum - min_sum;
		if (max_sum > 0) {
			return Math.max(max_sum,circular_sum);
		}
		return max_sum;
	}
}