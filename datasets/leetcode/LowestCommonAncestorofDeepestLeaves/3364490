class Solution {
	HashMap<Integer, ArrayList<Pair>> map;
	TreeNode lca(TreeNode root, int a, int b) {
		if (root == null) {
			return null;
		}
		if (root.val == a || root.val == b) {
			return root;
		}
		TreeNode lr = lca(root.left,a,b);
		TreeNode rr = lca(root.right,a,b);
		if (lr == null && rr == null) {
			return null;
		} 
		else if (lr != null && rr == null) {
			return lr;
		} 
		else if (lr == null && rr != null) {
			return rr;
		} 
		else {
			return root;
		}
	}
	TreeNode lcaDeepestLeaves(TreeNode root) {
		map = new HashMap<>();
		traverse(root,0,0);
		int max = Integer.MIN_VALUE;
		for (int key: map.keySet()) {	
			max = Math.max(max,key);
		}
		ArrayList<Pair> temp = map.get(max);
		Pair a = temp.get(0);
		Pair b = temp.get(temp.size() - 1);
		return lca(root,a.node.val,b.node.val);
	}
	void traverse(TreeNode root, int hd, int vd) {
		if (root == null) {
			return;
		}
		if (root.left == null && root.right == null) {
			Pair np = new Pair();
			np.node = root;
			np.hd = hd;
			np.vd = vd;
			if (map.get(hd) == null) {
				map.put(hd,new ArrayList<>());
			}
			map.get(hd).add(np);
		}
		traverse(root.left,hd + 1,vd - 1);
		traverse(root.right,hd + 1,vd + 1);
	}
}
class Pair {
	int hd;
	TreeNode node;
	int vd;
}