class Solution {
	int dfs(int m, int n, int k, int i, int j, int[][][] dp, int[][] prefix, int MOD) {
		if (prefix[i][j] == 0) {
			return 0;
		}
		if (k == 0) {
			return 1;
		}
		if (dp[i][j][k] != 0) {
			return dp[i][j][k];
		}
		int ans = 0;
		for (int ni = i + 1; ni < m; ni++) {
			if (prefix[i][j] - prefix[ni][j] > 0) {
				ans = (ans + dfs(m,n,k - 1,ni,j,dp,prefix,MOD)) % MOD;
			}
		}
		for (int nj = j + 1; nj < n; nj++) {
			if (prefix[i][j] - prefix[i][nj] > 0) {
				ans = (ans + dfs(m,n,k - 1,i,nj,dp,prefix,MOD)) % MOD;
			}
		}
		return dp[i][j][k] = ans;
	}
	int ways(String[] pizza, int k) {
		int m = pizza.length;
		int n = pizza[0].length();
		int MOD = 1000000007;
		int[][] prefix = new int[m + 1][n + 1];
		int[][][] dp = new int[m + 1][n + 1][k + 1];
		int i = m - 1;
		int j = n - 1;
	}
}