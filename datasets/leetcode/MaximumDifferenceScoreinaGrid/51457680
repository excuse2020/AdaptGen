class Solution {
	int maxScore(List<List<Integer>> grid) {
		int rows = grid.size();
		int cols = grid.get(0).size();
		int[][] newGrid = new int[rows][cols];
		for (int i = 0; i < rows; i++) {
			List<Integer> row = grid.get(i);
			for (int j = 0; j < cols; j++) {
				newGrid[i][j] = row.get(j);
			}
		}
		int[][] dp = new int[rows][cols];
		for (int[] row: dp) {	
			Arrays.fill(row,Integer.MIN_VALUE);
		}
		dp[rows - 1][cols - 1] = newGrid[rows - 1][cols - 1];
		for (int i = rows - 1; i >= 0; i--) {
			for (int j = cols - 1; j >= 0; j--) {
				if (i < rows - 1) {
					dp[i][j] = Math.max(dp[i][j],dp[i + 1][j]);
				}
				if (j < cols - 1) {
					dp[i][j] = Math.max(dp[i][j],dp[i][j + 1]);
				}
				dp[i][j] = Math.max(dp[i][j],newGrid[i][j]);
			}
		}
		int maxScore = Integer.MIN_VALUE;
		for (int i = 0; i < rows; i++) {
			for (int j = 0; j < cols; j++) {
				if (i < rows - 1) {
					maxScore = Math.max(maxScore,dp[i + 1][j] - newGrid[i][j]);
				}
				if (j < cols - 1) {
					maxScore = Math.max(maxScore,dp[i][j + 1] - newGrid[i][j]);
				}
			}
		}
		return maxScore;
	}
}