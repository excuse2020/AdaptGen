class Solution {
	int getLastMoment(int n, int[] left, int[] right) {
		int maxLeft = 0;
		int minRight = 0;
		int indexLeft = 0;
		int indexRight = 0;
		if (left.length != 0) {
			maxLeft = left[0];
			indexLeft = left.length;
		}
		if (right.length != 0) {
			minRight = right[0];
			indexRight = right.length;
		}
		while (indexLeft > 0) {
			if (maxLeft < left[indexLeft - 1]) {
				maxLeft = left[indexLeft - 1];
			}
			indexLeft--;
		}
		while (indexRight > 0) {
			if (minRight > right[indexRight - 1]) {
				minRight = right[indexRight - 1];
			}
			indexRight--;
		}
		minRight = n - minRight;
		if (left.length != 0 && right.length != 0) {
			return maxLeft > minRight ? maxLeft : minRight;
		} 
		else if (left.length != 0 && right.length == 0) {
			return maxLeft;
		} 
		else {
			return minRight;
		}
	}
}