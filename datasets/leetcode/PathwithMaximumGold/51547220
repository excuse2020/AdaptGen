class Solution {
	int[][] G;
	int n = 0, m = 0;
	boolean[][] vis;
	int dfs(int i, int j, int sum) {
		if (i < 0 || j < 0 || i > n || j > m) {
			return sum;
		}
		if (G[i][j] == 0 || vis[i][j]) {
			return sum;
		}
		vis[i][j] = true;
		sum += G[i][j];
		int max = Math.max(sum,dfs(i + 1,j,sum));
		max = Math.max(max,dfs(i,j + 1,sum));
		max = Math.max(max,dfs(i - 1,j,sum));
		max = Math.max(max,dfs(i,j - 1,sum));
		vis[i][j] = false;
		return max;
	}
	int getMaximumGold(int[][] grid) {
		n = grid.length - 1;
		m = grid[0].length - 1;
		G = grid;
		vis = new boolean[n + 1][m + 1];
		int result = 0;
		for (int i = 0; i <= n; i++) {
			for (int j = 0; j <= m; j++) {
				result = Math.max(result,dfs(i,j,0));
			}
		}
		return result;
	}
}