class Solution {
	char board;
	List<String> found;
	boolean[][] visited;
	Trie wordSearch;
	String[] words;
	List<String> findWords(char[][] board, String[] words) {
		this.wordSearch = new Trie();
		this.found = new ArrayList<>();
		this.board = board;
		this.words = words;
		this.visited = new boolean[board.length][board[0].length];
		for (int i = 0; i < words.length; i++) {
			wordSearch.insert(words[i],i);
		}
		for (int i = 0; i < board.length; i++) {
			for (int j = 0; j < board[0].length; j++) {
				findWords(i,j,wordSearch.root);
			}
		}
		return found;
	}
	void findWords(int i, int j, TrieNode curr) {
		if (outOfBounds(i,j)) {
			return;
		}
		if (visited[i][j]) {
			return;
		}
		int letter;
	}
	boolean outOfBounds(int i, int j) {
		if (i < 0 || j < 0) {
			return true;
		}
		if (i >= board.length || j >= board[0].length) {
			return true;
		}
		return false;
	}
	class Trie {
		TrieNode root = new TrieNode();
		void delete(String word) {
			TrieNode curr = root;
			int i = 0;
			TrieNode prev = curr;
			int l;
		}
		void insert(String word, int index) {
			TrieNode curr = root;
			int i = 0;
			int c;
		}
		boolean search(String word) {
			TrieNode curr = root;
			int i = 0;
			int c;
		}
	}
	class TrieNode {
		TrieNode[] children = new TrieNode[26];
		int count;
		boolean endOfWord = false;
		int index;
	}
}