class Solution {
	TreeNode createBinaryTree(int[][] descriptions) {
		HashMap<Integer, TreeNode> map = new HashMap<>();
		HashSet<Integer> set = new HashSet<>();
		for (int[] arr: descriptions) {	
			int parent = arr[0];
			int child = arr[1];
			int isleft = arr[2];
			set.add(child);
			if (!map.containsKey(parent)) {
				map.put(parent,new TreeNode(parent));
			}
			if (!map.containsKey(child)) {
				map.put(child,new TreeNode(child));
			}
			if (isleft == 1) {
				map.get(parent).left = map.get(child);
			} 
			else {
				map.get(parent).right = map.get(child);
			}
		}
		for (Map.Entry<Integer, TreeNode> entry: map.entrySet()) {	
			if (!set.contains(entry.getKey())) {
				return entry.getValue();
			}
		}
		return null;
	}
}