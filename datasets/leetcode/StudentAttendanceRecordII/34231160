class Solution {
	int m = (int) (1e9 + 7);
	int checkRecord(int n) {
		int dp = new int[n + 1][2][3];
		for (int i = 0; i <= n; i++) {
			for (int j = 0; j < 2; j++) {
				for (int k = 0; k < 3; k++) {
					dp[i][j][k] = -1;
				}
			}
		}
		return f(n,0,0,dp);
	}
	int f(int n, int ab, int consLate, int[][][] dp) {
		if (n == 0) {
			return 1;
		}
		if (dp[n][ab][consLate] != -1) {
			return dp[n][ab][consLate];
		}
		long caseAb = (ab < 1) ? f(n - 1,ab + 1,0,dp) : 0;
		long caseLate = (consLate < 2) ? f(n - 1,ab,consLate + 1,dp) : 0;
		long casePresent = f(n - 1,ab,0,dp);
		long totalCases = ((caseAb + caseLate) % m + casePresent) % m;
		dp[n][ab][consLate] = (int) totalCases;
		return dp[n][ab][consLate];
	}
}