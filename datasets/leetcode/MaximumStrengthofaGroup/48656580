class Solution {
	long maxStrength(int[] nums) {
		int i, c = 0, d = 0, e = 0;
		long prod = 1;
		List<Integer> list = new ArrayList<Integer>();
		List<Integer> list0 = new ArrayList<Integer>();
		int n = nums.length;
		if (n == 1) {
			return nums[0];
		}
		for (i = 0; i < nums.length; i++) {
			if (nums[i] >= 1) {
				prod = prod * nums[i];
				c++;
			}
			if (nums[i] < 0) {
				list.add(nums[i]);
				d++;
			}
			if (nums[i] == 0) {
				list0.add(nums[i]);
				e++;
			}
		}
		if (n == c) {
			return prod;
		}
		if (n == e) {
			return 0;
		}
		Collections.sort(list);
		if (list.size() % 2 == 0) {
			for (i = 0; i < list.size(); i++) {
				prod = prod * list.get(i);
			}
		} 
		else if (list.size() % 2 != 0 && d >= 3) {
			for (i = 0; i < list.size() - 1; i++) {
				prod = prod * list.get(i);
			}
		}
		if (c == 0) {
			if (d <= 1) {
				return 0;
			}
		}
		return prod;
	}
}