class Solution {
	int n;
	int dfs(int[][] bombs, int bombIndex, boolean[] seen, int detonate) {
		int[] curBomb = bombs[bombIndex];
		for (int i = 0; i < n; i++) {
			if (i == bombIndex || seen[i]) {
				continue;
			}
			int[] bomb = bombs[i];
			int x1 = curBomb[0];
			int y1 = curBomb[1];
			long r1 = curBomb[2];
			int x2 = bomb[0];
			int y2 = bomb[1];
			int r2 = bomb[2];
			long dx = (x1 - x2);
			long dy = (y1 - y2);
			if (r1 * r1 >= dx * dx + dy * dy) {
				seen[i] = true;
				detonate += dfs(bombs,i,seen,1);
			}
		}
		return detonate;
	}
	int maximumDetonation(int[][] bombs) {
		int res = 0;
		n = bombs.length;
		for (int i = 0; i < n; i++) {
			int[] bomb = bombs[i];
			boolean[] seen = new boolean[n];
			seen[i] = true;
			res = Math.max(res,dfs(bombs,i,seen,1));
		}
		return res;
	}
}