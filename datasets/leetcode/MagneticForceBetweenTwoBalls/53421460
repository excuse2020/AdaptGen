class Solution {
	boolean canPlace(int[] position, int dist, int m) {
		int placedBalls = 1;
		int lastPosition = position[0];
		for (int i = 1; i < position.length; i++) {
			if ((position[i] - lastPosition) >= dist) {
				placedBalls++;
				lastPosition = position[i];
				if (placedBalls >= m) {
					return true;
				}
			}
		}
		return false;
	}
	int ceilBinSearch(int[] position, int low, int high, int m) {
		int maxDist = 0;
		while (low <= high) {
			int mid = (low + high) / 2;
			if (canPlace(position,mid,m)) {
				low = mid + 1;
				maxDist = mid;
			} 
			else {
				high = mid - 1;
			}
		}
		return maxDist;
	}
	int maxDistance(int[] position, int m) {
		Arrays.sort(position);
		int n = position.length;
		int minDist = 1, maxDist = position[n - 1] - position[0];
		return ceilBinSearch(position,minDist,maxDist,m);
	}
}