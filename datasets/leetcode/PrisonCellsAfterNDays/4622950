class Solution {
	int[] doLastNDays(int[] cells, int N) {
		for (int i = 0; i < N; i++) {
			cells = nextDay(cells);
		}
		return cells;
	}
	int[] nextDay(int[] cells) {
		int[] newCells = new int[8];
		for (int i = 1; i < cells.length - 1; i++) {
			if (cells[i - 1] == cells[i + 1]) {
				newCells[i] = 1;
			} 
			else {
				newCells[i] = 0;
			}
		}
		return newCells;
	}
	int[] prisonAfterNDays(int[] cells, int N) {
		Map<String, Integer> map = new HashMap<>();
		String cellsStr = Arrays.toString(cells);
		for (int i = 0; i < N; i++) {
			map.put(cellsStr,i);
			cells = nextDay(cells);
			cellsStr = Arrays.toString(cells);
			if (map.containsKey(cellsStr)) {
				int daysAgo = i + 1 - map.get(cellsStr);
				int daysLeft = N - (i + 1);
				return doLastNDays(cells,daysLeft % daysAgo);
			}
		}
		return cells;
	}
}