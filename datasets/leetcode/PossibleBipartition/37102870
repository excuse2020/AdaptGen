class Solution {
	boolean isOk = true;
	List<Integer>[] buildGraph(int n, int[][] dislikes) {
		List<Integer>[] graph = new ArrayList[n + 1];
		for (int i = 0; i <= n; i++) {
			graph[i] = new ArrayList<>();
		}
		for (int[] dislike: dislikes) {	
			int from = dislike[0], to = dislike[1];
			graph[from].add(to);
			graph[to].add(from);
		}
		return graph;
	}
	void dfs(List<Integer>[] graph, int start, boolean[] color, boolean[] visited) {
		if (!isOk) {
			return;
		}
		visited[start] = true;
		for (int next: graph[start]) {	
			if (!visited[next]) {
				color[next] = !color[start];
				dfs(graph,next,color,visited);
			} 
			else if (color[next] == color[start]) {
				isOk = false;
				return;
			}
		}
	}
	boolean possibleBipartition(int n, int[][] dislikes) {
		boolean[] visited = new boolean[n + 1];
		boolean[] color = new boolean[n + 1];
		List<Integer>[] graph = buildGraph(n,dislikes);
		for (int i = 1; i <= n; i++) {
			if (!visited[i]) {
				dfs(graph,i,color,visited);
			}
		}
		return isOk;
	}
}