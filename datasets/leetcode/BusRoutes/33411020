class Solution {
	int numBusesToDestination(int[][] routes, int source, int target) {
		List<List<Integer>> adj = new ArrayList<>();
		int mx = -1;
		for (int i = 0; i < routes.length; i++) {
			for (int j = 0; j < routes[i].length; j++) {
				mx = Math.max(mx,routes[i][j]);
			}
		}
		for (int i = 0; i < mx + 1; i++) {
			adj.add(new ArrayList<>());
		}
		for (int i = 0; i < routes.length; i++) {
			for (int j = 0; j < routes[i].length; j++) {
				adj.get(routes[i][j]).add(i);
			}
		}
		Set<Integer> bus = new HashSet<>();
		Set<Integer> route = new HashSet<>();
		Queue<Integer> q = new LinkedList<>();
		int level = 0;
		q.add(source);
		route.add(source);
		while (q.isEmpty() == false) {
			int size = q.size();
			while (size-- > 0) {
				int k = q.poll();
				System.out.println(k + " ");
				if (k == target) {
					return level;
				}
				for (int it: adj.get(k)) {	
					if (bus.contains(it)) {
						continue;
					}
					for (int itr: routes[it]) {	
						if (route.contains(itr)) {
							continue;
						}
						q.add(itr);
						route.add(itr);
					}
					bus.add(it);
				}
			}
			level++;
		}
		return -1;
	}
}