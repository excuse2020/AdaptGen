class Solution {
	int dfs(int[][] grid, int row, int col, int prev, int[][] dp) {
		if (row < 0 || col < 0 || row >= grid.length || col >= grid[0].length || prev >= grid[row][col]) {
			return 0;
		}
		if (dp[row][col] != -1) {
			return dp[row][col];
		}
		int res = 0;
		res = Math.max(res,1 + dfs(grid,row - 1,col + 1,grid[row][col],dp));
		res = Math.max(res,1 + dfs(grid,row,col + 1,grid[row][col],dp));
		res = Math.max(res,1 + dfs(grid,row + 1,col + 1,grid[row][col],dp));
		dp[row][col] = res;
		return dp[row][col];
	}
	int maxMoves(int[][] grid) {
		int m = grid.length;
		int n = grid[0].length;
		int[][] dp = new int[m][n];
		for (int i = 0; i < m; i++) {
			Arrays.fill(dp[i],-1);
		}
		int ans = 0;
		for (int i = 0; i < m; i++) {
			ans = Math.max(ans,dfs(grid,i,0,0,dp));
		}
		return ans - 1;
	}
}