class Solution {
	int maxValue(int[][] grid) {
		int m = grid.length;
		int n = grid[0].length;
		int[][] dp = new int[m][n];
		return recursion(grid,m - 1,n - 1,dp);
	}
	int recursion(int[][] grid, int m, int n, int[][] dp) {
		if (m == 0 && n == 0) {
			dp[0][0] = grid[0][0];
			return grid[0][0];
		}
		if (m == 0) {
			dp[0][n] = grid[0][n] + recursion(grid,m,n - 1,dp);
		}
		if (n == 0) {
			dp[m][0] = grid[m][0] + recursion(grid,m - 1,n,dp);
		}
		if (dp[m][n] == 0) {
			dp[m][n] = grid[m][n] + Math.max(recursion(grid,m - 1,n,dp),recursion(grid,m,n - 1,dp));
		}
		return dp[m][n];
	}
}