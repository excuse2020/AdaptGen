class Solution {
	int maximumDetonation(int[][] bombs) {
		List<List<Integer>> adj = new ArrayList<>();
		for (int i = 0; i < bombs.length; i++) {
			adj.add(new ArrayList<>());
		}
		for (int i = 0; i < bombs.length; i++) {
			for (int j = i + 1; j < bombs.length; j++) {
				int x1 = bombs[i][0];
				int x2 = bombs[j][0];
				int y1 = bombs[i][1];
				int y2 = bombs[j][1];
				int r1 = bombs[i][2];
				int r2 = bombs[j][2];
				double dis = Math.pow((Math.pow(x2 - x1,2) + Math.pow(y2 - y1,2)),0.5);
				if (dis <= r1) {
					adj.get(i).add(j);
				}
				if (dis <= r2) {
					adj.get(j).add(i);
				}
			}
		}
		System.out.println(adj);
		boolean[] visited = new boolean[bombs.length];
		int count = 1;
		for (int i = 0; i < bombs.length; i++) {
			Queue<Integer> q = new LinkedList<>();
			q.add(i);
			visited[i] = true;
			while (!q.isEmpty()) {
				int node = q.remove();
				for (int itr: adj.get(node)) {	
					if (visited[itr] == false) {
						q.add(itr);
						visited[itr] = true;
					}
				}
			}
			int temp = 0;
			for (int j = 0; j < bombs.length; j++) {
				if (visited[j]) {
					temp++;
				}
			}
			count = Math.max(temp,count);
			Arrays.fill(visited,false);
		}
		return count;
	}
}