class Solution {
	int ans = 0;
	int DFS(int head, Map<Integer, ArrayList<Integer>> check, int[] informTime) {
		int sum = informTime[head];
		int maxChildSum = 0;
		if (check.containsKey(head)) {
			for (int child: check.get(head)) {	
				int childSum = DFS(child,check,informTime);
				maxChildSum = Math.max(maxChildSum,childSum);
			}
		}
		ans = Math.max(ans,sum + maxChildSum);
		return sum + maxChildSum;
	}
	int numOfMinutes(int n, int headID, int[] manager, int[] informTime) {
		Map<Integer, ArrayList<Integer>> check = new HashMap<>();
		for (int i = 0; i < manager.length; i++) {
			if (!check.containsKey(manager[i])) {
				check.put(manager[i],new ArrayList<Integer>());
			}
			check.get(manager[i]).add(i);
		}
		DFS(headID,check,informTime);
		return ans;
	}
}