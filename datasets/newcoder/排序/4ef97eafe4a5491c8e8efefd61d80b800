class Solution {
	int[] MySort(int[] arr) {
		quickSort(arr,0,arr.length - 1);
		return arr;
	}
	int partition(int[] arr, int start, int end) {
		int pivot = arr[start];
		int left = start + 1;
		int right = end;
		while (left < right) {
			while (left < right && pivot >= arr[left]) {
				left++;
			}
			if (left != right) {
				swap(arr,left,right);
				right--;
			}
		}
		if (left == right && arr[right] >= pivot) {
			right--;
		}
		if (start != right) {
			swap(arr,start,right);
		}
		return right;
	}
	void quickSort(int[] arr, int start, int end) {
		if (start >= end) {
			return;
		}
		int mid = partition(arr,start,end);
		quickSort(arr,start,mid - 1);
		quickSort(arr,mid + 1,end);
	}
	void swap(int[] arr, int i, int j) {
		if (arr[i] == arr[j] || arr.length <= 2) {
			return;
		}
		arr[i] = arr[i] ^ arr[j];
		arr[j] = arr[i] ^ arr[j];
		arr[i] = arr[i] ^ arr[j];
	}
}