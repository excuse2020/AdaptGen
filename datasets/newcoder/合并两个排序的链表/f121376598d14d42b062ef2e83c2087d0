class Solution {
	ListNode Merge(ListNode pHead1, ListNode pHead2) {
		if (pHead1 == null && pHead2 == null) {
			return null;
		}
		List<Integer> list = new ArrayList<>();
		while (pHead1 != null && pHead2 != null) {
			int num1 = pHead1.val;
			int num2 = pHead2.val;
			if (num1 <= num2) {
				list.add(num1);
				pHead1 = pHead1.next;
			} 
			else {
				list.add(num2);
				pHead2 = pHead2.next;
			}
		}
		while (pHead1 != null) {
			list.add(pHead1.val);
			pHead1 = pHead1.next;
		}
		while (pHead2 != null) {
			list.add(pHead2.val);
			pHead2 = pHead2.next;
		}
		ListNode newNode = new ListNode(list.get(0));
		ListNode cur = newNode;
		for (int i = 1; i < list.size(); i++) {
			ListNode next = new ListNode(list.get(i));
			cur.next = next;
			cur = next;
		}
		return newNode;
	}
}