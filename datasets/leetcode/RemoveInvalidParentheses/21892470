class Solution {
	boolean isValid(String s) {
		int count = 0;
		int i = 0;
		char c = s.charAt(i);
	}
	List<String> removeInvalidParentheses(String s) {
		if (s == null || s.length() == 0) {
			return new ArrayList<>();
		}
		HashSet<String> set = new HashSet<>();
		Queue<String> q = new LinkedList<>();
		List<String> result = new ArrayList<>();
		boolean found = false;
		q.add(s);
		set.add(s);
		while (!q.isEmpty() && found == false) {
			int size = q.size();
			for (int i = 0; i < size; i++) {
				String curr = q.poll();
				if (isValid(curr)) {
					found = true;
					result.add(curr);
				} 
				else if (found == false) {
					for (int j = 0; j < curr.length(); j++) {
						if (Character.isLetter(curr.charAt(j))) {
							continue;
						}
						String sub = curr.substring(0,j) + curr.substring(j + 1);
						if (!set.contains(sub)) {
							set.add(sub);
							q.add(sub);
						}
					}
				}
			}
		}
		return result;
	}
}