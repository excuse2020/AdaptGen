class Solution {
	ArrayList<Integer> data = new ArrayList<Integer>();
	int findcount(int n, int ct) {
		int lb = findl(n);
		int ub = findu(n);
		int dif1 = n - lb;
		int dif2 = ub - n;
		int ans = 0;
		if (lb == ub) {
			return ct++;
		} 
		else if (dif1 <= dif2) {
			ct++;
			return findcount(dif1,ct);
		} 
		else {
			ct++;
			return findcount(dif2,ct);
		}
	}
	int findl(int num) {
		int low = 0;
		int high = data.size() - 1;
		int mid;
		while (low <= high) {
			mid = (low + high) / 2;
			if (data.get(mid) == num) {
				return data.get(mid);
			} 
			else if (data.get(mid) > num) {
				high = mid - 1;
			} 
			else {
				low = mid + 1;
			}
		}
		return data.get(high);
	}
	int findu(int num) {
		int low = 0;
		int high = data.size() - 1;
		int mid;
		while (low <= high) {
			mid = (low + high) / 2;
			if (data.get(mid) == num) {
				return data.get(mid);
			} 
			else if (data.get(mid) > num) {
				high = mid - 1;
			} 
			else {
				low = mid + 1;
			}
		}
		return data.get(low);
	}
	int minOperations(int n) {
		for (int num = 1; num <= 1000000; num = num * 2) {
			data.add(num);
		}
		int count = findcount(n,0);
		return count + 1;
	}
}