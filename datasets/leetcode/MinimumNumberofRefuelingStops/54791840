class Solution {
	int minRefuelStops(int t, int sF, int[][] s) {
		if (sF >= t) {
			return 0;
		}
		int n = s.length;
		if (n == 0) {
			return -1;
		}
		PriorityQueue<Integer> pq = new PriorityQueue<>(Collections.reverseOrder());
		int ans = 0;
		long fuel = sF;
		for (int i = 0; i < n; i++) {
			if (fuel - (long) s[i][0] > 0) {
				pq.add(s[i][1]);
			} 
			else if (fuel - (long) s[i][0] == 0) {
				pq.add(s[i][1]);
				fuel += pq.poll();
				ans++;
			} 
			else {
				if (i == 0 || pq.size() == 0) {
					return -1;
				} 
				else {
					while (pq.size() > 0 && fuel < s[i][0]) {
						ans++;
						fuel += pq.poll();
					}
					if (fuel < s[i][0]) {
						return -1;
					} 
					else {
						pq.add(s[i][1]);
					}
				}
			}
		}
		while (pq.size() > 0 && fuel < t) {
			ans++;
			fuel += pq.poll();
		}
		if (fuel < t) {
			return -1;
		} 
		else {
			return ans;
		}
	}
}