class Solution {
	int findParent(int n1, int[] parents) {
		while (n1 != parents[n1 - 1]) {
			parents[n1 - 1] = parents[parents[n1 - 1] - 1];
			n1 = parents[n1 - 1];
		}
		return n1;
	}
	int[] findRedundantConnection(int[][] edges) {
		int[] parents = new int[edges.length];
		for (int i = 0; i < parents.length; i++) {
			parents[i] = i + 1;
		}
		for (int[] edge: edges) {	
			int p1 = findParent(edge[0],parents);
			int p2 = findParent(edge[1],parents);
			if (p1 == p2) {
				return edge;
			} 
			else {
				union(p1,p2,parents);
			}
		}
		return null;
	}
	void union(int n1, int n2, int[] parents) {
		parents[n2 - 1] = n1;
	}
}