class Solution {
	TreeNode createBinaryTree(int[][] descriptions) {
		Set<Integer> children = new HashSet<>();
		Map<Integer, TreeNode> map = new HashMap<>();
		int n = descriptions.length;
		for (int i = 0; i < n; i++) {
			int parent = descriptions[i][0];
			int child = descriptions[i][1];
			int isLeft = descriptions[i][2];
			children.add(child);
			if (!map.containsKey(parent)) {
				map.put(parent,new TreeNode(parent));
			}
			if (!map.containsKey(child)) {
				map.put(child,new TreeNode(child));
			}
			if (isLeft == 1) {
				map.get(parent).left = map.get(child);
			} 
			else {
				map.get(parent).right = map.get(child);
			}
		}
		for (int[] nums: descriptions) {	
			if (!children.contains(nums[0])) {
				return map.get(nums[0]);
			}
		}
		return null;
	}
}