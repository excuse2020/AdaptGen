class Solution {
	int mod = (int) 1e9 + 7;
	int fun(int i, int[] nums, int[] dp) {
		if (i == nums.length) {
			return 1;
		}
		int cnt = 0;
		int ind = i;
		boolean found = false;
		for (int j = i; j < nums.length; j++) {
			if (nums[j] == 1) {
				ind = j;
				found = true;
				break;
			}
		}
		if (!found) {
			return 0;
		}
		if (dp[i] != -1) {
			return dp[i];
		}
		for (int j = ind; j < nums.length; j++) {
			if (j == ind || nums[j] == 0) {
				cnt = (cnt + fun(j + 1,nums,dp)) % mod;
			} 
			else {
				break;
			}
		}
		return dp[i] = cnt;
	}
	int numberOfGoodSubarraySplits(int[] nums) {
		int[] dp = new int[nums.length];
		Arrays.fill(dp,-1);
		return fun(0,nums,dp);
	}
}