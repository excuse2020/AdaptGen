class Solution {
	int bfs(ArrayList<Integer>[] list, int[][] bombs, int i, boolean[] vis) {
		int sum = 1;
		if (vis[i]) {
			return 0;
		}
		vis[i] = true;
		ArrayList<Integer> t = list[i];
		for (int j = 0; j < t.size(); j++) {
			int ind = t.get(j);
			if (!vis[ind]) {
				sum += bfs(list,bombs,ind,vis);
			}
		}
		return sum;
	}
	int maximumDetonation(int[][] bombs) {
		if (bombs.length == 1) {
			return 1;
		}
		ArrayList<Integer>[] list = new ArrayList[bombs.length];
		for (int i = 0; i < bombs.length; i++) {
			list[i] = new ArrayList<>();
		}
		for (int i = 0; i < bombs.length; i++) {
			for (int j = 0; j < bombs.length; j++) {
				if (i != j) {
					int x1 = bombs[i][0];
					int y1 = bombs[i][1];
					int x2 = bombs[j][0];
					int y2 = bombs[j][1];
					int r = bombs[i][2];
					double dist = Math.sqrt(Math.pow(x2 - x1,2) + Math.pow(y2 - y1,2));
					if (r >= dist) {
						list[i].add(j);
					}
				}
			}
		}
		int max = 1;
		for (int i = 0; i < bombs.length; i++) {
			boolean[] vis = new boolean[bombs.length];
			max = Math.max(max,bfs(list,bombs,i,vis));
		}
		return max;
	}
}