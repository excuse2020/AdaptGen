class Solution {
	boolean dfs(int root, boolean[] visited, int[] leftChild, int[] rightChild) {
		if (root == -1) {
			return true;
		}
		if (visited[root]) {
			return false;
		}
		visited[root] = true;
		return dfs(leftChild[root],visited,leftChild,rightChild) && dfs(rightChild[root],visited,leftChild,rightChild);
	}
	boolean validateBinaryTreeNodes(int n, int[] leftChild, int[] rightChild) {
		Map<Integer, Integer> map = new HashMap<>();
		for (int i = 0; i < n; i++) {
			if (leftChild[i] != -1) {
				if (map.containsKey(leftChild[i])) {
					return false;
				}
				map.put(leftChild[i],i);
			}
			if (rightChild[i] != -1) {
				if (map.containsKey(rightChild[i])) {
					return false;
				}
				map.put(rightChild[i],i);
			}
		}
		if (map.size() != n - 1) {
			return false;
		}
		int root = -1;
		for (int i = 0; i < n; i++) {
			if (!map.containsKey(i)) {
				root = i;
				break;
			}
		}
		boolean[] visited = new boolean[n];
		if (!dfs(root,visited,leftChild,rightChild)) {
			return false;
		}
		for (int i = 0; i < n; i++) {
			if (!visited[i]) {
				return false;
			}
		}
		return true;
	}
}