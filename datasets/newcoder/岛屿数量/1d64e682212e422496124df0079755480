class Solution {
	void dfs(char[][] grid, int i, int j) {
		if (!isRight(grid,i,j)) {
			return;
		}
		if (grid[i][j] != '1') {
			return;
		}
		grid[i][j] = '2';
		dfs(grid,i,j - 1);
		dfs(grid,i,j + 1);
		dfs(grid,i - 1,j);
		dfs(grid,i + 1,j);
	}
	boolean isRight(char[][] grid, int i, int j) {
		return i >= 0 && i < grid.length && j >= 0 && j < grid[0].length;
	}
	int solve(char[][] grid) {
		int res = 0;
		int row = grid.length;
		int col = grid[0].length;
		for (int i = 0; i < row; i++) {
			for (int j = 0; j < col; j++) {
				if (grid[i][j] == '1') {
					res += 1;
					dfs(grid,i,j);
				}
			}
		}
		return res;
	}
}