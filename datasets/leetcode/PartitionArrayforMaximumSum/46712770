class Solution {
	int find(int ind, int[] arr, int k, int[] dp) {
		int n = arr.length;
		if (ind == n) {
			return 0;
		}
		if (dp[ind] != -1) {
			return dp[ind];
		}
		int len = 0, maxi = Integer.MIN_VALUE, maxAns = Integer.MIN_VALUE;
		for (int j = ind; j < Math.min(ind + k,n); j++) {
			len++;
			maxi = Math.max(maxi,arr[j]);
			int sum = len * maxi + find(j + 1,arr,k,dp);
			maxAns = Math.max(maxAns,sum);
		}
		return dp[ind] = maxAns;
	}
	int maxSumAfterPartitioning(int[] arr, int k) {
		int[] dp = new int[arr.length];
		for (int i = 0; i < arr.length; i++) {
			dp[i] = -1;
		}
		return find(0,arr,k,dp);
	}
}