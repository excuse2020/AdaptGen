class Solution {
	int[][][] dp;
	int helper(int n, int m, int k, int largest) {
		if (n == 0) {
			if (k == 0) {
				return 1;
			} 
			else {
				return 0;
			}
		}
		if (k == -1) {
			return 0;
		}
		if (dp[n][k][largest] != -1) {
			return dp[n][k][largest];
		}
		int ans = 0;
		for (int i = 1; i <= m; i++) {
			if (i > largest) {
				ans += helper(n - 1,m,k - 1,i);
			} 
			else {
				ans += helper(n - 1,m,k,largest);
			}
			ans %= 1000000007;
		}
		return dp[n][k][largest] = ans;
	}
	int numOfArrays(int n, int m, int k) {
		dp = new int[n + 1][k + 1][m + 1];
		for (int[][] dp1: dp) {	
			for (int[] dp2: dp1) {	
				Arrays.fill(dp2,-1);
			}
		}
		return helper(n,m,k,0);
	}
}