class Solution {
	long countPairs(int n, int[][] edges) {
		long x = 0;
		int[] num = new int[n];
		for (int i = 0; i < n; i++) {
			num[i] = 0;
		}
		int t = 1;
		if (n > 1 && edges.length > 0) {
			num[edges[0][0]] = t;
			num[edges[0][1]] = t;
			for (int j = 1; j < edges.length; j++) {
				int a = num[edges[j][0]];
				int b = num[edges[j][1]];
				if ((a > 0) && (b > 0)) {
					if (a < b) {
						t--;
						for (int i = 0; i < n; i++) {
							if (num[i] > b) {
								num[i]--;
							} 
							else if (num[i] == b) {
								num[i] = a;
							}
						}
					} 
					else if (b < a) {
						t--;
						for (int i = 0; i < n; i++) {
							if (num[i] > a) {
								num[i]--;
							} 
							else if (num[i] == a) {
								num[i] = b;
							}
						}
					}
				} 
				else if (a > 0) {
					num[edges[j][1]] = a;
				} 
				else if (b > 0) {
					num[edges[j][0]] = b;
				} 
				else {
					t++;
					num[edges[j][1]] = t;
					num[edges[j][0]] = t;
				}
			}
			int[] count = new int[t + 1];
			for (int i = 0; i < n; i++) {
				count[num[i]]++;
			}
			long sum = 0;
			if (count[0] > 1) {
				x = (count[0] * (count[0] - 1) / 2);
			}
			for (int i = 0; i <= t; i++) {
				x = x + sum * count[i];
				sum = sum + count[i];
			}
		} 
		else {
			x = (Long.valueOf(n) * Long.valueOf(n - 1)) / 2;
		}
		return x;
	}
}