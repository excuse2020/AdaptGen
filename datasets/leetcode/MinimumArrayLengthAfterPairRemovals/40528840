class Solution {
	int minLengthAfterRemovals(List<Integer> nums) {
		Map<Integer, Integer> map = new HashMap<>();
		for (int num: nums) {	
			map.put(num,map.getOrDefault(num,0) + 1);
		}
		PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> {b[1] - a[1]});
		for (Map.Entry<Integer, Integer> entry: map.entrySet()) {	
			pq.offer(new int{entry.getKey(), entry.getValue()});
		}
		while (pq.size() > 1) {
			int[] maxElement = pq.poll();
			int[] minElement = pq.poll();
			maxElement[1] -= 1;
			minElement[1] -= 1;
			if (maxElement[1] != 0) {
				pq.offer(maxElement);
			}
			if (minElement[1] != 0) {
				pq.offer(minElement);
			}
		}
		int minLength = 0;
		while (!pq.isEmpty()) {
			minLength += pq.poll()[1];
		}
		return minLength;
	}
}