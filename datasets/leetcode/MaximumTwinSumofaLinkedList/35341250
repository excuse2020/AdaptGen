class Solution {
	ListNode findMiddle(ListNode head) {
		ListNode slow = head;
		ListNode fast = head;
		ListNode prev = slow;
		while (fast != null && fast.next != null) {
			prev = slow;
			slow = slow.next;
			fast = fast.next.next;
		}
		return prev;
	}
	int pairSum(ListNode head) {
		ListNode midNode = findMiddle(head);
		ListNode midhead = midNode.next;
		midNode.next = null;
		ListNode reverseHead = reverse(head);
		int max = 0;
		while (reverseHead != null) {
			max = Math.max(max,reverseHead.val + midhead.val);
			reverseHead = reverseHead.next;
			midhead = midhead.next;
		}
		return max;
	}
	ListNode reverse(ListNode head) {
		ListNode prev = null;
		ListNode curr = head;
		while (curr != null) {
			ListNode nextElement = curr.next;
			curr.next = prev;
			prev = curr;
			curr = nextElement;
		}
		return prev;
	}
}