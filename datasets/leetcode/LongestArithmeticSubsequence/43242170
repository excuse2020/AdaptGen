class Solution {
	int longest(int[] nums, int step) {
		int globalMax = 1;
		int n = nums.length;
		Map<Integer, Integer> maxSeq = new HashMap<>();
		for (int i = 0; i < n; i++) {
			if (maxSeq.containsKey(nums[i] - step)) {
				int localMax = maxSeq.get(nums[i] - step) + 1;
				maxSeq.put(nums[i],localMax);
				globalMax = Math.max(globalMax,localMax);
			} 
			else {
				maxSeq.put(nums[i],1);
			}
		}
		return globalMax;
	}
	int longestArithSeqLength(int[] nums) {
		int max = Integer.MIN_VALUE;
		int n = nums.length;
		int maxStep = maxStep(nums);
		for (int step = -maxStep; step <= maxStep; step++) {
			max = Math.max(max,longest(nums,step));
		}
		return max;
	}
	int maxStep(int[] nums) {
		int max = Integer.MIN_VALUE, min = Integer.MAX_VALUE;
		for (int num: nums) {	
			max = Math.max(num,max);
			min = Math.min(num,min);
		}
		return max - min;
	}
}