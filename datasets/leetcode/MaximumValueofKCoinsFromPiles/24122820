class Solution {
	Integer dp;
	int knp(List<List<Integer>> piles, int i, int k) {
		if (i < 0 || k == 0) {
			return 0;
		}
		if (dp[i][k] != null) {
			return dp[i][k];
		}
		int n = Math.min(k,piles.get(i).size());
		int excl = knp(piles,i - 1,k);
		int include = 0;
		for (int j = 0, sum = 0; j < n; j++) {
			sum += piles.get(i).get(j);
			include = Math.max(sum + knp(piles,i - 1,k - j),include);
		}
		int res = Math.max(include,excl);
		dp[i][k] = res;
		return dp[i][k];
	}
	int maxValueOfCoins(List<List<Integer>> piles, int k) {
		int n = piles.size();
		dp = new Integer[n + 1][k + 1];
		return knp(piles,piles.size() - 1,k);
	}
}