class Solution {
	int numSubmatrixSumTarget(int[][] matrix, int target) {
		int m = matrix.length;
		int n = matrix[0].length;
		int[] sumRow = new int[n];
		int count = 0;
		for (int i = 0; i < m; i++) {
			Arrays.fill(sumRow,0);
			for (int j = i; j < m; j++) {
				for (int k = 0; k < n; k++) {
					sumRow[k] += matrix[j][k];
				}
				count += subArraySum(sumRow,target);
			}
		}
		return count;
	}
	int subArraySum(int[] arr, int k) {
		int sum = 0;
		int count = 0;
		HashMap<Integer, Integer> map = new HashMap<>();
		map.put(0,1);
		for (int i = 0; i < arr.length; i++) {
			sum += arr[i];
			int rem = sum - k;
			if (map.containsKey(rem)) {
				count += map.get(rem);
			}
			map.put(sum,map.getOrDefault(sum,0) + 1);
		}
		return count;
	}
}