class Solution {
	int maxi = 0;
	void count(int total, int i, int j, int[][] grid, int[][] visited) {
		visited[i][j] = 1;
		maxi = Math.max(maxi,total);
		int m = i;
		int n = j;
		if (issafe(m - 1,n + 1,grid,visited,grid[i][j])) {
			count(total + 1,m - 1,n + 1,grid,visited);
		}
		if (issafe(m,n + 1,grid,visited,grid[i][j])) {
			count(total + 1,m,n + 1,grid,visited);
		}
		if (issafe(m + 1,n + 1,grid,visited,grid[i][j])) {
			count(total + 1,m + 1,n + 1,grid,visited);
		}
	}
	boolean issafe(int i, int j, int[][] grid, int[][] visited, int curr) {
		if (i >= 0 && i < grid.length && j >= 0 && j < grid[0].length && grid[i][j] > curr && visited[i][j] == 0) {
			return true;
		}
		return false;
	}
	int maxMoves(int[][] grid) {
		int[][] visited = new int[grid.length][grid[0].length];
		for (int i = 0; i < grid.length; i++) {
			if (visited[i][0] == 0) {
				count(0,i,0,grid,visited);
			}
		}
		return maxi;
	}
}