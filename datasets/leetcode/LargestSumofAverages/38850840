class Solution {
	int n;
	double f(int start, int end, int k, int[] pre, double[][][] dp) {
		if (k <= 0) {
			if (start > n - 1) {
				return 0.0;
			} 
			else {
				return Integer.MIN_VALUE;
			}
		}
		if (start > end) {
			return 0.0;
		}
		if (dp[start][end][k] != -1.0) {
			return dp[start][end][k];
		}
		double res = 0.0;
		for (int i = start; i <= end; i++) {
			double avg = getAvg(pre,start,i) + f(i + 1,end,k - 1,pre,dp);
			res = Math.max(avg,res);
		}
		return dp[start][end][k] = res;
	}
	double getAvg(int[] pre, int start, int end) {
		if (start == 0) {
			return (double) pre[end] / (end + 1);
		}
		return (double) (pre[end] - pre[start - 1]) / (end - start + 1);
	}
	double largestSumOfAverages(int[] nums, int k) {
		n = nums.length;
		int[] pre = new int[n];
		pre[0] = nums[0];
		for (int i = 1; i < n; i++) {
			pre[i] = pre[i - 1] + nums[i];
		}
		double[][][] dp = new double[n][n][k + 1];
		for (double[][] arr: dp) {	
			for (double[] row: arr) {	
				Arrays.fill(row,-1.0);
			}
		}
		return f(0,n - 1,k,pre,dp);
	}
}