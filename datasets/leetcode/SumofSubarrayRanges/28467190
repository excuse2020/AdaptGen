class Solution {
	long solve(int arr, boolean flag) {
		int n = arr.length;
		long left = new long[n];
		long right = new long[n];
		Stack<int[]> st1 = new Stack<>();
		Stack<int[]> st2 = new Stack<>();
		for (int i = 0; i < n; i++) {
			int cnt = 1;
			if (flag == false) {
				while (st1.size() > 0 && st1.peek()[0] > arr[i]) {
					cnt += st1.pop()[1];
				}
			} 
			else {
				while (st1.size() > 0 && st1.peek()[0] < arr[i]) {
					cnt += st1.pop()[1];
				}
			}
			left[i] = cnt;
			st1.add(new int{arr[i], cnt});
		}
		for (int i = n - 1; i >= 0; i--) {
			int cnt = 1;
			if (flag == false) {
				while (st2.size() > 0 && st2.peek()[0] >= arr[i]) {
					cnt += st2.pop()[1];
				}
			} 
			else {
				while (st2.size() > 0 && st2.peek()[0] <= arr[i]) {
					cnt += st2.pop()[1];
				}
			}
			right[i] = cnt;
			st2.add(new int{arr[i], cnt});
		}
		long sum = 0;
		for (int i = 0; i < n; i++) {
			sum = (sum + left[i] * arr[i]);
		}
		return sum;
	}
	long subArrayRanges(int[] nums) {
		return solve(nums,true) - solve(nums,false);
	}
}