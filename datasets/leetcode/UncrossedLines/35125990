class Solution {
	int maxLines(int i, int j, int[] nums1, int[] nums2, int[][] dp) {
		if (i == nums1.length || j == nums2.length) {
			return 0;
		}
		int ans = 0;
		if (dp[i][j] != -1) {
			return dp[i][j];
		}
		if (nums1[i] == nums2[j]) {
			ans = 1 + maxLines(i + 1,j + 1,nums1,nums2,dp);
		} 
		else {
			ans += Math.max(maxLines(i + 1,j,nums1,nums2,dp),maxLines(i,j + 1,nums1,nums2,dp));
		}
		return dp[i][j] = ans;
	}
	int maxUncrossedLines(int[] nums1, int[] nums2) {
		int[][] dp = new int[nums1.length + 1][nums2.length + 1];
		for (int i = 0; i <= nums1.length; i++) {
			Arrays.fill(dp[i],-1);
		}
		return maxLines(0,0,nums1,nums2,dp);
	}
}
class Solution {
	int maxUncrossedLines(int[] nums1, int[] nums2) {
		int n = nums1.length, m = nums2.length;
		int[][] dp = new int[n + 1][m + 1];
		for (int i = 1; i <= n; i++) {
			for (int j = 1; j <= m; j++) {
				if (nums1[i - 1] == nums2[j - 1]) {
					dp[i][j] = 1 + dp[i - 1][j - 1];
				} 
				else {
					dp[i][j] = Math.max(dp[i][j - 1],dp[i - 1][j]);
				}
			}
		}
		return dp[n][m];
	}
}