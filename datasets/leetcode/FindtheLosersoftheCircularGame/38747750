class Solution {
	int[] circularGameLosers(int n, int k) {
		boolean[] hasReceivedBall = new boolean[n];
		int round = 1;
		int curFriend = 0;
		hasReceivedBall[0] = true;
		while (true) {
			int nextFriend = (curFriend + k * round++) % n;
			if (hasReceivedBall[nextFriend]) {
				break;
			}
			hasReceivedBall[nextFriend] = true;
			curFriend = nextFriend;
		}
		LinkedList<Integer> losers_list = new LinkedList<>();
		for (int i = 0; i < hasReceivedBall.length; ++i) {
			if (!hasReceivedBall[i]) {
				losers_list.add(i + 1);
			}
		}
		int[] losers_array = new int[losers_list.size()];
		int idxIntoLosersArray = 0;
		while (!losers_list.isEmpty()) {
			losers_array[idxIntoLosersArray++] = losers_list.removeFirst();
		}
		return losers_array;
	}
}