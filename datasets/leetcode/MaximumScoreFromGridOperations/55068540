class Solution {
	long maximumScore(int[][] matrix) {
		int size = matrix.length;
		long[][] columnPrefixSum = new long[size + 1][size];
		for (int row = 0; row < size; row++) {
			for (int col = 0; col < size; col++) {
				columnPrefixSum[row + 1][col] = columnPrefixSum[row][col] + matrix[row][col];
			}
		}
		long[][][] dpTable = new long[size][size + 1][size + 1];
		for (long[][] table2D: dpTable) {	
			for (long[] table1D: table2D) {	
				Arrays.fill(table1D,-1);
			}
		}
		for (int colored = 0; colored <= size; colored++) {
			dpTable[0][colored][0] = 0;
		}
		for (int currentColumn = 0; currentColumn < size - 1; currentColumn++) {
			for (int colored = 0; colored <= size; colored++) {
				for (int taken = 0; taken <= size; taken++) {
					if (dpTable[currentColumn][colored][taken] == -1) {
						continue;
					}
					for (int newColumn = 0; newColumn <= size; newColumn++) {
						if (newColumn > colored) {
							long currentValue = dpTable[currentColumn][colored][taken];
							if (colored + taken < newColumn) {
								currentValue += columnPrefixSum[newColumn][currentColumn] - columnPrefixSum[colored + taken][currentColumn];
							}
							dpTable[currentColumn + 1][newColumn][0] = Math.max(dpTable[currentColumn + 1][newColumn][0],currentValue);
						} 
						else if (newColumn < colored) {
							long currentValue = dpTable[currentColumn][colored][taken] + columnPrefixSum[colored][currentColumn + 1] - columnPrefixSum[newColumn][currentColumn + 1];
							dpTable[currentColumn + 1][newColumn][colored - newColumn] = Math.max(dpTable[currentColumn + 1][newColumn][colored - newColumn],currentValue);
						} 
						else {
							long currentValue = dpTable[currentColumn][colored][taken];
							dpTable[currentColumn + 1][newColumn][0] = Math.max(currentValue,dpTable[currentColumn + 1][newColumn][0]);
						}
					}
				}
			}
		}
		long maxResult = 0;
		for (int i = 0; i <= size; i++) {
			for (int j = 0; j <= size; j++) {
				maxResult = Math.max(maxResult,dpTable[size - 1][i][j]);
			}
		}
		return maxResult;
	}
}