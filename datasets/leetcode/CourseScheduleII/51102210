class Solution {
	int[] findOrder(int numCourses, int[][] prerequisites) {
		ArrayList<ArrayList<Integer>> graph = new ArrayList<>();
		for (int i = 0; i < numCourses; i++) {
			graph.add(new ArrayList<Integer>());
		}
		for (int[] edge: prerequisites) {	
			graph.get(edge[0]).add(edge[1]);
		}
		Stack<Integer> stack = new Stack<>();
		boolean[] visited = new boolean[numCourses];
		boolean[] pathVisited = new boolean[numCourses];
		for (int i = 0; i < numCourses; i++) {
			if (!visited[i]) {
				if (isCycle(graph,visited,pathVisited,stack,i)) {
					return new int[0];
				}
			}
		}
		int[] topoSortOrder = new int[numCourses];
		int index = numCourses - 1;
		while (!stack.isEmpty()) {
			topoSortOrder[index--] = stack.pop();
		}
		return topoSortOrder;
	}
	boolean isCycle(ArrayList<ArrayList<Integer>> graph, boolean[] visited, boolean[] pathVisited, Stack<Integer> stack, int u) {
		visited[u] = true;
		pathVisited[u] = true;
		for (int v: graph.get(u)) {	
			if (!visited[v]) {
				if (isCycle(graph,visited,pathVisited,stack,v)) {
					return true;
				}
			} 
			else if (pathVisited[v]) {
				return true;
			}
		}
		pathVisited[u] = false;
		stack.add(u);
		return false;
	}
}