class Solution {
	Map<Integer, Boolean> map = new HashMap<>();
	List<List<Integer>> findPrimePairs(int n) {
		List<List<Integer>> result = new ArrayList<>();
		Set<Integer> visited = new HashSet<>();
		for (int x = 2; x <= n / 2; x++) {
			if (isPrime(x) && !visited.contains(x)) {
				int y = n - x;
				if (isPrime(y)) {
					List<Integer> pair = new ArrayList<>();
					pair.add(x);
					pair.add(y);
					result.add(pair);
					visited.add(y);
				}
			}
		}
		return result;
	}
	boolean isPrime(int n) {
		if (n <= 1) {
			return false;
		}
		if (n == 2 || n == 3) {
			return true;
		}
		if (n % 2 == 0 || n % 3 == 0) {
			return false;
		}
		for (int i = 5; i * i <= n; i = i + 6) {
			if (n % i == 0 || n % (i + 2) == 0) {
				return false;
			}
		}
		return true;
	}
}