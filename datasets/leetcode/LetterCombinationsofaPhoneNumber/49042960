class Solution {
	Map<Character, char[]> LETTERS_MAP;
	void backtracking(char[] digits, int pos, List<String> result, char[] word) {
		if (pos == digits.length) {
			result.add(new String(Arrays.copyOf(word,word.length)));
			return;
		}
		char digit = digits[pos];
		char[] letters = LETTERS_MAP.get(digit);
		for (char letter: letters) {	
			word[pos] = letter;
			backtracking(digits,pos + 1,result,word);
		}
	}
	List<String> letterCombinations(String digits) {
		if (digits.length() == 0) {
			return List.of();
		}
		List<String> result = new ArrayList<>();
		char[] word = new char[digits.length()];
		backtracking(digits.toCharArray(),0,result,word);
		return result;
	}
}