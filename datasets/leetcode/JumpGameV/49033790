class Solution {
	int DFS(int current, int n, int[] arr, int d, int[] visited) {
		if (visited[current] != -1) {
			return visited[current];
		}
		int visits = 0;
		for (int i = current - 1; i >= (current - d) && i >= 0; i--) {
			if (arr[i] < arr[current]) {
				visits = Math.max(DFS(i,n,arr,d,visited),visits);
			} 
			else {
				break;
			}
		}
		for (int i = current + 1; i <= (current + d) && i < n; i++) {
			if (arr[i] < arr[current]) {
				visits = Math.max(DFS(i,n,arr,d,visited),visits);
			} 
			else {
				break;
			}
		}
		visited[current] = visits + 1;
		return visited[current];
	}
	int maxJumps(int[] arr, int d) {
		int n = arr.length;
		int maxVisits = 1;
		int[] visited = new int[n];
		Arrays.fill(visited,-1);
		for (int i = 0; i < n; i++) {
			visited[i] = DFS(i,n,arr,d,visited);
			maxVisits = Math.max(maxVisits,visited[i]);
		}
		return maxVisits;
	}
}