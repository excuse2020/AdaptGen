class Solution {
	ListNode findMid(ListNode head) {
		ListNode f = head;
		ListNode s = null;
		while (f != null && f.next != null) {
			s = (s == null) ? f : s.next;
			f = f.next.next;
		}
		ListNode m = s.next;
		s.next = null;
		return m;
	}
	ListNode merge(ListNode l1, ListNode l2) {
		ListNode tempHead = new ListNode(0);
		ListNode tail = tempHead;
		while (l1 != null && l2 != null) {
			if (l1.val < l2.val) {
				tail.next = l1;
				l1 = l1.next;
			} 
			else {
				tail.next = l2;
				l2 = l2.next;
			}
			tail = tail.next;
		}
		tail.next = (l1 != null) ? l1 : l2;
		return tempHead.next;
	}
	ListNode sort(ListNode head) {
		if (head == null || head.next == null) {
			return head;
		}
		ListNode mid = findMid(head);
		ListNode left = sort(head);
		ListNode right = sort(mid);
		return merge(left,right);
	}
	ListNode sortList(ListNode head) {
		return sort(head);
	}
}