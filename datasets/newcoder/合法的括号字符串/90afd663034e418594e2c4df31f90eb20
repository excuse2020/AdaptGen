class Solution {
	boolean isValidString(String s) {
		return solution1(s);
	}
	boolean solution1(String s) {
		Stack<Integer> leftStack = new Stack<>();
		Stack<Integer> starStack = new Stack<>();
		for (int i = 0; i < s.length(); i++) {
			if (s.charAt(i) == '(') {
				leftStack.push(i);
			}
			if (s.charAt(i) == '*') {
				starStack.push(i);
			}
			if (s.charAt(i) == ')') {
				if (!leftStack.isEmpty()) {
					leftStack.pop();
				} 
				else if (!starStack.isEmpty()) {
					starStack.pop();
				} 
				else {
					return false;
				}
			}
		}
		while (!leftStack.isEmpty()) {
			if (!starStack.isEmpty() && leftStack.peek() < starStack.peek()) {
				leftStack.pop();
				starStack.pop();
			} 
			else {
				return false;
			}
		}
		return true;
	}
	boolean solution2(String s) {
		int minLeft = 0;
		int maxLeft = 0;
		for (char ch: s.toCharArray()) {	
			if (ch == '(') {
				minLeft++;
				maxLeft++;
			}
			if (ch == '*') {
				if (minLeft > 0) {
					minLeft--;
				}
				maxLeft++;
			}
			if (ch == ')') {
				if (minLeft > 0) {
					minLeft--;
				}
				if (maxLeft == 0) {
					return false;
				}
				maxLeft--;
			}
		}
		return minLeft == 0;
	}
}