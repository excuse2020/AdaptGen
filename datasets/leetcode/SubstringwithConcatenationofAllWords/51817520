class Solution {
	List<Integer> findSubstring(String s, String[] words) {
		List<Integer> result = new LinkedList<>();
		if (words.length == 0 || s.length() < words.length * words[0].length()) {
			return result;
		}
		int wordLength = words[0].length();
		int wordsCount = words.length;
		int windowLength = wordLength * wordsCount;
		int sLength = s.length();
		Map<String, Integer> wordMap = new HashMap<>();
		for (String word: words) {	
			wordMap.put(word,wordMap.getOrDefault(word,0) + 1);
		}
		for (int i = 0; i < wordLength; i++) {
			Map<String, Integer> currentMap = new HashMap<>();
			int left = i, count = 0;
			for (int right = i; right + wordLength <= sLength; right += wordLength) {
				String word = s.substring(right,right + wordLength);
				if (wordMap.containsKey(word)) {
					currentMap.put(word,currentMap.getOrDefault(word,0) + 1);
					count++;
					while (currentMap.get(word) > wordMap.get(word)) {
						String leftWord = s.substring(left,left + wordLength);
						currentMap.put(leftWord,currentMap.get(leftWord) - 1);
						count--;
						left += wordLength;
					}
					if (count == wordsCount) {
						result.add(left);
						String leftWord = s.substring(left,left + wordLength);
						currentMap.put(leftWord,currentMap.get(leftWord) - 1);
						count--;
						left += wordLength;
					}
				} 
				else {
					currentMap.clear();
					count = 0;
					left = right + wordLength;
				}
			}
		}
		return result;
	}
}