class Solution {
	boolean[][] visited;
	void dfs(char[][] grid, int i, int j, int rowNum, int colNum) {
		visited[i][j] = true;
		if (j - 1 >= 0 && grid[i][j - 1] == '1' && (!visited[i][j - 1])) {
			dfs(grid,i,j - 1,rowNum,colNum);
		}
		if (j + 1 < colNum && grid[i][j + 1] == '1' && (!visited[i][j + 1])) {
			dfs(grid,i,j + 1,rowNum,colNum);
		}
		if (i - 1 >= 0 && grid[i - 1][j] == '1' && (!visited[i - 1][j])) {
			dfs(grid,i - 1,j,rowNum,colNum);
		}
		if (i + 1 < rowNum && grid[i + 1][j] == '1' && (!visited[i + 1][j])) {
			dfs(grid,i + 1,j,rowNum,colNum);
		}
	}
	int solve(char[][] grid) {
		int rowNum = grid.length;
		int colNum = grid[0].length;
		visited = new boolean[rowNum][colNum];
		int num = 0;
		for (int i = 0; i < rowNum; i++) {
			for (int j = 0; j < colNum; j++) {
				if ((!visited[i][j]) && grid[i][j] == '1') {
					dfs(grid,i,j,rowNum,colNum);
					num++;
				}
			}
		}
		return num;
	}
}