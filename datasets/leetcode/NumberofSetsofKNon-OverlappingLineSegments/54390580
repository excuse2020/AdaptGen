class Solution {
	Integer[][][] memo;
	int n;
	int dp(int i, int k, int isStart) {
		if (memo[i][k][isStart] != null) {
			return memo[i][k][isStart];
		}
		if (k == 0) {
			return 1;
		}
		if (i == n) {
			return 0;
		}
		int ans = dp(i + 1,k,isStart);
		if (isStart == 1) {
			ans += dp(i + 1,k,0);
		} 
		else {
			ans += dp(i,k - 1,1);
		}
		return memo[i][k][isStart] = ans % 1_000_000_007;
	}
	int numberOfSets(int n, int k) {
		this.n = n;
		this.memo = new Integer[n + 1][k + 1][2];
		return dp(0,k,1);
	}
}