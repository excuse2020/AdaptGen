class Solution {
	int maxProfit(int[] prices) {
		PriorityQueue<Integer> pq = new PriorityQueue<>();
		int n = prices.length, max = 0;
		int[] extra = preCalculate(prices);
		for (int i = 0; i < n; i++) {
			if (!pq.isEmpty() && prices[i] > pq.peek()) {
				max = Math.max(max,prices[i] - pq.peek() + extra[i + 1]);
			}
			pq.add(prices[i]);
		}
		return max;
	}
	int[] preCalculate(int[] prices) {
		int n = prices.length, profit = 0;
		int[] extra = new int[n + 1];
		PriorityQueue<Integer> pq = new PriorityQueue<>(Comparator.reverseOrder());
		for (int i = n - 1; i >= 0; i--) {
			if (!pq.isEmpty() && (pq.peek() - prices[i]) > profit) {
				profit = pq.peek() - prices[i];
			}
			extra[i] = profit;
			pq.add(prices[i]);
		}
		extra[n] = 0;
		return extra;
	}
}