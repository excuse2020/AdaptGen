class Solution {
	int dfs(List<List<Integer>> l, int i, List<Integer> d, int[] time) {
		int s = 0;
		for (int j = 0; j < l.get(i).size(); j++) {
			s = Math.max(s,time[i] + dfs(l,l.get(i).get(j),d,time));
		}
		return s;
	}
	int numOfMinutes(int n, int headID, int[] manager, int[] informTime) {
		List<List<Integer>> l = new ArrayList<>();
		for (int i = 0; i < n; i++) {
			l.add(new ArrayList<>());
		}
		for (int i = 0; i < n; i++) {
			if (manager[i] != -1) {
				l.get(manager[i]).add(i);
			}
		}
		int k = n - 1, x = headID, ans = 0;
		List<Integer> d = new ArrayList<>();
		d.add(headID);
		return dfs(l,headID,d,informTime);
	}
}