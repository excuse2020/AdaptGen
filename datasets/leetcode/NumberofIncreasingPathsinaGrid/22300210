class Solution {
	int MAX = 1000;
	int mod = (int) Math.pow(10,9) + 7;
	int countPaths(int[][] grid) {
		int res = 0, m = grid.length, n = grid[0].length;
		int[][] dp = new int[MAX][MAX];
		for (int k = 0; k < m; k++) {
			Arrays.fill(dp[k],-1);
		}
		for (int i = 0; i < m; i++) {
			for (int j = 0; j < n; j++) {
				res += findPaths(i,j,grid,m,n,dp);
				res = (res % mod);
			}
		}
		return (int) (res % mod);
	}
	int findPaths(int i, int j, int[][] g, int m, int n, int[][] dp) {
		if (dp[i][j] != -1) {
			return dp[i][j];
		}
		int val = g[i][j];
		int ans = 1;
		if (i - 1 >= 0 && val < g[i - 1][j]) {
			ans += findPaths(i - 1,j,g,m,n,dp);
			ans = (int) (ans % mod);
		}
		if (i + 1 < m && val < g[i + 1][j]) {
			ans += findPaths(i + 1,j,g,m,n,dp);
			ans = (int) (ans % mod);
		}
		if (j - 1 >= 0 && val < g[i][j - 1]) {
			ans += findPaths(i,j - 1,g,m,n,dp);
			ans = (int) (ans % mod);
		}
		if (j + 1 < n && val < g[i][j + 1]) {
			ans += findPaths(i,j + 1,g,m,n,dp);
			ans = (int) (ans % mod);
		}
		return dp[i][j] = ans;
	}
}