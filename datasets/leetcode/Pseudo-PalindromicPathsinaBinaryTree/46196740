class Solution {
	int doDFS(TreeNode root, HashMap<Integer, Integer> hm) {
		if (root == null) {
			return 0;
		}
		HashMap<Integer, Integer> newHm = new HashMap<>(hm);
		newHm.put(root.val,newHm.getOrDefault(root.val,0) + 1);
		if (root.left == null && root.right == null) {
			int oddCount = 0;
			for (int count: newHm.values()) {	
				if (count % 2 != 0) {
					oddCount++;
				}
			}
			return oddCount <= 1 ? 1 : 0;
		}
		int result = 0;
		result += doDFS(root.left,newHm);
		result += doDFS(root.right,newHm);
		return result;
	}
	int pseudoPalindromicPaths(TreeNode root) {
		if (root == null) {
			return 0;
		}
		return doDFS(root,new HashMap<>());
	}
}