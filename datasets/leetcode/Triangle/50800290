class Solution {
	int minimumTotal(List<List<Integer>> triangle) {
		int[][] dp = new int[triangle.size()][triangle.get(triangle.size() - 1).size()];
		for (int[] i: dp) {	
			Arrays.fill(i,-1);
		}
		return triangleHelper(triangle,0,0,dp);
	}
	int triangleHelper(List<List<Integer>> triangle, int i, int j, int[][] dp) {
		if (i > triangle.size() - 1 || j > triangle.get(i).size() - 1) {
			return 1000000;
		}
		if (i == triangle.size() - 1) {
			return triangle.get(i).get(j);
		}
		if (dp[i][j] != -1) {
			return dp[i][j];
		}
		int down = triangle.get(i).get(j) + triangleHelper(triangle,i + 1,j,dp);
		int diagonal = triangle.get(i).get(j) + triangleHelper(triangle,i + 1,j + 1,dp);
		return dp[i][j] = Math.min(down,diagonal);
	}
}