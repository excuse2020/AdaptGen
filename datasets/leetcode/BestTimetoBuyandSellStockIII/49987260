class Solution {
	int[][][] dp;
	int call(int[] p, int i, int n, int k, int flag) {
		if (k == 0 || i == n) {
			return 0;
		}
		if (dp[k][flag][i] != -1) {
			return dp[k][flag][i];
		}
		if (flag == 0) {
			return dp[k][flag][i] = Math.max(call(p,i + 1,n,k,flag),call(p,i + 1,n,k,1) - p[i]);
		} 
		else {
			return dp[k][flag][i] = Math.max(call(p,i + 1,n,k,flag),call(p,i + 1,n,k - 1,0) + p[i]);
		}
	}
	int maxProfit(int[] prices) {
		int n = prices.length;
		dp = new int[3][3][n + 1];
		for (int i = 0; i < 3; i++) {
			for (int j = 0; j < 3; j++) {
				Arrays.fill(dp[i][j],-1);
			}
		}
		return call(prices,0,n,2,0);
	}
}