class Solution {
	double findMedianSortedArrays(int[] nums1, int[] nums2) {
		if (nums1.length > nums2.length) {
			return findMedianSortedArrays(nums2,nums1);
		}
		int beg = 0;
		int end = nums1.length;
		while (beg <= end) {
			int part1 = (beg + end) / 2;
			int part2 = (nums1.length + nums2.length) / 2 - part1;
			int maxL1 = part1 == 0 ? Integer.MIN_VALUE : nums1[part1 - 1];
			int minR1 = part1 == nums1.length ? Integer.MAX_VALUE : nums1[part1];
			int maxL2 = part2 == 0 ? Integer.MIN_VALUE : nums2[part2 - 1];
			int minR2 = part2 == nums2.length ? Integer.MAX_VALUE : nums2[part2];
			if (maxL1 <= minR2 && maxL2 <= minR1) {
				if ((nums1.length + nums2.length) % 2 == 0) {
					return (Math.max(maxL1,maxL2) + Math.min(minR1,minR2)) / 2.0;
				} 
				else {
					return Math.max(maxL1,maxL2);
				}
			} 
			else if (maxL1 > minR2) {
				end = part1 - 1;
			} 
			else {
				beg = part1 + 1;
			}
		}
		return 1;
	}
}