class Solution {
	int res = -1;
	void dfs(int node, int[] edges, boolean[] visited, int[] rank) {
		if (edges[node] == -1 || visited[edges[node]]) {
			visited[node] = true;
			return;
		}
		int next = edges[node];
		if (rank[next] == -1) {
			rank[next] = rank[node] + 1;
			dfs(next,edges,visited,rank);
		} 
		else {
			res = Math.max(res,rank[node] - rank[next] + 1);
		}
		visited[node] = true;
	}
	int longestCycle(int[] edges) {
		boolean[] visited = new boolean[edges.length];
		int[] rank = new int[edges.length];
		Arrays.fill(rank,-1);
		for (int i = 0; i < edges.length; i++) {
			if (!visited[i]) {
				rank[i] = 0;
				dfs(i,edges,visited,rank);
			}
		}
		return res;
	}
}