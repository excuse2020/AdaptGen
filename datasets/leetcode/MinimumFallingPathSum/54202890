class Solution {
	int f(int matrix, int n, int i, int j, int dp) {
		if (j < 0 || j >= n) {
			return 100000000;
		}
		if (i == n - 1) {
			return matrix[i][j];
		}
		if (dp[i][j] != -1) {
			return dp[i][j];
		}
		int left = f(matrix,n,i + 1,j - 1,dp);
		int bottom = f(matrix,n,i + 1,j,dp);
		int right = f(matrix,n,i + 1,j + 1,dp);
		return dp[i][j] = matrix[i][j] + Math.min(left,Math.min(bottom,right));
	}
	int minFallingPathSum(int[][] matrix) {
		int mini = 100000000;
		int n = matrix.length;
		int dp = new int[n][n];
		for (int i = n - 1; i >= 0; i--) {
			for (int j = 0; j < n; j++) {
				if (i == n - 1) {
					dp[i][j] = matrix[i][j];
					continue;
				}
				int left = 100000000;
				int right = 100000000;
				if (j > 0) {
					left = dp[i + 1][j - 1];
				}
				int bottom = dp[i + 1][j];
				if (j < n - 1) {
					right = dp[i + 1][j + 1];
				}
				dp[i][j] = matrix[i][j] + Math.min(left,Math.min(bottom,right));
			}
		}
		for (int j = 0; j < n; j++) {
			mini = Math.min(mini,dp[0][j]);
		}
		return mini;
	}
}