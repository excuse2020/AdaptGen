class Solution {
	boolean dfs(char[][] board, int idx, int i, int j, int rows, int cols, String word) {
		if (idx == word.length()) {
			return true;
		}
		boolean isCurrentCellSafe = isSafe(board,idx,i,j,rows,cols,word);
		boolean result = false;
		char ch = board[i][j];
	}
	List<String> findWords(char[][] board, String[] words) {
		List<String> result = new ArrayList<>();
		if (board == null || board.length == 0) {
			return result;
		}
		int rows = board.length;
		int cols = board[0].length;
		for (String word: words) {	
			for (int i = 0; i < rows; i++) {
				for (int j = 0; j < cols; j++) {
					if (word.charAt(0) == board[i][j]) {
						if (dfs(board,0,i,j,rows,cols,word)) {
							if (!result.contains(word)) {
								result.add(word);
							}
						}
					}
				}
			}
		}
		return result;
	}
	boolean isSafe(char[][] board, int idx, int i, int j, int rows, int cols, String word) {
		if (i >= 0 && i < rows && j >= 0 && j < cols && board[i][j] == word.charAt(idx)) {
			return true;
		}
		return false;
	}
}