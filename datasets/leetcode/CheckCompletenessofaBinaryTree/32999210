class Solution {
	boolean isCompleteTree(TreeNode root) {
		List<List<Integer>> list = new ArrayList<>();
		Queue<TreeNode> q = new LinkedList<>();
		q.add(root);
		while (!q.isEmpty()) {
			int size = q.size();
			List<Integer> al = new ArrayList<>();
			for (int i = 0; i < size; i++) {
				TreeNode node = q.poll();
				if (node != null) {
					al.add(node.val);
				} 
				else {
					al.add(-1);
					continue;
				}
				if (node.left != null) {
					q.add(node.left);
				} 
				else {
					q.add(null);
				}
				if (node.right != null) {
					q.add(node.right);
				} 
				else {
					q.add(null);
				}
			}
			list.add(al);
		}
		int count = 0;
		for (int i = 0; i < list.size() - 1; i++) {
			if (i < list.size() - 2) {
				for (Integer num: list.get(i)) {	
					if (num > 0) {
						count++;
					}
				}
			} 
			else {
				if (count != (int) Math.pow(2,i) - 1) {
					return false;
				}
				int k = 0;
				while (k != list.get(i).size()) {
					if (list.get(i).get(k) == -1) {
						break;
					}
					k++;
				}
				while (k != list.get(i).size()) {
					if (list.get(i).get(k) > 0) {
						return false;
					}
					k++;
				}
			}
		}
		return true;
	}
}