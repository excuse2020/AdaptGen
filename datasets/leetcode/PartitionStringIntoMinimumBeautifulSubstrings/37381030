class Solution {
	int minimumBeautifulSubstrings(String s) {
		Set<String> set = new HashSet<>();
		set.add("1");
		set.add("101");
		set.add("11001");
		set.add("1111101");
		set.add("1001110001");
		set.add("110000110101");
		set.add("11110100001001");
		int result = minimumBeautifulSubstringsHelper(s,0,set,0);
		if (result == Integer.MAX_VALUE) {
			return -1;
		}
		return result;
	}
	int minimumBeautifulSubstringsHelper(String s, int index, Set<String> set, int count) {
		if (index >= s.length()) {
			return count;
		}
		int minResult = Integer.MAX_VALUE;
		for (int i = index; i <= s.length(); i++) {
			if (set.contains(s.substring(index,i))) {
				int result = minimumBeautifulSubstringsHelper(s,i,set,count + 1);
				minResult = Math.min(minResult,result);
			}
		}
		return minResult;
	}
}