class Solution {
	int max = 0;
	void backtrack(int[][] grid, boolean[][] visited, int val, int i, int j) {
		if (i < 0 || i >= grid.length || j < 0 || j >= grid[0].length || grid[i][j] == 0 || visited[i][j]) {
			return;
		}
		val += grid[i][j];
		max = Math.max(max,val);
		visited[i][j] = true;
		backtrack(grid,visited,val,i - 1,j);
		backtrack(grid,visited,val,i + 1,j);
		backtrack(grid,visited,val,i,j - 1);
		backtrack(grid,visited,val,i,j + 1);
		visited[i][j] = false;
	}
	int getMaximumGold(int[][] grid) {
		int n = grid.length;
		int m = grid[0].length;
		boolean[][] visited = new boolean[n][m];
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < m; j++) {
				if (grid[i][j] != 0) {
					backtrack(grid,visited,0,i,j);
				}
			}
		}
		return max;
	}
}