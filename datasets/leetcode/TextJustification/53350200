class Solution {
	List<String> fullJustify(String[] words, int maxWidth) {
		List<String> lines = new ArrayList();
		int wordsLength = 0;
		int n1 = 0, n2 = 0;
		int i = 0;
		while (i < words.length) {
			n1 = i;
			for (int j = n1; j < words.length; j++) {
				wordsLength += words[j].length();
				if (j == words.length - 1) {
					n2 = j;
					break;
				}
				if (wordsLength + words[j + 1].length() - n1 > maxWidth) {
					n2 = j;
					break;
				}
				n2 = j + 1;
			}
			i = n2 + 1;
			int evenSpaceWidth = 1, additionalSpaces = 0;
			if (n2 == words.length - 1) {
			} 
			else if (n2 == n1) {
			} 
			else {
				evenSpaceWidth = (maxWidth - wordsLength) / (n2 - n1);
				additionalSpaces = (maxWidth - wordsLength) % (n2 - n1);
			}
			StringBuilder sb = new StringBuilder();
			for (int j = n1; j <= n2; j++) {
				sb.append(words[j]);
				if (j == n2) {
					break;
				}
				for (int k = evenSpaceWidth; k > 0; k--) {
					sb.append(" ");
				}
				if (additionalSpaces > 0) {
					sb.append(" ");
					additionalSpaces--;
				}
			}
			if (n1 == n2 || n2 == words.length - 1) {
				for (int j = 0; j < maxWidth - (wordsLength + n2 - n1); j++) {
					sb.append(" ");
				}
			}
			lines.add(sb.toString());
			wordsLength = 0;
		}
		return lines;
	}
}