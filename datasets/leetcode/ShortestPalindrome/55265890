class Solution {
	int[] computeLPS(String s) {
		int n = s.length();
		int[] lps = new int[n];
		int len = 0;
		int i = 1;
		while (i < n) {
			if (s.charAt(i) == s.charAt(len)) {
				len++;
				lps[i] = len;
				i++;
			} 
			else {
				if (len != 0) {
					len = lps[len - 1];
				} 
				else {
					lps[i] = 0;
					i++;
				}
			}
		}
		return lps;
	}
	String shortestPalindrome(String s) {
		String reversed = new StringBuilder(s).reverse().toString();
		String combined = s + "#";
		int[] lps = computeLPS(combined);
		int longestPalindromeLength = lps[lps.length - 1];
		String prefix = reversed.substring(0,reversed.length() - longestPalindromeLength);
		return prefix + s;
	}
}