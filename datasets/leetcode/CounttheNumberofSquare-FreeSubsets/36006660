class Solution {
	int MOD = (int) (1e9 + 7);
	List<Integer> PRIMES = List.of(2,3,5,7,11,13);
	int squareFreeSubsets(int[] nums) {
		int[] primeFactors = new int[31];
		for (int i = 2; i <= 30; i++) {
			if (i % 4 == 0 || i % 9 == 0 || i % 25 == 0) {
				continue;
			}
			for (int j = 0; j < PRIMES.size(); j++) {
				if (i % PRIMES.get(j) == 0) {
					primeFactors[i] += 1 << j;
				}
			}
		}
		int[] freqs = new int[31];
		for (int num: nums) {	
			if (num % 4 == 0 || num % 9 == 0 || num % 25 == 0) {
				continue;
			}
			freqs[num]++;
		}
		long[] dp = new long[1 << 6];
		dp[primeFactors[30]] = freqs[30] % MOD;
		for (int i = 29; i >= 2; i--) {
			if (freqs[i] == 0) {
				continue;
			}
			long[] temp = dp.clone();
			temp[primeFactors[i]] += freqs[i];
			temp[primeFactors[i]] %= MOD;
			for (int mask = 0; mask < dp.length; mask++) {
				if (dp[mask] != 0 && (mask & primeFactors[i]) == 0) {
					temp[mask | primeFactors[i]] += freqs[i] * dp[mask];
					temp[mask | primeFactors[i]] %= MOD;
				}
			}
			dp = temp;
		}
		long oneSubsets = BigInteger.TWO.modPow(BigInteger.valueOf(freqs[1]),BigInteger.valueOf(MOD)).longValue();
		long otherSubsets = Arrays.stream(dp).sum() % MOD;
		return (int) (otherSubsets * oneSubsets % MOD + oneSubsets - 1) % MOD;
	}
}