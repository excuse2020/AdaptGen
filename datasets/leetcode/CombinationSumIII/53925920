class Solution {
	void backtrack(List<List<Integer>> res, List<Integer> cur, int k, int index, int target) {
		if (target == 0 && k == 0) {
			res.add(new ArrayList<>(cur));
			return;
		}
		if (target < 0 || index > 9) {
			return;
		}
		for (int i = index; i <= 9; i++) {
			if (target - i >= 0) {
				cur.add(i);
				backtrack(res,cur,k - 1,i + 1,target - i);
				cur.remove(cur.size() - 1);
			}
		}
	}
	List<List<Integer>> combinationSum3(int k, int n) {
		List<List<Integer>> res = new ArrayList<>();
		backtrack(res,new ArrayList<>(),k,1,n);
		return res;
	}
}