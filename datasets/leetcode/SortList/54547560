class Solution {
	ListNode merge(ListNode left, ListNode right) {
		ListNode t1 = left;
		ListNode t2 = right;
		ListNode prev = new ListNode(-1);
		ListNode temp = prev;
		while (t1 != null && t2 != null) {
			if (t1.val <= t2.val) {
				temp.next = t1;
				t1 = t1.next;
			} 
			else {
				temp.next = t2;
				t2 = t2.next;
			}
			temp = temp.next;
		}
		if (t1 != null) {
			temp.next = t1;
		}
		if (t2 != null) {
			temp.next = t2;
		}
		return prev.next;
	}
	ListNode middle(ListNode head) {
		ListNode prev = null;
		ListNode slow = head;
		ListNode fast = head;
		while (fast != null && fast.next != null) {
			prev = slow;
			slow = slow.next;
			fast = fast.next.next;
		}
		return prev;
	}
	ListNode sortList(ListNode head) {
		if (head == null || head.next == null) {
			return head;
		}
		ListNode mid = middle(head);
		ListNode lefthead = head;
		ListNode righthead = mid.next;
		mid.next = null;
		lefthead = sortList(lefthead);
		righthead = sortList(righthead);
		return merge(lefthead,righthead);
	}
}