class Solution {
	int closestMeetingNode(int[] edges, int node1, int node2) {
		int n = edges.length;
		boolean[] seen1 = new boolean[n];
		boolean[] seen2 = new boolean[n];
		Queue<int[]> queue = new ArrayDeque<>();
		queue.offer(new int{1, node1});
		queue.offer(new int{2, node2});
		while (!queue.isEmpty()) {
			int ans = Integer.MAX_VALUE;
			for (int i = queue.size(); i > 0; i--) {
				int[] node = queue.poll();
				boolean[] s1 = node[0] == 1 ? seen1 : seen2;
				boolean[] s2 = node[0] == 1 ? seen2 : seen1;
				if (s1[node[1]]) {
					continue;
				}
				if (s2[node[1]]) {
					ans = Math.min(ans,node[1]);
				}
				s1[node[1]] = true;
				if (edges[node[1]] != -1) {
					queue.offer(new int{node[0], edges[node[1]]});
				}
			}
			if (ans != Integer.MAX_VALUE) {
				return ans;
			}
		}
		return -1;
	}
}