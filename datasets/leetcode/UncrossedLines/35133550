class Solution {
	int result = 0;
	void dfs(int[] nums1, int[] nums2, int i, int j, int count) {
		if (i == nums1.length || j == nums2.length) {
			result = Math.max(result,count);
			return;
		}
		if (nums1[i] == nums2[j]) {
			dfs(nums1,nums2,i + 1,j + 1,count + 1);
		} 
		else {
			dfs(nums1,nums2,i + 1,j,count);
			dfs(nums1,nums2,i,j + 1,count);
		}
	}
	int maxUncrossedLines(int[] nums1, int[] nums2) {
		int[][] dp = new int[nums1.length + 1][nums2.length + 1];
		for (int i = 1; i <= nums1.length; i++) {
			for (int j = 1; j <= nums2.length; j++) {
				if (nums1[i - 1] == nums2[j - 1]) {
					dp[i][j] = dp[i - 1][j - 1] + 1;
				} 
				else {
					dp[i][j] = Math.max(dp[i - 1][j],dp[i][j - 1]);
				}
				result = Math.max(result,dp[i][j]);
			}
		}
		return result;
	}
}