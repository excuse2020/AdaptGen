class Solution {
	void dfs(int node, ArrayList<ArrayList<Integer>> adj, boolean visited) {
		visited[node] = true;
		for (Integer i: adj.get(node)) {	
			if (visited[i] == false) {
				dfs(i,adj,visited);
			}
		}
	}
	int findCircleNum(int[][] isConnected) {
		ArrayList<ArrayList<Integer>> adj = new ArrayList<>();
		for (int i = 0; i < isConnected.length; i++) {
			ArrayList<Integer> list = new ArrayList<>();
			for (int j = 0; j < isConnected.length; j++) {
				if (isConnected[i][j] == 1) {
					list.add(j);
				}
			}
			adj.add(list);
		}
		boolean visited = new boolean[isConnected.length];
		int cnt = 0;
		for (int i = 0; i < visited.length; i++) {
			if (visited[i] == false) {
				cnt++;
				dfs(i,adj,visited);
			}
		}
		return cnt;
	}
}