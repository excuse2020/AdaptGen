class Solution {
	int N;
	int[] parent, rank;
	int find(int x) {
		if (parent[x] != x) {
			parent[x] = find(parent[x]);
		}
		return parent[x];
	}
	String smallestStringWithSwaps(String s, List<List<Integer>> pairs) {
		N = s.length();
		parent = new int[N];
		List<PriorityQueue<Character>> list = new ArrayList<>(N);
		StringBuilder buffer = new StringBuilder(N);
		rank = new int[N];
		for (int i = 0; i < N; ++i) {
			parent[i] = i;
			list.add(new PriorityQueue<>());
		}
		pairs.forEach((pair) -> {union(pair.get(0),pair.get(1))});
		IntStream.range(0,N).forEach((index) -> {list.get(find(index)).add(s.charAt(index))});
		IntStream.range(0,N).forEachOrdered((index) -> {buffer.append(list.get(find(index)).remove())});
		return buffer.toString();
	}
	boolean union(int a, int b) {
		int pa = find(a), pb = find(b);
		if (pa == pb) {
			return false;
		} 
		else {
			int ra = rank[pa], rb = rank[pb];
			if (ra > rb) {
				parent[pb] = pa;
			} 
			else if (rb > ra) {
				parent[pa] = pb;
			} 
			else {
				parent[pb] = pa;
				rank[pa]++;
			}
			return true;
		}
	}
}