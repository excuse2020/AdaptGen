class Solution {
	List<String> res3 = new ArrayList<String>();
	void helper(String str, int start, int lremove, int rremove) {
		if (lremove == 0 && rremove == 0) {
			if (isValid2(str)) {
				res3.add(str);
			}
			return;
		}
		for (int i = start; i < str.length(); i++) {
			if (i != start && str.charAt(i) == str.charAt(i - 1)) {
				continue;
			}
			if (lremove + rremove > str.length() - i) {
				return;
			}
			if (lremove > 0 && str.charAt(i) == '(') {
				helper(str.substring(0,i) + str.substring(i + 1),i,lremove - 1,rremove);
			}
			if (rremove > 0 && str.charAt(i) == ')') {
				helper(str.substring(0,i) + str.substring(i + 1),i,lremove,rremove - 1);
			}
		}
	}
	boolean isValid2(String str) {
		int cnt = 0;
		for (int i = 0; i < str.length(); i++) {
			if (str.charAt(i) == '(') {
				cnt++;
			} 
			else if (str.charAt(i) == ')') {
				cnt--;
				if (cnt < 0) {
					return false;
				}
			}
		}
		return cnt == 0;
	}
	String[] maxValidParenthesesStr(String s) {
		int lremove = 0;
		int rremove = 0;
		for (int i = 0; i < s.length(); i++) {
			if (s.charAt(i) == '(') {
				lremove++;
			} 
			else if (s.charAt(i) == ')') {
				if (lremove == 0) {
					rremove++;
				} 
				else {
					lremove--;
				}
			}
		}
		helper(s,0,lremove,rremove);
		String[] strings = new String[res3.size()];
		return res3.toArray(strings);
	}
}