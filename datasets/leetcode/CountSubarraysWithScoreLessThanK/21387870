class Solution {
	long countSubarrays(int[] nums, long k) {
		long sum = 0;
		int n = nums.length;
		long greaterSubArrays = 0;
		long[] prefixSum = new long[n + 1];
		for (int i = 0; i < n; i++) {
			prefixSum[i + 1] = prefixSum[i] + nums[i];
		}
		for (int i = 0; i < n; i++) {
			int low = i;
			int high = n - 1;
			int ansInd = -1;
			while (low <= high) {
				int mid = (low + high) / 2;
				int noOfElements = mid - i + 1;
				long diff = prefixSum[mid + 1] - prefixSum[i];
				long prd = diff * (long) noOfElements;
				if (prd >= k) {
					ansInd = mid;
					high = mid - 1;
				} 
				else {
					low = mid + 1;
				}
			}
			if (ansInd != -1) {
				greaterSubArrays += (long) (n - ansInd);
			}
		}
		long totalSubarrays = ((long) n * (long) (n + 1)) / 2;
		return totalSubarrays - greaterSubArrays;
	}
}