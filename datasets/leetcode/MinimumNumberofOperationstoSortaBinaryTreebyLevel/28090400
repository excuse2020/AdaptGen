class Solution {
	int minSwaps(int[] arr, int N) {
		int ans = 0;
		int[] temp = Arrays.copyOfRange(arr,0,N);
		HashMap<Integer, Integer> h = new HashMap<Integer, Integer>();
		Arrays.sort(temp);
		for (int i = 0; i < N; i++) {
			h.put(arr[i],i);
		}
		for (int i = 0; i < N; i++) {
			if (arr[i] != temp[i]) {
				ans++;
				int init = arr[i];
				swap(arr,i,h.get(temp[i]));
				h.put(init,h.get(temp[i]));
				h.put(temp[i],i);
			}
		}
		return ans;
	}
	int minimumOperations(TreeNode root) {
		Queue<TreeNode> queue = new LinkedList<>();
		queue.add(root);
		int min = 0;
		while (!queue.isEmpty()) {
			int size = queue.size();
			int[] arr = new int[size];
			for (int i = 0; i < size; i++) {
				TreeNode node = queue.poll();
				arr[i] = node.val;
				if (node.left != null) {
					queue.add(node.left);
				}
				if (node.right != null) {
					queue.add(node.right);
				}
			}
			min += minSwaps(arr,size);
		}
		return min;
	}
}