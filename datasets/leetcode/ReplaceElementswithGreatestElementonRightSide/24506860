class Solution {
	int maxInRight(int[] arr, int start, int end) {
		int max = Integer.MIN_VALUE;
		for (int i = start; i <= end; i++) {
			max = Math.max(max,arr[i]);
		}
		return max;
	}
	int[] replaceElements(int[] arr) {
		int[] ans = new int[arr.length];
		for (int i = 0; i < ans.length - 1; i++) {
			ans[i] = maxInRight(arr,i + 1,ans.length - 1);
		}
		ans[arr.length - 1] = -1;
		return ans;
	}
}
class Solution {
	int[] replaceElements(int[] arr) {
		int[] ans = new int[arr.length];
		for (int i = 0; i < ans.length - 1; i++) {
			int max = Integer.MIN_VALUE;
			for (int j = i + 1; j < ans.length; j++) {
				max = Math.max(max,arr[j]);
			}
			ans[i] = max;
		}
		ans[arr.length - 1] = -1;
		return ans;
	}
}
class Solution {
	int[] replaceElements(int[] arr) {
		int max = -1;
		for (int i = arr.length - 1; i >= 0; i--) {
			int temp = arr[i];
			arr[i] = max;
			max = Math.max(temp,max);
		}
		return arr;
	}
}