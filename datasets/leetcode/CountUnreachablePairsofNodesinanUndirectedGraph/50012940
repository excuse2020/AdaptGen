class Solution {
	int[] parent;
	int[] size;
	long countPairs(int n, int[][] edges) {
		initializeParent(n);
		long pairs = 0;
		int tLength = n;
		for (int[] edge: edges) {	
			union(edge[0],edge[1]);
		}
		boolean[] visitParent = new boolean[n];
		for (int i = 0; i < n; i++) {
			int g = find(i);
			if (visitParent[g]) {
				continue;
			}
			tLength = tLength - size[g];
			pairs += (long) tLength * size[g];
			visitParent[g] = true;
		}
		return pairs;
	}
	int find(int v) {
		if (v == parent[v]) {
			return v;
		}
		return parent[v] = find(parent[v]);
	}
	void initializeParent(int n) {
		parent = new int[n];
		size = new int[n];
		for (int i = 0; i < n; i++) {
			parent[i] = i;
			size[i] = 1;
		}
	}
	void union(int v1, int v2) {
		v1 = find(v1);
		v2 = find(v2);
		if (v1 == v2) {
			return;
		}
		if (size[v1] > size[v2]) {
			parent[v2] = v1;
			size[v1] += size[v2];
		} 
		else {
			parent[v1] = v2;
			size[v2] += size[v1];
		}
	}
}