class Solution {
	int minimumTotal(List<List<Integer>> triangle) {
		int N = triangle.size();
		int dp = new int[N][N];
		for (int row: dp) {	
			Arrays.fill(row,-1);
		}
		return minimumTotalutil(triangle,0,0,N,dp);
	}
	int minimumTotalutil(List<List<Integer>> triangle, int i, int j, int N, int dp) {
		if (i == N - 1) {
			return triangle.get(i).get(j);
		}
		if (dp[i][j] != -1) {
			return dp[i][j];
		}
		int down = triangle.get(i).get(j) + minimumTotalutil(triangle,i + 1,j,N,dp);
		int diagonal = triangle.get(i).get(j) + minimumTotalutil(triangle,i + 1,j + 1,N,dp);
		dp[i][j] = Math.min(down,diagonal);
		return dp[i][j];
	}
}