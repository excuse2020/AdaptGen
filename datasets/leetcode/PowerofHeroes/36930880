class Solution {
	int MOD = (int) 1e9 + 7;
	long mulMod(long a, long b) {
		long ans = 0;
		for (; b != 0; ) {
			if ((b & 1) == 1) {
				ans += a;
				ans %= MOD;
			}
			a += a;
			a %= MOD;
			b >>= 1;
		}
		return ans;
	}
	long powMod(long base, long exp) {
		long ans = 1;
		for (; exp != 0; ) {
			if ((exp & 1) == 1) {
				ans *= base;
				ans %= MOD;
			}
			base *= base;
			base %= MOD;
			exp = exp >> 1;
		}
		return ans;
	}
	int sumOfPower(int[] nums) {
		Arrays.sort(nums);
		long ans = 0;
		long prev = 0;
		long add = 0;
		for (var n: nums) {	
			add = mulMod(add,2);
			add = (add + prev) % MOD;
			ans = (ans + mulMod(add,powMod(n,2))) % MOD;
			ans = (ans + powMod(n,3)) % MOD;
			prev = n;
		}
		return (int) (ans % MOD);
	}
}