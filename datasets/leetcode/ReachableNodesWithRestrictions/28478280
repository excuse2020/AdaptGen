class Solution {
	void dfs(int node, ArrayList<ArrayList<Integer>> adj, int[] vis, int[] cnt) {
		vis[node] = 1;
		cnt[node] = 1;
		for (int ni: adj.get(node)) {	
			if (vis[ni] == 0) {
				dfs(ni,adj,vis,cnt);
			}
		}
	}
	int reachableNodes(int n, int[][] edges, int[] restricted) {
		ArrayList<ArrayList<Integer>> adj = new ArrayList<>();
		for (int i = 0; i < n; i++) {
			adj.add(new ArrayList<>());
		}
		for (int i = 0; i < edges.length; i++) {
			adj.get(edges[i][0]).add(edges[i][1]);
			adj.get(edges[i][1]).add(edges[i][0]);
		}
		int[] vis = new int[n];
		int[] cnt = new int[n];
		for (int i = 0; i < restricted.length; i++) {
			vis[restricted[i]] = 1;
		}
		dfs(0,adj,vis,cnt);
		int ans = 0;
		for (int i = 0; i < n; i++) {
			if (cnt[i] == 1) {
				ans++;
			}
		}
		return ans;
	}
}