class Solution {
	String kthSmallestPath(int[] destination, int k) {
		int rows = destination[0] + 1;
		int cols = destination[1] + 1;
		int[][] dp = new int[rows][cols];
		for (int i = 0; i < rows; i++) {
			for (int j = 0; j < cols; j++) {
				if (i == 0 || j == 0) {
					dp[i][j] = 1;
				} 
				else {
					dp[i][j] = dp[i - 1][j] + dp[i][j - 1];
				}
			}
		}
		StringBuilder sb = new StringBuilder();
		int remainingH = cols - 1;
		int remainingV = rows - 1;
		for (int i = 0; i < rows + cols - 2; i++) {
			if (remainingH > 0 && dp[remainingV][remainingH - 1] >= k) {
				sb.append("H");
				remainingH--;
			} 
			else {
				sb.append("V");
				if (remainingH > 0) {
					k -= dp[remainingV][remainingH - 1];
				}
				remainingV--;
			}
		}
		return sb.toString();
	}
}