class Solution {
	int count(ListNode head) {
		ListNode cur = head;
		int cnt = 0;
		while (cur != null) {
			cnt++;
			cur = cur.next;
		}
		return cnt;
	}
	ListNode insertionSortList(ListNode head) {
		int n = count(head);
		ListNode cur = head;
		int arr = new int[n];
		int k = 0;
		while (cur != null) {
			arr[k] = cur.val;
			cur = cur.next;
			k++;
		}
		for (int i = 1; i < n; i++) {
			int temp = arr[i];
			int j = i - 1;
			while (j >= 0 && arr[j] > temp) {
				arr[j + 1] = arr[j];
				j--;
			}
			arr[j + 1] = temp;
		}
		ListNode head1 = new ListNode(arr[0]);
		ListNode cur1 = head1;
		for (int i = 1; i < n; i++) {
			ListNode temp = new ListNode(arr[i]);
			cur1.next = temp;
			cur1 = temp;
		}
		cur1.next = null;
		return head1;
	}
}