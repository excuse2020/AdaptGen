class Solution {
	int dfs(List<List<int[]>> graph, int node, boolean[] visited) {
		visited[node] = true;
		int cost = 0;
		for (int[] neighbor: graph.get(node)) {	
			int nextNode = neighbor[0];
			int direction = neighbor[1];
			if (!visited[nextNode]) {
				cost += direction;
				cost += dfs(graph,nextNode,visited);
			}
		}
		return cost;
	}
	int minReorder(int n, int[][] connections) {
		List<List<int[]>> graph = new ArrayList<>();
		for (int i = 0; i < n; i++) {
			graph.add(new ArrayList<>());
		}
		for (int[] connection: connections) {	
			int from = connection[0];
			int to = connection[1];
			graph.get(from).add(new int{to, 1});
			graph.get(to).add(new int{from, 0});
		}
		boolean[] visited = new boolean[n];
		return dfs(graph,0,visited);
	}
}