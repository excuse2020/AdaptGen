class Solution {
	void backtrack(List<List<Integer>> res, List<Integer> cur, int[] arr, int target, int index) {
		if (target == 0) {
			res.add(new ArrayList<>(cur));
			return;
		}
		if (index >= arr.length || target < 0) {
			return;
		}
		for (int i = index; i < arr.length; i++) {
			if (i > index && arr[i] == arr[i - 1]) {
				continue;
			}
			if (target - arr[i] >= 0) {
				cur.add(arr[i]);
				backtrack(res,cur,arr,target - arr[i],i + 1);
				cur.remove(cur.size() - 1);
			}
		}
	}
	List<List<Integer>> combinationSum2(int[] candidates, int target) {
		Arrays.sort(candidates);
		List<List<Integer>> res = new ArrayList<>();
		backtrack(res,new ArrayList<>(),candidates,target,0);
		return res;
	}
}