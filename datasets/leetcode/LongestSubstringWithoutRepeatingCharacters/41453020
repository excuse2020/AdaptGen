class Solution {
	int lengthOfLongestSubstring(String s) {
		HashSet<Character> hset = new HashSet();
		int i = 0, j = 0;
		int maxLen = 0;
		int n = s.length();
		while (j < n) {
			char ch = s.charAt(j);
			if (hset.contains(ch) == false) {
				hset.add(ch);
			} 
			else {
				while (hset.contains(ch)) {
					hset.remove(s.charAt(i));
					i++;
				}
				hset.add(ch);
			}
			maxLen = Math.max(maxLen,(j - i) + 1);
			j++;
		}
		return maxLen;
		HashMap<Character, Integer> hmap = new HashMap<>();
		int i = 0, j = 0;
		int n = s.length();
		int maxLen = 0;
		while (j < n) {
			char ch = s.charAt(j);
			if (hmap.containsKey(ch)) {
				i = Math.max(hmap.get(ch) + 1,i);
			}
			hmap.put(ch,j);
			maxLen = Math.max(maxLen,(j - i) + 1);
			j++;
		}
		return maxLen;
	}
}