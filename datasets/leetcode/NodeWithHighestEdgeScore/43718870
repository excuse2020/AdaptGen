class Solution {
	void dfs(ArrayList<Integer> graph, long parsum, int curr, boolean visit) {
		visit[curr] = true;
		for (int node: graph[curr]) {	
			parsum[node] += curr;
			if (!visit[node]) {
				dfs(graph,parsum,node,visit);
			}
		}
	}
	int edgeScore(int[] edges) {
		int n = edges.length;
		ArrayList<Integer> graph = new ArrayList[edges.length];
		HashMap<Integer, Integer> map = new HashMap<>();
		for (int i = 0; i < graph.length; i++) {
			graph[i] = new ArrayList<>();
		}
		for (int i = 0; i < n; i++) {
			graph[i].add(edges[i]);
		}
		long parsum = new long[n];
		Arrays.fill(parsum,Long.valueOf(0));
		boolean visit = new boolean[n];
		for (int i = 0; i < n; i++) {
			if (!visit[i]) {
				dfs(graph,parsum,i,visit);
			}
		}
		int ans = 0;
		long max = -1;
		for (int i = 0; i < n; i++) {
			if (parsum[i] > max) {
				max = parsum[i];
				ans = i;
			}
		}
		return ans;
	}
}