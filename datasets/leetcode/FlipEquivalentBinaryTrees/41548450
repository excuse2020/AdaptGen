class Solution {
	boolean flipEquiv(TreeNode root1, TreeNode root2) {
		return flipEquivUtility(root1,root2);
	}
	boolean flipEquivUtility(TreeNode root1, TreeNode root2) {
		if ((root1 == null && root2 != null) || (root2 == null && root1 != null)) {
			return false;
		}
		if (root1 == root2) {
			return true;
		}
		if (root1.val == root2.val) {
			if (flipEquivUtility(root1.left,root2.left) && flipEquivUtility(root1.right,root2.right)) {
				return true;
			} 
			else if (flipEquivUtility(root1.left,root2.right) && flipEquivUtility(root1.right,root2.left)) {
				return true;
			}
		}
		return false;
	}
}