class Solution {
	void DFS(TreeNode root, TreeNode newNode, HashMap<TreeNode, TreeNode> par, HashMap<Integer, Integer> levelSum, int level) {
		newNode.val = levelSum.get(level);
		TreeNode parent = par.get(root);
		if (parent != null) {
			int val = 0;
			if (parent.left != null) {
				val = parent.left.val;
			}
			if (parent.right != null) {
				val += parent.right.val;
			}
			newNode.val -= val;
		} 
		else {
			newNode.val -= root.val;
		}
		if (root.left != null) {
			TreeNode node = new TreeNode();
			newNode.left = node;
			DFS(root.left,newNode.left,par,levelSum,level + 1);
		}
		if (root.right != null) {
			TreeNode node = new TreeNode();
			newNode.right = node;
			DFS(root.right,newNode.right,par,levelSum,level + 1);
		}
	}
	TreeNode replaceValueInTree(TreeNode root) {
		Queue<TreeNode> que = new LinkedList();
		HashMap<TreeNode, TreeNode> par = new HashMap();
		HashMap<Integer, Integer> levelSum = new HashMap();
		que.add(root);
		par.put(root,null);
		int level = 0;
		while (que.size() != 0) {
			int size = que.size();
			int sum = 0;
			level += 1;
			while (size != 0) {
				size--;
				TreeNode top = que.poll();
				sum += top.val;
				if (top.left != null) {
					que.add(top.left);
					par.put(top.left,top);
				}
				if (top.right != null) {
					que.add(top.right);
					par.put(top.right,top);
				}
			}
			levelSum.put(level,sum);
		}
		TreeNode newNode = new TreeNode();
		DFS(root,newNode,par,levelSum,1);
		return newNode;
	}
}