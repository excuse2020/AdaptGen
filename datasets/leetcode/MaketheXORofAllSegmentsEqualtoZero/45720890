class Solution {
	int minChanges(int[] A, int k) {
		int n = A.length;
		HashMap<Integer, Integer>[] cnt = new HashMap[k];
		int[] posFreq = new int[k];
		for (int i = 0, q = 0; i < n; i++, q++) {
			int id = q % k;
			if (cnt[id] == null) {
				cnt[id] = new HashMap<>();
			}
			posFreq[id]++;
			cnt[id].put(A[i],cnt[id].getOrDefault(A[i],0) + 1);
		}
		int[][] dp = new int[k][1024];
		int minCostPrevXor = 0;
		for (int i = 0; i < k; i++) {
			int minCostAtStep = Integer.MAX_VALUE;
			int minCostXorAtStep = 0;
			for (int xor = 0; xor < 1024; xor++) {
				if (i == k - 1 && xor > 0) {
					break;
				}
				dp[i][xor] = Integer.MAX_VALUE;
				if (i == 0) {
					dp[i][xor] = posFreq[i] - cnt[i].getOrDefault(xor,0);
					if (dp[i][xor] < minCostAtStep) {
						minCostAtStep = dp[i][xor];
						minCostXorAtStep = xor;
					}
					continue;
				}
				dp[i][xor] = Math.min(dp[i][xor],dp[i - 1][minCostPrevXor] + posFreq[i]);
				for (int seenNum: cnt[i].keySet()) {	
					int cost = dp[i - 1][xor ^ seenNum] + posFreq[i] - cnt[i].get(seenNum);
					dp[i][xor] = Math.min(dp[i][xor],cost);
				}
				if (dp[i][xor] < minCostAtStep) {
					minCostAtStep = dp[i][xor];
					minCostXorAtStep = xor;
				}
			}
			minCostPrevXor = minCostXorAtStep;
		}
		return dp[k - 1][0];
	}
}