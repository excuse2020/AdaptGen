class Solution {
	int[] par = new int[26];
	void connect(int u, int v) {
		u = find_par(u);
		v = find_par(v);
		if (v < u) {
			par[u] = v;
		} 
		else {
			par[v] = u;
		}
		return;
	}
	int find_par(int node) {
		return par[node] == node ? node : find_par(par[node]);
	}
	String smallestEquivalentString(String s1, String s2, String baseStr) {
		for (int i = 0; i < 26; i++) {
			par[i] = i;
		}
		int n = s1.length();
		for (int i = 0; i < n; i++) {
			int u = s1.codePointAt(i) - 97;
			int v = s2.codePointAt(i) - 97;
			connect(u,v);
		}
		StringBuilder ret = new StringBuilder();
		for (int i = 0; i < baseStr.length(); i++) {
			ret.append((char) (find_par(baseStr.codePointAt(i) - 97) + 97));
		}
		return ret.toString();
	}
}