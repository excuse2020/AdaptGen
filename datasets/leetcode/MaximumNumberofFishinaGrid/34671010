class Solution {
	int findMaxFish(int[][] grid) {
		int vlen = grid.length;
		int hleng = grid[0].length;
		int[][] visited = new int[vlen][hleng];
		int ans = 0;
		Arrays.stream(visited).forEach((x) -> {Arrays.fill(x,0)});
		for (int i = 0; i < vlen; i++) {
			for (int j = 0; j < hleng; j++) {
				if (grid[i][j] > 0) {
					ans = Math.max(ans,util(grid,i,j,visited));
				}
			}
		}
		return ans;
	}
	boolean isValidIndex(int i, int j, int[][] grid, int[][] visited) {
		if (i < 0 || i >= grid.length || j < 0 || j >= grid[0].length || visited[i][j] == 1 || grid[i][j] == 0) {
			return false;
		}
		return true;
	}
	Integer util(int[][] grid, int i, int j, int[][] visited) {
		if (visited[i][j] == 1) {
			return 0;
		}
		Integer solution = 0;
		Queue<int[]> q = new LinkedList<>();
		q.add(new int{i, j});
		visited[i][j] = 1;
		while (!q.isEmpty()) {
			int size = q.size();
			for (int k = 0; k < size; k++) {
				int[] curr = q.remove();
				solution += grid[curr[0]][curr[1]];
				if (isValidIndex(curr[0],curr[1] - 1,grid,visited)) {
					q.add(new int{curr[0], curr[1] - 1});
					visited[curr[0]][curr[1] - 1] = 1;
				}
				if (isValidIndex(curr[0],curr[1] + 1,grid,visited)) {
					q.add(new int{curr[0], curr[1] + 1});
					visited[curr[0]][curr[1] + 1] = 1;
				}
				if (isValidIndex(curr[0] - 1,curr[1],grid,visited)) {
					q.add(new int{curr[0] - 1, curr[1]});
					visited[curr[0] - 1][curr[1]] = 1;
				}
				if (isValidIndex(curr[0] + 1,curr[1],grid,visited)) {
					q.add(new int{curr[0] + 1, curr[1]});
					visited[curr[0] + 1][curr[1]] = 1;
				}
			}
		}
		return solution;
	}
}