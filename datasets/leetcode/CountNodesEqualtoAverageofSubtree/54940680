class Solution {
	int averageOfSubtree(TreeNode root) {
		if (root == null) {
			return 0;
		}
		Queue<TreeNode> q = new LinkedList<>();
		q.add(root);
		int res = 0;
		while (!q.isEmpty()) {
			TreeNode temp = q.poll();
			if (temp.left != null) {
				q.add(temp.left);
			}
			if (temp.right != null) {
				q.add(temp.right);
			}
			if (check(temp)) {
				res++;
			}
		}
		return res;
	}
	boolean check(TreeNode tem) {
		int sum = 0;
		int count = 0;
		Queue<TreeNode> q = new LinkedList<>();
		q.add(tem);
		while (!q.isEmpty()) {
			TreeNode temp = q.poll();
			if (temp.left != null) {
				q.add(temp.left);
			}
			if (temp.right != null) {
				q.add(temp.right);
			}
			sum = sum + temp.val;
			count++;
		}
		if (tem.val == (sum / count)) {
			return true;
		}
		return false;
	}
}