class Solution {
	boolean checkAlmostEquivalent(String word1, String word2) {
		int[] frq1 = new int[26];
		int[] frq2 = new int[26];
		for (int i = 0; i < word1.length(); i++) {
			frq1[word1.charAt(i) - 97]++;
			frq2[word2.charAt(i) - 97]++;
		}
		for (int i = 0; i < 26; i++) {
			if (frq1[i] > frq2[i]) {
				if (frq1[i] - frq2[i] > 3) {
					return false;
				}
			} 
			else if (frq2[i] - frq1[i] > 3) {
				return false;
			}
		}
		return true;
	}
}
class Solution {
	boolean checkAlmostEquivalent(String word1, String word2) {
		HashMap<Character, Integer> map1 = new HashMap<>();
		HashMap<Character, Integer> map2 = new HashMap<>();
		for (char ch: word1.toCharArray()) {	
			map1.put(ch,map1.getOrDefault(ch,0) + 1);
		}
		for (char ch: word2.toCharArray()) {	
			map2.put(ch,map2.getOrDefault(ch,0) + 1);
		}
		for (char ch: word1.toCharArray()) {	
			int t1 = map1.get(ch);
			int t2 = (map2.containsKey(ch)) ? map2.get(ch) : 0;
			int diff = Math.abs(t1 - t2);
			if (diff > 3) {
				return false;
			}
		}
		for (char ch: word2.toCharArray()) {	
			int t1 = map2.get(ch);
			int t2 = (map1.containsKey(ch)) ? map1.get(ch) : 0;
			int diff = Math.abs(t1 - t2);
			if (diff > 3) {
				return false;
			}
		}
		return true;
	}
}