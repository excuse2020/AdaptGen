class Solution {
	int[] MySort(int[] arr) {
		if (arr == null || arr.length < 2) {
			return arr;
		}
		for (int i = arr.length - 1; i >= 0; i--) {
			heapify(arr,i,arr.length);
		}
		int heapSize = arr.length;
		swap(arr,0,--heapSize);
		while (heapSize > 0) {
			heapify(arr,0,heapSize);
			swap(arr,0,--heapSize);
		}
		return arr;
	}
	void heapify(int[] arr, int index, int heapSize) {
		int left = 2 * index + 1;
		while (left < heapSize) {
			int largest = left + 1 < heapSize && arr[left + 1] > arr[left] ? left + 1 : left;
			largest = arr[largest] > arr[index] ? largest : index;
			if (largest == index) {
				break;
			}
			swap(arr,index,largest);
			index = largest;
			left = 2 * index + 1;
		}
	}
	void swap(int[] arr, int i, int j) {
		if (i == j) {
			return;
		}
		arr[i] = arr[i] ^ arr[j];
		arr[j] = arr[i] ^ arr[j];
		arr[i] = arr[i] ^ arr[j];
	}
}