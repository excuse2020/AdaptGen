class Solution {
	int bfsSecond(int[][] grid, Queue<int[]> queue) {
		int result = Integer.MAX_VALUE;
		for (; !queue.isEmpty(); ) {
			int[] item = queue.poll();
			if (item[0] - 1 >= 0 && grid[item[0] - 1][item[1]] != -1) {
				if (grid[item[0] - 1][item[1]] == 0) {
					queue.offer(new int{item[0] - 1, item[1], item[2] + 1});
					grid[item[0] - 1][item[1]] = -1;
				} 
				else {
					result = Math.min(result,item[2]);
				}
			}
			if (item[0] + 1 < grid.length && grid[item[0] + 1][item[1]] != -1) {
				if (grid[item[0] + 1][item[1]] == 0) {
					queue.offer(new int{item[0] + 1, item[1], item[2] + 1});
					grid[item[0] + 1][item[1]] = -1;
				} 
				else {
					result = Math.min(result,item[2]);
				}
			}
			if (item[1] - 1 >= 0 && grid[item[0]][item[1] - 1] != -1) {
				if (grid[item[0]][item[1] - 1] == 0) {
					queue.offer(new int{item[0], item[1] - 1, item[2] + 1});
					grid[item[0]][item[1] - 1] = -1;
				} 
				else {
					result = Math.min(result,item[2]);
				}
			}
			if (item[1] + 1 < grid.length && grid[item[0]][item[1] + 1] != -1) {
				if (grid[item[0]][item[1] + 1] == 0) {
					queue.offer(new int{item[0], item[1] + 1, item[2] + 1});
					grid[item[0]][item[1] + 1] = -1;
				} 
				else {
					result = Math.min(result,item[2]);
				}
			}
		}
		return result;
	}
	void dfs(int[][] grid, int i, int j, Queue<int[]> queue) {
		if (i < 0 || i >= grid.length) {
			return;
		}
		if (j < 0 || j >= grid[i].length) {
			return;
		}
		if (grid[i][j] == 0) {
			return;
		}
		if (grid[i][j] == -1) {
			return;
		}
		grid[i][j] = -1;
		queue.offer(new int{i, j, 0});
		dfs(grid,i + 1,j,queue);
		dfs(grid,i - 1,j,queue);
		dfs(grid,i,j + 1,queue);
		dfs(grid,i,j - 1,queue);
	}
	Queue<int[]> dfsFirst(int[][] grid) {
		Queue<int[]> queue = new LinkedList<>();
		for (int i = 0; i < grid.length; i++) {
			for (int j = 0; j < grid[i].length; j++) {
				if (grid[i][j] == 1) {
					dfs(grid,i,j,queue);
					return queue;
				}
			}
		}
		return queue;
	}
	int shortestBridge(int[][] grid) {
		Queue<int[]> queue = dfsFirst(grid);
		return bfsSecond(grid,queue);
	}
}