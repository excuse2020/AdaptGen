class Solution {
	LinkedList<Integer> tmp = null;
	int[] convert_to(LinkedList<Integer> params) {
		int[] result = new int[params.size()];
		int i = 0;
		for (Integer param: params) {	
			result[i++] = param;
		}
		return result;
	}
	LinkedList<Integer> result_out(TreeNode root, int type) {
		if (type == 0) {
			tmp.add(root.val);
		}
		if (root.left != null) {
			result_out(root.left,type);
		}
		if (type == 1) {
			tmp.add(root.val);
		}
		if (root.right != null) {
			result_out(root.right,type);
		}
		if (type == 2) {
			tmp.add(root.val);
		}
		return tmp;
	}
	int[][] threeOrders(TreeNode root) {
		if (root == null) {
			return new int[3][0];
		}
		tmp = new LinkedList<Integer>();
		LinkedList<Integer> pre_result = result_out(root,0);
		tmp = new LinkedList<Integer>();
		LinkedList<Integer> mid_result = result_out(root,1);
		tmp = new LinkedList<Integer>();
		LinkedList<Integer> after_result = result_out(root,2);
		int[][] result = new int[3][pre_result.size()];
		result[0] = convert_to(pre_result);
		result[1] = convert_to(mid_result);
		result[2] = convert_to(after_result);
		return result;
	}
}