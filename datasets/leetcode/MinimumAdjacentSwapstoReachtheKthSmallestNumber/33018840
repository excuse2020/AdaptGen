class Solution {
	int binarySearchJustGreaterThanEqualTo(int[] arr, int index, int target) {
		int lo = index;
		int hi = arr.length - 1;
		int ans = index;
		while (lo <= hi) {
			int pivot = lo + (hi - lo) / 2;
			if (arr[pivot] > target) {
				ans = pivot;
				lo = pivot + 1;
			} 
			else {
				hi = pivot - 1;
			}
		}
		return ans;
	}
	int getMinSwaps(String num, int k) {
		int[] nums = new int[num.length()];
		int[] original = new int[num.length()];
		int index = 0;
	}
	void nextPermutation(int[] arr) {
		int index = arr.length - 2;
		while (index >= 0 && arr[index] >= arr[index + 1]) {
			index--;
		}
		int justGreaterThanEqualToIndex = binarySearchJustGreaterThanEqualTo(arr,index + 1,arr[index]);
		swap(arr,index,justGreaterThanEqualToIndex);
		reverse(arr,index + 1);
	}
	void reverse(int[] arr, int index) {
		int eIndex = arr.length - 1;
		while (index < eIndex) {
			swap(arr,index++,eIndex--);
		}
	}
	void swap(int[] arr, int x, int y) {
		int temp = arr[x];
		arr[x] = arr[y];
		arr[y] = temp;
	}
}