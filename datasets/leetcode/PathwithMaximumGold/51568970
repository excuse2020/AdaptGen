class Solution {
	int max = 0;
	void dfs(int[][] grid, int row, int col, int sum) {
		if (grid[row][col] == 0) {
			return;
		}
		int newSum = grid[row][col] + sum;
		max = Math.max(max,newSum);
		grid[row][col] = 0;
		if (row + 1 < grid.length) {
			dfs(grid,row + 1,col,newSum);
		}
		if (row - 1 >= 0) {
			dfs(grid,row - 1,col,newSum);
		}
		if (col + 1 < grid[row].length) {
			dfs(grid,row,col + 1,newSum);
		}
		if (col - 1 >= 0) {
			dfs(grid,row,col - 1,newSum);
		}
		grid[row][col] = newSum - sum;
	}
	int getMaximumGold(int[][] grid) {
		int sum = sumAllIfNoZeroes(grid);
		if (sum != -1) {
			return sum;
		}
		for (int row = 0; row < grid.length; row++) {
			for (int col = 0; col < grid[row].length; col++) {
				dfs(grid,row,col,0);
			}
		}
		return max;
	}
	int sumAllIfNoZeroes(int[][] grid) {
		int sum = 0;
		for (int[] row: grid) {	
			for (int cell: row) {	
				if (cell == 0) {
					return -1;
				}
				sum += cell;
			}
		}
		return sum;
	}
}