class Solution {
	void dfs(TreeNode root, List<List<Integer>> ans, List<Integer> path, int curSum, int targetSum) {
		if (root == null) {
			return;
		}
		curSum += root.val;
		path.add(root.val);
		if (root.left == null && root.right == null) {
			if (curSum == targetSum) {
				ans.add(new ArrayList<Integer>(path));
			}
		} 
		else {
			dfs(root.left,ans,path,curSum,targetSum);
			dfs(root.right,ans,path,curSum,targetSum);
		}
		curSum -= root.val;
		path.remove(path.size() - 1);
	}
	List<List<Integer>> pathSum(TreeNode root, int targetSum) {
		List<List<Integer>> ans = new ArrayList<>();
		List<Integer> path = new ArrayList<>();
		dfs(root,ans,path,0,targetSum);
		return ans;
	}
}