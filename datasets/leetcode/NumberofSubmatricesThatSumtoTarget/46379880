class Solution {
	int numSubmatrixSumTarget(int[][] matrix, int target) {
		int rows = matrix.length;
		int cols = matrix[0].length;
		int result = 0;
		int[][] prefixSum = new int[rows + 1][cols + 1];
		for (int i = 1; i <= rows; i++) {
			for (int j = 1; j <= cols; j++) {
				prefixSum[i][j] = matrix[i - 1][j - 1] + prefixSum[i - 1][j] - prefixSum[i - 1][j - 1];
			}
		}
		for (int col1 = 1; col1 <= cols; col1++) {
			for (int col2 = col1; col2 <= cols; col2++) {
				Map<Integer, Integer> countMap = new HashMap<>();
				countMap.put(0,1);
				for (int row = 1; row <= rows; row++) {
					int currentSum = prefixSum[row][col2] - prefixSum[row][col1 - 1];
					if (countMap.containsKey(currentSum - target)) {
						result += countMap.get(currentSum - target);
					}
					countMap.put(currentSum,countMap.getOrDefault(currentSum,0) + 1);
				}
			}
		}
		return result;
	}
}