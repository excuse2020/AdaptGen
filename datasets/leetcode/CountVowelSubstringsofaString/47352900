class Solution {
	int atmostK(char ch, int n, int k) {
		int count = 0;
		int l = 0;
		int r = 0;
		Map<Character, Integer> map = new HashMap<>();
		while (r < n) {
			if (vowel(ch[r])) {
				map.put(ch[r],map.getOrDefault(ch[r],0) + 1);
				while (map.size() > k) {
					map.put(ch[l],map.get(ch[l]) - 1);
					if (map.get(ch[l]) == 0) {
						map.remove(ch[l]);
					}
					l++;
				}
			} 
			else {
				l = r + 1;
				map.clear();
			}
			count += (r - l + 1);
			r++;
		}
		return count;
	}
	int countVowelSubstrings(String word) {
		char ch = word.toCharArray();
		int n = word.length();
		return atmostK(ch,n,5) - atmostK(ch,n,4);
	}
	boolean vowel(char ch) {
	}
}