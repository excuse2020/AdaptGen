class Solution {
	void helperPathSum(TreeNode root, int targetSum, List<Integer> path, List<List<Integer>> ans) {
		if (root.left == null && root.right == null) {
			if (targetSum - root.val == 0) {
				path.add(root.val);
				List<Integer> base = new ArrayList<>();
				for (int val: path) {	
					base.add(val);
				}
				ans.add(base);
				path.remove(path.size() - 1);
			}
			return;
		}
		path.add(root.val);
		if (root.left != null) {
			helperPathSum(root.left,targetSum - root.val,path,ans);
		}
		if (root.right != null) {
			helperPathSum(root.right,targetSum - root.val,path,ans);
		}
		path.remove(path.size() - 1);
	}
	List<List<Integer>> pathSum(TreeNode root, int targetSum) {
		List<List<Integer>> ans = new ArrayList<>();
		if (root == null) {
			return ans;
		}
		List<Integer> path = new ArrayList<>();
		helperPathSum(root,targetSum,path,ans);
		return ans;
	}
}