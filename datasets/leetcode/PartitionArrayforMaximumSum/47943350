class Solution {
	int maxSumAfterPartitioning(int[] arr, int k) {
		int[] dp = new int[arr.length + 1];
		Arrays.fill(dp,-1);
		return solve(arr,k,0,dp);
	}
	int solve(int[] arr, int k, int start, int[] dp) {
		if (start == arr.length) {
			return 0;
		}
		int max = 0;
		int largest = 0;
		if (dp[start] != -1) {
			return dp[start];
		}
		for (int i = 1; i <= k && start + i <= arr.length; i++) {
			largest = Math.max(largest,arr[start + i - 1]);
			max = Math.max(max,i * largest + solve(arr,k,start + i,dp));
		}
		return dp[start] = max;
	}
}