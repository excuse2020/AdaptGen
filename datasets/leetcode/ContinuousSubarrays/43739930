class Solution {
	long continuousSubarrays(int[] nums) {
		long ans = 0;
		TreeMap<Integer, Integer> mp = new TreeMap<>(Collections.reverseOrder());
		int i = 0, j = 0, n = nums.length;
		while (j < n) {
			while (j < n && (mp.isEmpty() || (Math.abs(nums[j] - mp.firstKey()) <= 2 && Math.abs(nums[j] - mp.lastKey()) <= 2))) {
				mp.put(nums[j],mp.getOrDefault(nums[j],0) + 1);
				j++;
			}
			long cnt = j - i;
			ans = ans + ((cnt * (cnt + 1)) / 2);
			if (j == n) {
				break;
			}
			while (i < j && (Math.abs(nums[j] - mp.firstKey()) > 2 || Math.abs(nums[j] - mp.lastKey()) > 2)) {
				int val = mp.get(nums[i]);
				mp.put(nums[i],val - 1);
				if (val == 1) {
					mp.remove(nums[i]);
				}
				i++;
			}
			cnt = j - i;
			ans = ans - (((cnt) * ((cnt) + 1)) / 2);
		}
		return ans;
	}
}