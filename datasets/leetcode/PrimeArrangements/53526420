class Solution {
	long factorial(int n, int mod) {
		long factorial = 1;
		for (int i = 2; i <= n; i++) {
			factorial = (factorial * i) % mod;
		}
		return factorial;
	}
	int numPrimeArrangements(int n) {
		boolean[] isPrime = new boolean[n + 1];
		Arrays.fill(isPrime,true);
		isPrime[0] = isPrime[1] = false;
		for (int i = 2; i * i <= n; i++) {
			if (isPrime[i]) {
				for (int j = i * i; j <= n; j += i) {
					isPrime[j] = false;
				}
			}
		}
		int countPrimes = 0;
		for (int i = 2; i <= n; i++) {
			if (isPrime[i]) {
				countPrimes++;
			}
		}
		int countNonPrimes = n - countPrimes;
		int MOD = 1_000_000_007;
		long primeFactorial = factorial(countPrimes,MOD);
		long nonPrimeFactorial = factorial(countNonPrimes,MOD);
		long result = (primeFactorial * nonPrimeFactorial) % MOD;
		return (int) result;
	}
}