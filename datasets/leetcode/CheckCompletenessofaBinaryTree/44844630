class Solution {
	boolean CheckRowCompleteness(TreeNode root, int depth) {
		var queue = new LinkedList<TreeNode>();
		if (root != null) {
			queue.add(root);
		}
		depth--;
		while (!queue.isEmpty()) {
			int size = queue.size();
			for (int i = 0; i < size; i++) {
				TreeNode node = queue.poll();
				TreeNode next;
				if (depth != 1 && node.left != null && node.right == null) {
					return false;
				}
				if (node.left == null && node.right != null) {
					return false;
				}
				if (i < size - 1) {
					next = queue.peek();
					if ((node.left == null && node.right == null) && (next.left != null || next.right != null)) {
						return false;
					} 
					else if ((node.left != null && node.right == null) && (next.left != null || next.right != null)) {
						return false;
					}
				}
				if (node.left != null) {
					queue.add(node.left);
				}
				if (node.right != null) {
					queue.add(node.right);
				}
			}
			depth--;
		}
		return true;
	}
	int FindDepthAndCount(TreeNode root, int depth, int count) {
		if (root == null) {
			return depth;
		}
		count[0]++;
		return Math.max(FindDepthAndCount(root.left,depth + 1,count),FindDepthAndCount(root.right,depth + 1,count));
	}
	boolean isCompleteTree(TreeNode root) {
		int count = new int[1];
		int depth = FindDepthAndCount(root,0,count);
		if (Math.pow(2,depth) - 1 >= count[0] && Math.pow(2,depth - 1) - 1 < count[0]) {
			return CheckRowCompleteness(root,depth);
		} 
		else {
			return false;
		}
	}
}