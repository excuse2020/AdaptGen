class Solution {
	int findKthLargest(int[] nums, int k) {
		k = nums.length - k;
		return quickselect(nums,0,nums.length - 1,k);
	}
	int partition(int[] nums, int l, int r) {
		int pivot = nums[l + new Random().nextInt(r - l)];
		int i = l - 1, j = r + 1;
		while (true) {
			while (nums[--j] > pivot) {
			}
			while (nums[++i] < pivot) {
			}
			if (i >= j) {
				return j;
			}
			swap(nums,i,j);
		}
	}
	int quickselect(int[] nums, int l, int r, int k) {
		while (l < r) {
			int p = partition(nums,l,r);
			if (p >= k) {
				r = p;
			} 
			else {
				l = p + 1;
			}
		}
		return nums[k];
	}
	void swap(int[] nums, int i, int j) {
		int temp = nums[i];
		nums[i] = nums[j];
		nums[j] = temp;
	}
}