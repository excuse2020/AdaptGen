class Solution {
	void findIslandInWater(char[][] grid, int currRow, int currCol, int m, int n) {
		if (!isValidCell(currRow,currCol,m,n,grid)) {
			return;
		}
	}
	void findIslandInWaterUsingBFS(char[][] grid, int currRow, int currCol, int m, int n) {
		Queue<int[]> queue = new LinkedList<>();
		queue.add(new int{currRow, currCol});
		int[] currCell = queue.remove();
		int row = currCell[0];
		int col = currCell[1];
	}
	boolean isValidCell(int row, int col, int m, int n, char[][] grid) {
	}
	int numIslands(char[][] grid) {
		int ans = 0;
		int m = grid.length;
		int n = grid[0].length;
		int row = 0;
		int col = 0;
	}
}