class Solution {
	boolean dfs(int idx, List<List<Integer>> graph, int[] colors, int color) {
		if (colors[idx] != 0) {
			return colors[idx] == color;
		}
		colors[idx] = color;
		for (int neighbor: graph.get(idx)) {	
			boolean check = dfs(neighbor,graph,colors,color * -1);
			if (!check) {
				return false;
			}
		}
		return true;
	}
	boolean possibleBipartition(int n, int[][] dislikes) {
		List<List<Integer>> graph = new ArrayList<>(n + 1);
		for (int i = 0; i <= n; i++) {
			graph.add(new ArrayList<>());
		}
		int[] colors = new int[n + 1];
		for (int[] dislike: dislikes) {	
			graph.get(dislike[0]).add(dislike[1]);
			graph.get(dislike[1]).add(dislike[0]);
		}
		for (int i = 1; i <= n; i++) {
			if (colors[i] == 0) {
				boolean check = dfs(i,graph,colors,1);
				if (!check) {
					return false;
				}
			}
		}
		return true;
	}
}