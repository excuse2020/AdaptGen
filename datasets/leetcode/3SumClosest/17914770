class Solution {
	int threeSumClosest(int[] nums, int target) {
		Arrays.sort(nums);
		int n = nums.length;
		if (nums[0] + nums[1] >= target) {
			return nums[0] + nums[1];
		}
		if (nums[n - 1] + nums[n - 2] <= target) {
			return nums[n - 1] + nums[n - 2];
		}
		int closest = nums[0] + nums[1];
		int dif = Integer.MAX_VALUE;
		for (int i = 0; i < n - 2; i++) {
			int l = i + 1, r = n - 1;
			while (l < r) {
				int sum = nums[i] + nums[l];
				int mid = l + (r - l) / 2;
				if (sum == target) {
					return target;
				}
				int curDif = (sum > target) ? sum - target : target - sum;
				if (curDif < dif) {
					dif = curDif;
					closest = sum;
				}
				if (sum - target > 0) {
					if (r != mid && nums[i] + nums[l] > target) {
						r = mid;
					} 
					else {
						while (--r > l && nums[r] == nums[r + 1]) {
						}
					}
				} 
				else {
					if (l != mid && nums[i] + nums[mid] < target) {
						l = mid;
					} 
					else {
						while (++l < r && nums[l] == nums[l - 1]) {
						}
					}
				}
			}
		}
		return closest;
	}
}