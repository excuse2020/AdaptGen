class Solution {
	int[][] mergeArrays(int[][] nums1, int[][] nums2) {
		int[][] mergeArray = new int[nums1.length + nums2.length][2];
		int i = 0;
		for (i = 0; i < nums1.length; i++) {
			mergeArray[i][0] = nums1[i][0];
			mergeArray[i][1] = nums1[i][1];
		}
		for (int j = i, l = 0; j < nums1.length + nums2.length && l < nums2.length; j++, l++) {
			mergeArray[j][0] = nums2[l][0];
			mergeArray[j][1] = nums2[l][1];
		}
		Arrays.sort(mergeArray,(a, b) -> {a[0] - b[0]});
		Map<Integer, Integer> map = new TreeMap<>();
		for (i = 0; i < mergeArray.length; i++) {
			if (!map.containsKey(mergeArray[i][0])) {
				map.put(mergeArray[i][0],mergeArray[i][1]);
			} 
			else {
				map.put(mergeArray[i][0],map.get(mergeArray[i][0]) + mergeArray[i][1]);
			}
		}
		int len = map.size();
		int[][] result = new int[len][2];
		int k = 0;
		for (Map.Entry<Integer, Integer> entry: map.entrySet()) {	
			result[k][0] = entry.getKey();
			result[k][1] = entry.getValue();
			k++;
		}
		return result;
	}
}