class Solution {
	List<List<Integer>> getAncestors(int n, int[][] edges) {
		ArrayList<ArrayList<Integer>> adj = new ArrayList<>();
		ArrayList<TreeSet<Integer>> set = new ArrayList<>();
		List<List<Integer>> answer = new ArrayList<>();
		for (int i = 0; i < n; i++) {
			adj.add(new ArrayList<Integer>());
			set.add(new TreeSet<Integer>());
			answer.add(new ArrayList<Integer>());
		}
		for (int[] edge: edges) {	
			adj.get(edge[0]).add(edge[1]);
		}
		int[] indegree = new int[n];
		for (ArrayList<Integer> list: adj) {	
			for (int vertex: list) {	
				indegree[vertex]++;
			}
		}
		Queue<Integer> q = new LinkedList<>();
		for (int i = 0; i < n; i++) {
			if (indegree[i] == 0) {
				q.add(i);
			}
		}
		List<Integer> list = new ArrayList<>();
		while (!q.isEmpty()) {
			int node = q.poll();
			list.add(node);
			for (int it: adj.get(node)) {	
				indegree[it]--;
				if (indegree[it] == 0) {
					q.add(it);
				}
			}
		}
		for (int i = 0; i < n; i++) {
			int node = list.get(i);
			for (int neighbor: adj.get(node)) {	
				set.get(neighbor).add(node);
				for (int ancestor: set.get(node)) {	
					set.get(neighbor).add(ancestor);
				}
			}
		}
		for (int i = 0; i < n; i++) {
			for (int val: set.get(i)) {	
				answer.get(i).add(val);
			}
		}
		return answer;
	}
}