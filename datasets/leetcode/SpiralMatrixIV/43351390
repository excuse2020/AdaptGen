class Solution {
	int[][] spiralMatrix(int m, int n, ListNode head) {
		int[][] arr = new int[m][n];
		for (int[] dp: arr) {	
			Arrays.fill(dp,-1);
		}
		int top = 0;
		int bottom = m - 1;
		int left = 0;
		int right = n - 1;
		while (true) {
			for (int i = left; i <= right; i++) {
				arr[top][i] = head.val;
				head = head.next;
				if (head == null) {
					break;
				}
			}
			if (head == null) {
				break;
			}
			top++;
			if (top > bottom || left > right) {
				break;
			}
			for (int i = top; i <= bottom; i++) {
				arr[i][right] = head.val;
				head = head.next;
				if (head == null) {
					break;
				}
			}
			if (head == null) {
				break;
			}
			right--;
			if (top > bottom || left > right) {
				break;
			}
			for (int i = right; i >= left; i--) {
				arr[bottom][i] = head.val;
				head = head.next;
				if (head == null) {
					break;
				}
			}
			if (head == null) {
				break;
			}
			bottom--;
			if (top > bottom || left > right) {
				break;
			}
			for (int i = bottom; i >= top; i--) {
				arr[i][left] = head.val;
				head = head.next;
				if (head == null) {
					break;
				}
			}
			if (head == null) {
				break;
			}
			left++;
			if (top > bottom || left > right) {
				break;
			}
		}
		return arr;
	}
}