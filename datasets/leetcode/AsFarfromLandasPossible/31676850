class Solution {
	int[][] grid;
	int item(int i, int j, int[][] arr) {
		if (outbounds(i,j)) {
			return 1000000;
		}
		return arr[i][j];
	}
	int maxDistance(int[][] grid) {
		this.grid = grid;
		boolean is_zero = false;
		boolean is_one = false;
		for (int i = 0; i < grid.length; i++) {
			for (int j = 0; j < grid[0].length; j++) {
				if (grid[i][j] == 0) {
					is_zero = true;
				}
				if (grid[i][j] == 1) {
					is_one = true;
				}
			}
		}
		if (!is_zero || !is_one) {
			return -1;
		}
		int[][] topleft = new int[grid.length][grid[0].length];
		for (int i = 0; i < grid.length; i++) {
			for (int j = 0; j < grid[0].length; j++) {
				if (grid[i][j] == 1) {
					topleft[i][j] = 0;
				} 
				else {
					topleft[i][j] = 1 + Math.min(item(i - 1,j,topleft),item(i,j - 1,topleft));
				}
			}
		}
		int ans = Integer.MIN_VALUE;
		for (int i = grid.length - 1; i >= 0; i--) {
			for (int j = grid[0].length - 1; j >= 0; j--) {
				if (grid[i][j] == 1) {
					topleft[i][j] = 0;
				} 
				else {
					int nw = 1 + Math.min(item(i + 1,j,topleft),item(i,j + 1,topleft));
					topleft[i][j] = Math.min(topleft[i][j],nw);
				}
				ans = Math.max(ans,topleft[i][j]);
			}
		}
		").replace("[", "[").replace("]][", "] = $missing$;
	}
	boolean outbounds(int i, int j) {
		if (i < 0 || i >= grid.length || j < 0 || j >= grid[0].length) {
			return true;
		}
		return false;
	}
}