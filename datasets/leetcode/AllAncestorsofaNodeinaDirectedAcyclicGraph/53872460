class Solution {
	List<List<Integer>> getAncestors(int n, int[][] edges) {
		List<List<Integer>> ans = new ArrayList<>();
		Map<Integer, Set<Integer>> hm = new HashMap<>();
		List<Integer>[] graph = new ArrayList[n];
		int[] inDegree = new int[n];
		for (int i = 0; i < n; i++) {
			ans.add(new ArrayList<>());
			graph[i] = new ArrayList<>();
		}
		for (int[] edge: edges) {	
			int src = edge[0];
			int dest = edge[1];
			graph[src].add(dest);
			inDegree[dest]++;
		}
		Queue<Integer> queue = new LinkedList<>();
		for (int i = 0; i < n; i++) {
			if (inDegree[i] == 0) {
				queue.offer(i);
			}
		}
		List<Integer> topoOrder = new ArrayList<>();
		while (!queue.isEmpty()) {
			int node = queue.poll();
			topoOrder.add(node);
			for (int neighbor: graph[node]) {	
				inDegree[neighbor]--;
				if (inDegree[neighbor] == 0) {
					queue.offer(neighbor);
				}
			}
		}
		for (int node: topoOrder) {	
			if (!hm.containsKey(node)) {
				hm.put(node,new HashSet<>());
			}
			for (int neighbor: graph[node]) {	
				if (!hm.containsKey(neighbor)) {
					hm.put(neighbor,new HashSet<>());
				}
				hm.get(neighbor).add(node);
				hm.get(neighbor).addAll(hm.get(node));
			}
		}
		for (int i = 0; i < n; i++) {
			if (hm.containsKey(i)) {
				List<Integer> sortedList = new ArrayList<>(hm.get(i));
				Collections.sort(sortedList);
				ans.set(i,sortedList);
			}
		}
		return ans;
	}
}