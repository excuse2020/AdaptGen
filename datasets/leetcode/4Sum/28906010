class Solution {
	int BinarySearch(int[] arr, int start, int end, int target) {
		while (start <= end) {
			int mid = start + ((end - start) / 2);
			if (arr[mid] == target) {
				return mid;
			} 
			else if (arr[mid] > target) {
				end = mid - 1;
			} 
			else {
				start = mid + 1;
			}
		}
		return -1;
	}
	List<List<Integer>> fourSum(int[] nums, int target) {
		Set<List<Integer>> result = new HashSet<>();
		Arrays.sort(nums);
		for (int i = 0; i < nums.length - 2; i++) {
			for (int j = i + 1; j < nums.length - 1; j++) {
				for (int k = j + 1; k < nums.length; k++) {
					int sum = nums[i] + nums[j];
					int req = target - sum;
					if (BinarySearch(nums,k + 1,nums.length - 1,req) != -1) {
						List<Integer> list = new ArrayList<>();
						list.add(nums[i]);
						list.add(nums[j]);
						list.add(nums[k]);
						list.add(nums[BinarySearch(nums,k + 1,nums.length - 1,req)]);
						result.add(list);
					}
				}
			}
		}
		return new ArrayList<>(result);
	}
}