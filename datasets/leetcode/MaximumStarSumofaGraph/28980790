class Solution {
	int bfs(int vals, ArrayList<ArrayList<Integer>> adj, int sv, int k) {
		PriorityQueue<Integer> pq = new PriorityQueue<>();
		int sum = vals[sv];
		for (int i: adj.get(sv)) {	
			pq.add(vals[i]);
			if (pq.size() > k) {
				pq.remove();
			}
		}
		while (pq.size() > 0) {
			sum = Math.max(sum + pq.peek(),sum);
			pq.remove();
		}
		return sum;
	}
	int maxStarSum(int[] vals, int[][] edges, int k) {
		ArrayList<ArrayList<Integer>> adj = new ArrayList<>();
		for (int i = 0; i < vals.length; i++) {
			adj.add(new ArrayList<Integer>());
		}
		for (int i = 0; i < edges.length; i++) {
			int sv = edges[i][0];
			int ev = edges[i][1];
			adj.get(sv).add(ev);
			adj.get(ev).add(sv);
		}
		int ans = Integer.MIN_VALUE;
		for (int i = 0; i < vals.length; i++) {
			ans = Math.max(ans,bfs(vals,adj,i,k));
		}
		return ans;
	}
}