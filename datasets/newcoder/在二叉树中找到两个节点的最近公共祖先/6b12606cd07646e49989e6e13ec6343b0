class Solution {
	int lowestCommonAncestor(TreeNode root, int o1, int o2) {
		Map<Integer, Integer> parent = new HashMap<>();
		Queue<TreeNode> que = new LinkedList<>();
		parent.put(root.val,Integer.MIN_VALUE);
		que.add(root);
		while (!parent.containsKey(o1) || !parent.containsKey(o2)) {
			TreeNode node = que.poll();
			if (node.left != null) {
				parent.put(node.left.val,node.val);
				que.add(node.left);
			}
			if (node.right != null) {
				parent.put(node.right.val,node.val);
				que.add(node.right);
			}
		}
		Set<Integer> ancestor = new HashSet<>();
		while (parent.containsKey(o1)) {
			ancestor.add(o1);
			o1 = parent.get(o1);
		}
		while (!ancestor.contains(o2)) {
			o2 = parent.get(o2);
		}
		return o2;
	}
}