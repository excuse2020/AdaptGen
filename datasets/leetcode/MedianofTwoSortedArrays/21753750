class Solution {
	double findMedianSortedArrays(int[] a, int[] b) {
		if (a.length > b.length) {
			return findMedianSortedArrays(b,a);
		}
		int low = 0;
		int high = a.length;
		while (low <= high) {
			int cut1 = (low + high) / 2;
			int cut2 = (a.length + b.length) / 2 - cut1;
			int left1 = (cut1 == 0 ? Integer.MIN_VALUE : a[cut1 - 1]);
			int left2 = (cut2 == 0 ? Integer.MIN_VALUE : b[cut2 - 1]);
			int right1 = (cut1 == a.length ? Integer.MAX_VALUE : a[cut1]);
			int right2 = (cut2 == b.length ? Integer.MAX_VALUE : b[cut2]);
			if (left1 <= right2 && left2 <= right1) {
				if ((a.length + b.length) % 2 == 0) {
					return (double) (Math.max(left1,left2) + Math.min(right1,right2)) / 2.0;
				} 
				else {
					return (double) Math.max(left1,left2);
				}
			} 
			else if (left1 > right2) {
				high = cut1 - 1;
			} 
			else {
				low = cut1 + 1;
			}
		}
		return 0.0;
	}
}