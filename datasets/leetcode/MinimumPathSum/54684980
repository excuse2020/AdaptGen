class Solution {
	int minPathSum(int[][] grid) {
		int m = grid.length;
		int n = grid[0].length;
		int[][] memo = new int[m][n];
		for (int i = 0; i < m; i++) {
			for (int j = 0; j < n; j++) {
				memo[i][j] = -1;
			}
		}
		return minPathSumUtil(grid,m - 1,n - 1,memo);
	}
	int minPathSumUtil(int[][] grid, int i, int j, int[][] memo) {
		if (i < 0 || j < 0) {
			return Integer.MAX_VALUE;
		}
		if (i == 0 && j == 0) {
			return grid[0][0];
		}
		if (memo[i][j] != -1) {
			return memo[i][j];
		}
		int up = minPathSumUtil(grid,i - 1,j,memo);
		int left = minPathSumUtil(grid,i,j - 1,memo);
		memo[i][j] = grid[i][j] + Math.min(up,left);
		return memo[i][j];
	}
}