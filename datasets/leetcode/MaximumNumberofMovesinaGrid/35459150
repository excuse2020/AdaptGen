class Solution {
	boolean isValid(int row, int col, int currentVal, int[][] grid, int n, int m) {
		if (row < 0 || col < 0 || row >= m || col >= n || grid[row][col] <= currentVal) {
			return false;
		}
		return true;
	}
	int maxMoves(int[][] grid) {
		int m = grid.length, n = grid[0].length, ans = 0;
		int visited = new int[m][n];
		for (int row = 0; row < m; row++) {
			visited[row][0] = 1;
		}
		for (int col = 0; col < n; col++) {
			for (int row = 0; row < m; row++) {
				if (isValid(row - 1,col + 1,grid[row][col],grid,n,m) && visited[row][col] == 1) {
					visited[row - 1][col + 1] = 1;
				}
				if (isValid(row,col + 1,grid[row][col],grid,n,m) && visited[row][col] == 1) {
					visited[row][col + 1] = 1;
				}
				if (isValid(row + 1,col + 1,grid[row][col],grid,n,m) && visited[row][col] == 1) {
					visited[row + 1][col + 1] = 1;
				}
			}
		}
		for (int col = 1; col < n; col++) {
			int cnt = 0;
			for (int row = 0; row < m; row++) {
				if (visited[row][col] == 1) {
					cnt = 1;
				}
			}
			if (cnt == 0) {
				break;
			}
			ans += cnt;
		}
		return ans;
	}
}