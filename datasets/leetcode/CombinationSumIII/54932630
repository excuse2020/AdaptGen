class Solution {
	void backtrack(List<List<Integer>> result, List<Integer> tempList, int k, int n, int start) {
		if (tempList.size() == k) {
			if (n == 0) {
				result.add(new ArrayList<>(tempList));
			}
			return;
		}
		for (int i = start; i <= 9; i++) {
			tempList.add(i);
			backtrack(result,tempList,k,n - i,i + 1);
			tempList.remove(tempList.size() - 1);
		}
	}
	List<List<Integer>> combinationSum3(int k, int n) {
		List<List<Integer>> result = new ArrayList<>();
		backtrack(result,new ArrayList<>(),k,n,1);
		return result;
	}
}