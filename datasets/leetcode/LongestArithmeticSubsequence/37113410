class Solution {
	int helper(int index, int diff, int[] nums) {
		if (index < 0) {
			return 0;
		}
		int ans = 0;
		for (int j = index - 1; j >= 0; j--) {
			if ((nums[index] - nums[j]) == diff) {
				ans = Math.max(ans,1 + helper(j,diff,nums));
			}
		}
		return ans;
	}
	int helperTab(int[] nums) {
		int n = nums.length;
		if (n <= 2) {
			return n;
		}
		int ans = 0;
		Map<Integer, Integer>[] dp = new HashMap[n];
		for (int i = 0; i < n; i++) {
			dp[i] = new HashMap<>();
		}
		for (int i = 1; i < n; i++) {
			for (int j = 0; j < i; j++) {
				int diff = nums[i] - nums[j];
				int count = 1;
				dp[i].put(diff,dp[j].getOrDefault(diff,1) + 1);
				ans = Math.max(ans,dp[i].get(diff));
			}
		}
		return ans;
	}
	int longestArithSeqLength(int[] nums) {
		return helperTab(nums);
	}
}