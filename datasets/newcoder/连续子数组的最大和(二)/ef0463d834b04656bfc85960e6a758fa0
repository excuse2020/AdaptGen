class Solution {
	int[] FindGreatestSumOfSubArray(int[] array) {
		int[][] dp = new int[array.length][3];
		dp[0][0] = array[0];
		dp[0][1] = 0;
		dp[0][2] = 0;
		int left = 0;
		int right = 0;
		int res = array[0];
		for (int i = 1; i < array.length; i++) {
			if (dp[i - 1][0] >= 0) {
				dp[i][0] = dp[i - 1][0] + array[i];
				dp[i][1] = dp[i - 1][1];
				dp[i][2] = i;
			} 
			else {
				dp[i][0] = array[i];
				dp[i][1] = i;
				dp[i][2] = i;
			}
			res = Math.max(res,dp[i][0]);
		}
		int len = 0;
		for (int i = 0; i < array.length; i++) {
			if (dp[i][0] == res && (dp[i][2] - dp[i][1] + 1) > len) {
				left = dp[i][1];
				right = dp[i][2];
			}
		}
		int[] nums = new int[right - left + 1];
		int cur = 0;
		for (int i = left; i <= right; i++) {
			nums[cur++] = array[i];
		}
		return nums;
	}
}