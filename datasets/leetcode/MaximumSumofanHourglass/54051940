class Solution {
	int findSum(int[][] grid, int start, int end, int btStart) {
		return grid[btStart][start] + grid[btStart][start + 1];
	}
	int maxSum(int[][] grid) {
		int m = grid.length;
		int n = grid[0].length;
		if (m < 3) {
			return 0;
		}
		int start = 0;
		int end = 2;
		int btStart = 0;
		int btEnd = 2;
		int sMax = n - 1;
		int bMax = m - 1;
		int currSum = 0, maxSum = Integer.MIN_VALUE;
		while (true) {
			currSum = findSum(grid,start,end,btStart);
			if (currSum > maxSum) {
				maxSum = currSum;
			}
			if ((end != sMax && btEnd != bMax) || (end != sMax && btEnd == bMax)) {
				start++;
				end++;
			} 
			else if (end == sMax && btEnd != bMax) {
				end = 2;
				btStart++;
				start = 0;
				btEnd++;
			} 
			else if (end == sMax && btEnd == bMax) {
				break;
			}
		}
		return maxSum;
	}
}