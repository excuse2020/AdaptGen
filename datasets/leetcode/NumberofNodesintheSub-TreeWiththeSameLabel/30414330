class Solution {
	int[] countSubTrees(int n, int[][] edges, String labels) {
		List<List<Integer>> adjList = new ArrayList<>();
		boolean visited = new boolean[n];
		int edgesLength = edges.length;
		int result = new int[n];
		Arrays.fill(result,1);
		for (int i = 0; i < n; i++) {
			adjList.add(new ArrayList<>());
		}
		for (int i = 0; i < edgesLength; i++) {
			List<Integer> crrList = adjList.get(edges[i][0]);
			crrList.add(edges[i][1]);
			crrList = adjList.get(edges[i][1]);
			crrList.add(edges[i][0]);
		}
		getSubTreeSameLabel(adjList,0,result,labels,visited);
		return result;
	}
	int[] getSubTreeSameLabel(List<List<Integer>> adjList, int node, int result, String labels, boolean visited) {
		int adjSize = adjList.get(node).size();
		char nodeChar = labels.charAt(node);
		int count = new int[26];
		visited[node] = true;
	}
}