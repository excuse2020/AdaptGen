class SolutionJZ27 {
	ArrayList<String> Permutation(String str) {
		Set<String> res = new LinkedHashSet<>(10);
		if (str.length() == 0) {
			return null;
		}
		char[] arr = str.toCharArray();
		Arrays.sort(arr);
		str = new String(arr);
		res.add(str);
		while (true) {
			str = dicSortNext(str);
			if ("finished".equals(str)) {
				break;
			} 
			else {
				res.add(str);
			}
		}
		ArrayList<String> result = new ArrayList<>(res);
		return result;
	}
	String dicSortNext(String str) {
		char[] arr = str.toCharArray();
		int len = str.length();
		int i = len - 2;
		while (i >= 0 && arr[i] >= arr[i + 1]) {
			i--;
		}
		if (i == -1) {
			return "finished";
		}
		int j = len - 1;
		while (j >= 0 && arr[j] <= arr[i]) {
			j--;
		}
		char tmp = arr[i];
		arr[i] = arr[j];
		arr[j] = tmp;
		for (int a = i + 1, b = len - 1; a < b; a++, b--) {
			tmp = arr[a];
			arr[a] = arr[b];
			arr[b] = tmp;
		}
		return new String(arr);
	}
}