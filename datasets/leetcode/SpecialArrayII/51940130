class Solution {
	int bSearch(List<Integer> list, int target) {
		int start = 0, end = list.size() - 1;
		while (start <= end) {
			int mid = start + (end - start) / 2;
			if (list.get(mid) == target) {
				return mid;
			}
			if (list.get(mid) > target) {
				end = mid - 1;
			} 
			else {
				start = mid + 1;
			}
		}
		return end;
	}
	boolean[] isArraySpecial(int[] nums, int[][] queries) {
		int n = nums.length, m = queries.length;
		boolean[] res = new boolean[m];
		int start = 0, end = 1;
		List<Integer> s = new ArrayList<>();
		List<Integer> e = new ArrayList<>();
		for (; end < n; ++end) {
			if (nums[end] % 2 == nums[end - 1] % 2) {
				s.add(start);
				e.add(end - 1);
				start = end;
			}
			if (end == n - 1 && nums[end] % 2 != nums[end - 1] % 2) {
				s.add(start);
				e.add(end);
			}
		}
		for (int i = 0; i < m; ++i) {
			if (queries[i][0] == queries[i][1]) {
				res[i] = true;
				continue;
			}
			int idx = bSearch(s,queries[i][0]);
			if (e.get(idx) >= queries[i][1]) {
				res[i] = true;
			}
		}
		return res;
	}
	boolean isSpecial(int[] nums, int start, int end) {
		for (int i = start + 1; i <= end; ++i) {
			if (nums[i] % 2 == nums[i - 1] % 2) {
				return false;
			}
		}
		return true;
	}
}