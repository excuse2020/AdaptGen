class Solution {
	int numberOfSubarrays(int[] nums, int k) {
		int n = nums.length;
		int[] left_even = new int[n];
		int[] right_even = new int[n];
		preprocess(nums,left_even,right_even);
		int sol = 0;
		int currentOdd = 0;
		int start = 0;
		int i = 0;
		while (start < n && i < n) {
			if (nums[start] % 2 == 0) {
				start++;
				continue;
			}
			if (nums[i] % 2 != 0) {
				currentOdd++;
			}
			if (currentOdd == k) {
				int left = start - 1 >= 0 ? left_even[start - 1] : 0;
				int right = i + 1 < n ? right_even[i + 1] : 0;
				sol = sol + (left + 1) * (right + 1);
				start++;
				currentOdd--;
			}
			i++;
		}
		return sol;
	}
	void preprocess(int[] nums, int[] left_even, int[] right_even) {
		int n = nums.length;
		int count = 0;
		for (int i = 0; i < n; i++) {
			count++;
			if (nums[i] % 2 == 0) {
				left_even[i] = count;
			} 
			else {
				count = 0;
				left_even[i] = 0;
			}
		}
		count = 0;
		for (int i = n - 1; i >= 0; i--) {
			count++;
			if (nums[i] % 2 == 0) {
				right_even[i] = count;
			} 
			else {
				count = 0;
				right_even[i] = 0;
			}
		}
	}
}