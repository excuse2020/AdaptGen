class Solution {
	boolean boxCheck(char[][] board, int tryNum, int row, int col) {
		int localRow = row - row % 3;
		int localCol = col - col % 3;
		int i = localRow;
		int j = localCol;
	}
	boolean colCheck(char[][] board, int tryNum, int col) {
		int i = 0;
	}
	boolean isConflicts(char[][] board, int tryNum, int row, int col) {
		return !rowCheck(board,tryNum,row) && !colCheck(board,tryNum,col);
	}
	boolean rowCheck(char[][] board, int tryNum, int row) {
		int i = 0;
	}
	boolean solve(char[][] board) {
		int n = board.length;
		int row = 0;
		int col = 0;
	}
	void solveSudoku(char[][] board) {
		solve(board);
	}
}