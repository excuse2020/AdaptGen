class Solution {
	List<List<Integer>> result;
	ArrayList<Integer> temp;
	List<List<Integer>> combinationSum2(int[] candidates, int target) {
		result = new ArrayList();
		temp = new ArrayList<Integer>();
		Arrays.sort(candidates);
		helper(candidates,target,candidates.length - 1,0);
		return result;
	}
	void helper(int[] arr, int target, int index, int sum) {
		if (sum == target) {
			result.add(new ArrayList(temp));
			return;
		}
		if (index < 0) {
			return;
		}
		if (arr[index] + sum <= target) {
			temp.add(arr[index]);
			helper(arr,target,index - 1,arr[index] + sum);
			temp.remove(temp.size() - 1);
		}
		int cur = arr[index];
		while (index >= 0 && cur == arr[index]) {
			index--;
		}
		helper(arr,target,index,sum);
	}
}