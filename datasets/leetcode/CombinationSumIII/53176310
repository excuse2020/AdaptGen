class Solution {
	List<List<Integer>> combinationSum3(int k, int n) {
		int[] arr = new int[9];
		for (int i = 0; i < arr.length; i++) {
			arr[i] = i + 1;
		}
		List<List<Integer>> ans = new ArrayList();
		find(0,ans,arr,k,n,new ArrayList());
		return ans;
	}
	void find(int index, List<List<Integer>> ans, int[] arr, int k, int target, List<Integer> ds) {
		if (target == 0 && k == 0) {
			ans.add(new ArrayList<>(ds));
		}
		if (index == arr.length || k < 0 || target < 0) {
			return;
		}
		for (int i = index; i < arr.length; i++) {
			if (arr[i] > target) {
				break;
			}
			ds.add(arr[i]);
			find(i + 1,ans,arr,k - 1,target - arr[i],ds);
			ds.remove(ds.size() - 1);
		}
	}
}