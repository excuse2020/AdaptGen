class Solution {
	boolean canReplaceToQuestionMark(char[] targetChar, int position, char[] stampChar) {
		int i = 0;
	}
	int[] movesToStamp(String stamp, String target) {
		char[] targetChar = target.toCharArray();
		char[] stampChar = stamp.toCharArray();
		int count = 0;
		boolean[] visited = new boolean[targetChar.length];
		List<Integer> resultLst = new ArrayList<>();
		while (count != targetChar.length) {
			boolean didChangeToQuestionMark = false;
			for (int i = 0; i <= targetChar.length - stampChar.length; i++) {
				if (!visited[i] && canReplaceToQuestionMark(targetChar,i,stampChar)) {
					count = replace(targetChar,i,stampChar.length,count);
					visited[i] = true;
					didChangeToQuestionMark = true;
					resultLst.add(i);
					if (count == targetChar.length) {
						break;
					}
				}
			}
			if (!didChangeToQuestionMark) {
				return new int[0];
			}
		}
		int[] result = new int[resultLst.size()];
		int j = 0;
		for (int i = resultLst.size() - 1; i >= 0; i--) {
			result[j++] = resultLst.get(i);
		}
		return result;
	}
	int replace(char[] targetChar, int position, int length, int count) {
		int i = 0;
	}
}