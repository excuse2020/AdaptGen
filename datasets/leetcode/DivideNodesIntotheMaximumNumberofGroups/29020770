class Solution {
	int bfs(int start, List<List<Integer>> adj, int[] visited, int count, int n) {
		Queue<Integer> q = new LinkedList<>();
		visited[start] = count;
		int ans = 1;
		int[] group = new int[n + 1];
		q.add(start);
		group[start] = 1;
		while (!q.isEmpty()) {
			int node = q.remove();
			for (int adjN: adj.get(node)) {	
				if (group[adjN] == 0) {
					visited[adjN] = count;
					group[adjN] = group[node] + 1;
					q.add(adjN);
					ans = Math.max(ans,group[adjN]);
				} 
				else if (Math.abs(group[adjN] - group[node]) != 1) {
					return -1;
				}
			}
		}
		return ans;
	}
	int magnificentSets(int n, int[][] edges) {
		List<List<Integer>> adj = new ArrayList<>();
		int[] visited = new int[n + 1];
		Arrays.fill(visited,-1);
		for (int i = 0; i <= n; i++) {
			adj.add(new ArrayList<>());
		}
		for (int i = 0; i < edges.length; i++) {
			adj.get(edges[i][0]).add(edges[i][1]);
			adj.get(edges[i][1]).add(edges[i][0]);
		}
		int[] comp = new int[n + 1];
		int count = -1, ans = 0;
		for (int i = 1; i <= n; i++) {
			if (visited[i] == -1) {
				count++;
				comp[count] = bfs(i,adj,visited,count,n);
				if (comp[count] == -1) {
					return -1;
				}
			} 
			else {
				comp[visited[i]] = Math.max(comp[visited[i]],bfs(i,adj,visited,visited[i],n));
			}
		}
		for (int group: comp) {	
			ans += group;
		}
		return ans;
	}
}