class Solution {
	boolean checkIfLegal(List<List<Integer>> graph, int x, int y) {
		for (int val: graph.get(x)) {	
			if (val == y) {
				return false;
			}
		}
		return true;
	}
	boolean isPossible(int n, List<List<Integer>> edges) {
		int[] noe = new int[n + 1];
		List<List<Integer>> graph = new ArrayList<>();
		for (int i = 0; i <= n; i++) {
			graph.add(new ArrayList<>());
		}
		for (List<Integer> c: edges) {	
			int x = c.get(0);
			int y = c.get(1);
			graph.get(x).add(y);
			graph.get(y).add(x);
			noe[x]++;
			noe[y]++;
		}
		List<Integer> list = new ArrayList<>();
		for (int i = 0; i < noe.length; i++) {
			if (noe[i] % 2 == 1) {
				list.add(i);
			}
		}
		int odd = list.size();
		if (odd == 0) {
			return true;
		} 
		else if (odd > 4 || odd == 1 || odd == 3) {
			return false;
		} 
		else if (odd == 4) {
			int node1 = list.get(0);
			int node2 = list.get(1);
			int node3 = list.get(2);
			int node4 = list.get(3);
			if (checkIfLegal(graph,node1,node2) && checkIfLegal(graph,node3,node4)) {
				return true;
			}
			if (checkIfLegal(graph,node1,node3) && checkIfLegal(graph,node2,node4)) {
				return true;
			}
			if (checkIfLegal(graph,node1,node4) && checkIfLegal(graph,node2,node3)) {
				return true;
			}
		} 
		else if (odd == 2) {
			int x = list.get(0);
			int y = list.get(1);
			if (checkIfLegal(graph,y,x)) {
				return true;
			}
			for (int i = 1; i < noe.length; i++) {
				if (i == x || i == y) {
					continue;
				}
				if (checkIfLegal(graph,i,x) && checkIfLegal(graph,i,y)) {
					return true;
				}
			}
		}
		return false;
	}
}