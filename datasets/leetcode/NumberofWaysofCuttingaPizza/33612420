class Solution {
	int m, n;
	String[] pizza;
	int ways;
	void dfs(int rs, int re, int cs, int ce, int k) {
		if (k == 1) {
			ways++;
			return;
		}
		for (int i = rs; i <= re; i++) {
			if (isApplePresent(rs,i,cs,ce) && isApplePresent(i + 1,re,cs,ce)) {
				dfs(i + 1,re,cs,ce,k - 1);
			}
		}
		for (int j = cs; j <= ce; j++) {
			if (isApplePresent(rs,re,cs,j) && isApplePresent(rs,re,j + 1,ce)) {
				dfs(rs,re,j + 1,ce,k - 1);
			}
		}
	}
	boolean isApplePresent(int rs, int re, int cs, int ce) {
		int i = rs;
		int j = cs;
	}
	int ways(String[] pizza, int k) {
		this.pizza = pizza;
		m = pizza.length;
		n = pizza[0].length();
		dfs(0,m - 1,0,n - 1,k);
		return ways;
	}
}