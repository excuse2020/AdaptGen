class Solution {
	int down = 0;
	int left = 0;
	int right = 0;
	int up = 0;
	void add(int[][] mat, ListNode head) {
		if (left > right || up > down) {
			return;
		}
		int i = up;
		int j = left;
		while (j <= right) {
			if (head == null) {
				mat[i][j] = -1;
			} 
			else {
				mat[i][j] = head.val;
				head = head.next;
			}
			j++;
		}
		up++;
		j = right;
		i = up;
		if (left > right || up > down) {
			return;
		}
		while (i <= down) {
			if (head == null) {
				mat[i][j] = -1;
			} 
			else {
				mat[i][j] = head.val;
				head = head.next;
			}
			i++;
		}
		right--;
		i = down;
		j = right;
		if (left > right || up > down) {
			return;
		}
		while (j >= left) {
			if (head == null) {
				mat[i][j] = -1;
			} 
			else {
				mat[i][j] = head.val;
				head = head.next;
			}
			j--;
		}
		down--;
		i = down;
		j = left;
		if (left > right || up > down) {
			return;
		}
		while (i >= up) {
			if (head == null) {
				mat[i][j] = -1;
			} 
			else {
				mat[i][j] = head.val;
				head = head.next;
			}
			i--;
		}
		left++;
		add(mat,head);
	}
	int[][] spiralMatrix(int n, int m, ListNode head) {
		left = 0;
		right = m - 1;
		up = 0;
		down = n - 1;
		int[][] mat = new int[n][m];
		add(mat,head);
		return mat;
	}
}