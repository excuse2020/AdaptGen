class Solution {
	TreeNode buildTree(int[] inorder, int[] postorder) {
		return buildTreeHelper(postorder,0,postorder.length - 1,inorder,0,inorder.length - 1);
	}
	TreeNode buildTreeHelper(int[] postorder, int postStart, int postEnd, int[] inorder, int inStart, int inEnd) {
		if (postStart > postEnd || inStart > inEnd) {
			return null;
		}
		TreeNode root = new TreeNode(postorder[postEnd]);
		int index = inStart;
		while (index <= inEnd) {
			if (inorder[index] == postorder[postEnd]) {
				break;
			}
			index++;
		}
		root.left = buildTreeHelper(postorder,postStart,postStart + (index - inStart) - 1,inorder,inStart,index - 1);
		root.right = buildTreeHelper(postorder,postStart + (index - inStart),postEnd - 1,inorder,index + 1,inEnd);
		return root;
	}
}