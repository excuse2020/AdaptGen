class Solution {
	int ans = -1;
	boolean dfs(int n, ArrayList<ArrayList<Integer>> adj, HashSet<Integer> vis, HashSet<Integer> pv, HashSet<Integer> pp, int p) {
		pp.add(n);
		vis.add(n);
		pv.add(n);
		for (int it: adj.get(n)) {	
			if (!vis.contains(it)) {
				if (dfs(it,adj,vis,pv,pp,p)) {
					System.out.println(pv.size());
					if (pv.contains(it) == false) {
						ans = Math.max(pp.size() - pv.size(),ans);
					} 
					else {
						pv.remove(it);
					}
					return true;
				}
			} 
			else if (pv.contains(it)) {
				if (it == p) {
					ans = Math.max(ans,pv.size());
				}
				pv.remove(it);
				return true;
			}
		}
		pv.remove(n);
		return false;
	}
	int longestCycle(int[] edges) {
		ArrayList<ArrayList<Integer>> adj = new ArrayList<>();
		for (int i = 0; i < edges.length; i++) {
			adj.add(new ArrayList<>());
		}
		for (int i = 0; i < edges.length; i++) {
			if (edges[i] == -1) {
				continue;
			}
			adj.get(i).add(edges[i]);
		}
		HashSet<Integer> vis = new HashSet<>();
		for (int i = 0; i < edges.length; i++) {
			if (vis.contains(i)) {
				continue;
			}
			System.out.println(vis.size());
			HashSet<Integer> pv = new HashSet<>();
			HashSet<Integer> pp = new HashSet<>();
			if (dfs(i,adj,vis,pv,pp,i)) {
				if (ans == -1) {
					ans = Math.max(ans,pp.size());
				}
			}
		}
		System.out.println(adj);
		return ans;
	}
}