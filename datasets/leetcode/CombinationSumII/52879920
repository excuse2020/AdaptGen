class Solution {
	List<List<Integer>> combinationSum2(int[] candidates, int target) {
		Arrays.sort(candidates);
		List<List<Integer>> ans = new ArrayList<>();
		combinationSumHelper(candidates,target,0,ans,new ArrayList<>());
		return ans;
	}
	void combinationSumHelper(int[] cands, int target, int index, List<List<Integer>> ans, List<Integer> arr) {
		if (target == 0) {
			ans.add(new ArrayList<>(arr));
			return;
		}
		if (index >= cands.length || cands[index] > target) {
			return;
		}
		arr.add(cands[index]);
		combinationSumHelper(cands,target - cands[index],index + 1,ans,arr);
		arr.remove(arr.size() - 1);
		while (index + 1 < cands.length && cands[index] == cands[index + 1]) {
			index++;
		}
		combinationSumHelper(cands,target,index + 1,ans,arr);
	}
}