class Solution {
	int f(int i, int j, int n, List<List<Integer>> grid, int dp) {
		if (i < 0 || j < 0 || j > n - 1) {
			return (int) 1e8;
		}
		if (i == n - 1) {
			return grid.get(i).get(j);
		}
		if (dp[i][j] != -1) {
			return dp[i][j];
		}
		int left = grid.get(i).get(j) + f(i + 1,j + 1,n,grid,dp);
		int right = grid.get(i).get(j) + f(i + 1,j,n,grid,dp);
		return dp[i][j] = Math.min(left,right);
	}
	int minimumTotal(List<List<Integer>> triangle) {
		int n = triangle.size();
		int dp = new int[n][n];
		for (int row: dp) {	
			Arrays.fill(row,-1);
		}
		return f(0,0,n,triangle,dp);
	}
}