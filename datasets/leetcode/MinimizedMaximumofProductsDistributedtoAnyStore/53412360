class Solution {
	boolean isPossible(int maxPossibleSizeOfEachStore, int n, int[] quantities) {
		int requiredStores = 0;
		for (int quantity: quantities) {	
			requiredStores += (quantity + maxPossibleSizeOfEachStore - 1) / maxPossibleSizeOfEachStore;
			if (requiredStores > n) {
				return false;
			}
		}
		return true;
	}
	int minimizedMaximum(int n, int[] quantities) {
		int l = 1;
		int r = Arrays.stream(quantities).max().getAsInt();
		while (l < r) {
			int mid = l + (r - l) / 2;
			if (isPossible(mid,n,quantities)) {
				r = mid;
			} 
			else {
				l = mid + 1;
			}
		}
		return l;
	}
}