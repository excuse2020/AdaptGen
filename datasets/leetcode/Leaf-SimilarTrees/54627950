class Solution {
	List<Integer> checkTree1(TreeNode root, List<Integer> list) {
		if (root == null) {
			return null;
		}
		checkTree1(root.left,list);
		if (root.left == null && root.right == null) {
			list.add(root.val);
		}
		checkTree1(root.right,list);
		return list;
	}
	List<Integer> checkTree2(TreeNode root, List<Integer> list) {
		if (root == null) {
			return null;
		}
		checkTree2(root.left,list);
		if (root.left == null && root.right == null) {
			list.add(root.val);
		}
		checkTree2(root.right,list);
		return list;
	}
	boolean leafSimilar(TreeNode root1, TreeNode root2) {
		if (root1 == null && root2 == null) {
			return true;
		}
		List<Integer> list1 = new ArrayList<>();
		List<Integer> list2 = new ArrayList<>();
		list1 = checkTree1(root1,list1);
		list2 = checkTree1(root2,list2);
		if (list1.equals(list2)) {
			return true;
		} 
		else {
			return false;
		}
	}
}