class Solution {
	int maxLength = 0;
	void backTrack(int[][] matrix, int i, int j, int length) {
		if (++length > maxLength) {
			maxLength = length;
		}
		int m = matrix.length;
		int n = matrix[0].length;
		if ((j + 1 < n) && (matrix[i][j] < matrix[i][j + 1])) {
			maxLength = Math.max(length,maxLength);
			backTrack(matrix,i,j + 1,length);
		}
		if (i + 1 < m && matrix[i][j] < matrix[i + 1][j]) {
			maxLength = Math.max(length,maxLength);
			backTrack(matrix,i + 1,j,length);
		}
		if (j - 1 >= 0 && matrix[i][j] < matrix[i][j - 1]) {
			maxLength = Math.max(length,maxLength);
			backTrack(matrix,i,j - 1,length);
		}
		if (i - 1 >= 0 && matrix[i][j] < matrix[i - 1][j]) {
			maxLength = Math.max(length,maxLength);
			backTrack(matrix,i - 1,j,length);
		}
	}
	int solve(int[][] matrix) {
		int m = matrix.length;
		if (m == 0) {
			return 0;
		}
		int n = matrix[0].length;
		int length = 0;
		for (int i = 0; i < m; i++) {
			for (int j = 0; j < n; j++) {
				backTrack(matrix,i,j,0);
			}
		}
		return maxLength;
	}
}