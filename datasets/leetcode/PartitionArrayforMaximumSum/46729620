class Solution {
	int maxSumAfterPartitioning(int[] arr, int k) {
		return recursion(arr,0,arr.length,k,new int[arr.length]);
	}
	int recursion(int[] arr, int index, int n, int k, int[] dp) {
		if (index >= n) {
			return 0;
		}
		if (dp[index] != 0) {
			return dp[index];
		}
		int max = 0;
		for (int i = index; i < n && i < index + k; i++) {
			max = Math.max(max,arr[i]);
			dp[index] = Math.max(dp[index],max * (i - index + 1) + recursion(arr,i + 1,n,k,dp));
		}
		return dp[index];
	}
}