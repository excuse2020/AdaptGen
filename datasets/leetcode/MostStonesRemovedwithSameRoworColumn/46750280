class Solution {
	int find_parent(int x, int[] parent) {
		if (x == parent[x]) {
			return x;
		} 
		else {
			return parent[x] = find_parent(parent[x],parent);
		}
	}
	int removeStones(int[][] stones) {
		int[] parent = new int[stones.length];
		int[] rank = new int[stones.length];
		int result = 0;
		for (int i = 0; i < stones.length; i++) {
			parent[i] = i;
			rank[i] = 1;
		}
		for (int i = 0; i < stones.length; i++) {
			for (int j = i + 1; j < stones.length; j++) {
				if (stones[i][0] == stones[j][0] || stones[i][1] == stones[j][1]) {
					union(i,j,parent,rank);
				}
			}
		}
		for (int i = 0; i < stones.length; i++) {
			if (parent[i] != i) {
				result++;
			}
		}
		return result;
	}
	void union(int x, int y, int[] parent, int[] rank) {
		int x_parent = find_parent(x,parent);
		int y_parent = find_parent(y,parent);
		if (x_parent == y_parent) {
			return;
		} 
		else if (rank[x_parent] > rank[y_parent]) {
			parent[y_parent] = x_parent;
		} 
		else if (rank[y_parent] > rank[x_parent]) {
			parent[x_parent] = y_parent;
		} 
		else if (rank[x_parent] == rank[y_parent]) {
			parent[y_parent] = x_parent;
			rank[x_parent]++;
		}
	}
}