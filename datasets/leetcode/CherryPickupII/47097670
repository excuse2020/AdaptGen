class Solution {
	int cherryPickup(int[][] grid) {
		int row = grid.length;
		int col = grid[0].length;
		int[][] dp = new int[col + 2][col + 2];
		for (int i = 1; i <= col; i++) {
			dp[1][i] += grid[0][0];
		}
		for (int i = 1; i <= col; i++) {
			dp[i][col] += grid[0][col - 1];
		}
		for (int i = 1; i < row - 1; i++) {
			int[][] newDP = new int[col + 2][col + 2];
			for (int j = 1; j <= col; j++) {
				if (j > 1 + i) {
					continue;
				}
				for (int k = 1; k < j; k++) {
					if (k < col - i) {
						continue;
					}
					int m = 0;
					for (int u = j - 1; u <= j + 1; u++) {
						for (int v = k - 1; v <= k + 1; v++) {
							m = Math.max(m,dp[u][v]);
						}
					}
					m += grid[i][j - 1] + grid[i][k - 1];
					newDP[j][k] = m;
				}
				for (int k = j + 1; k <= col; k++) {
					if (k < col - i) {
						continue;
					}
					int m = 0;
					for (int u = j - 1; u <= j + 1; u++) {
						for (int v = k - 1; v <= k + 1; v++) {
							m = Math.max(m,dp[u][v]);
						}
					}
					m += grid[i][j - 1] + grid[i][k - 1];
					newDP[j][k] = m;
				}
			}
			dp = newDP;
		}
		int max = 0;
		for (int j = 1; j <= col; j++) {
			if (j > row) {
				continue;
			}
			for (int k = 1; k < j; k++) {
				if (k < col - row + 1) {
					continue;
				}
				int m = 0;
				for (int u = j - 1; u <= j + 1; u++) {
					for (int v = k - 1; v <= k + 1; v++) {
						m = Math.max(m,dp[u][v]);
					}
				}
				m += grid[row - 1][j - 1] + grid[row - 1][k - 1];
				max = Math.max(max,m);
			}
			for (int k = j + 1; k <= col; k++) {
				if (k < col - row + 1) {
					continue;
				}
				int m = 0;
				for (int u = j - 1; u <= j + 1; u++) {
					for (int v = k - 1; v <= k + 1; v++) {
						m = Math.max(m,dp[u][v]);
					}
				}
				m += grid[row - 1][j - 1] + grid[row - 1][k - 1];
				max = Math.max(max,m);
			}
		}
		return max;
	}
}