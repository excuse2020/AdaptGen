class Solution {
	int visiblePoints(List<List<Integer>> points, int angle, List<Integer> location) {
		List<Double> angulars = new ArrayList<Double>();
		int localPointsCount = 0;
		for (List<Integer> p: points) {	
			if (p.get(0) - location.get(0) == 0 && p.get(1) - location.get(1) == 0) {
				localPointsCount++;
				continue;
			}
			double deltaX = (double) (p.get(0) - location.get(0));
			double deltaY = (double) (p.get(1) - location.get(1));
			double val = deltaX / Math.sqrt(deltaX * deltaX + deltaY * deltaY);
			double a = Math.toDegrees(Math.acos(val));
			if (location.get(1) <= p.get(1)) {
				angulars.add(a);
			} 
			else {
				angulars.add(360.0 - a);
			}
		}
		Collections.sort(angulars);
		List<Double> extraAngulars = new ArrayList<Double>();
		Queue<Double> queue = new LinkedList<Double>();
		int i = 0;
		while (i < angulars.size()) {
			if (angulars.get(i) <= angle) {
				queue.add(angulars.get(i));
				extraAngulars.add(angulars.get(i) + 360.0);
				i++;
			} 
			else {
				break;
			}
		}
		angulars.addAll(extraAngulars);
		int maxlength = queue.size();
		while (i < angulars.size()) {
			queue.add(angulars.get(i));
			double minimal = angulars.get(i) - angle;
			while (queue.peek() - minimal < -0.000001) {
				queue.poll();
			}
			maxlength = Math.max(maxlength,queue.size());
			i++;
		}
		return maxlength + localPointsCount;
	}
}