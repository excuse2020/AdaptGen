class Solution {
	void dfs(int curr, ArrayList<ArrayList<Integer>> adj, boolean[] visit) {
		visit[curr] = true;
		for (int i = 0; i < adj.get(curr).size(); i++) {
			int ele = adj.get(curr).get(i);
			if (!visit[ele]) {
				dfs(ele,adj,visit);
			}
		}
	}
	int findCircleNum(int[][] isConnected) {
		int n = isConnected.length;
		ArrayList<ArrayList<Integer>> adj = new ArrayList<>();
		for (int i = 0; i < n; i++) {
			adj.add(new ArrayList<>());
		}
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < isConnected[0].length; j++) {
				if (isConnected[i][j] == 1 && i != j) {
					adj.get(i).add(j);
					adj.get(j).add(i);
				}
			}
		}
		int count = 0;
		boolean[] visit = new boolean[isConnected[0].length];
		for (int i = 0; i < isConnected[0].length; i++) {
			if (!visit[i]) {
				dfs(i,adj,visit);
				count++;
			}
		}
		return count;
	}
}