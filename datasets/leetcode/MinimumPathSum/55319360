class Solution {
	int func(int arr, int m, int n, int dp) {
		if (m == 0 && n == 0) {
			return arr[m][n];
		}
		if (m < 0 || n < 0) {
			return (int) Math.pow(10,9);
		}
		if (dp[m][n] != -1) {
			return dp[m][n];
		}
		int up = func(arr,m - 1,n,dp) + arr[m][n];
		int down = func(arr,m,n - 1,dp) + arr[m][n];
		return dp[m][n] = Math.min(up,down);
	}
	int minPathSum(int[][] grid) {
		int m = grid.length;
		int n = grid[0].length;
		int dp = new int[m][n];
		for (int rows: dp) {	
			Arrays.fill(rows,-1);
		}
		return func(grid,m - 1,n - 1,dp);
	}
}