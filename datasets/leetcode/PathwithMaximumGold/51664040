class Solution {
	int function(int x, int y, boolean vis, int[][] grid, int sum) {
		vis[x][y] = true;
		sum += grid[x][y];
		int max = 0;
		if (x + 1 < grid.length && grid[x + 1][y] != 0 && vis[x + 1][y] == false) {
			max = Math.max(max,function(x + 1,y,vis,grid,0));
		}
		if (x - 1 >= 0 && grid[x - 1][y] != 0 && vis[x - 1][y] == false) {
			max = Math.max(max,function(x - 1,y,vis,grid,0));
		}
		if (y + 1 < grid[0].length && grid[x][y + 1] != 0 && vis[x][y + 1] == false) {
			max = Math.max(max,function(x,y + 1,vis,grid,0));
		}
		if (y - 1 >= 0 && grid[x][y - 1] != 0 && vis[x][y - 1] == false) {
			max = Math.max(max,function(x,y - 1,vis,grid,0));
		}
		vis[x][y] = false;
		return sum + max;
	}
	int getMaximumGold(int[][] grid) {
		Queue<int[]> q = new LinkedList<>();
		int n = grid.length;
		int m = grid[0].length;
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < m; j++) {
				if (grid[i][j] != 0) {
					q.add(new int{i, j});
				}
			}
		}
		boolean vis = new boolean[n][m];
		int max = 0;
		while (!q.isEmpty()) {
			int[] arr = q.poll();
			max = Math.max(max,function(arr[0],arr[1],vis,grid,0));
		}
		return max;
	}
}