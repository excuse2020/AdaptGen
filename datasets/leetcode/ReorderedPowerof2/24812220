class Solution {
	boolean checkEqual(int[] digit, int[] power) {
		for (int i = 0; i <= 9; i++) {
			if (digit[i] != power[i]) {
				return false;
			}
		}
		return true;
	}
	int[] countFreq(int n) {
		int[] freq = new int[10];
		while (n != 0) {
			freq[n % 10]++;
			n = n / 10;
		}
		return freq;
	}
	boolean reorderedPowerOf2(int n) {
		int[] digitFreq = countFreq(n);
		for (int i = 0; i < 31; i++) {
			int[] powerFreq = countFreq((int) Math.pow(2,i));
			if (checkEqual(digitFreq,powerFreq)) {
				return true;
			}
		}
		return false;
	}
}