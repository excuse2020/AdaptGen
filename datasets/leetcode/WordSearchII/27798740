class Solution {
	Set<String> ans = new HashSet<>();
	HashMap<String, Integer> map = new HashMap<>();
	int max = -1;
	void check(int i, int j, String str, char[][] board, boolean[][] visited) {
		if (i < 0 || j < 0 || i >= board.length || j >= board[i].length || visited[i][j] == true || str.length() >= max) {
			return;
		}
		visited[i][j] = true;
		str += board[i][j];
		if (map.containsKey(str)) {
			ans.add(str);
		}
		check(i - 1,j,str,board,visited);
		check(i + 1,j,str,board,visited);
		check(i,j - 1,str,board,visited);
		check(i,j + 1,str,board,visited);
		str = str.substring(0,str.length() - 1);
		visited[i][j] = false;
	}
	List<String> findWords(char[][] board, String[] words) {
		for (int i = 0; i < words.length; i++) {
			map.put(words[i],1);
			max = Math.max(max,words[i].length());
		}
		for (int i = 0; i < board.length; i++) {
			for (int j = 0; j < board[i].length; j++) {
				boolean[][] visited = new boolean[board.length][board[i].length];
				check(i,j,"",board,visited);
			}
		}
		return new ArrayList<>(ans);
	}
}