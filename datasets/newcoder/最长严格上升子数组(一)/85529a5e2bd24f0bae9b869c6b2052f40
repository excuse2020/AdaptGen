class Solution {
	int maxSubArrayLengthTwo(int[] nums) {
		if (nums.length <= 2) {
			return nums.length;
		}
		int[] left = new int[nums.length];
		int[] right = new int[nums.length];
		int res = 0;
		left[0] = 1;
		right[nums.length - 1] = 1;
		for (int i = 1; i < nums.length; i++) {
			if (nums[i] > nums[i - 1]) {
				left[i] = left[i - 1] + 1;
			} 
			else {
				left[i] = 1;
			}
		}
		for (int i = nums.length - 2; i >= 0; i--) {
			if (nums[i] < nums[i + 1]) {
				right[i] = right[i + 1] + 1;
			} 
			else {
				right[i] = 1;
			}
		}
		for (int i = 0; i < nums.length; i++) {
			if (i == 0) {
				res = nums[1] == 1 ? Math.max(res,right[i]) : Math.max(res,right[i + 1] + 1);
				continue;
			}
			if (i == nums.length - 1) {
				res = nums[nums.length - 2] == (int) Math.pow(10,5) ? Math.max(res,left[i]) : Math.max(res,left[i - 1] + 1);
				continue;
			}
			if (nums[i + 1] - nums[i - 1] > 1) {
				res = Math.max(res,left[i - 1] + right[i + 1]);
			} 
			else {
				if (nums[i + 1] != 1 && nums[i - 1] != (int) Math.pow(10,5)) {
					res = Math.max(res,Math.max(left[i - 1],right[i + 1]) + 1);
				} 
				else if (nums[i + 1] == 1 && nums[i - 1] != (int) Math.pow(10,5)) {
					res = Math.max(res,left[i - 1] + 1);
				} 
				else if (nums[i + 1] != 1 && nums[i - 1] == (int) Math.pow(10,5)) {
					res = Math.max(res,right[i + 1] + 1);
				} 
				else {
					res = Math.max(res,1);
				}
			}
		}
		return res;
	}
}