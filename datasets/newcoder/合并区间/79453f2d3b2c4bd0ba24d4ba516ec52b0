class Solution {
	ArrayList<Interval> merge(ArrayList<Interval> intervals) {
		if (intervals.size() <= 1) {
			return intervals;
		}
		ArrayList<Interval> res = new ArrayList<>();
		qsort(intervals,0,intervals.size() - 1);
		for (int i = 0; i < intervals.size() - 1; i++) {
			if (intervals.get(i).end >= intervals.get(i + 1).start && intervals.get(i + 1).end >= intervals.get(i).start) {
				Interval in = new Interval(Math.min(intervals.get(i).start,intervals.get(i + 1).start), Math.max(intervals.get(i).end,intervals.get(i + 1).end));
				intervals.set(i,in);
				intervals.remove(i + 1);
				i--;
			}
		}
		return intervals;
	}
	void qsort(ArrayList<Interval> in, int s, int e) {
		if (s >= e) {
			return;
		}
		int i = s, j = e;
		Interval tmp = in.get(s);
		while (i < j) {
			while (in.get(j).start >= tmp.start && i < j) {
				j--;
			}
			in.set(i,in.get(j));
			while (in.get(i).start <= tmp.start && i < j) {
				i++;
			}
			in.set(j,in.get(i));
		}
		in.set(i,tmp);
		qsort(in,s,i - 1);
		qsort(in,i + 1,e);
	}
}