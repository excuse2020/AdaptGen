class Solution {
	int hash, pows;
	String s;
	HashMap<Integer, Integer> visited;
	int deleteString(String s) {
		this.s = s;
		if (isBad()) {
			return s.length();
		}
		visited = new HashMap<>();
		fill();
		return helper(0,1,0,1);
	}
	void fill() {
		int n = s.length();
		hash = new int[n + 1];
		pows = new int[n];
		pows[0] = 1;
		hash[1] = (int) s.charAt(0);
		for (int i = 1; i != n; i++) {
			hash[i + 1] = (int) s.charAt(i) * (pows[i] = pows[i - 1] * 1000000007) + hash[i];
		}
	}
	int helper(int a, int b, int id1, int id2) {
		int mask = (id1 << 12) + id2, ans = 1;
		if (visited.containsKey(mask)) {
			return visited.get(mask);
		}
		for (; b < s.length(); a++, id2++, b += 2) {
			if ((hash[a + 1] - hash[id1]) * pows[id2] == (hash[b + 1] - hash[id2]) * pows[id1]) {
				if (id2 + 1 == s.length()) {
					ans = Math.max(ans,2);
				} 
				else {
					ans = Math.max(ans,1 + helper(id2,id2 + 1,id2,id2 + 1));
				}
			}
		}
		visited.put(mask,ans);
		return ans;
	}
	boolean isBad() {
		for (int i = 1; i < s.length(); ) {
			if (s.charAt(0) != s.charAt(i++)) {
				return false;
			}
		}
		return true;
	}
}