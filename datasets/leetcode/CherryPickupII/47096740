class Solution {
	int cherryPickup(int[][] grid) {
		return helper(grid,0,0,grid[0].length - 1);
	}
	int helper(int[][] grid, int i, int r1j, int r2j) {
		if (r1j < 0 || r2j < 0 || r1j >= grid[0].length || r2j >= grid[0].length) {
			return 0;
		}
		if (i >= grid.length) {
			return 0;
		}
		int result = grid[i][r1j];
		if (r1j != r2j) {
			result += grid[i][r2j];
		}
		int maxResult = 0;
		for (int x = r1j - 1; x <= r1j + 1; x++) {
			for (int y = r2j - 1; y <= r2j + 1; y++) {
				maxResult = Math.max(maxResult,helper(grid,i + 1,x,y));
			}
		}
		result += maxResult;
		return result;
	}
}