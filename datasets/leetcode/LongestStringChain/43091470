class Solution {
	boolean isPre(String str1, String str2) {
		char[] chs1 = str1.toCharArray();
		char[] chs2 = str2.toCharArray();
		if (chs1.length + 1 != chs2.length) {
			return false;
		}
		int i = 0;
		int j = 0;
		while (j < chs2.length) {
			if (i < chs1.length && chs2[j] == chs1[i]) {
				i++;
			}
			j++;
		}
		return i == chs1.length;
	}
	int longestStrChain(String[] words) {
		Arrays.sort(words,(a, b) -> {a.length() - b.length()});
		int n = words.length;
		int[] dp = new int[n];
		dp[0] = 1;
		int res = 1;
		for (int i = 1; i < n; i++) {
			int tmp = 1;
			for (int j = 0; j < i; j++) {
				boolean isPre = isPre(words[j],words[i]);
				if (isPre) {
					tmp = dp[j] + 1;
				}
				dp[i] = Math.max(dp[i],tmp);
			}
			res = Math.max(res,dp[i]);
		}
		return res;
	}
}