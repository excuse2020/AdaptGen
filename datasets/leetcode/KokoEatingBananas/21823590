class Solution {
	int minEatingSpeed(int[] piles, int h) {
		int low = 1, high = Integer.MIN_VALUE;
		for (int i = 0; i < piles.length; i++) {
			high = Math.max(piles[i],high);
		}
		int ans = 0;
		while (low <= high) {
			int mid = (low + high) / 2;
			System.out.println(low + " ");
			if (possibleToEat(mid,piles,h)) {
				ans = mid;
				high = mid - 1;
			} 
			else {
				low = mid + 1;
			}
		}
		return ans;
	}
	boolean possibleToEat(int k, int[] piles, int h) {
		int requiredHours = 0;
		for (int i = 0; i < piles.length; i++) {
			double d = (piles[i] * 1.0) / k;
			requiredHours += Math.ceil(d);
		}
		return requiredHours <= h;
	}
}