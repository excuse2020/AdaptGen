class Solution {
	String EMPTY_STRING = "";
	String S;
	int binarySearchDuplicates(int L, int a, long modulus, int n, int[] nums) {
		long hash = 0;
		for (int i = 0; i < L; ++i) {
			hash = (hash * a + nums[i]) % modulus;
		}
		HashMap<Long, List<Integer>> seen = new HashMap<Long, List<Integer>>();
		seen.putIfAbsent(hash,new ArrayList<Integer>());
		seen.get(hash).add(0);
		long aL = 1;
		for (int i = 1; i <= L; ++i) {
			aL = (aL * a) % modulus;
		}
		for (int start = 1; start < n - L + 1; ++start) {
			hash = (hash * a - nums[start - 1] * aL % modulus + modulus) % modulus;
			hash = (hash + nums[start + L - 1]) % modulus;
			List<Integer> hits = seen.get(hash);
			if (hits != null) {
				String cur = S.substring(start,start + L);
				for (Integer i: hits) {	
					String candidate = S.substring(i,i + L);
					if (candidate.equals(cur)) {
						return i;
					}
				}
			}
			seen.putIfAbsent(hash,new ArrayList<Integer>());
			seen.get(hash).add(start);
		}
		return -1;
	}
	String longestDupSubstring(String s) {
		if (s == null || s.length() == 0) {
			return EMPTY_STRING;
		}
		S = s;
		int n = S.length();
		int[] nums = new int[n];
		int i = 0;
	}
}