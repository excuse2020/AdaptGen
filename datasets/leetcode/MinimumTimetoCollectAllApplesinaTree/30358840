class Solution {
	int minTime(int n, int[][] edges, List<Boolean> hasApple) {
		List<List<Integer>> adjency = new ArrayList<>();
		for (int i = 0; i < n; i++) {
			adjency.add(new ArrayList<Integer>());
		}
		boolean vis = new boolean[n];
		for (int i = 0; i < edges.length; i++) {
			int u = edges[i][0];
			int v = edges[i][1];
			adjency.get(v).add(u);
			adjency.get(u).add(v);
		}
		int ans = solve(0,adjency,hasApple,vis);
		return ans > -1 ? ans : 0;
	}
	int solve(int curr, List<List<Integer>> adjency, List<Boolean> hasApple, boolean[] vis) {
		vis[curr] = true;
		int ans = -1;
		for (int i = 0; i < adjency.get(curr).size(); i++) {
			int child = adjency.get(curr).get(i);
			if (!vis[child]) {
				int temp = solve(child,adjency,hasApple,vis);
				if (temp > -1) {
					if (ans == -1) {
						ans = 0;
					}
					ans += temp + 2;
				}
			} 
			else {
				continue;
			}
		}
		if (hasApple.get(curr)) {
			if (ans == -1) {
				ans = 0;
			}
		}
		return ans;
	}
}