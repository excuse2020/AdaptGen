class Solution {
	int[] findBoundary(int n) {
		int i = 0;
		int[] res = new int[2];
		while (Math.pow(2,i) < n) {
			i++;
		}
		res[1] = i;
		if (Math.pow(2,i) == n) {
			res[0] = i;
		} 
		else {
			res[0] = i - 1;
		}
		return res;
	}
	int minOperations(int n) {
		int[] boundary = findBoundary(n);
		if (boundary[0] == boundary[1]) {
			return 1;
		} 
		else if (n - Math.pow(2,boundary[0]) == 1 || Math.pow(2,boundary[1]) - n == 1) {
			return 2;
		}
		return 1 + Math.min(minOperations(n - (int) Math.pow(2,boundary[0])),minOperations((int) Math.pow(2,boundary[1]) - n));
	}
}