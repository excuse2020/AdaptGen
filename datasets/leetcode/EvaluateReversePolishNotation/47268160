class Solution {
	int evalRPN(String[] tokens) {
		Stack<Integer> st = new Stack<>();
		for (int i = 0; i < tokens.length; i++) {
			if (tokens[i].equals("+") == false && tokens[i].equals("-") == false && tokens[i].equals("*") == false && tokens[i].equals("/") == false) {
				int a = Integer.valueOf(tokens[i]);
				st.push(a);
			} 
			else if (tokens[i].equals("+")) {
				int n1 = st.pop();
				int n2 = st.pop();
				int n3 = n1 + n2;
				st.push(n3);
			} 
			else if (tokens[i].equals("-")) {
				int m1 = st.pop();
				int m2 = st.pop();
				int m3 = m2 - m1;
				st.push(m3);
			} 
			else if (tokens[i].equals("/")) {
				int d1 = st.pop();
				int d2 = st.pop();
				int d3 = (int) d2 / d1;
				st.push(d3);
			} 
			else if (tokens[i].equals("*")) {
				int e1 = st.pop();
				int e2 = st.pop();
				int e3 = e2 * e1;
				st.push(e3);
			}
		}
		return st.pop();
	}
}