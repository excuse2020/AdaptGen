class Solution {
	Boolean[][] dp;
	Boolean[][] palindrome;
	boolean checkPartitioning(String s) {
		dp = new Boolean[s.length() + 1][4];
		palindrome = new Boolean[s.length() + 1][s.length() + 1];
		return solve(0,3,s);
	}
	boolean isPalindrome(String s, int i, int j) {
		if (palindrome[i][j] != null) {
			return palindrome[i][j];
		}
		if (i >= j) {
			return palindrome[i][j] = true;
		}
		if (s.charAt(i) == s.charAt(j)) {
			return palindrome[i][j] = isPalindrome(s,i + 1,j - 1);
		} 
		else {
			return palindrome[i][j] = false;
		}
	}
	boolean solve(int i, int k, String s) {
		if (dp[i][k] != null) {
			return dp[i][k];
		}
		if (i == s.length()) {
			if (k == 0) {
				return dp[i][k] = true;
			}
			return dp[i][k] = false;
		}
		if (k == 0) {
			return dp[i][k] = false;
		}
		for (int idx = i + 1; idx <= s.length(); idx++) {
			if (isPalindrome(s,i,idx - 1)) {
				if (solve(idx,k - 1,s)) {
					return dp[i][k] = true;
				}
			}
		}
		return dp[i][k] = false;
	}
}