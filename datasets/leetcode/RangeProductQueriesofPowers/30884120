class Solution {
	int[] n2Powers(int n) {
		int idx = 0, exponent = 0;
		int[] res = new int[Integer.bitCount(n)];
		while (n > 0) {
			if ((n & 1) == 1) {
				res[idx++] = exponent;
			}
			exponent++;
			n /= 2;
		}
		return res;
	}
	int[] productQueries(int n, int[][] queries) {
		int MOD = (int) 1e9 + 7;
		int[] powers = n2Powers(n);
		int m = powers.length;
		int[] prefixSum = new int[m];
		for (int i = 0; i < m; i++) {
			prefixSum[i] = (i > 0 ? prefixSum[i - 1] : 0) + powers[i];
		}
		int[] calCache = new int[prefixSum[m - 1] + 1];
		for (int i = 0; i < calCache.length; i++) {
			calCache[i] = i > 0 ? (calCache[i - 1] * 2 % MOD) : 1;
		}
		int[] res = new int[queries.length];
		for (int i = 0; i < res.length; i++) {
			int l = queries[i][0];
			int r = queries[i][1];
			res[i] = calCache[prefixSum[r] - (l > 0 ? prefixSum[l - 1] : 0)];
		}
		return res;
	}
}