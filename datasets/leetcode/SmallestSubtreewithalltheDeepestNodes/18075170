class Solution {
	int TreeHeight(TreeNode root) {
		if (root == null) {
			return 0;
		}
		return Math.max(TreeHeight(root.left),TreeHeight(root.right)) + 1;
	}
	TreeNode solve(TreeNode root, int h, int curr_h) {
		if (root == null) {
			return null;
		}
		if (h == curr_h) {
			return root;
		}
		TreeNode left = solve(root.left,h,curr_h + 1);
		TreeNode right = solve(root.right,h,curr_h + 1);
		if (left == null) {
			return right;
		} 
		else if (right == null) {
			return left;
		} 
		else {
			return root;
		}
	}
	TreeNode subtreeWithAllDeepest(TreeNode root) {
		int max_height = TreeHeight(root);
		TreeNode result = null;
		result = solve(root,max_height,1);
		return result;
	}
}