class Solution {
	int numBusesToDestination(int[][] routes, int source, int target) {
		int n = routes.length;
		Map<Integer, List<Integer>> map = new HashMap<>();
		for (int i = 0; i < n; i++) {
			for (int stop: routes[i]) {	
				map.putIfAbsent(stop,new ArrayList());
				map.get(stop).add(i);
			}
		}
		Queue<Integer> q = new LinkedList<>();
		Set<Integer> busVisited = new HashSet<>();
		Set<Integer> stopVisited = new HashSet<>();
		q.add(source);
		int level = -1;
		while (!q.isEmpty()) {
			int size = q.size();
			level++;
			for (int i = 0; i < size; i++) {
				var s = q.poll();
				if (s == target) {
					return level;
				}
				if (map.get(s) == null) {
					continue;
				}
				for (var bus: map.get(s)) {	
					if (busVisited.contains(bus)) {
						continue;
					}
					busVisited.add(bus);
					for (var stop: routes[bus]) {	
						if (stopVisited.contains(stop)) {
							continue;
						}
						stopVisited.add(stop);
						q.add(stop);
					}
				}
			}
		}
		return -1;
	}
}