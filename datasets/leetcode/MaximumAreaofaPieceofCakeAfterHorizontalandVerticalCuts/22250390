class Solution {
	long MOD = (long) 1e9 + 7;
	int maxArea(int height, int width, int[] horizCuts, int[] vertCuts) {
		Arrays.sort(horizCuts);
		Arrays.sort(vertCuts);
		long maxPieceWidth = vertCuts[0];
		for (int i = 1; i <= vertCuts.length; i++) {
			int right = 0;
			if (i < vertCuts.length) {
				right = vertCuts[i];
			} 
			else {
				right = width;
			}
			int left = vertCuts[i - 1];
			maxPieceWidth = Math.max(maxPieceWidth,(long) right - left);
		}
		long maxPieceHeight = horizCuts[0];
		for (int i = 1; i <= horizCuts.length; i++) {
			int bot = 0;
			if (i < horizCuts.length) {
				bot = horizCuts[i];
			} 
			else {
				bot = height;
			}
			int top = horizCuts[i - 1];
			maxPieceHeight = Math.max(maxPieceHeight,(long) bot - top);
		}
		long maxArea = mod(maxPieceHeight) * mod(maxPieceWidth);
		return (int) mod(maxArea);
	}
	long mod(long n) {
		return n % MOD;
	}
}