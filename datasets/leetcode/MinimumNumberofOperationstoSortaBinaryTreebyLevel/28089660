class Solution {
	int helper(int[] arr) {
		int n = arr.length;
		HashMap<Integer, Integer> map = new HashMap<>();
		for (int i = 0; i < n; i++) {
			map.put(arr[i],i);
		}
		Arrays.sort(arr);
		boolean[] visited = new boolean[n];
		Arrays.fill(visited,false);
		int res = 0;
		for (int i = 0; i < n; i++) {
			if (visited[i] || map.get(arr[i]) == i) {
				continue;
			}
			int j = i, size = 0;
			while (!visited[j]) {
				visited[j] = true;
				j = map.get(arr[j]);
				size++;
			}
			if (size > 0) {
				res += size - 1;
			}
		}
		return res;
	}
	int minimumOperations(TreeNode root) {
		int res = 0;
		Queue<TreeNode> queue = new LinkedList<>();
		queue.offer(root);
		while (!queue.isEmpty()) {
			int size = queue.size();
			int[] temp = new int[size];
			int i = 0;
			while (size-- > 0) {
				TreeNode curr = queue.poll();
				temp[i++] = curr.val;
				if (curr.left != null) {
					queue.offer(curr.left);
				}
				if (curr.right != null) {
					queue.offer(curr.right);
				}
			}
			res += helper(temp);
		}
		return res;
	}
}