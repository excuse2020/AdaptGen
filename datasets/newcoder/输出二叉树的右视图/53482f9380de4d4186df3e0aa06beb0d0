class Solution {
	TreeNode reConstructTree(int[] xianxu, int[] zhongxu) {
		if (xianxu.length == 0) {
			return null;
		}
		TreeNode root = new TreeNode(xianxu[0]);
		for (int i = 0; i < zhongxu.length; ++i) {
			if (xianxu[0] == zhongxu[i]) {
				root.left = reConstructTree(Arrays.copyOfRange(xianxu,1,i + 1),Arrays.copyOfRange(zhongxu,0,i));
				root.right = reConstructTree(Arrays.copyOfRange(xianxu,i + 1,xianxu.length),Arrays.copyOfRange(zhongxu,i + 1,zhongxu.length));
			}
		}
		return root;
	}
	int[] solve(int[] xianxu, int[] zhongxu) {
		TreeNode root = reConstructTree(xianxu,zhongxu);
		List<TreeNode> list = new ArrayList<>();
		List<Integer> res = new ArrayList<Integer>();
		int front = 0;
		int rear = 0;
		int last = 1;
		list.add(rear++,root);
		while (front != rear) {
			TreeNode p = list.get(front++);
			if (p.left != null) {
				list.add(rear++,p.left);
			}
			if (p.right != null) {
				list.add(rear++,p.right);
			}
			if (front == last) {
				res.add(p.val);
				last = rear;
			}
		}
		int[] a = new int[res.size()];
		int i = 0;
		for (int item: res) {	
			a[i++] = item;
		}
		return a;
	}
}