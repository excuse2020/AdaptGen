class Solution {
	void backtrack(List<List<Integer>> list, List<Integer> tempList, int[] candidates, int remain, int start) {
		if (remain < 0) {
			return;
		}
		if (remain == 0) {
			list.add(new ArrayList<>(tempList));
			return;
		} 
		else {
			for (int i = start; i < candidates.length; i++) {
				if (candidates[i] > remain) {
					return;
				}
				if (i > start && candidates[i] == candidates[i - 1]) {
					continue;
				}
				tempList.add(candidates[i]);
				backtrack(list,tempList,candidates,remain - candidates[i],i + 1);
				tempList.remove(tempList.size() - 1);
			}
		}
	}
	List<List<Integer>> combinationSum2(int[] candidates, int target) {
		List<List<Integer>> list = new ArrayList<>();
		Arrays.sort(candidates);
		backtrack(list,new ArrayList<>(),candidates,target,0);
		return list;
	}
}