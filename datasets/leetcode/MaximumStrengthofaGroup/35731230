class Solution {
	long maxStrength(int[] nums) {
		long max = -1;
		long ans = 1;
		int count = 0;
		int count2 = 0;
		int count3 = 0;
		int len = nums.length;
		if (len == 0) {
			return 0;
		}
		for (int n: nums) {	
			if (n == 0) {
				count3++;
			}
			if (n != 0) {
				ans = ans * n;
				if (n > 0) {
					count2++;
				}
			}
			if (count == 0 && n < 0) {
				max = n;
			}
			if (n < 0) {
				count++;
				max = Math.max(max,n);
			}
		}
		if (len == 1) {
			return nums[0];
		}
		if (len == 2) {
			if (nums[0] == 0 && nums[1] == 0) {
				return 0;
			}
			if (nums[0] > 0 && nums[1] > 0 || nums[0] < 0 && nums[1] < 0) {
				return nums[0] * nums[1];
			}
			if (nums[0] <= 0 && nums[1] > 0) {
				return nums[1];
			}
			if (nums[0] > 0 && nums[1] <= 0) {
				return nums[0];
			} 
			else {
				return 0;
			}
		}
		if (count3 > 0 && count2 == 0 && count == 0) {
			return 0;
		}
		if (count2 == 0 && count == 1) {
			return 0;
		}
		if (count % 2 != 0) {
			return ans / max;
		} 
		else {
			return ans;
		}
	}
}