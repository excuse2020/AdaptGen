class Solution {
	int M = (int) 1e9 + 7;
	long ModMultiply(long a, long b, long Mod) {
		return ((a % Mod) * (b % Mod)) % Mod;
	}
	int maxArea(int h, int w, int[] horizontalCuts, int[] verticalCuts) {
		int n = verticalCuts.length;
		int m = horizontalCuts.length;
		int[] x = new int[n + 2];
		int[] y = new int[m + 2];
		x[0] = 0;
		x[n + 1] = w;
		for (int i = 0; i < n; i++) {
			x[i + 1] = verticalCuts[i];
		}
		y[0] = 0;
		y[m + 1] = h;
		for (int i = 0; i < m; i++) {
			y[i + 1] = horizontalCuts[i];
		}
		Arrays.sort(x);
		Arrays.sort(y);
		int mxDiffX = 0;
		for (int i = 1; i < n + 2; i++) {
			mxDiffX = Math.max(mxDiffX,x[i] - x[i - 1]);
		}
		int mxDiffY = 0;
		for (int i = 1; i < m + 2; i++) {
			mxDiffY = Math.max(mxDiffY,y[i] - y[i - 1]);
		}
		return (int) ModMultiply(mxDiffX,mxDiffY,M);
	}
}