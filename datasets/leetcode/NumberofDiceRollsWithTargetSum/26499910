class Solution {
	int numRollsToTarget(int n, int k, int target) {
		int[][] dp = new int[n + 1][target + 1];
		for (int i = 0; i <= n; i++) {
			Arrays.fill(dp[i],-1);
		}
		return numRollsToTargetUtil(n,k,target,dp);
	}
	int numRollsToTargetUtil(int n, int k, int target, int[][] dp) {
		if (target < 0) {
			return 0;
		}
		if (n != 0 && target == 0) {
			return 0;
		}
		if (n == 0 && target != 0) {
			return 0;
		}
		if (n == 0 && target == 0) {
			return 1;
		}
		if (dp[n][target] != -1) {
			return dp[n][target] % 1000000007;
		}
		int res = 0;
		for (int i = 1; i <= k; i++) {
			res = (res + numRollsToTargetUtil(n - 1,k,target - i,dp)) % 1000000007;
		}
		return dp[n][target] = res % 1000000007;
	}
}