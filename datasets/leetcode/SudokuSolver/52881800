class Solution {
	boolean isValid(char[][] board, int row, int col, char val) {
		for (int cols = 0; cols < 9; cols++) {
			if (board[row][cols] == val) {
				return false;
			}
		}
		for (int rows = 0; rows < 9; rows++) {
			if (board[rows][col] == val) {
				return false;
			}
		}
		int startRow = (row / 3) * 3;
		int startCol = (col / 3) * 3;
		for (int rows = startRow; rows < startRow + 3; rows++) {
			for (int cols = startCol; cols < startCol + 3; cols++) {
				if (board[rows][cols] == val) {
					return false;
				}
			}
		}
		return true;
	}
	boolean solve(char[][] board) {
		int row = 0;
		int col = 0;
	}
	void solveSudoku(char[][] board) {
		solve(board);
	}
}