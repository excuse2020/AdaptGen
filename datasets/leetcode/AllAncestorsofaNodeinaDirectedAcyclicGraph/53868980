class Solution {
	void dfs(int i, int curr, List<List<Integer>> adj, List<List<Integer>> ans) {
		for (int neighbor: adj.get(curr)) {	
			if (neighbor >= 0 && neighbor < ans.size() && (ans.get(neighbor).isEmpty() || !ans.get(neighbor).contains(i))) {
				ans.get(neighbor).add(i);
				dfs(i,neighbor,adj,ans);
			}
		}
	}
	List<List<Integer>> getAncestors(int n, int[][] edges) {
		List<List<Integer>> adj = new ArrayList<>();
		for (int i = 0; i < n; i++) {
			adj.add(new ArrayList<>());
		}
		for (int[] edge: edges) {	
			adj.get(edge[0]).add(edge[1]);
		}
		List<List<Integer>> ans = new ArrayList<>();
		for (int i = 0; i < n; i++) {
			ans.add(new ArrayList<>());
		}
		for (int i = 0; i < n; i++) {
			dfs(i,i,adj,ans);
		}
		return ans;
	}
}