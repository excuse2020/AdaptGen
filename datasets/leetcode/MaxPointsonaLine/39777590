class Solution {
	int maxPoints(int[][] points) {
		if (points.length == 1) {
			return 1;
		}
		if (points.length == 2) {
			return 2;
		}
		int n = points.length;
		int longestLine = 0;
		HashMap<Float, Integer> slopeMap = new HashMap<>(n, 0.75f);
		for (int i = 0; i < n; ++i) {
			int x1 = points[i][0];
			int y1 = points[i][1];
			for (int j = i + 1; j < n; ++j) {
				int x2 = points[j][0];
				int y2 = points[j][1];
				float slope;
				if (x1 == x2) {
					slope = Float.POSITIVE_INFINITY;
				} 
				else if (y1 == y2) {
					slope = 0f;
				} 
				else {
					slope = (float) (y1 - y2) / (x1 - x2);
				}
				slopeMap.put(slope,slopeMap.getOrDefault(slope,1) + 1);
			}
			for (int count: slopeMap.values()) {	
				longestLine = Math.max(count,longestLine);
			}
			slopeMap.clear();
		}
		return longestLine;
	}
}