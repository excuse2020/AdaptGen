class Solution {
	int maxiwofirst(int[] nums, int[] dp, int i) {
		if (i < 1) {
			return 0;
		}
		if (i == 1) {
			return nums[i];
		}
		if (dp[i] != -1) {
			return dp[i];
		}
		int pick = nums[i] + maxiwofirst(nums,dp,i - 2);
		int npick = maxiwofirst(nums,dp,i - 1);
		return dp[i] = Math.max(pick,npick);
	}
	int maxiwolast(int[] nums, int[] dp, int i) {
		if (i < 0) {
			return 0;
		}
		if (i == 0) {
			return nums[i];
		}
		if (dp[i] != -1) {
			return dp[i];
		}
		int pick = nums[i] + maxiwolast(nums,dp,i - 2);
		int npick = maxiwolast(nums,dp,i - 1);
		return dp[i] = Math.max(pick,npick);
	}
	int rob(int[] nums) {
		int n = nums.length;
		if (n == 1) {
			return nums[0];
		}
		int[] dp = new int[n];
		Arrays.fill(dp,-1);
		int wofirst = maxiwofirst(nums,dp,n - 1);
		Arrays.fill(dp,-1);
		int wolast = maxiwolast(nums,dp,n - 2);
		return Math.max(wofirst,wolast);
	}
}