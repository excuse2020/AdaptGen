class Solution {
	TreeNode Mirror(TreeNode pRoot) {
		if (pRoot == null) {
			return null;
		}
		return reverse(pRoot);
	}
	TreeNode Mirror2(TreeNode pRoot) {
		if (pRoot == null) {
			return null;
		}
		Stack<TreeNode> stack = new Stack<>();
		stack.push(pRoot);
		while (!stack.isEmpty()) {
			TreeNode node = stack.pop();
			TreeNode tempNode = node.left;
			node.left = node.right;
			node.right = tempNode;
			if (node.left != null) {
				stack.push(node.left);
			}
			if (node.right != null) {
				stack.push(node.right);
			}
		}
		return pRoot;
	}
	TreeNode reverse(TreeNode pRoot) {
		if (pRoot == null) {
			return null;
		}
		TreeNode left = reverse(pRoot.right);
		TreeNode right = reverse(pRoot.left);
		pRoot.left = left;
		pRoot.right = right;
		return pRoot;
	}
}