class Solution {
	int closestMeetingNode(int[] edges, int node1, int node2) {
		int n = edges.length;
		int[] dist1 = new int[n];
		int[] dist2 = new int[n];
		Arrays.fill(dist1,Integer.MAX_VALUE);
		Arrays.fill(dist2,Integer.MAX_VALUE);
		boolean[] vis1 = new boolean[n];
		boolean[] vis2 = new boolean[n];
		dist1[node1] = dist2[node2] = 0;
		dfs(edges,node1,dist1,vis1);
		dfs(edges,node2,dist2,vis2);
		int minDistNode = -1;
		int minDistSoFar = Integer.MAX_VALUE;
		for (int i = 0; i < n; i++) {
			int maxDistBetweenTwo = Math.max(dist1[i],dist2[i]);
			if (maxDistBetweenTwo < minDistSoFar) {
				minDistSoFar = maxDistBetweenTwo;
				minDistNode = i;
			}
		}
		return minDistNode;
	}
	void dfs(int[] edges, int currNode, int[] dist, boolean[] visited) {
		visited[currNode] = true;
		int nextNode = edges[currNode];
		if (nextNode != -1 && !visited[nextNode]) {
			visited[nextNode] = true;
			dist[nextNode] = 1 + dist[currNode];
			dfs(edges,nextNode,dist,visited);
		}
	}
}