class Solution {
	long Util(ArrayList<ArrayList<Integer>> adj, boolean[] visited, int index) {
		visited[index] = true;
		int count = 1;
		for (int v: adj.get(index)) {	
			if (visited[v]) {
				continue;
			}
			count += (Util(adj,visited,v));
		}
		return count;
	}
	long countPairs(int n, int[][] edges) {
		ArrayList<Long> Al = new ArrayList<>();
		ArrayList<ArrayList<Integer>> adj = new ArrayList<>();
		boolean[] visited = new boolean[n];
		for (int i = 0; i < n; i++) {
			adj.add(new ArrayList<>());
		}
		for (int[] arr: edges) {	
			adj.get(arr[0]).add(arr[1]);
			adj.get(arr[1]).add(arr[0]);
		}
		for (int i = 0; i < n; i++) {
			if (!visited[i]) {
				Al.add(Util(adj,visited,i));
			}
		}
		long ans = 0;
		long[] suff = new long[Al.size()];
		suff[Al.size() - 1] = Al.get(Al.size() - 1);
		for (int i = Al.size() - 2; i >= 0; i--) {
			suff[i] = Al.get(i) + suff[i + 1];
		}
		for (int i = 0; i < Al.size() - 1; i++) {
			ans += (Al.get(i) * suff[i + 1]);
		}
		return ans;
	}
}