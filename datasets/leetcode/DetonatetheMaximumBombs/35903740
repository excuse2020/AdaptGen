class Solution {
	Map<Integer, List<Integer>> buildNeighbors(int[][] bombs) {
		Map<Integer, List<Integer>> graph = new HashMap();
		for (int i = 0; i < bombs.length; i++) {
			List<Integer> neighbors = new ArrayList();
			long x1 = bombs[i][0];
			long y1 = bombs[i][1];
			long r1 = bombs[i][2];
			for (int j = 0; j < bombs.length; j++) {
				long x2 = bombs[j][0];
				long y2 = bombs[j][1];
				if (i != j) {
					if ((x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2) <= r1 * r1) {
						neighbors.add(j);
					}
				}
			}
			graph.put(i,neighbors);
		}
		return graph;
	}
	int countDetonationFrom(int startBomb, Map<Integer, List<Integer>> neighbors) {
		Queue<Integer> q = new LinkedList();
		q.add(startBomb);
		Set<Integer> reachable = new HashSet();
		reachable.add(startBomb);
		while (!q.isEmpty()) {
			int size = q.size();
			while (size-- > 0) {
				int bomb = q.poll();
				for (int neighbor: neighbors.get(bomb)) {	
					if (!reachable.contains(neighbor)) {
						q.add(neighbor);
						reachable.add(neighbor);
					}
				}
			}
		}
		return reachable.size();
	}
	int maximumDetonation(int[][] bombs) {
		Map<Integer, List<Integer>> neighbors = buildNeighbors(bombs);
		int maxCount = 0;
		for (int startBomb = 0; startBomb < bombs.length; startBomb++) {
			int count = countDetonationFrom(startBomb,neighbors);
			maxCount = Math.max(maxCount,count);
		}
		return maxCount;
	}
}