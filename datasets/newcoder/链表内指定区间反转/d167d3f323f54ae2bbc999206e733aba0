class Solution {
	ListNode reverseBetween(ListNode head, int m, int n) {
		if (m == n) {
			return head;
		}
		if (head == null) {
			return head;
		}
		ListNode p1 = null;
		ListNode p2 = null;
		ListNode p20 = null;
		ListNode p3 = null;
		ListNode cNode = head;
		int index = 1;
		while (cNode != null) {
			if (index < m) {
				p1 = cNode;
			} 
			else if (index >= m && index <= n) {
				int val = cNode.val;
				ListNode newNode = new ListNode(val);
				if (p2 == null) {
					p2 = newNode;
					p20 = newNode;
				} 
				else {
					newNode.next = p2;
					p2 = newNode;
				}
			} 
			else {
				p3 = cNode;
				break;
			}
			index = index + 1;
			cNode = cNode.next;
		}
		p20.next = p3;
		if (p1 != null) {
			p1.next = p2;
		} 
		else {
			head = p2;
		}
		return head;
	}
}