class Solution {
	ListNode findmid(ListNode start, ListNode end) {
		ListNode slow = start;
		ListNode fast = start;
		while (fast != end && fast.next != end) {
			slow = slow.next;
			fast = fast.next.next;
		}
		return slow;
	}
	TreeNode solve(ListNode head, ListNode tail) {
		if (head == tail) {
			return null;
		}
		ListNode mid = findmid(head,tail);
		TreeNode cur = new TreeNode(mid.val);
		cur.left = solve(head,mid);
		cur.right = solve(mid.next,tail);
		return cur;
	}
	TreeNode sortedListToBST(ListNode head) {
		if (head == null) {
			return null;
		}
		TreeNode root = solve(head,null);
		return root;
	}
}