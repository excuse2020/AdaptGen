class Solution {
	ArrayList<String> Permutation(String str) {
		if (str == null) {
			return null;
		}
		char[] nums = str.toCharArray();
		ArrayList<String> list = new ArrayList<>();
		if (nums.length == 0) {
			return list;
		}
		dfs(0,nums,list);
		return list;
	}
	void dfs(int idx, char[] nums, ArrayList<String> list) {
		if (idx == nums.length) {
			StringBuilder result = new StringBuilder();
			for (char value: nums) {	
				result.append(value);
			}
			list.add(result.toString());
			return;
		}
		Set<Character> set = new HashSet();
		for (int i = idx; i < nums.length; i++) {
			if (set.contains(nums[i])) {
				continue;
			}
			set.add(nums[i]);
			swap(nums,idx,i);
			dfs(idx + 1,nums,list);
			swap(nums,idx,i);
		}
	}
	void swap(char[] nums, int i, int j) {
		char tmp = nums[i];
		nums[i] = nums[j];
		nums[j] = tmp;
	}
}