class Solution {
	List<Integer> largestDivisibleSubset(int arr) {
		int n = arr.length;
		int dp = new int[n];
		Arrays.fill(dp,1);
		int hash = new int[n];
		int maxi = 1;
		int lastIndex = 0;
		Arrays.sort(arr);
		for (int i = 0; i < n; i++) {
			hash[i] = i;
			for (int prev = 0; prev < i; prev++) {
				if ((arr[i] % arr[prev] == 0) && 1 + dp[prev] > dp[i]) {
					dp[i] = 1 + dp[prev];
					hash[i] = prev;
				}
				if (dp[i] > maxi) {
					maxi = dp[i];
					lastIndex = i;
				}
			}
		}
		ArrayList<Integer> list = new ArrayList<Integer>();
		list.add(arr[lastIndex]);
		while (hash[lastIndex] != lastIndex) {
			lastIndex = hash[lastIndex];
			list.add(arr[lastIndex]);
		}
		return list;
	}
}