class Solution {
	int[][] downPreprocessing(int[][] m) {
		int N = m.length;
		int M = m[0].length;
		int[][] down = new int[N][M];
		for (int i = N - 1; i >= 0; i--) {
			for (int j = 0; j < M; j++) {
				if (m[i][j] == 0) {
					down[i][j] = 0;
				} 
				else {
					down[i][j] = i + 1 < N && down[i + 1][j] != 0 ? 1 + down[i + 1][j] : 1;
				}
			}
		}
		return down;
	}
	int largest1BorderedSquare(int[][] m) {
		if (m == null || m.length == 0 || m[0].length == 0) {
			return 0;
		}
		int N = m.length;
		int M = m[0].length;
		int ans = 0;
		int[][] right = rightPreprocessing(m);
		int[][] down = downPreprocessing(m);
		for (int i = 0; i < N; i++) {
			for (int j = 0; j < M; j++) {
				for (int k = 1; k <= Math.min(N - i,M - j); k++) {
					if (right[i][j] >= k && down[i][j] >= k && down[i][j + k - 1] >= k && right[i + k - 1][j] >= k) {
						ans = Math.max(ans,k * k);
					}
				}
			}
		}
		return ans;
	}
	int[][] rightPreprocessing(int[][] m) {
		int N = m.length;
		int M = m[0].length;
		int[][] right = new int[N][M];
		for (int i = 0; i < N; i++) {
			for (int j = M - 1; j >= 0; j--) {
				if (m[i][j] == 0) {
					right[i][j] = 0;
				} 
				else {
					right[i][j] = j + 1 < M && right[i][j + 1] != 0 ? 1 + right[i][j + 1] : 1;
				}
			}
		}
		return right;
	}
}