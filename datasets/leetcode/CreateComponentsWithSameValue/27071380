class Solution {
	ArrayList<Integer> Divisors(int n) {
		ArrayList<Integer> ret = new ArrayList<Integer>();
		for (int i = 1; i <= Math.sqrt(n); i++) {
			if (n % i == 0) {
				if (n / i == i) {
					ret.add(i);
				} 
				else {
					ret.add(i);
					ret.add(n / i);
				}
			}
		}
		return ret;
	}
	int componentValue(int[] v, int[][] ed) {
		int n = v.length;
		int sum = 0, temp = 0;
		boolean all = true;
		for (int i = 0; i < n; i++) {
			sum += v[i];
			if (i > 0) {
				if (v[i] != v[i - 1]) {
					all = false;
				}
			}
		}
		if (all) {
			return n - 1;
		}
		ArrayList<Integer> fac = Divisors(sum);
		if (fac.size() <= 2) {
			return 0;
		}
		int ans = 0;
		ArrayList<ArrayList<Integer>> adj = new ArrayList<>();
		for (int i = 0; i < n; i++) {
			adj.add(new ArrayList<Integer>());
		}
		for (int i = 0; i < n - 1; i++) {
			adj.get(ed[i][0]).add(ed[i][1]);
			adj.get(ed[i][1]).add(ed[i][0]);
		}
		Collections.sort(fac);
		for (int i: fac) {	
			if (i > 1) {
				int[] par = new int[n + 1];
				Arrays.fill(par,-1);
				int[] vis = new int[n + 1];
				if (dfs(0,par,adj,vis,v,i) == 0) {
					int cc = sum / i;
					return cc - 1;
				}
			}
		}
		return 0;
	}
	int dfs(int node, int[] par, ArrayList<ArrayList<Integer>> adj, int[] vis, int[] v, int tar) {
		par[node] = v[node];
		vis[node] = 1;
		for (int itr: adj.get(node)) {	
			if (vis[itr] == 0) {
				vis[itr] = 1;
				par[node] += dfs(itr,par,adj,vis,v,tar);
				if (par[node] > tar) {
					return 1000000;
				}
			}
		}
		if (par[node] == tar) {
			return 0;
		}
		return par[node];
	}
}