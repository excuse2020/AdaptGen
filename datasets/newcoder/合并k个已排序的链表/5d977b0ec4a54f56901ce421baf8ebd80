class Solution {
	ListNode Merge(ListNode pHead1, ListNode pHead2) {
		if (pHead1 == null) {
			return pHead2;
		} 
		else if (pHead2 == null) {
			return pHead1;
		}
		ListNode dummyNode = new ListNode(-1001);
		ListNode cur = dummyNode;
		ListNode cur1 = pHead1;
		ListNode cur2 = pHead2;
		while (true) {
			if (cur1.val <= cur2.val) {
				cur.next = cur1;
				cur = cur.next;
				cur1 = cur1.next;
			} 
			else {
				cur.next = cur2;
				cur = cur.next;
				cur2 = cur2.next;
			}
			if (cur1 == null) {
				cur.next = cur2;
				break;
			} 
			else if (cur2 == null) {
				cur.next = cur1;
				break;
			}
		}
		return dummyNode.next;
	}
	ListNode mergeKLists(ArrayList<ListNode> lists) {
		ListNode dummyNode = new ListNode(-1001);
		ListNode pHead1, pHead2;
		pHead1 = dummyNode;
		for (int i = 0; i < lists.size(); i++) {
			pHead2 = lists.get(i);
			pHead1 = Merge(pHead1,pHead2);
		}
		return dummyNode.next;
	}
}