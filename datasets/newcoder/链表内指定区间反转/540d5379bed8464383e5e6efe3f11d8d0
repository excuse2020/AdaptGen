class Solution {
	ListNode reverseBetween(ListNode head, int m, int n) {
		ListNode first = new ListNode(0);
		first.next = head;
		ListNode pre = null;
		ListNode post = null;
		ListNode leftNode = head;
		ListNode rightNode = null;
		for (int i = 1; i <= n; i++) {
			if (i == m - 1) {
				pre = head;
				leftNode = head.next;
			}
			if (i == n) {
				post = head.next;
				rightNode = head;
			}
			head = head.next;
		}
		System.out.println(pre + "    ");
		if (pre != null) {
			pre.next = null;
		}
		rightNode.next = null;
		reverseLinkList(leftNode);
		leftNode.next = post;
		if (pre != null) {
			pre.next = rightNode;
		} 
		else {
			return rightNode;
		}
		return first.next;
	}
	void reverseLinkList(ListNode head) {
		ListNode node = null;
		while (head != null) {
			ListNode temp = head.next;
			head.next = node;
			node = head;
			head = temp;
		}
	}
}