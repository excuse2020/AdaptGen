class Solution {
	boolean canEat(int[] piles, int h, int k) {
		int count = 0;
		for (int i = 0; i < piles.length; ++i) {
			count += Math.ceil((double) piles[i] / (double) k);
		}
		return count <= h;
	}
	int minEatingSpeed(int[] piles, int h) {
		Arrays.sort(piles);
		int left = 1;
		int right = piles[piles.length - 1] + 1;
		while (left <= right) {
			int mid = left + (right - left) / 2;
			if (canEat(piles,h,mid)) {
				right = mid - 1;
			} 
			else {
				left = mid + 1;
			}
		}
		return left;
	}
}