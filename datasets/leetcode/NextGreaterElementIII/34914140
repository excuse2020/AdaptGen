class Solution {
	String MAX = String.valueOf(Integer.MAX_VALUE);
	int charArrayToInt(char[] nums) {
		String s = String.valueOf(nums);
		if (compare(s,MAX) > 0) {
			return -1;
		}
		return Integer.parseInt(s);
	}
	int compare(String s1, String s2) {
		int len1 = s1.length(), len2 = s2.length();
		return len1 == len2 ? s1.compareTo(s2) : len1 - len2;
	}
	int indexOfNonIncreasingSuffix(char[] nums) {
		int N = nums.length, i = N - 1;
		while (i > 0 && nums[i - 1] >= nums[i]) {
			--i;
		}
		return i;
	}
	char[] intToCharArray(int n) {
		String s = String.valueOf(n);
		return s.toCharArray();
	}
	boolean isSortedNonIncreasing(char[] nums) {
		int N = nums.length;
		for (int i = 1; i < N; ++i) {
			if (nums[i - 1] < nums[i]) {
				return false;
			}
		}
		return true;
	}
	int lastIndexOfGreater(char[] nums, char num) {
		int N = nums.length, i = N - 1;
		while (i > 0 && num >= nums[i]) {
			--i;
		}
		return i;
	}
	int nextGreaterElement(int n) {
		char[] nums = intToCharArray(n);
		if (isSortedNonIncreasing(nums)) {
			return -1;
		}
		nextPermutation(nums);
		return charArrayToInt(nums);
	}
	void nextPermutation(char[] nums) {
		int index = indexOfNonIncreasingSuffix(nums);
		if (index > 0) {
			int greater = lastIndexOfGreater(nums,nums[index - 1]);
			swap(nums,index - 1,greater);
		}
		reverseSuffix(nums,index);
	}
	void reverseSuffix(char[] nums, int start) {
		int end = nums.length - 1;
		while (start < end) {
			swap(nums,start++,end--);
		}
	}
	void swap(char[] nums, int i, int j) {
		char temp = nums[i];
		nums[i] = nums[j];
		nums[j] = temp;
	}
}