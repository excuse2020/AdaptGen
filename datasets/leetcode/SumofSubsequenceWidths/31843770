class Solution {
	int mod = (int) 1e9 + 7;
	long[] power;
	long effect(int curr, int len) {
		long plus = power[curr];
		long minus = power[len - curr - 1];
		return (plus - minus + mod) % mod;
	}
	void initPower() {
		power[0] = 1;
		for (int i = 1; i < power.length; i++) {
			power[i] = (2 * power[i - 1]) % mod;
		}
	}
	int sumSubseqWidths(int[] nums) {
		Arrays.sort(nums);
		int len = nums.length;
		power = new long[len];
		initPower();
		long ans = 0;
		for (int i = 0; i < len; i++) {
			ans = (ans + (nums[i] * effect(i,len)) % mod) % mod;
		}
		return (int) ans % mod;
	}
}