class Solution {
	int n;
	int[] result;
	Set<Integer> valuesSeen;
	boolean backtrack(int index) {
		if (isFinalResult()) {
			return true;
		}
		boolean solutionFound = false;
		for (int value = n; value > 0; value--) {
			if (isValid(value,index)) {
				result[index] = value;
				valuesSeen.add(value);
				if (value != 1) {
					result[index + value] = value;
				}
				solutionFound = backtrack(findNextIndex());
				if (!solutionFound) {
					result[index] = 0;
					valuesSeen.remove(value);
					if (value != 1) {
						result[index + value] = 0;
					}
				}
			}
		}
		return solutionFound;
	}
	int[] constructDistancedSequence(int n) {
		this.n = n;
		result = new int[2 * n - 1];
		valuesSeen = new HashSet<>();
		backtrack(0);
		return result;
	}
	int findNextIndex() {
		for (int i = 0; i < result.length; i++) {
			if (result[i] == 0) {
				return i;
			}
		}
		return -1;
	}
	boolean isFinalResult() {
		for (int val: result) {	
			if (val == 0) {
				return false;
			}
		}
		return true;
	}
	boolean isValid(int value, int index) {
		if (result[index] != 0) {
			return false;
		}
		if (value != 1) {
			if (value + index >= result.length || result[index + value] != 0) {
				return false;
			}
		}
		return !valuesSeen.contains(value);
	}
}