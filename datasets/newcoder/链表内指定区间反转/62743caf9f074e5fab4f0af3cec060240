class Solution {
	ListNode reverseBetween(ListNode head, int m, int n) {
		if (head == null || head.next == null || m == n) {
			return head;
		}
		ListNode sourceHead = head;
		ListNode prem = null;
		ListNode behindn = null;
		for (int i = 1; i < m; i++) {
			if (i + 1 == m) {
				prem = head;
				System.out.println("prem:" + prem.val);
			}
			head = head.next;
		}
		Stack<ListNode> stack = new Stack<>();
		for (int j = m; j <= n; j++) {
			stack.push(head);
			head = head.next;
		}
		behindn = head;
		ListNode node = new ListNode(-1);
		ListNode tempNode = node;
		while (!stack.isEmpty()) {
			node.next = stack.pop();
			node = node.next;
		}
		if (prem != null) {
			prem.next = tempNode.next;
		} 
		else {
			sourceHead = tempNode.next;
		}
		node.next = behindn;
		return sourceHead;
	}
}