class Solution {
	int eatenApples(int[] apples, int[] days) {
		PriorityQueue<Pair<Integer, Integer>> pq = new PriorityQueue<>((a, b) -> {a.getKey() - b.getKey()});
		int day = 1;
		int count = 0;
		for (int i = 0; i < apples.length; i++) {
			if (i + days[i] > day) {
				pq.offer(new Pair(i + days[i], apples[i]));
			}
			while (!pq.isEmpty() && pq.peek().getKey() <= day) {
				pq.poll();
			}
			if (!pq.isEmpty()) {
				Pair<Integer, Integer> p = pq.poll();
				if (p.getValue() > 1) {
					pq.offer(new Pair<>(p.getKey(), p.getValue() - 1));
				}
				count++;
			}
			day++;
		}
		while (!pq.isEmpty()) {
			while (!pq.isEmpty() && pq.peek().getKey() <= day) {
				pq.poll();
			}
			if (!pq.isEmpty()) {
				Pair<Integer, Integer> p = pq.poll();
				if (p.getValue() > 1) {
					pq.offer(new Pair<>(p.getKey(), p.getValue() - 1));
				}
				count++;
			}
			day++;
		}
		return count;
	}
}