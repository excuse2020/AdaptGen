class Solution {
	int MOD = 1000000007;
	int countPaths(int[][] grid) {
		int m = grid.length;
		int n = grid[0].length;
		int[][] dp = new int[m][n];
		for (int[] row: dp) {	
			Arrays.fill(row,-1);
		}
		int cnt = 0;
		for (int i = 0; i < m; i++) {
			for (int j = 0; j < n; j++) {
				cnt = (cnt + dfs(i,j,m,n,grid,dp)) % MOD;
			}
		}
		return cnt;
	}
	int dfs(int i, int j, int m, int n, int[][] grid, int[][] dp) {
		if (dp[i][j] != -1) {
			return dp[i][j];
		}
		int cnt = 1;
		for (int di = -1; di <= 1; di++) {
			for (int dj = -1; dj <= 1; dj++) {
				int i1 = i + di;
				int j1 = j + dj;
				if (Math.abs(di) != Math.abs(dj) && i1 >= 0 && i1 < m && j1 >= 0 && j1 < n && grid[i1][j1] > grid[i][j]) {
					cnt = (cnt + dfs(i1,j1,m,n,grid,dp)) % MOD;
				}
			}
		}
		return dp[i][j] = cnt;
	}
}