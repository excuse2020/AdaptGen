class Solution {
	Integer dp;
	Map<Integer, List<Integer>> map = new HashMap();
	int mod = (int) 1e9 + 7;
	void init(Map<Integer, List<Integer>> map) {
		map.put(0,Arrays.asList(4,6));
		map.put(1,Arrays.asList(6,8));
		map.put(2,Arrays.asList(7,9));
		map.put(3,Arrays.asList(4,8));
		map.put(4,Arrays.asList(0,3,9));
		map.put(5,Arrays.asList());
		map.put(6,Arrays.asList(0,1,7));
		map.put(7,Arrays.asList(2,6));
		map.put(8,Arrays.asList(1,3));
		map.put(9,Arrays.asList(2,4));
	}
	int knightDialer(int n) {
		init(map);
		this.dp = new Integer[10][n + 1];
		int ans = 0;
		for (int i = 0; i <= 9; i++) {
			ans = (ans + paths(i,n - 1)) % mod;
		}
		return ans;
	}
	int paths(int num, int n) {
		if (n == 0) {
			return 1;
		}
		if (dp[num][n] != null) {
			return dp[num][n];
		}
		int ans = 0;
		for (int nextNum: map.get(num)) {	
			ans = (ans + paths(nextNum,n - 1)) % mod;
		}
		return dp[num][n] = ans;
	}
}