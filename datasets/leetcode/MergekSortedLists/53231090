class Solution {
	ListNode merge(ListNode l1, ListNode l2) {
		ListNode dummy = new ListNode(-1);
		ListNode temp = dummy;
		while (l1 != null && l2 != null) {
			if (l1.val <= l2.val) {
				temp.next = l1;
				l1 = l1.next;
			} 
			else {
				temp.next = l2;
				l2 = l2.next;
			}
			temp = temp.next;
		}
		if (l1 != null) {
			temp.next = l1;
		} 
		else {
			temp.next = l2;
		}
		return dummy.next;
	}
	ListNode mergeKLists(ListNode[] lists) {
		if (lists == null || lists.length == 0) {
			return null;
		}
		return mergeSort(lists,0,lists.length - 1);
	}
	ListNode mergeSort(ListNode[] lists, int left, int right) {
		if (left >= right) {
			return lists[left];
		}
		int mid = left + (right - left) / 2;
		ListNode l1 = mergeSort(lists,left,mid);
		ListNode l2 = mergeSort(lists,mid + 1,right);
		return merge(l1,l2);
	}
}