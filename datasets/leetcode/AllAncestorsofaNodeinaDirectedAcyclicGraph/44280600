class Solution {
	void dfs(List<List<Integer>> adjList, List<Set<Integer>> result, boolean[] visited, int vertex, int source) {
		for (int i: adjList.get(vertex)) {	
			if (!visited[i]) {
				visited[i] = true;
				result.get(i).add(source);
				dfs(adjList,result,visited,i,source);
			}
		}
	}
	List<List<Integer>> getAncestors(int n, int[][] edges) {
		List<List<Integer>> adjList = new ArrayList<>();
		List<Set<Integer>> result = new ArrayList<>();
		for (int i = 0; i < n; i++) {
			adjList.add(new ArrayList<>());
			result.add(new HashSet<>());
		}
		for (int i = 0; i < edges.length; i++) {
			adjList.get(edges[i][0]).add(edges[i][1]);
			result.get(edges[i][1]).add(edges[i][0]);
		}
		for (int i = 0; i < n; i++) {
			boolean[] visited = new boolean[n];
			visited[i] = true;
			dfs(adjList,result,visited,i,i);
		}
		List<List<Integer>> listOfLists = result.stream().map((set) -> {set.stream().sorted().collect(Collectors.toList())}).collect(Collectors.toList());
		return listOfLists;
	}
}