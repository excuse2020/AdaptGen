class Solution {
	String shortestPalindrome(String s) {
		StringBuilder temp = new StringBuilder(s);
		StringBuilder result = new StringBuilder(s);
		char[] t = temp.reverse().toString().toCharArray();
		char[] pat = s.toCharArray();
		int n = s.length();
		int[] preComp = new int[n];
		int count = 1;
		for (int i = 0, j = 1; j < n; ) {
			if (pat[j] == pat[i]) {
				preComp[j] = count++;
				i++;
				j++;
				continue;
			}
			count = 1;
			i = 0;
			while (j < n && pat[i] != pat[j]) {
				j++;
			}
		}
		int i = -1, j = 0;
		while (j < n) {
			while (j < n && i == -1 && pat[i + 1] != t[j]) {
				j++;
			}
			if (pat[i + 1] == t[j]) {
				i++;
				j++;
			} 
			else {
				i = preComp[i] - 1;
			}
		}
		for (i = i + 1; i < n; i++) {
			result.insert(0,pat[i]);
		}
		return result.toString();
	}
}