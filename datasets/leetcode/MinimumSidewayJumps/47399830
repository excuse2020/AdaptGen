class Solution {
	int helper(int arr, int preslane, int idx, int n, int dp) {
		if (idx >= n - 1) {
			return 0;
		}
		if (preslane == arr[idx]) {
			return Integer.MAX_VALUE;
		}
		while (idx < n - 1 && arr[idx + 1] != preslane) {
			idx++;
		}
		if (idx >= n - 1) {
			return 0;
		}
		if (dp[preslane][idx] != -1) {
			return dp[preslane][idx];
		}
		int cnt1 = Integer.MAX_VALUE, cnt2 = Integer.MAX_VALUE;
		if (preslane == 2) {
			cnt1 = helper(arr,preslane - 1,idx,n,dp);
			cnt2 = helper(arr,preslane + 1,idx,n,dp);
			return dp[preslane][idx] = 1 + Math.min(cnt1,cnt2);
		}
		int cnt3 = Integer.MAX_VALUE, cnt4 = Integer.MAX_VALUE;
		if (preslane == 3) {
			cnt3 = helper(arr,preslane - 1,idx,n,dp);
			cnt4 = helper(arr,preslane - 2,idx,n,dp);
			return dp[preslane][idx] = 1 + Math.min(cnt3,cnt4);
		}
		int cnt5 = Integer.MAX_VALUE, cnt6 = Integer.MAX_VALUE;
		if (preslane == 1) {
			cnt5 = helper(arr,preslane + 1,idx,n,dp);
			cnt6 = helper(arr,preslane + 2,idx,n,dp);
			return dp[preslane][idx] = 1 + Math.min(cnt5,cnt6);
		}
		return dp[preslane][idx] = Math.min(cnt1,Math.min(cnt2,Math.min(cnt3,Math.min(cnt4,Math.min(cnt5,cnt6)))));
	}
	int minSideJumps(int[] arr) {
		int n = arr.length;
		int dp = new int[3 + 1][n + 1];
		for (int a: dp) {	
			Arrays.fill(a,-1);
		}
		return helper(arr,2,0,n,dp);
	}
}