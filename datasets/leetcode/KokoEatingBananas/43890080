class Solution {
	boolean canEatAll(int[] piles, int h, int speed) {
		int hNeeded = 0;
		for (int bananas: piles) {	
			hNeeded += (bananas + speed - 1) / speed;
		}
		return hNeeded <= h;
	}
	int getMaxPiles(int[] piles) {
		int max = Integer.MIN_VALUE;
		for (int bananas: piles) {	
			max = Math.max(max,bananas);
		}
		return max;
	}
	int minEatingSpeed(int[] piles, int h) {
		int left = 1;
		int right = getMaxPiles(piles);
		while (left < right) {
			int mid = left + (right - left) / 2;
			if (canEatAll(piles,h,mid)) {
				right = mid;
			} 
			else {
				left = mid + 1;
			}
		}
		return left;
	}
}