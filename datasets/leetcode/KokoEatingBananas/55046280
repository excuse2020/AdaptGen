class Solution {
	int calcEatSpeed(int[] piles, int h) {
		int n = piles.length;
		int time = 0;
		for (int i = 0; i < n; i++) {
			time += Math.ceil((double) (piles[i]) / (double) (h));
		}
		return time;
	}
	int findMax(int[] piles) {
		int max = Integer.MIN_VALUE;
		int n = piles.length;
		for (int i = 0; i < n; i++) {
			max = Math.max(max,piles[i]);
		}
		return max;
	}
	int minEatingSpeed(int[] piles, int h) {
		int low = 1;
		int high = findMax(piles);
		while (low <= high) {
			int mid = (low + high) / 2;
			int totalHrs = calcEatSpeed(piles,mid);
			if (totalHrs <= h) {
				high = mid - 1;
			} 
			else {
				low = mid + 1;
			}
		}
		return low;
	}
}