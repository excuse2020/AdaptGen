class Solution {
	List<List<Integer>> combinationSum2(int[] candidates, int target) {
		List<List<Integer>> list = new ArrayList<>();
		Arrays.sort(candidates);
		subArray(candidates,target,0,new ArrayList<>(),list);
		return list;
	}
	void subArray(int[] c, int t, int idx, ArrayList<Integer> temp, List<List<Integer>> list) {
		if (t == 0) {
			list.add(new ArrayList<>(temp));
			return;
		}
		if (t < 0) {
			return;
		}
		if (idx == c.length) {
			return;
		}
		temp.add(c[idx]);
		subArray(c,t - c[idx],idx + 1,temp,list);
		temp.remove(temp.size() - 1);
		while (idx + 1 < c.length && c[idx] == c[idx + 1]) {
			idx++;
		}
		subArray(c,t,idx + 1,temp,list);
	}
}