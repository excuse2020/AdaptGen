class Solution {
	boolean checkTarget(String[] words, String target) {
		for (String s: words) {	
			if (target.equals(s)) {
				return true;
			}
		}
		return false;
	}
	int closetTarget(String[] words, String target, int startIndex) {
		if (!checkTarget(words,target)) {
			return -1;
		}
		if (words[startIndex].equals(target)) {
			return 0;
		}
		HashSet<String> set1 = new HashSet<>();
		HashSet<String> set2 = new HashSet<>();
		int count1 = 0;
		int count2 = 0;
		int finalAns = 0;
		int startIndex1 = startIndex;
		int startIndex2 = startIndex;
		set1.add(target);
		set2.add(target);
		if (startIndex1 == words.length - 1) {
			startIndex1 = -1;
		}
		for (int i = startIndex1 + 1; i < words.length; i++) {
			if (set1.contains(words[i])) {
				count1++;
				break;
			} 
			else {
				count1++;
			}
			if (i == words.length - 1) {
				i = -1;
			}
		}
		if (startIndex2 == 0) {
			startIndex2 = words.length;
		}
		for (int i = startIndex2 - 1; i >= 0; i--) {
			if (set2.contains(words[i])) {
				count2++;
				break;
			} 
			else {
				count2++;
			}
			if (i == 0) {
				i = words.length;
			}
		}
		finalAns = Math.min(count1,count2);
		return finalAns;
	}
}