class Solution {
	String longestPalindrome(String s) {
		int currLen = 0, maxLen = 0;
		int n = s.length();
		String longestPalindrome = "";
		if (s.length() <= 1) {
			return s;
		}
		for (int centerIndex = 1; centerIndex < n - 1; centerIndex++) {
			int leftIndex = centerIndex - 1, rightIndex = centerIndex + 1;
			while (leftIndex >= 0 && rightIndex < n && s.charAt(leftIndex) == s.charAt(rightIndex)) {
				leftIndex--;
				rightIndex++;
			}
			currLen = (rightIndex - 1) - (leftIndex + 1) + 1;
			if (currLen > maxLen) {
				maxLen = currLen;
				longestPalindrome = s.substring(leftIndex + 1,rightIndex);
			}
		}
		for (int centerIndex = 0; centerIndex < n; centerIndex++) {
			int leftIndex = centerIndex, rightIndex = centerIndex + 1;
			while (leftIndex >= 0 && rightIndex < n && s.charAt(leftIndex) == s.charAt(rightIndex)) {
				leftIndex--;
				rightIndex++;
			}
			currLen = (rightIndex - 1) - (leftIndex + 1) + 1;
			if (currLen > maxLen) {
				maxLen = currLen;
				longestPalindrome = s.substring(leftIndex + 1,rightIndex);
			}
		}
		if (longestPalindrome.isEmpty()) {
			return s.substring(0,1);
		}
		return longestPalindrome;
	}
}