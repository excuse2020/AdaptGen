class Solution {
	int minTime(int n, int[][] edges, List<Boolean> hasApple) {
		Arrays.sort(edges,new Comparator<int[]>());
		Map<Integer, Integer> map = new HashMap<>();
		for (int[] edge: edges) {	
			if (map.containsKey(edge[1])) {
				map.put(edge[0],edge[1]);
			} 
			else {
				map.put(edge[1],edge[0]);
			}
		}
		map.put(0,0);
		int[] cover = new int[n];
		for (int i = 0; i < n; i++) {
			if (hasApple.get(i) == true) {
				int cur = i;
				while (map.get(cur) != 0) {
					cover[cur]++;
					cur = map.get(cur);
				}
				cover[cur]++;
			}
		}
		int ans = 0;
		for (int i = 0; i < n; i++) {
			if (i > 0 && cover[i] > 0) {
				ans++;
			}
		}
		return ans * 2;
	}
}