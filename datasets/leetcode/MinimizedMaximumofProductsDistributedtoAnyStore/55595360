class Solution {
	boolean canDistribute(int[] quantities, int n, int maxQuantity) {
		int countStores = 0;
		for (int quantity: quantities) {	
			countStores += Math.ceil((double) quantity / maxQuantity);
		}
		return countStores <= n;
	}
	int minimizedMaximum(int n, int[] quantities) {
		int start = 0, end = 0, ans = -1;
		for (int quantity: quantities) {	
			end = Math.max(end,quantity);
		}
		while (start <= end) {
			int mid = start + (end - start) / 2;
			if (canDistribute(quantities,n,mid)) {
				ans = mid;
				end = mid - 1;
			} 
			else {
				start = mid + 1;
			}
		}
		return ans;
	}
}