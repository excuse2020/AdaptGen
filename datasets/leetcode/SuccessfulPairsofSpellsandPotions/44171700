class Solution {
	int search(int[] num, long value) {
		int result = 0;
		int low = 0;
		int high = num.length - 1;
		int tempAns = -1;
		while (low <= high) {
			int mid = (low + high) / 2;
			if (num[mid] > value) {
				high = mid - 1;
			} 
			else if (num[mid] < value) {
				low = mid + 1;
			} 
			else if (num[mid] == value) {
				high = mid - 1;
				tempAns = mid;
			}
		}
		if (tempAns != -1) {
			return tempAns;
		} 
		else if (high >= 0 && num[high] > value) {
			return high;
		} 
		else if (num.length > low && num[low] > value) {
			return low;
		}
		return -1;
	}
	int[] successfulPairs(int[] spells, int[] potions, long success) {
		int[] pairs = new int[spells.length];
		int i = 0;
		Arrays.sort(potions);
		for (int spell: spells) {	
			long minSpell = (long) Math.ceil((double) success / spells[i]);
			int index = search(potions,minSpell);
			if (index < 0) {
				index = potions.length;
			}
			pairs[i] = potions.length - index;
			i++;
		}
		return pairs;
	}
}