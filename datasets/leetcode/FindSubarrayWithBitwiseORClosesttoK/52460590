class Solution {
	int getUniqueNumber(int[] arr, int j) {
		int num = 0;
		for (int i = arr.length - 1; i >= 0; i--) {
			num <<= 1;
			if (arr[i] != -1 && arr[j] >= arr[i]) {
				num |= 1;
			}
		}
		return num;
	}
	int minimumDifference(int[] nums, int k) {
		int res = Math.abs(k - nums[0]), andAll = nums[0];
		int[][] arr = new int[nums.length][32];
		for (int i = 0; i < nums.length; i++) {
			andAll &= nums[i];
			Arrays.fill(arr[i],-1);
			int x = nums[i], j = 0;
			while (x > 0) {
				if ((x & 1) == 1) {
					arr[i][j] = (i != 0 && arr[i - 1][j] != -1) ? arr[i - 1][j] : i;
				}
				x >>= 1;
				j++;
			}
			Set<Integer> vis = new HashSet<>();
			for (j = 0; j < 32; j++) {
				if (arr[i][j] != -1 && !vis.contains(arr[i][j])) {
					res = Math.min(res,Math.abs(k - getUniqueNumber(arr[i],j)));
					vis.add(arr[i][j]);
				}
			}
		}
		if (andAll == 0) {
			res = Math.min(res,k);
		}
		return res;
	}
}