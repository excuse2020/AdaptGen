class Solution {
	int maze(int i, int j, int dp, int grid) {
		if (i >= 0 && j >= 0 && grid[i][j] == 1) {
			return 0;
		}
		if (i == 0 && j == 0) {
			return 1;
		}
		if (i < 0 || j < 0) {
			return 0;
		}
		if (dp[i][j] != -1) {
			return dp[i][j];
		}
		int up = maze(i - 1,j,dp,grid);
		int down = maze(i,j - 1,dp,grid);
		return dp[i][j] = up + down;
	}
	int uniquePathsWithObstacles(int[][] Grid) {
		int m = Grid.length;
		int n = Grid[0].length;
		int dp = new int[m][n];
		for (int row: dp) {	
			Arrays.fill(row,-1);
		}
		return maze(m - 1,n - 1,dp,Grid);
	}
}