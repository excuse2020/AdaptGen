class Solution {
	List<int[]> ans;
	boolean visited;
	void dfs(int[][] land, int i, int j, int[] temp) {
		int m = land.length;
		int n = land[0].length;
		if (i < 0 || i >= m || j < 0 || j >= n || land[i][j] == 0 || visited[i][j]) {
			return;
		}
		visited[i][j] = true;
		boolean rowCond = (i + 1 == m) || (land[i + 1][j] == 0);
		boolean colCond = (j + 1 == n) || (land[i][j + 1] == 0);
		if (rowCond && colCond) {
			temp[2] = i;
			temp[3] = j;
			return;
		}
		dfs(land,i,j + 1,temp);
		dfs(land,i + 1,j,temp);
		dfs(land,i - 1,j,temp);
		dfs(land,i,j - 1,temp);
	}
	int[][] findFarmland(int[][] land) {
		int m = land.length;
		int n = land[0].length;
		visited = new boolean[m][n];
		ans = new ArrayList<>();
		for (int i = 0; i < m; i++) {
			for (int j = 0; j < n; j++) {
				if (!visited[i][j] && land[i][j] == 1) {
					int temp = new int[4];
					temp[0] = i;
					temp[1] = j;
					dfs(land,i,j,temp);
					ans.add(temp);
				}
			}
		}
		int ret = new int[ans.size()][4];
		for (int i = 0; i < ans.size(); i++) {
			ret[i] = ans.get(i);
		}
		return ret;
	}
}