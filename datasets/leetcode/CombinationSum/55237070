class Solution {
	List<List<Integer>> combinationSum(int[] candidates, int target) {
		ArrayList<List<Integer>> list = new ArrayList<>();
		getans(0,candidates,target,list,new ArrayList<>());
		return list;
	}
	void getans(int index, int[] arr, int target, ArrayList<List<Integer>> list, List<Integer> ds) {
		if (index == arr.length) {
			if (target == 0) {
				list.add(new ArrayList<>(ds));
			}
			return;
		}
		if (arr[index] <= target) {
			ds.add(arr[index]);
			getans(index,arr,target - arr[index],list,ds);
			ds.remove(ds.size() - 1);
		}
		getans(index + 1,arr,target,list,ds);
	}
}