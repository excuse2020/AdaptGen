class Solution {
	boolean check(String s1, String s2) {
		if (s1.length() != s2.length() + 1) {
			return false;
		}
		int temp = 1;
		int index1 = 0, index2 = 0;
		while (index1 < s1.length()) {
			if (index2 < s2.length() && s1.charAt(index1) != s2.charAt(index2)) {
				if (temp == 1) {
					index1++;
					temp--;
				} 
				else {
					return false;
				}
			} 
			else {
				index1++;
				index2++;
			}
		}
		return true;
	}
	int longestStrChain(String[] words) {
		int n = words.length;
		Arrays.sort(words,(String s1, String s2) -> {s1.length() - s2.length()});
		int[] dp = new int[n];
		Arrays.fill(dp,1);
		int ans = 0;
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < i; j++) {
				if (check(words[i],words[j]) && dp[j] + 1 > dp[i]) {
					dp[i] = 1 + dp[j];
				}
			}
			for (int t: dp) {	
				ans = Math.max(ans,t);
			}
		}
		return ans;
	}
}