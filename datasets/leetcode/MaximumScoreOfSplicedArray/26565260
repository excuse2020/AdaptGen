class Solution {
	int maxReplacement(int[] nums1, int[] nums2) {
		int n = nums1.length;
		int max = 0;
		int[] dp = new int[n];
		dp[n - 1] = nums2[n - 1] - nums1[n - 1];
		max = Math.max(dp[n - 1],max);
		for (int i = n - 2; i >= 0; i--) {
			dp[i] = Math.max(nums2[i] - nums1[i] + dp[i + 1],nums2[i] - nums1[i]);
			max = Math.max(max,dp[i]);
		}
		return max;
	}
	int maximumsSplicedArray(int[] nums1, int[] nums2) {
		int sum1 = 0;
		int sum2 = 0;
		for (int i = 0; i < nums1.length; i++) {
			sum1 += nums1[i];
			sum2 += nums2[i];
		}
		return Math.max(maxReplacement(nums1,nums2) + sum1,maxReplacement(nums2,nums1) + sum2);
	}
}