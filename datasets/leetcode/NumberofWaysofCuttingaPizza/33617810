class Solution {
	int dfs(int[][] prefixApples, int[][][] memo, int r, int c, int piecesLeft, int rows, int cols, int MOD) {
		if (piecesLeft == 0) {
			return prefixApples[rows][cols] - prefixApples[r][cols] + prefixApples[r][c] > 0 ? 1 : 0;
		}
		if (memo[r][c][piecesLeft - 1] != -1) {
			return memo[r][c][piecesLeft - 1];
		}
		int ways = 0;
		for (int i = r + 1; i < rows; i++) {
			if (prefixApples[i][cols] - prefixApples[r][cols] + prefixApples[r][c] > 0) {
				ways = (ways + dfs(prefixApples,memo,i,c,piecesLeft - 1,rows,cols,MOD)) % MOD;
			}
		}
		for (int j = c + 1; j < cols; j++) {
			if (prefixApples[rows][j] - prefixApples[rows][c] + prefixApples[r][c] > 0) {
				ways = (ways + dfs(prefixApples,memo,r,j,piecesLeft - 1,rows,cols,MOD)) % MOD;
			}
		}
		memo[r][c][piecesLeft - 1] = ways;
		return ways;
	}
	int ways(String[] pizza, int k) {
		int rows = pizza.length;
		int cols = pizza[0].length();
		int[][] prefixApples = new int[rows + 1][cols + 1];
		int MOD = 1000000007;
		int i = 1;
		int j = 1;
	}
}