class Solution {
	boolean canFinish(int numCourses, int[][] prerequisites) {
		ArrayList<ArrayList<Integer>> graph = new ArrayList<>();
		int m = prerequisites.length;
		int N = numCourses;
		for (int i = 0; i < N; i++) {
			graph.add(new ArrayList<>());
		}
		for (int i = 0; i < m; i++) {
			graph.get(prerequisites[i][0]).add(prerequisites[i][1]);
		}
		int[] indeg = new int[N];
		for (int i = 0; i < N; i++) {
			for (int it: graph.get(i)) {	
				indeg[it]++;
			}
		}
		Queue<Integer> q = new LinkedList<>();
		for (int i = 0; i < N; i++) {
			if (indeg[i] == 0) {
				q.add(i);
			}
		}
		List<Integer> ans = new ArrayList<>();
		while (!q.isEmpty()) {
			int curr = q.poll();
			ans.add(curr);
			for (int it: graph.get(curr)) {	
				indeg[it]--;
				if (indeg[it] == 0) {
					q.add(it);
				}
			}
		}
		return ans.size() == N;
	}
}