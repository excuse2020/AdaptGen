class Solution {
	int minSideJumps(int[] obstacles) {
		return solvetabSO(obstacles);
	}
	int solve(int[] obstacles, int curr, int pos) {
		if (pos == obstacles.length || pos == obstacles.length - 1) {
			return 0;
		}
		int ans = 0;
		if (pos != obstacles.length - 1 && obstacles[pos + 1] != curr) {
			return solve(obstacles,curr,pos + 1);
		} 
		else {
			ans = Integer.MAX_VALUE;
			for (int i = 1; i <= 3; i++) {
				if (curr != i && obstacles[pos] != i) {
					ans = Math.min(ans,1 + solve(obstacles,i,pos));
				}
			}
		}
		return ans;
	}
	int solvemem(int[] obstacles, int curr, int pos, int[][] dp) {
		if (pos == obstacles.length || pos == obstacles.length - 1) {
			return 0;
		}
		int ans = 0;
		if (dp[curr][pos] != -1) {
			return dp[curr][pos];
		}
		if (pos != obstacles.length - 1 && obstacles[pos + 1] != curr) {
			return solvemem(obstacles,curr,pos + 1,dp);
		} 
		else {
			ans = Integer.MAX_VALUE;
			for (int i = 1; i <= 3; i++) {
				if (curr != i && obstacles[pos] != i) {
					ans = Math.min(ans,1 + solvemem(obstacles,i,pos,dp));
				}
			}
		}
		dp[curr][pos] = ans;
		return dp[curr][pos];
	}
	int solvetab(int[] obstacles, int[][] dp) {
		int n = obstacles.length;
		dp[0][n - 1] = 0;
		dp[1][n - 1] = 0;
		dp[2][n - 1] = 0;
		dp[3][n - 1] = 0;
		for (int pos = n - 2; pos >= 0; pos--) {
			for (int curr = 1; curr <= 3; curr++) {
				if (pos != obstacles.length - 1 && obstacles[pos + 1] != curr) {
					dp[curr][pos] = dp[curr][pos + 1];
				} 
				else {
					int ans = Integer.MAX_VALUE;
					for (int i = 1; i <= 3; i++) {
						if (curr != i && obstacles[pos] != i) {
							ans = Math.min(ans,1 + dp[i][pos + 1]);
						}
					}
					dp[curr][pos] = ans;
				}
			}
		}
		return Math.min(dp[2][0],Math.min(1 + dp[1][0],1 + dp[3][0]));
	}
	int solvetabSO(int[] obstacles) {
		int n = obstacles.length;
		int curr = new int[4];
		int next = new int[4];
		Arrays.fill(curr,Integer.MAX_VALUE);
		Arrays.fill(next,Integer.MAX_VALUE);
		next[0] = 0;
		next[1] = 0;
		next[2] = 0;
		next[3] = 0;
		for (int pos = n - 2; pos >= 0; pos--) {
			for (int k = 1; k <= 3; k++) {
				if (pos != obstacles.length - 1 && obstacles[pos + 1] != k) {
					curr[k] = next[k];
				} 
				else {
					int ans = Integer.MAX_VALUE;
					for (int i = 1; i <= 3; i++) {
						if (k != i && obstacles[pos] != i) {
							ans = Math.min(ans,1 + next[i]);
						}
					}
					curr[k] = ans;
				}
			}
			next = curr;
		}
		return Math.min(next[2],Math.min(1 + next[1],1 + next[3]));
	}
}