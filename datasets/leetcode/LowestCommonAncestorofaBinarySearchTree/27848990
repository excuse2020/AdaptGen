class Solution {
	TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
		return lowestCommonAncestorIterative(root,p,q);
	}
	TreeNode lowestCommonAncestorIterative(TreeNode root, TreeNode p, TreeNode q) {
		if (root == null) {
			return root;
		}
		while (root != null) {
			if (p.val > root.val && q.val > root.val) {
				root = root.right;
			} 
			else if (p.val < root.val && q.val < root.val) {
				root = root.left;
			} 
			else {
				return root;
			}
		}
		return null;
	}
	TreeNode lowestCommonAncestorRecursion(TreeNode root, TreeNode p, TreeNode q) {
		if (root == null) {
			return root;
		}
		if (p.val > root.val && q.val > root.val) {
			return lowestCommonAncestorRecursion(root.right,p,q);
		}
		if (p.val < root.val && q.val < root.val) {
			return lowestCommonAncestorRecursion(root.left,p,q);
		}
		return root;
	}
}