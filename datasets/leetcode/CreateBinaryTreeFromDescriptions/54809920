class Solution {
	TreeNode createBinaryTree(int[][] descriptions) {
		Map<Integer, TreeNode> map = new HashMap<>();
		Set<Integer> set = new HashSet<>();
		for (int i = 0; i < descriptions.length; i++) {
			set.add(descriptions[i][0]);
		}
		for (int i = 0; i < descriptions.length; i++) {
			TreeNode parent = null;
			TreeNode child = null;
			if (map.containsKey(descriptions[i][0])) {
				parent = map.get(descriptions[i][0]);
			} 
			else {
				parent = new TreeNode(descriptions[i][0]);
			}
			if (map.containsKey(descriptions[i][1])) {
				child = map.get(descriptions[i][1]);
			} 
			else {
				child = new TreeNode(descriptions[i][1]);
			}
			if (descriptions[i][2] == 1) {
				parent.left = child;
			} 
			else {
				parent.right = child;
			}
			map.put(descriptions[i][0],parent);
			map.put(descriptions[i][1],child);
		}
		for (int i = 0; i < descriptions.length; i++) {
			set.remove(descriptions[i][1]);
		}
		int rootVal = set.iterator().next();
		return map.get(rootVal);
	}
}