class Solution {
	List<List<Integer>> generate(int numRows) {
		List<List<Integer>> pascalTriangleList = new ArrayList<>();
		pascalTriangleList.add(List.of(1));
		return generate(pascalTriangleList,numRows);
	}
	List<List<Integer>> generate(List<List<Integer>> result, int deep) {
		if (deep == 1) {
			return result;
		}
		var oldRow = getLastRow(result);
		var newRow = new ArrayList<Integer>(oldRow.size() + 1);
		result.add(newRow);
		int i = 1;
		newRow.add(1);
		while (i < oldRow.size()) {
			newRow.add(oldRow.get(i - 1) + oldRow.get(i));
			i++;
		}
		newRow.add(1);
		return generate(result,deep - 1);
	}
	List<Integer> getLastRow(List<List<Integer>> pascalTriangleList) {
		return pascalTriangleList.get(pascalTriangleList.size() - 1);
	}
}