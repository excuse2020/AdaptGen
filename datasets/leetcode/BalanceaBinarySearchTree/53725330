class Solution {
	TreeNode balanceBST(TreeNode root) {
		if (root == null) {
			return root;
		}
		List<Integer> inorder = new ArrayList<>();
		inOrderTraversal(root,inorder);
		return buildTree(inorder,0,inorder.size() - 1);
	}
	TreeNode buildTree(List<Integer> inorder, int start, int end) {
		if (start > end) {
			return null;
		}
		int mid = (start + end) / 2;
		return new TreeNode(inorder.get(mid), buildTree(inorder,start,mid - 1), buildTree(inorder,mid + 1,end));
	}
	void inOrderTraversal(TreeNode root, List<Integer> inorder) {
		if (root == null) {
			return;
		}
		inOrderTraversal(root.left,inorder);
		inorder.add(root.val);
		inOrderTraversal(root.right,inorder);
	}
}