class Solution {
	ListNode deleteMiddle(ListNode head) {
		if (head.next == null) {
			return head.next;
		}
		ListNode stablePointer = head;
		ListNode unstablePointer = head;
		ListNode entryPointer = null;
		while (unstablePointer != null && unstablePointer.next != null) {
			entryPointer = stablePointer;
			stablePointer = stablePointer.next;
			unstablePointer = unstablePointer.next.next;
		}
		entryPointer.next = entryPointer.next.next;
		return head;
	}
}
class Solution {
	ListNode deleteMiddle(ListNode head) {
		if (head.next == null) {
			return head.next;
		}
		ListNode traverseNode = head;
		int size = 0;
		while (traverseNode != null) {
			traverseNode = traverseNode.next;
			size++;
		}
		size = size / 2;
		traverseNode = head;
		while (size > 1) {
			traverseNode = traverseNode.next;
			size--;
		}
		traverseNode.next = traverseNode.next.next;
		return head;
	}
}