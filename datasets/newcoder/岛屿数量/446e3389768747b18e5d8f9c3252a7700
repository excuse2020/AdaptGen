class Solution {
	void backtrack(char[][] grid, int i, int n, int j, int m) {
		grid[i][j] = '0';
		if (i - 1 >= 0 && grid[i - 1][j] == '1') {
			backtrack(grid,i - 1,n,j,m);
		}
		if (i + 1 < n && grid[i + 1][j] == '1') {
			backtrack(grid,i + 1,n,j,m);
		}
		if (j - 1 >= 0 && grid[i][j - 1] == '1') {
			backtrack(grid,i,n,j - 1,m);
		}
		if (j + 1 < m && grid[i][j + 1] == '1') {
			backtrack(grid,i,n,j + 1,m);
		}
	}
	int solve(char[][] grid) {
		int n = grid.length;
		if (n == 0) {
			return 0;
		}
		int m = grid[0].length;
		int count = 0;
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < m; j++) {
				if (grid[i][j] == '1') {
					count++;
					backtrack(grid,i,n,j,m);
				}
			}
		}
		return count;
	}
}