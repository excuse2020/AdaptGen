class Solution {
	int[] parent;
	int[] rank;
	int find(int x) {
		if (parent[x] == x) {
			return parent[x];
		} 
		else {
			parent[x] = find(parent[x]);
			return parent[x];
		}
	}
	int regionsBySlashes(String[] grid) {
		parent = new int[4 * grid.length];
		rank = new int[4 * grid.length];
		for (int i = 0; i < parent.length; i++) {
			parent[i] = i;
			rank[i] = 0;
		}
		int i = 0;
		int j = 0;
		char ch = grid[i].charAt(j);
		int bno = i * grid.length + j;
	}
	void union(int xl, int yl) {
		if (rank[xl] < rank[yl]) {
			parent[xl] = yl;
		} 
		else if (rank[yl] < rank[xl]) {
			parent[yl] = xl;
		} 
		else {
			parent[xl] = yl;
			rank[yl]++;
		}
	}
	void unionHelper(int x, int y) {
		int xl = find(x);
		int yl = find(y);
		if (xl != yl) {
			union(xl,yl);
		}
	}
}