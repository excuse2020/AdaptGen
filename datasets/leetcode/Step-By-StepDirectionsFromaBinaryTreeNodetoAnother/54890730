class Solution {
	boolean findpath(TreeNode root, int target, StringBuilder path) {
		if (root == null) {
			return false;
		}
		if (root.val == target) {
			return true;
		}
		path.append("L");
		if (findpath(root.left,target,path)) {
			return true;
		}
		path.setLength(path.length() - 1);
		path.append("R");
		if (findpath(root.right,target,path)) {
			return true;
		}
		path.setLength(path.length() - 1);
		return false;
	}
	String getDirections(TreeNode root, int startValue, int destValue) {
		TreeNode LCA = lca(root,startValue,destValue);
		StringBuilder SourceToLCA = new StringBuilder();
		StringBuilder LCAToDest = new StringBuilder();
		findpath(LCA,startValue,SourceToLCA);
		findpath(LCA,destValue,LCAToDest);
		StringBuilder result = new StringBuilder();
		for (int i = 0; i < SourceToLCA.length(); i++) {
			result.append("U");
		}
		result.append(LCAToDest);
		return result.toString();
	}
	TreeNode lca(TreeNode root, int p, int q) {
		if (root == null || root.val == p || root.val == q) {
			return root;
		}
		TreeNode left = lca(root.left,p,q);
		TreeNode right = lca(root.right,p,q);
		if (left == null) {
			return right;
		}
		if (right == null) {
			return left;
		} 
		else {
			return root;
		}
	}
}