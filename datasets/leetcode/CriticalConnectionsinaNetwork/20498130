class Solution {
	Map<Integer, List<Integer>> adjList = new HashMap<>();
	int[] entryTime, min;
	List<List<Integer>> res = new ArrayList<>();
	int time = 0;
	boolean[] visited;
	List<List<Integer>> criticalConnections(int n, List<List<Integer>> connections) {
		visited = new boolean[n];
		entryTime = new int[n];
		min = new int[n];
		for (int i = 0; i <= n; i++) {
			adjList.put(i,new ArrayList<>());
		}
		for (List<Integer> connection: connections) {	
			int a = connection.get(0), b = connection.get(1);
			adjList.get(a).add(b);
			adjList.get(b).add(a);
		}
		dfs(0,-1);
		return res;
	}
	void dfs(int node, int parent) {
		visited[node] = true;
		entryTime[node] = min[node] = time++;
		for (int next: adjList.get(node)) {	
			if (next != parent) {
				if (visited[next]) {
					min[node] = Math.min(min[node],entryTime[next]);
				} 
				else {
					dfs(next,node);
					min[node] = Math.min(min[node],min[next]);
					if (entryTime[node] < min[next]) {
						res.add(List.of(node,next));
					}
				}
			}
		}
	}
}