class Solution {
	int[] findOrder(int numCourses, int[][] prerequisites) {
		List<List<Integer>> adjList = new ArrayList<>();
		for (int i = 0; i < numCourses; i++) {
			adjList.add(new ArrayList<>());
		}
		for (int i = 0; i < prerequisites.length; i++) {
			int from = prerequisites[i][1];
			int to = prerequisites[i][0];
			adjList.get(from).add(to);
		}
		return topoSort(numCourses,adjList);
	}
	int[] topoSort(int numCourses, List<List<Integer>> adjList) {
		int indegree = new int[numCourses];
		for (int i = 0; i < numCourses; i++) {
			for (int adjNode: adjList.get(i)) {	
				indegree[adjNode]++;
			}
		}
		Queue<Integer> q = new LinkedList<>();
		for (int i = 0; i < numCourses; i++) {
			if (indegree[i] == 0) {
				q.offer(i);
			}
		}
		int topoElementCount = 0;
		int courseOrdering = new int[numCourses];
		Arrays.fill(courseOrdering,-1);
		while (!q.isEmpty()) {
			int front = q.poll();
			courseOrdering[topoElementCount] = front;
			topoElementCount++;
			for (int adjNode: adjList.get(front)) {	
				indegree[adjNode]--;
				if (indegree[adjNode] == 0) {
					q.offer(adjNode);
				}
			}
		}
		return topoElementCount == numCourses ? courseOrdering : new int[0];
	}
}