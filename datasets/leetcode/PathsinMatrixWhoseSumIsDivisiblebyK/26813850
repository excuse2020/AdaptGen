class Solution {
	int mod = (int) Math.pow(10,9) + 7;
	int numberOfPaths(int[][] grid, int k) {
		int n = grid.length;
		int m = grid[0].length;
		int[][][] dp = new int[n][m][k];
		for (int[][] e: dp) {	
			for (int[] ee: e) {	
				Arrays.fill(ee,-1);
			}
		}
		return sol(grid,n - 1,m - 1,k,0,dp) % mod;
	}
	int sol(int[][] grid, int n, int m, int k, int sum, int[][][] dp) {
		if (n < 0 || m < 0) {
			return 0;
		}
		if (n == 0 && m == 0) {
			if ((sum + grid[0][0]) % k == 0) {
				return dp[n][m][sum] = 1;
			}
			return 0;
		}
		if (dp[n][m][sum] != -1) {
			return dp[n][m][sum] % mod;
		}
		int up = sol(grid,n - 1,m,k,(sum + grid[n][m]) % k,dp) % mod;
		int down = sol(grid,n,m - 1,k,(sum + grid[n][m]) % k,dp) % mod;
		return dp[n][m][sum] = (up + down) % mod;
	}
}