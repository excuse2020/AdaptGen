class Solution {
	int col;
	int[][] grid;
	Queue<int[]> q = new LinkedList();
	int row;
	void dfs(int i, int j) {
		if (i < 0 || j < 0 || i >= row || j >= col || grid[i][j] != 1) {
			return;
		}
		grid[i][j] = 2;
		q.offer(new int{i, j});
		dfs(i + 1,j);
		dfs(i - 1,j);
		dfs(i,j + 1);
		dfs(i,j - 1);
	}
	int shortestBridge(int[][] grid) {
		this.grid = grid;
		row = grid.length;
		col = grid[0].length;
		boolean mark = false;
		int res = 0;
		for (int i = 0; i < row; i++) {
			if (mark) {
				break;
			}
			for (int j = 0; j < col; j++) {
				if (grid[i][j] == 1) {
					dfs(i,j);
					mark = true;
					break;
				}
			}
		}
		while (!q.isEmpty()) {
			int sz = q.size();
			for (int i = 0; i < sz; i++) {
				int[] point = q.poll();
				int x = point[0];
				int y = point[1];
				if (x + 1 < row && grid[x + 1][y] == 0) {
					q.offer(new int{x + 1, y});
					grid[x + 1][y] = 2;
				}
				if (x - 1 >= 0 && grid[x - 1][y] == 0) {
					q.offer(new int{x - 1, y});
					grid[x - 1][y] = 2;
				}
				if (y + 1 < col && grid[x][y + 1] == 0) {
					q.offer(new int{x, y + 1});
					grid[x][y + 1] = 2;
				}
				if (y - 1 >= 0 && grid[x][y - 1] == 0) {
					q.offer(new int{x, y - 1});
					grid[x][y - 1] = 2;
				}
				if (x + 1 < row && grid[x + 1][y] == 1 || x - 1 >= 0 && grid[x - 1][y] == 1 || y + 1 < row && grid[x][y + 1] == 1 || y - 1 >= 0 && grid[x][y - 1] == 1) {
					return res;
				}
			}
			res++;
		}
		return res;
	}
}