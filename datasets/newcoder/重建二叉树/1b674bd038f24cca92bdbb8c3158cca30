class Solution {
	TreeNode reConstructBinaryTree(int[] preOrder, int[] vinOrder) {
		if (preOrder == null || preOrder.length == 0) {
			return null;
		}
		TreeNode root = new TreeNode(preOrder[0]);
		int[] leftMid = null;
		int[] rightMid = null;
		int index = 0;
		for (int i = 0; i < vinOrder.length; i++) {
			if (root.val == vinOrder[i]) {
				leftMid = new int[i];
				index = i;
			}
			if (i == vinOrder.length - 1) {
				rightMid = new int[vinOrder.length - leftMid.length];
			}
		}
		leftMid = Arrays.copyOfRange(vinOrder,0,index);
		rightMid = Arrays.copyOfRange(vinOrder,index + 1,preOrder.length);
		int[] preleft = Arrays.copyOfRange(preOrder,1,leftMid.length + 1);
		int[] preRight = Arrays.copyOfRange(preOrder,leftMid.length + 1,preOrder.length);
		root.left = reConstructBinaryTree(preleft,leftMid);
		root.right = reConstructBinaryTree(preRight,rightMid);
		return root;
	}
}