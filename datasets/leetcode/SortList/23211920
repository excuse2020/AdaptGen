class Solution {
	ListNode mergeSort(ListNode left, ListNode right) {
		ListNode dummy = new ListNode(-1), current = dummy;
		while (left != null && right != null) {
			if (left.val <= right.val) {
				current.next = left;
				left = left.next;
			} 
			else {
				current.next = right;
				right = right.next;
			}
			current = current.next;
		}
		current.next = left != null ? left : right;
		return dummy.next;
	}
	ListNode middleNode(ListNode head) {
		ListNode slow = head, fast = head, mid;
		while (fast.next != null && fast.next.next != null) {
			slow = slow.next;
			fast = fast.next.next;
		}
		mid = slow.next;
		slow.next = null;
		return mid;
	}
	ListNode sortList(ListNode head) {
		if (head == null || head.next == null) {
			return head;
		}
		ListNode mid = middleNode(head);
		ListNode left = sortList(head);
		ListNode right = sortList(mid);
		return mergeSort(left,right);
	}
}