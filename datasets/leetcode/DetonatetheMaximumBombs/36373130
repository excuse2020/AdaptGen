class Solution {
	int findDis(int x1, int y1, int x2, int y2) {
		return (int) Math.ceil(Math.sqrt(Math.pow(x1 - x2,2) + Math.pow(y1 - y2,2)));
	}
	int maxUtil(int src, int[][] bombs, int n) {
		Queue<Integer> queue = new LinkedList<>();
		queue.add(src);
		boolean[] visited = new boolean[n];
		visited[src] = true;
		int c = 1;
		while (!queue.isEmpty()) {
			int num = queue.poll();
			for (int i = 0; i < n; i++) {
				if (visited[i] == false) {
					int dis = findDis(bombs[num][0],bombs[num][1],bombs[i][0],bombs[i][1]);
					if (dis <= bombs[num][2]) {
						c++;
						queue.add(i);
						visited[i] = true;
					}
				}
			}
		}
		return c;
	}
	int maximumDetonation(int[][] bombs) {
		int len = bombs.length;
		int max = Integer.MIN_VALUE;
		for (int i = 0; i < len; i++) {
			int num = maxUtil(i,bombs,len);
			max = Math.max(max,num);
		}
		return max;
	}
}