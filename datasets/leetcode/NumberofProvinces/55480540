class Solution {
	void dfs(ArrayList<ArrayList<Integer>> adj, boolean[] visited, int s) {
		visited[s] = true;
		for (int v: adj.get(s)) {	
			if (!visited[v]) {
				dfs(adj,visited,v);
			}
		}
	}
	int findCircleNum(int[][] isConnected) {
		ArrayList<ArrayList<Integer>> adj = new ArrayList<>();
		for (int i = 0; i < isConnected.length; i++) {
			adj.add(new ArrayList<>());
		}
		for (int i = 0; i < isConnected.length; i++) {
			for (int j = 0; j < isConnected.length; j++) {
				if (isConnected[i][j] == 1) {
					adj.get(i).add(j);
					adj.get(j).add(i);
				}
			}
		}
		boolean[] visited = new boolean[isConnected.length];
		int c = 0;
		for (int i = 0; i < isConnected.length; i++) {
			if (!visited[i]) {
				c++;
				dfs(adj,visited,i);
			}
			System.out.println(visited[i]);
		}
		return c;
	}
}