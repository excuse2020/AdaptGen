class Solution {
	int[] digitsFreq(int n) {
		int[] d = new int[10];
		while (n != 0) {
			d[n % 10] += 1;
			n /= 10;
		}
		return d;
	}
	int getNumOfDigits(int n) {
		int count = 0;
		while (n != 0) {
			n /= 10;
			count += 1;
		}
		return count;
	}
	boolean reorderedPowerOf2(int n) {
		int numOfDigits = getNumOfDigits(n);
		int[] freq = digitsFreq(n);
		int power = 1;
		int digits;
		for (int i = 0; i < 30; i++) {
			digits = getNumOfDigits(power);
			if (numOfDigits == digits) {
				int a1 = digitsFreq(power);
				int j;
				for (j = 0; j < 10; j++) {
					if (freq[j] != a1[j]) {
						break;
					}
				}
				if (j == 10) {
					return true;
				}
			} 
			else if (numOfDigits < digits) {
				break;
			}
			power = power << 1;
		}
		return false;
	}
}