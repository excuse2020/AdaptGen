class Solution {
	int f(int i, int j, List<Integer> list) {
		if (i > j) {
			return 0;
		}
		int min = Integer.MAX_VALUE;
		for (int k = i; k <= j; k++) {
			int steps = list.get(j + 1) - list.get(i - 1) + f(i,k - 1,list) + f(k + 1,j,list);
			min = Math.min(min,steps);
		}
		return min;
	}
	int minCost(int n, int[] cuts) {
		Arrays.sort(cuts);
		List<Integer> list = new ArrayList<>();
		list.add(0);
		for (int i = 0; i < cuts.length; i++) {
			list.add(cuts[i]);
		}
		list.add(n);
		return f(1,cuts.length,list);
	}
}