class Solution {
	int minimumTime(int n, int[][] relations, int[] time) {
		int[] inDegree = new int[n], max = new int[n];
		int res = 0;
		Map<Integer, List<Integer>> dep = new HashMap();
		for (int[] r: relations) {	
			int prev = r[0] - 1, curr = r[1] - 1;
			dep.computeIfAbsent(prev,(x) -> {new ArrayList()}).add(curr);
			inDegree[curr]++;
		}
		Deque<Integer> q = new LinkedList();
		for (int i = 0; i < n; i++) {
			if (inDegree[i] == 0) {
				q.offer(i);
			}
		}
		while (!q.isEmpty()) {
			int size = q.size();
			while (size-- > 0) {
				int cur = q.poll();
				max[cur] += time[cur];
				res = Math.max(res,max[cur]);
				for (int nei: dep.getOrDefault(cur,new ArrayList<>())) {	
					max[nei] = Math.max(max[nei],max[cur]);
					inDegree[nei]--;
					if (inDegree[nei] == 0) {
						q.offer(nei);
					}
				}
			}
		}
		return res;
	}
}