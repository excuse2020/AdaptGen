class Solution {
	List<String> findAndReplacePattern(String[] words, String pattern) {
		ArrayList<String> list = new ArrayList<>();
		for (int i = 0; i < words.length; i++) {
			Map<Character, Character> map = new TreeMap<>();
			ArrayList<Character> listkey = new ArrayList<>();
			ArrayList<Character> listValue = new ArrayList<>();
			int p = 0;
			for (int j = 0; j < pattern.length(); j++) {
				map.put(pattern.charAt(j),words[i].charAt(j));
				if (listValue.contains(words[i].charAt(j)) && !listkey.contains(pattern.charAt(j))) {
					p = 1;
				}
				listkey.add(pattern.charAt(j));
				listValue.add(words[i].charAt(j));
			}
			int count = 0;
			for (int j = 0; j < pattern.length(); j++) {
				if (map.get(pattern.charAt(j)) == words[i].charAt(j)) {
					count++;
				} 
				else {
					break;
				}
			}
			for (int j = 0; j < pattern.length() - 1; j++) {
				if (pattern.charAt(j) == pattern.charAt(j + 1)) {
					if (words[i].charAt(j) != words[i].charAt(j + 1)) {
						p = 1;
					}
				}
				if (pattern.charAt(j) != pattern.charAt(j + 1)) {
					if (words[i].charAt(j) == words[i].charAt(j + 1)) {
						p = 1;
					}
				}
			}
			if (count == pattern.length() && p == 0) {
				list.add(words[i]);
			}
		}
		return list;
	}
}