class Solution {
	int sumSubarrayMins(int[] arr) {
		int n = arr.length;
		int[] left = new int[n];
		int[] right = new int[n];
		Arrays.fill(right,n);
		Stack<Integer> stk = new Stack<>();
		stk.add(-1);
		for (int i = 0; i < n; i++) {
			while (stk.peek() != -1 && arr[stk.peek()] >= arr[i]) {
				stk.pop();
			}
			left[i] = stk.peek();
			stk.add(i);
		}
		stk = new Stack<>();
		stk.add(n);
		for (int i = n - 1; i >= 0; i--) {
			while (stk.peek() != n && arr[stk.peek()] > arr[i]) {
				stk.pop();
			}
			right[i] = stk.peek();
			stk.add(i);
		}
		long ans = 0;
		int mod = 1000000007;
		for (int i = 0; i < n; i++) {
			ans += (long) (i - left[i]) * (right[i] - i) % mod * arr[i] % mod;
			ans %= mod;
		}
		return (int) ans;
	}
}