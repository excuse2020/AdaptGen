class Solution {
	List<List<Integer>> findPrimePairs(int n) {
		List<List<Integer>> res = new ArrayList();
		List<Integer> primes = primesInRange(n);
		int l = 0, r = primes.size() - 1;
		while (l <= r) {
			if (primes.get(l) + primes.get(r) < n) {
				l++;
			} 
			else if (primes.get(l) + primes.get(r) > n) {
				r--;
			} 
			else {
				List<Integer> tempList = new ArrayList();
				tempList.add(primes.get(l++));
				tempList.add(primes.get(r--));
				res.add(new ArrayList(tempList));
			}
		}
		return res;
	}
	List<Integer> primesInRange(int n) {
		boolean[] isPrime = new boolean[n + 1];
		List<Integer> primes = new ArrayList();
		Arrays.fill(isPrime,true);
		for (int p = 2; p * p <= n; p++) {
			if (isPrime[p] == true) {
				for (int i = p * 2; i <= n; i += p) {
					isPrime[i] = false;
				}
			}
		}
		for (int i = 2; i <= n; i++) {
			if (isPrime[i]) {
				primes.add(i);
			}
		}
		return primes;
	}
}