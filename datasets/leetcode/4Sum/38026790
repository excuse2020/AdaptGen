class Solution {
	List<List<Integer>> binaryAddition(int start, int end, long target, int[] nums) {
		List<List<Integer>> ans = new ArrayList<>();
		int left = start;
		int right = end;
		while (left < right) {
			long sum = nums[left] + nums[right];
			if (sum == target) {
				List<Integer> l = new ArrayList<>();
				l.add(nums[left]);
				l.add(nums[right]);
				ans.add(l);
				while (++left <= end && nums[left] == nums[left - 1]) {
				}
				while (--right >= 0 && nums[right] == nums[right + 1]) {
				}
			} 
			else if (sum < target) {
				left++;
			} 
			else {
				right--;
			}
		}
		return ans;
	}
	List<List<Integer>> fourSum(int[] nums, int target) {
		Arrays.sort(nums);
		return nrecursum(0,nums.length - 1,target,4,nums);
	}
	List<List<Integer>> nrecursum(int start, int end, long target, int t, int[] nums) {
		if (start < 0 || end >= nums.length || start >= end) {
			return new ArrayList<>();
		}
		if (t == 2) {
			return binaryAddition(start,end,target,nums);
		}
		List<List<Integer>> arr = new ArrayList<>();
		int p = start;
		while (p <= end) {
			int element = nums[p];
			long mytarget = target - element;
			List<List<Integer>> nextargets = nrecursum(p + 1,end,mytarget,t - 1,nums);
			for (int i = 0; i < nextargets.size(); i++) {
				List<Integer> mylist = nextargets.get(i);
				mylist.add(element);
				arr.add(mylist);
			}
			p++;
			while (p <= end && nums[p] == nums[p - 1]) {
				p++;
			}
		}
		return arr;
	}
}