class Solution {
	List<Integer>[] adj;
	int longest = 0;
	int dfs(int cur, String s) {
		int path = 1;
		int long1 = 0;
		int long2 = 0;
		for (int child: adj[cur]) {	
			int childPath = dfs(child,s);
			if (s.charAt(child) != s.charAt(cur)) {
				if (childPath > long1) {
					long2 = long1;
					long1 = childPath;
				} 
				else if (childPath > long2) {
					long2 = childPath;
				}
			}
		}
		longest = Math.max(longest,long1 + long2);
		return long1 > long2 ? long1 + 1 : long2 + 1;
	}
	int longestPath(int[] parent, String s) {
		adj = new List[parent.length];
		for (int i = 0; i < parent.length; i++) {
			adj[i] = new ArrayList<>();
		}
		for (int i = 1; i < parent.length; i++) {
			adj[parent[i]].add(i);
		}
		dfs(0,s);
		return longest;
	}
}