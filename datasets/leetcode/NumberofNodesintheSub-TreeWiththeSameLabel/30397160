class Solution {
	int[] countSubTrees(int n, int[][] edges, String labels) {
		ArrayList<Integer>[] graph = (ArrayList<Integer>[]) new ArrayList[n];
		int[] result = new int[n];
		boolean[] hasParent = new boolean[n];
		for (int i = 0; i < n; ++i) {
			graph[i] = new ArrayList<>();
		}
		for (int[] e: edges) {	
			if (hasParent[e[1]] || e[1] == 0) {
				graph[e[1]].add(e[0]);
				hasParent[e[0]] = true;
			} 
			else {
				hasParent[e[1]] = true;
				graph[e[0]].add(e[1]);
			}
		}
		traverse(graph,result,labels,0);
		return result;
	}
	int[] traverse(ArrayList<Integer>[] graph, int[] result, String labels, int index) {
		int[] chars = new int[26];
		for (int n: graph[index]) {	
			int[] tempChars = traverse(graph,result,labels,n);
			for (int i = 0; i < 26; ++i) {
				chars[i] += tempChars[i];
			}
		}
	}
}