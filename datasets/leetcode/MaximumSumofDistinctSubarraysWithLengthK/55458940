class Solution {
	long maximumSubarraySum(int[] nums, int k) {
		long ans = 0, s = 0;
		int len = nums.length;
		if (len < k) {
			return ans;
		}
		Map<Integer, Integer> myM = new HashMap<>();
		for (int i = 0; i < k; i++) {
			myM.merge(nums[i],1,);
			s += nums[i];
		}
		if (k == myM.size()) {
			ans = Math.max(ans,s);
		}
		for (int i = k; i < len; i++) {
			if (1 == myM.get(nums[i - k])) {
				myM.remove(nums[i - k]);
			} 
			else {
				myM.merge(nums[i - k],-1,);
			}
			myM.merge(nums[i],1,);
			s = s - nums[i - k] + nums[i];
			if (k == myM.size()) {
				ans = Math.max(ans,s);
			}
		}
		return ans;
	}
}