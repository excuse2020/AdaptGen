class Solution {
	int amountOfTime(TreeNode root, int target) {
		if (root == null) {
			return 0;
		}
		Map<TreeNode, TreeNode> parentMap = new HashMap<>();
		TreeNode targetNode = createParentMapping(root,target,parentMap);
		return burnTree(targetNode,parentMap);
	}
	int burnTree(TreeNode targetNode, Map<TreeNode, TreeNode> parentMap) {
		Queue<TreeNode> queue = new LinkedList<>();
		Set<TreeNode> visited = new HashSet<>();
		queue.add(targetNode);
		visited.add(targetNode);
		int time = 0;
		while (!queue.isEmpty()) {
			int size = queue.size();
			boolean burnt = false;
			for (int i = 0; i < size; i++) {
				TreeNode currentNode = queue.poll();
				if (currentNode.left != null && !visited.contains(currentNode.left)) {
					queue.add(currentNode.left);
					visited.add(currentNode.left);
					burnt = true;
				}
				if (currentNode.right != null && !visited.contains(currentNode.right)) {
					queue.add(currentNode.right);
					visited.add(currentNode.right);
					burnt = true;
				}
				if (parentMap.containsKey(currentNode) && !visited.contains(parentMap.get(currentNode))) {
					queue.add(parentMap.get(currentNode));
					visited.add(parentMap.get(currentNode));
					burnt = true;
				}
			}
			if (burnt) {
				time++;
			}
		}
		return time;
	}
	TreeNode createParentMapping(TreeNode root, int target, Map<TreeNode, TreeNode> parentMap) {
		Queue<TreeNode> queue = new LinkedList<>();
		queue.add(root);
		TreeNode targetNode = null;
		while (!queue.isEmpty()) {
			TreeNode currentNode = queue.poll();
			if (currentNode.val == target) {
				targetNode = currentNode;
			}
			if (currentNode.left != null) {
				parentMap.put(currentNode.left,currentNode);
				queue.add(currentNode.left);
			}
			if (currentNode.right != null) {
				parentMap.put(currentNode.right,currentNode);
				queue.add(currentNode.right);
			}
		}
		return targetNode;
	}
}