class Solution {
	boolean eq(TreeNode roo1, TreeNode root2) {
		return ((roo1.left == null && root2.left == null) || (roo1.left != null && root2.left != null && roo1.left.val == root2.left.val)) && ((roo1.right == null && root2.right == null) || (roo1.right != null && root2.right != null && roo1.right.val == root2.right.val));
	}
	boolean flipEquiv(TreeNode root1, TreeNode root2) {
		if (root1 == null && root2 == null) {
			return true;
		}
		if (root1 != null && root2 != null) {
			if (root1.val != root2.val) {
				return false;
			}
			if (!eq(root1,root2)) {
				swapLeftAndRight(root2);
			}
			return flipEquiv(root1.left,root2.left) && flipEquiv(root1.right,root2.right);
		}
		return false;
	}
	void swapLeftAndRight(TreeNode root) {
		TreeNode temp = root.left;
		root.left = root.right;
		root.right = temp;
	}
}