class Solution {
	ListNode addInList(ListNode head1, ListNode head2) {
		if (head1 == null) {
			return head2;
		}
		if (head2 == null) {
			return head1;
		}
		head1 = reverse(head1);
		head2 = reverse(head2);
		ListNode ret = new ListNode(-1);
		ListNode cur = ret;
		int flag = 0;
		while (head1 != null || head2 != null) {
			int val = flag;
			if (head1 != null) {
				val += head1.val;
				head1 = head1.next;
			}
			if (head2 != null) {
				val += head2.val;
				head2 = head2.next;
			}
			flag = val / 10;
			cur.next = new ListNode(val % 10);
			cur = cur.next;
		}
		if (flag == 1) {
			cur.next = new ListNode(1);
		}
		return reverse(ret.next);
	}
	ListNode reverse(ListNode head) {
		ListNode pre = null;
		while (head != null) {
			ListNode tmp = head.next;
			head.next = pre;
			pre = head;
			head = tmp;
		}
		return pre;
	}
}