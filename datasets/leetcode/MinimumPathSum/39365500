class Solution {
	int MySoultion_Memo(int[][] grid, int i, int j, int[][] dp) {
		if (i > grid.length - 1 || j > grid[0].length - 1) {
			return 1011292;
		}
		if (i == grid.length - 1 && j == grid[0].length - 1) {
			return dp[i][j] = grid[i][j];
		}
		if (dp[i][j] != -1) {
			return dp[i][j];
		}
		int ans1 = MySoultion_Memo(grid,i + 1,j,dp);
		int ans2 = MySoultion_Memo(grid,i,j + 1,dp);
		int min = Math.min(ans1,ans2) + grid[i][j];
		return dp[i][j] = min;
	}
	int MySoultion_Tabulation(int[][] grid, int dp) {
		int n = grid.length;
		int m = grid[0].length;
		for (int i = n - 1; i >= 0; i--) {
			for (int j = m - 1; j >= 0; j--) {
				if (i == n - 1 && j == m - 1) {
					dp[i][j] = grid[i][j];
				} 
				else if (i == n - 1) {
					dp[i][j] = dp[i][j + 1] + grid[i][j];
				} 
				else if (j == m - 1) {
					dp[i][j] = dp[i + 1][j] + grid[i][j];
				} 
				else {
					dp[i][j] = Math.min(dp[i + 1][j],dp[i][j + 1]) + grid[i][j];
				}
			}
		}
		return dp[0][0];
	}
	int minPathSum(int[][] grid) {
		int n = grid.length;
		int m = grid[0].length;
		int dp = new int[n + 1][m + 1];
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < m; j++) {
				dp[i][j] = -1;
			}
		}
		int ans = MySoultion_Tabulation(grid,dp);
		return ans;
	}
}