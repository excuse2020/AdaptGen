class Solution {
	int[] MySort(int[] arr) {
		return quickSort(arr,0,arr.length - 1);
	}
	int[] bubbleSort(int[] arr) {
		int len = arr.length;
		for (int i = 1; i < len; i++) {
			for (int j = 0; j < len - i; j++) {
				if (arr[j] > arr[j + 1]) {
					int temp = arr[j];
					arr[j] = arr[j + 1];
					arr[j + 1] = temp;
				}
			}
		}
		return arr;
	}
	int[] insertSort(int[] arr) {
		int len = arr.length;
		for (int i = 1; i < len; i++) {
			int temp = arr[i], j = i;
			while (j > 0 && temp < arr[j - 1]) {
				arr[j] = arr[j - 1];
				j--;
			}
			arr[j] = temp;
		}
		return arr;
	}
	int partition(int[] arr, int left, int right) {
		Random r = new Random();
		int p = (int) r.nextDouble() * (right - left) + left;
		swap(arr,p,left);
		int baseNum = arr[left];
		while (left < right) {
			while (left < right && arr[right] > baseNum) {
				right--;
			}
			while (left < right && arr[left] < baseNum) {
				left++;
			}
			if (left < right) {
				swap(arr,left,right);
			}
		}
		arr[left] = baseNum;
		return left;
	}
	int[] quickSort(int[] arr, int left, int right) {
		if (left < right) {
			int pos = partition(arr,left,right);
			quickSort(arr,left,pos - 1);
			quickSort(arr,pos + 1,right);
		}
		return arr;
	}
	int[] selectSort(int[] arr) {
		int len = arr.length;
		for (int i = 0; i < len; i++) {
			int k = i;
			for (int j = i + 1; j < len; j++) {
				if (arr[j] < arr[k]) {
					k = j;
				}
			}
			swap(arr,i,k);
		}
		return arr;
	}
	void swap(int[] A, int i, int j) {
		int temp = A[i];
		A[i] = A[j];
		A[j] = temp;
	}
}