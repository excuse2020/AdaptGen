class Solution {
	int MOD = (int) 1e9 + 7;
	long calcCost(long maxDelta, long sumDelta, int cost1, int cost2) {
		if (maxDelta * 2 <= sumDelta) {
			return (sumDelta / 2) * cost2 + (sumDelta & 1) * cost1;
		} 
		else {
			return (2 * maxDelta - sumDelta) * cost1 + (sumDelta - maxDelta) * cost2;
		}
	}
	int minCostToEqualizeArray(int[] nums, int cost1, int cost2) {
		int n = nums.length;
		if (n <= 1) {
			return 0;
		}
		int maxVal = Arrays.stream(nums).max().getAsInt();
		long sumDelta = 0, maxDelta = 0;
		for (int num: nums) {	
			long delta = maxVal - num;
			maxDelta = Math.max(maxDelta,delta);
			sumDelta += delta;
		}
		if (cost2 >= 2 * cost1) {
			return (int) (sumDelta * cost1 % MOD);
		}
		if (n == 2) {
			return (int) (sumDelta * cost1 % MOD);
		}
		long answer = calcCost(maxDelta,sumDelta,cost1,cost2);
		long maxDeltaTwice = maxDelta * 2;
		while (maxDeltaTwice > sumDelta) {
			maxDelta++;
			sumDelta += n;
			answer = Math.min(answer,calcCost(maxDelta,sumDelta,cost1,cost2));
			maxDeltaTwice += 2;
		}
		if (sumDelta % 2 == 1) {
			maxDelta++;
			sumDelta += n;
			answer = Math.min(answer,calcCost(maxDelta,sumDelta,cost1,cost2));
		}
		return (int) (answer % MOD);
	}
}