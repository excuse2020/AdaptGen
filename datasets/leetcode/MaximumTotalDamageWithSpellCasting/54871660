class Solution {
	long maximumTotalDamage(int[] power) {
		HashMap<Integer, Long> map = new HashMap<>();
		for (int p: power) {	
			map.put(p,map.getOrDefault(p,0L) + p);
		}
		List<Integer> uniquePowers = new ArrayList<>(map.keySet());
		Collections.sort(uniquePowers);
		Arrays.sort(power);
		long[][] dp = new long[power.length + 1][2];
		dp[0][0] = 0;
		dp[0][1] = map.get(uniquePowers.get(0));
		for (int i = 1; i < uniquePowers.size(); i++) {
			dp[i][0] = Math.max(dp[i - 1][0],dp[i - 1][1]);
			int j = i - 1;
			while (j >= 0 && uniquePowers.get(j) + 2 >= uniquePowers.get(i)) {
				j--;
			}
			dp[i][1] = map.get(uniquePowers.get(i));
			if (j >= 0) {
				dp[i][1] += Math.max(dp[j][0],dp[j][1]);
			}
		}
		return Math.max(dp[uniquePowers.size() - 1][0],dp[uniquePowers.size() - 1][1]);
	}
}