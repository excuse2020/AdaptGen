class Solution {
	long maximumSumOfHeights(List<Integer> mh) {
		int n = mh.size();
		long pre = new long[n];
		long sum = pre[0];
		PriorityQueue<int[]> pq = new PriorityQueue<>((x, y) -> {y[0] - x[0]});
		for (int i = 0; i < n; i++) {
			int count = 1;
			while (pq.size() > 0) {
				int a = pq.poll();
				if (a[0] <= mh.get(i)) {
					pq.add(a);
					break;
				}
				count += a[1];
				sum -= (long) a[0] * a[1];
			}
			sum += (long) count * mh.get(i);
			pq.add(new int{mh.get(i), count});
			pre[i] = sum;
		}
		sum = 0;
		pq = new PriorityQueue<>((x, y) -> {y[0] - x[0]});
		long suf = new long[n];
		for (int i = n - 1; i >= 0; i--) {
			int count = 1;
			while (pq.size() > 0) {
				int a = pq.poll();
				if (a[0] <= mh.get(i)) {
					pq.add(a);
					break;
				}
				count += a[1];
				sum -= (long) a[0] * a[1];
			}
			sum += (long) count * mh.get(i);
			pq.add(new int{mh.get(i), count});
			suf[i] = sum;
		}
		long ans = 0;
		for (int i = 0; i < n; i++) {
			ans = Math.max(ans,suf[i] + pre[i] - mh.get(i));
		}
		return ans;
	}
}