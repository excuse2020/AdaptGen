class Solution {
	void dfs(ArrayList<String> list, int start, List<String> dequeue, String s) {
		if (start == s.length() && dequeue.size() == 4) {
			list.add(getStringByList(dequeue));
			return;
		}
		if (dequeue.size() > 4) {
			return;
		}
		for (int l = start + 1; l <= s.length(); l++) {
			String ipStr = s.substring(start,l);
			if (isValidIpString(ipStr)) {
				dequeue.add(ipStr);
				dfs(list,l,dequeue,s);
				dequeue.remove(dequeue.size() - 1);
			} 
			else {
				return;
			}
		}
	}
	String getStringByList(List<String> dequeue) {
		StringBuffer sb = new StringBuffer();
		for (int i = 0; i < dequeue.size(); i++) {
			if (i == 0) {
				sb.append(dequeue.get(i));
			} 
			else {
				sb.append(".").append(dequeue.get(i));
			}
		}
		return sb.toString();
	}
	boolean isValidIpString(String ipStr) {
		if (ipStr.charAt(0) == '0' && ipStr.length() > 1) {
			return false;
		}
		int ip = Integer.valueOf(ipStr);
		return ip >= 0 && ip <= 255;
	}
	ArrayList<String> restoreIpAddresses(String s) {
		ArrayList<String> list = new ArrayList<>();
		List<String> dequeue = new ArrayList<>();
		dfs(list,0,dequeue,s);
		return list;
	}
}