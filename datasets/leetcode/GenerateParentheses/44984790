class Solution {
	List<String> ans = new ArrayList<>();
	Stack<Character> stack = new Stack<>();
	void backtrack(int openN, int closedN, int n) {
		if (openN == closedN && closedN == n) {
			Iterator<Character> val = stack.iterator();
			String temp = "";
			while (val.hasNext()) {
				temp = temp + val.next();
			}
			ans.add(temp);
		}
	}
	List<String> generateParenthesis(int n) {
		backtrack(0,0,n);
		return ans;
	}
}