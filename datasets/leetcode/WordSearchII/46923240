class Solution {
	List<String> ll = new ArrayList<>();
	Node root;
	List<String> findWords(char[][] board, String[] words) {
		Node root = new Node();
		for (String s: words) {	
			insert(root,s);
		}
		for (int i = 0; i < board.length; i++) {
			for (int j = 0; j < board[0].length; j++) {
				if (root.child.containsKey(board[i][j])) {
					wordSearch(board,i,j,root);
				}
			}
		}
		return ll;
	}
	void insert(Node root, String word) {
		Node temp = root;
		for (int i = 0; i < word.length(); i++) {
			char ch = word.charAt(i);
			if (temp.child.containsKey(ch)) {
				temp = temp.child.get(ch);
			} 
			else {
				Node nn = new Node();
				nn.data = ch;
				temp.child.put(ch,nn);
				temp = nn;
			}
		}
		temp.IsTerminal = word;
	}
	void wordSearch(char[][] board, int r, int c, Node root) {
		if (r < 0 || c < 0 || r >= board.length || c >= board[0].length || !root.child.containsKey(board[r][c])) {
			return;
		}
		char ch = board[r][c];
		Node current = root.child.get(ch);
		if (current.IsTerminal != null) {
			ll.add(current.IsTerminal);
			current.IsTerminal = null;
		}
	}
	class Node {
		String IsTerminal = null;
		HashMap<Character, Node> child = new HashMap<>();
		char data;
	}
}