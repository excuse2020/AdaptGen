class Solution {
	List<List<String>> ans;
	String b;
	HashMap<String, Integer> mpp;
	void dfs(String word, List<String> seq) {
		if (word.equals(b)) {
			List<String> dup = new ArrayList<>(seq);
			Collections.reverse(dup);
			ans.add(dup);
			return;
		}
		int steps = mpp.get(word);
		int sz = word.length();
		int i = 0;
		char ch;
	}
	List<List<String>> findLadders(String beginWord, String endWord, List<String> wordList) {
		Set<String> st = new HashSet<String>();
		int len = wordList.size();
		for (int i = 0; i < len; i++) {
			st.add(wordList.get(i));
		}
		Queue<String> q = new LinkedList<>();
		b = beginWord;
		q.add(beginWord);
		mpp = new HashMap<>();
		mpp.put(beginWord,1);
		int sizee = beginWord.length();
		st.remove(beginWord);
		String word = q.peek();
		int steps = mpp.get(word);
		q.remove();
		if (word.equals(endWord)) {
			break;
		}
		int i = 0;
		char ch;
	}
}