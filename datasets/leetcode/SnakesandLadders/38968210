class Solution {
	int getBoardValue(int[][] board, int num) {
		int n = board.length;
		int oldRow = (num - 1) / n;
		int oldCol = (num - 1) % n;
		int row = n - 1;
		int col = -1;
		if (oldRow % 2 == 0) {
			col = oldCol;
		} 
		else {
			col = n - 1;
		}
		return board[row][col];
	}
	int snakesAndLadders(int[][] board) {
		int n = board.length;
		boolean[] visited = new boolean[n * n + 1];
		Queue<int[]> queue = new LinkedList<int[]>();
		queue.offer(new int{1, 0});
		while (!queue.isEmpty()) {
			int[] p = queue.poll();
			for (int i = 1; i <= 6; i++) {
				int next = p[0] + i;
				if (next > n * n) {
					break;
				}
				if (getBoardValue(board,next) > 0) {
					next = getBoardValue(board,next);
				}
				if (next == n * n) {
					return p[1] + 1;
				}
				if (!visited[next]) {
					visited[next] = true;
					queue.offer(new int{next, p[1] + 1});
				}
			}
		}
		return -1;
	}
}