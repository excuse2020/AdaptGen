class Solution {
	int[] dp;
	List<Integer> graph;
	int n;
	int[] time;
	int[] countVisitedNodes(List<Integer> edges) {
		graph = edges;
		n = edges.size();
		dp = new int[n];
		time = new int[n];
		for (int i = 0; i < n; i++) {
			if (dp[i] == 0) {
				dfs(i,1);
			}
		}
		return dp;
	}
	int dfs(int node, int t) {
		time[node] = t;
		t++;
		int nei = graph.get(node);
		if (dp[nei] != 0) {
			return dp[node] = dp[nei] + 1;
		} 
		else {
			if (time[nei] != 0) {
				time[node] = time[nei];
				return dp[node] = t - time[nei];
			} 
			else {
				int val = dfs(nei,t);
				if (time[nei] <= time[node]) {
					time[node] = time[nei];
					return dp[node] = dp[nei];
				} 
				else {
					return dp[node] = dp[nei] + 1;
				}
			}
		}
	}
}