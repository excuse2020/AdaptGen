class Solution {
	int result;
	void palindromeCheck(HashMap<Integer, Integer> path) {
		int odd_count = 0;
		for (int freq: path.values()) {	
			if (freq % 2 != 0) {
				odd_count++;
			}
		}
		if (odd_count <= 1) {
			result++;
		}
	}
	int pseudoPalindromicPaths(TreeNode root) {
		result = 0;
		rootToLeafPath(root,new HashMap<>());
		return result;
	}
	void rootToLeafPath(TreeNode root, HashMap<Integer, Integer> path) {
		if (root == null) {
			return;
		}
		path.put(root.val,path.getOrDefault(root.val,0) + 1);
		if (root.left == null && root.right == null) {
			palindromeCheck(path);
		}
		rootToLeafPath(root.left,new HashMap<>(path));
		rootToLeafPath(root.right,new HashMap<>(path));
	}
}