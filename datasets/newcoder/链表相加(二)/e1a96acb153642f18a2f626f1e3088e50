class Solution {
	ListNode addInList(ListNode head1, ListNode head2) {
		if (head1 == null) {
			return head2;
		}
		if (head2 == null) {
			return head1;
		}
		ListNode l1 = reverse(head1);
		ListNode l2 = reverse(head2);
		ListNode res = addInList2(l1,l2);
		return reverse(res);
	}
	ListNode addInList2(ListNode head1, ListNode head2) {
		ListNode p1 = head1, p2 = head2;
		ListNode dummy = new ListNode(-1);
		ListNode p = dummy;
		int carry = 0;
		while (p1 != null || p2 != null || carry > 0) {
			int val = carry;
			if (p1 != null) {
				val += p1.val;
				p1 = p1.next;
			}
			if (p2 != null) {
				val += p2.val;
				p2 = p2.next;
			}
			carry = val / 10;
			val = val % 10;
			p.next = new ListNode(val);
			p = p.next;
		}
		return dummy.next;
	}
	ListNode reverse(ListNode head) {
		ListNode pre = null;
		ListNode cur = head;
		while (cur != null) {
			ListNode next = cur.next;
			cur.next = pre;
			pre = cur;
			cur = next;
		}
		return pre;
	}
}