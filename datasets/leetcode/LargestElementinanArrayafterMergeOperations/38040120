class Solution {
	long maxArrayValue(int[] nums) {
		ArrayDeque<Integer> stack = new ArrayDeque<>();
		stack.add(nums[nums.length - 1]);
		long result = nums[nums.length - 1];
		for (int i = nums.length - 2; i >= 0; --i) {
			if (stack.peekLast() >= nums[i]) {
				stack.addLast(stack.pollLast() + nums[i]);
			} 
			else {
				stack.addLast(nums[i]);
			}
			result = Math.max(stack.peekLast(),result);
		}
		return result;
	}
}
class Solution {
	long maxArrayValue(int[] nums) {
		Stack<Long> st = new Stack<>();
		int n = nums.length;
		long res = 0;
		for (int i = n - 1; i >= 0; i--) {
			long val = nums[i];
			while (!st.isEmpty() && st.peek() >= val) {
				long t = st.pop();
				val += t;
			}
			st.push(val);
			res = Math.max(st.peek(),res);
		}
		return res;
	}
}