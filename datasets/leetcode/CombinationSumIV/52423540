class Solution {
	int backtrack(int a, int i, int sum, int dp) {
		if (i == a.length || sum < 0) {
			return 0;
		}
		if (sum == 0) {
			return 1;
		}
		if (dp[sum][i] != -1) {
			return dp[sum][i];
		}
		int t = backtrack(a,0,sum - a[i],dp);
		int l = backtrack(a,i + 1,sum,dp);
		dp[sum][i] = l + t;
		return t + l;
	}
	int combinationSum4(int[] candidates, int target) {
		int dp = new int[target + 1][candidates.length + 1];
		for (int i = 0; i < target + 1; i++) {
			Arrays.fill(dp[i],-1);
		}
		Arrays.sort(candidates);
		return backtrack(candidates,0,target,dp);
	}
}