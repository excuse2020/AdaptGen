class Solution {
	int AscCheck(int target, MountainArray mountainArr, int s, int e) {
		while (s <= e) {
			int mid = s + (e - s) / 2;
			int temp = mountainArr.get(mid);
			if (temp < target) {
				s = mid + 1;
			} 
			else if (temp > target) {
				e = mid - 1;
			} 
			else {
				return mid;
			}
		}
		return -1;
	}
	int DscCheck(int target, MountainArray mountainArr, int s, int e) {
		while (s <= e) {
			int mid = s + (e - s) / 2;
			int temp = mountainArr.get(mid);
			if (temp < target) {
				e = mid - 1;
			} 
			else if (temp > target) {
				s = mid + 1;
			} 
			else {
				return mid;
			}
		}
		return -1;
	}
	int FindPeak(MountainArray mountainArr) {
		int s = 0;
		int e = mountainArr.length() - 1;
		while (s < e) {
			int mid = s + (e - s) / 2;
			int temp = mountainArr.get(mid);
			int temp2 = mountainArr.get(mid + 1);
			if (temp < temp2) {
				s = mid + 1;
			} 
			else if (temp > temp2) {
				e = mid;
			}
		}
		return s;
	}
	int findInMountainArray(int target, MountainArray mountainArr) {
		int peak = FindPeak(mountainArr);
		int ans;
		ans = AscCheck(target,mountainArr,0,peak);
		if (ans == -1) {
			ans = DscCheck(target,mountainArr,peak + 1,mountainArr.length() - 1);
		}
		return ans;
	}
}