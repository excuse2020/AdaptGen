class Solution {
	int closest(int[] sortedNums, int target) {
		int low = 0;
		int high = sortedNums.length - 1;
		while (low < high) {
			int mid = low + (high - low) / 2;
			if (target > sortedNums[mid]) {
				low = mid + 1;
			} 
			else {
				high = mid;
			}
		}
		if (low > 0 && Math.abs(sortedNums[low - 1] - target) < Math.abs(sortedNums[low] - target)) {
			return sortedNums[low - 1];
		} 
		else {
			return sortedNums[low];
		}
	}
	int minAbsoluteSumDiff(int[] nums1, int[] nums2) {
		int n = nums1.length;
		int MOD = 1_000_000_007;
		long sum = 0;
		for (int i = 0; i < n; i++) {
			sum += Math.abs(nums1[i] - nums2[i]);
		}
		int[] sortedNums1 = Arrays.copyOf(nums1,n);
		Arrays.sort(sortedNums1);
		int diffFinal = 0;
		for (int i = 0; i < n; i++) {
			int currentDiff = Math.abs(nums1[i] - nums2[i]);
			int closestValue = closest(sortedNums1,nums2[i]);
			int newDiff = Math.abs(closestValue - nums2[i]);
			diffFinal = Math.max(diffFinal,currentDiff - newDiff);
		}
		long finalValue = (sum - diffFinal + MOD) % MOD;
		return (int) finalValue;
	}
}