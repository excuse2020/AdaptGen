class Solution {
	void dfs(int[][] bombs, int curIndex, HashSet<Integer> seen, HashMap<Integer, List<Integer>> graph) {
		seen.add(curIndex);
		for (int neighbor: graph.get(curIndex)) {	
			if (!seen.contains(neighbor)) {
				dfs(bombs,neighbor,seen,graph);
			}
		}
	}
	boolean isReachable(int x1, int y1, int r1, int x2, int y2) {
		return (long) (x1 - x2) * (long) (x1 - x2) + (long) (y1 - y2) * (long) (y1 - y2) <= (long) r1 * (long) r1;
	}
	int maximumDetonation(int[][] bombs) {
		int ans = 0;
		HashMap<Integer, List<Integer>> graph = new HashMap<>();
		for (int i = 0; i < bombs.length; i++) {
			graph.put(i,new ArrayList<>());
			for (int j = 0; j < bombs.length; j++) {
				if (i != j && isReachable(bombs[i][0],bombs[i][1],bombs[i][2],bombs[j][0],bombs[j][1])) {
					graph.get(i).add(j);
				}
			}
		}
		for (int i = 0; i < bombs.length; i++) {
			HashSet<Integer> seen = new HashSet<>();
			dfs(bombs,i,seen,graph);
			ans = Math.max(ans,seen.size());
		}
		return ans;
	}
}