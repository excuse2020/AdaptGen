class Solution {
	int minimumTime(int n, int[][] relations, int[] time) {
		n = n + 1;
		List<Integer>[] courseMap = new List[n];
		int[] indegree = new int[n];
		int[] totalTime = new int[n - 1];
		int ans = 0;
		for (int i = 0; i < n; i++) {
			courseMap[i] = new LinkedList();
		}
		for (int[] relation: relations) {	
			courseMap[relation[0]].add(relation[1]);
			indegree[relation[1]]++;
		}
		Queue<Integer> q = new LinkedList();
		for (int i = 0; i < n; i++) {
			if (indegree[i] == 0) {
				q.add(i);
			}
			if (i > 0) {
				totalTime[i - 1] = time[i - 1];
			}
		}
		while (!q.isEmpty()) {
			int course = q.poll();
			for (int nextCourse: courseMap[course]) {	
				totalTime[nextCourse - 1] = Math.max(totalTime[nextCourse - 1],totalTime[course - 1] + time[nextCourse - 1]);
				indegree[nextCourse]--;
				if (indegree[nextCourse] == 0) {
					q.add(nextCourse);
				}
			}
		}
		return Arrays.stream(totalTime).max().getAsInt();
	}
}