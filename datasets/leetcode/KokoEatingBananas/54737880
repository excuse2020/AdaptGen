class Solution {
	int findh(int[] piles, int b) {
		int totalh = 0;
		int n = piles.length;
		for (int i = 0; i < n; i++) {
			totalh += Math.ceil((double) piles[i] / (double) b);
		}
		return totalh;
	}
	int findmax(int[] piles) {
		int maxi = Integer.MIN_VALUE;
		int n = piles.length;
		for (int i = 0; i < n; i++) {
			maxi = Math.max(piles[i],maxi);
		}
		return maxi;
	}
	int minEatingSpeed(int[] piles, int h) {
		int low = 1;
		int high = findmax(piles);
		int ans = 0;
		while (low <= high) {
			int mid = (low + high) / 2;
			int totalh1 = findh(piles,mid);
			if (totalh1 <= h) {
				high = mid - 1;
			} 
			else {
				low = mid + 1;
			}
		}
		return low;
	}
}