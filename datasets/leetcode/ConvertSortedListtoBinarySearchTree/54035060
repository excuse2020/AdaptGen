class Solution {
	ListNode find_mid(ListNode head, ListNode tail) {
		ListNode fast = head;
		ListNode slow = head;
		while (fast != tail && fast.next != tail) {
			fast = fast.next.next;
			slow = slow.next;
		}
		return slow;
	}
	TreeNode helper(ListNode head, ListNode tail) {
		if (head == tail) {
			return null;
		}
		ListNode mid = find_mid(head,tail);
		TreeNode root_ = new TreeNode(mid.val);
		root_.left = helper(head,mid);
		root_.right = helper(mid.next,tail);
		return root_;
	}
	TreeNode sortedListToBST(ListNode head) {
		return helper(head,null);
	}
}