class Solution {
	ArrayList<ArrayList<Integer>> res = new ArrayList<ArrayList<Integer>>();
	ArrayList<ArrayList<Integer>> permuteUnique(int[] num) {
		if (num == null || num.length < 1) {
			return res;
		}
		Arrays.sort(num);
		process2(res,num,0);
		return res;
	}
	void process2(ArrayList<ArrayList<Integer>> res, int[] num, int i) {
		if (i == num.length) {
			ArrayList<Integer> list = new ArrayList<Integer>();
			for (int a: num) {	
				list.add(a);
			}
			res.add(list);
			return;
		}
		HashSet<Integer> set = new HashSet<>();
		for (int j = i; j < num.length; j++) {
			if (!set.contains(num[j])) {
				set.add(num[j]);
				swap(num,i,j);
				process2(res,num,i + 1);
				swap(num,i,j);
			}
		}
	}
	void swap(int[] chs, int i, int j) {
		int tmp = chs[i];
		chs[i] = chs[j];
		chs[j] = tmp;
	}
}