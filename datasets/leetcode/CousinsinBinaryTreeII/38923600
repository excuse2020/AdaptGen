class Solution {
	HashMap<Integer, Integer> hm = new HashMap<>();
	void fill(TreeNode root, int depth) {
		if (root == null) {
			return;
		}
		int val = hm.getOrDefault(depth,0);
		hm.put(depth,val + root.val);
		fill(root.left,depth + 1);
		fill(root.right,depth + 1);
	}
	void modify(TreeNode root, int depth) {
		if (root == null || (root.left == null && root.right == null)) {
			return;
		}
		if (root.right == null) {
			root.left.val = hm.get(depth + 1) - root.left.val;
		} 
		else if (root.left == null) {
			root.right.val = hm.get(depth + 1) - root.right.val;
		} 
		else {
			int temp = hm.get(depth + 1) - root.left.val;
			root.left.val = temp;
			root.right.val = temp;
		}
		modify(root.left,depth + 1);
		modify(root.right,depth + 1);
	}
	TreeNode replaceValueInTree(TreeNode root) {
		fill(root,0);
		modify(root,0);
		root.val = 0;
		return root;
	}
}