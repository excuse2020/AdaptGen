class Solution {
	ListNode reverseBetween(ListNode head, int m, int n) {
		ListNode currNode = head;
		ListNode preNode = null;
		ListNode nextNode = null;
		ListNode firstNode = head;
		ListNode finalNode = null;
		ListNode currfirtNode = null;
		int i = 0;
		if (head.next == null) {
			return head;
		}
		while (currNode != null) {
			i++;
			nextNode = currNode.next;
			if (i < m) {
				firstNode = currNode;
			}
			if (i == m) {
				currfirtNode = currNode;
			}
			if ((n < i && finalNode == null) || (n == i && nextNode == null)) {
				finalNode = currNode;
			}
			if (i >= m && i <= n) {
				currNode.next = preNode;
				preNode = currNode;
			}
			currNode = nextNode;
		}
		if (currfirtNode != firstNode) {
			firstNode.next = preNode;
		} 
		else {
			if (currfirtNode != finalNode && finalNode != preNode) {
				currfirtNode.next = finalNode;
			}
			return preNode;
		}
		if (currfirtNode != finalNode && finalNode != preNode) {
			currfirtNode.next = finalNode;
		}
		return head;
	}
}