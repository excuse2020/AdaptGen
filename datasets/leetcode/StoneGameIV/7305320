class Solution {
	Boolean[][] dp;
	boolean helperAlice(int n) {
		if (n == 0) {
			return false;
		}
		if (dp[1][n] != null) {
			return dp[1][n];
		}
		for (int i = 1; i * i <= n; i++) {
			if (!helperBob(n - (i * i))) {
				return dp[1][n] = true;
			}
		}
		return dp[1][n] = false;
	}
	boolean helperBob(int n) {
		if (n == 0) {
			return false;
		}
		if (dp[0][n] != null) {
			return dp[0][n];
		}
		for (int i = 1; i * i <= n; i++) {
			if (!helperAlice(n - (i * i))) {
				return dp[0][n] = true;
			}
		}
		return dp[0][n] = false;
	}
	boolean winnerSquareGame(int n) {
		dp = new Boolean[2][n + 1];
		return helperAlice(n);
	}
}