class Solution {
	long maximumOr(int[] nums, int k) {
		long n = (long) Math.pow(2,k);
		if (nums.length <= 1) {
			return nums[0] * n;
		}
		long pre = new long[nums.length];
		long sur = new long[nums.length];
		long ans = 0;
		pre[0] = nums[0];
		sur[nums.length - 1] = nums[nums.length - 1];
		for (int i = 1; i < pre.length; i++) {
			pre[i] = pre[i - 1] | nums[i];
		}
		for (int i = sur.length - 2; i >= 0; i--) {
			sur[i] = sur[i + 1] | nums[i];
		}
		for (int i = 0; i < nums.length; i++) {
			long a = 0;
			if (i == 0) {
				a = (nums[i] * n) | sur[i + 1];
			} 
			else if (i == nums.length - 1) {
				a = (nums[i] * n) | pre[i - 1];
			} 
			else {
				a = (nums[i] * n) | pre[i - 1];
			}
			ans = (long) Math.max(ans,a);
		}
		return ans;
	}
}