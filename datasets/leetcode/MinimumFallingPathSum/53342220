class Solution {
	int dp;
	int minFallingPathSum(int[][] matrix) {
		dp = new int[matrix.length][matrix.length];
		for (int i = 0; i < dp.length; i++) {
			Arrays.fill(dp[i],Integer.MIN_VALUE);
		}
		int min = Integer.MAX_VALUE;
		for (int i = 0; i < matrix[0].length; i++) {
			int ans = minPath(matrix,0,i);
			min = Math.min(ans,min);
		}
		return min;
	}
	int minPath(int[][] matrix, int i, int j) {
		if (dp[i][j] != Integer.MIN_VALUE) {
			return dp[i][j];
		} 
		else {
			if (i == matrix.length - 1) {
				return dp[i][j] = matrix[i][j];
			} 
			else {
				int ans1 = Integer.MAX_VALUE / 2, ans2 = Integer.MAX_VALUE / 2, ans3 = Integer.MAX_VALUE / 2;
				if (i + 1 <= matrix.length - 1) {
					ans1 = matrix[i][j] + minPath(matrix,i + 1,j);
				}
				if (i + 1 <= matrix.length - 1 && j + 1 <= matrix[0].length - 1) {
					ans2 = matrix[i][j] + minPath(matrix,i + 1,j + 1);
				}
				if (i + 1 <= matrix.length - 1 && j - 1 >= 0) {
					ans3 = matrix[i][j] + minPath(matrix,i + 1,j - 1);
				}
				return dp[i][j] = Math.min(ans1,Math.min(ans2,ans3));
			}
		}
	}
}