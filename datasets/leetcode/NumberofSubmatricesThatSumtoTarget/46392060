class Solution {
	int numSubmatrixSumTarget(int[][] matrix, int target) {
		int m = matrix.length;
		int n = matrix[0].length;
		int[][] prefixSum = new int[m + 1][n + 1];
		for (int i = 1; i <= m; i++) {
			for (int j = 1; j <= n; j++) {
				prefixSum[i][j] = matrix[i - 1][j - 1] + prefixSum[i - 1][j] - prefixSum[i - 1][j - 1];
			}
		}
		int count = 0;
		for (int top = 1; top <= m; top++) {
			for (int bottom = top; bottom <= m; bottom++) {
				Map<Integer, Integer> map = new HashMap<>();
				map.put(0,1);
				for (int r = 1; r <= n; r++) {
					int currSum = prefixSum[bottom][r] - prefixSum[top - 1][r];
					int complement = currSum - target;
					count += map.getOrDefault(complement,0);
					map.put(currSum,map.getOrDefault(currSum,0) + 1);
				}
			}
		}
		return count;
	}
}