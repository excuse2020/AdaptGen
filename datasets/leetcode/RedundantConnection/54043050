class Solution {
	int[] parent;
	int[] rank;
	int find(int x) {
		if (x == parent[x]) {
			return x;
		}
		parent[x] = find(parent[x]);
		return parent[x];
	}
	int[] findRedundantConnection(int[][] edges) {
		int n = edges.length;
		rank = new int[n];
		parent = new int[n];
		for (int i = 0; i < n; i++) {
			parent[i] = i;
		}
		for (int[] edge: edges) {	
			boolean canBeAdded = union(edge[0] - 1,edge[1] - 1);
			if (!canBeAdded) {
				return edge;
			}
		}
		return new int[2];
	}
	boolean union(int x, int y) {
		int parentX = find(x);
		int parentY = find(y);
		if (parentX == parentY) {
			return false;
		}
		if (rank[parentX] >= rank[parentY]) {
			parent[parentY] = parentX;
			rank[parentX]++;
		} 
		else {
			parent[parentX] = parentY;
			rank[parentY]++;
		}
		return true;
	}
}