class Solution {
	long is_possible_battery(int[] b) {
		long n = b.length;
		long sum = 0;
		for (int i = 0; i < n; i++) {
			sum += (long) b[i];
		}
		return sum;
	}
	long maxRunTime(int n, int[] b) {
		long start = 1;
		long end = is_possible_battery(b) / n;
		long result = -1;
		while (start <= end) {
			long mid = start + (end - start) / 2;
			if (possible(b,n,mid)) {
				result = mid;
				start = mid + 1;
			} 
			else {
				end = mid - 1;
			}
		}
		return result;
	}
	boolean possible(int[] b, int n, long min_minutes) {
		long s = b.length;
		long target_time = n * min_minutes;
		long sum = 0;
		for (int i = 0; i < s; i++) {
			sum += Math.min((long) b[i],min_minutes);
			if (sum >= target_time) {
				return true;
			}
		}
		return false;
	}
}