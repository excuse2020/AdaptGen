class Solution {
	boolean dfs(int m, int n, int[][] gp, int x, int y) {
		if (!isValid(m,n,x,y)) {
			return false;
		}
		if (gp[x][y] == 1) {
			return false;
		}
		if (x == m - 1) {
			return true;
		}
		gp[x][y] = 1;
		return dfs(m,n,gp,x + 1,y) || dfs(m,n,gp,x,y + 1);
	}
	boolean isReachable(int row, int col, int[][] cells, int end) {
		int[][] gp = new int[row][col];
		for (int i = 0; i < end; i++) {
			gp[cells[i][0] - 1][cells[i][1] - 1] = 1;
		}
		for (int i = 0; i < col; i++) {
			if (dfs(row,col,gp,0,i)) {
				return true;
			}
		}
		return false;
	}
	boolean isValid(int m, int n, int x, int y) {
		if (x < 0 || y < 0 || x == m || y == n) {
			return false;
		}
		return true;
	}
	int latestDayToCross(int row, int col, int[][] cells) {
		int n = cells.length;
		int ans = 0;
		int left = 0, right = n - 1;
		while (left <= right) {
			int mid = (left + right) / 2;
			if (isReachable(row,col,cells,mid)) {
				ans = mid;
				left = mid + 1;
			} 
			else {
				right = mid - 1;
			}
		}
		return ans;
	}
}