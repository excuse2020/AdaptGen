class Solution {
	List<TreeNode> allPossibleFBT(int n) {
		Map<Integer, List<TreeNode>> map = new HashMap<>();
		return getBST(n,map);
	}
	List<TreeNode> getBST(int n, Map<Integer, List<TreeNode>> map) {
		List<TreeNode> output = new ArrayList<>();
		if (n % 2 == 0) {
			return output;
		}
		if (map.get(n) != null) {
			return map.get(n);
		}
		if (n == 1) {
			output.add(new TreeNode(0, null, null));
			return output;
		}
		for (int k = 1; k < n; k = k + 2) {
			TreeNode root = new TreeNode(0, null, null);
			List<TreeNode> left = getBST(k,map);
			List<TreeNode> right = getBST(n - k,map);
			linkTrees(root,left,right,output);
		}
		map.put(n,output);
		return output;
	}
	void linkTrees(TreeNode root, List<TreeNode> leftSubtree, List<TreeNode> rightSubtree, List<TreeNode> response) {
		for (TreeNode left: leftSubtree) {	
			for (TreeNode right: rightSubtree) {	
				response.add(new TreeNode(0, left, right));
			}
		}
	}
}