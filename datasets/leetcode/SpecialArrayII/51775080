class Solution {
	List<int[]> ls;
	int getIndex(int x) {
		int l, r, m;
		l = 0;
		r = ls.size() - 1;
		while (l <= r) {
			m = (l + r) / 2;
			int[] tmp = ls.get(m);
			if (tmp[0] <= x && tmp[1] >= x) {
				return m;
			} 
			else if (tmp[1] < x) {
				l = m + 1;
			} 
			else {
				r = m - 1;
			}
		}
		return -1;
	}
	boolean[] isArraySpecial(int[] nums, int[][] queries) {
		int i, l, r, m, left, right;
		ls = new ArrayList<>();
		l = 0;
		for (i = 1; i < nums.length; i++) {
			if (nums[i] % 2 == nums[i - 1] % 2) {
				ls.add(new int{l, i - 1});
				l = i;
			}
		}
		ls.add(new int{l, nums.length - 1});
		boolean[] res = new boolean[queries.length];
		for (i = 0; i < queries.length; i++) {
			left = getIndex(queries[i][0]);
			right = getIndex(queries[i][1]);
			res[i] = (left == right);
		}
		return res;
	}
}