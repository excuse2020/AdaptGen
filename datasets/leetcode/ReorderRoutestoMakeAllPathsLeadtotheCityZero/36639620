class Solution {
	int minReorder(int n, int[][] connections) {
		int flipCount = 0;
		Map<Integer, List<int[]>> m = new HashMap();
		for (int i = 0; i < connections.length; i++) {
			int[] connection = new int[2];
			connection[0] = connections[i][1];
			connection[1] = 1;
			m.putIfAbsent(connections[i][0],new ArrayList());
			m.get(connections[i][0]).add(connection);
			int[] revConnection = new int[2];
			revConnection[0] = connections[i][0];
			revConnection[1] = -1;
			m.putIfAbsent(connections[i][1],new ArrayList());
			m.get(connections[i][1]).add(revConnection);
		}
		boolean[] used = new boolean[n];
		Queue<Integer> q = new LinkedList();
		q.add(0);
		used[0] = true;
		while (!q.isEmpty()) {
			int node = q.remove();
			List<int[]> conns = m.get(node);
			for (int[] arr: conns) {	
				if (!used[arr[0]]) {
					if (arr[1] == 1) {
						flipCount++;
					}
					used[arr[0]] = true;
					q.add(arr[0]);
				}
			}
		}
		return flipCount;
	}
}