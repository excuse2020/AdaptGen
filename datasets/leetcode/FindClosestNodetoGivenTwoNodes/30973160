class Solution {
	int closestMeetingNode(int[] edges, int node1, int node2) {
		int[] d1 = dist(edges,node1);
		int[] d2 = dist(edges,node2);
		int ans = -1;
		int min = Integer.MAX_VALUE;
		for (int i = edges.length - 1; i >= 0; i--) {
			if (d1[i] != -1 && d2[i] != -1) {
				if (min >= Math.max(d1[i],d2[i])) {
					min = Math.max(d1[i],d2[i]);
					ans = i;
				}
			}
		}
		return ans;
	}
	int[] dist(int[] edges, int node1) {
		int[] dist = new int[edges.length];
		for (int i = 0; i < edges.length; i++) {
			dist[i] = -1;
		}
		int temp = node1;
		int distance = 0;
		while (temp != -1) {
			if (dist[temp] != -1) {
				break;
			}
			dist[temp] = distance;
			distance++;
			if (edges[temp] == -1) {
				break;
			}
			temp = edges[temp];
		}
		return dist;
	}
}