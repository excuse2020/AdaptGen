class Solution {
	int MOD = 1_000_000_007;
	int memo(int n, int k, int target, int[][] dp) {
		if (target < 0) {
			return 0;
		}
		if (n == 0) {
			if (target == 0) {
				return 1;
			}
			return 0;
		}
		if (dp[n][target] != -1) {
			return dp[n][target];
		}
		int ways = 0;
		for (int faces = 1; faces <= k; faces++) {
			ways = (ways + memo(n - 1,k,target - faces,dp)) % MOD;
		}
		return dp[n][target] = ways;
	}
	int numRollsToTarget(int n, int k, int target) {
		return tabu(n,k,target);
	}
	int solve(int n, int k, int target) {
		if (target < 0) {
			return 0;
		}
		if (n == 0) {
			if (target == 0) {
				return 1;
			}
			return 0;
		}
		int ways = 0;
		for (int i = 1; i <= k; i++) {
			ways = (ways + solve(n - 1,k,target - i)) % MOD;
		}
		return ways;
	}
	int tabu(int n, int k, int target) {
		int[][] dp = new int[n + 1][target + 1];
		dp[0][0] = 1;
		for (int i = 1; i <= n; i++) {
			for (int j = 1; j <= target; j++) {
				int ways = 0;
				for (int faces = 1; faces <= k; faces++) {
					if (j >= faces) {
						ways = (ways + dp[i - 1][j - faces]) % MOD;
					}
				}
				dp[i][j] = ways;
			}
		}
		return dp[n][target];
	}
}