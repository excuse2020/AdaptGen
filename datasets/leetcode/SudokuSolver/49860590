class Solution {
	boolean helper(char[][] board, int row, int col) {
		if (col == 9) {
			row++;
			col = 0;
		}
		if (row == 9) {
			return true;
		}
	}
	boolean isValidToPlace(char[][] board, int row, int col, char val) {
		for (int i = 0; i < 9; i++) {
			if (row != i && board[i][col] == val) {
				return false;
			}
			if (col != i && board[row][i] == val) {
				return false;
			}
		}
		int lr = 3 * (row / 3);
		int lc = 3 * (col / 3);
		for (int i = lr; i < lr + 3; i++) {
			for (int j = lc; j < lc + 3; j++) {
				if (row != i && col != j && board[i][j] == val) {
					return false;
				}
			}
		}
		return true;
	}
	void solveSudoku(char[][] board) {
		helper(board,0,0);
	}
}