class Solution {
	TreeNode createBinaryTree(int[][] descriptions) {
		Map<Integer, TreeNode> result = new HashMap<>();
		Set<Integer> children = new HashSet<>();
		for (int[] d: descriptions) {	
			int parent = d[0], child = d[1];
			boolean isLeft = d[2] == 1;
			if (!result.containsKey(parent)) {
				result.put(parent,new TreeNode(parent));
			}
			if (!result.containsKey(child)) {
				result.put(child,new TreeNode(child));
			}
			if (isLeft) {
				result.get(parent).left = result.get(child);
			} 
			else {
				result.get(parent).right = result.get(child);
			}
			children.add(child);
		}
		for (TreeNode n: result.values()) {	
			if (!children.contains(n.val)) {
				return n;
			}
		}
		return null;
	}
}