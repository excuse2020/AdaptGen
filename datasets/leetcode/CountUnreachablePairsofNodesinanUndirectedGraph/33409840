class Solution {
	boolean[] visited;
	long countPairs(int n, int[][] arr) {
		HashMap<Integer, ArrayList<Integer>> adj = new HashMap<>();
		for (int i = 0; i < arr.length; i++) {
			adj.putIfAbsent(arr[i][0],new ArrayList<>());
			adj.get(arr[i][0]).add(arr[i][1]);
			adj.putIfAbsent(arr[i][1],new ArrayList<>());
			adj.get(arr[i][1]).add(arr[i][0]);
		}
		long res = 0;
		visited = new boolean[n];
		long temp = 0, total = 0;
		for (int i = 0; i < n; i++) {
			if (!visited[i]) {
				visited[i] = true;
				res = traverseGraph(i,adj);
				temp += res * total;
				total += res;
			}
		}
		return temp;
	}
	int traverseGraph(int node, HashMap<Integer, ArrayList<Integer>> adj) {
		ArrayList<Integer> queue = new ArrayList<>();
		int res = 1;
		queue.add(node);
		while (queue.size() > 0) {
			int temp = queue.remove(0);
			if (adj.get(temp) != null) {
				for (int i = 0; i < adj.get(temp).size(); i++) {
					if (!visited[adj.get(temp).get(i)]) {
						queue.add(adj.get(temp).get(i));
						res++;
						visited[adj.get(temp).get(i)] = true;
					}
				}
			}
		}
		return res;
	}
}