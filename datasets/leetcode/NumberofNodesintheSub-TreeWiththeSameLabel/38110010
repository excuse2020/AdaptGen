class Solution {
	int[] calSameSubTreesCount(int v, int n, String labels, List<List<Integer>> graph, int[] res, boolean[] visited) {
		visited[v] = true;
		int[] cur = new int[26];
	}
	int[] countSubTrees(int n, int[][] edges, String labels) {
		List<List<Integer>> graph = createGraph(n,edges);
		int[] res = new int[n];
		boolean[] visited = new boolean[n];
		calSameSubTreesCount(0,n,labels,graph,res,visited);
		return res;
	}
	List<List<Integer>> createGraph(int n, int[][] edges) {
		List<List<Integer>> list = new ArrayList<>();
		for (int i = 0; i < n; i++) {
			list.add(new ArrayList<>());
		}
		for (int i = 0; i < edges.length; i++) {
			int u = edges[i][0];
			int v = edges[i][1];
			list.get(u).add(v);
			list.get(v).add(u);
		}
		return list;
	}
}