class Solution {
	int dfs(Map<Integer, List<int[]>> map, int node, int parent) {
		int numerOfEdgesNeedingReverse = 0;
		if (map.containsKey(node)) {
			for (int[] next: map.get(node)) {	
				if (next[0] == parent) {
					continue;
				}
				if (next[1] == -1) {
					numerOfEdgesNeedingReverse++;
				}
				numerOfEdgesNeedingReverse += dfs(map,next[0],node);
			}
		}
		return numerOfEdgesNeedingReverse;
	}
	int minReorder(int n, int[][] connections) {
		Map<Integer, List<int[]>> map = new HashMap<>();
		for (int[] c: connections) {	
			map.putIfAbsent(c[0],new ArrayList<>());
			map.putIfAbsent(c[1],new ArrayList<>());
			map.get(c[0]).add(new int{c[1], -1});
			map.get(c[1]).add(new int{c[0], 1});
		}
		return dfs(map,0,-1);
	}
}