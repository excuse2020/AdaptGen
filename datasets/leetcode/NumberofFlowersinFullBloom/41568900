class Solution {
	int binarySearchLowerBound(int[] nums, int target) {
		int low = 0, high = nums.length - 1;
		while (low <= high) {
			int mid = low + (high - low) / 2;
			if (nums[mid] < target) {
				low = mid + 1;
			} 
			else {
				high = mid - 1;
			}
		}
		return low;
	}
	int[] fullBloomFlowers(int[][] flowers, int[] people) {
		int n = flowers.length;
		int[] start = new int[n];
		int[] end = new int[n];
		for (int i = 0; i < n; i++) {
			start[i] = flowers[i][0];
			end[i] = flowers[i][1];
		}
		Arrays.sort(start);
		Arrays.sort(end);
		for (int i = 0; i < people.length; i++) {
			int t = people[i];
			int started = binarySearchLowerBound(start,t + 1);
			int ended = binarySearchLowerBound(end,t);
			people[i] = started - ended;
		}
		return people;
	}
}