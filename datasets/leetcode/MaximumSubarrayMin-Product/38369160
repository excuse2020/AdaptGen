class Solution {
	long MOD = (int) (1e9 + 7);
	int maxSumMinProduct(int[] nums) {
		int n = nums.length;
		long prefixSum = new long[nums.length];
		prefixSum[0] = nums[0];
		for (int i = 1; i < nums.length; i++) {
			prefixSum[i] = prefixSum[i - 1] + (nums[i] * 1l);
		}
		Stack<Pair<Integer, Integer>> stack = new Stack<>();
		long max = 0;
		for (int i = 0; i < n; i++) {
			int index = i;
			while (!stack.isEmpty() && stack.peek().getValue() > nums[i]) {
				long minValue = stack.peek().getValue() * 1l;
				int minIndex = stack.peek().getKey();
				long preSum = prefixSum[i] - nums[i] * 1l - ((minIndex - 1) < 0 ? 0 : prefixSum[minIndex - 1]);
				max = Math.max(max,(preSum * minValue));
				stack.pop();
				index = minIndex;
			}
			stack.push(new Pair(index, nums[i]));
		}
		while (!stack.isEmpty()) {
			long minValue = stack.peek().getValue() * 1l;
			int minIndex = stack.peek().getKey();
			long preSum = prefixSum[n - 1] - ((minIndex - 1) < 0 ? 0 : prefixSum[minIndex - 1]);
			max = Math.max(max,(preSum * minValue));
			stack.pop();
		}
		return (int) (max % MOD);
	}
}