class Solution {
	String lcaToStart, lcaToEnd;
	void dfs(TreeNode node, StringBuilder pathString, int s, int d) {
		if (node == null) {
			return;
		}
		if (node.val == s) {
			lcaToStart = pathString.toString();
		}
		if (node.val == d) {
			lcaToEnd = pathString.toString();
		}
	}
	String getDirections(TreeNode root, int startValue, int destValue) {
		TreeNode lcaNode = lca(root,startValue,destValue);
		StringBuilder pathString = new StringBuilder();
		dfs(lcaNode,pathString,startValue,destValue);
		StringBuilder result = new StringBuilder();
	}
	TreeNode lca(TreeNode node, int s, int d) {
		if (node == null) {
			return null;
		}
		TreeNode leftSide = lca(node.left,s,d);
		TreeNode rightSide = lca(node.right,s,d);
		if ((leftSide != null && rightSide != null) || (node.val == s || node.val == d)) {
			return node;
		}
		return (leftSide == null) ? rightSide : leftSide;
	}
}