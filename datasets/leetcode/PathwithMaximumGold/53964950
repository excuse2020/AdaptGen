class Solution {
	int getMaximumGold(int[][] grid) {
		boolean[][] visited = new boolean[grid.length][grid[0].length];
		int max = 0;
		for (int i = 0; i < grid.length; i++) {
			for (int j = 0; j < grid[0].length; j++) {
				if (grid[i][j] != 0) {
					visited[i][j] = true;
					max = Math.max(max,sol(grid,visited,i,j,grid[i][j]));
					visited[i][j] = false;
				}
			}
		}
		return max;
	}
	int sol(int[][] grid, boolean[][] visited, int row, int col, int ans) {
		int res = ans;
		if (row < 0 || row > grid.length - 1 || col < 0 || col > grid[0].length - 1 || grid[row][col] == 0) {
			return ans;
		}
		if (col < grid[0].length - 1 && !visited[row][col + 1]) {
			visited[row][col + 1] = true;
			res = Math.max(res,sol(grid,visited,row,col + 1,ans + grid[row][col + 1]));
			visited[row][col + 1] = false;
		}
		if (row < grid.length - 1 && !visited[row + 1][col]) {
			visited[row + 1][col] = true;
			res = Math.max(res,sol(grid,visited,row + 1,col,ans + grid[row + 1][col]));
			visited[row + 1][col] = false;
		}
		if (row > 0 && !visited[row - 1][col]) {
			visited[row - 1][col] = true;
			res = Math.max(res,sol(grid,visited,row - 1,col,ans + grid[row - 1][col]));
			visited[row - 1][col] = false;
		}
		if (col > 0 && !visited[row][col - 1]) {
			visited[row][col - 1] = true;
			res = Math.max(res,sol(grid,visited,row,col - 1,ans + grid[row][col - 1]));
			visited[row][col - 1] = false;
		}
		return res;
	}
}