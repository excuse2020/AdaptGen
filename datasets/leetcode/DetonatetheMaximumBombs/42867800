class Solution {
	Map<Integer, ArrayList<Integer>> map = new HashMap<>();
	int n = 0;
	int bfs(int source) {
		Queue<Integer> q = new LinkedList<>();
		Set<Integer> visited = new HashSet<>();
		q.add(source);
		visited.add(source);
		int count = 1;
		while (!q.isEmpty()) {
			int curr = q.peek();
			q.poll();
			for (int child: map.get(curr)) {	
				if (!visited.contains(child)) {
					q.add(child);
					visited.add(child);
					count++;
				}
			}
		}
		return count;
	}
	boolean inRange(int[] a, int[] b) {
		long dx = a[0] - b[0], dy = a[1] - b[1], r = a[2];
		return dx * dx + dy * dy <= r * r;
	}
	int maximumDetonation(int[][] bombs) {
		n = bombs.length;
		for (int i = 0; i < n; i++) {
			map.put(i,new ArrayList<>());
		}
		for (int i = 0; i < n - 1; i++) {
			for (int j = i + 1; j < n; j++) {
				if (inRange(bombs[i],bombs[j])) {
					map.get(i).add(j);
				}
				if (inRange(bombs[j],bombs[i])) {
					map.get(j).add(i);
				}
			}
		}
		int max = 0;
		for (int i = 0; i < n; i++) {
			max = Math.max(max,bfs(i));
		}
		return max;
	}
}