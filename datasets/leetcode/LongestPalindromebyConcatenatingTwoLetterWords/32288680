class Solution {
	int longestPalindrome(String[] words) {
		int twoSameLetters = 0;
		int counter = 0;
		Map<String, Integer> wordMap = new HashMap<>();
		List<String> sameLetterClub = new ArrayList<>();
		for (String w: words) {	
			if (twoSameLetters(w)) {
				sameLetterClub.add(w);
			}
			String reversedWord = reverse(w);
			if (wordMap.get(reversedWord) != null && wordMap.get(reversedWord) > 0) {
				wordMap.put(reversedWord,wordMap.get(reversedWord) - 1);
				counter = counter + 4;
			} 
			else {
				wordMap.put(w,wordMap.getOrDefault(w,0) + 1);
			}
		}
		for (String s: sameLetterClub) {	
			if (wordMap.get(s) > 0) {
				twoSameLetters = 2;
				break;
			}
		}
		return counter + twoSameLetters;
	}
	String reverse(String word) {
		StringBuilder sb = new StringBuilder();
		sb.append(word);
		sb.reverse();
		return sb.toString();
	}
	boolean twoSameLetters(String word) {
		return word.charAt(0) == word.charAt(1);
	}
}