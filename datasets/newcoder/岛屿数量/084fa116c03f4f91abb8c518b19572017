class Solution {
	void dpRowAndColumn(char[][] grid, int row, int column) {
		if (row < 0 || row >= grid.length || column < 0 || column >= grid[0].length) {
			return;
		}
		if (grid[row][column] != '1') {
			return;
		}
		grid[row][column] = '2';
		dpRowAndColumn(grid,row - 1,column);
		dpRowAndColumn(grid,row + 1,column);
		dpRowAndColumn(grid,row,column - 1);
		dpRowAndColumn(grid,row,column + 1);
	}
	int solve(char[][] grid) {
		int result = 0;
		for (int row = 0; row < grid.length; row++) {
			for (int column = 0; column < grid[0].length; column++) {
				if (grid[row][column] == '1') {
					dpRowAndColumn(grid,row,column);
					result++;
				}
			}
		}
		return result;
	}
}