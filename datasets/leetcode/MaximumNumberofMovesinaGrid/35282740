class Solution {
	int cols;
	int rows;
	boolean isValid(int x, int y) {
		return (x >= 0 && x < rows && y >= 0 && y < cols);
	}
	int maxMoves(int[][] grid) {
		rows = grid.length;
		cols = grid[0].length;
		int ans = 0;
		for (int i = 0; i < grid.length; i++) {
			ans = Math.max(ans,recursion(i,0,grid));
		}
		return ans;
	}
	int recursion(int i, int j, int[][] grid) {
		if (!isValid(i,j)) {
			return 0;
		}
		int rec1 = 0;
		int rec2 = 0;
		int rec3 = 0;
		if (isValid(i - 1,j + 1) && grid[i - 1][j + 1] > grid[i][j]) {
			rec1 = 1 + recursion(i - 1,j + 1,grid);
		}
		if (isValid(i,j + 1) && grid[i][j + 1] > grid[i][j]) {
			rec2 = 1 + recursion(i,j + 1,grid);
		}
		if (isValid(i + 1,j + 1) && grid[i + 1][j + 1] > grid[i][j]) {
			rec3 = 1 + recursion(i + 1,j + 1,grid);
		}
		return Math.max(rec1,Math.max(rec2,rec3));
	}
}