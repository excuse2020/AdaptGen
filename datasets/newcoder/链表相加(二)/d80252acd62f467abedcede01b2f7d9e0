class Solution {
	ListNode addInList(ListNode head1, ListNode head2) {
		Stack<Integer> s1 = new Stack<>();
		Stack<Integer> s2 = new Stack<>();
		while (head1 != null) {
			s1.push(head1.val);
			head1 = head1.next;
		}
		while (head2 != null) {
			s2.push(head2.val);
			head2 = head2.next;
		}
		int n1 = 0;
		int n2 = 0;
		int n = 0;
		int ca = 0;
		ListNode pre = null;
		ListNode node = null;
		while (!s1.isEmpty() || !s2.isEmpty()) {
			n1 = s1.isEmpty() ? 0 : s1.pop();
			n2 = s2.isEmpty() ? 0 : s2.pop();
			n = n1 + n2;
			pre = node;
			node = new ListNode(n % 10);
			node.next = pre;
			ca = n / 10;
		}
		if (ca > 0) {
			pre = node;
			node = new ListNode(ca);
			node.next = pre;
		}
		return node;
	}
}