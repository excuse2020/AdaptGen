class Solution {
	int[] deepCopy(int[] arr) {
		int[] copy = new int[10];
		for (int i = 0; i < 10; i++) {
			copy[i] = arr[i];
		}
		return copy;
	}
	boolean isPseudoPalindromic(int[] arr) {
		int oddCount = 0;
		for (int k: arr) {	
			oddCount += k % 2 == 1 ? 1 : 0;
		}
		return oddCount < 2;
	}
	int pseudoPalindromicPaths(TreeNode root) {
		return res(root,new int[10]);
	}
	int res(TreeNode node, int[] acc) {
		if (node == null) {
			return 0;
		} 
		else if (node.left == null && node.right == null) {
			acc[node.val]++;
			return isPseudoPalindromic(acc) ? 1 : 0;
		} 
		else {
			acc[node.val]++;
			return res(node.left,deepCopy(acc)) + res(node.right,deepCopy(acc));
		}
	}
}