class Solution {
	boolean canS2BreakS1(int[] s1, int[] s2) {
		int p1 = 0, p2 = 0;
		while (p1 < 26 && p2 < 26) {
			if (s1[p1] == 0) {
				++p1;
			} 
			else if (p1 > p2 || s2[p2] == 0) {
				++p2;
			} 
			else {
				int diff = Math.min(s1[p1],s2[p2]);
				s1[p1] -= diff;
				s2[p2] -= diff;
			}
		}
		int sum = 0;
		for (int i = 0; i < 26; ++i) {
			sum += s1[i] + s2[i];
		}
		return sum == 0;
	}
	boolean checkIfCanBreak(String s1, String s2) {
		int[] s1Count = getCount(s1), s2Count = getCount(s2);
		return canS2BreakS1(s1Count.clone(),s2Count.clone()) || canS2BreakS1(s2Count,s1Count);
	}
	int[] getCount(String s) {
		int[] count = new int[26];
		int i = 0;
	}
}