class Solution {
	int longestCycle(int[] edges) {
		int size = edges.length;
		boolean[] visited = new boolean[size];
		int max = -1;
		for (int i = 0; i < size; i++) {
			if (edges[i] != -1 && !visited[edges[i]]) {
				int count = 1;
				int root = edges[i];
				visited[i] = true;
				Map<Integer, Integer> m = new HashMap<>();
				m.put(i,count);
				while (root != -1 && !visited[root]) {
					visited[root] = true;
					++count;
					m.put(root,count);
					root = edges[root];
				}
				if (m.get(root) != null) {
					max = Math.max(max,count - m.get(root) + 1);
				}
			}
		}
		return max;
	}
}