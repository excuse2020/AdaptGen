class Solution {
	Map<Integer, List<Integer>> adj;
	int dfs(int curr, int parent, List<Boolean> hasApple) {
		int timeAtCurrentNode = 0;
		for (int child: adj.get(curr)) {	
			if (child == parent) {
				continue;
			}
			int timeFromChild = dfs(child,curr,hasApple);
			if (timeFromChild > 0 || hasApple.get(child)) {
				timeAtCurrentNode += (2 + timeFromChild);
			}
		}
		return timeAtCurrentNode;
	}
	int minTime(int n, int[][] edges, List<Boolean> hasApple) {
		if (n == 1) {
			return 0;
		}
		adj = new HashMap<>();
		for (int[] e: edges) {	
			if (!adj.containsKey(e[0])) {
				adj.put(e[0],new ArrayList<>());
			}
			if (!adj.containsKey(e[1])) {
				adj.put(e[1],new ArrayList<>());
			}
			adj.get(e[0]).add(e[1]);
			adj.get(e[1]).add(e[0]);
		}
		return dfs(0,-1,hasApple);
	}
}