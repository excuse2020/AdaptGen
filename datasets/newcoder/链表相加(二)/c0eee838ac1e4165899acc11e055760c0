class Solution {
	ListNode addInList(ListNode head1, ListNode head2) {
		if (head1 == null) {
			return head2;
		}
		if (head2 == null) {
			return head1;
		}
		ListNode reversedHead1 = reverseListNode(head1);
		ListNode reversedHead2 = reverseListNode(head2);
		ListNode res = null;
		int carry = 0;
		while (reversedHead1 != null || reversedHead2 != null || carry != 0) {
			int num1 = reversedHead1 == null ? 0 : reversedHead1.val;
			int num2 = reversedHead2 == null ? 0 : reversedHead2.val;
			int sum = num1 + num2;
			carry = sum / 10;
			sum = sum % 10;
			ListNode addedNode = new ListNode(sum);
			addedNode.next = res;
			res = addedNode;
			if (reversedHead1 != null) {
				reversedHead1 = reversedHead1.next;
			}
			if (reversedHead2 != null) {
				reversedHead2 = reversedHead2.next;
			}
		}
		return res;
	}
	ListNode reverseListNode(ListNode head) {
		ListNode reversedNode = null;
		while (head != null) {
			ListNode next = head.next;
			head.next = reversedNode;
			reversedNode = head;
			head = next;
		}
		return reversedNode;
	}
}