class Solution {
	int[] countServers(int n, int[][] logs, int x, int[] queries) {
		Arrays.sort(logs,(a, b) -> {a[1] - b[1]});
		List<int[]> queriesWithId = new ArrayList<>();
		for (int i = 0; i < queries.length; i++) {
			queriesWithId.add(new int{i, queries[i]});
		}
		Collections.sort(queriesWithId,(a, b) -> {a[1] - b[1]});
		int[] res = new int[queries.length];
		Map<Integer, Integer> activeServers = new HashMap<>();
		int loggerStart = 0;
		int loggerEnd = 0;
		for (int[] query: queriesWithId) {	
			int queryId = query[0];
			int queryStart = query[1] - x;
			int queryEnd = query[1];
			while (loggerEnd < logs.length && logs[loggerEnd][1] <= queryEnd) {
				int server = logs[loggerEnd][0];
				activeServers.put(server,activeServers.getOrDefault(server,0) + 1);
				loggerEnd++;
			}
			while (loggerStart < logs.length && logs[loggerStart][1] < queryStart) {
				int server = logs[loggerStart][0];
				activeServers.put(server,activeServers.get(server) - 1);
				if (activeServers.get(server) == 0) {
					activeServers.remove(server);
				}
				loggerStart++;
			}
			res[queryId] = n - activeServers.size();
		}
		return res;
	}
}