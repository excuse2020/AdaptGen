class Solution {
	Set<String> getCombinations(String curr, char openBracket, char closeBracket) {
		Set<String> output = new HashSet<>();
		int openCount = 0, closeCount = 0;
		int len = curr.length();
		for (int i = 0; i < len; i++) {
			char currChar = curr.charAt(i);
			if (currChar == openBracket) {
				openCount++;
			} 
			else if (currChar == closeBracket) {
				closeCount++;
				if (closeCount > openCount) {
					for (int j = 0; j <= i; j++) {
						if (curr.charAt(j) == closeBracket && (j == 0 || curr.charAt(j - 1) != closeBracket)) {
							String newStr = curr.substring(0,j) + curr.substring(j + 1,len);
							output.add(newStr);
						}
					}
					closeCount--;
				}
			}
		}
		return output;
	}
	boolean isVal(String s) {
		int bal = 0;
		int i = 0;
		char curr = s.charAt(i);
	}
	List<String> removeInvalidParentheses(String s) {
		List<String> output = new LinkedList<>();
		Set<String> visited = new HashSet<>();
		Queue<String> queue = new LinkedList<>();
		StringBuilder tempBuilder = new StringBuilder();
		boolean found = false;
		String curr = s;
		visited.add(curr);
		queue.offer(curr);
		curr = queue.poll();
		if (isVal(curr)) {
			output.add(curr);
			found = true;
		}
		if (found) {
			continue;
		}
		Set<String> combos;
	}
}