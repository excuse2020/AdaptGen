class Solution {
	List[] buildTree(int n, int[][] edges) {
		List[] mapped = new List[n];
		for (int[] edge: edges) {	
			if (mapped[edge[0]] == null) {
				mapped[edge[0]] = new ArrayList<>();
			}
			if (mapped[edge[1]] == null) {
				mapped[edge[1]] = new ArrayList<>();
			}
			mapped[edge[0]].add(edge[1]);
			mapped[edge[1]].add(edge[0]);
		}
		return mapped;
	}
	int[] countSubTrees(int n, int[][] edges, String labels) {
		List[] tree = buildTree(n,edges);
		int[] labelCount = new int[n];
		traverseTree(0,tree,new boolean[n],labels.toCharArray(),labelCount);
		return labelCount;
	}
	void mergeCount(int[] to, int[] from) {
		for (int i = 0; i < to.length; i++) {
			to[i] += from[i];
		}
	}
	int[] traverseTree(int node, List[] tree, boolean[] visited, char[] labels, int[] labelCount) {
		int[] count = new int[26];
	}
}