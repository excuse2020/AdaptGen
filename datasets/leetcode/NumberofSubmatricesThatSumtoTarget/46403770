class Solution {
	int numSubmatrixSumTarget(int[][] matrix, int target) {
		int m = matrix.length, n = matrix[0].length;
		int dp = new int[m][n];
		int ans = 0;
		dp[0][0] = matrix[0][0];
		for (int i = 1; i < m; i++) {
			dp[i][0] = dp[i - 1][0] + matrix[i][0];
		}
		for (int j = 1; j < n; j++) {
			dp[0][j] = dp[0][j - 1] + matrix[0][j];
		}
		for (int i = 1; i < m; i++) {
			for (int j = 1; j < n; j++) {
				dp[i][j] = matrix[i][j] + dp[i - 1][j] - dp[i - 1][j - 1];
			}
		}
		for (int i = 0; i < m; i++) {
			for (int j = 0; j < n; j++) {
				for (int I = 0; I <= i; I++) {
					for (int J = 0; J <= j; J++) {
						int sum = dp[i][j];
						if (I - 1 >= 0) {
							sum -= dp[I - 1][j];
						}
						if (J - 1 >= 0) {
							sum -= dp[i][J - 1];
						}
						if (I - 1 >= 0 && J - 1 >= 0) {
							sum += dp[I - 1][J - 1];
						}
						if (sum == target) {
							ans++;
						}
					}
				}
			}
		}
		return ans;
	}
}