class Solution {
	int numOfMinutes(int n, int headID, int[] manager, int[] informTime) {
		if (n == 1) {
			return 0;
		}
		HashMap<Integer, List<Integer>> map = new HashMap<>();
		for (int i = 0; i < manager.length; i++) {
			if (!map.containsKey(manager[i])) {
				map.put(manager[i],new ArrayList<>());
			}
			map.get(manager[i]).add(i);
		}
		Queue<Pair<Integer, Integer>> q = new LinkedList<>();
		int max = Integer.MIN_VALUE;
		for (int i = 0; i < map.get(headID).size(); i++) {
			q.add(new Pair<>(map.get(headID).get(i), informTime[headID]));
			max = Math.max(informTime[headID],max);
		}
		while (!q.isEmpty()) {
			int size = q.size();
			for (int i = 0; i < size; i++) {
				int curr = q.peek().getKey();
				int sum = q.peek().getValue();
				q.poll();
				if (map.containsKey(curr)) {
					for (int j = 0; j < map.get(curr).size(); j++) {
						q.add(new Pair<>(map.get(curr).get(j), informTime[curr] + sum));
						max = Math.max(max,informTime[curr] + sum);
					}
				}
			}
		}
		return max;
	}
}