class Solution {
	long minimumCost(int m, int n, int[] horizontalCut, int[] verticalCut) {
		int verti = 1;
		int hori = 1;
		long ans = 0;
		n = horizontalCut.length;
		m = verticalCut.length;
		int arr = new int[n + m][2];
		int idx = 0;
		for (int i: horizontalCut) {	
			arr[idx][0] = i;
			arr[idx++][1] = 0;
		}
		for (int i: verticalCut) {	
			arr[idx][0] = i;
			arr[idx++][1] = 1;
		}
		Arrays.sort(arr,(a, b) -> {Integer.compare(b[1],a[1])});
		Arrays.sort(arr,(a, b) -> {Integer.compare(b[0],a[0])});
		for (int i = 0; i < arr.length; i++) {
			int num = arr[i][0];
			int cut = arr[i][1];
			if (cut == 0) {
				ans += num * verti;
				hori++;
			} 
			else {
				ans += num * hori;
				verti++;
			}
		}
		return ans;
	}
}