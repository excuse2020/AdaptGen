class Solution {
	int LCM(int a, int b) {
		int gcd = find_gcd(a,b);
		int lcm = (a * b) / gcd;
		return lcm;
	}
	int find_gcd(int a, int b) {
		if (b == 0) {
			return a;
		}
		return find_gcd(b,a % b);
	}
	int nthMagicalNumber(int n, int a, int b) {
		int mod = 1000000007;
		long ans = 0, lo = 1, hi = (long) n * (Math.min(a,b));
		while (lo <= hi) {
			long mid = (lo + hi) / 2;
			if ((mid / a) + (mid / b) - (mid / LCM(a,b)) >= n) {
				ans = (mid % mod);
				hi = mid - 1;
			} 
			else {
				lo = mid + 1;
			}
		}
		return (int) ans;
	}
}