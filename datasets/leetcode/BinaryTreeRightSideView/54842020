class Solution {
	void Inorder(TreeNode root, int rightNodes, int start) {
		if (root == null) {
			return;
		}
		Inorder(root.left,rightNodes,start + 1);
		rightNodes[start] = root.val;
		Inorder(root.right,rightNodes,start + 1);
	}
	List<Integer> rightSideView(TreeNode root) {
		int rightNodes = new int[treeHeight(root)];
		Inorder(root,rightNodes,0);
		List<Integer> nodeList = new ArrayList<Integer>();
		for (int i = 0; i < rightNodes.length; i++) {
			nodeList.add(rightNodes[i]);
		}
		return nodeList;
	}
	int treeHeight(TreeNode root) {
		if (root == null) {
			return 0;
		}
		int left = treeHeight(root.left);
		int right = treeHeight(root.right);
		int max = Math.max(left,right) + 1;
		return max;
	}
}