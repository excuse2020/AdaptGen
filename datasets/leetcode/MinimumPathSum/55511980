class Solution {
	int f(int i, int j, int[][] grid, int[][] dp) {
		if (i < 0 || j < 0) {
			return Integer.MAX_VALUE;
		}
		if (i == 0 && j == 0) {
			return grid[0][0];
		}
		if (dp[i][j] != -1) {
			return dp[i][j];
		}
		int up = (i > 0) ? f(i - 1,j,grid,dp) : Integer.MAX_VALUE;
		int left = (j > 0) ? f(i,j - 1,grid,dp) : Integer.MAX_VALUE;
		dp[i][j] = grid[i][j] + Math.min(up,left);
		return dp[i][j];
	}
	int minPathSum(int[][] grid) {
		int n = grid.length;
		int m = grid[0].length;
		int[][] dp = new int[n][m];
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < m; j++) {
				dp[i][j] = -1;
			}
		}
		return f(n - 1,m - 1,grid,dp);
	}
}