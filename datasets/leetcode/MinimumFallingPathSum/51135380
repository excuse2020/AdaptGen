class Solution {
	int minFallingPathSum(int[][] matrix) {
		int n = matrix.length;
		int dp = new int[n][n];
		for (int j = 0; j < n; j++) {
			dp[0][j] = matrix[0][j];
		}
		for (int i = 1; i < n; i++) {
			for (int j = 0; j < n; j++) {
				int u = matrix[i][j] + dp[i - 1][j];
				int l = matrix[i][j];
				if (j - 1 >= 0) {
					l += dp[i - 1][j - 1];
				} 
				else {
					l += 100000;
				}
				int r = matrix[i][j];
				if (j + 1 < n) {
					r += dp[i - 1][j + 1];
				} 
				else {
					r += 100000;
				}
				dp[i][j] = Math.min(u,Math.min(l,r));
			}
		}
		int ans = Integer.MAX_VALUE;
		for (int j = 0; j < n; j++) {
			ans = Math.min(ans,dp[n - 1][j]);
		}
		return ans;
	}
}