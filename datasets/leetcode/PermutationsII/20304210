class Solution {
	void backtrack(List<List<Integer>> res, List<Integer> list, int[] nums, boolean[] visited, int idx) {
		if (idx == nums.length) {
			res.add(new ArrayList<>(list));
			return;
		}
		for (int i = 0; i < nums.length; i++) {
			if (!visited[i]) {
				visited[i] = true;
				list.add(nums[i]);
				backtrack(res,list,nums,visited,idx + 1);
				visited[i] = false;
				list.remove(list.size() - 1);
			}
		}
	}
	List<List<Integer>> permute(int[] nums) {
		List<List<Integer>> ans = new ArrayList<>();
		int len = nums.length;
		if (len == 0) {
			return ans;
		}
		boolean[] vis = new boolean[len];
		backtrack(ans,new ArrayList<>(),nums,vis,0);
		return ans;
	}
}