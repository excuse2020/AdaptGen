class Solution {
	boolean checkingadjlistsize(int src, int size, ArrayList<ArrayList<Integer>> adj, boolean[] vis) {
		vis[src] = true;
		if (adj.get(src).size() != size) {
			return false;
		}
		for (int el: adj.get(src)) {	
			if (!vis[el]) {
				boolean b = checkingadjlistsize(el,size,adj,vis);
				if (!b) {
					return false;
				}
			}
		}
		return true;
	}
	int countCompleteComponents(int n, int[][] edges) {
		ArrayList<ArrayList<Integer>> adj = new ArrayList<>();
		for (int i = 0; i < n; i++) {
			adj.add(new ArrayList<>());
		}
		for (int i = 0; i < edges.length; i++) {
			adj.get(edges[i][0]).add(edges[i][1]);
			adj.get(edges[i][1]).add(edges[i][0]);
		}
		int res = 0;
		boolean[] visited = new boolean[n];
		boolean[] vis = new boolean[n];
		for (int i = 0; i < n; i++) {
			if (!visited[i]) {
				int size = findingcomponentsize(i,adj,visited) + 1;
				if (size != 1) {
					boolean flag = checkingadjlistsize(i,size - 1,adj,vis);
					if (flag) {
						res++;
					}
				} 
				else {
					res++;
				}
			}
		}
		return res;
	}
	int findingcomponentsize(int src, ArrayList<ArrayList<Integer>> adj, boolean[] visited) {
		visited[src] = true;
		int count = 0;
		for (int element: adj.get(src)) {	
			if (!visited[element]) {
				count = 1 + findingcomponentsize(element,adj,visited);
			}
		}
		return count;
	}
}