class Solution {
	int dvs(String s, int left, int right) {
		if (s == null || left > right) {
			return 0;
		}
		while (left >= 0 && right < s.length() && s.charAt(left) == s.charAt(right)) {
			left -= 1;
			right += 1;
		}
		return right - left;
	}
	String longestPalindrome(String s) {
		if (s == null || s.length() < 1) {
			return "";
		}
		int start = 0, end = 0;
		for (int i = 0; i < s.length(); i++) {
			int bod = dvs(s,i,i), sdcx = dvs(s,i,i + 1), sdv = Math.max(bod,sdcx);
			if (sdv > end - start) {
				start = i - ((sdv - 1) / 2);
				end = i + (sdv / 2);
			}
		}
		return s.substring(start,end + 1);
	}
}