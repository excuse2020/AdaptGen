class Solution {
	int helper(List<List<Integer>> tri, int i, int j, int n, int[][] dp) {
		if (i == n - 1) {
			return tri.get(i).get(j);
		}
		if (dp[i][j] != -1) {
			return dp[i][j];
		}
		int down = tri.get(i).get(j) + helper(tri,i + 1,j,n,dp);
		int diagonal = tri.get(i).get(j) + helper(tri,i + 1,j + 1,n,dp);
		return dp[i][j] = Math.min(down,diagonal);
	}
	int minimumTotal(List<List<Integer>> triangle) {
		int n = triangle.size();
		int[][] dp = new int[n][n];
		for (int[] d: dp) {	
			Arrays.fill(d,-1);
		}
		return helper(triangle,0,0,n,dp);
	}
}