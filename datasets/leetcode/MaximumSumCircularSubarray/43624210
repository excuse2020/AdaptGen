class Solution {
	int kadane(int arr, int n) {
		int maxsum = Integer.MIN_VALUE;
		int currentsum = 0;
		for (int i = 0; i < n; i++) {
			currentsum += arr[i];
			if (currentsum < 0) {
				currentsum = 0;
			}
			maxsum = Math.max(currentsum,maxsum);
		}
		return maxsum;
	}
	int maxSubarraySumCircular(int[] nums) {
		int wrapsum = Integer.MIN_VALUE;
		int nonwrapsum = Integer.MIN_VALUE;
		int maxsum = Integer.MIN_VALUE;
		int len = nums.length;
		int negarr = 0;
		int count = 0;
		for (int i = 0; i < len; i++) {
			if (nums[i] < 0) {
				count++;
			}
		}
		if (count == len) {
			int max = nums[0];
			for (int i = 1; i < len; i++) {
				if (nums[i] > max) {
					max = nums[i];
				}
			}
			return max;
		} 
		else {
			nonwrapsum = kadane(nums,len);
			int totalsum = 0;
			for (int i = 0; i < len; i++) {
				totalsum += nums[i];
				nums[i] = -nums[i];
			}
			wrapsum = totalsum + kadane(nums,len);
			System.out.println(wrapsum + " ");
			maxsum = Math.max(wrapsum,nonwrapsum);
			return maxsum;
		}
	}
}