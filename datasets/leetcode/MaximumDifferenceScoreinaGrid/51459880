class Solution {
	int maxScore(List<List<Integer>> grid) {
		int m = grid.size();
		int n = grid.get(0).size();
		int[][] dp = new int[m][n];
		dp[m - 1][n - 1] = grid.get(m - 1).get(n - 1);
		int maxRight = dp[m - 1][n - 1];
		for (int col = n - 2; col >= 0; col--) {
			dp[m - 1][col] = maxRight;
			maxRight = Math.max(maxRight,grid.get(m - 1).get(col));
		}
		int maxBottom = dp[m - 1][n - 1];
		for (int row = m - 2; row >= 0; row--) {
			dp[row][n - 1] = maxBottom;
			maxBottom = Math.max(maxBottom,grid.get(row).get(n - 1));
		}
		for (int row = m - 2; row >= 0; row--) {
			for (int col = n - 2; col >= 0; col--) {
				int max1 = Math.max(grid.get(row).get(col + 1),grid.get(row + 1).get(col));
				int max2 = Math.max(dp[row][col + 1],dp[row + 1][col]);
				dp[row][col] = Math.max(max1,max2);
			}
		}
		int max = Integer.MIN_VALUE;
		for (int row = 0; row < m; row++) {
			for (int col = 0; col < n; col++) {
				if (row != m - 1 || col != n - 1) {
					max = Math.max(max,dp[row][col] - grid.get(row).get(col));
				}
			}
		}
		return max;
	}
}