class Solution {
	void cal(Deque<Integer> nums, Deque<Character> ops) {
		if (nums.isEmpty() || nums.size() < 2) {
			return;
		}
		if (ops.isEmpty()) {
			return;
		}
		int b = nums.removeLast();
		int a = nums.removeLast();
		int num = ops.removeLast() == '+' ? a + b : a - b;
		nums.addLast(num);
	}
	int calculate(String s) {
		Deque<Integer> nums = new LinkedList<>();
		Deque<Character> ops = new LinkedList<>();
		for (int i = 0; i < s.length(); i++) {
			char c = s.charAt(i);
			if (c == '(') {
				ops.addLast(c);
			} 
			else if (c == ')') {
				while (!ops.isEmpty()) {
					if (ops.peekLast() != '(') {
						cal(nums,ops);
					} 
					else {
						ops.removeLast();
						break;
					}
				}
			} 
			else {
				if (Character.isDigit(c)) {
					int j = i;
					int num = 0;
					while (j < s.length() && Character.isDigit(s.charAt(j))) {
						num = num * 10 + s.charAt(j) - '0';
						j++;
					}
					nums.addLast(num);
					i = j - 1;
				} 
				else {
					if (i > 0 && (s.charAt(i - 1) == '+' || s.charAt(i - 1) == '-' || s.charAt(i - 1) == '(')) {
						nums.addLast(0);
					}
					if (i == 0 && s.charAt(i) == '-') {
						nums.addLast(0);
					}
					while (!ops.isEmpty() && ops.peekLast() != '(') {
						cal(nums,ops);
					}
					ops.addLast(c);
				}
			}
		}
		while (!ops.isEmpty()) {
			cal(nums,ops);
		}
		return nums.peekLast();
	}
}