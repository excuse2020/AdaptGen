class Solution {
	List<TreeNode> inOrder = new ArrayList<>();
	List<TreeNode> postOrder = new ArrayList<>();
	List<TreeNode> preOrder = new ArrayList<>();
	void in(TreeNode root) {
		if (root == null) {
			return;
		}
		in(root.left);
		inOrder.add(root);
		in(root.right);
	}
	void post(TreeNode root) {
		if (root == null) {
			return;
		}
		post(root.left);
		post(root.right);
		postOrder.add(root);
	}
	void pre(TreeNode root) {
		if (root == null) {
			return;
		}
		preOrder.add(root);
		pre(root.left);
		pre(root.right);
	}
	int[][] threeOrders(TreeNode root) {
		pre(root);
		in(root);
		post(root);
		int[][] res = new int[3][preOrder.size()];
		for (int i = 0; i < preOrder.size(); i++) {
			res[0][i] = preOrder.get(i).val;
		}
		for (int i = 0; i < inOrder.size(); i++) {
			res[1][i] = inOrder.get(i).val;
		}
		for (int i = 0; i < postOrder.size(); i++) {
			res[2][i] = postOrder.get(i).val;
		}
		return res;
	}
}