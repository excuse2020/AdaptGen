class Solution {
	String LCS(String s1, String s2) {
		char[] chs1 = s1.toCharArray();
		char[] chs2 = s2.toCharArray();
		int m = chs1.length, n = chs2.length;
		if (m == 0 || n == 0) {
			return "-1";
		}
		int dp = new int[m + 1][n + 1];
		int max = -1;
		for (int i = 1; i <= m; i++) {
			for (int j = 1; j <= n; j++) {
				if (chs1[i - 1] == chs2[j - 1]) {
					dp[i][j] = dp[i - 1][j - 1] + 1;
				} 
				else {
					dp[i][j] = Math.max(dp[i - 1][j],dp[i][j - 1]);
				}
				max = Math.max(max,dp[i][j]);
			}
		}
		int i = m, j = n;
		StringBuffer sb = new StringBuffer();
		while (i != 0 && j != 0) {
			if (chs1[i - 1] == chs2[j - 1]) {
				sb.append(chs1[i - 1]);
				i--;
				j--;
			} 
			else {
				int temp = dp[i - 1][j] > dp[i][j - 1] ? i-- : j--;
			}
		}
		if (sb.length() == 0) {
			return "-1";
		}
		return sb.reverse().toString();
	}
}