class Solution {
	boolean canFinish(int numCourses, int[][] prerequisites) {
		if (prerequisites.length == 0) {
			return true;
		}
		List<List<Integer>> courses = new ArrayList<>();
		for (int i = 0; i < numCourses; i++) {
			courses.add(new ArrayList<Integer>());
		}
		for (int i = 0; i < prerequisites.length; i++) {
			courses.get(prerequisites[i][1]).add(prerequisites[i][0]);
		}
		int[] visited = new int[numCourses];
		for (int i = 0; i < numCourses; i++) {
			if (!dfs(courses,visited,i)) {
				return false;
			}
		}
		return true;
	}
	boolean dfs(List<List<Integer>> courses, int[] visited, int course) {
		visited[course] = 1;
		List<Integer> eligibleCourses = courses.get(course);
		for (int i = 0; i < eligibleCourses.size(); i++) {
			int eligibleCourse = eligibleCourses.get(i);
			if (visited[eligibleCourse] == 1) {
				return false;
			}
			if (visited[eligibleCourse] == 0) {
				if (!dfs(courses,visited,eligibleCourse)) {
					return false;
				}
			}
		}
		visited[course] = 2;
		return true;
	}
}