class Solution {
	long calTrip(int[] time, long totalTime) {
		long trips = 0;
		for (int t: time) {	
			trips += totalTime / t;
		}
		return trips;
	}
	long minimumTime(int[] time, int totalTrips) {
		int n = time.length;
		if (n == 0) {
			return -1;
		}
		if (n == 1) {
			return (long) time[0] * (long) totalTrips;
		}
		long minTime = Long.MAX_VALUE;
		long maxTime = Long.MIN_VALUE;
		for (int t: time) {	
			maxTime = Math.max(maxTime,t);
		}
		long st = 0;
		long end = maxTime * totalTrips;
		while (st <= end) {
			long mid = st + (end - st) / 2;
			long trips = calTrip(time,mid);
			if (trips >= totalTrips) {
				minTime = Math.min(minTime,mid);
				end = mid - 1;
			} 
			else {
				st = mid + 1;
			}
		}
		return minTime == Long.MAX_VALUE ? -1 : minTime;
	}
}