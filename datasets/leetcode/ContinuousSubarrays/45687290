class Solution {
	long continuousSubarrays(int[] nums) {
		long count = 0;
		TreeMap<Integer, Integer> map = new TreeMap<>();
		int start = 0;
		for (int end = 0; end < nums.length; end++) {
			map.put(nums[end],map.getOrDefault(nums[end],0) + 1);
			int diff = map.lastEntry().getKey() - map.firstEntry().getKey();
			while (diff > 2) {
				map.put(nums[start],map.get(nums[start]) - 1);
				if (map.get(nums[start]) == 0) {
					map.remove(nums[start]);
				}
				start++;
				diff = map.lastEntry().getKey() - map.firstEntry().getKey();
			}
			count += end - start + 1;
		}
		return count;
	}
}