class Solution {
	int[][] dp;
	int n;
	char[] w;
	boolean check(int[] f) {
		int i = 0, c = 0;
		while (i < 26) {
			if (f[i] != 0) {
				c = f[i];
				break;
			}
			i++;
		}
		while (i < 26) {
			if (f[i] != 0 && f[i] != c) {
				return false;
			}
			i++;
		}
		return true;
	}
	int helper(int la, int i, int[] f) {
		if (i >= n) {
			return i - la;
		}
		if (dp[la][i] != 0) {
			return dp[la][i];
		}
	}
	int minimumSubstringsInPartition(String s) {
		w = s.toCharArray();
		n = w.length;
		dp = new int[n + 1][n + 1];
		return helper(0,0,new int[26]);
	}
}