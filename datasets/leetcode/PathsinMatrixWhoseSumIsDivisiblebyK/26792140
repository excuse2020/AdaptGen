class Solution {
	int[][][] dp;
	int mod = (int) Math.pow(10,9) + 7;
	int dfs(int[][] grid, int row, int col, int k, int sum) {
		if (row >= grid.length || row < 0 || col >= grid[0].length || col < 0) {
			return 0;
		}
		sum += grid[row][col];
		if (row == grid.length - 1 && col == grid[0].length - 1) {
			if (sum % k == 0) {
				return 1;
			} 
			else {
				return 0;
			}
		}
		if (dp[row][col][sum % k] != -1) {
			return dp[row][col][sum % k];
		}
		int down = dfs(grid,row + 1,col,k,sum);
		int right = dfs(grid,row,col + 1,k,sum);
		return dp[row][col][sum % k] = (down + right) % mod;
	}
	int numberOfPaths(int[][] grid, int k) {
		int n = grid.length, m = grid[0].length;
		dp = new int[n + 1][m + 1][50];
		for (int[][] col: dp) {	
			for (int[] row: col) {	
				Arrays.fill(row,-1);
			}
		}
		return dfs(grid,0,0,k,0);
	}
}