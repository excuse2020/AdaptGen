class Solution {
	int[] countSubTrees(int n, int[][] edges, String labels) {
		HashSet<Integer>[] sets = new HashSet[n];
		boolean[] visited = new boolean[n];
		int[] res = new int[n];
		for (int i = 0; i < n; i++) {
			sets[i] = new HashSet<>();
		}
		for (int i = 0; i < edges.length; i++) {
			sets[edges[i][0]].add(edges[i][1]);
			sets[edges[i][1]].add(edges[i][0]);
		}
		int[] map = dfs(sets,labels,0,-1,res,visited);
		return res;
	}
	int[] dfs(HashSet<Integer>[] sets, String labels, int start, int parent, int[] res, boolean[] visited) {
		visited[start] = true;
		int[] parentMap = new int[26];
	}
}