class Solution {
	ArrayList<Integer>[] adj;
	int ans;
	int[] val;
	long dfs(int node, int parent, int k, int[] val) {
		long sum = 0;
		for (int child: adj[node]) {	
			if (child == parent) {
				continue;
			}
			sum += dfs(child,node,k,val);
		}
		sum += val[node];
		if (sum % k == 0) {
			ans++;
			return 0;
		}
		return sum;
	}
	int maxKDivisibleComponents(int n, int[][] edges, int[] values, int k) {
		adj = new ArrayList[n];
		for (int i = 0; i < n; i++) {
			adj[i] = new ArrayList<>();
		}
		for (int[] edge: edges) {	
			int u = edge[0];
			int v = edge[1];
			adj[u].add(v);
			adj[v].add(u);
		}
		ans = 0;
		dfs(0,-1,k,values);
		return ans;
	}
}