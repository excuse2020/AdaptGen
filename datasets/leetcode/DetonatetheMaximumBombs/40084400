class Solution {
	void dfs(List<List<Integer>> graph, boolean[] vis, int i, int[] count) {
		vis[i] = true;
		count[0]++;
		for (int n: graph.get(i)) {	
			if (!vis[n]) {
				dfs(graph,vis,n,count);
			}
		}
	}
	int maximumDetonation(int[][] bombs) {
		int n = bombs.length;
		List<List<Integer>> graph = new ArrayList<>(n);
		for (int i = 0; i < n; i++) {
			graph.add(new ArrayList<>());
			long x1 = bombs[i][0];
			long y1 = bombs[i][1];
			long r1 = bombs[i][2];
			for (int j = 0; j < n; j++) {
				if (i != j) {
					long x2 = bombs[j][0];
					long y2 = bombs[j][1];
					long distance = (x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1);
					if (distance <= r1 * r1) {
						graph.get(i).add(j);
					}
				}
			}
		}
		int ans = Integer.MIN_VALUE;
		for (int i = 0; i < n; i++) {
			int[] count = new int[1];
			boolean[] vis = new boolean[n];
			dfs(graph,vis,i,count);
			ans = Math.max(ans,count[0]);
		}
		return ans;
	}
}