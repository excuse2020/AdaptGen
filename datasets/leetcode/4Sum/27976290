class Solution {
	List<List<Integer>> fourSum(int[] nums, int target) {
		if (nums.length < 4) {
			List<List<Integer>> lists = new ArrayList<List<Integer>>();
			return lists;
		}
		Arrays.sort(nums);
		List<List<Integer>> lists = new ArrayList<List<Integer>>();
		for (int i = 0; i < nums.length; i++) {
			for (int j = i + 1; j < nums.length; j++) {
				long temp = nums[i] + nums[j];
				int k = j + 1;
				int l = nums.length - 1;
				while (k < l) {
					if (nums[k] + nums[l] > target) {
						l--;
					} 
					else if (nums[k] + nums[l] < target) {
						k++;
					} 
					else {
						lists.add(List.of(nums[i],nums[j],nums[k],nums[l]));
						k++;
					}
				}
			}
		}
		if (lists.isEmpty()) {
			List<List<Integer>> listss = new ArrayList<List<Integer>>();
			return listss;
		}
		List<List<Integer>> lists2 = new ArrayList<List<Integer>>();
		List<Integer> li = new ArrayList<Integer>();
		for (int i = 0; i < 4; i++) {
			li.add(lists.get(0).get(i));
		}
		lists2.add(li);
		for (int i = 0; i < lists.size(); i++) {
			boolean bool2 = true;
			for (int k = 0; k < lists2.size(); k++) {
				boolean bool = true;
				for (int j = 0; j < 4; j++) {
					if ((int) lists.get(i).get(j) != (int) lists2.get(k).get(j)) {
						bool = false;
						break;
					}
				}
				if (bool) {
					bool2 = false;
					break;
				}
			}
			if (bool2) {
				lists2.add(lists.get(i));
			}
		}
		return lists2;
	}
}