class Solution {
	int numBusesToDestination(int[][] routes, int source, int target) {
		int n = routes.length;
		HashMap<Integer, HashSet<Integer>> map = new HashMap<>();
		for (int i = 0; i < n; ++i) {
			for (int j: routes[i]) {	
				if (!map.containsKey(j)) {
					map.put(j,new HashSet<Integer>());
				}
				map.get(j).add(i);
			}
		}
		Queue<int[]> que = new ArrayDeque<>();
		que.offer(new int{source, 0});
		HashSet<Integer> seen = new HashSet<>();
		seen.add(source);
		boolean[] busVisited = new boolean[n];
		while (!que.isEmpty()) {
			int stop = que.peek()[0], bus = que.peek()[1];
			que.poll();
			if (stop == target) {
				return bus;
			}
			for (int i: map.get(stop)) {	
				if (busVisited[i]) {
					continue;
				}
				for (int j: routes[i]) {	
					if (!seen.contains(j)) {
						seen.add(j);
						que.offer(new int{j, bus + 1});
					}
				}
				busVisited[i] = true;
			}
		}
		return -1;
	}
}