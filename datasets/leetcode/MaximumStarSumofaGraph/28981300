class Solution {
	int maxStarSum(int[] vals, int[][] edges, int k) {
		HashMap<Integer, PriorityQueue<Integer>> graph = new HashMap<Integer, PriorityQueue<Integer>>();
		int n = vals.length;
		int res = Integer.MIN_VALUE;
		for (int i = 0; i < n; i++) {
			graph.put(i,new PriorityQueue<Integer>(Collections.reverseOrder()));
			res = Math.max(res,vals[i]);
		}
		for (int i = 0; i < edges.length; i++) {
			int src = edges[i][0];
			int dest = edges[i][1];
			int val1 = vals[src];
			int val2 = vals[dest];
			graph.get(src).add(val2);
			graph.get(dest).add(val1);
		}
		for (int i = 0; i < n; i++) {
			PriorityQueue<Integer> neighbours = graph.get(i);
			int size = k;
			int tempSum = vals[i];
			while (!neighbours.isEmpty() && size > 0) {
				int val = neighbours.remove();
				if (tempSum + val > tempSum) {
					tempSum += val;
				}
				size--;
			}
			res = Math.max(res,tempSum);
		}
		return res;
	}
}