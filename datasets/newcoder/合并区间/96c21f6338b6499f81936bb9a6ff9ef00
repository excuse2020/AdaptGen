class Solution {
	ArrayList<Interval> merge(ArrayList<Interval> intervals) {
		if (intervals.size() < 2) {
			return intervals;
		}
		intervals.sort(new ComparaInterval());
		ArrayList<Interval> arrayList = new ArrayList<>();
		Interval interval = intervals.get(0);
		intervals.remove(0);
		for (Interval tmpInterval: intervals) {	
			if (tmpInterval.start > interval.end) {
				arrayList.add(interval);
				interval = tmpInterval;
			} 
			else {
				if (interval.end >= tmpInterval.end) {
				} 
				else {
					interval.end = tmpInterval.end;
				}
			}
		}
		arrayList.add(interval);
		arrayList.sort(new ComparaInterval());
		return arrayList;
	}
	class ComparaInterval {
		int compare(Interval interval1, Interval interval2) {
			if (interval1.start < interval2.start) {
				return -1;
			} 
			else if (interval1.start > interval2.start) {
				return 1;
			} 
			else {
				if (interval1.end < interval2.end) {
					return -1;
				} 
				else if (interval1.end > interval2.end) {
					return 1;
				} 
				else {
					return 0;
				}
			}
		}
	}
}