class Solution {
	int count = 0;
	void dfs(List<List<Integer>> graph, boolean[] visit, int i) {
		if (!visit[i]) {
			visit[i] = true;
			for (int num: graph.get(i)) {	
				int absNum = Math.abs(num);
				if (!visit[absNum]) {
					if (num > 0) {
						count++;
					}
					dfs(graph,visit,absNum);
				}
			}
		}
	}
	int minReorder(int n, int[][] connections) {
		boolean visit = new boolean[n];
		List<List<Integer>> graph = new ArrayList<>();
		for (int i = 0; i < n; i++) {
			graph.add(i,new ArrayList<>());
		}
		for (int[] nums: connections) {	
			graph.get(nums[0]).add(nums[1]);
			graph.get(nums[1]).add(-nums[0]);
		}
		dfs(graph,visit,0);
		return count;
	}
}