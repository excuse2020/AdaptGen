class Solution {
	int minCost(int n, int[] cuts) {
		int arr = new int[cuts.length + 2];
		int dp = new int[cuts.length + 2][cuts.length + 2];
		arr[0] = 0;
		arr[arr.length - 1] = n;
		for (int i = 0; i < cuts.length; i++) {
			arr[i + 1] = cuts[i];
		}
		Arrays.sort(arr);
		for (int i = cuts.length; i >= 1; i--) {
			for (int j = i; j <= cuts.length; j++) {
				if (i > j) {
					continue;
				}
				int min = 30000000;
				for (int k = i; k <= j; k++) {
					int temp = arr[j + 1] - arr[i - 1] + dp[i][k - 1] + dp[k + 1][j];
					min = Math.min(temp,min);
				}
				dp[i][j] = min;
			}
		}
		return dp[1][cuts.length];
	}
	int solve(int i, int j, int arr, int dp) {
		if (i > j) {
			return 0;
		}
		if (dp[i][j] != -1) {
			return dp[i][j];
		}
		int min = 30000000;
		for (int k = i; k <= j; k++) {
			int temp = arr[j + 1] - arr[i - 1] + solve(i,k - 1,arr,dp) + solve(k + 1,j,arr,dp);
			min = Math.min(temp,min);
		}
		return dp[i][j] = min;
	}
}