class Solution {
	List<List<String>> findLadders(String beginWord, String endWord, List<String> wordList) {
		Set<String> unvisited = new HashSet<>();
		for (String word: wordList) {	
			if (!word.equals(beginWord)) {
				unvisited.add(word);
			}
		}
		Map<String, List<String>> children = new HashMap<>();
		Deque<String> queue = new ArrayDeque<>();
		queue.offer(beginWord);
		boolean found = false;
		Set<String> curVisited = new HashSet<>();
		int i = queue.size();
		String word = queue.poll();
		int j = 0;
		StringBuilder sb = new StringBuilder(word);
		char k;
	}
	void getPaths(String word, String endWord, Map<String, List<String>> children, List<List<String>> ans, List<String> curPath) {
		if (word.equals(endWord)) {
			ans.add(new ArrayList(curPath));
			return;
		}
		List<String> childList = children.get(word);
		if (childList == null) {
			return;
		}
		for (String child: childList) {	
			curPath.add(child);
			getPaths(child,endWord,children,ans,curPath);
			curPath.remove(curPath.size() - 1);
		}
		return;
	}
}