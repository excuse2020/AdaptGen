class Solution {
	int binsearch(int[] arr, int target) {
		int start = 0, end = arr.length - 1;
		while (start <= end) {
			int mid = start + (end - start) / 2;
			if (arr[mid] > target) {
				end = mid - 1;
			} 
			else if (arr[mid] < target) {
				start = mid + 1;
			} 
			else {
				return 0;
			}
		}
		if (start != 0 && start != arr.length) {
			return Math.min(Math.abs(arr[end] - target),Math.abs(arr[start] - target));
		} 
		else if (start == 0) {
			return Math.abs(arr[start] - target);
		} 
		else if (start == arr.length) {
			return Math.abs(arr[end] - target);
		}
		return 0;
	}
	int minAbsoluteSumDiff(int[] nums1, int[] nums2) {
		int[] diff = new int[nums1.length];
		int total = 0;
		int m = (int) 1e9 + 7;
		for (int i = 0; i < nums1.length; i++) {
			diff[i] = Math.abs(nums1[i] - nums2[i]);
			total = (total + diff[i]) % m;
		}
		int[] bestdiff = new int[diff.length];
		Arrays.sort(nums1);
		for (int i = 0; i < nums2.length; i++) {
			int a = binsearch(nums1,nums2[i]);
			bestdiff[i] = a;
		}
		int[] saved = new int[bestdiff.length];
		int max = 0;
		for (int i = 0; i < diff.length; i++) {
			saved[i] = (diff[i] - bestdiff[i]);
			if (saved[i] > max) {
				max = saved[i];
			}
		}
		return (m + total - max) % m;
	}
}