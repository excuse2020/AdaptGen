class Solution {
	int maxJump(int[] stones) {
		Queue<Integer> dq = new ArrayDeque<>();
		dq.add(0);
		dq.add(0);
		HashSet<Integer> set = new HashSet<>();
		int max = 0;
		while (dq.size() != 0) {
			int size = dq.size();
			while (size-- > 0) {
				int rem = dq.remove();
				if (rem == stones.length - 1) {
					continue;
				}
				int nextIdx = rem + 1;
				while (set.contains(nextIdx)) {
					nextIdx++;
				}
				int jump = stones[nextIdx] - stones[rem];
				max = Math.max(jump,max);
				dq.add(nextIdx);
				if (nextIdx != stones.length - 1) {
					set.add(nextIdx);
				}
			}
		}
		return max;
	}
}