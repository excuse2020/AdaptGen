class Solution {
	long fun(int n, Map<Integer, Integer> map) {
		long ans = 0L;
		for (int i = 1; i <= (int) Math.sqrt(n); i++) {
			if (n % i == 0) {
				if (n / i == i) {
					ans += new Long(map.getOrDefault(i,0));
				} 
				else {
					ans += new Long(map.getOrDefault(i,0));
					ans += new Long(map.getOrDefault(n / i,0));
				}
			}
		}
		return ans;
	}
	long numberOfPairs(int[] nums1, int[] nums2, int k) {
		long ans = 0L;
		Map<Integer, Integer> hashMap = new HashMap<>();
		for (int a: nums2) {	
			hashMap.put(a,hashMap.getOrDefault(a,0) + 1);
		}
		for (int i = 0; i < nums1.length; i++) {
			if (nums1[i] % k != 0) {
				continue;
			}
			ans += fun(nums1[i] / k,hashMap);
		}
		return ans;
	}
}