class Solution {
	int maxDistance(int[][] grid) {
		int n = grid.length;
		int[][] visited = new int[n][n];
		Queue<Pair<Integer, Integer>> q = new LinkedList<>();
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < n; j++) {
				if (grid[i][j] == 1) {
					visited[i][j] = 0;
					q.add(new Pair(i, j));
				} 
				else {
					visited[i][j] = Integer.MAX_VALUE;
				}
			}
		}
		while (!q.isEmpty()) {
			Pair<Integer, Integer> cordinate = q.poll();
			int x = cordinate.getKey();
			int y = cordinate.getValue();
			if (x + 1 < n && visited[x + 1][y] == Integer.MAX_VALUE) {
				visited[x + 1][y] = visited[x][y] + 1;
				q.add(new Pair(x + 1, y));
			}
			if (x - 1 >= 0 && visited[x - 1][y] == Integer.MAX_VALUE) {
				visited[x - 1][y] = visited[x][y] + 1;
				q.add(new Pair(x - 1, y));
			}
			if (y + 1 < n && visited[x][y + 1] == Integer.MAX_VALUE) {
				visited[x][y + 1] = visited[x][y] + 1;
				q.add(new Pair(x, y + 1));
			}
			if (y - 1 >= 0 && visited[x][y - 1] == Integer.MAX_VALUE) {
				visited[x][y - 1] = visited[x][y] + 1;
				q.add(new Pair(x, y - 1));
			}
		}
		int ans = Integer.MIN_VALUE;
		for (int[] x: visited) {	
			for (int y: x) {	
				ans = Math.max(ans,y);
			}
		}
		return (ans == 0 || ans == Integer.MAX_VALUE) ? -1 : ans;
	}
}