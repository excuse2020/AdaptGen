class Solution {
	int[] getToday(int[] prevDay) {
		int[] today = new int[8];
		for (int i = 1; i <= 6; i++) {
			today[i] = prevDay[i - 1] == prevDay[i + 1] ? 1 : 0;
		}
		return today;
	}
	int[] prisonAfterNDays(int[] cells, int N) {
		Map<Integer, int[]> seen = new HashMap();
		int day = 1;
		int yesterday = cells;
		while (day <= N) {
			int[] today = getToday(yesterday);
			if (seen.containsKey(1) && Arrays.equals(seen.get(1),today)) {
				int cycle = day - 1;
				if (cycle == 1) {
					return today;
				} 
				else {
					int reqDay = N % (cycle);
					yesterday = seen.getOrDefault(reqDay,null);
					if (yesterday != null) {
						return yesterday;
					}
				}
			}
			yesterday = today;
			seen.put(day,today);
			day++;
		}
		return yesterday;
	}
}