class Solution {
	boolean curr_max_budget(long no_of_alloys, List<List<Integer>> composition, List<Integer> stock, List<Integer> cost, int n, int k, int budget) {
		boolean flag = false;
		for (int i = 0; i < k; i++) {
			long curr_cost = 0;
			for (int j = 0; j < n; j++) {
				long net_composition = no_of_alloys * composition.get(i).get(j);
				if (stock.get(j) >= net_composition) {
					continue;
				}
				curr_cost += (net_composition - stock.get(j)) * cost.get(j);
			}
			if (curr_cost <= budget) {
				flag = true;
			}
		}
		return flag;
	}
	int maxNumberOfAlloys(int n, int k, int budget, List<List<Integer>> composition, List<Integer> stock, List<Integer> cost) {
		long low = 0;
		long high = (long) 1e9;
		while (low <= high) {
			long mid = low + (high - low) / 2;
			if (curr_max_budget(mid,composition,stock,cost,n,k,budget)) {
				low = mid + 1;
			} 
			else {
				high = mid - 1;
			}
		}
		return (int) high;
	}
}