class Solution {
	int[][] dp;
	int uniquePathsWithObstacles(int[][] obstacleGrid) {
		int m = obstacleGrid.length;
		int n = obstacleGrid[0].length;
		dp = new int[m][n];
		for (int i = 0; i < m; i++) {
			for (int j = 0; j < n; j++) {
				dp[i][j] = -1;
			}
		}
		return ways(m - 1,n - 1,obstacleGrid);
	}
	int ways(int i, int j, int[][] matrix) {
		if (i < 0 || j < 0) {
			return 0;
		}
		if (matrix[i][j] == 1) {
			return 0;
		}
		if (i == 0 && j == 0) {
			return 1;
		}
		if (dp[i][j] == -1) {
			dp[i][j] = ways(i - 1,j,matrix) + ways(i,j - 1,matrix);
		}
		return dp[i][j];
	}
}