class Solution {
	ListNode addInList(ListNode head1, ListNode head2) {
		if (head1 == null || head2 == null) {
			return head1 == null ? head2 : head1;
		}
		ListNode revert1 = revert(head1);
		ListNode revert2 = revert(head2);
		int carry = 0;
		ListNode dummy = new ListNode(-1), cur = dummy;
		while (revert1 != null || revert2 != null) {
			int val = (revert1 != null ? revert1.val : 0) + (revert2 != null ? revert2.val : 0);
			cur.next = new ListNode(val % 10);
			cur = cur.next;
			carry = val / 10;
			if (revert1 != null) {
				revert1 = revert1.next;
			}
			if (revert2 != null) {
				revert2 = revert2.next;
			}
		}
		if (carry == 1) {
			cur.next = new ListNode(1);
		}
		return revert(dummy.next);
	}
	ListNode revert(ListNode head) {
		ListNode pre = null, cur = head;
		while (cur != null) {
			ListNode next = cur.next;
			cur.next = pre;
			pre = cur;
			cur = next;
		}
		return pre;
	}
}