class Solution {
	int calculateMinRoundsOnTask(int numOfTask) {
		int res = 0;
		if (numOfTask % 3 == 0) {
			res += numOfTask / 3;
		}
		if (numOfTask % 3 == 1) {
			res += (numOfTask + 2) / 3;
		}
		if (numOfTask % 3 == 2) {
			res += (numOfTask + 1) / 3;
		}
		return res;
	}
	Map<Integer, Integer> createMapTaskToCount(int[] tasks) {
		Map<Integer, Integer> map = new HashMap<>();
		for (int i = 0; i < tasks.length; i++) {
			int task = tasks[i];
			if (!map.containsKey(task)) {
				map.put(tasks[i],0);
			}
			map.put(task,map.get(task) + 1);
		}
		return map;
	}
	boolean isValidNumOfTask(int numOfTask) {
		return numOfTask != 1;
	}
	int minimumRounds(int[] tasks) {
		int res = 0;
		Map<Integer, Integer> map = createMapTaskToCount(tasks);
		for (int v: map.values()) {	
			if (!isValidNumOfTask(v)) {
				return -1;
			}
			res += calculateMinRoundsOnTask(v);
		}
		return res;
	}
}