class Solution {
	long maximumSubarraySum(int[] nums, int k) {
		int left = 0;
		Map<Integer, Integer> countMap = new HashMap<>();
		long sum = 0;
		long maxSum = 0;
		for (int right = 0; right < nums.length; ++right) {
			countMap.put(nums[right],countMap.getOrDefault(nums[right],0) + 1);
			sum += nums[right];
			while (left < right && (right - left + 1 > k || countMap.get(nums[right]) > 1)) {
				sum -= nums[left];
				int newCount = countMap.get(nums[left]) - 1;
				if (newCount == 0) {
					countMap.remove(nums[left]);
				} 
				else {
					countMap.put(nums[left],newCount);
				}
				++left;
			}
			if (right - left + 1 == k) {
				maxSum = Math.max(maxSum,sum);
			}
		}
		return maxSum;
	}
}