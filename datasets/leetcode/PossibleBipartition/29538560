class Solution {
	boolean dfs(ArrayList<Integer>[] adj, int[] colorList, int currIdx, int color) {
		if (colorList[currIdx] != 0 && colorList[currIdx] != color) {
			return false;
		}
		if (colorList[currIdx] != 0 && colorList[currIdx] == color) {
			return true;
		}
		ArrayList<Integer> neighbours = adj[currIdx];
		colorList[currIdx] = color;
		for (int i: neighbours) {	
			if (!dfs(adj,colorList,i,-1 * color)) {
				return false;
			}
		}
		return true;
	}
	boolean possibleBipartition(int n, int[][] dislikes) {
		ArrayList<Integer>[] adjList = new ArrayList[n + 1];
		for (int i = 0; i <= n; i++) {
			adjList[i] = new ArrayList<>();
		}
		for (int[] i: dislikes) {	
			int v1 = i[0];
			int v2 = i[1];
			adjList[v1].add(v2);
			adjList[v2].add(v1);
		}
		int[] color = new int[n + 1];
		for (int i = 1; i <= n; i++) {
			if (color[i] == 0 && !dfs(adjList,color,i,1)) {
				return false;
			}
		}
		return true;
	}
}