class Solution {
	int ans;
	int dfs(int src, int par, ArrayList<Integer>[] graph, int[] arr, int k) {
		int sum = 0;
		for (int nbr: graph[src]) {	
			if (nbr == par) {
				continue;
			}
			int rv = dfs(nbr,src,graph,arr,k);
			sum += rv;
		}
		sum += arr[src];
		if (sum % k == 0) {
			ans++;
			return 0;
		}
		return sum;
	}
	int maxKDivisibleComponents(int n, int[][] edges, int[] values, int k) {
		ArrayList<Integer>[] graph = new ArrayList[n];
		for (int i = 0; i < n; i++) {
			graph[i] = new ArrayList<>();
		}
		for (int[] edge: edges) {	
			int a = edge[0];
			int b = edge[1];
			graph[a].add(b);
			graph[b].add(a);
		}
		ans = 0;
		dfs(0,-1,graph,values,k);
		return ans;
	}
}