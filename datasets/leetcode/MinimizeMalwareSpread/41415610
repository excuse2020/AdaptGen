class Solution {
	int find(int p, int[] parent) {
		if (parent[p] == p) {
			return p;
		}
		parent[p] = find(parent[p],parent);
		return parent[p];
	}
	int minMalwareSpread(int[][] graph, int[] initial) {
		int n = graph.length;
		int[] parent = new int[n];
		int[] size = new int[n];
		for (int i = 0; i < n; i++) {
			parent[i] = i;
		}
		for (int i = 0; i < n; i++) {
			size[i] = 1;
		}
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < n; j++) {
				if (i == j) {
					continue;
				} 
				else if (graph[i][j] == 0) {
					continue;
				} 
				else if (graph[i][j] == 1 && (find(i,parent) == find(j,parent))) {
					continue;
				} 
				else if (graph[i][j] == 1 && (find(i,parent) != find(j,parent))) {
					union(i,j,size,parent);
				}
			}
		}
		int[] infection = new int[n];
		for (int i = 0; i < initial.length; i++) {
			int infected = initial[i];
			int p = find(infected,parent);
			infection[p]++;
		}
		int maxSize = -1;
		int ans = n + 1;
		for (int i = 0; i < initial.length; i++) {
			int infected = initial[i];
			int p = find(infected,parent);
			if (infection[p] == 1 && size[p] >= maxSize) {
				if (maxSize == size[p]) {
					ans = Math.min(ans,infected);
				} 
				else {
					maxSize = size[p];
					ans = infected;
				}
			}
		}
		if (maxSize == -1) {
			ans = n + 1;
			for (int i = 0; i < initial.length; i++) {
				ans = Math.min(ans,initial[i]);
			}
		}
		return ans;
	}
	void union(int x, int y, int[] size, int[] parent) {
		int px = find(x,parent);
		int py = find(y,parent);
		if (size[px] >= py) {
			parent[py] = px;
			size[px] += size[py];
		} 
		else {
			parent[px] = py;
			size[py] += size[px];
		}
	}
}