class Solution {
	int ans = 0;
	int ch(HashMap<Integer, List<Integer>> h, int[] v, int[] val, int k, int i) {
		v[i] = 1;
		int a = 0;
		if (h.get(i) != null) {
			for (int j: h.get(i)) {	
				if (v[j] == 0) {
					a += ch(h,v,val,k,j);
				}
			}
		}
		a += val[i];
		if (a % k == 0) {
			ans++;
			return 0;
		}
		return a;
	}
	int maxKDivisibleComponents(int n, int[][] edges, int[] values, int k) {
		HashMap<Integer, List<Integer>> h = new HashMap<>();
		for (int[] a: edges) {	
			if (h.get(a[0]) == null) {
				h.put(a[0],new ArrayList<>());
			}
			h.get(a[0]).add(a[1]);
			if (h.get(a[1]) == null) {
				h.put(a[1],new ArrayList<>());
			}
			h.get(a[1]).add(a[0]);
		}
		int[] v = new int[n];
		ch(h,v,values,k,0);
		return ans;
	}
}