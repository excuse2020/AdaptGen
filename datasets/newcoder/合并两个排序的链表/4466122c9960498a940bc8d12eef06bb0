class Solution {
	ListNode Merge(ListNode pHead1, ListNode pHead2) {
		ListNode myNewList = null;
		if (pHead1 == null) {
			return pHead2;
		}
		if (pHead2 == null) {
			return pHead1;
		}
		while (pHead1 != null || pHead2 != null) {
			if (pHead1 == null && pHead2 != null) {
				myNewList = insert(myNewList,pHead2);
				pHead2 = null;
				break;
			} 
			else if (pHead1 != null && pHead2 == null) {
				myNewList = insert(myNewList,pHead1);
				pHead1 = null;
				break;
			} 
			else if (pHead1.val <= pHead2.val) {
				ListNode temp = pHead1.next;
				pHead1.next = null;
				myNewList = insert(myNewList,pHead1);
				pHead1 = temp;
			} 
			else {
				ListNode cur = pHead2.next;
				pHead2.next = null;
				myNewList = insert(myNewList,pHead2);
				pHead2 = cur;
			}
		}
		return myNewList;
	}
	ListNode insert(ListNode myNewList, ListNode node) {
		if (myNewList == null) {
			myNewList = node;
			return myNewList;
		}
		ListNode cur = myNewList;
		while (cur.next != null) {
			cur = cur.next;
		}
		cur.next = node;
		return myNewList;
	}
}