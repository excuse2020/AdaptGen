class Solution {
	Set dfs(int i, Set<Integer> detonatedRactions, Set<Integer> visited) {
		Set allSonsRec = new HashSet();
		allSonsRec.add(i);
		for (int son: detonatedRactions[i]) {	
			if (visited.add(son)) {
				allSonsRec.addAll(dfs(son,detonatedRactions,visited));
			}
		}
		return allSonsRec;
	}
	int maximumDetonation(int[][] bombs) {
		Set detonatedRactions = new Set[bombs.length];
		for (int i = 0; i < bombs.length; i++) {
			detonatedRactions[i] = new HashSet();
			for (int j = 0; j < bombs.length; j++) {
				if (i == j) {
					continue;
				}
				int[] bombing = bombs[i], effected = bombs[j];
				long dist = ((long) (bombing[0] - effected[0])) * (bombing[0] - effected[0]) + ((long) (bombing[1] - effected[1])) * (bombing[1] - effected[1]);
				if (dist <= ((long) bombing[2]) * bombing[2]) {
					detonatedRactions[i].add(j);
				}
			}
		}
		int max = 0;
		for (int i = 0; i < bombs.length; i++) {
			Set visited = new HashSet();
			visited.add(i);
			max = Math.max(max,dfs(i,detonatedRactions,visited).size());
		}
		return max;
	}
}