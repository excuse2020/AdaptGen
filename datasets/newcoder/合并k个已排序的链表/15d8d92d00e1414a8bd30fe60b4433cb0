class Solution {
	ListNode mergeKLists(ArrayList<ListNode> lists) {
		if (lists == null || lists.size() == 0) {
			return null;
		}
		return mergeLists(lists,0,lists.size() - 1);
	}
	ListNode mergeLists(ArrayList<ListNode> lists, int left, int right) {
		if (left == right) {
			return lists.get(left);
		}
		int mid = left + (right - left) / 2;
		ListNode l1 = mergeLists(lists,left,mid);
		ListNode l2 = mergeLists(lists,mid + 1,right);
		return mergeTwoLists(l1,l2);
	}
	ListNode mergeTwoLists(ListNode l1, ListNode l2) {
		ListNode dummy = new ListNode(0);
		ListNode current = dummy;
		while (l1 != null && l2 != null) {
			if (l1.val < l2.val) {
				current.next = l1;
				l1 = l1.next;
			} 
			else {
				current.next = l2;
				l2 = l2.next;
			}
			current = current.next;
		}
		current.next = (l1 != null) ? l1 : l2;
		return dummy.next;
	}
}