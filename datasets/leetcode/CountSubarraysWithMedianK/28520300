class Solution {
	int countSubarrays(int[] nums, int k) {
		int idxK = -1;
		for (int i = 0; i < nums.length; i++) {
			if (nums[i] < k) {
				nums[i] = -1;
			} 
			else if (nums[i] > k) {
				nums[i] = 1;
			} 
			else {
				idxK = i;
				nums[i] = 0;
			}
		}
		int[] prefixSum = new int[nums.length + 1];
		for (int i = 1; i < prefixSum.length; i++) {
			prefixSum[i] = prefixSum[i - 1] + nums[i - 1];
		}
		int left = helper(0,idxK,prefixSum);
		int right = helper(idxK + 1,nums.length,prefixSum);
		int total = helper(0,nums.length,prefixSum);
		return total - left;
	}
	int helper(int l, int r, int[] prefixSum) {
		Map<Integer, Integer> counter = new HashMap<>();
		int ans = 0;
		for (int i = l; i <= r; i++) {
			int currSum = prefixSum[i];
			if (counter.containsKey(currSum)) {
				ans += counter.get(currSum);
			}
			if (counter.containsKey(currSum - 1)) {
				ans += counter.get(currSum - 1);
			}
			counter.put(currSum,counter.getOrDefault(currSum,0) + 1);
		}
		return ans;
	}
}