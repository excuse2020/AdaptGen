class Solution {
	int maxScore(List<List<Integer>> grid) {
		int m = grid.size();
		int n = grid.get(0).size();
		int[][] cache = new int[m][n];
		int max = Integer.MIN_VALUE;
		for (int i = 0; i < m; i++) {
			for (int j = 0; j < n; j++) {
				if (i == 0 && j == 0) {
					cache[i][j] = Integer.MIN_VALUE;
				} 
				else if (j == 0) {
					int diff = grid.get(i).get(j) - grid.get(i - 1).get(j);
					if (cache[i - 1][j] >= 0) {
						diff += cache[i - 1][j];
					}
					cache[i][j] = diff;
				} 
				else if (i == 0) {
					int diff = grid.get(i).get(j) - grid.get(i).get(j - 1);
					if (cache[i][j - 1] > 0) {
						diff += cache[i][j - 1];
					}
					cache[i][j] = diff;
				} 
				else {
					int diff1 = grid.get(i).get(j) - grid.get(i - 1).get(j);
					if (cache[i - 1][j] > 0) {
						diff1 += cache[i - 1][j];
					}
					int diff2 = grid.get(i).get(j) - grid.get(i).get(j - 1);
					if (cache[i][j - 1] > 0) {
						diff2 += cache[i][j - 1];
					}
					cache[i][j] = Math.max(diff1,diff2);
				}
				max = Math.max(max,cache[i][j]);
			}
		}
		return max;
	}
}