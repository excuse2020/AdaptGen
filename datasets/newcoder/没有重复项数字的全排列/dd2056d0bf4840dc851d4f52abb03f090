class Solution {
	ArrayList<ArrayList<Integer>> permute(int[] num) {
		Arrays.sort(num);
		ArrayList<ArrayList<Integer>> res = new ArrayList<ArrayList<Integer>>();
		ArrayList<Integer> nums = new ArrayList<Integer>();
		for (int i = 0; i < num.length; i++) {
			nums.add(num[i]);
		}
		recursion(res,nums,0);
		return res;
	}
	void recursion(ArrayList<ArrayList<Integer>> res, ArrayList<Integer> num, int index) {
		if (index == num.size() - 1) {
			res.add(num);
		} 
		else {
			for (int i = index; i < num.size(); i++) {
				swap(num,i,index);
				recursion(res,num,index + 1);
				swap(num,i,index);
			}
		}
	}
	void swap(ArrayList<Integer> num, int i1, int i2) {
		int temp = num.get(i1);
		num.set(i1,num.get(i2));
		num.set(i2,temp);
	}
}