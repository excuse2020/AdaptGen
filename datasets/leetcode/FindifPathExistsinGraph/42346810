class Solution {
	boolean pathExist(ArrayList<Integer>[] graph, int src, int dest, boolean[] visited) {
		if (src == dest) {
			return true;
		}
		visited[src] = true;
		for (int node: graph[src]) {	
			if (!visited[node] && pathExist(graph,node,dest,visited)) {
				return true;
			}
		}
		return false;
	}
	boolean validPath(int n, int[][] edges, int source, int destination) {
		ArrayList<Integer>[] graph = new ArrayList[n];
		for (int i = 0; i < n; i++) {
			graph[i] = new ArrayList<Integer>();
		}
		for (int i = 0; i < edges.length; i++) {
			graph[edges[i][0]].add(edges[i][1]);
			graph[edges[i][1]].add(edges[i][0]);
		}
		return pathExist(graph,source,destination,new boolean[n]);
	}
}