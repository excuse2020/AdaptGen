class Solution {
	int[] countSubTrees(int n, int[][] edges, String labels) {
		List<List<Integer>> tree = makeTree(n,edges);
		int[] answer = new int[n];
		int[] counts = new int[26];
		countSubtreeLabels(tree,answer,counts,labels,-1,0);
		return answer;
	}
	void countSubtreeLabels(List<List<Integer>> tree, int[] answer, int[] counts, String labels, int parent, int node) {
		int characterIndex;
	}
	List<List<Integer>> makeTree(int n, int[][] edges) {
		List<List<Integer>> adjList = new ArrayList<>();
		for (int i = 0; i < n; i++) {
			adjList.add(new ArrayList<>());
		}
		for (int[] edge: edges) {	
			adjList.get(edge[0]).add(edge[1]);
			adjList.get(edge[1]).add(edge[0]);
		}
		return adjList;
	}
}