class Solution {
	int maxProfit(int[] prices) {
		int n = prices.length;
		int[][] dp = new int[n][2];
		for (int[] row: dp) {	
			Arrays.fill(row,-1);
		}
		return recursion(prices,0,1,dp);
	}
	int recursion(int[] prices, int ind, int buy, int[][] dp) {
		int n = prices.length;
		int profit = 0;
		if (ind == n) {
			return 0;
		}
		if (dp[ind][buy] != -1) {
			return dp[ind][buy];
		}
		if (buy == 1) {
			profit = Math.max((-prices[ind] + recursion(prices,ind + 1,0,dp)),(0 + recursion(prices,ind + 1,1,dp)));
		} 
		else {
			profit = Math.max((prices[ind] + recursion(prices,ind + 1,1,dp)),(0 + recursion(prices,ind + 1,0,dp)));
		}
		return dp[ind][buy] = profit;
	}
}