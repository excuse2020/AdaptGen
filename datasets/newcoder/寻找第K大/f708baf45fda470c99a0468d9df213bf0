class Solution {
	int result = -1;
	int findKth(int[] a, int n, int K) {
		result = -1;
		quiksort(a,0,n - 1,n - K);
		return result;
	}
	int partition(int[] a, int left, int right) {
		int pivot = left;
		int index = pivot + 1;
		for (int i = index; i <= right; i++) {
			if (a[i] < a[pivot]) {
				swap(a,i,index);
				index++;
			}
		}
		swap(a,index - 1,pivot);
		return index - 1;
	}
	void quiksort(int a, int left, int right, int k) {
		if (result >= 0) {
			return;
		}
		if (left == right) {
			if (left == k) {
				result = a[k];
			}
			return;
		}
		if (left < right) {
			int partitionIndex = partition(a,left,right);
			if (partitionIndex == k) {
				result = a[partitionIndex];
				return;
			}
			if (partitionIndex > k) {
				quiksort(a,left,partitionIndex - 1,k);
			} 
			else {
				quiksort(a,partitionIndex + 1,right,k);
			}
		}
	}
	void swap(int a, int i, int j) {
		int t = a[i];
		a[i] = a[j];
		a[j] = t;
	}
}