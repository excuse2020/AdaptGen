class Solution {
	String DFS(String res, int n, int k, Set<String> visited, int total) {
		int len = res.length();
		visited.add(res.substring(len - n,len));
		for (int i = 0; i < k; i++) {
			if (!visited.contains(res.substring(len - n + 1,len) + i)) {
				String tmp = DFS(res + i,n,k,visited,total);
				if (tmp.length() == total) {
					res = tmp;
					break;
				}
				visited.remove(res.substring(len - n + 1,len) + i);
			}
		}
		return res;
	}
	String crackSafe(int n, int k) {
		Set<String> visited = new HashSet<String>();
		String res = "";
		for (int j = 0; j < n; j++) {
			res += 0;
		}
		int total = 1;
		for (int i = 0; i < n; i++) {
			total *= k;
		}
		total += n - 1;
		res = DFS(res,n,k,visited,total);
		return res;
	}
}