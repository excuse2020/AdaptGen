class Solution {
	void helper(String s, Set<String> valid, Set<String> invalid, int[] longestLength) {
		if (s.length() < longestLength[0] || s.length() == 0) {
			return;
		}
		if (invalid.contains(s) || valid.contains(s)) {
			return;
		}
		if (this.isValidParentheses(s)) {
			valid.add(s);
			longestLength[0] = Math.max(s.length(),longestLength[0]);
			return;
		}
		invalid.add(s);
		if (s.length() == longestLength[0]) {
			return;
		}
		int i = 0;
	}
	boolean isValidParentheses(String s) {
		int openningBracketCount = 0;
		int i = 0;
	}
	List<String> removeInvalidParentheses(String s) {
		List<String> result = new ArrayList<>();
		Set<String> valid = new HashSet<>();
		Set<String> invalid = new HashSet<>();
		int[] longestLength = new int[1];
		this.helper(s,valid,invalid,longestLength);
		for (String cand: valid) {	
			if (cand.length() == longestLength[0]) {
				result.add(cand);
			}
		}
		if (result.size() == 0) {
			result.add("");
		}
		return result;
	}
}