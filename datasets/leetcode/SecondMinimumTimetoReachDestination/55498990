class Solution {
	int secondMinimum(int n, int[][] edges, int time, int change) {
		List<List<Integer>> graph = new ArrayList<>(n + 1);
		for (int i = 0; i <= n; ++i) {
			graph.add(new ArrayList<>());
		}
		for (int[] edge: edges) {	
			graph.get(edge[0]).add(edge[1]);
			graph.get(edge[1]).add(edge[0]);
		}
		Queue<int[]> queue = new LinkedList<>();
		int[] dist1 = new int[n + 1];
		int[] dist2 = new int[n + 1];
		Arrays.fill(dist1,Integer.MAX_VALUE);
		Arrays.fill(dist2,Integer.MAX_VALUE);
		queue.add(new int{1, 0});
		dist1[1] = 0;
		while (!queue.isEmpty()) {
			int[] curr = queue.poll();
			int currNode = curr[0];
			int currFreq = curr[1];
			int currDist = currFreq == 0 ? dist1[currNode] : dist2[currNode];
			int cycle = currDist / change;
			boolean shouldWait = (currDist / change) % 2 == 1;
			int nextDist = (shouldWait ? change * (cycle + 1) : currDist) + time;
			for (int next: graph.get(currNode)) {	
				if (nextDist < dist1[next]) {
					dist1[next] = nextDist;
					queue.add(new int{next, 0});
				} 
				else if (nextDist > dist1[next] && nextDist < dist2[next]) {
					if (next == n) {
						return nextDist;
					}
					dist2[next] = nextDist;
					queue.add(new int{next, 1});
				}
			}
		}
		return -1;
	}
}