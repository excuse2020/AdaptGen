class Solution {
	List<Integer> largestDivisibleSubset(int[] nums) {
		Arrays.sort(nums);
		int[] dp = new int[nums.length];
		int[] prev = new int[nums.length];
		int max = Integer.MIN_VALUE, val = -1, max_value = 0;
		Arrays.fill(prev,-1);
		Arrays.fill(dp,1);
		for (int i = 0; i < nums.length; i++) {
			for (int j = 0; j < i; j++) {
				if (nums[i] % nums[j] == 0 && dp[j] >= dp[i]) {
					max_value++;
					dp[i] = dp[j] + 1;
					if (max < dp[i]) {
						max = dp[i];
						val = i;
					}
					prev[i] = j;
				}
			}
		}
		List<Integer> li = new ArrayList<>();
		if (max_value == 0 && nums.length != 0) {
			li.add(nums[0]);
			return li;
		}
		while (val != -1) {
			li.add(nums[val]);
			val = prev[val];
		}
		Collections.sort(li);
		return li;
	}
}