class Solution {
	int rob(int[] nums) {
		if (nums.length <= 3) {
			Arrays.sort(nums);
			return nums[nums.length - 1];
		}
		int[] dp1 = new int[nums.length - 1];
		int[] dp2 = new int[nums.length - 1];
		for (int i = 0; i < nums.length - 1; i++) {
			dp1[i] = nums[i];
		}
		for (int i = 1; i < nums.length; i++) {
			dp2[i - 1] = nums[i];
		}
		return Math.max(robHelper(dp1),robHelper(dp2));
	}
	int robHelper(int[] dp) {
		int n = dp.length;
		int last = n - 1;
		if (n <= 2) {
			Arrays.sort(dp);
			return dp[last];
		}
		dp[last - 2] += dp[last];
		for (int i = last - 3; i >= 0; i--) {
			dp[i] += Math.max(dp[i + 2],dp[i + 3]);
		}
		return Math.max(dp[0],dp[1]);
	}
}