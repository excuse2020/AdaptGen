class Solution {
	int binarySearch(MountainArray arr, int target, int start, int end) {
		boolean isAscending = arr.get(start) < arr.get(end);
		while (start <= end) {
			int mid = start + (end - start) / 2;
			if (arr.get(mid) == target) {
				return mid;
			}
			if (isAscending) {
				if (arr.get(mid) > target) {
					end = mid - 1;
				} 
				else {
					start = mid + 1;
				}
			} 
			else {
				if (arr.get(mid) < target) {
					end = mid - 1;
				} 
				else {
					start = mid + 1;
				}
			}
		}
		return -1;
	}
	int findInMountainArray(int target, MountainArray arr) {
		int length = arr.length();
		if (length == 1) {
			return 0;
		}
		int MaxElement = peakIndexInMountainArray(arr);
		int firstHalf = binarySearch(arr,target,0,MaxElement);
		if (firstHalf >= 0) {
			return firstHalf;
		} 
		else {
			int secondHalf = binarySearch(arr,target,MaxElement + 1,length - 1);
			return secondHalf;
		}
	}
	int peakIndexInMountainArray(MountainArray arr) {
		int start = 0, end = arr.length() - 1;
		while (start <= end) {
			int mid = start + (end - start) / 2;
			if (mid >= arr.length() - 1) {
				return mid;
			} 
			else if (arr.get(mid) < arr.get(mid + 1)) {
				start = mid + 1;
			} 
			else {
				end = mid - 1;
			}
		}
		return start;
	}
}