class Solution {
	String crackSafe(int n, int k) {
		int numCombinations = (int) Math.pow(k,n);
		boolean[] visited = new boolean[numCombinations];
		StringBuilder sequence = new StringBuilder();
		for (int i = 0; i < n; i++) {
			sequence.append("0");
		}
		visited[0] = true;
		visit(n,k,0,visited,sequence);
		return sequence.toString();
	}
	boolean visit(int n, int k, int combination, boolean[] visited, StringBuilder sequence) {
		int numCombinations = visited.length;
		if (sequence.length() == numCombinations + n - 1) {
			return true;
		}
		int combinationBase = combination * k % numCombinations;
		int i = 0;
		int newCombination = combinationBase + i;
	}
}