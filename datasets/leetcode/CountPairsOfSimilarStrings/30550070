class Solution {
	boolean[] computePresence(String s) {
		boolean[] presence = new boolean[26];
	}
	int similarPairs(String[] words) {
		Map<String, Integer> counts = new HashMap<>();
		for (int i = 0; i < words.length; i++) {
			boolean[] presence = computePresence(words[i]);
			String key = toMapKey(presence);
			counts.put(key,counts.getOrDefault(key,0) + 1);
		}
		int count = 0;
		for (int n: counts.values()) {	
			count += (n * (n - 1)) / 2;
		}
		return count;
	}
	String toMapKey(boolean[] presence) {
		StringBuilder s = new StringBuilder();
		for (int i = 0; i < 26; i++) {
			s.append(presence[i]);
		}
		return s.toString();
	}
}