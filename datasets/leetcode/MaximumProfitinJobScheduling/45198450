class Solution {
	Integer[] memo;
	int[][] sort;
	int bs(int num, int cur) {
		int s = cur + 1;
		int l = sort.length - 1;
		int mid = 0;
		while (s <= l) {
			mid = (s + l) / 2;
			if (sort[mid][0] < num) {
				s = mid + 1;
			} 
			else {
				l = mid - 1;
			}
		}
		return s;
	}
	int jobScheduling(int[] startTime, int[] endTime, int[] profit) {
		int n = startTime.length;
		sort = new int[n][2];
		for (int i = 0; i < n; i++) {
			sort[i][0] = startTime[i];
			sort[i][1] = i;
		}
		Arrays.sort(sort,(a, b) -> {a[0] - b[0]});
		memo = new Integer[n + 1];
		return solve(0,n,startTime,endTime,profit);
	}
	int solve(int i, int n, int[] s, int[] e, int[] p) {
		if (i >= n) {
			return 0;
		}
		if (memo[i] != null) {
			return memo[i];
		}
		int next = bs(e[sort[i][1]],i);
		int op1 = solve(next,n,s,e,p) + p[sort[i][1]];
		int op2 = solve(i + 1,n,s,e,p);
		return memo[i] = Math.max(op1,op2);
	}
}