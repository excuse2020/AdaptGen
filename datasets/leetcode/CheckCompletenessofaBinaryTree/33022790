class Solution {
	boolean areAllLeaves(Queue<TreeNode> queue) {
		while (!queue.isEmpty()) {
			TreeNode node = queue.poll();
			if (node.left != null || node.right != null) {
				return false;
			}
		}
		return true;
	}
	boolean isCompleteTree(TreeNode root) {
		Queue<TreeNode> queue = new LinkedList<>();
		queue.offer(root);
		while (!queue.isEmpty()) {
			int size = queue.size();
			while (size != 0) {
				TreeNode currNode = queue.poll();
				if (currNode.left != null) {
					queue.offer(currNode.left);
				} 
				else {
					return currNode.right == null && areAllLeaves(queue);
				}
				if (currNode.right != null) {
					queue.offer(currNode.right);
				} 
				else {
					return areAllLeaves(queue);
				}
				size--;
			}
		}
		return true;
	}
}