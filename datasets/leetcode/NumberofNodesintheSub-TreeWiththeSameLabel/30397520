class Solution {
	int[] ans;
	int[] travers;
	boolean[] visited;
	int[] countSubTrees(int n, int[][] edges, String labels) {
		int l = edges.length;
		ans = new int[n];
		if (l == 0) {
			return ans;
		}
		List<List<Integer>> graph = new ArrayList<>();
		for (int i = 0; i < n; i++) {
			graph.add(new ArrayList<>());
		}
		for (int i = 0; i < l; i++) {
			graph.get(edges[i][0]).add(edges[i][1]);
			graph.get(edges[i][1]).add(edges[i][0]);
		}
		visited = new boolean[n];
		travers = new int[26];
		solve(graph,0,labels);
		return ans;
	}
	void solve(List<List<Integer>> graph, int root, String labels) {
		visited[root] = true;
		int c;
	}
}