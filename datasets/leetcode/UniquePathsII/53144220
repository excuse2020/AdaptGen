class Solution {
	int uniquePaths(int m, int n, int[][] dp, int[][] obstacleGrid) {
		if (m == 0 && n == 0 && obstacleGrid[m][n] == 0) {
			return 1;
		}
		if (m < 0 || n < 0 || obstacleGrid[m][n] == 1) {
			return 0;
		}
		if (dp[m][n] != -1) {
			return dp[m][n];
		}
		return dp[m][n] = uniquePaths(m,n - 1,dp,obstacleGrid) + uniquePaths(m - 1,n,dp,obstacleGrid);
	}
	int uniquePathsWithObstacles(int obstacleGrid) {
		int m = obstacleGrid.length;
		int n = obstacleGrid[0].length;
		int[][] dp = new int[m][n];
		for (int[] rows: dp) {	
			Arrays.fill(rows,-1);
		}
		return uniquePaths(m - 1,n - 1,dp,obstacleGrid);
	}
}