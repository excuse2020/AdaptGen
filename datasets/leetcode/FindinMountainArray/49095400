class Solution {
	int binarySearchleft(MountainArray mountainArr, int low, int high, int target) {
		while (low <= high) {
			int mid = low + (high - low) / 2;
			int midValue = mountainArr.get(mid);
			if (midValue == target) {
				return mid;
			} 
			else if (midValue > target) {
				high = mid - 1;
			} 
			else {
				low = mid + 1;
			}
		}
		return -1;
	}
	int binarySearchright(MountainArray mountainArr, int low, int high, int target) {
		while (low <= high) {
			int mid = low + (high - low) / 2;
			int midValue = mountainArr.get(mid);
			if (midValue == target) {
				return mid;
			} 
			else if (midValue > target) {
				low = mid + 1;
			} 
			else {
				high = mid - 1;
			}
		}
		return -1;
	}
	int findInMountainArray(int target, MountainArray mountainArr) {
		int n = mountainArr.length();
		int peak = findPeakElement(mountainArr,n);
		int left = binarySearchleft(mountainArr,0,peak,target);
		if (left != -1) {
			return left;
		}
		int right = binarySearchright(mountainArr,peak + 1,n - 1,target);
		return right;
	}
	int findPeakElement(MountainArray mountainArr, int n) {
		int low = 0;
		int high = n - 1;
		if (n == 1) {
			return 0;
		}
		while (low <= high) {
			int mid = low + (high - low) / 2;
			int midValue = mountainArr.get(mid);
			if (mid > 0 && mid < n - 1) {
				if (midValue > mountainArr.get(mid - 1) && midValue > mountainArr.get(mid + 1)) {
					return mid;
				} 
				else if (midValue < mountainArr.get(mid - 1)) {
					high = mid - 1;
				} 
				else {
					low = mid + 1;
				}
			} 
			else if (mid == 0) {
				return mountainArr.get(0) > mountainArr.get(1) ? 0 : 1;
			} 
			else if (mid == n - 1) {
				return mountainArr.get(n - 1) > mountainArr.get(n - 2) ? n - 1 : n - 2;
			}
		}
		return -1;
	}
}