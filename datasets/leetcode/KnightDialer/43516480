class Solution {
	int knightDialer(int n) {
		HashMap<Integer, List<Integer>> map = new HashMap<>();
		map.put(0,List.of(4,6));
		map.put(1,List.of(6,8));
		map.put(2,List.of(7,9));
		map.put(3,List.of(4,8));
		map.put(4,List.of(0,9,3));
		map.put(5,new ArrayList<Integer>());
		map.put(6,List.of(7,0,1));
		map.put(7,List.of(2,6));
		map.put(8,List.of(1,3));
		map.put(9,List.of(2,4));
		int[] current = new int[10];
		Arrays.fill(current,1);
		for (int i = 2; i <= n; i++) {
			int[] next = new int[10];
			for (int j = 0; j < 10; j++) {
				for (int k = 0; k < map.get(j).size(); k++) {
					next[map.get(j).get(k)] += current[j];
					next[map.get(j).get(k)] = next[map.get(j).get(k)] % 1_000_000_007;
				}
			}
			current = next;
		}
		int result = 0;
		for (int i: current) {	
			result += i;
			result = result % 1_000_000_007;
		}
		return result;
	}
}