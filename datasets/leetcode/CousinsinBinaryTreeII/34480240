class Solution {
	TreeNode replaceValueInTree(TreeNode root) {
		List<Integer> sumLevels = new ArrayList<>();
		traverseTree(root,1,sumLevels);
		replaceValues(root,1,sumLevels);
		root.val = 0;
		return root;
	}
	void replaceValues(TreeNode node, int level, List<Integer> sumLevels) {
		if (node == null || node.left == node.right) {
			return;
		}
		int nextLevelSum = sumLevels.get(level);
		int childrenSum = node.left == null ? 0 : node.left.val;
		childrenSum += node.right == null ? 0 : node.right.val;
		if (node.left != null) {
			node.left.val = nextLevelSum - childrenSum;
		}
		if (node.right != null) {
			node.right.val = nextLevelSum - childrenSum;
		}
		replaceValues(node.left,level + 1,sumLevels);
		replaceValues(node.right,level + 1,sumLevels);
	}
	void traverseTree(TreeNode node, int level, List<Integer> sumLevels) {
		if (node == null) {
			return;
		}
		if (level > sumLevels.size()) {
			sumLevels.add(0);
		}
		sumLevels.set(level - 1,sumLevels.get(level - 1) + node.val);
		traverseTree(node.left,level + 1,sumLevels);
		traverseTree(node.right,level + 1,sumLevels);
	}
}