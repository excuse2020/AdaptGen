class Solution {
	TreeNode balanceBST(TreeNode root) {
		List<Integer> sortedValues = new ArrayList<>();
		inOrderTraversal(root,sortedValues);
		return constructBalancedBST(sortedValues,0,sortedValues.size() - 1);
	}
	TreeNode constructBalancedBST(List<Integer> sortedValues, int start, int end) {
		if (start > end) {
			return null;
		}
		int mid = start + (end - start) / 2;
		TreeNode node = new TreeNode(sortedValues.get(mid));
		node.left = constructBalancedBST(sortedValues,start,mid - 1);
		node.right = constructBalancedBST(sortedValues,mid + 1,end);
		return node;
	}
	void inOrderTraversal(TreeNode node, List<Integer> sortedValues) {
		if (node == null) {
			return;
		}
		inOrderTraversal(node.left,sortedValues);
		sortedValues.add(node.val);
		inOrderTraversal(node.right,sortedValues);
	}
}