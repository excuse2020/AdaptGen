class Solution {
	int[] avoidFlood(int[] rains) {
		int n = rains.length;
		int[] ans = new int[rains.length];
		HashMap<Integer, Integer> map = new HashMap<>();
		TreeSet<Integer> set = new TreeSet<>();
		for (int i = 0; i < n; i++) {
			if (rains[i] == 0) {
				set.add(i);
			} 
			else {
				if (map.containsKey(rains[i])) {
					int idx = map.get(rains[i]);
					if (set.size() > 0) {
						if (set.ceiling(idx) == null) {
							return new int[0];
						} 
						else if (set.ceiling(idx) != null) {
							int ceil = set.ceiling(idx);
							ans[ceil] = rains[i];
							ans[i] = -1;
							map.remove(rains[i]);
							map.put(rains[i],i);
							set.remove(ceil);
						}
					} 
					else {
						return new int[0];
					}
				} 
				else {
					ans[i] = -1;
					map.put(rains[i],i);
				}
			}
		}
		if (set.size() > 0) {
			for (int i: set) {	
				ans[i] = 1;
			}
		}
		return ans;
	}
}