class Solution {
	void bfsMarkNeighborAsZero(char[][] grid, Queue<Integer> xPosition, Queue<Integer> yPosition) {
		while (!xPosition.isEmpty()) {
			int row = xPosition.poll();
			int column = yPosition.poll();
			if (isOutOfBoundary(grid,row,column) || grid[row][column] == '0') {
				continue;
			}
			grid[row][column] = '0';
			if (!isOutOfBoundary(grid,row + 1,column) && grid[row + 1][column] != '0') {
				xPosition.add(row + 1);
				yPosition.add(column);
			}
			if (!isOutOfBoundary(grid,row - 1,column) && grid[row - 1][column] != '0') {
				xPosition.add(row - 1);
				yPosition.add(column);
			}
			if (!isOutOfBoundary(grid,row,column - 1) && grid[row][column - 1] != '0') {
				xPosition.add(row);
				yPosition.add(column - 1);
			}
			if (!isOutOfBoundary(grid,row,column + 1) && grid[row][column + 1] != '0') {
				xPosition.add(row);
				yPosition.add(column + 1);
			}
		}
	}
	boolean isOutOfBoundary(char[][] grid, int row, int column) {
		return row < 0 || row > grid.length - 1 || column < 0 || column > grid[0].length - 1;
	}
	int solve(char[][] grid) {
		boolean[][] visited = new boolean[grid.length][grid[0].length];
		int count = 0;
		Queue<Integer> xPosition = new LinkedList<Integer>();
		Queue<Integer> yPosition = new LinkedList<Integer>();
		for (int row = 0; row < grid.length; row++) {
			for (int column = 0; column < grid[0].length; column++) {
				if (grid[row][column] == '1') {
					count += 1;
					xPosition.add(row);
					yPosition.add(column);
					bfsMarkNeighborAsZero(grid,xPosition,yPosition);
				}
			}
		}
		return count;
	}
}