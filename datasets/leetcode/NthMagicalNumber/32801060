class Solution {
	int gcd(int a, int b) {
		if (a == 0) {
			return b;
		}
		return gcd(b % a,a);
	}
	int lcm(int a, int b) {
		return (a / gcd(a,b)) * b;
	}
	int nmn(int n, int a, int b) {
		if (n == 0) {
			return 0;
		} 
		else if (n == 1) {
			return Math.min(a,b);
		}
		long i = 1;
		long j = 1;
		while (n > 1) {
			long temp1 = a * i;
			long temp2 = b * j;
			if (temp1 > temp2) {
				j++;
			} 
			else if (temp1 == temp2) {
				i++;
				j++;
			} 
			else {
				i++;
			}
			n--;
		}
		return (int) (Math.min(a * i,b * j) % (Math.pow(10,9) + 7));
	}
	int nthMagicalNumber(int n, int a, int b) {
		long lcmm = (long) lcm(a,b);
		long nums = lcmm / a + lcmm / b - 1;
		long loop = n / nums;
		int add = nmn((int) (n % nums),a,b);
		return (int) ((lcmm * loop + add) % (Math.pow(10,9) + 7));
	}
}