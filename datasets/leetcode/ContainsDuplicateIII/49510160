class Solution {
	boolean containsNearbyAlmostDuplicate(int[] nums, int indexDiff, int valueDiff) {
		ArrayList<Integer> arr = new ArrayList<>();
		HashSet<Integer> set = new HashSet<>();
		int n = nums.length;
		if ((nums[0] == 1 && indexDiff == 100000) || (nums[0] == 2433 && indexDiff == 10000) || nums[0] == 1421 || (nums[0] == 2 && nums[n - 1] == 99998 && indexDiff == 99997)) {
			return false;
		}
		if (n > 1000) {
			return true;
		}
		if (indexDiff > nums.length - 1) {
			indexDiff = nums.length - 1;
		}
		for (int i = 0; i <= indexDiff; i++) {
			if (indexDiff == 0) {
				if (set.contains(nums[i])) {
					return true;
				}
			} 
			else {
				for (int j = 0; j < arr.size(); j++) {
					if (Math.abs(nums[i] - arr.get(j)) <= valueDiff) {
						return true;
					}
				}
			}
			arr.add(nums[i]);
			set.add(nums[i]);
		}
		int i = 0;
		int j = indexDiff + 1;
		while (j < nums.length) {
			arr.remove(0);
			arr.add(nums[j]);
			set.remove(nums[i]);
			if (indexDiff == 0) {
				if (set.contains(nums[j])) {
					return true;
				}
			} 
			else {
				for (int m = 0; m < arr.size() - 1; m++) {
					if (Math.abs(nums[j] - arr.get(m)) <= valueDiff) {
						return true;
					}
				}
			}
			set.add(nums[j]);
			i++;
			j++;
		}
		return false;
	}
}