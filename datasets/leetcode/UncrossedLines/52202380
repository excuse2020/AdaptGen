class Solution {
	int[][] dp;
	int dfs(int i, int j, int[] nums1, int[] nums2) {
		if (i == nums1.length || j == nums2.length) {
			return 0;
		}
		if (dp[i][j] != -1) {
			return dp[i][j];
		}
		if (nums1[i] == nums2[j]) {
			dp[i][j] = 1 + dfs(i + 1,j + 1,nums1,nums2);
		} 
		else {
			int take = dfs(i + 1,j,nums1,nums2);
			int notTake = dfs(i,j + 1,nums1,nums2);
			dp[i][j] = Math.max(take,notTake);
		}
		return dp[i][j];
	}
	int maxUncrossedLines(int[] nums1, int[] nums2) {
		int n = nums1.length;
		int m = nums2.length;
		dp = new int[n][m];
		for (int[] row: dp) {	
			Arrays.fill(row,-1);
		}
		return dfs(0,0,nums1,nums2);
	}
}