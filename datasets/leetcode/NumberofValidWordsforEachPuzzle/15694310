class Solution {
	int convertMask(HashSet<Character> set) {
		int mask = 0;
		for (int i = 0; i < 26; i++) {
			if (set.contains((char) (i + 97))) {
				mask = mask | (1 << i);
			}
		}
		return mask;
	}
	List<Integer> findNumOfValidWords(String[] words, String[] puzzles) {
		long startTime = System.currentTimeMillis();
		int n = words.length;
		int word = new int[n];
		int len = new int[n];
		HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
		for (int i = 0; i < n; i++) {
			char ch = words[i].toCharArray();
			int n1 = ch.length;
			HashSet<Character> set = new HashSet<Character>();
			for (int j = 0; j < n1; j++) {
				set.add(ch[j]);
			}
			len[i] = set.size();
			int p = convertMask(set);
			word[i] = p;
			map.put(p,map.getOrDefault(p,0) + 1);
		}
		int m = puzzles.length;
		int ipuz = new int[m];
		List<Integer> arr = new ArrayList<Integer>();
		int i = 0;
		char ch = puzzles[i].toCharArray();
		int n1 = ch.length;
		HashSet<Character> set = new HashSet<Character>();
		for (int j = 0; j < n1; j++) {
			set.add(ch[j]);
		}
		int mask1 = convertMask(set);
		int s = mask1;
		int t;
	}
}