class Solution {
	int MOD = 1_000_000_007;
	int numRollsToTarget(int n, int k, int target) {
		Integer[][] dp = new Integer[n + 1][target + 1];
		return solveTab(n,k,target,dp);
	}
	int solveMem(int n, int k, int target, Integer[][] dp) {
		int ans = 0;
		if (target < 0) {
			return 0;
		}
		if (n == 0 && target == 0) {
			return 1;
		}
		if (n == 0 && target != 0) {
			return 0;
		}
		if (n != 0 && target == 0) {
			return 0;
		}
		if (dp[n][target] != null) {
			return dp[n][target];
		}
		for (int i = 1; i <= k; i++) {
			if (target - i >= 0) {
				ans = (ans + solveMem(n - 1,k,target - i,dp)) % MOD;
			}
		}
		return dp[n][target] = ans;
	}
	int solveTab(int d, int faces, int target, Integer[][] dp) {
		for (int i = 0; i < dp.length; i++) {
			Arrays.fill(dp[i],0);
		}
		dp[0][0] = 1;
		for (int dice = 1; dice <= d; dice++) {
			for (int t = 1; t <= target; t++) {
				int ans = 0;
				for (int i = 1; i <= faces; i++) {
					if (t - i >= 0) {
						ans = (ans + dp[dice - 1][t - i]) % MOD;
					}
				}
				dp[dice][t] = ans;
			}
		}
		return dp[d][target];
	}
}