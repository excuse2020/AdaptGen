class Solution {
	int MOD = (int) (1e9 + 7);
	int[] getLeftCounts(int[] arr) {
		int n = arr.length;
		int[] counts = new int[n];
		Deque<Integer> stack = new LinkedList();
		for (int i = 0; i < n; i++) {
			while (!stack.isEmpty() && arr[stack.peek()] >= arr[i]) {
				stack.pop();
			}
			counts[i] = stack.isEmpty() ? i - 0 + 1 : i - stack.peek();
			stack.push(i);
		}
		return counts;
	}
	int[] getRightCounts(int[] arr) {
		int n = arr.length;
		int[] counts = new int[n];
		Deque<Integer> stack = new LinkedList();
		for (int i = n - 1; i >= 0; i--) {
			while (!stack.isEmpty() && arr[stack.peek()] > arr[i]) {
				stack.pop();
			}
			counts[i] = stack.isEmpty() ? n - i : stack.peek() - i;
			stack.push(i);
		}
		return counts;
	}
	int sumSubarrayMins(int[] arr) {
		int n = arr.length;
		int[] leftCount = getLeftCounts(arr);
		int[] rightCount = getRightCounts(arr);
		long totalSum = 0;
		for (int i = 0; i < n; i++) {
			totalSum = (totalSum + (long) arr[i] * leftCount[i]) % MOD;
		}
		return (int) totalSum;
	}
}