class Solution {
	boolean dfs(int node, int destination, List<List<Integer>> adjacencyList, Set<Integer> visited) {
		if (node == destination) {
			return true;
		}
		visited.add(node);
		for (int neighbor: adjacencyList.get(node)) {	
			if (!visited.contains(neighbor)) {
				if (dfs(neighbor,destination,adjacencyList,visited)) {
					return true;
				}
			}
		}
		return false;
	}
	void main(String[] args) {
		Solution solution = new Solution();
		System.out.println(solution.validPath(3,new int{{0, 1}, {1, 2}, {2, 0}},0,2));
		System.out.println(solution.validPath(6,new int{{0, 1}, {0, 2}, {3, 5}, {5, 4}, {4, 3}},0,5));
	}
	boolean validPath(int n, int[][] edges, int source, int destination) {
		List<List<Integer>> adjacencyList = new ArrayList<>();
		for (int i = 0; i < n; i++) {
			adjacencyList.add(new ArrayList<>());
		}
		for (int[] edge: edges) {	
			adjacencyList.get(edge[0]).add(edge[1]);
			adjacencyList.get(edge[1]).add(edge[0]);
		}
		Set<Integer> visited = new HashSet<>();
		return dfs(source,destination,adjacencyList,visited);
	}
}