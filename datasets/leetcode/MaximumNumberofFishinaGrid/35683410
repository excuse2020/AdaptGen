class Solution {
	int find(int i, int j, int[][] grid) {
		int count = grid[i][j];
		grid[i][j] = 0;
		if (isValid(i + 1,j,grid)) {
			count += find(i + 1,j,grid);
		}
		if (isValid(i - 1,j,grid)) {
			count += find(i - 1,j,grid);
		}
		if (isValid(i,j + 1,grid)) {
			count += find(i,j + 1,grid);
		}
		if (isValid(i,j - 1,grid)) {
			count += find(i,j - 1,grid);
		}
		return count;
	}
	int findMaxFish(int[][] grid) {
		int ans = 0;
		for (int i = 0; i < grid.length; i++) {
			for (int j = 0; j < grid[0].length; j++) {
				if (grid[i][j] != 0) {
					int val = find(i,j,grid);
					ans = Math.max(ans,val);
				}
			}
		}
		return ans;
	}
	boolean isValid(int row, int col, int[][] grid) {
		if (row < 0 || row >= grid.length || col < 0 || col >= grid[0].length || grid[row][col] == 0) {
			return false;
		}
		return true;
	}
}