class Solution {
	int atMostNGivenDigitSet(String[] digits, int n) {
		int arr = new int[10];
		for (int i = 0; i < digits.length; i++) {
			arr[Integer.valueOf(digits[i])]++;
		}
		for (int i = 1; i < 10; i++) {
			arr[i] += arr[i - 1];
		}
		if (n / 10 <= 0) {
			return arr[n];
		}
		int res = digits.length;
		int num = n / 10;
		int i = 2;
		while (num >= 10) {
			res += Math.pow(digits.length,i);
			num = num / 10;
			i++;
		}
		res += calculateDigit(arr,n,0,i,digits);
		return res;
	}
	int calculateDigit(int arr, int n, int index, int len, String[] digits) {
		int val = 0;
		int i = 0;
		for (i = len; i > 0; i--) {
			int temp = n / (int) Math.pow(10,(i - 1));
			temp = temp % 10;
			if (temp == 0) {
				return val;
			}
			int res = (int) Math.pow(digits.length,i - 1) * arr[temp - 1];
			val += res;
			if (arr[temp] - arr[temp - 1] < 1) {
				return val;
			}
		}
		if (i == 0) {
			val++;
		}
		return val;
	}
}