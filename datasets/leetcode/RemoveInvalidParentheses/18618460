class Solution {
	void dfs(String s, int idx, int open, String str, int minRemovals, Set<String> set) {
		if (idx == s.length()) {
			if (minRemovals == 0 && open == 0) {
				set.add(str);
			}
			return;
		}
		if (minRemovals < 0) {
			return;
		}
		char c = s.charAt(idx);
		String appendedStr = new StringBuilder(str).append(c).toString();
	}
	int getMinRemovals(String s) {
		int unmatchedOpen = 0;
		int unmatchedClose = 0;
		int i = 0;
		char c = s.charAt(i);
	}
	List<String> removeInvalidParentheses(String s) {
		Set<String> set = new HashSet<>();
		int minRemovals = getMinRemovals(s);
		dfs(s,0,0,"",minRemovals,set);
		return new ArrayList<>(set);
	}
}