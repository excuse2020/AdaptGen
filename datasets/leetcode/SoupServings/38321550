class Solution {
	double calculateProbability(int servingsA, int servingsB, double[][] dp) {
		if (servingsA <= 0 && servingsB <= 0) {
			return 0.5;
		}
		if (servingsA <= 0) {
			return 1.0;
		}
		if (servingsB <= 0) {
			return 0.0;
		}
		if (dp[servingsA][servingsB] != -1) {
			return dp[servingsA][servingsB];
		}
		dp[servingsA][servingsB] = 0.25 * (calculateProbability(servingsA - 4,servingsB,dp) + calculateProbability(servingsA - 3,servingsB - 1,dp));
		return dp[servingsA][servingsB];
	}
	double soupServings(int n) {
		if (n >= 4800) {
			return 1.0;
		}
		n = (n + 24) / 25;
		double[][] dp = new double[n + 1][n + 1];
		for (int i = 0; i <= n; i++) {
			Arrays.fill(dp[i],-1);
		}
		return calculateProbability(n,n,dp);
	}
}