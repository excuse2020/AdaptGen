class Solution {
	List<Integer> findSubstring(String s, String[] words) {
		int l = s.length();
		int targetL = 0;
		for (int i = 0; i < words.length; i++) {
			targetL += words[i].length();
		}
		if (targetL > l) {
			return new ArrayList<Integer>();
		}
		Arrays.sort(words);
		List<Integer> ans = new ArrayList<Integer>();
		int i = 0;
		int j = targetL - 1;
		while (j < l) {
			if (this.isPerm(s.substring(i,j + 1),words)) {
				ans.add(i);
			}
			i++;
			j++;
		}
		return ans;
	}
	boolean isPerm(String s, String[] words) {
		int wordL = words[0].length();
		String[] temp = new String[words.length];
		int l = 0;
		for (int i = 0; i < words.length; i++) {
			temp[i] = s.substring(l,l + wordL);
			l = l + wordL;
		}
		Arrays.sort(temp);
		return Arrays.equals(temp,words);
	}
}