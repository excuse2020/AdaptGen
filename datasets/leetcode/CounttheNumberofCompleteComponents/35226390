class Solution {
	int countCompleteComponents(int n, int[][] edges) {
		int[] parent = new int[n];
		int[] rank = new int[n];
		Set[] graph = new Set[n];
		for (int i = 0; i < n; i++) {
			parent[i] = i;
			rank[i] = 1;
		}
		for (int[] edge: edges) {	
			if (graph[edge[0]] == null) {
				graph[edge[0]] = new HashSet<>();
			}
			if (graph[edge[1]] == null) {
				graph[edge[1]] = new HashSet<>();
			}
			graph[edge[0]].add(edge[1]);
			graph[edge[0]].add(edge[0]);
			graph[edge[1]].add(edge[1]);
			graph[edge[1]].add(edge[0]);
			union(edge[0],edge[1],parent,rank);
		}
		Map<Integer, Set<Integer>> map = new HashMap<>();
		for (int i = 0; i < n; i++) {
			int p = find(parent[i],parent);
			map.putIfAbsent(p,new HashSet<>());
			map.get(p).add(i);
		}
		int ans = map.size();
		boolean flag = true;
		for (Set<Integer> set: map.values()) {	
			int size = set.size();
			for (int i: set) {	
				if (graph[i] != null && graph[i].size() != size) {
					ans--;
					break;
				}
			}
		}
		return ans;
	}
	int find(int x, int[] parent) {
		if (parent[x] != x) {
			parent[x] = find(parent[x],parent);
		}
		return parent[x];
	}
	void union(int a, int b, int[] parent, int[] rank) {
		int ap = find(a,parent);
		int bp = find(b,parent);
		if (ap != bp) {
			if (rank[ap] > rank[bp]) {
				parent[bp] = ap;
				rank[ap]++;
			} 
			else {
				parent[ap] = bp;
				rank[bp]++;
			}
		}
	}
}