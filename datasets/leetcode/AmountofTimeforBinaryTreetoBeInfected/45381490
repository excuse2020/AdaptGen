class Solution {
	int amountOfTime(TreeNode root, int start) {
		Map<TreeNode, TreeNode> map = new HashMap<>();
		TreeNode trgt = helper(root,map,start);
		Map<TreeNode, Boolean> vis = new HashMap<>();
		Queue<TreeNode> q = new LinkedList<>();
		vis.put(trgt,true);
		q.add(trgt);
		int min = 0;
		while (!q.isEmpty()) {
			int len = q.size();
			int flag = 0;
			for (int i = 0; i < len; i++) {
				TreeNode curr = q.poll();
				if (map.get(curr) != null && vis.get(map.get(curr)) == null) {
					flag = 1;
					vis.put(map.get(curr),true);
					q.add(map.get(curr));
				}
				if (curr.left != null && vis.get(curr.left) == null) {
					flag = 1;
					vis.put(curr.left,true);
					q.add(curr.left);
				}
				if (curr.right != null && vis.get(curr.right) == null) {
					flag = 1;
					vis.put(curr.right,true);
					q.add(curr.right);
				}
			}
			if (flag == 1) {
				min++;
			}
		}
		return min;
	}
	TreeNode helper(TreeNode root, Map<TreeNode, TreeNode> map, int start) {
		Queue<TreeNode> q = new LinkedList<>();
		TreeNode t_res = null;
		q.add(root);
		while (!q.isEmpty()) {
			TreeNode curr = q.poll();
			if (curr.val == start) {
				t_res = curr;
			}
			if (curr.left != null) {
				map.put(curr.left,curr);
				q.add(curr.left);
			}
			if (curr.right != null) {
				map.put(curr.right,curr);
				q.add(curr.right);
			}
		}
		return t_res;
	}
}