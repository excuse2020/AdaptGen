class Solution {
	Integer dp;
	int maxMoves(int[][] grid) {
		dp = new Integer[grid.length + 1][grid[0].length];
		int res = Integer.MIN_VALUE;
		for (int i = 0; i < grid.length; i++) {
			res = Math.max(res,memo(grid,i,0));
		}
		return res;
	}
	int memo(int grid, int row, int col) {
		if (row < 0 || row >= grid.length || col < 0 || col >= grid[0].length) {
			return 0;
		}
		if (dp[row][col] != null) {
			return dp[row][col];
		}
		int upD = 0;
		int doD = 0;
		int rit = 0;
		if ((row - 1 >= 0 && col + 1 < grid[0].length) && grid[row][col] < grid[row - 1][col + 1]) {
			upD = 1 + memo(grid,row - 1,col + 1);
		}
		if (col + 1 < grid[0].length && grid[row][col] < grid[row][col + 1]) {
			rit = 1 + memo(grid,row,col + 1);
		}
		if ((row + 1 < grid.length && col + 1 < grid[0].length) && grid[row][col] < grid[row + 1][col + 1]) {
			doD = 1 + memo(grid,row + 1,col + 1);
		}
		return dp[row][col] = Math.max(rit,Math.max(doD,upD));
	}
	int recur(int grid, int row, int col) {
		if (row < 0 || row >= grid.length || col < 0 || col >= grid[0].length) {
			return 0;
		}
		int upD = 0;
		int doD = 0;
		int rit = 0;
		if ((row - 1 >= 0 && col + 1 < grid[0].length) && grid[row][col] < grid[row - 1][col + 1]) {
			upD = 1 + recur(grid,row - 1,col + 1);
		}
		if (col + 1 < grid[0].length && grid[row][col] < grid[row][col + 1]) {
			rit = 1 + recur(grid,row,col + 1);
		}
		if ((row + 1 < grid.length && col + 1 < grid[0].length) && grid[row][col] < grid[row + 1][col + 1]) {
			doD = 1 + recur(grid,row + 1,col + 1);
		}
		return Math.max(rit,Math.max(doD,upD));
	}
}