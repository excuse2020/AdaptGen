class Solution {
	int minSizeSubarray(int[] nums, int target) {
		int sum = 0, res = 0, n = nums.length;
		for (int num: nums) {	
			sum += num;
		}
		if (target % sum == 0) {
			return n * (target / sum);
		}
		int toFind = target % sum;
		res += (target >= sum) ? (target / sum) * nums.length : (target / sum);
		int[] both = new int[n + n];
		for (int i = 0; i < 2 * n; i++) {
			both[i] = nums[i % n];
		}
		int rest = smallestSubarraySumK(both,both.length,toFind);
		return rest == -1 ? rest : rest + res;
	}
	int smallestSubarraySumK(int arr, int n, int K) {
		HashMap<Integer, Integer> mp = new HashMap<Integer, Integer>();
		int currPrefixSum = 0;
		int result = Integer.MAX_VALUE;
		for (int i = 0; i < n; i++) {
			currPrefixSum += arr[i];
			if (currPrefixSum == K) {
				int currLen = i + 1;
				result = Math.min(result,currLen);
			}
			int requirePrefixSum = currPrefixSum - K;
			if (mp.containsKey(requirePrefixSum)) {
				int foundIdx = mp.get(requirePrefixSum);
				int currIdx = i;
				result = Math.min(result,currIdx - foundIdx);
			}
			mp.put(currPrefixSum,i);
		}
		if (result >= Integer.MAX_VALUE) {
			return -1;
		}
		return result;
	}
}