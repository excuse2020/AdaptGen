class Solution {
	boolean canBeIncreasing(int[] nums) {
		Stack<Integer> stk = new Stack<>();
		Stack<Integer> stk2 = new Stack<>();
		int cnt = 0;
		int cnt2 = 0;
		for (int i = nums.length - 1; i >= 0; i--) {
			if (!stk.isEmpty() && nums[i] < stk.peek()) {
				stk.push(nums[i]);
			} 
			else if (!stk.isEmpty() && nums[i] >= stk.peek()) {
				cnt++;
				continue;
			} 
			else {
				stk.push(nums[i]);
			}
		}
		for (int i = 0; i < nums.length; i++) {
			if (!stk2.isEmpty() && nums[i] > stk2.peek()) {
				stk2.push(nums[i]);
			} 
			else if (!stk2.isEmpty() && nums[i] <= stk2.peek()) {
				cnt2++;
				continue;
			} 
			else {
				stk2.push(nums[i]);
			}
		}
		return cnt == 1 || cnt == 0 || cnt2 == 0 || cnt2 == 1;
	}
}