class Solution {
	int dfs(int[][] graph, int node, boolean[] visited, HashSet<Integer> infected) {
		if (infected.contains(node)) {
			return 0;
		}
		if (visited[node]) {
			return 0;
		}
		visited[node] = true;
		int count = 1;
		for (int neighbour = 0; neighbour < graph[node].length; neighbour++) {
			if (!visited[neighbour] && graph[node][neighbour] == 1) {
				int numInfectedNodes = dfs(graph,neighbour,visited,infected);
				if (numInfectedNodes == 0) {
					return 0;
				}
				count += numInfectedNodes;
			}
		}
		return count;
	}
	int minMalwareSpread(int[][] graph, int[] initial) {
		Arrays.sort(initial);
		int n = graph.length, ans = initial[0], max = 0;
		HashSet<Integer> infected = new HashSet<>();
		for (int i: initial) {	
			infected.add(i);
		}
		for (int i: initial) {	
			infected.remove(i);
			int count = dfs(graph,i,new boolean[n],infected);
			if (count > max) {
				max = count;
				ans = i;
			}
			infected.add(i);
		}
		return ans;
	}
}