class Solution {
	int max = 0;
	Set<String> seen = new HashSet();
	boolean isValid(String s) {
		Stack<Character> stack = new Stack<Character>();
		int n = s.length();
		int i = 0;
	}
	void recurse(String s, Set<String> set) {
		int n = s.length();
		if (n < max || set.contains(s)) {
			return;
		}
		int i = 0;
		StringBuilder sb = new StringBuilder(s);
	}
	List<String> removeInvalidParentheses(String s) {
		int n = s.length();
		Set<String> set = new HashSet();
		if (isValid(s)) {
			return Arrays.asList(s);
		}
		int i = 0;
		StringBuilder sb = new StringBuilder(s);
	}
}