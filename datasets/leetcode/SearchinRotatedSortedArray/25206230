class Solution {
	int findPivot(int[] A) {
		int lo = 0, hi = A.length - 1;
		while (lo <= hi) {
			int mid = lo + (hi - lo) / 2;
			if (mid < hi && A[mid] > A[mid + 1]) {
				return mid;
			}
			if (mid > lo && A[mid] < A[mid - 1]) {
				return mid - 1;
			}
			if (A[lo] > A[mid]) {
				hi = mid - 1;
			} 
			else {
				lo = mid + 1;
			}
		}
		return -1;
	}
	int search(int[] nums, int target) {
		int pivot = findPivot(nums);
		if (pivot == -1) {
			return search(nums,0,nums.length - 1,target);
		}
		if (target == nums[pivot]) {
			return pivot;
		}
		if (target >= nums[0]) {
			return search(nums,0,pivot,target);
		}
		return search(nums,pivot + 1,nums.length - 1,target);
	}
	int search(int[] A, int lo, int hi, int t) {
		while (lo <= hi) {
			int mid = lo + (hi - lo) / 2;
			if (t < A[mid]) {
				hi = mid - 1;
			} 
			else if (t > A[mid]) {
				lo = mid + 1;
			} 
			else {
				return mid;
			}
		}
		return -1;
	}
}