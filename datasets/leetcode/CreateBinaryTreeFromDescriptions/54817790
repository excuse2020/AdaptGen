class Solution {
	TreeNode createBinaryTree(int[][] descriptions) {
		Map<Integer, TreeNode> map = new HashMap<>();
		for (int i = 0; i < descriptions.length; i++) {
			if (!map.containsKey(descriptions[i][0])) {
				TreeNode parent = new TreeNode(descriptions[i][0]);
				map.put(descriptions[i][0],parent);
			}
			if (!map.containsKey(descriptions[i][1])) {
				TreeNode child = new TreeNode(descriptions[i][1]);
				map.put(descriptions[i][1],child);
			}
			TreeNode parent = map.get(descriptions[i][0]);
			TreeNode child = map.get(descriptions[i][1]);
			if (descriptions[i][2] == 1) {
				parent.left = child;
			} 
			else {
				parent.right = child;
			}
		}
		Set<Integer> s = new HashSet<>();
		for (int i = 0; i < descriptions.length; i++) {
			s.add(descriptions[i][1]);
		}
		int val = 0;
		for (int i = 0; i < descriptions.length; i++) {
			if (!s.contains(descriptions[i][0])) {
				val = descriptions[i][0];
				break;
			}
		}
		return map.get(val);
	}
}