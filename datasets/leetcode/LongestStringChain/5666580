class Solution {
	HashMap<String, Integer> map = new HashMap<>();
	HashMap<String, Integer> memo = new HashMap<>();
	int dfs(String sb) {
		if (sb.length() == 0) {
			return 0;
		}
		if (memo.containsKey(sb)) {
			return memo.get(sb);
		}
		int max = 0;
		for (int i = 0; i < sb.length(); i++) {
			StringBuilder tmp = new StringBuilder(sb);
			tmp.deleteCharAt(i);
			int res = 0;
			if (map.containsKey(tmp.toString())) {
				res += 1 + dfs(tmp.toString());
			}
			max = Math.max(max,res);
		}
		memo.put(sb,max);
		return max;
	}
	int longestStrChain(String[] words) {
		for (String word: words) {	
			map.put(word,1);
		}
		int res = Integer.MIN_VALUE;
		for (String word: words) {	
			res = Math.max(res,1 + dfs(word));
		}
		return res;
	}
}