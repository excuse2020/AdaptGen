class Solution {
	int[] countVisitedNodes(List<Integer> edges) {
		int[] result = new int[edges.size()];
		int n = edges.size();
		Queue<Integer> q = new LinkedList<>();
		int[] indeg = new int[n];
		for (int it: edges) {	
			indeg[it]++;
		}
		for (int i = 0; i < n; i++) {
			if (indeg[i] == 0) {
				q.offer(i);
			}
		}
		boolean[] visited = new boolean[n];
		Stack<Integer> stack = new Stack<>();
		while (!q.isEmpty()) {
			int currVertex = q.poll();
			stack.add(currVertex);
			visited[currVertex] = true;
			if (--indeg[edges.get(currVertex)] == 0) {
				q.offer(edges.get(currVertex));
			}
		}
		for (int i = 0; i < n; i++) {
			if (!visited[i]) {
				findCycleNodes(edges,result,i,visited);
			}
		}
		while (!stack.isEmpty()) {
			int currVertex = stack.pop();
			int length = 1 + result[edges.get(currVertex)];
			result[currVertex] = length;
		}
		return result;
	}
	void findCycleNodes(List<Integer> edges, int[] result, int startVertex, boolean[] visited) {
		int length = 0;
		int x = startVertex;
		while (!visited[x]) {
			visited[x] = true;
			length++;
			x = edges.get(x);
		}
		result[startVertex] = length;
		x = edges.get(startVertex);
		while (x != startVertex) {
			result[x] = length;
			x = edges.get(x);
		}
	}
}