class Solution {
	TreeNode Deserialize(String str) {
		if (str.equals("null")) {
			return null;
		}
		String[] arr = str.split(",");
		int index = 0;
		Queue<TreeNode> queue = new LinkedList<>();
		TreeNode root = new TreeNode(Integer.valueOf(arr[index++]));
		queue.offer(root);
		while (!queue.isEmpty()) {
			TreeNode node = queue.poll();
			if (!arr[index].equals("null")) {
				node.left = new TreeNode(Integer.valueOf(arr[index]));
				queue.offer(node.left);
			}
			index++;
			if (!arr[index].equals("null")) {
				node.right = new TreeNode(Integer.valueOf(arr[index]));
				queue.offer(node.right);
			}
			index++;
		}
		return root;
	}
	String Serialize(TreeNode root) {
		if (root == null) {
			return "null";
		}
		StringBuilder sb = new StringBuilder();
		Queue<TreeNode> queue = new LinkedList<>();
		queue.offer(root);
		while (!queue.isEmpty()) {
			TreeNode node = queue.poll();
			if (node == null) {
				sb.append("null,");
			} 
			else {
				sb.append(node.val + ",");
				queue.offer(node.left);
				queue.offer(node.right);
			}
		}
		return sb.toString();
	}
}