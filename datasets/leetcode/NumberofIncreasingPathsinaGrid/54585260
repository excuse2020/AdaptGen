class Solution {
	int MOD = 1_000_000_007;
	int countPaths(int[][] grid) {
		int rows = grid.length;
		int cols = grid[0].length;
		int[][] dp = new int[rows][cols];
		for (int i = 0; i < rows; i++) {
			Arrays.fill(dp[i],-1);
		}
		int totalPaths = 0;
		for (int i = 0; i < rows; i++) {
			for (int j = 0; j < cols; j++) {
				totalPaths = (totalPaths + finder(i,j,grid,dp)) % MOD;
			}
		}
		return totalPaths;
	}
	int finder(int row, int col, int[][] arr, int[][] dp) {
		if (dp[row][col] != -1) {
			return dp[row][col];
		}
		int paths = 1;
		if (col - 1 >= 0 && arr[row][col - 1] > arr[row][col]) {
			paths = (paths + finder(row,col - 1,arr,dp)) % MOD;
		}
		if (col + 1 < arr[0].length && arr[row][col + 1] > arr[row][col]) {
			paths = (paths + finder(row,col + 1,arr,dp)) % MOD;
		}
		if (row - 1 >= 0 && arr[row - 1][col] > arr[row][col]) {
			paths = (paths + finder(row - 1,col,arr,dp)) % MOD;
		}
		if (row + 1 < arr.length && arr[row + 1][col] > arr[row][col]) {
			paths = (paths + finder(row + 1,col,arr,dp)) % MOD;
		}
		return dp[row][col] = paths;
	}
}