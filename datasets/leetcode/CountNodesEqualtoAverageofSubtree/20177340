class Solution {
	int averageOfSubtree(TreeNode root) {
		Queue<TreeNode> queue = new ArrayDeque<>();
		queue.offer(root);
		int count = 0;
		while (!queue.isEmpty()) {
			TreeNode temp = queue.poll();
			if (temp.val == sum(temp) / count(temp)) {
				count++;
			}
			if (temp.left != null) {
				queue.offer(temp.left);
			}
			if (temp.right != null) {
				queue.offer(temp.right);
			}
		}
		return count;
	}
	int count(TreeNode node) {
		if (node == null) {
			return 0;
		}
		return 1 + count(node.left);
	}
	int sum(TreeNode node) {
		if (node == null) {
			return 0;
		}
		return node.val + sum(node.left);
	}
}