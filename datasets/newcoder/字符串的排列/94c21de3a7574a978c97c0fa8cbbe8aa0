class Solution {
	ArrayList<String> ans = new ArrayList<>();
	int n;
	ArrayList<String> Permutation(String str) {
		n = str.length();
		char[] array = str.toCharArray();
		Arrays.sort(array);
		StringBuilder sb = new StringBuilder();
		boolean[] used = new boolean[n];
		dfs(sb,array,used);
		return ans;
	}
	void dfs(StringBuilder sb, char[] array, boolean[] used) {
		if (sb.length() == n) {
			ans.add(sb.toString());
			return;
		}
		Set<Character> choosed = new HashSet<>();
		for (int i = 0; i < n; i++) {
			if (used[i]) {
				continue;
			}
			if (choosed.add(array[i])) {
				used[i] = true;
				sb.append(array[i]);
				dfs(sb,array,used);
				sb.deleteCharAt(sb.length() - 1);
				used[i] = false;
			}
		}
	}
}