class Solution {
	int help(int i, int j, int[][] a) {
		if (i < 0 || j < 0 || j > a[0].length - 1) {
			return (int) Math.pow(10,9);
		}
		if (i == 0) {
			return a[i][j];
		}
		int left = a[i][j] + help(i - 1,j - 1,a);
		int up = a[i][j] + help(i - 1,j,a);
		int right = a[i][j] + help(i - 1,j + 1,a);
		return Math.min(left,Math.min(up,right));
	}
	int minFallingPathSum(int[][] a) {
		int min = Integer.MAX_VALUE;
		int m = a.length;
		int n = a[0].length;
		for (int j = 0; j < n; j++) {
			int temp = help(m - 1,j,a);
			min = Math.min(min,temp);
		}
		return min;
	}
}