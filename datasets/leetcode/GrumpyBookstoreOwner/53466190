class Solution {
	int maxSatisfied(int[] customers, int[] grumpy, int minutes) {
		int n = customers.length;
		int[] sumLeft = new int[n];
		int[] sumRight = new int[n];
		sumLeft[0] = (1 - grumpy[0]) * customers[0];
		sumRight[n - 1] = (1 - grumpy[n - 1]) * customers[n - 1];
		for (int i = 1; i < n; i++) {
			sumLeft[i] = sumLeft[i - 1] + (1 - grumpy[i]) * customers[i];
		}
		for (int i = n - 2; i >= 0; i--) {
			sumRight[i] = sumRight[i + 1] + (1 - grumpy[i]) * customers[i];
		}
		int maxCustomers = sumLeft[n - 1];
		int currentWindow = 0;
		for (int i = 0; i < n; i++) {
			if (i >= minutes) {
				currentWindow -= customers[i - minutes];
			}
			currentWindow += customers[i];
			maxCustomers = Math.max(maxCustomers,currentWindow + ((i < minutes) ? 0 : sumLeft[i - minutes]));
		}
		return maxCustomers;
	}
}