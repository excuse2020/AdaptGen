class Solution {
	int minSideJumps(int[] ob) {
		int n = ob.length;
		int dp = new int[4][n];
		for (int a: dp) {	
			Arrays.fill(a,-1);
		}
		return solve(0,2,dp,ob,n);
	}
	int solve(int i, int curlane, int dp, int ob, int n) {
		if (i == n - 1) {
			return 0;
		}
		if (dp[curlane][i] != -1) {
			return dp[curlane][i];
		}
		int ans = Integer.MAX_VALUE;
		if (ob[i + 1] != curlane) {
			return solve(i + 1,curlane,dp,ob,n);
		} 
		else {
			for (int lane = 1; lane <= 3; lane++) {
				if (curlane != lane && ob[i] != lane) {
					ans = Math.min(ans,1 + solve(i,lane,dp,ob,n));
				}
			}
			dp[curlane][i] = ans;
		}
		return dp[curlane][i];
	}
}