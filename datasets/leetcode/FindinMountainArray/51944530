class Solution {
	int binarySearchAsc(int target, MountainArray mountainArr, int start, int end) {
		while (start <= end) {
			int mid = start + (end - start) / 2;
			int value = mountainArr.get(mid);
			if (value < target) {
				start = mid + 1;
			} 
			else if (value > target) {
				end = mid - 1;
			} 
			else {
				return mid;
			}
		}
		return -1;
	}
	int binarySearchDesc(int target, MountainArray mountainArr, int start, int end) {
		while (start <= end) {
			int mid = start + (end - start) / 2;
			int value = mountainArr.get(mid);
			if (value < target) {
				end = mid - 1;
			} 
			else if (value > target) {
				start = mid + 1;
			} 
			else {
				return mid;
			}
		}
		return -1;
	}
	int findInMountainArray(int target, MountainArray mountainArr) {
		int peak = findPeak(mountainArr);
		int result = binarySearchAsc(target,mountainArr,0,peak);
		if (result != -1) {
			return result;
		}
		return binarySearchDesc(target,mountainArr,peak + 1,mountainArr.length() - 1);
	}
	int findPeak(MountainArray mountainArr) {
		int start = 0;
		int end = mountainArr.length() - 1;
		while (start < end) {
			int mid = start + (end - start) / 2;
			if (mountainArr.get(mid) > mountainArr.get(mid + 1)) {
				end = mid;
			} 
			else {
				start = mid + 1;
			}
		}
		return start;
	}
}