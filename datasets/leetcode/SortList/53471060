class Solution {
	ListNode findMiddle(ListNode head) {
		ListNode slow = head;
		ListNode fast = head.next;
		while (fast != null && fast.next != null) {
			slow = slow.next;
			fast = fast.next.next;
		}
		return slow;
	}
	ListNode merge(ListNode left, ListNode right) {
		ListNode dummy = new ListNode(0);
		ListNode curr = dummy;
		while (left != null && right != null) {
			if (left.val < right.val) {
				curr.next = left;
				curr = curr.next;
				left = left.next;
			} 
			else {
				curr.next = right;
				curr = curr.next;
				right = right.next;
			}
		}
		if (left == null) {
			curr.next = right;
		} 
		else {
			curr.next = left;
		}
		return dummy.next;
	}
	ListNode sortList(ListNode head) {
		if (head == null || head.next == null) {
			return head;
		}
		ListNode middle = findMiddle(head);
		ListNode left = head;
		ListNode right = middle.next;
		middle.next = null;
		left = sortList(left);
		right = sortList(right);
		return merge(left,right);
	}
}