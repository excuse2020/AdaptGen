class Solution {
	boolean malwareHit = false;
	Set<Integer> malwares = new HashSet<>();
	int dfs(int node, int[][] arr, Set<Integer> seen) {
		if (malwareHit) {
			return 0;
		}
		if (seen.contains(node)) {
			return 0;
		}
		seen.add(node);
		if (malwares.contains(node)) {
			malwareHit = true;
			return 0;
		}
		int saveCount = 1;
		for (int next = 0; next < arr.length; next++) {
			if (next == node) {
				continue;
			}
			if (arr[node][next] == 1) {
				saveCount += dfs(next,arr,seen);
			}
		}
		return saveCount;
	}
	int minMalwareSpread(int[][] graph, int[] initial) {
		int ans = graph.length + 1, maxSaves = 0;
		for (int mal: initial) {	
			malwares.add(mal);
		}
		for (int mal: initial) {	
			malwareHit = false;
			malwares.remove(mal);
			int totalSaves = dfs(mal,graph,new HashSet<>());
			malwares.add(mal);
			if (malwareHit) {
				totalSaves = 0;
			}
			if (maxSaves < totalSaves) {
				maxSaves = totalSaves;
				ans = mal;
			} 
			else if (maxSaves == totalSaves) {
				ans = Math.min(ans,mal);
			}
		}
		return ans;
	}
}