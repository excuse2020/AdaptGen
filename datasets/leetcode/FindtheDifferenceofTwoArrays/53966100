class Solution {
	List<List<Integer>> findDifference(int[] nums1, int[] nums2) {
		Set<Integer> setFromArray1 = new HashSet<>();
		Set<Integer> setFromArray2 = new HashSet<>();
		for (int number: nums1) {	
			setFromArray1.add(number);
		}
		for (int number: nums2) {	
			setFromArray2.add(number);
		}
		List<List<Integer>> finishList = new ArrayList<>();
		for (int number: nums1) {	
			if (setFromArray2.contains(number)) {
				setFromArray1.remove(number);
				setFromArray2.remove(number);
			}
		}
		finishList.add(new ArrayList<>(setFromArray1));
		finishList.add(new ArrayList<>(setFromArray2));
		return finishList;
	}
	List<List<Integer>> findDifference1(int[] nums1, int[] nums2) {
		Set<Integer> setFromArray1 = Arrays.stream(nums1).boxed().collect(Collectors.toSet());
		Set<Integer> setFromArray2 = Arrays.stream(nums2).boxed().collect(Collectors.toSet());
		List<List<Integer>> finishList = new ArrayList<>();
		Set<Integer> set1RemoveAllSet2 = new HashSet<>(setFromArray1);
		set1RemoveAllSet2.removeAll(setFromArray2);
		Set<Integer> set2RemoveAllSet1 = new HashSet<>(setFromArray2);
		set2RemoveAllSet1.removeAll(setFromArray1);
		finishList.add(new ArrayList<>(set1RemoveAllSet2));
		finishList.add(new ArrayList<>(set2RemoveAllSet1));
		return finishList;
	}
}