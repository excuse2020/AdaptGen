class Solution {
	int count(ListNode head) {
		ListNode temp = head;
		int count = 1;
		while (temp.next != null) {
			temp = temp.next;
			count++;
		}
		return count;
	}
	ListNode oddEvenList(ListNode head) {
		if (head == null || head.next == null || head.next.next == null) {
			return head;
		}
		int length = count(head);
		int[] oldList = new int[length + 1];
		ListNode flag = head;
		for (int i = 1; i <= length; i++) {
			oldList[i] = flag.val;
			flag = flag.next;
		}
		int[] newList = new int[length + 1];
		int count = 1;
		for (int i = 1; i <= length; i += 2) {
			newList[count] = oldList[i];
			count++;
		}
		for (int i = 2; i <= length; i += 2) {
			newList[count] = oldList[i];
			count++;
		}
		flag = head;
		for (int i = 1; i <= length; i++) {
			flag.val = newList[i];
			flag = flag.next;
		}
		return head;
	}
}