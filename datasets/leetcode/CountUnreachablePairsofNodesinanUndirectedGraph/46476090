class Solution {
	long countPairs(int n, int[][] edges) {
		int[] parent = new int[n];
		int[] rank = new int[n];
		int[] parentCal = new int[n];
		long ans = 0;
		long remaining = n;
		for (int i = 0; i < n; i++) {
			rank[i] = 0;
			parent[i] = i;
		}
		for (int i = 0; i < edges.length; i++) {
			union(edges[i][0],edges[i][1],parent,rank);
		}
		for (int i = 0; i < n; i++) {
			parentCal[find_parent(i,parent)]++;
		}
		for (int i = 0; i < parentCal.length; i++) {
			if (parentCal[i] != 0) {
				remaining = remaining - parentCal[i];
				ans += parentCal[i] * remaining;
			}
		}
		return (long) ans;
	}
	int find_parent(int x, int[] parent) {
		if (parent[x] == x) {
			return x;
		}
		return parent[x] = find_parent(parent[x],parent);
	}
	void union(int x, int y, int[] parent, int[] rank) {
		int parent1 = find_parent(x,parent);
		int parent2 = find_parent(y,parent);
		if (parent1 == parent2) {
			return;
		}
		if (rank[parent1] > rank[parent2]) {
			parent[parent2] = parent1;
		} 
		else if (rank[parent2] > rank[parent1]) {
			parent[parent1] = parent2;
		} 
		else if (rank[parent2] == rank[parent1]) {
			parent[parent1] = parent2;
			rank[parent2]++;
		}
	}
}