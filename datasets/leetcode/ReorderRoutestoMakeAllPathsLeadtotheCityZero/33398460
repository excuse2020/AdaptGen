class Solution {
	int minReorder(int n, int[][] connections) {
		int m = connections.length;
		List<List<Integer>> adj = new ArrayList<>();
		List<List<Integer>> backward = new ArrayList<>();
		for (int i = 0; i < n; i++) {
			adj.add(new ArrayList<>());
			backward.add(new ArrayList<>());
		}
		for (int i = 0; i < m; i++) {
			adj.get(connections[i][0]).add(connections[i][1]);
			backward.get(connections[i][1]).add(connections[i][0]);
		}
		Queue<Integer> q = new LinkedList<Integer>();
		int vis = new int[n];
		int count = 0;
		q.add(0);
		vis[0] = 1;
		while (!q.isEmpty()) {
			int city = q.poll();
			for (int it: adj.get(city)) {	
				if (vis[it] == 0) {
					q.add(it);
					vis[it] = 1;
					count++;
				}
			}
			for (int it: backward.get(city)) {	
				if (vis[it] == 0) {
					q.add(it);
					vis[it] = 1;
				}
			}
		}
		return count;
	}
}