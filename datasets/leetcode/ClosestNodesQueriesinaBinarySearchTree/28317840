class Solution {
	List<List<Integer>> res;
	List<List<Integer>> closestNodes(TreeNode root, List<Integer> queries) {
		res = new ArrayList<>();
		for (int i = 0; i < queries.size(); ++i) {
			int val = queries.get(i);
			floorCeilBSTHelper(root,val,Integer.MIN_VALUE,Integer.MAX_VALUE);
		}
		return res;
	}
	void floorCeilBSTHelper(TreeNode root, int key, int floor, int ceil) {
		while (root != null) {
			if (root.val == key) {
				ceil = root.val;
				floor = root.val;
				break;
			}
			if (key > root.val) {
				floor = root.val;
				root = root.right;
			} 
			else {
				ceil = root.val;
				root = root.left;
			}
		}
		List<Integer> part = new ArrayList<>();
		if (floor != Integer.MIN_VALUE && ceil != Integer.MAX_VALUE) {
			part.add(floor);
			part.add(ceil);
		} 
		else if (floor != Integer.MIN_VALUE) {
			part.add(floor);
			part.add(-1);
		} 
		else {
			part.add(-1);
			part.add(ceil);
		}
		res.add(part);
	}
}