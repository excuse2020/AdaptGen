class Solution {
	ArrayList<String> ans = new ArrayList<>();
	StringBuilder path = new StringBuilder();
	ArrayList<String> Permutation(String str) {
		int n = str.length();
		if (n == 0) {
			return ans;
		}
		char[] s = str.toCharArray();
		Arrays.sort(s);
		dfs(s,new boolean[n]);
		return ans;
	}
	void dfs(char[] s, boolean[] used) {
		if (path.length() == s.length) {
			ans.add(new String(path));
			return;
		}
		for (int i = 0; i < s.length; i++) {
			if (used[i]) {
				continue;
			}
			if (i > 0 && s[i] == s[i - 1] && !used[i - 1]) {
				continue;
			}
			used[i] = true;
			path.append(s[i]);
			dfs(s,used);
			used[i] = false;
			path.deleteCharAt(path.length() - 1);
		}
	}
}