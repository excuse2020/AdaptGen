class Solution {
	boolean isPossible(int n, int k, int budget, List<List<Integer>> composition, List<Integer> stock, List<Integer> cost, int numOfAlloys) {
		long totalSpent = 0;
		for (List<Integer> list: composition) {	
			for (int i = 0; i < n; i++) {
				long required = (long) list.get(i) * numOfAlloys;
				required = stock.get(i) >= required ? 0 : required - stock.get(i);
				totalSpent += (long) required * cost.get(i);
			}
			if (totalSpent <= budget) {
				return true;
			}
			totalSpent = 0;
		}
		return false;
	}
	int maxNumberOfAlloys(int n, int k, int budget, List<List<Integer>> composition, List<Integer> stock, List<Integer> cost) {
		int left = 0;
		int right = Integer.MAX_VALUE;
		int ans = 0;
		while (left <= right) {
			int mid = left + (right - left) / 2;
			if (isPossible(n,k,budget,composition,stock,cost,mid)) {
				ans = mid;
				left = mid + 1;
			} 
			else {
				right = mid - 1;
			}
		}
		return ans;
	}
}