class Solution {
	ListNode getMiddleOfList(ListNode head) {
		ListNode left = head;
		ListNode right = head;
		while (right != null && right.next != null) {
			left = left.next;
			right = right.next.next;
		}
		if (right == null) {
			return left;
		} 
		else {
			return left.next;
		}
	}
	boolean isPail(ListNode head) {
		if (head == null) {
			return false;
		}
		ListNode reversedFromMiddle = reverse(getMiddleOfList(head));
		ListNode original = head;
		while (reversedFromMiddle != null) {
			if (reversedFromMiddle.val != original.val) {
				return false;
			}
			reversedFromMiddle = reversedFromMiddle.next;
			original = original.next;
		}
		return true;
	}
	ListNode reverse(ListNode head) {
		if (head == null || head.next == null) {
			return head;
		}
		ListNode headOfReversed = reverse(head.next);
		head.next.next = head;
		head.next = null;
		return headOfReversed;
	}
}