class Solution {
	TreeNode deConstructTreeNode(int[] pre, int[] vin) {
		int m = pre.length;
		int n = vin.length;
		if (m == 0 || n == 0) {
			return null;
		}
		TreeNode root = new TreeNode(pre[0]);
		for (int i = 0; i < n; i++) {
			if (pre[0] == vin[i]) {
				root.left = deConstructTreeNode(Arrays.copyOfRange(pre,1,i + 1),Arrays.copyOfRange(vin,0,i));
				root.right = deConstructTreeNode(Arrays.copyOfRange(pre,i + 1,n),Arrays.copyOfRange(vin,i + 1,n));
			}
		}
		return root;
	}
	ArrayList<Integer> getSloveArray(TreeNode root) {
		ArrayList<Integer> res = new ArrayList<Integer>();
		if (root == null) {
			return res;
		}
		ArrayDeque<TreeNode> q = new ArrayDeque<>();
		q.offer(root);
		while (!q.isEmpty()) {
			int n = q.size();
			for (int i = 0; i < n; i++) {
				TreeNode node = q.poll();
				if (i == n - 1) {
					res.add(node.val);
				}
				if (node.left != null) {
					q.offer(node.left);
				}
				if (node.right != null) {
					q.offer(node.right);
				}
			}
		}
		return res;
	}
	int[] solve(int[] preOrder, int[] inOrder) {
		TreeNode root = deConstructTreeNode(preOrder,inOrder);
		ArrayList<Integer> res = getSloveArray(root);
		int[] resArr;
	}
}