class Solution {
	void merge(int[] arr, int l, int mid, int r) {
		int[] merged = new int[r - l + 1];
		int n1 = l, n2 = mid + 1;
		int x = 0;
		while (n1 <= mid && n2 <= r) {
			if (arr[n1] <= arr[n2]) {
				merged[x++] = arr[n1++];
			} 
			else {
				merged[x++] = arr[n2++];
			}
		}
		while (n1 <= mid) {
			merged[x++] = arr[n1++];
		}
		while (n2 <= r) {
			merged[x++] = arr[n2++];
		}
		for (int i = 0; i < merged.length; i++) {
			arr[l + i] = merged[i];
		}
	}
	void mergesort(int[] arr, int l, int r) {
		if (r <= l) {
			return;
		}
		int mid = l + (r - l) / 2;
		mergesort(arr,l,mid);
		mergesort(arr,mid + 1,r);
		merge(arr,l,mid,r);
	}
	int[] sortArray(int[] nums) {
		int l = 0, r = nums.length - 1;
		mergesort(nums,l,r);
		return nums;
	}
}