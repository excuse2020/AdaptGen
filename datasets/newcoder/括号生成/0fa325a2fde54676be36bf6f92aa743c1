class Solution {
	ArrayList<String> ans = new ArrayList<>();
	ArrayList<String> generateParenthesis(int n) {
		permute(n,n,0,new StringBuilder());
		return ans;
	}
	void permute(int open, int close, int unclosedOpen, StringBuilder sb) {
		if (open == 0 && close == 0) {
			ans.add(sb.toString());
			return;
		}
		if (open > 0) {
			sb.append("(");
			permute(open - 1,close,unclosedOpen + 1,sb);
			sb.deleteCharAt(sb.length() - 1);
		}
		if (unclosedOpen > 0) {
			sb.append(")");
			permute(open,close - 1,unclosedOpen - 1,sb);
			sb.deleteCharAt(sb.length() - 1);
		}
	}
}