class Solution {
	boolean check(String[] arr, String str) {
		int count = 0;
		for (int i = 1; i < arr.length; i++) {
			if (arr[i].contains(str)) {
				count++;
			}
		}
		if (count >= arr.length - 1) {
			return true;
		} 
		else {
			return false;
		}
	}
	String longestCommonPrefix(String[] strs) {
		Arrays.sort(strs,Comparator.comparing((s) -> {s.length()}));
		String test = strs[0];
		while (!test.equals("")) {
			int n = strs[0].length();
			for (int i = 0; i < n; i++) {
				if (check(strs,test) && prefix(strs,test)) {
					return test;
				}
				test = remove(test);
			}
		}
		return "";
	}
	boolean prefix(String[] strs, String test) {
		for (int i = 0; i < strs.length; i++) {
			if (!strs[i].startsWith(test)) {
				return false;
			}
		}
		return true;
	}
	String remove(String str) {
		StringBuffer sb = new StringBuffer(str);
		sb.deleteCharAt(sb.length() - 1);
		return sb.toString();
	}
}