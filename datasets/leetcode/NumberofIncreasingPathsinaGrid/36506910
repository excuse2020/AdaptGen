class Solution {
	int mod = (int) (1e9 + 7);
	int countPaths(int[][] grid) {
		int rowCount = grid.length;
		int colCount = grid[0].length;
		int[][] dp = new int[rowCount][colCount];
		for (int[] row: dp) {	
			Arrays.fill(row,-1);
		}
		int paths = 0;
		for (int i = 0; i < rowCount; i++) {
			for (int j = 0; j < colCount; j++) {
				paths = (paths + solve(grid,i,j,-1,dp)) % mod;
			}
		}
		return paths;
	}
	int solve(int[][] grid, int row, int col, int prev, int[][] dp) {
		if (row < 0 || col < 0 || row >= grid.length || col >= grid[0].length || grid[row][col] <= prev) {
			return 0;
		}
		if (dp[row][col] != -1) {
			return dp[row][col];
		}
		int left = solve(grid,row,col - 1,grid[row][col],dp);
		int right = solve(grid,row,col + 1,grid[row][col],dp);
		int up = solve(grid,row - 1,col,grid[row][col],dp);
		int down = solve(grid,row + 1,col,grid[row][col],dp);
		return dp[row][col] = (1 + left) % mod;
	}
}