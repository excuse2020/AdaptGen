class Solution {
	ListNode merge(ListNode head1, ListNode head2) {
		if (head1 == null) {
			return head2;
		}
		if (head2 == null) {
			return head1;
		}
		ListNode previousOfHead = new ListNode(-1000000001);
		ListNode current = previousOfHead;
		while (head1 != null && head2 != null) {
			if (head1.val <= head2.val) {
				current.next = head1;
				head1 = head1.next;
			} 
			else {
				current.next = head2;
				head2 = head2.next;
			}
			current = current.next;
		}
		if (head1 != null) {
			current.next = head1;
		} 
		else {
			current.next = head2;
		}
		return previousOfHead.next;
	}
	ListNode sortInList(ListNode head) {
		if (head == null || head.next == null) {
			return head;
		}
		if (head.next.next == null) {
			if (head.next.val < head.val) {
				int temporary = head.next.val;
				head.next.val = head.val;
				head.val = temporary;
			}
			return head;
		}
		ListNode slow = head;
		ListNode fast = head;
		while (fast != null && fast.next != null) {
			slow = slow.next;
			fast = fast.next.next;
		}
		ListNode middle = slow.next;
		slow.next = null;
		return merge(sortInList(head),sortInList(middle));
	}
}