class Solution {
	void helper(int[][] relations, int n, int[] inDegree, List<List<Integer>> adj) {
		for (int i = 0; i <= n; i++) {
			adj.add(new ArrayList<>());
		}
		for (int i = 0; i < relations.length; i++) {
			int index = relations[i][1];
			adj.get(relations[i][0]).add(index);
			inDegree[index]++;
		}
	}
	int minimumTime(int n, int[][] relations, int[] time) {
		int[] inDegree = new int[n + 1];
		int[] newtime = new int[n + 1];
		for (int i = 0; i < n; i++) {
			newtime[i + 1] = time[i];
		}
		List<List<Integer>> adj = new ArrayList<>();
		helper(relations,n,inDegree,adj);
		Queue<Integer> queue = new LinkedList<>();
		for (int i = 1; i < inDegree.length; i++) {
			if (inDegree[i] == 0) {
				queue.add(i);
			}
		}
		while (!queue.isEmpty()) {
			int curr = queue.remove();
			for (int next: adj.get(curr)) {	
				inDegree[next]--;
				if (inDegree[next] == 0) {
					queue.add(next);
				}
				int currnexttime = time[next - 1] + newtime[curr];
				newtime[next] = Math.max(currnexttime,newtime[next]);
			}
		}
		int ans = 0;
		for (int i = 1; i < newtime.length; i++) {
			ans = Math.max(ans,newtime[i]);
		}
		return ans;
	}
}