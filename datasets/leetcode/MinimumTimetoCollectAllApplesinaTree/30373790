class Solution {
	int countApples(int index, List<List<Integer>> adjList, List<Boolean> apples, int parent) {
		int count = 0;
		for (int n: adjList.get(index)) {	
			if (n == parent) {
				continue;
			}
			count += countApples(n,adjList,apples,index);
		}
		if (index != 0 && (apples.get(index) || count != 0)) {
			count += 2;
		}
		return count;
	}
	int minTime(int n, int[][] edges, List<Boolean> hasApple) {
		List<List<Integer>> adjList = new ArrayList<List<Integer>>();
		for (int i = 0; i < n; ++i) {
			adjList.add(new ArrayList<>());
		}
		for (int i = 0; i < edges.length; ++i) {
			adjList.get(edges[i][0]).add(edges[i][1]);
			adjList.get(edges[i][1]).add(edges[i][0]);
		}
		return countApples(0,adjList,hasApple,0);
	}
}