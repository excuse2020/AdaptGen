class Solution {
	int memoization(int i, int j, String s, String t, int[][] dp) {
		if (j < 0) {
			return 1;
		}
		if (i < 0) {
			return 0;
		}
		if (dp[i][j] != -1) {
			return dp[i][j];
		}
		if (s.charAt(i) == t.charAt(j)) {
			return dp[i][j] = memoization(i - 1,j - 1,s,t,dp) + memoization(i - 1,j,s,t,dp);
		}
		return dp[i][j] = memoization(i - 1,j,s,t,dp);
	}
	int numDistinct(String s, String t) {
		return tabulationSpaceOptimized(s,t);
	}
	int recursive(int i, int j, String s, String t) {
		if (j < 0) {
			return 1;
		}
		if (i < 0) {
			return 0;
		}
		if (s.charAt(i) == t.charAt(j)) {
			return recursive(i - 1,j - 1,s,t) + recursive(i - 1,j,s,t);
		}
		return recursive(i - 1,j,s,t);
	}
	int tabulation(String s, String t) {
		int m = s.length();
		int n = t.length();
		int[][] dp = new int[m + 1][n + 1];
		for (int i = 0; i <= m; i++) {
			dp[i][0] = 1;
		}
		for (int i = 1; i <= m; i++) {
			for (int j = 1; j <= n; j++) {
				if (s.charAt(i - 1) == t.charAt(j - 1)) {
					dp[i][j] = dp[i - 1][j - 1] + dp[i - 1][j];
				} 
				else {
					dp[i][j] = dp[i - 1][j];
				}
			}
		}
		return dp[m][n];
	}
	int tabulationSpaceOptimized(String s, String t) {
		int m = s.length();
		int n = t.length();
		int[] dp = new int[n + 1];
		dp[0] = 1;
		for (int i = 1; i <= m; i++) {
			for (int j = n; j >= 1; j--) {
				dp[j] = dp[j];
				if (s.charAt(i - 1) == t.charAt(j - 1)) {
					dp[j] += dp[j - 1];
				}
			}
		}
		return dp[n];
	}
}