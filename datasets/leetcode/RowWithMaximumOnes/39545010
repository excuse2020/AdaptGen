class Solution {
	int[] rowAndMaximumOnes(int[][] arr) {
		int n = arr.length;
		int m = arr[0].length;
		int maxValue = 0;
		int maxValueidx = -1;
		for (int i = 0; i < n; i++) {
			int firstOccuridx = rowWithone(arr[i],0,m - 1);
			if (firstOccuridx != -1 && m - firstOccuridx > maxValue) {
				maxValue = m - firstOccuridx;
				maxValueidx = i;
			}
		}
		int[] res = new int[2];
		if (maxValueidx == -1) {
			res[0] = 0;
		} 
		else {
			res[0] = maxValueidx;
		}
		res[1] = maxValue;
		return res;
	}
	int rowWithone(int[] arr, int st, int end) {
		Arrays.sort(arr);
		int firstOccurence = -1;
		while (st <= end) {
			int mid = (st + end) / 2;
			if (arr[mid] == 1) {
				firstOccurence = mid;
				end = mid - 1;
			} 
			else if (arr[mid] < 1) {
				st = mid + 1;
			} 
			else {
				end = mid - 1;
			}
		}
		return firstOccurence;
	}
}