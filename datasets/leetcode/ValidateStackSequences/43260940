class Solution {
	int a;
	int size = 0;
	int top = -1;
	void CustomStack(int maxSize) {
		size = maxSize;
		a = new int[size];
	}
	int getTop() {
		if (isEmpty()) {
			return -1;
		} 
		else {
			return a[top];
		}
	}
	boolean isEmpty() {
		if (top < 0) {
			return true;
		} 
		else {
			return false;
		}
	}
	boolean isFull() {
		if (top >= size - 1) {
			return true;
		} 
		else {
			return false;
		}
	}
	int pop() {
		if (isEmpty()) {
			return -1;
		} 
		else {
			return a[top--];
		}
	}
	void push(int x) {
		if (isFull()) {
			return;
		} 
		else {
			a[++top] = x;
		}
	}
	boolean validateStackSequences(int[] pushed, int[] poped) {
		int len = pushed.length;
		if (len <= 1) {
			return true;
		}
		CustomStack(len);
		int i = 0, j = 0;
		for (i = 0; i < len; i++) {
			push(pushed[i]);
			while (j < len && getTop() == poped[j]) {
				pop();
				j++;
			}
		}
		for (; j < len; j++) {
			if (getTop() == poped[j]) {
				pop();
			} 
			else {
				return false;
			}
		}
		return true;
	}
}