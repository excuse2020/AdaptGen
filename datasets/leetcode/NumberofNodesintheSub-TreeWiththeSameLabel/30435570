class Solution {
	int[] result;
	boolean[] visited;
	void addSubCountInCount(int[] count, int[] subCount) {
		for (int i = 0; i < 26; i++) {
			count[i] += subCount[i];
		}
	}
	int[] countSubTrees(int n, int[][] edges, String labels) {
		var graph = new ArrayList<List<Integer>>();
		for (int i = 0; i < n; i++) {
			graph.add(new LinkedList<Integer>());
		}
		for (int[] edge: edges) {	
			graph.get(edge[0]).add(edge[1]);
			graph.get(edge[1]).add(edge[0]);
		}
		result = new int[n];
		visited = new boolean[n];
		int[] count = helper(0,graph,labels,new int[26]);
		return result;
	}
	int[] helper(int node, List<List<Integer>> graph, String labels, int[] count) {
		if (visited[node]) {
			return count;
		}
		visited[node] = true;
		int curNodeCharIdx;
	}
}