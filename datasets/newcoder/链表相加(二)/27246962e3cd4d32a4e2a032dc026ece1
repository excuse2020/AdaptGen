class Solution {
	ListNode ReverseList(ListNode pHead) {
		if (pHead == null) {
			return null;
		}
		ListNode cur = pHead;
		ListNode pre = null;
		while (cur != null) {
			ListNode temp = cur.next;
			cur.next = pre;
			pre = cur;
			cur = temp;
		}
		return pre;
	}
	ListNode addInList(ListNode head1, ListNode head2) {
		if (head1 == null) {
			return head2;
		}
		if (head2 == null) {
			return head1;
		}
		head1 = ReverseList(head1);
		head2 = ReverseList(head2);
		ListNode res = new ListNode(-1);
		ListNode head = res;
		int carry = 0;
		while (head1 != null || head2 != null || carry != 0) {
			int val1 = head1 == null ? 0 : head1.val;
			int val2 = head2 == null ? 0 : head2.val;
			int temp = val1 + val2;
			carry = temp / 10;
			temp %= 10;
			head.next = new ListNode(temp);
			head = head.next;
			if (head1 != null) {
				head1 = head1.next;
			}
			if (head2 != null) {
				head2 = head2.next;
			}
		}
		return ReverseList(res.next);
	}
}