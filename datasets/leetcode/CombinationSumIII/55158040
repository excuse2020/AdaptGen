class Solution {
	void backtrack(List<List<Integer>> list, ArrayList<Integer> temp, int k, int n, int start) {
		if (n < 0) {
			return;
		}
		if (temp.size() == k && n == 0) {
			list.add(new ArrayList<>(temp));
			return;
		}
		for (int i = start; i <= 9; i++) {
			temp.add(i);
			backtrack(list,temp,k,n - i,i + 1);
			temp.remove(temp.size() - 1);
		}
	}
	List<List<Integer>> combinationSum3(int k, int n) {
		List<List<Integer>> list = new ArrayList<>();
		backtrack(list,new ArrayList<>(),k,n,1);
		return list;
	}
}