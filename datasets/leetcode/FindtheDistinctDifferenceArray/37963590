class Solution {
	int[] distinctDifferenceArray(int[] nums) {
		int[] numbersArray = new int[nums.length];
		for (int i = 0; i < nums.length; i++) {
			int sum1 = prefix(nums,i);
			int sum2 = suffix(nums,i);
			int ans = sum1 - sum2;
			numbersArray[i] = ans;
		}
		return numbersArray;
	}
	int prefix(int[] nums, int mid) {
		HashSet<Integer> numbers = new HashSet<>();
		int count = 0;
		for (int i = mid; i >= 0; i--) {
			if (!numbers.contains(nums[i])) {
				numbers.add(nums[i]);
				count++;
			}
		}
		return count;
	}
	int suffix(int[] nums, int mid) {
		HashSet<Integer> numbers2 = new HashSet<>();
		int count = 0;
		for (int i = mid + 1; i < nums.length; i++) {
			if (!numbers2.contains(nums[i])) {
				numbers2.add(nums[i]);
				count++;
			}
		}
		return count;
	}
}