class Solution {
	long MOD = 1000000007;
	int binarySearch(long[][] freq, long tgt, int l, int r) {
		if (l != r) {
			while (l < r) {
				int m = (l + r) / 2;
				if (freq[m][0] > tgt) {
					r = m;
				} 
				else if (freq[m][0] < tgt) {
					l = m + 1;
				} 
				else {
					return m;
				}
			}
			if (l >= r && l < freq.length && freq[l][0] == tgt) {
				return l;
			}
		} 
		else if (freq[l][0] == tgt) {
			return l;
		}
		return -1;
	}
	long nCr(long n, long r) {
		long ret = 1;
		long fac = 1;
		for (long i = 0; i < r; i++) {
			ret *= n - i;
			fac *= i + 1;
		}
		return ret / fac;
	}
	int threeSumMulti(int[] arr, int target) {
		long[][] freq;
		Map<Integer, Integer> f = new HashMap<Integer, Integer>();
		for (int num: arr) {	
			f.put(num,f.getOrDefault(num,0) + 1);
		}
		freq = new long[f.size()][2];
		int i = 0;
		for (Map.Entry<Integer, Integer> e: f.entrySet()) {	
			freq[i][0] = e.getKey();
			freq[i++][1] = e.getValue();
		}
		Arrays.sort(freq,(a, b) -> {(int) (a[0] - b[0])});
		long ret = 0;
		for (int i = 0; i < freq.length; i++) {
			if (freq[i][0] * 3 == target && freq[i][1] >= 3) {
				ret += nCr(freq[i][1],3);
				ret %= MOD;
			}
			if (freq[i][1] >= 2) {
				int j = binarySearch(freq,target - (freq[i][0] * 2),i + 1,freq.length - 1);
				if (j != -1) {
					ret += freq[j][1] * nCr(freq[i][1],2);
					ret %= MOD;
				}
			}
			if ((target - freq[i][0]) % 2 == 0) {
				int j = binarySearch(freq,(target - freq[i][0]) / 2,i + 1,freq.length - 1);
				if (j != -1 && freq[j][1] >= 2) {
					ret += freq[i][1] * nCr(freq[j][1],2);
					ret %= MOD;
				}
			}
			long tgt = target - freq[i][0];
			int l = i + 1;
			int r = freq.length - 1;
			while (l < r) {
				if (freq[l][0] + freq[r][0] > tgt) {
					r--;
				} 
				else if (freq[l][0] + freq[r][0] < tgt) {
					l++;
				} 
				else {
					ret += freq[i][1] * freq[l][1];
					ret %= MOD;
					l++;
				}
			}
		}
		return (int) (ret);
	}
}