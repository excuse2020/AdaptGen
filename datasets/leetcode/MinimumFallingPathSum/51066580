class Solution {
	int cal(int n, int[][] a, int dp) {
		for (int i = 0; i < n; i++) {
			dp[n - 1][i] = a[n - 1][i];
		}
		for (int row = n - 2; row >= 0; row--) {
			for (int col = 0; col < n; col++) {
				int left = a[row][col];
				if (col - 1 >= 0) {
					left += dp[row + 1][col - 1];
				} 
				else {
					left = Integer.MAX_VALUE;
				}
				int down = a[row][col] + dp[row + 1][col];
				int right = a[row][col];
				if (col + 1 < n) {
					right += dp[row + 1][col + 1];
				} 
				else {
					right = Integer.MAX_VALUE;
				}
				dp[row][col] = Math.min(Math.min(left,right),down);
			}
		}
		int mini = Integer.MAX_VALUE;
		for (int i = 0; i < n; i++) {
			mini = Math.min(mini,dp[0][i]);
		}
		return mini;
	}
	int minFallingPathSum(int[][] a) {
		int n = a.length;
		int mini = Integer.MAX_VALUE;
		int dp = new int[n][n];
		return cal(n,a,dp);
	}
}