class Solution {
	String A;
	int[][] dp;
	int max = 1;
	int dfs(int i, int j) {
		if (i > j) {
			return 0;
		}
		if (i == j) {
			return 1;
		}
		if (dp[i][j] != 0) {
			return dp[i][j];
		}
		if (A.charAt(i) == A.charAt(j)) {
			int inner = dfs(i + 1,j - 1);
			if (inner >= 0) {
				dp[i][j] = inner + 2;
			} 
			else {
				dp[i][j] = -1;
			}
		} 
		else {
			dp[i][j] = -1;
		}
		dfs(i + 1,j);
		dfs(i,j - 1);
		max = Math.max(dp[i][j],max);
		return dp[i][j];
	}
	int getLongestPalindrome(String A) {
		int n = A.length();
		if (n == 1) {
			return 1;
		}
		this.A = A;
		dp = new int[n][n];
		for (int[] row: dp) {	
			Arrays.fill(row,0);
		}
		dfs(0,n - 1);
		return max;
	}
}