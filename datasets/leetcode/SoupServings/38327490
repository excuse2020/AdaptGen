class Solution {
	Double[][] dp;
	double dyP(int i, int j) {
		if (i <= 0 && j <= 0) {
			return 0.5;
		}
		if (i <= 0) {
			return 1.0;
		}
		if (j <= 0) {
			return 0.0;
		}
		if (dp[i][j] != null) {
			return dp[i][j];
		}
		dp[i][j] = (dyP(i - 4,j) + dyP(i - 3,j - 1)) / 4.0;
		return dp[i][j];
	}
	double soupServings(int n) {
		if (n >= 4800) {
			return 1.0;
		}
		int m = (n + 24) / 25;
		dp = new Double[m + 1][m + 1];
		return dyP(m,m);
	}
}