class Solution {
	ArrayList<Interval> merge(ArrayList<Interval> intervals) {
		ArrayList<Interval> results = new ArrayList<>();
		Map<Integer, Integer> mp = new TreeMap<>();
		for (Interval i: intervals) {	
			if (!mp.containsKey(i.start)) {
				mp.put(i.start,i.end);
			} 
			else {
				if (i.end > mp.get(i.start)) {
					mp.put(i.start,i.end);
				}
			}
		}
		List<List<Integer>> inner_list = new LinkedList<>();
		for (Integer k: mp.keySet()) {	
			List<Integer> tmp = new LinkedList<>();
			tmp.add(k);
			tmp.add(mp.get(k));
			inner_list.add(tmp);
		}
		if (inner_list.size() <= 0) {
			return results;
		}
		if (inner_list.size() == 1) {
			Interval inter = new Interval(inner_list.get(0).get(0), inner_list.get(0).get(1));
			results.add(inter);
			return results;
		}
		for (int i = 1; i < inner_list.size(); i++) {
			if (inner_list.get(i).get(0) > inner_list.get(i - 1).get(1)) {
				Interval interval_tmp = new Interval(inner_list.get(i - 1).get(0), inner_list.get(i - 1).get(1));
				continue;
			}
			List<Integer> tmp = new LinkedList<>();
			tmp.add(inner_list.get(i - 1).get(0));
			tmp.add(Math.max(inner_list.get(i).get(1),inner_list.get(i - 1).get(1)));
			inner_list.set(i - 1,tmp);
			inner_list.remove(i);
			i--;
		}
		for (int i = 0; i < inner_list.size(); i++) {
			Interval interval = new Interval(inner_list.get(i).get(0), inner_list.get(i).get(1));
			results.add(interval);
		}
		return results;
	}
}