class Solution {
	int[] findDiagonalOrder(List<List<Integer>> nums) {
		int n = nums.size() - 1, m = n + 1;
		ArrayList<Integer> list = new ArrayList<>();
		for (int i = 0; i < nums.size(); i++) {
			int j = i, k = 0;
			while (j >= 0 && k <= i) {
				if (nums.size() > j && nums.get(j).size() > k) {
					list.add(nums.get(j).get(k));
				}
				j--;
				k++;
			}
		}
		int k = 0, l = nums.get(n).size() - 1;
		int rev = n, item = 1;
		int k1 = 0;
		while (n >= 0) {
			k1++;
			for (int i = k1; i < nums.get(n).size(); i++) {
				int j = n, p1 = k1;
				while (j >= 0) {
					if (nums.size() >= j && nums.get(j).size() > p1) {
						list.add(nums.get(j).get(p1));
					}
					j--;
					p1++;
				}
				k1++;
			}
			n--;
		}
		return list.stream().mapToInt().toArray();
	}
}