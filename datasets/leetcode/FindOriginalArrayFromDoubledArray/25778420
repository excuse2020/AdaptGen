class Solution {
	int[] findOriginalArray(int[] changed) {
		Arrays.sort(changed);
		int i = -1, j = changed.length - 1;
		if (changed.length % 2 != 0) {
			return new int[0];
		}
		for (int k = changed.length - 1; k >= 0; k--) {
			if (changed[k] * 2 == changed[j]) {
				i = k;
				break;
			}
		}
		if (i == -1) {
			return new int[0];
		}
		int[] arr = new int[changed.length / 2];
		int k = 0;
		while (j > 0 && i >= 0) {
			int t = changed[j];
			while (changed[j] == -1) {
				j--;
			}
			t = changed[j];
			if (i >= j) {
				i = j - 1;
			}
			while (i > 0 && changed[i] * 2 != changed[j]) {
				i--;
			}
			if (i > 0) {
				arr[k++] = changed[i];
				changed[i] = -1;
				j--;
				i--;
			} 
			else if (i == 0 && changed[i] * 2 == t) {
				arr[k++] = changed[i];
				changed[i] = -1;
				j--;
				i--;
			} 
			else {
				return new int[0];
			}
		}
		int c = 0;
		for (int p = 0; p < changed.length; p++) {
			if (changed[p] == -1) {
				c++;
			}
		}
		if (c == arr.length) {
			return arr;
		} 
		else {
			return new int[0];
		}
	}
}