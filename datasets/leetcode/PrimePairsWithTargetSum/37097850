class Solution {
	List<List<Integer>> findPrimePairs(int n) {
		List<List<Integer>> pairs = new ArrayList<>();
		boolean[] isPrime = sieveOfEratosthenes(n);
		for (int i = 2; i <= n / 2; i++) {
			if (!isPrime[i] && !isPrime[n - i]) {
				pairs.add(List.of(i,n - i));
			}
		}
		return pairs;
	}
	boolean[] sieveOfEratosthenes(int n) {
		boolean[] isPrime = new boolean[n + 1];
		for (int i = 2; i * i <= n; i++) {
			if (!isPrime[i]) {
				for (int j = i * i; j <= n; j += i) {
					isPrime[j] = true;
				}
			}
		}
		return isPrime;
	}
}