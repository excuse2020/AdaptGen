class Solution {
	ArrayList<TreeNode> we = new ArrayList<>();
	TreeNode Convert(TreeNode pRootOfTree) {
		deep(pRootOfTree);
		System.out.print(we.size());
		if (pRootOfTree == null || (pRootOfTree.left == null && pRootOfTree.right == null)) {
			return pRootOfTree;
		}
		for (int i = 0; i < we.size(); i++) {
			if (i == 0) {
				we.get(i).left = null;
				we.get(i).right = we.get(i + 1);
			} 
			else if (i == we.size() - 1) {
				we.get(i).left = we.get(i - 1);
				we.get(i).right = null;
			} 
			else {
				we.get(i).left = we.get(i - 1);
				we.get(i).right = we.get(i + 1);
			}
		}
		return we.get(0);
	}
	TreeNode deep(TreeNode pRootOfTree) {
		if (pRootOfTree == null) {
			return null;
		}
		deep(pRootOfTree.left);
		we.add(pRootOfTree);
		deep(pRootOfTree.right);
		return null;
	}
}