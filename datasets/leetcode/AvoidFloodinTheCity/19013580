class Solution {
	int[] avoidFlood(int[] rains) {
		int[] ans = new int[rains.length];
		HashMap<Integer, Integer> map = new HashMap<>();
		TreeSet<Integer> dry_days = new TreeSet<>();
		for (int i = 0; i < rains.length; i++) {
			if (rains[i] > 0) {
				if (!map.containsKey(rains[i])) {
					ans[i] = -1;
					map.put(rains[i],i);
				} 
				else {
					int v;
					int index = map.get(rains[i]);
					if (dry_days.size() > 0) {
						v = dry_days.ceiling(index) != null ? dry_days.ceiling(index) : -1;
						if (v == -1) {
							return new int[0];
						}
					} 
					else {
						return new int[0];
					}
					if (dry_days.contains(v)) {
						ans[v] = rains[i];
						ans[i] = -1;
						dry_days.remove(v);
						map.put(rains[i],i);
					}
				}
			} 
			else {
				dry_days.add(i);
				ans[i] = 1;
			}
		}
		return ans;
	}
}