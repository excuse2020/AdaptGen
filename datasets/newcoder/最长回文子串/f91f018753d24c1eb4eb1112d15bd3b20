class Solution {
	int getLongestPalindrome(String A) {
		return manacher(A);
	}
	int manacher(String str) {
		if (str == null || str.length() < 1) {
			return 0;
		}
		char[] charArr = manacherString(str);
		int[] radius = new int[charArr.length];
		int R = -1;
		int c = -1;
		int max = Integer.MIN_VALUE;
		for (int i = 0; i < radius.length; i++) {
			radius[i] = R > i ? Math.min(radius[2 * c - i],R - i + 1) : 1;
			while (i + radius[i] < charArr.length && i - radius[i] > -1) {
				if (charArr[i - radius[i]] == charArr[i + radius[i]]) {
					radius[i]++;
				} 
				else {
					break;
				}
			}
			if (i + radius[i] > R) {
				R = i + radius[i] - 1;
				c = i;
			}
			max = Math.max(max,radius[i]);
		}
		return max - 1;
	}
	char[] manacherString(String str) {
		StringBuilder sb = new StringBuilder();
		for (int i = 0; i < str.length(); i++) {
			sb.append("#");
			sb.append(str.charAt(i));
		}
		sb.append("#");
		return sb.toString().toCharArray();
	}
}