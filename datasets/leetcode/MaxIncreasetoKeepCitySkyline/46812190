class Solution {
	int maxIncreaseKeepingSkyline(int[][] grid) {
		int n = grid.length;
		int sum = 0;
		int[] rowMax = new int[n];
		int[] colMax = new int[n];
		for (int i = 0; i < n; i++) {
			int max = 0;
			for (int j = 0; j < n; j++) {
				if (grid[i][j] > max) {
					max = grid[i][j];
				}
			}
			rowMax[i] = max;
		}
		for (int j = 0; j < n; j++) {
			int max = 0;
			for (int i = 0; i < n; i++) {
				if (grid[i][j] > max) {
					max = grid[i][j];
				}
			}
			colMax[j] = max;
		}
		for (int i = 0; i < n; i++) {
			int key = 0;
			int ans = 0;
			for (int j = 0; j < n; j++) {
				if (grid[i][j] != rowMax[i] && grid[i][j] != colMax[j]) {
					key = Math.min(rowMax[i],colMax[j]);
					ans = key - grid[i][j];
					sum += ans;
				}
			}
		}
		return sum;
	}
}