class Solution {
	List<List<Integer>> res;
	List<List<Integer>> combinationSum2(int[] candidates, int target) {
		res = new ArrayList<>();
		List<Integer> list = new ArrayList<>();
		Arrays.sort(candidates);
		helper(candidates,target,list,0,0);
		return res;
	}
	void helper(int[] arr, int target, List<Integer> list, int sum, int i) {
		if (sum == target) {
			res.add(new ArrayList<>(list));
			return;
		}
		if (sum > target || i >= arr.length) {
			return;
		}
		sum += arr[i];
		list.add(arr[i]);
		helper(arr,target,list,sum,i + 1);
		list.remove(list.size() - 1);
		sum -= arr[i];
		while (i + 1 < arr.length && arr[i] == arr[i + 1]) {
			i++;
		}
		helper(arr,target,list,sum,i + 1);
	}
}