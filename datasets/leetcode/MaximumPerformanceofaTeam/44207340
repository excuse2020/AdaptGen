class Solution {
	int maxPerformance(int n, int[] speed, int[] efficiency, int k) {
		int MOD = 1000000007;
		int speedWithEfficiency = new int[n][2];
		for (int i = 0; i < speedWithEfficiency.length; i++) {
			speedWithEfficiency[i][0] = speed[i];
			speedWithEfficiency[i][1] = efficiency[i];
		}
		Arrays.sort(speedWithEfficiency,new Comparator<int[]>());
		PriorityQueue<int[]> pq = new PriorityQueue<int[]>(new Comparator<int[]>());
		long sum = 0;
		long max = 0;
		for (int i = speedWithEfficiency.length - 1; i >= 0; i--) {
			sum += speedWithEfficiency[i][0];
			pq.add(speedWithEfficiency[i]);
			if (pq.size() > k) {
				sum -= pq.poll()[0];
			}
			max = Math.max(max,sum * speedWithEfficiency[i][1]);
		}
		return (int) (max % MOD);
	}
}