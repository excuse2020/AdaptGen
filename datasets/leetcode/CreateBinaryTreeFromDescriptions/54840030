class Solution {
	TreeNode createBinaryTree(int[][] descriptions) {
		return createtree(descriptions);
	}
	TreeNode createtree(int[][] description) {
		HashMap<Integer, TreeNode> hm = new HashMap<>();
		Set<Integer> s = new HashSet<>();
		for (int[] arr: description) {	
			int parentval = arr[0];
			int childval = arr[1];
			int left = arr[2];
			TreeNode parent = hm.getOrDefault(parentval,new TreeNode(parentval));
			TreeNode child = hm.getOrDefault(childval,new TreeNode(childval));
			if (left == 1) {
				parent.left = child;
			} 
			else {
				parent.right = child;
			}
			hm.put(parentval,parent);
			hm.put(childval,child);
			s.add(childval);
		}
		TreeNode root = null;
		for (int key: hm.keySet()) {	
			if (!s.contains(key)) {
				root = hm.get(key);
			}
		}
		return root;
	}
}