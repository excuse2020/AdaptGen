class Solution {
	TreeNode createBinaryTree(int[][] descriptions) {
		TreeNode[] treeNodes = new TreeNode[100001];
		TreeNode rootNode = null;
		int[] pcArr = new int[100001];
		for (int i = 0; i < descriptions.length; i++) {
			if (treeNodes[descriptions[i][0]] == null) {
				treeNodes[descriptions[i][0]] = new TreeNode(descriptions[i][0]);
			}
			if (treeNodes[descriptions[i][1]] == null) {
				treeNodes[descriptions[i][1]] = new TreeNode(descriptions[i][1]);
			}
			if (descriptions[i][2] == 1) {
				treeNodes[descriptions[i][0]].left = treeNodes[descriptions[i][1]];
			} 
			else {
				treeNodes[descriptions[i][0]].right = treeNodes[descriptions[i][1]];
			}
			if (pcArr[descriptions[i][0]] == 0) {
				pcArr[descriptions[i][0]] = 1;
			}
			pcArr[descriptions[i][1]] = -1;
		}
		for (int i = 0; i < pcArr.length; i++) {
			if (pcArr[i] == 1) {
				rootNode = treeNodes[i];
				break;
			}
		}
		return rootNode;
	}
}