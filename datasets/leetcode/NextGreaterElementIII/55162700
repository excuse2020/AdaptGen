class Solution {
	int[] extractDigits(int n) {
		String stringInt = String.valueOf(n);
		char[] charArr = stringInt.toCharArray();
		int length = charArr.length;
		int[] result = new int[length];
		int i = 0;
		for (char ch: charArr) {	
			result[i] = Integer.parseInt(String.valueOf(ch));
			i++;
		}
		return result;
	}
	int nextGreaterElement(int n) {
		int[] nums = extractDigits(n);
		int i = nums.length - 2;
		while (i >= 0 && nums[i] >= nums[i + 1]) {
			i--;
		}
		if (i < 0) {
			return -1;
		}
		for (int j = nums.length - 1; j > i; j--) {
			if (nums[i] < nums[j]) {
				swap(nums,i,j);
				break;
			}
		}
		int left = i + 1, right = nums.length - 1;
		while (left < right) {
			swap(nums,left,right);
			left++;
			right--;
		}
		StringBuilder sb = new StringBuilder();
		for (int k: nums) {	
			sb.append(k);
		}
		long num = Long.parseLong(sb.toString());
		if (num > Integer.MAX_VALUE) {
			return -1;
		}
		return (int) num;
	}
	void swap(int[] nums, int i, int j) {
		int temp = nums[i];
		nums[i] = nums[j];
		nums[j] = temp;
	}
}