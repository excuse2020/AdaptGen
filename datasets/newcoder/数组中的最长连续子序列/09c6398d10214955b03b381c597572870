class Solution {
	int MLS(int[] arr) {
		if (arr == null) {
			return 0;
		}
		if (arr.length == 1) {
			return 1;
		}
		quickSort(0,arr.length - 1,arr);
		int max = 1;
		int tempMax = 1;
		for (int i = 1; i < arr.length; i++) {
			if (arr[i] == arr[i - 1] + 1) {
				tempMax++;
			} 
			else if (arr[i] == arr[i - 1]) {
				continue;
			} 
			else {
				tempMax = 1;
			}
			max = Math.max(tempMax,max);
		}
		return max;
	}
	void quickSort(int start, int end, int[] arr) {
		if (start > end) {
			return;
		}
		int left = start;
		int right = end;
		int target = arr[start];
		while (left < right) {
			while (left < right && arr[right] >= target) {
				right--;
			}
			while (left < right && arr[left] <= target) {
				left++;
			}
			if (left < right) {
				int temp = arr[left];
				arr[left] = arr[right];
				arr[right] = temp;
			}
		}
		arr[start] = arr[left];
		arr[right] = target;
		quickSort(start,left - 1,arr);
		quickSort(left + 1,end,arr);
	}
}