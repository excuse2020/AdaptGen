class Solution {
	Integer[][] dp;
	int n;
	int getLengthOfOptimalCompression(String s, int k) {
		n = s.length();
		dp = new Integer[n][k + 1];
		return solve(s,0,k);
	}
	int solve(String s, int i, int k) {
		if (k < 0) {
			return n;
		}
		if (n <= i + k) {
			return 0;
		}
		if (dp[i][k] != null) {
			return dp[i][k];
		}
		int ans = n - i;
		ans = solve(s,i + 1,k - 1);
		int length = 0, same = 0, diff = 0;
		for (int j = i; j < n && diff <= k; j++) {
			if (s.charAt(j) == s.charAt(i)) {
				same++;
				if (same <= 2 || same == 10 || same == 100) {
					length++;
				}
			} 
			else {
				diff++;
			}
			ans = Math.min(ans,length + solve(s,j + 1,k - diff));
		}
		dp[i][k] = ans;
		return ans;
	}
}