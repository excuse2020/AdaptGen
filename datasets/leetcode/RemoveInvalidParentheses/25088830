class Solution {
	List<String> res = new ArrayList<>();
	HashSet<String> visited = new HashSet<>();
	int getMinInvalid(String s) {
		Stack<Character> st = new Stack<>();
		int i = 0;
	}
	List<String> removeInvalidParentheses(String s) {
		int rem = getMinInvalid(s);
		solve(s,rem,new HashSet<>());
		return res;
	}
	void solve(String s, int minInv, HashSet<String> duplicate) {
		if (minInv == 0) {
			int now = getMinInvalid(s);
			if (now == 0) {
				if (duplicate.contains(s) == false) {
					duplicate.add(s);
					res.add(s);
				}
			}
			return;
		}
		for (int i = 0; i < s.length(); i++) {
			String left = s.substring(0,i);
			String right = s.substring(i + 1);
			if (visited.contains(left + right) == false) {
				visited.add(left + right);
				solve(left + right,minInv - 1,duplicate);
			}
		}
	}
}