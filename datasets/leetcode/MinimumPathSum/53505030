class Solution {
	int f(int r, int c, int[][] grid, int[][] dp) {
		if (r == 0 && c == 0) {
			dp[r][c] = grid[r][c];
		}
		if (r < 0 || c < 0) {
			return (int) 1e8;
		}
		if (dp[r][c] != -1) {
			return dp[r][c];
		}
		int left = grid[r][c] + f(r,c - 1,grid,dp);
		int up = grid[r][c] + f(r - 1,c,grid,dp);
		return dp[r][c] = Math.min(left,up);
	}
	int minPathSum(int[][] grid) {
		int r = grid.length;
		int c = grid[0].length;
		int[][] dp = new int[r][c];
		for (int[] rows: dp) {	
			Arrays.fill(rows,-1);
		}
		return f(r - 1,c - 1,grid,dp);
	}
}