class Solution {
	ArrayList<ArrayList<Integer>> Print(TreeNode pRoot) {
		Queue<TreeNode> queue = new LinkedList();
		ArrayList res = new ArrayList();
		if (pRoot == null) {
			return new ArrayList();
		}
		if (pRoot != null) {
			queue.offer(pRoot);
		}
		while (!queue.isEmpty()) {
			ArrayList line = new ArrayList();
			Queue<TreeNode> temp = change(queue,line,res);
			queue = temp;
		}
		return res;
	}
	Queue<TreeNode> change(Queue<TreeNode> queue, ArrayList line, ArrayList res) {
		Queue<TreeNode> temp = new LinkedList();
		while (!queue.isEmpty()) {
			TreeNode node = queue.poll();
			line.add(node.val);
			if (node.left != null) {
				temp.offer(node.left);
			}
			if (node.right != null) {
				temp.offer(node.right);
			}
		}
		res.add(line);
		return temp;
	}
}