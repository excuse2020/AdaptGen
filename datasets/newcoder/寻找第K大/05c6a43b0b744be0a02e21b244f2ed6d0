class Solution {
	int findKth(int[] a, int n, int K) {
		int heapSize = K;
		getHeap(a,K);
		for (int i = K; i < a.length; i++) {
			if (a[i] > a[0]) {
				swap(a,0,i);
				minHeapify(a,0,heapSize);
			}
		}
		return a[0];
	}
	void getHeap(int[] a, int heapSize) {
		for (int i = heapSize / 2 - 1; i >= 0; i--) {
			minHeapify(a,i,heapSize);
		}
	}
	void minHeapify(int[] a, int i, int heapSize) {
		int smallest = i, left = i * 2 + 1, right = i * 2 + 2;
		if (left < heapSize && a[left] < a[smallest]) {
			smallest = left;
		}
		if (right < heapSize && a[right] < a[smallest]) {
			smallest = right;
		}
		if (smallest != i) {
			swap(a,i,smallest);
			minHeapify(a,smallest,heapSize);
		}
	}
	void swap(int[] a, int i, int j) {
		int temp = a[i];
		a[i] = a[j];
		a[j] = temp;
	}
}