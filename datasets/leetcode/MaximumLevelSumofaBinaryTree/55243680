class Solution {
	int max = Integer.MIN_VALUE;
	int helper(TreeNode node, Queue<TreeNode> queue) {
		int maxlevel = 0;
		int level = 0;
		while (!queue.isEmpty()) {
			int levelSize = queue.size();
			int sum = 0;
			for (int i = 0; i < levelSize; i++) {
				TreeNode temp = queue.poll();
				sum += temp.val;
				if (temp.left != null) {
					queue.offer(temp.left);
				}
				if (temp.right != null) {
					queue.offer(temp.right);
				}
			}
			level++;
			if (sum > max) {
				max = sum;
				maxlevel = level;
			}
		}
		return maxlevel;
	}
	int maxLevelSum(TreeNode root) {
		Queue<TreeNode> queue = new LinkedList<>();
		queue.offer(root);
		return helper(root,queue);
	}
}