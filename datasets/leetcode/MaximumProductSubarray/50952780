class Solution {
	int getMaxProduct(int firstNegValIdx, int curIdx, int maxProduct, int[] nums) {
		if (firstNegValIdx != -1 && (curIdx - 1 != firstNegValIdx)) {
			maxProduct = Math.max(nums[curIdx - 1] / nums[firstNegValIdx],maxProduct);
		}
		return maxProduct;
	}
	int maxProduct(int[] nums) {
		int maxProduct = nums[0];
		int firstNegValIdx = -1;
		if (nums[0] < 0) {
			firstNegValIdx = 0;
		}
		for (int i = 1; i < nums.length; i++) {
			if (nums[i] != 0) {
				if (nums[i] < 0 && firstNegValIdx == -1) {
					firstNegValIdx = i;
				}
				if (nums[i - 1] != 0) {
					nums[i] *= nums[i - 1];
				}
			} 
			else {
				maxProduct = getMaxProduct(firstNegValIdx,i,maxProduct,nums);
				firstNegValIdx = -1;
			}
			maxProduct = Math.max(maxProduct,nums[i]);
		}
		return getMaxProduct(firstNegValIdx,nums.length,maxProduct,nums);
	}
}