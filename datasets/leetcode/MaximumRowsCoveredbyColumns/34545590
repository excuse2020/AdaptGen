class Solution {
	int ans = 0;
	int col;
	int row;
	void backtrack(int[][] matrix, int numSelect, int k, int column) {
		if (k == numSelect) {
			ans = Math.max(ans,checkrows());
			return;
		}
		if (column == col.length) {
			return;
		}
		backtrack(matrix,numSelect,k,column + 1);
		chooseCol(matrix,column);
		backtrack(matrix,numSelect,k + 1,column + 1);
		removeCol(matrix,column);
	}
	int checkrows() {
		int count = 0;
		for (int i: row) {	
			if (i == 0) {
				count++;
			}
		}
		return count;
	}
	void chooseCol(int[][] matrix, int column) {
		for (int i = 0; i < matrix.length; i++) {
			if (matrix[i][column] == 1) {
				row[i]--;
			}
		}
	}
	int maximumRows(int[][] matrix, int numSelect) {
		int m = matrix.length;
		int n = matrix[0].length;
		row = new int[m];
		col = new int[n];
		for (int i = 0; i < m; i++) {
			for (int j = 0; j < n; j++) {
				if (matrix[i][j] == 1) {
					row[i]++;
					col[j]++;
				}
			}
		}
		backtrack(matrix,numSelect,0,0);
		return ans;
	}
	void removeCol(int[][] matrix, int column) {
		for (int i = 0; i < matrix.length; i++) {
			if (matrix[i][column] == 1) {
				row[i]++;
			}
		}
	}
}