class Solution {
	int[] countSubTrees(int n, int[][] edges, String labels) {
		List<List<Integer>> adj = new ArrayList<>();
		for (int i = 0; i < n; i++) {
			adj.add(new ArrayList<>());
		}
		for (int i = 0; i < edges.length; i++) {
			adj.get(edges[i][0]).add(edges[i][1]);
			adj.get(edges[i][1]).add(edges[i][0]);
		}
		boolean[] vis = new boolean[n];
		int[] res = new int[n];
		dfs(0,vis,adj,labels,res);
		return res;
	}
	int[] dfs(int src, boolean[] vis, List<List<Integer>> adj, String labels, int[] res) {
		vis[src] = true;
		int count = new int[26];
		int ind;
	}
}