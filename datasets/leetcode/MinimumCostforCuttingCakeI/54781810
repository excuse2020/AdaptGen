class Solution {
	HashMap<String, Integer> memo;
	int helper(int m, int n, int x0, int y0, int x1, int y1, int[] h, int[] v) {
		if (x0 == x1 && y0 == y1) {
			return 0;
		}
		String key = x0 + " ";
		if (memo.containsKey(key)) {
			return memo.get(key);
		}
		int ans = Integer.MAX_VALUE;
		for (int i = y0; i < y1; i++) {
			int cost = v[i];
			int next1 = helper(m,n,x0,y0,x1,i,h,v);
			int next2 = helper(m,n,x0,i + 1,x1,y1,h,v);
			if (next1 != Integer.MAX_VALUE && next2 != Integer.MAX_VALUE) {
				ans = Math.min(ans,cost + next1);
			}
		}
		for (int i = x0; i < x1; i++) {
			int cost = h[i];
			int next1 = helper(m,n,x0,y0,i,y1,h,v);
			int next2 = helper(m,n,i + 1,y0,x1,y1,h,v);
			if (next1 != Integer.MAX_VALUE && next2 != Integer.MAX_VALUE) {
				ans = Math.min(ans,cost + next1);
			}
		}
		memo.put(key,ans);
		return ans;
	}
	int minimumCost(int m, int n, int[] h, int[] v) {
		memo = new HashMap<>();
		return helper(m,n,0,0,m - 1,n - 1,h,v);
	}
}