class Solution {
	List<Integer> list = new ArrayList<>();
	Map<Integer, Integer> map = new HashMap<>();
	int binarySearchClosePow(int x) {
		int left = 0, right = 20;
		while (left + 1 < right) {
			int mid = (left + right) / 2;
			if (list.get(mid) == x) {
				return x;
			} 
			else if (list.get(mid) > x) {
				right = mid;
			} 
			else {
				left = mid;
			}
		}
		return Math.abs(list.get(left) - x) > Math.abs(list.get(right) - x) ? list.get(right) : list.get(left);
	}
	int findMinDiff(int x) {
		int pow = binarySearchClosePow(x);
		return Math.abs(pow - x);
	}
	void init() {
		for (int i = 0; i <= 20; i++) {
			int pow = (int) (Math.pow(2,i));
			map.put(pow,i);
			list.add(pow);
		}
	}
	int minOperations(int n) {
		if (n == 1) {
			return 1;
		}
		init();
		int count = 0;
		int num = n;
		while (num != 0) {
			int diff = findMinDiff(num);
			num = diff;
			count++;
		}
		return count;
	}
}