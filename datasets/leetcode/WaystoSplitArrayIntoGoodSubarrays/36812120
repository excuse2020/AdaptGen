class Solution {
	Integer[][] dp;
	int mod = 1000000007;
	int n;
	int[] nums;
	int dfs(int i, int have) {
		if (i >= n) {
			if (have == 1) {
				return 1;
			} 
			else {
				return 0;
			}
		}
		if (dp[i][have] != null) {
			return dp[i][have];
		}
		int split = 0;
		int notSplit = 0;
		if (have == 1) {
			if (nums[i] == 1) {
				return 0;
			} 
			else {
				split = dfs(i + 1,0);
				notSplit = dfs(i + 1,1);
			}
		} 
		else {
			if (nums[i] == 1) {
				notSplit = dfs(i + 1,1);
				split = dfs(i + 1,0);
			} 
			else {
				notSplit = dfs(i + 1,0);
			}
		}
		return dp[i][have] = (split % mod + notSplit % mod) % mod;
	}
	int numberOfGoodSubarraySplits(int[] nums) {
		this.nums = nums;
		this.n = nums.length;
		dp = new Integer[n + 1][2];
		return dfs(0,0);
	}
}