class Solution {
	double findMedianSortedArrays(int[] nums1, int[] nums2) {
		int m = nums1.length, n = nums2.length;
		int mid = (m + n) / 2;
		if (m == 0 || n == 0) {
			if (m == 0) {
				if (n % 2 == 0) {
					return (double) (nums2[mid] + nums2[mid - 1]) / 2;
				} 
				else {
					return nums2[mid];
				}
			} 
			else {
				if (m % 2 == 0) {
					return (double) (nums1[mid] + nums1[mid - 1]) / 2;
				} 
				else {
					return nums1[mid];
				}
			}
		}
		int i = 0, j = 0;
		int cnt = 0, num = 0, prev = 0;
		while ((cnt <= mid) && (i <= m - 1)) {
			prev = num;
			if (nums1[i] < nums2[j]) {
				num = nums1[i++];
			} 
			else {
				num = nums2[j++];
			}
			cnt++;
		}
		while ((cnt <= mid) && (i <= m - 1)) {
			prev = num;
			num = nums1[i++];
			cnt++;
		}
		while ((cnt <= mid) && (j <= n - 1)) {
			prev = num;
			num = nums2[j++];
			cnt++;
		}
		if ((m + n) % 2 == 1) {
			return num;
		} 
		else {
			return (double) (prev + num) / 2;
		}
	}
}