class Solution {
	int minReorder(int n, int[][] connections) {
		List<List<Integer>> edgesIn = new ArrayList<>();
		List<List<Integer>> edgesOut = new ArrayList<>();
		for (int i = 0; i < n; i++) {
			edgesIn.add(new ArrayList<>());
		}
		for (int i = 0; i < n; i++) {
			edgesOut.add(new ArrayList<>());
		}
		for (int[] ab: connections) {	
			edgesOut.get(ab[0]).add(ab[1]);
			edgesIn.get(ab[1]).add(ab[0]);
		}
		boolean[] visited = new boolean[n];
		Arrays.fill(visited,false);
		Deque<Integer> deque = new ArrayDeque<>();
		deque.addLast(0);
		visited[0] = true;
		int res = 0;
		while (!deque.isEmpty()) {
			int city = deque.removeFirst();
			for (int next: edgesOut.get(city)) {	
				if (!visited[next]) {
					res++;
					visited[next] = true;
					deque.addLast(next);
				}
			}
			for (int next: edgesIn.get(city)) {	
				if (!visited[next]) {
					visited[next] = true;
					deque.addLast(next);
				}
			}
		}
		return res;
	}
}