class Solution {
	int countmin(int i, int j, int[][] grid, int[][] dp) {
		if (i == 0 && j == 0) {
			return grid[0][0];
		}
		int up = Integer.MAX_VALUE;
		int down = Integer.MAX_VALUE;
		if (i < 0 || j < 0) {
			return (int) Math.pow(10,9);
		}
		if (dp[i][j] != -1) {
			return dp[i][j];
		}
		if (i > 0) {
			up = countmin(i - 1,j,grid,dp) + grid[i][j];
		}
		if (j > 0) {
			down = countmin(i,j - 1,grid,dp) + grid[i][j];
		}
		int min = Math.min(up,down);
		return dp[i][j] = min;
	}
	int minPathSum(int[][] grid) {
		int n = grid.length;
		int m = grid[0].length;
		int[][] dp = new int[n][m];
		for (int row: dp) {	
			Arrays.fill(row,-1);
		}
		return countmin(n - 1,m - 1,grid,dp);
	}
}