class Solution {
	List<String> list = new ArrayList<>();
	HashSet<String> visited = new HashSet<>();
	Pair<Integer, Integer> getBalance(StringBuilder sb) {
		int close = 0;
		int balance = 0;
		int i = 0;
		char c = sb.charAt(i);
	}
	boolean isValidString(StringBuilder sb) {
		int balance = 0;
		int i = 0;
		char c = sb.charAt(i);
	}
	void removeInvalidParentheses(StringBuilder modified, int openBalance, int closeBalance) {
		String toString = modified.toString();
		if (visited.contains(toString)) {
			return;
		}
		visited.add(toString);
		if (openBalance == 0 && closeBalance == 0) {
			if (isValidString(modified)) {
				list.add(modified.toString());
			}
			return;
		}
		int i = 0;
	}
	List<String> removeInvalidParentheses(String s) {
		StringBuilder sb = new StringBuilder(s);
		Pair<Integer, Integer> pair = getBalance(sb);
		removeInvalidParentheses(sb,pair.getKey(),pair.getValue());
		return list;
	}
}