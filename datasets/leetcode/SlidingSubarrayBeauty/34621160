class Solution {
	int[] getSubarrayBeauty(int[] nums, int k, int x) {
		int j = 0;
		int n = nums.length;
		int[] ans = new int[n - k + 1];
		var frequency = new TreeMap<Integer, Integer>();
		for (int i = 0; i < k; i++) {
			if (nums[i] < 0) {
				frequency.merge(nums[i],1,);
			}
		}
		ans[j++] = getXthSmallest(frequency,x);
		for (int i = k; i < nums.length; i++) {
			if (nums[i] < 0) {
				frequency.merge(nums[i],1,);
			}
			if (nums[i - k] < 0) {
				frequency.merge(nums[i - k],-1,);
			}
			ans[j++] = getXthSmallest(frequency,x);
		}
		return ans;
	}
	int getXthSmallest(Map<Integer, Integer> map, int x) {
		int count = 0;
		for (var entry: map.entrySet()) {	
			count += entry.getValue();
			if (count >= x) {
				return entry.getKey();
			}
		}
		return 0;
	}
}