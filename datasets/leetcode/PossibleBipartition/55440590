class Solution {
	boolean bfs(int node, int[] color, int c, ArrayList<ArrayList<Integer>> arr) {
		Queue<Integer> pq = new LinkedList<>();
		pq.add(node);
		color[node] = c;
		while (!pq.isEmpty()) {
			int am = pq.poll();
			for (Integer s: arr.get(am)) {	
				if (color[s] == color[am]) {
					return false;
				}
				if (color[s] == -1) {
					color[s] = 1 - color[am];
					pq.add(s);
				}
			}
		}
		return true;
	}
	boolean possibleBipartition(int n, int[][] dislikes) {
		ArrayList<ArrayList<Integer>> arr = new ArrayList<>();
		for (int i = 0; i <= n; i++) {
			arr.add(new ArrayList<>());
		}
		for (int[] d: dislikes) {	
			arr.get(d[0]).add(d[1]);
			arr.get(d[1]).add(d[0]);
		}
		int[] color = new int[n + 1];
		Arrays.fill(color,-1);
		for (int i = 1; i <= n; i++) {
			if (color[i] == -1) {
				if (bfs(i,color,1,arr) == false) {
					return false;
				}
			}
		}
		return true;
	}
}