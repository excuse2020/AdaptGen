class Solution {
	int equalSubstring(String s, String t, int maxCost) {
		int n = s.length();
		int maxLength = 0;
		int[] asciiDiffArray = new int[n];
		for (int i = 0; i < n; i++) {
			asciiDiffArray[i] = Math.abs((int) s.charAt(i) - (int) t.charAt(i));
		}
		int leftPtr = 0;
		int rightPtr = 0;
		int currMaxCost = 0;
		int subStringLength = 0;
		int prevSubStringLength = 0;
		while (rightPtr < n) {
			if (currMaxCost + asciiDiffArray[rightPtr] <= maxCost) {
				currMaxCost = currMaxCost + asciiDiffArray[rightPtr];
				rightPtr++;
				subStringLength = rightPtr - leftPtr;
			} 
			else {
				subStringLength = rightPtr - leftPtr;
				if (leftPtr == rightPtr) {
					currMaxCost = currMaxCost;
					prevSubStringLength = Math.max(prevSubStringLength,subStringLength);
					leftPtr++;
					rightPtr++;
				} 
				else {
					currMaxCost = currMaxCost - asciiDiffArray[leftPtr];
					prevSubStringLength = Math.max(prevSubStringLength,subStringLength);
					leftPtr++;
				}
			}
		}
		return Math.max(subStringLength,prevSubStringLength);
	}
}