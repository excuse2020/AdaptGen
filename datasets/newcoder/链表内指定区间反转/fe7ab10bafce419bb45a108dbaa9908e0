class Solution {
	ListNode reverseBetween(ListNode head, int m, int n) {
		if (head == null || head.next == null || m == n) {
			return head;
		}
		int tempNum = 1;
		ListNode currentHead = new ListNode(0);
		currentHead = head;
		ListNode leftPoint;
		while (tempNum != m) {
			currentHead = currentHead.next;
			tempNum++;
		}
		leftPoint = currentHead;
		ListNode rightPoint;
		while (tempNum != n) {
			currentHead = currentHead.next;
			tempNum++;
		}
		rightPoint = currentHead;
		int t;
		t = leftPoint.val;
		leftPoint.val = rightPoint.val;
		rightPoint.val = t;
		ListNode tempLeftCureent = leftPoint;
		ListNode tempRightCureent = rightPoint;
		while (leftPoint.next != rightPoint) {
			ListNode tempPoint = new ListNode(leftPoint.next.val);
			tempPoint.next = tempRightCureent;
			tempRightCureent = tempPoint;
			leftPoint = leftPoint.next;
		}
		tempLeftCureent.next = tempRightCureent;
		return head;
	}
}