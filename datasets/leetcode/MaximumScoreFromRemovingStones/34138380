class Solution {
	int countscore(PriorityQueue<Integer> maxhp) {
		int score = 0;
		while (maxhp.peek() > 0) {
			int a = maxhp.poll();
			if (maxhp.peek() > 0) {
				int b = maxhp.poll();
				maxhp.offer(a - 1);
				maxhp.offer(b - 1);
				score++;
			} 
			else {
				break;
			}
		}
		return score;
	}
	int maximumScore(int a, int b, int c) {
		PriorityQueue<Integer> maxhp = new PriorityQueue<>((m, n) -> {n - m});
		maxhp.offer(a);
		maxhp.offer(b);
		maxhp.offer(c);
		return countscore(maxhp);
	}
}