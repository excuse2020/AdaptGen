class Solution {
	int dfs(int[][] stones, int i, Map<Integer, List<Integer>> xMap, Map<Integer, List<Integer>> yMap, boolean[] moved) {
		if (moved[i]) {
			return 0;
		}
		moved[i] = true;
		int removing = 1;
		for (int j: xMap.get(stones[i][0])) {	
			if (j != i && (!moved[j])) {
				removing += dfs(stones,j,xMap,yMap,moved);
			}
		}
		for (int j: yMap.get(stones[i][1])) {	
			if (j != i && (!moved[j])) {
				removing += dfs(stones,j,xMap,yMap,moved);
			}
		}
		return removing;
	}
	int removeStones(int[][] stones) {
		Map<Integer, List<Integer>> xMap = new HashMap();
		Map<Integer, List<Integer>> yMap = new HashMap();
		for (int i = 0; i < stones.length; i++) {
			xMap.putIfAbsent(stones[i][0],new ArrayList());
			yMap.putIfAbsent(stones[i][1],new ArrayList());
			xMap.get(stones[i][0]).add(i);
			yMap.get(stones[i][1]).add(i);
		}
		int moves = 0;
		boolean[] moved = new boolean[stones.length];
		for (int i = 0; i < stones.length; i++) {
			moves += Math.max(dfs(stones,i,xMap,yMap,moved) - 1,0);
		}
		return moves;
	}
}