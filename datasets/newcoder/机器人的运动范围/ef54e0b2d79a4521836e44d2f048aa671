class Solution {
	int cal(int num) {
		int sum = 0;
		while (num > 0) {
			sum += num % 10;
			num /= 10;
		}
		return sum;
	}
	int movingCount(int threshold, int rows, int cols) {
		if (rows <= 0 || cols <= 0 || threshold < 0) {
			return 0;
		}
		boolean[][] isVisited = new boolean[rows][cols];
		int count = movingCountCore(threshold,rows,cols,0,0,isVisited);
		return count;
	}
	int movingCountCore(int threshold, int rows, int cols, int row, int col, boolean[][] isVisited) {
		if (row < 0 || col < 0 || row >= rows || col >= cols || isVisited[row][col] || cal(row) + cal(col) > threshold) {
			return 0;
		}
		isVisited[row][col] = true;
		int tem1 = movingCountCore(threshold,rows,cols,row - 1,col,isVisited);
		int tem2 = movingCountCore(threshold,rows,cols,row + 1,col,isVisited);
		int tem3 = movingCountCore(threshold,rows,cols,row,col - 1,isVisited);
		int tem4 = movingCountCore(threshold,rows,cols,row,col + 1,isVisited);
		return 1 + tem1;
	}
}