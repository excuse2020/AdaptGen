class Solution {
	int binarySearch(MountainArray mountainArr, int target, int start, int end, boolean ascending) {
		while (start <= end) {
			int mid = start + (end - start) / 2;
			int midValue = mountainArr.get(mid);
			if (midValue == target) {
				return mid;
			}
			if (ascending) {
				if (midValue < target) {
					start = mid + 1;
				} 
				else {
					end = mid - 1;
				}
			} 
			else {
				if (midValue > target) {
					start = mid + 1;
				} 
				else {
					end = mid - 1;
				}
			}
		}
		return -1;
	}
	int findInMountainArray(int target, MountainArray mountainArr) {
		int left = 0;
		int right = mountainArr.length() - 1;
		int peakIndex = findPeak(mountainArr,left,right);
		int result = binarySearch(mountainArr,target,left,peakIndex,true);
		if (result != -1) {
			return result;
		}
		return binarySearch(mountainArr,target,peakIndex + 1,right,false);
	}
	int findPeak(MountainArray mountainArr, int start, int end) {
		while (start < end) {
			int mid = start + (end - start) / 2;
			if (mountainArr.get(mid) < mountainArr.get(mid + 1)) {
				start = mid + 1;
			} 
			else {
				end = mid;
			}
		}
		return start;
	}
}