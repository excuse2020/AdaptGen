class Solution {
	boolean dfs(char[][] board, int i, int j, int count, String word) {
		if (count == word.length()) {
			return true;
		}
		if (i < 0 || j < 0 || i >= board.length || j >= board[0].length || board[i][j] != word.charAt(count)) {
			return false;
		}
		char temp = board[i][j];
	}
	List<String> findWords(char[][] board, String[] words) {
		List<String> ans = new ArrayList<>();
		for (String word: words) {	
			for (int i = 0; i < board.length; i++) {
				for (int j = 0; j < board[0].length; j++) {
					if (board[i][j] == word.charAt(0) && dfs(board,i,j,0,word)) {
						if (!ans.contains(word)) {
							ans.add(word);
						}
					}
				}
			}
		}
		return ans;
	}
}