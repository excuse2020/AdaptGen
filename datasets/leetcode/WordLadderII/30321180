class Solution {
	Map<String, Set<String>> backEdge;
	List<List<String>> res;
	void dfs(String start, String end, List<String> path) {
		if (start.equals(end)) {
			ArrayList<String> tmp = new ArrayList<>(path);
			Collections.reverse(tmp);
			res.add(tmp);
			return;
		}
		for (String v: backEdge.get(start)) {	
			path.add(v);
			dfs(v,end,path);
			path.remove(path.size() - 1);
		}
	}
	List<List<String>> findLadders(String start, String end, List<String> wordList) {
		Set<String> allowed = new HashSet<>(wordList);
		res = new ArrayList<>();
		Queue<String> q = new ArrayDeque<>();
		Map<String, Integer> dist = new HashMap<>();
		backEdge = new HashMap<>();
		dist.put(start,1);
		q.offer(start);
		String v = q.poll();
		if (v.equals(end)) {
			break;
		}
		int i = 0;
		StringBuilder sb = new StringBuilder(v);
		char c;
	}
}