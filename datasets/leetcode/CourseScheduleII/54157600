class Solution {
	int[] findOrder(int numCourses, int[][] prerequisites) {
		List<List<Integer>> graph = new ArrayList<>();
		int indegrees = new int[numCourses];
		for (int i = 0; i < numCourses; i++) {
			graph.add(new ArrayList<>());
		}
		for (int prerequisite: prerequisites) {	
			int course = prerequisite[0];
			int prereq = prerequisite[1];
			graph.get(prereq).add(course);
			indegrees[course]++;
		}
		Queue<Integer> q = new LinkedList<>();
		for (int i = 0; i < numCourses; i++) {
			if (indegrees[i] == 0) {
				q.add(i);
			}
		}
		int order = new int[numCourses];
		int index = 0;
		while (!q.isEmpty()) {
			int curr = q.remove();
			order[index++] = curr;
			for (int neighbor: graph.get(curr)) {	
				indegrees[neighbor]--;
				if (indegrees[neighbor] == 0) {
					q.add(neighbor);
				}
			}
		}
		if (index != numCourses) {
			return new int[0];
		}
		return order;
	}
}