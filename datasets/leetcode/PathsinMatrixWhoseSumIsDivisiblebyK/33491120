class Solution {
	int f(int i, int j, int sum, int k, int[][] grid, int[][][] dp) {
		if (i < 0 || j < 0 || i >= grid.length || j >= grid[0].length) {
			return 0;
		}
		sum = (sum + grid[i][j]) % k;
		if (i == grid.length - 1 && j == grid[0].length - 1 && sum == 0) {
			return 1;
		}
		if (dp[i][j][sum] != -1) {
			return dp[i][j][sum];
		}
		dp[i][j][sum] = (f(i + 1,j,sum,k,grid,dp) + f(i,j + 1,sum,k,grid,dp)) % 1000000007;
		return dp[i][j][sum];
	}
	int numberOfPaths(int[][] grid, int k) {
		int m = grid.length;
		int n = grid[0].length;
		int[][][] dp = new int[m][n][k];
		for (int[][] row: dp) {	
			for (int[] r: row) {	
				Arrays.fill(r,-1);
			}
		}
		return f(0,0,0,k,grid,dp);
	}
}