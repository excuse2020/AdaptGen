class Solution {
	boolean hasPath(List<List<Integer>> graph, int src, int dest, boolean vis) {
		if (src == dest) {
			return true;
		}
		vis[src] = true;
		for (int i = 0; i < graph.get(src).size(); i++) {
			int neighbor = graph.get(src).get(i);
			if (!vis[neighbor] && hasPath(graph,neighbor,dest,vis)) {
				return true;
			}
		}
		return false;
	}
	boolean validPath(int n, int[][] edges, int source, int destination) {
		List<List<Integer>> graph = new ArrayList<>();
		for (int i = 0; i < n; i++) {
			graph.add(new ArrayList<>());
		}
		for (int[] edge: edges) {	
			graph.get(edge[0]).add(edge[1]);
			graph.get(edge[1]).add(edge[0]);
		}
		return hasPath(graph,source,destination,new boolean[n]);
	}
}