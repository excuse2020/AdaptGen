class Solution {
	boolean Print(char[][] grid, int row, int col) {
		if (row == grid.length) {
			return true;
		}
		if (col == grid[0].length) {
			return Print(grid,row + 1,0);
		}
	}
	boolean isitsafe(char[][] grid, int row, int col, char val) {
		for (int i = 0; i < 9; i++) {
			if (grid[row][i] == val) {
				return false;
			}
		}
		for (int i = 0; i < 9; i++) {
			if (grid[i][col] == val) {
				return false;
			}
		}
		int r = row - row % 3;
		int c = col - col % 3;
		for (int i = r; i < r + 3; i++) {
			for (int j = c; j < c + 3; j++) {
				if (grid[i][j] == val) {
					return false;
				}
			}
		}
		return true;
	}
	void solveSudoku(char[][] grid) {
		Print(grid,0,0);
	}
}