class Solution {
	int[] colMaxAr(int ar) {
		int result = new int[ar.length];
		for (int i = 0; i < ar.length; i++) {
			int max = ar[0][i];
			for (int j = 1; j < ar.length; j++) {
				max = Math.max(max,ar[j][i]);
			}
			result[i] = max;
		}
		return result;
	}
	int maxIncreaseKeepingSkyline(int[][] grid) {
		int[] rowAr = rowMaxAr(grid);
		int[] colAr = colMaxAr(grid);
		int sum = 0;
		for (int i = 0; i < grid.length; i++) {
			for (int j = 0; j < grid[0].length; j++) {
				int min = Math.min(rowAr[i],colAr[j]);
				sum += min - grid[i][j];
			}
		}
		return sum;
	}
	int[] rowMaxAr(int ar) {
		int result = new int[ar.length];
		for (int i = 0; i < ar.length; i++) {
			int max = ar[i][0];
			for (int j = 1; j < ar.length; j++) {
				max = Math.max(max,ar[i][j]);
			}
			result[i] = max;
		}
		return result;
	}
}