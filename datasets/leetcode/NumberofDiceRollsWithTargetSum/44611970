class Solution {
	int helper(int n, int k, int target, int dp) {
		if (target == 0 && n == 0) {
			return 1;
		}
		if (target < 0 || n <= 0) {
			return 0;
		}
		int sum = 0;
		if (dp[n][target] != -1) {
			return dp[n][target];
		}
		for (int i = 1; i <= k; i++) {
			sum += helper(n - 1,k,target - i,dp);
			sum = sum % 1000000007;
		}
		return dp[n][target] = sum;
	}
	int numRollsToTarget(int n, int k, int target) {
		int dp = new int[n + 1][target + 1];
		for (int[] I: dp) {	
			Arrays.fill(I,-1);
		}
		dp[0][0] = 1;
		for (int i = 1; i < n; i++) {
			dp[i][0] = 0;
		}
		for (int i = 1; i <= target; i++) {
			dp[0][i] = 0;
		}
		for (int i = 1; i <= n; i++) {
			for (int j = 1; j <= target; j++) {
				int sum = 0;
				for (int p = 1; p <= k; p++) {
					if (j - p >= 0) {
						sum = (sum + dp[i - 1][j - p]) % 1000000007;
					}
				}
				dp[i][j] = sum;
			}
		}
		return dp[n][target];
	}
}