class Solution {
	String ReverseSentence(String str) {
		if (str.length() <= 0 || str == null) {
			return str;
		}
		int n = str.length();
		int i = 0;
		boolean flag = false;
		while (i < n) {
			if (str.charAt(i) != ' ') {
				flag = true;
			}
			i++;
		}
		if (!flag) {
			return str;
		}
		StringBuilder sb = trimSpace(str);
		reverse(sb,0,sb.length() - 1);
		reverseEachWords(sb);
		return sb.toString();
	}
	void reverse(StringBuilder sb, int left, int right) {
		while (left < right) {
			char temp = sb.charAt(left);
			sb.setCharAt(left,sb.charAt(right));
			sb.setCharAt(right,temp);
			left++;
			right--;
		}
	}
	void reverseEachWords(StringBuilder sb) {
		int start = 0, end = 0;
		int len = sb.length();
		while (end < len) {
			while (end < len && sb.charAt(end) != ' ') {
				end++;
			}
			reverse(sb,start,end - 1);
			start = end + 1;
			end++;
		}
	}
	StringBuilder trimSpace(String str) {
		int left = 0, right = str.length() - 1;
		while (left <= right && str.charAt(left) == ' ') {
			left++;
		}
		while (left <= right && str.charAt(right) == ' ') {
			right--;
		}
		StringBuilder sb = new StringBuilder();
		while (left <= right) {
			char ch = str.charAt(left);
			if (ch != ' ') {
				sb.append(ch);
			} 
			else if (sb.charAt(sb.length() - 1) != ' ') {
				sb.append(ch);
			}
			left++;
		}
		return sb;
	}
}