class Solution {
	int dfs(int[][] grid, int r, int c) {
		int m = grid.length;
		int n = grid[0].length;
		if (r < 0 || c < 0 || r >= m || c >= n || grid[r][c] == 0) {
			return 0;
		}
		int x = grid[r][c];
		grid[r][c] = 0;
		return x + dfs(grid,r - 1,c);
	}
	int findMaxFish(int[][] grid) {
		int fish = 0;
		for (int i = 0; i < grid.length; i++) {
			for (int j = 0; j < grid[0].length; j++) {
				if (grid[i][j] != 0) {
					fish = Math.max(fish,dfs(grid,i,j));
				}
			}
		}
		return fish;
	}
}