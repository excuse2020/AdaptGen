class Solution {
	int maxValueOfCoins(List<List<Integer>> piles, int k) {
		int n = piles.size();
		int[][] preSum = new int[n][k];
		int[] lens = new int[n];
		int i = 0;
		for (List<Integer> pile: piles) {	
			int j = 0;
			lens[i] = pile.size();
			for (int x: pile) {	
				preSum[i][j] = x;
				if (j != 0) {
					preSum[i][j] += preSum[i][j - 1];
				}
				j++;
				if (j >= k) {
					break;
				}
			}
			i++;
		}
		int[][] dp = new int[n][k + 1];
		for (i = 0; i < n; i++) {
			int m = Math.min(k,lens[i]);
			if (i != 0) {
				dp[i][0] = dp[i - 1][0];
			}
			for (int j = 1; j <= m; j++) {
				if (i == 0) {
					dp[i][j] = preSum[i][j - 1];
				} 
				else {
					dp[i][j] = dp[i - 1][j];
					for (int x = 1; x <= j; x++) {
						dp[i][j] = Math.max(dp[i][j],dp[i - 1][j - x] + preSum[i][x - 1]);
					}
				}
			}
			for (int j = m + 1; j <= k; j++) {
				if (i == 0) {
					dp[i][j] = dp[i][j - 1];
					continue;
				}
				dp[i][j] = dp[i - 1][j];
				for (int x = 1; x <= m; x++) {
					dp[i][j] = Math.max(dp[i][j],dp[i - 1][j - x] + preSum[i][x - 1]);
				}
			}
		}
		return dp[n - 1][k];
	}
}