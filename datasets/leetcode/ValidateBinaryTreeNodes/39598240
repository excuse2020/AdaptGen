class Solution {
	boolean dfs(int source, int[] leftChild, int[] rightChild, boolean[] visited) {
		visited[source] = true;
		int left = leftChild[source], right = rightChild[source];
		if (left >= 0) {
			if (visited[left] || !dfs(left,leftChild,rightChild,visited)) {
				return false;
			}
		}
		if (right >= 0) {
			if (visited[right] || !dfs(right,leftChild,rightChild,visited)) {
				return false;
			}
		}
		return true;
	}
	boolean validateBinaryTreeNodes(int n, int[] leftChild, int[] rightChild) {
		int[] indegree = new int[n];
		for (int i = 0; i < n; i++) {
			int l = leftChild[i], r = rightChild[i];
			if (l >= 0 && ++indegree[l] > 1) {
				return false;
			}
			if (r >= 0 && ++indegree[r] > 1) {
				return false;
			}
		}
		int root = -1;
		for (int i = 0; i < n; i++) {
			if (indegree[i] == 0) {
				if (root != -1) {
					return false;
				}
				root = i;
			}
		}
		if (root == -1) {
			return false;
		}
		boolean[] visited = new boolean[n];
		if (!dfs(root,leftChild,rightChild,visited)) {
			return false;
		}
		for (boolean v: visited) {	
			if (!v) {
				return false;
			}
		}
		return true;
	}
}