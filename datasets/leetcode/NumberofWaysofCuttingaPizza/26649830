class Solution {
	int M = 1000000007;
	void dfs(int[][] grid, int[][] cnt, long[][][] dp, int k, int x, int y) {
		if (k == 1 && cnt[x][y] > 0) {
			dp[x][y][k] = 1;
			return;
		}
		if (cnt[x][y] < k || k < 1) {
			return;
		}
		if (dp[x][y][k] != 0) {
			return;
		}
		int m = grid.length, n = grid[0].length;
		for (int i = x + 1; i < m; i++) {
			if (cnt[x][y] - cnt[i][y] == 0) {
				continue;
			}
			dfs(grid,cnt,dp,k - 1,i,y);
			dp[x][y][k] += dp[i][y][k - 1];
		}
		for (int j = y + 1; j < n; j++) {
			if (cnt[x][y] - cnt[x][j] == 0) {
				continue;
			}
			dfs(grid,cnt,dp,k - 1,x,j);
			dp[x][y][k] += dp[x][j][k - 1];
		}
		dp[x][y][k] %= M;
	}
	int ways(String[] pizza, int k) {
		int m = pizza.length, n = pizza[0].length();
		long[][][] dp = new long[m][n][k + 1];
		int[][] grid = new int[m][n];
		int[][] cnt = new int[m + 1][n + 1];
		int i = 0;
		String row = pizza[i];
		int j = 0;
	}
}