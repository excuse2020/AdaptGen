class Solution {
	int MLS(int[] arr) {
		if (arr.length <= 1) {
			return arr.length;
		}
		quickSort(arr,0,arr.length - 1);
		int max = 1;
		int cnt = 1;
		for (int i = 1; i < arr.length; i++) {
			if (arr[i - 1] == arr[i]) {
				continue;
			} 
			else if (arr[i - 1] + 1 == arr[i]) {
				cnt++;
				max = Math.max(max,cnt);
			} 
			else {
				cnt = 1;
			}
		}
		return max;
	}
	int partition(int[] arr, int left, int right) {
		int pivot = left;
		int index = pivot + 1;
		for (int i = index; i <= right; i++) {
			if (arr[i] <= arr[pivot]) {
				swap(arr,i,index);
				index++;
			}
		}
		swap(arr,index - 1,pivot);
		return index - 1;
	}
	void quickSort(int[] arr, int left, int right) {
		if (left < right) {
			int index = partition(arr,left,right);
			quickSort(arr,left,index - 1);
			quickSort(arr,index + 1,right);
		}
	}
	void swap(int[] arr, int i, int j) {
		int t = arr[i];
		arr[i] = arr[j];
		arr[j] = t;
	}
}