class Solution {
	int dfs(int start, int[][] graph, boolean[] visited) {
		visited[start] = true;
		int count = 1;
		int[] arr = graph[start];
		for (int i = 0; i < arr.length; i++) {
			if (visited[i] == false && graph[start][i] == 1) {
				count += dfs(i,graph,visited);
			}
		}
		return count;
	}
	int minMalwareSpread(int[][] graph, int[] initial) {
		Arrays.sort(initial);
		HashSet<Integer> hs = new HashSet<>();
		for (int i: initial) {	
			hs.add(i);
		}
		int infected = Integer.MAX_VALUE;
		int node = Integer.MAX_VALUE;
		int n = graph.length;
		for (int i: initial) {	
			int current = i;
			hs.remove(current);
			boolean[] visited = new boolean[n];
			int tempInfected = 0;
			for (int x: hs) {	
				if (visited[x] == false) {
					tempInfected += dfs(x,graph,visited);
				}
			}
			if (tempInfected < infected) {
				infected = tempInfected;
				node = current;
			}
			hs.add(current);
		}
		return node;
	}
}