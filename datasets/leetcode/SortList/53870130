class Solution {
	ListNode findMiddle(ListNode head) {
		ListNode fast = head.next, slow = head;
		while (fast != null && fast.next != null) {
			fast = fast.next.next;
			slow = slow.next;
		}
		return slow;
	}
	ListNode merge(ListNode l1, ListNode l2) {
		if (l1 == null) {
			return l2;
		}
		if (l2 == null) {
			return l1;
		}
		if (l1.val > l2.val) {
			ListNode temp = l1;
			l1 = l2;
			l2 = temp;
		}
		ListNode head = l1;
		while (l1 != null && l2 != null) {
			ListNode temp = l1;
			while (l1 != null && l1.val <= l2.val) {
				temp = l1;
				l1 = l1.next;
			}
			temp.next = l2;
			ListNode temp1 = l1;
			l1 = l2;
			l2 = temp1;
		}
		return head;
	}
	ListNode mergeSort(ListNode head) {
		if (head == null || head.next == null) {
			return head;
		}
		ListNode middle = findMiddle(head);
		ListNode leftHead = head;
		ListNode rightHead = middle.next;
		middle.next = null;
		leftHead = mergeSort(leftHead);
		rightHead = mergeSort(rightHead);
		return merge(leftHead,rightHead);
	}
	ListNode sortList(ListNode head) {
		head = mergeSort(head);
		return head;
	}
}