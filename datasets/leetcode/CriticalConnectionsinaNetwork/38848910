class Solution {
	int timer = 1;
	List<List<Integer>> criticalConnections(int n, List<List<Integer>> connections) {
		List<List<Integer>> adj = new ArrayList<>();
		for (int i = 0; i < n; i++) {
			adj.add(new ArrayList<>());
		}
		for (List<Integer> it: connections) {	
			int u = it.get(0);
			int v = it.get(1);
			adj.get(u).add(v);
			adj.get(v).add(u);
		}
		int vis = new int[n];
		int tim = new int[n];
		int low = new int[n];
		List<List<Integer>> bridges = new ArrayList<>();
		dfs(0,-1,adj,vis,tim,low,bridges);
		return bridges;
	}
	void dfs(int node, int parent, List<List<Integer>> adj, int[] vis, int[] tim, int[] low, List<List<Integer>> bridges) {
		vis[node] = 1;
		tim[node] = low[node] = timer;
		timer++;
		for (Integer it: adj.get(node)) {	
			if (it == parent) {
				continue;
			}
			if (vis[it] != 1) {
				dfs(it,node,adj,vis,tim,low,bridges);
				low[node] = Math.min(low[node],low[it]);
				if (low[it] > tim[node]) {
					bridges.add(Arrays.asList(it,node));
				}
			} 
			else {
				low[node] = Math.min(low[node],low[it]);
			}
		}
	}
}