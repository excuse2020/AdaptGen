class Solution {
	int closestMeetingNode(int[] edges, int node1, int node2) {
		int n = edges.length;
		int[] distance1 = new int[n];
		int[] distance2 = new int[n];
		Arrays.fill(distance1,-1);
		Arrays.fill(distance2,-1);
		getDistance(distance1,node1,edges);
		getDistance(distance2,node2,edges);
		int res = -1, max = Integer.MAX_VALUE;
		for (int i = 0; i < n; i++) {
			if (distance1[i] != -1 && distance2[i] != -1) {
				if (max > Math.max(distance1[i],distance2[i])) {
					max = Math.max(distance1[i],distance2[i]);
					res = i;
				}
			}
		}
		return res;
	}
	void getDistance(int[] distance, int node, int[] edges) {
		int cur = node;
		int step = 0;
		while (cur != -1 && distance[cur] == -1) {
			distance[cur] = step++;
			cur = edges[cur];
		}
	}
}