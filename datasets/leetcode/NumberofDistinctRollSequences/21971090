class Solution {
	int[][][] memo;
	List<Integer>[][] next;
	int count(int n, int x, int y) {
		if (n == 0) {
			return 1;
		}
		if (memo[x][y][n] != 0) {
			return memo[x][y][n];
		}
		List<Integer> validNext = next[x][y];
		int sum = 0;
		for (int z: validNext) {	
			sum += count(n - 1,y,z);
			sum %= 1000000007;
		}
		memo[x][y][n] = sum;
		return sum;
	}
	int distinctSequences(int n) {
		next = new ArrayList[7][7];
		for (int i = 0; i <= 6; i++) {
			for (int j = 0; j <= 6; j++) {
				next[i][j] = getValidNext(i,j);
			}
		}
		memo = new int[7][7][10001];
		return count(n,0,0);
	}
	List<Integer> getValidNext(int last1, int last2) {
		List<Integer> arr = new ArrayList<>();
		for (int i = 1; i <= 6; i++) {
			if (last1 == 0 && last2 == 0) {
				arr.add(i);
			} 
			else if (i == last1 || i == last2) {
				continue;
			} 
			else if ((last2 & 1) == 0 && (i & 1) == 0) {
				continue;
			} 
			else if ((last2 == 3 || last2 == 6) && (i == 3 || i == 6)) {
				continue;
			} 
			else {
				arr.add(i);
			}
		}
		return arr;
	}
}