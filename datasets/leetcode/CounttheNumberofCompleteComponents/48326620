class Solution {
	int b = 0;
	boolean[] vis, again;
	void count(ArrayList<Integer>[] graph, int n) {
		again[n] = true;
		b++;
		for (int i: graph[n]) {	
			if (!again[i]) {
				count(graph,i);
			}
		}
	}
	int countCompleteComponents(int n, int[][] edges) {
		vis = new boolean[n];
		again = new boolean[n];
		ArrayList<Integer>[] graph = new ArrayList[n];
		for (int i = 0; i < n; i++) {
			graph[i] = new ArrayList();
		}
		for (int[] i: edges) {	
			graph[i[0]].add(i[1]);
			graph[i[1]].add(i[0]);
		}
		int ans = 0;
		for (int i = 0; i < n; i++) {
			if (!vis[i]) {
				int a = dfs(graph,i) / 2;
				count(graph,i);
				if (a == ((b * (b - 1)) / 2)) {
					ans++;
				}
				b = 0;
			}
		}
		return ans;
	}
	int dfs(ArrayList<Integer>[] graph, int n) {
		vis[n] = true;
		int k = 0;
		for (int i: graph[n]) {	
			k++;
			if (!vis[i]) {
				k += dfs(graph,i);
			}
		}
		return k;
	}
}