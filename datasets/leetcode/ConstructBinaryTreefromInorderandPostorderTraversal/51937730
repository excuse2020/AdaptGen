class Solution {
	TreeNode buildTree(int[] inorder, int[] postorder) {
		if (inorder.length == 0 || postorder.length == 0) {
			return null;
		}
		TreeNode root = new TreeNode(postorder[postorder.length - 1]);
		int rootIndex = findRootIndex(inorder,postorder[postorder.length - 1]);
		int[] leftInorder = getSubArray(inorder,0,rootIndex - 1);
		int[] rightInorder = getSubArray(inorder,rootIndex + 1,inorder.length - 1);
		int[] leftPostorder = getSubArray(postorder,0,rootIndex - 1);
		int[] rightPostorder = getSubArray(postorder,rootIndex,postorder.length - 2);
		root.left = buildTree(leftInorder,leftPostorder);
		root.right = buildTree(rightInorder,rightPostorder);
		return root;
	}
	int findRootIndex(int[] arr, int val) {
		for (int i = 0; i < arr.length; i++) {
			if (arr[i] == val) {
				return i;
			}
		}
		return 0;
	}
	int[] getSubArray(int[] arr, int start, int end) {
		int len = end - start + 1, i = 0;
		int[] result = new int[len];
		while (start <= end) {
			result[i] = arr[start];
			start++;
			i++;
		}
		return result;
	}
}