class Solution {
	ListNode Merge(ListNode list1, ListNode list2) {
		if (list1 == null) {
			return list2;
		}
		if (list2 == null) {
			return list1;
		}
		ListNode head = new ListNode(-1);
		ListNode cur = head;
		while (list1 != null && list2 != null) {
			if (list1.val <= list2.val) {
				cur.next = list1;
				list1 = list1.next;
			} 
			else {
				cur.next = list2;
				list2 = list2.next;
			}
			cur = cur.next;
		}
		if (list1 != null) {
			cur.next = list1;
		} 
		else {
			cur.next = list2;
		}
		return head.next;
	}
	ListNode divideMerge(ArrayList<ListNode> lists, int left, int right) {
		if (left > right) {
			return null;
		} 
		else if (left == right) {
			return lists.get(left);
		}
		int mid = (left + right) / 2;
		return Merge(divideMerge(lists,left,mid),divideMerge(lists,mid + 1,right));
	}
	ListNode mergeKLists(ArrayList<ListNode> lists) {
		return divideMerge(lists,0,lists.size() - 1);
	}
}