class Solution {
	boolean isBipatiteDFS(int i, List<List<Integer>> adj, int currentcolor, int[] color) {
		color[i] = currentcolor;
		for (int v: adj.get(i)) {	
			if (color[v] == -1 && !isBipatiteDFS(v,adj,1 - currentcolor,color)) {
				return false;
			} 
			else {
				if (color[v] == currentcolor) {
					return false;
				}
			}
		}
		return true;
	}
	boolean possibleBipartition(int n, int[][] dislikes) {
		List<List<Integer>> adj = new ArrayList<>();
		boolean ans = false;
		int[] color = new int[n + 1];
		int currentcolor = 1;
		for (int i = 0; i <= n; i++) {
			adj.add(new ArrayList<>());
			color[i] = -1;
		}
		for (int i = 0; i < dislikes.length; i++) {
			adj.get(dislikes[i][0]).add(dislikes[i][1]);
			adj.get(dislikes[i][1]).add(dislikes[i][0]);
		}
		for (int i = 0; i <= n; i++) {
			if (color[i] == -1) {
				ans = isBipatiteDFS(i,adj,currentcolor,color);
			}
			if (ans == false) {
				return false;
			}
		}
		return ans;
	}
}