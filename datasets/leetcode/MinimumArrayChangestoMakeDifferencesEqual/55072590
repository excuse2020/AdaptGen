class Solution {
	int minChanges(int[] nums, int k) {
		int n = nums.length;
		Map<Integer, Integer> zeros = new HashMap<>();
		Map<Integer, Integer> twos = new HashMap<>();
		for (int i = 0; i < nums.length / 2; i++) {
			zeros.put(Math.abs(nums[i] - nums[n - i - 1]),zeros.getOrDefault(Math.abs(nums[i] - nums[n - i - 1]),0) + 1);
			int two = 0;
			if (nums[n - i - 1] > nums[i]) {
				int v = Math.max(nums[n - i - 1] - 0,k - nums[i]);
				two = Math.max(two,v);
			} 
			else {
				int v = Math.max(nums[i] - 0,k - nums[n - i - 1]);
				two = Math.max(two,v);
			}
			twos.put(two,twos.getOrDefault(two,0) + 1);
		}
		int ans = nums.length / 2;
		int twoInterval = 0;
		for (int i = 0; i <= k; i++) {
			if (twos.containsKey(i - 1)) {
				twoInterval += twos.get(i - 1);
			}
			int total = nums.length / 2;
			if (zeros.containsKey(i)) {
				total -= zeros.get(i);
			}
			total += twoInterval;
			ans = Math.min(ans,total);
		}
		return ans;
	}
}