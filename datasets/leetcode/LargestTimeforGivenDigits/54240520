class Solution {
	String getOutput(int[] freq) {
		for (int i = 23; i >= 0; i--) {
			for (int j = 59; j >= 0; j--) {
				int hour1 = i / 10;
				int hour2 = i % 10;
				int min1 = j / 10;
				int min2 = j % 10;
				int[] cpy = freq.clone();
				if (cpy[hour1] > 0) {
					cpy[hour1]--;
					if (cpy[hour2] > 0) {
						cpy[hour2]--;
						if (cpy[min1] > 0) {
							cpy[min1]--;
							if (cpy[min2] > 0) {
								return String.format("%02d:%02d",i,j);
							}
						}
					}
				}
			}
		}
		return "";
	}
	String largestTimeFromDigits(int[] arr) {
		int[] freq = new int[10];
		for (int i = 0; i < arr.length; i++) {
			freq[arr[i]]++;
		}
		return getOutput(freq);
	}
}