class Solution {
	int mod = (int) 1e9 + 7;
	int count(int i, int j, int m, int n, long sum, int k, int[][] grid, int[][][] memo) {
		if (i == m || j == n) {
			return 0;
		}
		if (i == m - 1 && j == n - 1) {
			sum += grid[i][j];
			if (sum % k == 0) {
				return 1;
			}
			return 0;
		}
		if (memo[i][j][(int)sum % k] != -1) {
			return memo[i][j][(int)sum % k];
		}
		return memo[i][j][(int)sum % k] = (count(i + 1,j,m,n,sum + grid[i][j],k,grid,memo) + count(i,j + 1,m,n,sum + grid[i][j],k,grid,memo)) % mod;
	}
	int numberOfPaths(int[][] grid, int k) {
		int m = grid.length;
		int n = grid[0].length;
		int memo = new int[m][n][k];
		for (int i = 0; i < m; i++) {
			for (int j = 0; j < n; j++) {
				for (int l = 0; l < k; l++) {
					memo[i][j][l] = -1;
				}
			}
		}
		return count(0,0,m,n,0,k,grid,memo) % mod;
	}
}