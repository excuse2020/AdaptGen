class Solution {
	int num = 0;
	void dfs(char[][] grid, int x, int y) {
		int rows = grid.length;
		int cols = grid[0].length;
		if (isValid(x - 1,y,rows,cols) && grid[x - 1][y] == '1') {
			grid[x - 1][y] = '#';
			dfs(grid,x - 1,y);
		}
		if (isValid(x,y + 1,rows,cols) && grid[x][y + 1] == '1') {
			grid[x][y + 1] = '#';
			dfs(grid,x,y + 1);
		}
		if (isValid(x + 1,y,rows,cols) && grid[x + 1][y] == '1') {
			grid[x + 1][y] = '#';
			dfs(grid,x + 1,y);
		}
		if (isValid(x,y - 1,rows,cols) && grid[x][y - 1] == '1') {
			grid[x][y - 1] = '#';
			dfs(grid,x,y - 1);
		}
	}
	boolean isValid(int x, int y, int rows, int cols) {
		return x >= 0 && x < rows && y >= 0 && y < cols;
	}
	int solve(char[][] grid) {
		if (grid == null || grid.length == 0 || grid[0].length == 0) {
			return -1;
		}
		int rows = grid.length;
		int cols = grid[0].length;
		for (int i = 0; i < rows; i++) {
			for (int j = 0; j < cols; j++) {
				if (grid[i][j] == '1') {
					grid[i][j] = '#';
					dfs(grid,i,j);
					num++;
				}
			}
		}
		return num;
	}
}