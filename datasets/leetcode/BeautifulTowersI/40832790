class Solution {
	long maxSum(List<Integer> maxHeights, int maxiInd) {
		long sum = 0;
		int n = maxHeights.size();
		int lastMax = maxHeights.get(maxiInd);
		sum = maxHeights.get(maxiInd);
		for (int i = maxiInd - 1; i >= 0; i--) {
			if (maxHeights.get(i) < lastMax) {
				lastMax = maxHeights.get(i);
			}
			sum += lastMax;
		}
		lastMax = maxHeights.get(maxiInd);
		for (int i = maxiInd + 1; i < n; i++) {
			if (maxHeights.get(i) < lastMax) {
				lastMax = maxHeights.get(i);
			}
			sum += lastMax;
		}
		return sum;
	}
	long maximumSumOfHeights(List<Integer> maxHeights) {
		int n = maxHeights.size();
		int maxi = 0;
		int maxiInd = 0;
		long res = 0;
		for (int i = 0; i < n; i++) {
			maxi = maxHeights.get(i);
			maxiInd = i;
			res = Math.max(res,maxSum(maxHeights,maxiInd));
		}
		return res;
	}
}