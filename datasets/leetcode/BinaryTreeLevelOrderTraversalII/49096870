class Solution {
	List<List<Integer>> levelOrderBottom(TreeNode root) {
		Deque<List<Integer>> stack = new ArrayDeque<>();
		Queue<TreeNode> queue = new ArrayDeque<>();
		if (root != null) {
			queue.add(root);
		}
		while (!queue.isEmpty()) {
			int levelSize = queue.size();
			List<Integer> levelValues = new LinkedList<>();
			while (levelSize-- > 0) {
				TreeNode current = queue.poll();
				levelValues.add(current.val);
				if (current.left != null) {
					queue.add(current.left);
				}
				if (current.right != null) {
					queue.add(current.right);
				}
			}
			stack.addFirst(levelValues);
		}
		List<List<Integer>> result = new LinkedList<>();
		while (!stack.isEmpty()) {
			List<Integer> level = stack.removeFirst();
			result.add(level);
		}
		return result;
	}
}