class Solution {
	int[] findOriginalArray(int[] changed) {
		if (changed.length % 2 != 0) {
			return new int[0];
		}
		Arrays.sort(changed);
		int n = changed.length;
		int[] result = new int[n / 2];
		Map<Integer, Integer> map = new HashMap<>();
		for (int a: changed) {	
			map.put(a,map.getOrDefault(a,0) + 1);
		}
		int counter = 0;
		for (int i = 0; i < n; i++) {
			int value = changed[i];
			int doubleValue = changed[i] * 2;
			if (!map.containsKey(value) || map.get(value) == 0) {
				continue;
			}
			if (counter == n / 2 || !map.containsKey(doubleValue) || map.get(doubleValue) == 0) {
				return new int[0];
			}
			result[counter++] = changed[i];
			map.put(value,map.getOrDefault(value,0) - 1);
			map.put(doubleValue,map.getOrDefault(doubleValue,0) - 1);
		}
		return result;
	}
}