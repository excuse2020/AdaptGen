class Solution {
	int[] countSubTrees(int n, int[][] edges, String labels) {
		int[] alph = new int[26];
		int[] ans = new int[n];
		List<Integer>[] subtrees = newList(n);
		for (int[] edge: edges) {	
			subtrees[edge[0]].add(edge[1]);
			subtrees[edge[1]].add(edge[0]);
		}
		dfs(0,n,alph,subtrees,ans,labels);
		return ans;
	}
	void dfs(int node, int parent, int[] alph, List<Integer>[] subtrees, int[] ans, String labels) {
		int c;
	}
	List<Integer>[] newList(int n) {
		List<Integer>[] ans = new ArrayList[n];
		for (int i = 0; i < n; i++) {
			ans[i] = new ArrayList<>();
		}
		return ans;
	}
}