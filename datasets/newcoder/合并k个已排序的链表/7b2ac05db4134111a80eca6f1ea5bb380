class Solution {
	ListNode merge(ArrayList<ListNode> lists, int left, int right) {
		if (left > right) {
			return null;
		}
		if (left == right) {
			return lists.get(left);
		}
		int mid = (left + right) / 2;
		return mergeTwo(merge(lists,left,mid),merge(lists,mid + 1,right));
	}
	ListNode mergeKLists(ArrayList<ListNode> lists) {
		return merge(lists,0,lists.size() - 1);
	}
	ListNode mergeTwo(ListNode pHead1, ListNode pHead2) {
		ListNode head = new ListNode(-1);
		ListNode cur = head;
		while (pHead1 != null && pHead2 != null) {
			if (pHead1.val <= pHead2.val) {
				cur.next = pHead1;
				pHead1 = pHead1.next;
			} 
			else {
				cur.next = pHead2;
				pHead2 = pHead2.next;
			}
			cur = cur.next;
		}
		if (pHead1 != null) {
			cur.next = pHead1;
		} 
		else {
			cur.next = pHead2;
		}
		return head.next;
	}
}