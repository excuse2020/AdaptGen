class Solution {
	List<TreeNode> findPath(TreeNode root, TreeNode p) {
		if (root == null) {
			return new ArrayList<>();
		}
		if (root.val == p.val) {
			List<TreeNode> ar = new ArrayList<>();
			ar.add(root);
			return ar;
		}
		if (root.val > p.val) {
			List<TreeNode> lc = findPath(root.left,p);
			if (lc.size() != 0) {
				lc.add(root);
				return lc;
			}
		}
		if (root.val < p.val) {
			List<TreeNode> rc = findPath(root.right,p);
			if (rc.size() != 0) {
				rc.add(root);
				return rc;
			}
		}
		return new ArrayList<>();
	}
	TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
		if (root == null) {
			return null;
		}
		List<TreeNode> ar1 = findPath(root,p);
		List<TreeNode> ar2 = findPath(root,q);
		if (ar1.size() == 0 || ar2.size() == 0) {
			return null;
		}
		int i = ar1.size() - 1, j = ar2.size() - 1;
		while (i >= 0 && j >= 0 && ar1.get(i).val == ar2.get(j).val) {
			i--;
			j--;
		}
		return ar1.get(i + 1);
	}
}