class Solution {
	boolean isCompleteTree(TreeNode root) {
		List<TreeNode> tovisit = new ArrayList<TreeNode>();
		tovisit.add(root);
		List<TreeNode> nodes = new ArrayList<TreeNode>();
		while (!tovisit.isEmpty()) {
			List<TreeNode> next = new ArrayList<TreeNode>();
			for (TreeNode node: tovisit) {	
				nodes.add(node);
				if (node.right != null && node.left == null) {
					return false;
				}
				if (node.left != null) {
					next.add(node.left);
				}
				if (node.right != null) {
					next.add(node.right);
				}
			}
			tovisit = next;
		}
		int i = 0, n = nodes.size();
		for (TreeNode node: nodes) {	
			if (2 * i + 1 < n && node.left != nodes.get(2 * i + 1)) {
				return false;
			}
			if (2 * i + 2 < n && node.right != nodes.get(2 * i + 2)) {
				return false;
			}
			i++;
		}
		return true;
	}
}