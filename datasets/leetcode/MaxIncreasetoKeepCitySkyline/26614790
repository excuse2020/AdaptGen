class Solution {
	int maxIncreaseKeepingSkyline(int[][] g) {
		int[][] p = new int[g.length][2];
		int m = 0;
		for (int i = 0; i < g.length; i++) {
			m = g[i][0];
			for (int j = 1; j < g.length; j++) {
				if (m < g[i][j]) {
					m = g[i][j];
				}
			}
			p[i][1] = m;
			m = g[0][i];
			for (int j = 1; j < g.length; j++) {
				if (m < g[j][i]) {
					m = g[j][i];
				}
			}
			p[i][0] = m;
		}
		int c = 0;
		for (int i = 0; i < g.length; i++) {
			for (int j = 0; j < g.length; j++) {
				System.out.println(Math.min(p[i][0],p[j][1]));
				c += Math.min(p[i][0],p[j][1]) - g[i][j];
			}
		}
		return c;
	}
}