class Solution {
	String buildString(int v1, int v2, int v3, int v4) {
		char[] chrs = new char[5];
	}
	int[] countDigits(int[] nums) {
		int[] count = new int[10];
		for (int num: nums) {	
			count[num]++;
		}
		return count;
	}
	int countGreaterThan(int[] count, int from) {
		int total = 0;
		while (++from < count.length) {
			total += count[from];
		}
		return total;
	}
	String getHours(int[] count) {
		int firstDigit = getMaxFromCount(count,2);
		if (firstDigit == -1) {
			return "";
		}
		int secondDigit = firstDigit == 2 ? getMaxFromCount(count,3) : getMaxFromCount(count,9);
		if (secondDigit == -1) {
			return "";
		}
		char[] chrs = new char[2];
	}
	int getMaxFromCount(int[] count, int max) {
		while (max >= 0) {
			if (count[max] > 0) {
				count[max]--;
				break;
			}
			max--;
		}
		return max;
	}
	String getMinutes(int[] count) {
		int firstDigit = getMaxFromCount(count,5);
		if (firstDigit == -1) {
			return "";
		}
		int secondDigit = getMaxFromCount(count,9);
		if (secondDigit == -1) {
			return "";
		}
		char[] chrs = new char[2];
	}
	String getMixedDigits(int[] count) {
		int rightLow = getMaxFromCount(count,5);
		int leftLow = getMaxFromCount(count,rightLow);
		if (leftLow >= 2) {
			return "";
		} 
		else if (rightLow == 1) {
			return buildString(rightLow,getMaxFromCount(count,9),leftLow,getMaxFromCount(count,9));
		} 
		else {
			return buildString(leftLow,getMaxFromCount(count,9),rightLow,getMaxFromCount(count,9));
		}
	}
	String getOrderedDigits(int[] count) {
		StringBuilder largestTime = new StringBuilder(5);
		largestTime.append(getHours(count));
	}
	String largestTimeFromDigits(int[] arr) {
		int[] count = countDigits(arr);
		int countGreaterThanFive = countGreaterThan(count,5);
		String largest = "";
		if (countGreaterThanFive == 2) {
			largest = getMixedDigits(count);
		} 
		else if (countGreaterThanFive < 2) {
			largest = getOrderedDigits(count);
		}
		return largest;
	}
}