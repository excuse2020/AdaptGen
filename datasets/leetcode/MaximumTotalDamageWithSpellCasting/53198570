class Solution {
	long maximumTotalDamage(int[] power) {
		Map<Integer, Long> freq = new HashMap<>();
		for (int p: power) {	
			freq.put(p,freq.getOrDefault(p,0L) + 1);
		}
		List<Integer> uniqueKeys = new ArrayList<>(freq.keySet());
		Collections.sort(uniqueKeys);
		int n = uniqueKeys.size();
		long[] dp = new long[n];
		dp[0] = uniqueKeys.get(0) * freq.get(uniqueKeys.get(0));
		for (int i = 1; i < n; i++) {
			int key = uniqueKeys.get(i);
			long currentDamage = key * freq.get(key);
			dp[i] = dp[i - 1];
			int j = i - 1;
			while (j >= 0 && (uniqueKeys.get(j) == key - 1 || uniqueKeys.get(j) == key - 2 || uniqueKeys.get(j) == key + 1 || uniqueKeys.get(j) == key + 2)) {
				j--;
			}
			if (j >= 0) {
				dp[i] = Math.max(dp[i],dp[j] + currentDamage);
			} 
			else {
				dp[i] = Math.max(dp[i],currentDamage);
			}
		}
		return dp[n - 1];
	}
}