class Solution {
	int closestMeetingNode(int[] edges, int node1, int node2) {
		int dist_node1 = new int[edges.length];
		Arrays.fill(dist_node1,-1);
		int dist_node2 = new int[edges.length];
		Arrays.fill(dist_node2,-1);
		boolean visited1 = new boolean[edges.length];
		boolean visited2 = new boolean[edges.length];
		dfs(node1,dist_node1,visited1,edges,0);
		dfs(node2,dist_node2,visited2,edges,0);
		int ans = edges.length;
		int result = -1;
		for (int i = 0; i < edges.length; i++) {
			if (dist_node1[i] != -1 && dist_node2[i] != -1) {
				if (Math.max(dist_node1[i],dist_node2[i]) < ans) {
					ans = Math.max(dist_node1[i],dist_node2[i]);
					result = i;
				}
			}
		}
		return result;
	}
	void dfs(int node, int[] dist_node1, boolean[] visited, int[] edges, int distance) {
		if (node != -1 && !visited[node]) {
			visited[node] = true;
			dist_node1[node] = distance;
			dfs(edges[node],dist_node1,visited,edges,distance + 1);
		}
	}
}