class Solution {
	int minSumOfLengths(int[] arr, int target) {
		int i = 0, j = 0;
		int sum = 0;
		int len = arr.length;
		int[] start = new int[len];
		int[] end = new int[len];
		while (i <= len && j <= len) {
			if (sum == target) {
				var size = j - i;
				start[i] = size;
				end[j - 1] = size;
			}
			if (sum > target) {
				if (i < len) {
					sum -= arr[i];
				}
				i++;
			} 
			else {
				if (j < len) {
					sum += arr[j];
				}
				j++;
			}
		}
		int[] prefix = new int[len];
		for (int k = 1; k < len; k++) {
			if (prefix[k - 1] == 0) {
				prefix[k] = end[k - 1];
			} 
			else if (end[k - 1] == 0) {
				prefix[k] = prefix[k - 1];
			} 
			else {
				prefix[k] = Math.min(prefix[k - 1],end[k - 1]);
			}
		}
		int[] suffix = new int[len];
		for (int k = len; k > 0; k--) {
			if (k == len || suffix[k] == 0) {
				suffix[k - 1] = start[k - 1];
			} 
			else if (start[k - 1] == 0) {
				suffix[k - 1] = suffix[k];
			} 
			else {
				suffix[k - 1] = Math.min(start[k - 1],suffix[k]);
			}
		}
		int answer = -1;
		for (int k = 0; k < len; k++) {
			if (prefix[k] != 0 && suffix[k] != 0) {
				var sumOfLength = prefix[k] + suffix[k];
				if (answer == -1) {
					answer = sumOfLength;
				} 
				else {
					answer = Math.min(answer,sumOfLength);
				}
			}
		}
		return answer;
	}
}