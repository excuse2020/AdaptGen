class Solution {
	int ans = -1;
	void dfs(int node, int parent, ArrayList<ArrayList<Integer>> adj, int vis, int count, Map<Integer, Integer> map) {
		vis[node] = 1;
		map.put(node,count);
		for (int it: adj.get(node)) {	
			if (map.containsKey(it)) {
				ans = Math.max(ans,count - map.get(it) + 1);
			}
			if (vis[it] == 0) {
				dfs(it,parent,adj,vis,count + 1,map);
			}
		}
	}
	int longestCycle(int[] edges) {
		if (edges.length == 0) {
			return 0;
		}
		ArrayList<ArrayList<Integer>> adj = new ArrayList<>();
		for (int i = 0; i < edges.length; i++) {
			adj.add(new ArrayList<>());
		}
		for (int i = 0; i < edges.length; i++) {
			if (edges[i] != -1) {
				adj.get(i).add(edges[i]);
			}
		}
		int n = edges.length;
		int vis = new int[n];
		for (int i = 0; i < n; i++) {
			Map<Integer, Integer> map = new HashMap<>();
			if (vis[i] == 0) {
				dfs(i,i,adj,vis,1,map);
			}
		}
		return ans;
	}
}