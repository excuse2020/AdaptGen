class Solution {
	int ans = 0;
	int dfs(int vertex, char p, HashMap<Integer, List<Integer>> tree, String s) {
		int max1 = 0;
		int max2 = 0;
		for (int i: tree.get(vertex)) {	
			int cur = dfs(i,s.charAt(i),tree,s);
			if (p == s.charAt(i)) {
				continue;
			}
			if (cur > max1) {
				max2 = max1;
				max1 = cur;
			} 
			else if (cur > max2) {
				max2 = cur;
			}
		}
		ans = Math.max(ans,max1 + max2);
		return max1 + 1;
	}
	int longestPath(int[] parent, String s) {
		HashMap<Integer, List<Integer>> tree = new HashMap<>();
		int n = parent.length;
		for (int i = 0; i < n; i++) {
			tree.put(i,new ArrayList<>());
		}
		for (int i = 1; i < n; i++) {
			tree.get(parent[i]).add(i);
		}
		char c = s.charAt(0);
		dfs(0,c,tree,s);
		return ans;
	}
}