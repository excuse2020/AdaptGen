class Solution {
	Integer[][][] dp = null;
	int[][] grid;
	int cherryPickup(int[][] grid) {
		this.grid = grid;
		dp = new Integer[grid.length][grid[0].length][grid[0].length];
		return solve(0,0,grid[0].length - 1);
	}
	int solve(int i, int j1, int j2) {
		if (j1 < 0 || j1 == grid[0].length || j2 < 0 || j2 == grid[0].length) {
			return 0;
		} 
		else if (dp[i][j1][j2] != null) {
			return dp[i][j1][j2];
		}
		int sol = 0;
		if (i < grid.length - 1) {
			sol = solve(i + 1,j1,j2 + 1);
			sol = Math.max(sol,solve(i + 1,j1,j2 - 1));
			sol = Math.max(sol,solve(i + 1,j1,j2));
			sol = Math.max(sol,solve(i + 1,j1 + 1,j2 + 1));
			sol = Math.max(sol,solve(i + 1,j1 + 1,j2 - 1));
			sol = Math.max(sol,solve(i + 1,j1 + 1,j2));
			sol = Math.max(sol,solve(i + 1,j1 - 1,j2 + 1));
			sol = Math.max(sol,solve(i + 1,j1 - 1,j2 - 1));
			sol = Math.max(sol,solve(i + 1,j1 - 1,j2));
		}
		dp[i][j1][j2] = sol + grid[i][j1];
		return dp[i][j1][j2];
	}
}