class Solution {
	long[][] cache;
	int mod = 1_000_000_007;
	int countPaths(int[][] grid) {
		long sum = 0;
		cache = new long[grid.length][grid[0].length];
		for (int i = 0; i < grid.length; i++) {
			for (int j = 0; j < grid[0].length; j++) {
				sum += dfs(grid,i,j,0);
				sum %= mod;
			}
		}
		return (int) sum;
	}
	long dfs(int[][] grid, int row, int col, int prev) {
		if (row < 0 || row >= grid.length || col < 0 || col >= grid[0].length || grid[row][col] == 0 || grid[row][col] <= prev) {
			return 0;
		}
		if (cache[row][col] != 0) {
			return cache[row][col];
		}
		long sum = 1;
		int temp = grid[row][col];
		grid[row][col] = 0;
		sum += dfs(grid,row - 1,col,temp);
		sum += dfs(grid,row + 1,col,temp);
		sum += dfs(grid,row,col + 1,temp);
		sum += dfs(grid,row,col - 1,temp);
		sum %= mod;
		grid[row][col] = temp;
		cache[row][col] = sum;
		return sum;
	}
}