class Solution {
	int getDestination(int[][] board, int j) {
		int n = board.length;
		int r = n - 1;
		int c = (n - r) % 2 != 0 ? (j - 1) % n : n - 1;
		int dest = board[r][c];
		if (dest == -1) {
			return j;
		}
		return dest;
	}
	int snakesAndLadders(int[][] board) {
		int n = board.length;
		Queue<Integer> q = new LinkedList<>();
		boolean[] visited = new boolean[n * n + 1];
		q.offer(1);
		int moves = 0;
		while (!q.isEmpty()) {
			int size = q.size();
			for (int i = 0; i < size; i++) {
				int curr = q.poll();
				if (curr == n * n) {
					return moves;
				}
				for (int j = curr + 1; j <= Math.min(curr + 6,n * n); j++) {
					int dest = getDestination(board,j);
					if (!visited[dest]) {
						visited[dest] = true;
						q.offer(dest);
					}
				}
			}
			moves++;
		}
		return -1;
	}
}