class Solution {
	List<List<Integer>> ans = new ArrayList<List<Integer>>();
	void backtrack(int index, List<Integer> temp, int[] candidates, int target) {
		if (target == 0) {
			if (!ans.contains(new ArrayList<Integer>(temp))) {
				ans.add(new ArrayList<Integer>(temp));
			}
			return;
		}
		if (target < 0) {
			return;
		}
		for (int i = index; i < candidates.length; i++) {
			if (i > index && candidates[i] == candidates[i - 1]) {
				continue;
			}
			temp.add(candidates[i]);
			backtrack(i + 1,temp,candidates,target - candidates[i]);
			temp.remove(temp.size() - 1);
		}
	}
	List<List<Integer>> combinationSum2(int[] candidates, int target) {
		Arrays.sort(candidates);
		backtrack(0,new ArrayList<Integer>(),candidates,target);
		return ans;
	}
}