class Solution {
	TreeNode Convert(TreeNode pRootOfTree) {
	}
	TreeNode ConvertSubTreeLeft(TreeNode root) {
		if (root.left != null) {
			TreeNode leftSubTreeRightHead = ConvertSubTreeLeft(root.left);
			leftSubTreeRightHead.right = root;
			root.left = leftSubTreeRightHead;
		}
		if (root.right != null) {
			TreeNode rightSubTreeLeftHead = ConvertSubTreeRight(root.right);
			rightSubTreeLeftHead.left = root;
			root.right = rightSubTreeLeftHead;
		}
		while (root != null) {
			pre = root;
			root = root.left;
		}
		return pre;
	}
	TreeNode ConvertSubTreeRight(TreeNode root) {
		if (root.left != null) {
			TreeNode leftSubTreeRightHead = ConvertSubTreeLeft(root.left);
			leftSubTreeRightHead.right = root;
			root.left = leftSubTreeRightHead;
		}
		if (root.right != null) {
			TreeNode rightSubTreeLeftHead = ConvertSubTreeRight(root.right);
			rightSubTreeLeftHead.left = root;
			root.right = rightSubTreeLeftHead;
		}
		TreeNode pre = root;
		while (root != null) {
			pre = root;
			root = root.left;
		}
		return pre;
	}
}