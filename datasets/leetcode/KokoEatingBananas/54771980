class Solution {
	int getMaxPile(int[] piles) {
		int maxPile = 0;
		for (int p: piles) {	
			maxPile = Math.max(maxPile,p);
		}
		return maxPile;
	}
	boolean isPossible(int[] piles, int h, int mid) {
		int total = 0;
		for (int p: piles) {	
			total += Math.ceil((double) p / (double) mid);
		}
		return total <= h;
	}
	int minEatingSpeed(int[] piles, int h) {
		int left = 1;
		int right = getMaxPile(piles);
		while (left < right) {
			int mid = (left + right) / 2;
			if (isPossible(piles,h,mid)) {
				right = mid;
			} 
			else {
				left = mid + 1;
			}
		}
		return left;
	}
}