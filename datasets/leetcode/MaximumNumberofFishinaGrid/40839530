class Solution {
	void dfs(int i, int j, int[][] grid, boolean[][] vis, int[] curr) {
		int m = grid.length, n = grid[0].length;
		if (i < 0 || j < 0 || i > m - 1 || j > n - 1 || grid[i][j] == 0 || vis[i][j]) {
			return;
		}
		vis[i][j] = true;
		curr[0] += grid[i][j];
		dfs(i + 1,j,grid,vis,curr);
		dfs(i - 1,j,grid,vis,curr);
		dfs(i,j + 1,grid,vis,curr);
		dfs(i,j - 1,grid,vis,curr);
	}
	int findMaxFish(int[][] grid) {
		int m = grid.length, n = grid[0].length;
		boolean[][] vis = new boolean[m][n];
		int currMax = 0;
		int[] curr = new int[1];
		for (int i = 0; i < m; i++) {
			for (int j = 0; j < n; j++) {
				if (!vis[i][j] && !(grid[i][j] == 0)) {
					curr[0] = 0;
					dfs(i,j,grid,vis,curr);
					currMax = Math.max(currMax,curr[0]);
				}
			}
		}
		return currMax;
	}
}