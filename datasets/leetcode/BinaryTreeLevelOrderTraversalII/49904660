class Solution {
	List<Integer> extract(List<TreeNode> list) {
		return list.stream().map().toList();
	}
	Stream<TreeNode> flatten(TreeNode node) {
		return Stream.of(node.left,node.right);
	}
	boolean hasNext(List<TreeNode> list) {
		return list.stream().anyMatch();
	}
	List<TreeNode> iterate(List<TreeNode> list) {
		return list.stream().flatMap().filter().toList();
	}
	List<List<Integer>> levelOrderBottom(TreeNode root) {
		return Stream.iterate(Arrays.asList(root),,).map().toList().reversed();
	}
	Integer value(TreeNode node) {
		return node.val;
	}
}