class Solution {
	int DIFF_OFFSET = 1000;
	boolean possiblyEquals(String s1, String s2) {
		boolean[][][] visited = new boolean[s1.length() + 1][s2.length() + 1][DIFF_OFFSET * 2];
		return possiblyEquals(s1.toCharArray(),s2.toCharArray(),0,0,0,visited);
	}
	boolean possiblyEquals(char[] s1, char[] s2, int i, int j, int diff, boolean[][][] visited) {
		if (i == s1.length && j == s2.length) {
			return diff == 0;
		}
		if (i > s1.length || j > s2.length) {
			return false;
		}
		if (visited[i][j][diff + DIFF_OFFSET]) {
			return false;
		}
		visited[i][j][diff + DIFF_OFFSET] = true;
		char c1 = i < s1.length ? s1[i] : Character.MIN_VALUE;
		char c2 = j < s2.length ? s2[j] : Character.MIN_VALUE;
		int num = 0;
		int digit;
	}
}