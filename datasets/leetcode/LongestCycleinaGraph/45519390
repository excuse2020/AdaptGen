class Solution {
	int ans = -1;
	void dfs(int start, int steps, int[] edges, boolean[] vis, int[] dis) {
		if (start == -1) {
			return;
		}
		if (vis[start]) {
			ans = Math.max(ans,steps - dis[start]);
			return;
		}
		dis[start] = steps;
		vis[start] = true;
		dfs(edges[start],steps + 1,edges,vis,dis);
		edges[start] = -1;
		vis[start] = false;
	}
	int longestCycle(int[] edges) {
		boolean[] vis = new boolean[edges.length];
		int[] dis = new int[edges.length];
		for (int i = 0; i < edges.length; i++) {
			if (!vis[i] && edges[i] != -1) {
				dfs(i,0,edges,vis,dis);
			}
		}
		return ans;
	}
}