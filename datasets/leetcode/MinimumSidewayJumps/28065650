class Solution {
	int minSideJumps(int[] obstacles) {
		int n = obstacles.length - 1;
		int[][] dp = new int[4][n + 1];
		for (int i = 0; i < 4; i++) {
			for (int j = 0; j <= n; j++) {
				dp[i][j] = -1;
			}
		}
		return solve(0,2,obstacles,n,dp);
	}
	int solve(int pos, int currLane, int[] obstacles, int n, int[][] dp) {
		if (pos == n) {
			return 0;
		}
		if (dp[currLane][pos] != -1) {
			return dp[currLane][pos];
		}
		if (obstacles[pos + 1] != currLane) {
			return solve(pos + 1,currLane,obstacles,n,dp);
		} 
		else {
			int ans = Integer.MAX_VALUE;
			for (int i = 1; i <= 3; i++) {
				if (i != currLane && obstacles[pos] != i) {
					ans = Math.min(1 + solve(pos,i,obstacles,n,dp),ans);
				}
			}
			dp[currLane][pos] = ans;
			return dp[currLane][pos];
		}
	}
}