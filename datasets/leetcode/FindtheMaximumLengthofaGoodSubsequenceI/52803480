class Solution {
	int maximumLength(int[] nums, int k) {
		int n = nums.length;
		int dp = new int[n + 1][n + 1][k + 1];
		for (int i = 0; i < n + 1; i++) {
			for (int j = 0; j < n + 1; j++) {
				Arrays.fill(dp[i][j],-1);
			}
		}
		return memo(-1,0,0,k,n,dp,nums);
	}
	int memo(int prev, int pres, int count, int k, int n, int[][][] dp, int[] nums) {
		if (pres == n) {
			return 0;
		}
		if (dp[pres][prev + 1][count] != -1) {
			return dp[pres][prev + 1][count];
		}
		int pick;
		int nonpick;
		int l = 0;
		if (prev != -1 && nums[prev] != nums[pres]) {
			l++;
		}
		int max = 0;
		if (prev == -1 || count + l <= k) {
			pick = 1 + memo(pres,pres + 1,count + l,k,n,dp,nums);
			nonpick = memo(prev,pres + 1,count,k,n,dp,nums);
			max = Math.max(max,Math.max(pick,nonpick));
		} 
		else {
			nonpick = memo(prev,pres + 1,count,k,n,dp,nums);
			max = nonpick;
		}
		return dp[pres][prev + 1][count] = max;
	}
}