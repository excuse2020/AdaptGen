class Solution {
	String LCS(String s1, String s2) {
		if (s1.length() == 0 || s2.length() == 0) {
			return "-1";
		}
		int m = s1.length();
		int n = s2.length();
		int[][] dp = new int[m + 1][n + 1];
		int[][] dir = new int[m + 1][n + 1];
		for (int i = 1; i <= m; i++) {
			for (int j = 1; j <= n; j++) {
				if (s1.charAt(i - 1) == s2.charAt(j - 1)) {
					dp[i][j] = dp[i - 1][j - 1] + 1;
					dir[i][j] = 1;
				} 
				else {
					if (dp[i - 1][j] >= dp[i][j - 1]) {
						dp[i][j] = dp[i - 1][j];
						dir[i][j] = 2;
					} 
					else {
						dp[i][j] = dp[i][j - 1];
						dir[i][j] = 3;
					}
				}
			}
		}
		int i = m, j = n;
		StringBuilder sb = new StringBuilder();
		while (i >= 0 && j >= 0) {
			if (dir[i][j] == 1) {
				i--;
				j--;
				sb.append(s1.charAt(i));
			} 
			else if (dir[i][j] == 2) {
				i--;
			} 
			else {
				j--;
			}
		}
		return sb.length() > 0 ? sb.reverse().toString() : "-1";
	}
}