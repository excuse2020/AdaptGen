class Solution {
	ArrayList<String> res = new ArrayList<String>();
	ArrayList<String> Permutation(String str) {
		if (str == null || str.length() == 0) {
			return res;
		}
		StringBuffer output = new StringBuffer();
		boolean[] mark = new boolean[str.length()];
		char[] datas = str.toCharArray();
		Arrays.sort(datas);
		Arrays.fill(mark,false);
		backtrack(output,datas,mark);
		return res;
	}
	void backtrack(StringBuffer output, char[] datas, boolean[] mark) {
		if (output.length() == datas.length) {
			res.add(output.toString());
		}
		for (int i = 0; i < datas.length; i++) {
			if (mark[i] || (i > 0 && datas[i] == datas[i - 1] && !mark[i - 1])) {
				continue;
			}
			mark[i] = true;
			output.append(datas[i]);
			backtrack(output,datas,mark);
			mark[i] = false;
			output.deleteCharAt(output.length() - 1);
		}
	}
}