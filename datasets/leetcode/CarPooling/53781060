class Solution {
	boolean carPooling(int[][] trips, int capacity) {
		return fun(trips,capacity);
	}
	boolean fun(int[][] trips, int capacity) {
		Map<Integer, Integer> on = new HashMap<>();
		Map<Integer, Integer> off = new HashMap<>();
		int start = Integer.MAX_VALUE;
		int end = Integer.MIN_VALUE;
		for (int i = 0; i < trips.length; i++) {
			if (trips[i][1] < start) {
				start = trips[i][1];
			}
			if (trips[i][2] > end) {
				end = trips[i][2];
			}
			on.put(trips[i][1],on.getOrDefault(trips[i][1],0) + trips[i][0]);
			off.put(trips[i][2],off.getOrDefault(trips[i][2],0) + trips[i][0]);
		}
		int currCap = 0;
		for (int i = start; i <= end; i++) {
			currCap += on.getOrDefault(i,0) - off.getOrDefault(i,0);
			if (currCap > capacity) {
				return false;
			}
			if (currCap < 0) {
				currCap = 0;
			}
		}
		return true;
	}
}