class Solution {
	int[] findOrder(int numCourses, int[][] prerequisites) {
		ArrayList<ArrayList<Integer>> graph = new ArrayList<>();
		int[] indegree = new int[numCourses];
		for (int i = 0; i < numCourses; i++) {
			graph.add(new ArrayList<>());
		}
		for (int i = 0; i < prerequisites.length; i++) {
			int prev = prerequisites[i][1];
			int next = prerequisites[i][0];
			graph.get(prev).add(next);
			indegree[next]++;
		}
		Queue<Integer> q = new LinkedList<>();
		for (int i = 0; i < numCourses; i++) {
			if (indegree[i] == 0) {
				q.add(i);
			}
		}
		ArrayList<Integer> ans = new ArrayList<>();
		while (!q.isEmpty()) {
			int curr = q.poll();
			ans.add(curr);
			ArrayList<Integer> neighbors = graph.get(curr);
			for (int i = 0; i < neighbors.size(); i++) {
				indegree[neighbors.get(i)]--;
				if (indegree[neighbors.get(i)] == 0) {
					q.add(neighbors.get(i));
				}
			}
		}
		if (ans.size() < numCourses) {
			return new int[0];
		}
		return ans.stream().mapToInt().toArray();
	}
}