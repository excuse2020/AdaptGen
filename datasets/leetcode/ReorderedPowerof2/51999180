class Solution {
	boolean helper(int[] perm, int idx) {
		if (idx >= perm.length) {
			return isValid(perm);
		}
		boolean res = false;
		for (int i = idx; i < perm.length; i++) {
			swapper(perm,idx,i);
			res = res || helper(perm,idx + 1);
			swapper(perm,idx,i);
		}
		return res;
	}
	boolean isValid(int[] perm) {
		if (perm[0] == 0) {
			return false;
		}
		int num = 0;
		for (int digit: perm) {	
			num = 10 * num + digit;
		}
		while (num > 1) {
			if (num % 2 != 0) {
				return false;
			}
			num /= 2;
		}
		return num == 1;
	}
	boolean reorderedPowerOf2(int n) {
		String s = Integer.toString(n);
		int[] perm = new int[s.length()];
		int i = 0;
	}
	void swapper(int[] perm, int i, int j) {
		int temp = perm[i];
		perm[i] = perm[j];
		perm[j] = temp;
	}
}