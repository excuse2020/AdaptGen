class Solution {
	void bfs(char[][] grid, int i, int j) {
		int len = grid[0].length;
		grid[i][j] = '0';
		Queue<Integer> queue = new LinkedList<>();
		int code = i * len + j;
		queue.add(code);
		while (!queue.isEmpty()) {
			int index = queue.poll();
			int x = index / len;
			int y = index % len;
			if (x > 0 && x <= grid.length - 1 && grid[x - 1][y] == '1') {
				grid[x - 1][y] = '0';
				queue.add((x - 1) * len + y);
			}
			if (x >= 0 && x < grid.length - 1 && grid[x + 1][y] == '1') {
				grid[x + 1][y] = '0';
				queue.add((x + 1) * len + y);
			}
			if (y > 0 && y <= len - 1 && grid[x][y - 1] == '1') {
				grid[x][y - 1] = '0';
				queue.add(x * len + y - 1);
			}
			if (y >= 0 && y < len - 1 && grid[x][y + 1] == '1') {
				grid[x][y + 1] = '0';
				queue.add(x * len + y + 1);
			}
		}
	}
	void dfs(char[][] grid, int i, int j) {
		if (i < 0 || i >= grid.length || j < 0 || j >= grid[0].length || grid[i][j] == '0') {
			return;
		}
		grid[i][j] = '0';
		dfs(grid,i - 1,j);
		dfs(grid,i + 1,j);
		dfs(grid,i,j - 1);
		dfs(grid,i,j + 1);
	}
	int solve(char[][] grid) {
		int m = grid.length;
		int n = grid[0].length;
		int count = 0;
		for (int i = 0; i < m; i++) {
			for (int j = 0; j < n; j++) {
				if (grid[i][j] == '1') {
					count++;
					bfs(grid,i,j);
				}
			}
		}
		return count;
	}
}