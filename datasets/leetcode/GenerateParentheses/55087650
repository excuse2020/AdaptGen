class Solution {
	List<String> result = new ArrayList<>();
	void backtrack(int left, int right, StringBuilder sb) {
		if (right < left) {
			return;
		}
		if (right < 0 || left < 0) {
			return;
		}
		if (left == 0 && right == 0) {
			result.add(sb.toString());
			return;
		}
	}
	List<String> generateParenthesis(int n) {
		if (n == 0) {
			return new ArrayList<>();
		}
		int left = n;
		int right = n;
		backtrack(left,right,new StringBuilder());
		return result;
	}
}