class Solution {
	boolean Ispossible(int piles, int h, int mid) {
		int time = 0;
		for (int i = 0; i < piles.length; i++) {
			time += (int) Math.ceil(piles[i] * 1.0 / mid);
		}
		return time <= h;
	}
	int minEatingSpeed(int[] piles, int h) {
		int maxi = 0;
		for (int val: piles) {	
			maxi = Math.max(val,maxi);
		}
		if (h == piles.length) {
			return maxi;
		}
		int lo = 0;
		int hi = maxi;
		int speed = Integer.MAX_VALUE;
		while (lo <= hi) {
			int mid = lo + (hi - lo) / 2;
			if (Ispossible(piles,h,mid) == true) {
				speed = mid;
				hi = mid - 1;
			} 
			else {
				lo = mid + 1;
			}
		}
		return speed;
	}
}