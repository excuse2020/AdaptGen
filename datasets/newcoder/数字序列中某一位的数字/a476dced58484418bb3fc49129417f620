class Solution {
	long beginNumber(int digits) {
		if (digits == 1) {
			return 0;
		}
		return (long) Math.pow(10,digits - 1);
	}
	long countOfIntegers(int digits) {
		if (digits == 1) {
			return 10;
		}
		long count = (int) Math.pow(10,digits - 1);
		System.out.println("count -> " + count);
		return 9 * count;
	}
	int digitAtIndex(int n, int digits) {
		long number = beginNumber(digits) + n / digits;
		System.out.println("number -> " + number);
		int indexFromRight = digits - n % digits;
		for (int i = 1; i < indexFromRight; i++) {
			number /= 10;
		}
		return (int) (number % 10);
	}
	int findNthDigit(int n) {
		if (n < 0) {
			return -1;
		}
		int digits = 1;
		while (true) {
			long numbers = countOfIntegers(digits);
			if (n < numbers * digits) {
				return digitAtIndex(n,digits);
			}
			n -= digits * numbers;
			digits++;
		}
	}
}