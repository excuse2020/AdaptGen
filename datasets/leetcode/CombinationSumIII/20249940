class Solution {
	List<List<Integer>> combinationSum3(int k, int n) {
		return helper(n,k,0);
	}
	List<List<Integer>> helper(int n, int k, int last) {
		List<List<Integer>> temp2 = new ArrayList<>();
		if (last >= n || (k == 1 && n >= 10)) {
			return temp2;
		}
		if (k == 1 && n > last) {
			List<Integer> temp = new ArrayList<>();
			temp.add(n);
			temp2.add(temp);
			return temp2;
		}
		for (int i = last + 1; i < n && i < 10; i++) {
			List<List<Integer>> curr = helper(n - i,k - 1,i);
			if (!curr.isEmpty()) {
				for (List<Integer> ins: curr) {	
					List<Integer> temp3 = new ArrayList<>();
					temp3.add(i);
					temp3.addAll(ins);
					temp2.add(temp3);
				}
			}
		}
		return temp2;
	}
}