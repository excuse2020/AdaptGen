class Solution {
	int maxDistance(int[][] grid) {
		Queue<int[]> queue = new ArrayDeque<int[]>();
		for (int i = 0; i < grid.length; i++) {
			for (int j = 0; j < grid[0].length; j++) {
				if (grid[i][j] == 1) {
					queue.add(new int{i, j});
				}
			}
		}
		int level = -1;
		while (!queue.isEmpty()) {
			int size = queue.size();
			for (int i = 0; i < size; i++) {
				int[] rc = queue.remove();
				int r = rc[0];
				int c = rc[1];
				if (r + 1 < grid.length && grid[r + 1][c] == 0) {
					grid[r + 1][c] = -1;
					queue.add(new int{r + 1, c});
				}
				if (r - 1 >= 0 && grid[r - 1][c] == 0) {
					grid[r - 1][c] = -1;
					queue.add(new int{r - 1, c});
				}
				if (c + 1 < grid[0].length && grid[r][c + 1] == 0) {
					grid[r][c + 1] = -1;
					queue.add(new int{r, c + 1});
				}
				if (c - 1 >= 0 && grid[r][c - 1] == 0) {
					grid[r][c - 1] = -1;
					queue.add(new int{r, c - 1});
				}
			}
			level++;
		}
		for (int[] row: grid) {	
			for (int i = 0; i < row.length; i++) {
				if (row[i] == -1) {
					row[i] = 0;
				}
			}
		}
		return (level == 0 ? -1 : level);
	}
}