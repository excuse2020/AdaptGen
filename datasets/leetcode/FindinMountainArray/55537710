class Solution {
	int Search(int target, MountainArray mountainArr, int start, int end, boolean check) {
		while (start <= end) {
			int mid = (start) + (end - start) / 2;
			if (mountainArr.get(mid) == target) {
				return mid;
			}
			if (check) {
				if (target > mountainArr.get(mid)) {
					start = mid + 1;
				} 
				else {
					end = mid - 1;
				}
			} 
			else {
				if (target > mountainArr.get(mid)) {
					end = mid - 1;
				} 
				else {
					start = mid + 1;
				}
			}
		}
		return -1;
	}
	int findInMountainArray(int target, MountainArray mountainArr) {
		int start = 0;
		int end = mountainArr.length() - 1;
		while (start <= end) {
			int mid = (start) + (end - start) / 2;
			if (mountainArr.get(mid) > mountainArr.get(mid + 1)) {
				end = mid - 1;
			} 
			else if (mountainArr.get(mid) < mountainArr.get(mid + 1)) {
				start = mid + 1;
			}
		}
		int peak = start;
		int res = Search(target,mountainArr,0,peak,true);
		if (res == -1) {
			res = Search(target,mountainArr,peak + 1,mountainArr.length() - 1,false);
		}
		return res;
	}
}