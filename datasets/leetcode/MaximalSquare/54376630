class Solution {
	int maximalSquare(char[][] matrix) {
		int[][] mem = new int[matrix.length][matrix[0].length];
		for (int i = 0; i < mem.length; ++i) {
			Arrays.fill(mem[i],-1);
		}
		int depth = 0;
		for (int i = 0; i < matrix.length; ++i) {
			for (int j = 0; j < matrix[0].length; ++j) {
				depth = Math.max(depth,maximalSquare(matrix,i,j,0,mem));
			}
		}
		return (int) Math.pow(depth,2);
	}
	int maximalSquare(char[][] matrix, int row, int col, int depth, int[][] mem) {
		if (!validMaximalSquare(matrix,row,col)) {
			return 0;
		}
		if (mem[row][col] != -1) {
			return mem[row][col];
		}
		int ans = 0;
	}
	boolean validMaximalSquare(char[][] matrix, int row, int col) {
		if (row >= matrix.length || col >= matrix[0].length) {
			return false;
		}
		return true;
	}
}