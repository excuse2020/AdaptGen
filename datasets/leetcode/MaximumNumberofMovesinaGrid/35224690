class Solution {
	int dfs(int i, int j, int m, int n, int[][] grid, int prev, int[][] dp) {
		if (i < 0 || i >= m || j >= n || grid[i][j] <= prev) {
			return 0;
		}
		if (dp[i][j] != -1) {
			return dp[i][j];
		}
		int topright = 1 + dfs(i - 1,j + 1,m,n,grid,grid[i][j],dp);
		int right = 1 + dfs(i,j + 1,m,n,grid,grid[i][j],dp);
		int downright = 1 + dfs(i + 1,j + 1,m,n,grid,grid[i][j],dp);
		return dp[i][j] = Math.max(right,Math.max(topright,downright));
	}
	int maxMoves(int[][] grid) {
		int maxi = 0;
		int m = grid.length;
		int n = grid[0].length;
		int[][] dp = new int[m][n];
		for (int[] row: dp) {	
			Arrays.fill(row,-1);
		}
		for (int i = 0; i < m; i++) {
			maxi = Math.max(maxi,dfs(i,0,m,n,grid,Integer.MIN_VALUE,dp));
		}
		return maxi - 1;
	}
}