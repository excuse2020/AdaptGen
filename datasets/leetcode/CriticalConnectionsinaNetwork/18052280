class Solution {
	int[] disc;
	int[] low;
	int[] parent;
	int time;
	List<List<Integer>> criticalConnections(int n, List<List<Integer>> connections) {
		List<List<Integer>> res = new ArrayList<>();
		parent = new int[n];
		disc = new int[n];
		low = new int[n];
		time = 0;
		ArrayList<Integer>[] graph = new ArrayList[n];
		for (int i = 0; i < n; i++) {
			graph[i] = new ArrayList<Integer>();
		}
		boolean[] visited = new boolean[n];
		for (List<Integer> row: connections) {	
			graph[row.get(0)].add(row.get(1));
			graph[row.get(1)].add(row.get(0));
		}
		dfs(graph,0,visited,res);
		return res;
	}
	void dfs(ArrayList<Integer>[] graph, int u, boolean[] visited, List<List<Integer>> res) {
		visited[u] = true;
		disc[u] = low[u] = time;
		time++;
		for (int v: graph[u]) {	
			if (parent[u] == v) {
				continue;
			} 
			else if (visited[v]) {
				low[u] = Math.min(low[u],disc[v]);
			} 
			else {
				parent[v] = u;
				dfs(graph,v,visited,res);
				low[u] = Math.min(low[u],low[v]);
				if (low[v] > disc[u]) {
					List<Integer> list = new ArrayList<>();
					list.add(u);
					list.add(v);
					res.add(list);
				}
			}
		}
	}
}