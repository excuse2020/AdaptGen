class Solution {
	int snakesAndLadders(int[][] board) {
		int n = board.length;
		int[] dest = new int[n * n + 1];
		int row = n - 1;
		int col = 0;
		boolean dir = false;
		while (row >= 0) {
			int start = (n - 1) * n + 1;
			if (!dir) {
				col = 0;
				while (col < n) {
					dest[start++] = board[row][col++];
				}
				dir = !dir;
			} 
			else {
				col = n - 1;
				while (col >= 0) {
					dest[start++] = board[row][col--];
				}
				dir = !dir;
			}
			row--;
		}
		Queue<Integer> q = new LinkedList<Integer>();
		boolean visited = new boolean[n * n + 1];
		q.add(1);
		visited[1] = true;
		int count = 0;
		while (!q.isEmpty()) {
			int size = q.size();
			for (int i = 0; i < size; i++) {
				int val = q.poll();
				for (int j = val + 1; j <= Math.min(val + 6,n * n); j++) {
					if (j == n * n) {
						return count + 1;
					}
					if (dest[j] != -1) {
						if (dest[j] == n * n) {
							return count + 1;
						}
						if (!visited[dest[j]]) {
							q.add(dest[j]);
							visited[dest[j]] = true;
						}
					} 
					else {
						if (!visited[j]) {
							q.add(j);
							visited[j] = true;
						}
					}
				}
			}
			count++;
		}
		return -1;
	}
}