class Solution {
	int minNumberOfSemesters(int n, int[][] dependencies, int k) {
		int[] prerequisites = new int[n];
		for (int[] dependency: dependencies) {	
			prerequisites[dependency[1] - 1] |= 1 << (dependency[0] - 1);
		}
		int[] dp = new int[1 << n];
		Arrays.fill(dp,n + 1);
		dp[0] = 0;
		for (int i = 0; i < (1 << n); i++) {
			int availableCourses = 0;
			for (int course = 0; course < n; course++) {
				if ((prerequisites[course] & i) == prerequisites[course]) {
					availableCourses |= 1 << course;
				}
			}
			availableCourses &= ~i;
			for (int nextSemester = availableCourses; nextSemester > 0; nextSemester = (nextSemester - 1) & availableCourses) {
				if (Integer.bitCount(nextSemester) <= k) {
					dp[i | nextSemester] = Math.min(dp[i | nextSemester],1 + dp[i]);
				}
			}
		}
		return dp[(1 << n) - 1];
	}
}