class Solution {
	ListNode Merge(ListNode pHead1, ListNode pHead2) {
		if (pHead1 == null) {
			return pHead2;
		}
		if (pHead2 == null) {
			return pHead1;
		}
		ArrayList<ListNode> arr = new ArrayList<>();
		while (pHead1 != null || pHead2 != null) {
			if (pHead1 == null) {
				while (pHead2 != null) {
					arr.add(pHead2);
					pHead2 = pHead2.next;
				}
				break;
			}
			if (pHead2 == null) {
				while (pHead1 != null) {
					arr.add(pHead1);
					pHead1 = pHead1.next;
				}
				break;
			}
			if (pHead1.val <= pHead2.val) {
				arr.add(pHead1);
				System.out.println(pHead1.val);
				pHead1 = pHead1.next;
			} 
			else {
				arr.add(pHead2);
				System.out.println(pHead2.val);
				pHead2 = pHead2.next;
			}
		}
		System.out.println("size:" + arr.size());
		if (arr.isEmpty()) {
			return null;
		}
		ListNode a = arr.get(0);
		ListNode cur = a;
		for (int i = 1; i < arr.size(); i++) {
			cur.next = arr.get(i);
			cur = cur.next;
		}
		return a;
	}
}