class Solution {
	List<List<String>> findLadders(String beginWord, String endWord, List<String> wordList) {
		LinkedList<String> queue = new LinkedList<>();
		HashSet<String> words = new HashSet<>();
		for (String ele: wordList) {	
			words.add(ele);
		}
		HashMap<String, Integer> size = new HashMap<>();
		size.put(beginWord,0);
		HashMap<String, LinkedList<String>> map = new HashMap<>();
		HashMap<String, LinkedList<String>> newMap = new HashMap<>();
		queue.add(beginWord);
		map.put(beginWord,new LinkedList<>());
		int s = queue.size();
		String pop = queue.removeFirst();
		int i = 0;
		StringBuilder sb = new StringBuilder(pop);
		int j = 0;
		char ch;
	}
	void getPaths(HashMap<String, LinkedList<String>> map, String beginWord, String endWord, List<List<String>> ans, List<String> temp) {
		if (beginWord.equals(endWord)) {
			temp.add(beginWord);
			List<String> l = new LinkedList<>();
			for (String ele: temp) {	
				l.add(0,ele);
			}
			ans.add(l);
			temp.remove(temp.size() - 1);
			return;
		}
		temp.add(beginWord);
		if (!map.containsKey(beginWord)) {
			return;
		}
		for (String ele: map.get(beginWord)) {	
			getPaths(map,ele,endWord,ans,temp);
		}
		temp.remove(temp.size() - 1);
	}
}