class Solution {
	ListNode addInList(ListNode head1, ListNode head2) {
		if (head1 == null) {
			return head2;
		} 
		else if (head2 == null) {
			return head1;
		}
		head1 = reverse(head1);
		head2 = reverse(head2);
		ListNode head = new ListNode(-1);
		ListNode fllowHead = head;
		int carry = 0;
		while (head1 != null || head2 != null) {
			int result = carry;
			if (head1 != null) {
				result += head1.val;
				head1 = head1.next;
			}
			if (head2 != null) {
				result += head2.val;
				head2 = head2.next;
			}
			carry = result / 10;
			fllowHead.next = new ListNode(result % 10);
			fllowHead = fllowHead.next;
		}
		if (carry == 1) {
			fllowHead.next = new ListNode(1);
		}
		return reverse(head.next);
	}
	void printList(ListNode head) {
		while (head != null) {
			System.out.println(head.val);
		}
	}
	ListNode reverse(ListNode head) {
		if (head == null) {
			return null;
		}
		ListNode preNode = null;
		ListNode nextNode = null;
		while (head != null) {
			nextNode = head.next;
			head.next = preNode;
			preNode = head;
			head = nextNode;
		}
		return preNode;
	}
}