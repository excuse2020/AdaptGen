class Solution {
	int[] findOriginalArray(int[] arr) {
		HashMap<Integer, Integer> h = new HashMap<>();
		int arr1 = new int[arr.length / 2];
		if (arr.length % 2 == 1) {
			return new int[0];
		}
		Arrays.sort(arr);
		arr1[arr1.length - 1] = Integer.MAX_VALUE;
		int j = 0;
		for (int i: arr) {	
			if (i % 2 == 0) {
				if (h.containsKey(i / 2)) {
					arr1[j++] = i / 2;
					if (h.get(i / 2) == 1) {
						h.remove(i / 2);
					} 
					else {
						h.replace(i / 2,h.get(i / 2) - 1);
					}
				} 
				else if (h.containsKey(i * 2)) {
					arr1[j++] = i;
					if (h.get(2 * i) == 1) {
						h.remove(i * 2);
					} 
					else {
						h.replace(i * 2,h.get(i * 2) - 1);
					}
				} 
				else {
					h.put(i,h.getOrDefault(i,0) + 1);
				}
			} 
			else {
				if (h.containsKey(i * 2)) {
					arr1[j++] = i;
					if (h.get(2 * i) == 1) {
						h.remove(i * 2);
					} 
					else {
						h.replace(i * 2,h.get(i * 2) - 1);
					}
				} 
				else {
					h.put(i,h.getOrDefault(i,0) + 1);
				}
			}
		}
		if (arr1[arr1.length - 1] == Integer.MAX_VALUE) {
			return new int[0];
		}
		return arr1;
	}
}