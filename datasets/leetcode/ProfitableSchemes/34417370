class Solution {
	int mod = 1000000007;
	int maxProfit(int ind, int n, int minProfit, int[] group, int[] profit, int p, int[][][] dp, int[] result) {
		if (n < 0) {
			return 0;
		}
		if (ind == profit.length) {
			if (minProfit <= p) {
				result[0] = (result[0] + 1) % mod;
				return 1;
			}
			return 0;
		}
		if (dp[ind][n][p] != -1) {
			result[0] = (result[0] % mod + dp[ind][n][p] % mod);
			return dp[ind][n][p];
		}
		int a = maxProfit(ind + 1,n,minProfit,group,profit,p,dp,result);
		int b = maxProfit(ind + 1,n - group[ind],minProfit,group,profit,Integer.min(minProfit,p + profit[ind]),dp,result);
		return dp[ind][n][p] = (a % mod + b % mod) % mod;
	}
	int profitableSchemes(int n, int minProfit, int[] group, int[] profit) {
		int[][][] dp = new int[group.length][n + 1][101];
		int[] result = new int[1];
		for (int i = 0; i < dp.length; i++) {
			for (int j = 0; j < dp[i].length; j++) {
				Arrays.fill(dp[i][j],-1);
			}
		}
		maxProfit(0,n,minProfit,group,profit,0,dp,result);
		return result[0];
	}
}