class Solution {
	boolean canFinish(int numCourses, int[][] prerequisites) {
		int m = prerequisites.length, n, i;
		if (m == 0) {
			return true;
		} 
		else {
			n = prerequisites[0].length;
		}
		boolean[] vis = new boolean[numCourses];
		boolean[] dfsvis = new boolean[numCourses];
		List<List<Integer>> adj = new ArrayList<>();
		for (i = 0; i < numCourses; i++) {
			adj.add(new ArrayList<>());
		}
		for (i = 0; i < m; i++) {
			adj.get(prerequisites[i][0]).add(prerequisites[i][1]);
		}
		for (i = 0; i < numCourses; i++) {
			if (!vis[i] && isCycledfs(i,adj,vis,dfsvis)) {
				return false;
			}
		}
		return true;
	}
	boolean isCycledfs(int node, List<List<Integer>> adj, boolean[] vis, boolean[] dfsvis) {
		vis[node] = true;
		dfsvis[node] = true;
		for (Integer i: adj.get(node)) {	
			if (!vis[i]) {
				if (isCycledfs(i,adj,vis,dfsvis)) {
					return true;
				}
			} 
			else if (dfsvis[i]) {
				return true;
			}
		}
		dfsvis[node] = false;
		return false;
	}
}