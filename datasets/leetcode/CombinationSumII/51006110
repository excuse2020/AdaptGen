class Solution {
	List<List<Integer>> res;
	List<List<Integer>> combinationSum2(int[] candidates, int target) {
		res = new ArrayList<>();
		Arrays.sort(candidates);
		fun(candidates,0,target,new ArrayList<>());
		return new ArrayList<>(res);
	}
	void fun(int a, int i, int sum, List<Integer> list) {
		if (sum == 0) {
			res.add(new ArrayList<>(list));
			return;
		}
		if (i >= a.length || sum < 0) {
			return;
		}
		if (a[i] <= sum) {
			list.add(a[i]);
			fun(a,i + 1,sum - a[i],list);
			list.remove(list.size() - 1);
		}
		int j = i + 1;
		while (j < a.length && a[j] == a[j - 1]) {
			j++;
		}
		fun(a,j,sum,list);
	}
}