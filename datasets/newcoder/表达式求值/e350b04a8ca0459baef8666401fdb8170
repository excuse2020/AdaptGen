class Solution {
	LinkedList<Integer> num = new LinkedList<Integer>();
	LinkedList<Character> ope = new LinkedList<Character>();
	boolean isnum(char s) {
		return s >= '0' && s <= '9';
	}
	int shun(char s) {
		if (s == '+' || s == '-') {
			return 1;
		}
		return 2;
	}
	void solve() {
		int b = num.poll();
		int a = num.poll();
		char s = ope.poll();
		int x = 0;
		if (s == '+') {
			x = a + b;
		} 
		else if (s == '-') {
			x = a - b;
		} 
		else if (s == '*') {
			x = a * b;
		}
		num.push(x);
	}
	int solve(String str) {
		int len = str.length();
		char s = str.toCharArray();
		for (int i = 0; i < len; i++) {
			if (isnum(s[i])) {
				int j = i;
				int x = 0;
				while (j < len && isnum(s[j])) {
					x = x * 10 + s[j++] - '0';
				}
				i = j - 1;
				num.push(x);
			} 
			else if (s[i] == '(') {
				ope.push(s[i]);
			} 
			else if (s[i] == ')') {
				while (ope.peek() != '(') {
					solve();
				}
				ope.poll();
			} 
			else {
				while (ope.size() != 0 && ope.peek() != '(' && shun(ope.peek()) >= shun(s[i])) {
					solve();
				}
				ope.push(s[i]);
			}
		}
		while (ope.size() != 0) {
			solve();
		}
		return num.poll();
	}
}