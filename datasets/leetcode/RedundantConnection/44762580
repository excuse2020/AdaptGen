class Solution {
	int[] parent;
	int[] rank;
	int find(int x) {
		if (x != parent[x]) {
			parent[x] = find(parent[x]);
		}
		return parent[x];
	}
	int[] findRedundantConnection(int[][] edges) {
		int n = edges.length;
		parent = new int[n + 1];
		rank = new int[n + 1];
		for (int i = 1; i <= n; i++) {
			parent[i] = i;
			rank[i] = 1;
		}
		for (int[] edge: edges) {	
			int u = edge[0];
			int v = edge[1];
			if (find(u) == find(v)) {
				return edge;
			} 
			else {
				union(u,v);
			}
		}
		return new int[2];
	}
	void union(int x, int y) {
		int rootX = find(x);
		int rootY = find(y);
		if (rootX != rootY) {
			if (rank[rootX] < rank[rootY]) {
				parent[rootX] = rootY;
			} 
			else if (rank[rootX] > rank[rootY]) {
				parent[rootY] = rootX;
			} 
			else {
				parent[rootY] = rootX;
				rank[rootX]++;
			}
		}
	}
}