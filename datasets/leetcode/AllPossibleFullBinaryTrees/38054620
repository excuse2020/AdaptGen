class Solution {
	List<TreeNode> allPossibleFBT(int n) {
		if (n == 1) {
			List<TreeNode> res = new ArrayList<>();
			res.add(new TreeNode(0));
			return res;
		}
		List<TreeNode> res = new ArrayList<>();
		for (int i = 1; i < n; i++) {
			if (i % 2 == 0 || (n - i) % 2 == 0) {
				continue;
			}
			List<TreeNode> left = allPossibleFBT(i);
			List<TreeNode> rht = allPossibleFBT(n - i);
			for (int j = 0; j < left.size(); j++) {
				for (int k = 0; k < rht.size(); k++) {
					TreeNode root = new TreeNode(0);
					TreeNode leftroot = left.get(j);
					TreeNode rhtroot = rht.get(k);
					root.left = leftroot;
					root.right = rhtroot;
					res.add(root);
				}
			}
		}
		return res;
	}
}