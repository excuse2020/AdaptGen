class Solution {
	int[] depth = new int[100001];
	int[] height = new int[100001];
	Map<Integer, List<Integer>> map = new HashMap<>();
	int dfs(TreeNode root, int d) {
		if (root == null) {
			return -1;
		}
		int h = Math.max(dfs(root.left,d + 1),dfs(root.right,d + 1)) + 1;
		depth[root.val] = d;
		height[root.val] = h;
		map.computeIfAbsent(d,(k) -> {new ArrayList<>()}).add(h);
		return h;
	}
	int[] treeQueries(TreeNode root, int[] queries) {
		dfs(root,0);
		for (Map.Entry<Integer, List<Integer>> entry: map.entrySet()) {	
			Collections.sort(entry.getValue(),(a, b) -> {b - a});
		}
		int[] res = new int[queries.length];
		for (int i = 0; i < queries.length; i++) {
			int n = queries[i];
			int d = depth[n];
			int h = height[n];
			if (map.get(d).size() == 1) {
				res[i] = d - 1;
			} 
			else if (map.get(d).get(0) == h) {
				res[i] = d + map.get(d).get(1);
			} 
			else {
				res[i] = d + map.get(d).get(0);
			}
		}
		return res;
	}
}