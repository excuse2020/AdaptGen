class Solution {
	int earliestFullBloom(int[] plantTime, int[] growTime) {
		int n = plantTime.length;
		int[][] combined = new int[n][2];
		for (int i = 0; i < n; i++) {
			combined[i][0] = plantTime[i];
			combined[i][1] = growTime[i];
		}
		Arrays.sort(combined,(a, b) -> {b[1] - a[1]});
		int earliestDay = 0;
		int growTimeOfCurrentFlower = 0;
		for (int i = 0; i < n; i++) {
			earliestDay += combined[i][0];
			growTimeOfCurrentFlower = Math.max(growTimeOfCurrentFlower,earliestDay + combined[i][1]);
		}
		return Math.max(earliestDay + combined[n - 1][1],growTimeOfCurrentFlower);
	}
}