class Solution {
	int[][] charMatrixToIntMatrix(char[][] charMatrix) {
		int numRows = charMatrix.length;
		int numCols = charMatrix[0].length;
		int[][] intMatrix = new int[numRows][numCols];
		int i = 0;
		int j = 0;
	}
	int largestRectangleArea(int[] heights, int n) {
		Stack<Integer> st = new Stack<>();
		int[] leftsmall = new int[n];
		int[] rightsmall = new int[n];
		for (int i = 0; i < n; i++) {
			while (!st.isEmpty() && heights[st.peek()] > heights[i]) {
				st.pop();
			}
			if (st.isEmpty()) {
				leftsmall[i] = 0;
			} 
			else {
				leftsmall[i] = st.peek() + 1;
			}
			st.push(i);
		}
		while (!st.isEmpty()) {
			st.pop();
		}
		for (int i = n - 1; i >= 0; i--) {
			while (!st.isEmpty() && heights[st.peek()] >= heights[i]) {
				st.pop();
			}
			if (st.isEmpty()) {
				rightsmall[i] = n - 1;
			} 
			else {
				rightsmall[i] = st.peek() - 1;
			}
			st.push(i);
		}
		int[] width = new int[heights.length];
		int maxA = 0;
		for (int i = 0; i < n; i++) {
			width[i] = rightsmall[i] - leftsmall[i] + 1;
			int side = Math.min(heights[i],width[i]);
			maxA = Math.max(maxA,side * side);
		}
		return maxA;
	}
	int maximalSquare(char[][] matrix) {
		int[][] M = charMatrixToIntMatrix(matrix);
		int n = M.length;
		int m = M[0].length;
		int area = largestRectangleArea(M[0],m);
		for (int i = 1; i < n; i++) {
			for (int j = 0; j < m; j++) {
				if (M[i][j] != 0) {
					M[i][j] = M[i][j] + M[i - 1][j];
				} 
				else {
					M[i][j] = 0;
				}
			}
			area = Math.max(area,largestRectangleArea(M[i],m));
		}
		return area;
	}
}