class Solution {
	ArrayList<ArrayList<Integer>> res = new ArrayList<>();
	int tar;
	ArrayList<ArrayList<Integer>> combinationCount(int target, int[] nums) {
		ArrayList<Integer> arrayList = new ArrayList<>();
		tar = target;
		process(nums,arrayList,0);
		return res;
	}
	boolean isContains(ArrayList<Integer> arrayList) {
		boolean bool = false;
		for (ArrayList<Integer> tmp: res) {	
			if (isEquals(tmp,arrayList)) {
				bool = true;
				break;
			}
		}
		return bool;
	}
	boolean isEquals(ArrayList<Integer> arr1, ArrayList<Integer> arr2) {
		int len1 = arr1.size();
		int len2 = arr2.size();
		if (len1 != len2) {
			return false;
		}
		boolean bool = true;
		for (int i = 0; i < len1; i++) {
			if (arr1.get(i) != arr2.get(i)) {
				bool = false;
				break;
			}
		}
		return bool;
	}
	void process(int[] nums, ArrayList<Integer> arrayList, int total) {
		if (total == tar) {
			ArrayList<Integer> copyArrayList = new ArrayList<>();
			copyArrayList.addAll(arrayList);
			copyArrayList.sort(new ComparaInteger());
			if (!isContains(copyArrayList)) {
				res.add(copyArrayList);
			}
			return;
		}
		if (total > tar) {
			return;
		}
		for (int i = 0; i < nums.length; i++) {
			arrayList.add(nums[i]);
			total += nums[i];
			process(nums,arrayList,total);
			arrayList.remove(arrayList.size() - 1);
			total -= nums[i];
		}
		return;
	}
	class ComparaInteger {
		int compare(Integer num1, Integer num2) {
			return num1 - num2;
		}
	}
}