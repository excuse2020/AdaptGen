class Solution {
	int minSideJumps(int[] obstacles) {
		int dp = new int[3][obstacles.length];
		dp[0][0] = 1;
		dp[1][0] = 0;
		dp[2][0] = 1;
		for (int i = 1; i < obstacles.length; ++i) {
			if (obstacles[i] != 0) {
				dp[obstacles[i] - 1][i] = -1;
			}
			if (obstacles[i] != 1) {
				dp[0][i] = dp[0][i - 1];
				if (dp[1][i - 1] != -1 && dp[1][i] != -1) {
					dp[0][i] = Math.min(dp[0][i] == -1 ? Integer.MAX_VALUE : dp[0][i],1 + dp[1][i - 1]);
				}
				if (dp[2][i - 1] != -1 && dp[2][i] != -1) {
					dp[0][i] = Math.min(dp[0][i] == -1 ? Integer.MAX_VALUE : dp[0][i],1 + dp[2][i - 1]);
				}
			}
			if (obstacles[i] != 2) {
				dp[1][i] = dp[1][i - 1];
				if (dp[0][i] != -1) {
					dp[1][i] = Math.min(dp[1][i] == -1 ? Integer.MAX_VALUE : dp[1][i],1 + dp[0][i]);
				}
				if (dp[2][i - 1] != -1 && dp[2][i] != -1) {
					dp[1][i] = Math.min(dp[1][i] == -1 ? Integer.MAX_VALUE : dp[1][i],1 + dp[2][i - 1]);
				}
			}
			if (obstacles[i] != 3) {
				dp[2][i] = dp[2][i - 1];
				if (dp[0][i] != -1) {
					dp[2][i] = Math.min(dp[2][i] == -1 ? Integer.MAX_VALUE : dp[2][i],1 + dp[0][i]);
				}
				if (dp[1][i] != -1) {
					dp[2][i] = Math.min(dp[2][i] == -1 ? Integer.MAX_VALUE : dp[2][i],1 + dp[1][i]);
				}
			}
		}
		int res = Integer.MAX_VALUE;
		if (dp[0][obstacles.length - 1] != -1) {
			res = dp[0][obstacles.length - 1];
		}
		if (dp[1][obstacles.length - 1] != -1) {
			res = Math.min(res,dp[1][obstacles.length - 1]);
		}
		if (dp[2][obstacles.length - 1] != -1) {
			res = Math.min(res,dp[2][obstacles.length - 1]);
		}
		return res;
	}
}