class Solution {
	boolean isValid(String s) {
		if (s == null || s.length() == 0) {
			return false;
		}
		Stack<String> stack = new Stack<String>();
		for (int i = 0; i < s.length(); i++) {
			String node = s.charAt(i) + "";
			if (stack.isEmpty()) {
				stack.push(node);
			} 
			else {
				String top = stack.peek();
				if ("]".equals(node) && "[".equals(top)) {
					stack.pop();
				} 
				else if ("}".equals(node) && "{".equals(top)) {
					stack.pop();
				} 
				else if (")".equals(node) && "(".equals(top)) {
					stack.pop();
				} 
				else {
					stack.push(node);
				}
			}
		}
		return stack.isEmpty();
	}
	boolean isValid(String s) {
		if (s == null || s.length() == 0) {
			return false;
		}
		Stack<Character> stack = new Stack<>();
		for (int i = 0; i < s.length(); i++) {
			char node = s.charAt(i);
			if ('(' == node) {
				stack.push(')');
			} 
			else if ('{' == node) {
				stack.push('}');
			} 
			else if ('[' == node) {
				stack.push(']');
			} 
			else if (stack.isEmpty() || stack.pop() != node) {
				return false;
			}
		}
		return stack.isEmpty();
	}
}