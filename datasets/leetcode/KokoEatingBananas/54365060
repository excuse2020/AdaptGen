class Solution {
	int findk(int[] piles, int h) {
		int totalH = 0;
		int N = piles.length;
		for (int i = 0; i < N; i++) {
			totalH += Math.ceil((double) piles[i] / (double) h);
		}
		return totalH;
	}
	int findmax(int[] piles, int n) {
		int maxi = Integer.MIN_VALUE;
		for (int num: piles) {	
			maxi = Math.max(maxi,num);
		}
		return maxi;
	}
	int minEatingSpeed(int[] piles, int h) {
		int maxElement = findmax(piles,piles.length);
		int low = 1;
		int high = maxElement;
		while (low <= high) {
			int mid = (low + high) / 2;
			int ans = findk(piles,mid);
			if (ans <= h) {
				high = mid - 1;
			} 
			else {
				low = mid + 1;
			}
		}
		return low;
	}
}