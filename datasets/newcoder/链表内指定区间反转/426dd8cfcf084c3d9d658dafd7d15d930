class Solution {
	ListNode reverseBetween(ListNode head, int m, int n) {
		if (head == null || head.next == null || m == n) {
			return head;
		}
		ListNode headOfSubList = head;
		ListNode endOfSubList = head;
		ListNode prevOfInsert = new ListNode(-1);
		prevOfInsert.next = head;
		int i = 1;
		int j = 1;
		while (i < m) {
			i++;
			prevOfInsert = prevOfInsert.next;
			headOfSubList = headOfSubList.next;
		}
		while (j < n) {
			j++;
			endOfSubList = endOfSubList.next;
		}
		ListNode nextOfInsert = endOfSubList.next;
		prevOfInsert.next = nextOfInsert;
		endOfSubList.next = null;
		ListNode toBeInsert = null;
		while (headOfSubList != null) {
			toBeInsert = headOfSubList;
			headOfSubList = headOfSubList.next;
			toBeInsert.next = nextOfInsert;
			prevOfInsert.next = toBeInsert;
			nextOfInsert = toBeInsert;
		}
		if (m == 1) {
			return toBeInsert;
		}
		return head;
	}
}