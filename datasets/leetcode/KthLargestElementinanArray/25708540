class Solution {
	int findKthLargest(int[] nums, int k) {
		k = nums.length - k;
		int kthLargest = quickSelect(nums,0,nums.length - 1,k);
		return kthLargest;
	}
	int partion(int[] nums, int lo, int hi, int pivot) {
		int i = lo, j = lo;
		while (i <= hi) {
			if (nums[i] > pivot) {
				i++;
			} 
			else {
				swap(nums,i,j);
				i++;
				j++;
			}
		}
		return j - 1;
	}
	int quickSelect(int[] nums, int lo, int hi, int k) {
		int pivot = nums[hi];
		int pivotIndex = partion(nums,lo,hi,pivot);
		if (pivotIndex == k) {
			return nums[pivotIndex];
		} 
		else if (pivotIndex < k) {
			return quickSelect(nums,pivotIndex + 1,hi,k);
		} 
		else {
			return quickSelect(nums,lo,pivotIndex - 1,k);
		}
	}
	void swap(int[] nums, int i, int j) {
		int temp = nums[i];
		nums[i] = nums[j];
		nums[j] = temp;
	}
}