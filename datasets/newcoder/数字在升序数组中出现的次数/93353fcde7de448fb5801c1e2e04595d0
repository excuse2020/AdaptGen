class Solution {
	int GetNumberOfK(int[] nums, int k) {
		int count = 0;
		int leftIndex = leftMost(nums,k);
		int rightIndex = rightMost(nums,k);
		if (leftIndex == -1 || rightIndex == -1) {
			return 0;
		}
		count = rightIndex - leftIndex + 1;
		return count;
	}
	int leftMost(int[] nums, int k) {
		int location = -1;
		if (nums.length == 0) {
			return location;
		}
		int pLeft = 0;
		int pRight = nums.length - 1;
		while (pLeft <= pRight) {
			int pMid = (pLeft + pRight) / 2;
			if (nums[pMid] < k) {
				pLeft++;
			} 
			else if (nums[pMid] > k) {
				pRight--;
			} 
			else {
				location = pMid;
				pRight--;
			}
		}
		return location;
	}
	int rightMost(int[] nums, int k) {
		int location = -1;
		if (nums.length == 0) {
			return location;
		}
		int pLeft = 0;
		int pRight = nums.length - 1;
		while (pLeft <= pRight) {
			int pMid = (pLeft + pRight) / 2;
			if (nums[pMid] < k) {
				pLeft++;
			} 
			else if (nums[pMid] > k) {
				pRight--;
			} 
			else {
				location = pMid;
				pLeft++;
			}
		}
		return location;
	}
}