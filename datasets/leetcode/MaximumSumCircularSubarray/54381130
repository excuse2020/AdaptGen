class Solution {
	int kedane(int[] nums) {
		int n = nums.length;
		int res = Integer.MIN_VALUE;
		int sum = 0;
		for (int i = 0; i < n; i++) {
			sum += nums[i];
			res = Math.max(res,sum);
			if (sum < 0) {
				sum = 0;
			}
		}
		return res;
	}
	int maxSubarraySumCircular(int[] nums) {
		int nor_sum = kedane(nums);
		if (nor_sum < 0) {
			return nor_sum;
		}
		int total = 0;
		int n = nums.length;
		for (int i = 0; i < n; i++) {
			total += nums[i];
			nums[i] = -nums[i];
		}
		int min_sum = kedane(nums);
		int cir_sum = total + min_sum;
		return Math.max(nor_sum,cir_sum);
	}
}