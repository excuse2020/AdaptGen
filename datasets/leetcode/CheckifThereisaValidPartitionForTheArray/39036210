class Solution {
	Boolean dp = null;
	boolean validPartition(int[] nums) {
		int n = nums.length;
		dp = new Boolean[n];
		if (n == 2) {
			return nums[0] == nums[1];
		}
		return validate(nums,0,n);
	}
	boolean validate(int[] nums, int i, int n) {
		if (n == i) {
			return true;
		}
		if (dp[i] != null) {
			return dp[i];
		}
		boolean res = false;
		if (i + 1 < n && nums[i] == nums[i + 1]) {
			res = validate(nums,i + 2,n);
			if (i + 2 < n && nums[i] == nums[i + 2]) {
				res = res || validate(nums,i + 3,n);
			}
		}
		if (i + 2 < n && nums[i + 1] - nums[i] == 1 && nums[i + 2] - nums[i + 1] == 1) {
			res = validate(nums,i + 3,n);
		}
		return dp[i] = res;
	}
}