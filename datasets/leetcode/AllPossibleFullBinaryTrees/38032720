class Solution {
	int DEFAULT_VALUE = 0;
	Map<Integer, List<TreeNode>> memo = new HashMap<>();
	List<TreeNode> allPossibleFBT(int n) {
		return dp(n);
	}
	List<TreeNode> dp(int n) {
		if (n % 2 == 0) {
			memo.put(n,Collections.emptyList());
			return memo.get(n);
		}
		if (n == 1) {
			memo.put(n,List.of(new TreeNode(DEFAULT_VALUE, null, null)));
			return memo.get(n);
		}
		if (!memo.containsKey(n)) {
			List<TreeNode> trees = new ArrayList<>();
			for (int leftChildrenCount = 0; leftChildrenCount < n - 1; leftChildrenCount++) {
				int rightChildrenCount = n - 1;
				for (TreeNode leftChild: dp(leftChildrenCount)) {	
					for (TreeNode rightChild: dp(rightChildrenCount)) {	
						TreeNode newNode = new TreeNode(DEFAULT_VALUE, leftChild, rightChild);
						trees.add(newNode);
					}
				}
			}
			memo.put(n,trees);
			return memo.get(n);
		}
		return memo.get(n);
	}
}