class Solution {
	int minFallingPathSum(int[][] matrix) {
		int depth = matrix.length;
		int ans = Integer.MAX_VALUE;
		for (int i = 0; i < matrix[0].length; i++) {
			ans = Math.min(ans,solve(matrix,0,i,depth));
		}
		return ans;
	}
	int solve(int[][] arr, int i, int j, int depth) {
		int n = arr[i].length;
		int min = Integer.MAX_VALUE;
		if (i + 1 == depth) {
			return arr[i][j];
		}
		if (i + 1 < depth) {
			min = Math.min(min,arr[i][j] + solve(arr,i + 1,j,depth));
			if (j + 1 < n) {
				min = Math.min(min,arr[i][j] + solve(arr,i + 1,j + 1,depth));
			}
			if (j - 1 >= 0) {
				min = Math.min(min,arr[i][j] + solve(arr,i + 1,j - 1,depth));
			}
		}
		return min;
	}
}