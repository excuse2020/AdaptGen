class Solution {
	int LeastCommonParent(int l, int r) {
		if (l == r) {
			return l;
		} 
		else if (l / 2 > r / 2) {
			return LeastCommonParent(l / 2,r);
		} 
		else {
			return LeastCommonParent(l,r / 2);
		}
	}
	int[] cycleLengthQueries(int n, int[][] queries) {
		int ans = new int[queries.length];
		for (int i = 0; i < queries.length; i++) {
			int left = queries[i][0];
			int right = queries[i][1];
			int commonParent = LeastCommonParent(left,right);
			ans[i] = level(left) + level(right) - (2 * level(commonParent));
		}
		return ans;
	}
	int level(int x) {
		if (x <= 1) {
			return 0;
		}
		return (int) (Math.log(x) / Math.log(2));
	}
}