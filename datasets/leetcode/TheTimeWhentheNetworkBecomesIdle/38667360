class Solution {
	int networkBecomesIdle(int[][] edges, int[] delay) {
		int n = delay.length;
		HashMap<Integer, List<Integer>> net = new HashMap<>();
		for (int i = 0; i < edges.length; i++) {
			List<Integer> s1 = net.getOrDefault(edges[i][0],new ArrayList<>());
			List<Integer> s2 = net.getOrDefault(edges[i][1],new ArrayList<>());
			s1.add(edges[i][1]);
			s2.add(edges[i][0]);
			net.put(edges[i][0],s1);
			net.put(edges[i][1],s2);
		}
		int[] hop = new int[n];
		Queue<Integer> server = new LinkedList<>();
		server.add(0);
		hop[0] = 0;
		int hc = 0;
		while (!server.isEmpty()) {
			int len = server.size();
			hc++;
			for (int i = 0; i < len; i++) {
				int node = server.remove();
				for (int x: net.get(node)) {	
					if (x == 0 || hop[x] != 0) {
						continue;
					}
					server.add(x);
					hop[x] = hc;
				}
			}
		}
		int maxHop = 0;
		for (int i = 1; i < n; i++) {
			int totalHop = hop[i] * 2;
			if (totalHop > delay[i]) {
				int resend = (int) (totalHop - 1) / delay[i];
				totalHop += (delay[i] * resend);
			}
			maxHop = Math.max(maxHop,totalHop);
		}
		return maxHop + 1;
	}
}