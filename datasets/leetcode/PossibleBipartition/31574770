class Solution {
	boolean[] color;
	boolean ok = true;
	boolean[] visited;
	List<Integer>[] buildGraph(int n, int[][] dislikes) {
		List<Integer>[] graph = new LinkedList[n + 1];
		for (int i = 0; i <= n; i++) {
			graph[i] = new LinkedList<>();
		}
		for (int[] edge: dislikes) {	
			int v = edge[1];
			int w = edge[0];
			graph[v].add(w);
			graph[w].add(v);
		}
		return graph;
	}
	boolean possibleBipartition(int n, int[][] dislikes) {
		color = new boolean[n + 1];
		visited = new boolean[n + 1];
		List<Integer>[] graph = buildGraph(n,dislikes);
		for (int v = 1; v <= n; v++) {
			if (!visited[v]) {
				traverse(graph,v);
			}
		}
		return ok;
	}
	void traverse(List<Integer>[] graph, int v) {
		if (!ok) {
			return;
		}
		visited[v] = true;
		for (int w: graph[v]) {	
			if (!visited[w]) {
				color[w] = !color[v];
				traverse(graph,w);
			} 
			else {
				if (color[w] == color[v]) {
					ok = false;
					return;
				}
			}
		}
	}
}