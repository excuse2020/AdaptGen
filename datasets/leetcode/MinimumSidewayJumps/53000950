class Solution {
	int minSideJumps(int[] ar) {
		int n = ar.length;
		int l1 = new int[n];
		int l2 = new int[n];
		int l3 = new int[n];
		for (int i = 0; i < n; i++) {
			if (ar[i] == 1) {
				l1[i]++;
			}
			if (ar[i] == 2) {
				l2[i]++;
			}
			if (ar[i] == 3) {
				l3[i]++;
			}
		}
		int dp = new int[n][4];
		for (int i = 0; i < n; i++) {
			Arrays.fill(dp[i],-1);
		}
		return minSidejump(l1,l2,l3,l2,2,0,dp);
	}
	int minSidejump(int l1, int l2, int l3, int cur, int lane, int i, int dp) {
		if (i == l1.length - 1) {
			return 0;
		}
		if (dp[i][lane] != -1) {
			return dp[i][lane];
		}
		int take = Integer.MAX_VALUE;
		int ntake = Integer.MAX_VALUE;
		if (cur[i + 1] == 1 && lane == 2) {
			if (l1[i] != 1) {
				take = Math.min(take,1 + minSidejump(l1,l2,l3,l1,1,i,dp));
			}
			if (l3[i] != 1) {
				take = Math.min(take,1 + minSidejump(l1,l2,l3,l3,3,i,dp));
			}
		} 
		else if (cur[i + 1] == 1 && lane == 1) {
			if (l2[i] != 1) {
				take = Math.min(take,1 + minSidejump(l1,l2,l3,l2,2,i,dp));
			}
			if (l3[i] != 1) {
				take = Math.min(take,1 + minSidejump(l1,l2,l3,l3,3,i,dp));
			}
		} 
		else if (cur[i + 1] == 1 && lane == 3) {
			if (l1[i] != 1) {
				take = Math.min(take,1 + minSidejump(l1,l2,l3,l1,1,i,dp));
			}
			if (l2[i] != 1) {
				take = Math.min(take,1 + minSidejump(l1,l2,l3,l2,2,i,dp));
			}
		} 
		else {
			ntake = minSidejump(l1,l2,l3,cur,lane,i + 1,dp);
		}
		return dp[i][lane] = Math.min(take,ntake);
	}
}