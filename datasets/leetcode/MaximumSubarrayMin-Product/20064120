class Solution {
	int maxSumMinProduct(int[] nums) {
		long[] prefix = new long[nums.length];
		int mod = 1000000007;
		Stack<Integer> stack = new Stack<>();
		stack.push(0);
		prefix[0] = nums[0];
		long maxMinP = 0;
		for (int i = 1; i <= nums.length; i++) {
			if (i < nums.length) {
				prefix[i] = prefix[i - 1] + nums[i];
			}
			while (!stack.isEmpty() && (i == nums.length || nums[stack.peek()] > nums[i])) {
				int min = nums[stack.pop()];
				int index1 = stack.isEmpty() ? -1 : stack.peek();
				int index2 = i - 1;
				long sum = index1 < 0 ? prefix[index2] : ((prefix[index2] - prefix[index1]));
				maxMinP = Math.max(sum * min,maxMinP);
			}
			stack.push(i);
		}
		return (int) (maxMinP % mod);
	}
}