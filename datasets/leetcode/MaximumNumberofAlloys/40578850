class Solution {
	boolean checkAlloyPossible(List<Integer> compo, List<Integer> stock, List<Integer> cost, int budget, int alloys) {
		int val = 0;
		for (int i = 0; i < compo.size(); i++) {
			if (compo.get(i) * alloys < 0) {
				return false;
			}
			if (compo.get(i) * alloys < stock.get(i)) {
				continue;
			}
			val += ((compo.get(i) * alloys - stock.get(i)) * cost.get(i));
			if (val < 0 || val > budget) {
				return false;
			}
		}
		return true;
	}
	int maxNumberOfAlloys(int n, int k, int budget, List<List<Integer>> composition, List<Integer> stock, List<Integer> cost) {
		int ans = Integer.MIN_VALUE;
		for (int i = 0; i < k; i++) {
			ans = Math.max(noOfAlloys(composition.get(i),stock,cost,budget),ans);
		}
		return ans;
	}
	int noOfAlloys(List<Integer> compo, List<Integer> stock, List<Integer> cost, int budget) {
		int left = 0;
		int right = Integer.MAX_VALUE;
		int ans = 0;
		while (left <= right) {
			int mid = (left / 2) + (right / 2);
			if (checkAlloyPossible(compo,stock,cost,budget,mid)) {
				left = mid + 1;
				ans = mid;
			} 
			else {
				right = mid - 1;
			}
		}
		return ans;
	}
}