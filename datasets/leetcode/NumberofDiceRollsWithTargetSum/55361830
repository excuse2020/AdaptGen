class Solution {
	long MOD = 1000000007;
	int numRollsToTarget(int n, int k, int target) {
		return solveUsingSO(n,k,target);
	}
	int solveUsingMem(int n, int k, int target, int[][] dp) {
		if (target == 0 && n == 0) {
			return 1;
		}
		if (target != 0 && n == 0) {
			return 0;
		}
		if (target == 0 && n != 0) {
			return 0;
		}
		if (dp[n][target] != -1) {
			return dp[n][target];
		}
		long ans = 0;
		for (int i = 1; i <= k; i++) {
			long recAns = 0;
			if (target - i >= 0) {
				recAns = solveUsingMem(n - 1,k,target - i,dp) % MOD;
			}
			ans = (ans % MOD + recAns % MOD) % MOD;
		}
		dp[n][target] = (int) ans;
		return dp[n][target];
	}
	int solveUsingRec(int n, int k, int target) {
		if (target == 0 && n == 0) {
			return 1;
		}
		if (target != 0 && n == 0) {
			return 0;
		}
		if (target == 0 && n != 0) {
			return 0;
		}
		int ans = 0;
		for (int i = 1; i <= k; i++) {
			if (target - i >= 0) {
				ans += solveUsingRec(n - 1,k,target - i);
			}
		}
		return ans;
	}
	int solveUsingSO(int n, int k, int target) {
		int[] next = new int[target + 1];
		int[] curr = new int[target + 1];
		next[0] = 1;
		for (int d = 1; d <= n; d++) {
			for (int j = 1; j <= target; j++) {
				long ans = 0;
				for (int i = 1; i <= k; i++) {
					long recAns = 0;
					if (j - i >= 0) {
						recAns = (next[j - i]) % MOD;
					}
					ans = (ans % MOD + recAns % MOD) % MOD;
				}
				curr[j] = (int) ans;
			}
			System.arraycopy(curr,0,next,0,target + 1);
		}
		return next[target];
	}
	int solveUsingTab(int n, int k, int target) {
		int[][] dp = new int[n + 1][target + 1];
		dp[0][0] = 1;
		for (int d = 1; d <= n; d++) {
			for (int j = 1; j <= target; j++) {
				long ans = 0;
				for (int i = 1; i <= k; i++) {
					long recAns = 0;
					if (j - i >= 0) {
						recAns = (dp[d - 1][j - i]) % MOD;
					}
					ans = (ans % MOD + recAns % MOD) % MOD;
				}
				dp[d][j] = (int) ans;
			}
		}
		return dp[n][target];
	}
}