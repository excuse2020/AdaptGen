class Solution {
	int ans = Integer.MAX_VALUE;
	int greatest(int[] arr) {
		int i;
		int max = arr[0];
		for (i = 1; i < arr.length; i++) {
			if (arr[i] > max) {
				max = arr[i];
			}
		}
		return max;
	}
	int minimumTimeRequired(int[] jobs, int k) {
		int n = jobs.length;
		int[] works = new int[n];
		for (int i = 0; i < jobs.length; i++) {
			for (int j = i + 1; j < jobs.length; j++) {
				if (jobs[i] < jobs[j]) {
					int temp = jobs[i];
					jobs[i] = jobs[j];
					jobs[j] = temp;
				}
			}
		}
		if (n == k) {
			return jobs[0];
		}
		int idx = 0;
		solve(idx,k,n,jobs,works);
		return ans;
	}
	void solve(int idx, int k, int n, int[] jobs, int[] works) {
		if (idx == n) {
			ans = Math.min(greatest(works),ans);
			return;
		}
		if (greatest(works) >= ans) {
			return;
		}
		for (int i = 0; i < k; i++) {
			if (i > 0 && works[i] == works[i - 1]) {
				continue;
			}
			works[i] += jobs[idx];
			solve(idx + 1,k,n,jobs,works);
			works[i] -= jobs[idx];
		}
	}
}