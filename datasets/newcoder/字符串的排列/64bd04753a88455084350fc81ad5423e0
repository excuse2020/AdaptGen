class Solution {
	Set<String> list = new HashSet<>();
	ArrayList<String> Permutation(String str) {
		char[] c = str.toCharArray();
		StringBuffer sb = new StringBuffer();
		int n = c.length;
		boolean[] isV = new boolean[n];
		dfs(c,isV,0,sb);
		return new ArrayList<>(list);
	}
	void dfs(char[] c, boolean[] isV, int index, StringBuffer sb) {
		if (sb.toString().length() == c.length) {
			list.add(sb.toString());
		}
		for (int i = 0; i < c.length; i++) {
			if (isV[i]) {
				continue;
			}
			sb.append(c[i]);
			isV[i] = true;
			dfs(c,isV,index + 1,sb);
			isV[i] = false;
			sb.deleteCharAt(sb.length() - 1);
		}
	}
}