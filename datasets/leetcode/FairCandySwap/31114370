class Solution {
	int binarySearch(int[] arr, int target) {
		int mid, l = 0, r = arr.length - 1;
		while (r >= l) {
			mid = (l + r) / 2;
			if (arr[mid] == target) {
				return mid;
			} 
			else if (arr[mid] > target) {
				r = mid - 1;
			} 
			else {
				l = mid + 1;
			}
		}
		return -1;
	}
	int[] fairCandySwap(int[] aliceSizes, int[] bobSizes) {
		int[] answer = new int[2];
		int sumAliceCandy = sumOfArray(aliceSizes);
		int sumBobCandy = sumOfArray(bobSizes);
		int halfTotalCandy = (sumBobCandy + sumAliceCandy) / 2;
		Arrays.sort(bobSizes);
		for (int i = 0; i < aliceSizes.length; i++) {
			int neededFromBob = halfTotalCandy - (sumAliceCandy - aliceSizes[i]);
			int bobBoxPos = binarySearch(bobSizes,neededFromBob);
			if (bobBoxPos != -1) {
				answer[0] = aliceSizes[i];
				answer[1] = neededFromBob;
				return answer;
			}
		}
		return answer;
	}
	int sumOfArray(int[] arr) {
		int sum = 0;
		for (int i = 0; i < arr.length; i++) {
			sum += arr[i];
		}
		return sum;
	}
}