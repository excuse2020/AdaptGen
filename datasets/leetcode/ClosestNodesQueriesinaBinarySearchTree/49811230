class Solution {
	List<List<Integer>> ans;
	List<Integer> arr;
	List<List<Integer>> closestNodes(TreeNode root, List<Integer> queries) {
		ans = new ArrayList<>();
		arr = new ArrayList<>();
		inorder(root);
		int[] a = new int[arr.size()];
		for (int i = 0; i < a.length; i++) {
			a[i] = arr.get(i);
		}
		for (int x: queries) {	
			int st = 0;
			int en = a.length - 1;
			int ind = -1;
			while (st <= en) {
				int mid = (st + en) / 2;
				if (a[mid] == x) {
					ind = mid;
					break;
				} 
				else if (a[mid] > x) {
					en = mid - 1;
				} 
				else {
					st = mid + 1;
				}
			}
			if (ind != -1 && a[ind] == x) {
				List<Integer> l = new ArrayList<>();
				l.add(x);
				l.add(x);
				ans.add(l);
			} 
			else if (ind == -1) {
				if (en >= 0 && st < a.length) {
					List<Integer> l = new ArrayList<>();
					l.add(a[en]);
					l.add(a[st]);
					ans.add(l);
				} 
				else if (en < 0) {
					List<Integer> l = new ArrayList<>();
					l.add(-1);
					l.add(a[st]);
					ans.add(l);
				} 
				else if (st >= a.length) {
					List<Integer> l = new ArrayList<>();
					l.add(a[en]);
					l.add(-1);
					ans.add(l);
				}
			}
		}
		return ans;
	}
	void inorder(TreeNode root) {
		if (root == null) {
			return;
		}
		inorder(root.left);
		arr.add(root.val);
		inorder(root.right);
	}
}