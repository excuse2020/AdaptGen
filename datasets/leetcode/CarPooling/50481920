class Solution {
	boolean carPooling(int[][] trips, int capacity) {
		PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> {a[2] - b[2]});
		Arrays.sort(trips,(a, b) -> {a[1] - b[1]});
		pq.add(trips[0]);
		int count = trips[0][0];
		if (count > capacity) {
			return false;
		}
		for (int i = 1; i < trips.length; i++) {
			if (trips[i][1] < pq.peek()[2]) {
				count += trips[i][0];
			} 
			else {
				while (!pq.isEmpty() && trips[i][1] >= pq.peek()[2]) {
					count -= pq.peek()[0];
					pq.poll();
				}
				count += (trips[i][0]);
			}
			pq.add(trips[i]);
			if (count > capacity) {
				return false;
			}
		}
		return true;
	}
}