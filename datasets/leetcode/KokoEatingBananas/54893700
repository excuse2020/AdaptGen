class Solution {
	int count(int arr, int mid) {
		int cnt = 0;
		for (int i = 0; i < arr.length; i++) {
			if (arr[i] <= mid) {
				cnt += 1;
			} 
			else {
				cnt += Math.ceil((double) (arr[i]) / (double) (mid));
			}
		}
		return cnt;
	}
	int findmax(int arr) {
		int ans = Integer.MIN_VALUE;
		for (int i = 0; i < arr.length; i++) {
			ans = Math.max(arr[i],ans);
		}
		return ans;
	}
	int minEatingSpeed(int[] piles, int h) {
		int ans = 1;
		int start = 1;
		int end = findmax(piles);
		while (start <= end) {
			int mid = start + (end - start) / 2;
			int cnt = count(piles,mid);
			if (cnt <= h) {
				ans = mid;
				end = mid - 1;
			} 
			else {
				start = mid + 1;
			}
		}
		return ans;
	}
}