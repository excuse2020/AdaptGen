class Solution {
	int f(int i, int buy, int[] prices, int limit) {
		if (i == prices.length) {
			return 0;
		}
		if (limit == 0) {
			return 0;
		}
		int profit = 0;
		if (buy == 1) {
			profit = Math.max(-prices[i] + f(i + 1,0,prices,limit),0 + f(i + 1,1,prices,limit));
		} 
		else {
			profit = Math.max(prices[i] + f(i + 1,1,prices,limit - 1),0 + f(i + 1,0,prices,limit));
		}
		return profit;
	}
	int fm(int i, int buy, int[] prices, int limit, int[][][] dp) {
		if (i == prices.length) {
			return 0;
		}
		if (limit == 0) {
			return 0;
		}
		if (dp[i][buy][limit] != -1) {
			return dp[i][buy][limit];
		}
		int profit = 0;
		if (buy == 1) {
			profit = Math.max(-prices[i] + fm(i + 1,0,prices,limit,dp),0 + fm(i + 1,1,prices,limit,dp));
		} 
		else {
			profit = Math.max(prices[i] + fm(i + 1,1,prices,limit - 1,dp),0 + fm(i + 1,0,prices,limit,dp));
		}
		dp[i][buy][limit] = profit;
		return dp[i][buy][limit];
	}
	int ftab(int[] prices) {
		int n = prices.length;
		int[][][] dp = new int[n + 1][2][3];
		dp[n][0][0] = dp[n][1][0] = 0;
		for (int i = n - 1; i >= 0; i--) {
			for (int buy = 0; buy <= 1; buy++) {
				for (int limit = 1; limit <= 2; limit++) {
					int profit = 0;
					if (buy == 1) {
						profit = Math.max(-prices[i] + dp[i + 1][0][limit],0 + dp[i + 1][1][limit]);
					} 
					else {
						profit = Math.max(prices[i] + dp[i + 1][1][limit - 1],0 + dp[i + 1][0][limit]);
					}
					dp[i][buy][limit] = profit;
				}
			}
		}
		return dp[0][1][2];
	}
	int maxProfit(int[] prices) {
		int n = prices.length;
		int[][] after = new int[2][3];
		int[][] cur = new int[2][3];
		for (int i = n - 1; i >= 0; i--) {
			for (int buy = 0; buy <= 1; buy++) {
				for (int limit = 1; limit <= 2; limit++) {
					int profit = 0;
					if (buy == 1) {
						profit = Math.max(-prices[i] + after[0][limit],0 + after[1][limit]);
					} 
					else {
						profit = Math.max(prices[i] + after[1][limit - 1],0 + after[0][limit]);
					}
					cur[buy][limit] = profit;
				}
				after = cur;
			}
		}
		return after[1][2];
	}
}