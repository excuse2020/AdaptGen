class Solution {
	int binarySearchForLeftIndex(int[] nums, int left, int right, int target) {
		while (left <= right) {
			int mid = left + (right - left) / 2;
			if (nums[mid] == target) {
				right = mid - 1;
			} 
			else if (nums[mid] > target) {
				right = mid - 1;
			} 
			else {
				left = mid + 1;
			}
		}
		if (nums[left] == target) {
			return left;
		}
		return -1;
	}
	int binarySearchForRightIndex(int[] nums, int left, int right, int target) {
		while (left <= right) {
			int mid = left + (right - left) / 2;
			if (nums[mid] == target) {
				left = mid + 1;
			} 
			else if (nums[mid] > target) {
				right = mid - 1;
			} 
			else {
				left = mid + 1;
			}
		}
		if (right >= 0 && nums[right] == target) {
			return right;
		}
		return -1;
	}
	int search(int[] nums, int target) {
		if (nums == null || nums.length == 0) {
			return -1;
		}
		int rightIndex = binarySearchForRightIndex(nums,0,nums.length - 1,target);
		return binarySearchForLeftIndex(nums,0,nums.length - 1,target);
	}
}