class Solution {
	long edge;
	int nodes;
	int countCompleteComponents(int n, int[][] edges) {
		List<List<Integer>> list = new ArrayList<List<Integer>>();
		for (int i = 1; i <= n; i++) {
			list.add(new ArrayList<Integer>());
		}
		for (int[] arr: edges) {	
			list.get(arr[0]).add(arr[1]);
			list.get(arr[1]).add(arr[0]);
		}
		int count = 0;
		boolean[] visited = new boolean[n];
		for (int i = 0; i < n; i++) {
			if (!visited[i]) {
				edge = 0l;
				nodes = 0;
				dfs(list,i,visited);
				if ((edge / 2) == 1l * ((nodes * (nodes - 1)) / 2)) {
					count++;
				}
			}
		}
		return count;
	}
	void dfs(List<List<Integer>> list, int start, boolean[] visited) {
		visited[start] = true;
		nodes++;
		List<Integer> l = list.get(start);
		for (int nbr: l) {	
			edge++;
			if (!visited[nbr]) {
				dfs(list,nbr,visited);
			}
		}
	}
}