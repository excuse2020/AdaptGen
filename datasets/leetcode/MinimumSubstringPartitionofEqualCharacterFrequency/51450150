class Solution {
	boolean isSame(int[] map) {
		int prev = -1;
		for (int i: map) {	
			if (i == 0) {
				continue;
			}
			if (prev == -1) {
				prev = i;
			} 
			else if (prev != i) {
				return false;
			}
		}
		return true;
	}
	int minPartation(char[] str, int start, int idx, int[][] dp, int[] frq) {
		if (idx >= str.length) {
			return Integer.MAX_VALUE;
		}
	}
	int minimumSubstringsInPartition(String s) {
		char[] str = s.toCharArray();
		int[] charFrq = new int[26];
		int[][] dp = new int[str.length + 1][str.length + 1];
		for (int[] d: dp) {	
			Arrays.fill(d,-1);
		}
		return minPartation(str,0,0,dp,charFrq);
	}
}