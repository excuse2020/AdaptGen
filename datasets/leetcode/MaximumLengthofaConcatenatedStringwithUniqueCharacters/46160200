class Solution {
	List<String> getuniquecombinations(List<String> arr, int pos) {
		List<String> strLst = new ArrayList<>();
		if (pos == arr.size()) {
			return strLst;
		}
		if (isUnique(arr.get(pos))) {
			strLst.add(arr.get(pos));
		}
		List<String> nextlst = getuniquecombinations(arr,pos + 1);
		if (nextlst.size() > 0) {
			strLst.addAll(nextlst);
		}
		for (String str: nextlst) {	
			String combined = arr.get(pos) + str;
			if (isUnique(combined)) {
				strLst.add(combined);
			}
		}
		return strLst;
	}
	boolean isUnique(String str) {
		int[] arr = new int[26];
		int i = 0;
		int pos;
	}
	int maxLength(List<String> arr) {
		List<String> allCombinations = getuniquecombinations(arr,0);
		int maxL = 0;
		for (String str: allCombinations) {	
			maxL = Math.max(maxL,str.length());
		}
		return maxL;
	}
}