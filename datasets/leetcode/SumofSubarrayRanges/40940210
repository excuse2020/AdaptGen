class Solution {
	long subArrayRanges(int[] nums) {
		int n = nums.length;
		long[] leftMin = new long[n];
		long[] leftMax = new long[n];
		long[] rightMin = new long[n];
		long[] rightMax = new long[n];
		Stack<Integer> minStack = new Stack<>();
		Stack<Integer> maxStack = new Stack<>();
		for (int i = 0; i < n; i++) {
			while (!minStack.isEmpty() && nums[i] < nums[minStack.peek()]) {
				minStack.pop();
			}
			leftMin[i] = minStack.isEmpty() ? -1 : minStack.peek();
			minStack.push(i);
			while (!maxStack.isEmpty() && nums[i] > nums[maxStack.peek()]) {
				maxStack.pop();
			}
			leftMax[i] = maxStack.isEmpty() ? -1 : maxStack.peek();
			maxStack.push(i);
		}
		minStack.clear();
		maxStack.clear();
		for (int i = n - 1; i >= 0; i--) {
			while (!minStack.isEmpty() && nums[i] <= nums[minStack.peek()]) {
				minStack.pop();
			}
			rightMin[i] = minStack.isEmpty() ? n : minStack.peek();
			minStack.push(i);
			while (!maxStack.isEmpty() && nums[i] >= nums[maxStack.peek()]) {
				maxStack.pop();
			}
			rightMax[i] = maxStack.isEmpty() ? n : maxStack.peek();
			maxStack.push(i);
		}
		long sumMin = 0;
		long sumMax = 0;
		for (int i = 0; i < n; i++) {
			sumMin += (long) (nums[i] * (i - leftMin[i]));
			sumMax += (long) (nums[i] * (i - leftMax[i]));
		}
		return sumMax - sumMin;
	}
}