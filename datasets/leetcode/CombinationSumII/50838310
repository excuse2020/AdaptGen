class Solution {
	List<List<Integer>> combinationSum2(int[] candidates, int target) {
		List<List<Integer>> ans = new ArrayList<>();
		int n = candidates.length;
		Arrays.sort(candidates);
		List<Integer> ar = new ArrayList<>();
		solve(candidates,0,n,target,ans,ar);
		return ans;
	}
	void solve(int nums, int i, int n, int sum, List<List<Integer>> ans, List<Integer> ar) {
		if (sum == 0) {
			ans.add(new ArrayList<>(ar));
			return;
		} 
		else if (i > n || sum < 0) {
			return;
		}
		for (int j = i; j < n; j++) {
			if ((j != i && nums[j] != nums[j - 1]) || j == i) {
				ar.add(nums[j]);
				solve(nums,j + 1,n,sum - nums[j],ans,ar);
				ar.remove(ar.size() - 1);
			}
		}
	}
}