class Solution {
	int help(int[] c) {
		int max = Integer.MIN_VALUE;
		for (int i: c) {	
			max = max > i ? max : i;
		}
		return max;
	}
	int maxStarSum(int[] vals, int[][] edges, int k) {
		if (k <= 0 || edges.length == 0) {
			return help(vals);
		}
		Map<Integer, Queue<Integer>> map = new HashMap<>();
		int ans = 0;
		for (int i: edges) {	
			Queue<Integer> t = map.getOrDefault(i[0],new PriorityQueue<>(Collections.reverseOrder()));
			Queue<Integer> t1 = map.getOrDefault(i[1],new PriorityQueue<>(Collections.reverseOrder()));
			t.add(vals[i[1]]);
			t1.add(vals[i[0]]);
			map.put(i[0],t);
			map.put(i[1],t1);
		}
		for (int i: map.keySet()) {	
			Queue<Integer> t = map.get(i);
			int co = 0;
			int sum = vals[i];
			while (co < k && !t.isEmpty()) {
				sum += t.poll();
				co++;
				ans = ans < sum ? sum : ans;
			}
		}
		int max = help(vals);
		return ans < max ? max : ans;
	}
}