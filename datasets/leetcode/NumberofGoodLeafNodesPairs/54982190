class Solution {
	int ans = 0;
	int[] change(int arr, int d) {
		int f = 0;
		for (int i = d; i >= 1; i--) {
			arr[i] = arr[i - 1];
			if (arr[i] != 0) {
				f = 1;
			}
		}
		if (f == 1) {
			return arr;
		}
		return new int[0];
	}
	int countPairs(TreeNode root, int distance) {
		if (distance == 1) {
			return 0;
		}
		trav(root,distance);
		return ans;
	}
	int[] trav(TreeNode root, int d) {
		if (root == null) {
			return new int[0];
		}
		if (root.left == null && root.right == null) {
			int arr = new int[d + 1];
			arr[1] = 1;
			return arr;
		}
		int left = trav(root.left,d);
		int right = trav(root.right,d);
		if (left.length > 0 && right.length > 0) {
			for (int i = 1; i <= d; i++) {
				for (int j = 1; j <= d - i; j++) {
					if (i + j <= d && left[i] > 0 && right[j] > 0) {
						ans = ans + (left[i] * right[j]);
					}
				}
			}
			int f = 0;
			for (int i = d; i >= 1; i--) {
				left[i] = right[i - 1] + left[i - 1];
				if (left[i] != 0) {
					f = 1;
				}
			}
			if (f == 1) {
				return left;
			} 
			else {
				return new int[0];
			}
		} 
		else {
			if (left.length > 0) {
				return change(left,d);
			} 
			else {
				if (right.length > 0) {
					return change(right,d);
				}
			}
		}
		return new int[0];
	}
}