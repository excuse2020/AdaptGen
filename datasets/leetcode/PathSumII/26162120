class Solution {
	void dfs(TreeNode root, int ts, List<List<Integer>> res, List<Integer> list) {
		if (root == null) {
			return;
		}
		list.add(root.val);
		if (root.left == null && root.right == null) {
			if ((ts - root.val) == 0) {
				res.add(new ArrayList<>(list));
			}
			return;
		}
		if (root.left != null) {
			dfs(root.left,ts - root.val,res,list);
			list.remove(list.size() - 1);
		}
		if (root.right != null) {
			dfs(root.right,ts - root.val,res,list);
			list.remove(list.size() - 1);
		}
	}
	List<List<Integer>> pathSum(TreeNode root, int targetSum) {
		List<List<Integer>> res = new ArrayList<>();
		List<Integer> list = new ArrayList<>();
		dfs(root,targetSum,res,list);
		return res;
	}
}