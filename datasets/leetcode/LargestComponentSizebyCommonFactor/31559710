class Solution {
	int find(int j, int[] parent) {
		if (parent[j] == j) {
			return j;
		} 
		else {
			return parent[j] = find(parent[j],parent);
		}
	}
	int largestComponentSize(int[] nums) {
		int[] parent = new int[100001];
		for (int i = 0; i <= 100000; i++) {
			parent[i] = i;
		}
		int[] rank = new int[100001];
		int n = nums.length;
		for (int i = 0; i < n; i++) {
			for (int j = 2; j * j <= nums[i]; j++) {
				if (nums[i] % j == 0) {
					int a = find(j,parent);
					int b = find(nums[i],parent);
					if (rank[a] > rank[b]) {
						parent[b] = a;
						rank[a]++;
					} 
					else {
						parent[a] = b;
						rank[b]++;
					}
				}
				if (nums[i] % j == 0 && nums[i] % (nums[i] / j) == 0) {
					int a = find(nums[i] / j,parent);
					int b = find(nums[i],parent);
					if (rank[a] > rank[b]) {
						parent[b] = a;
						rank[a]++;
					} 
					else {
						parent[a] = b;
						rank[b]++;
					}
				}
			}
		}
		int max = 1;
		HashMap<Integer, Integer> map = new HashMap<>();
		for (int i = 0; i < n; i++) {
			int a = find(nums[i],parent);
			if (map.containsKey(a)) {
				int p = map.get(a);
				map.put(a,p + 1);
				max = Math.max(p + 1,max);
			} 
			else {
				map.put(a,1);
			}
		}
		return max;
	}
}