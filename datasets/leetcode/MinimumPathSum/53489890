class Solution {
	int count(int[][] grid, int n, int m, int[][] dp) {
		if (m == 0 && n == 0) {
			return grid[m][n];
		}
		if (m < 0 || n < 0) {
			return (int) 1e9;
		}
		if (dp[m][n] != -1) {
			return dp[m][n];
		}
		int up = grid[m][n] + count(grid,n,m - 1,dp);
		int left = grid[m][n] + count(grid,n - 1,m,dp);
		return dp[m][n] = Math.min(left,up);
	}
	int minPathSum(int[][] grid) {
		int m = grid.length;
		int n = grid[0].length;
		int dp = new int[m][n];
		for (int row: dp) {	
			Arrays.fill(row,-1);
		}
		return count(grid,n - 1,m - 1,dp);
	}
}