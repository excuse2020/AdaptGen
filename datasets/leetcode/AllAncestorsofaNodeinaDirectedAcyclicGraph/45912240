class Solution {
	void dfs(int s, List<List<Integer>> list, boolean[] visited) {
		if (visited[s] == true) {
			return;
		}
		visited[s] = true;
		for (int i: list.get(s)) {	
			if (visited[i] == false) {
				dfs(i,list,visited);
			}
		}
	}
	List<List<Integer>> getAncestors(int n, int[][] edges) {
		List<List<Integer>> list = new ArrayList<>();
		for (int i = 0; i < n; i++) {
			list.add(new ArrayList<>());
		}
		for (int[] temp: edges) {	
			int u = temp[0];
			int v = temp[1];
			list.get(v).add(u);
		}
		boolean[] visited = new boolean[n];
		List<List<Integer>> ans = new ArrayList<>();
		for (int i = 0; i < n; i++) {
			ans.add(new ArrayList<>());
		}
		for (int i = 0; i < n; i++) {
			dfs(i,list,visited);
			for (int j = 0; j < n; j++) {
				if (visited[j] == true && i != j) {
					ans.get(i).add(j);
				}
			}
			Arrays.fill(visited,Boolean.FALSE);
		}
		return ans;
	}
}