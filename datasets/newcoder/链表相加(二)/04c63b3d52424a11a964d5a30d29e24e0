class Solution {
	ListNode addInList(ListNode head1, ListNode head2) {
		Stack<ListNode> st1 = new Stack<>();
		Stack<ListNode> st2 = new Stack<>();
		ListNode start = new ListNode(-1);
		while (head1 != null) {
			st1.add(head1);
			head1 = head1.next;
		}
		while (head2 != null) {
			st2.add(head2);
			head2 = head2.next;
		}
		int jinwei = 0;
		while (!st1.isEmpty() && !st2.isEmpty()) {
			int nodeVal = st1.pop().val + st2.pop().val;
			jinwei = nodeVal / 10;
			ListNode temp = new ListNode(nodeVal % 10);
			temp.next = start.next;
			start.next = temp;
		}
		while (!st1.isEmpty()) {
			int nodeVal = st1.pop().val + jinwei;
			jinwei = nodeVal / 10;
			ListNode temp = new ListNode(nodeVal % 10);
			temp.next = start.next;
			start.next = temp;
		}
		while (!st2.isEmpty()) {
			int nodeVal = st2.pop().val + jinwei;
			jinwei = nodeVal / 10;
			ListNode temp = new ListNode(nodeVal % 10);
			temp.next = start.next;
			start.next = temp;
		}
		return start.next;
	}
}