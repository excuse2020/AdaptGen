class Solution {
	int numSubmatrixSumTarget(int[][] matrix, int target) {
		int m = matrix.length;
		int n = matrix[0].length;
		int[][] preSum = new int[m + 1][n + 1];
		for (int i = 1; i <= m; i++) {
			for (int j = 1; j <= n; j++) {
				preSum[i][j] = preSum[i - 1][j] + preSum[i][j - 1] - preSum[i - 1][j - 1];
			}
		}
		Map<Integer, Integer> map = new HashMap<>();
		int count = 0;
		for (int i = 1; i <= m; i++) {
			for (int j = i; j <= m; j++) {
				map.clear();
				map.put(0,1);
				for (int k = 1; k <= n; k++) {
					int curSum = preSum[j][k] - preSum[i - 1][k];
					count += map.getOrDefault(curSum - target,0);
					map.put(curSum,map.getOrDefault(curSum,0) + 1);
				}
			}
		}
		return count;
	}
}