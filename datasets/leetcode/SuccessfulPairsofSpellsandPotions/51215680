class Solution {
	int binSrch(int k, int[] potions, long success) {
		int low = 0, high = potions.length - 1;
		int mid = (high - low) / 2 + low;
		int count = 0;
		while (low < high) {
			long prod = (long) k * (long) potions[mid];
			if (prod >= success) {
				count = Math.max(count,potions.length - mid);
				high = mid;
			} 
			else {
				low = mid + 1;
			}
			mid = (high - low) / 2 + low;
		}
		long prod = (long) k * (long) potions[mid];
		if (count == 0 && low == high && prod >= success) {
			count = potions.length - mid;
		}
		return count;
	}
	int[] successfulPairs(int[] spells, int[] potions, long success) {
		Arrays.sort(potions);
		int[] ans = new int[spells.length];
		for (int i = 0; i < ans.length; i++) {
			ans[i] = binSrch(spells[i],potions,success);
		}
		return ans;
	}
}