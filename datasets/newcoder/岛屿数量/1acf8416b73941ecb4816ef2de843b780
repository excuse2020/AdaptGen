class Solution {
	char[][] grid;
	int m;
	int n;
	void dfs(int i, int j) {
		if (i < 0 || i >= n || j < 0 || j >= m || grid[i][j] == '0') {
			return;
		}
		grid[i][j] = '0';
		dfs(i + 1,j);
		dfs(i - 1,j);
		dfs(i,j + 1);
		dfs(i,j - 1);
	}
	int solve(char[][] grid) {
		if (grid == null || grid.length == 0 || grid[0].length == 0) {
			return 0;
		}
		this.grid = grid;
		this.n = grid.length;
		this.m = grid[0].length;
		int count = 0;
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < m; j++) {
				if (grid[i][j] == '1') {
					count++;
					dfs(i,j);
				}
			}
		}
		return count;
	}
}