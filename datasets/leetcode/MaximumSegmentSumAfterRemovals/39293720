class Solution {
	long[] maximumSegmentSum(int[] nums, int[] queries) {
		int n = nums.length;
		TreeMap<Long, Integer> map = new TreeMap<>();
		TreeSet<int[]> s = new TreeSet<>((a, b) -> {a[0] < b[0] ? -1 : 1});
		long[] ans = new long[n], prefix = new long[n];
		prefix[0] = (long) nums[0];
		for (int i = 1; i < n; i++) {
			prefix[i] = (long) nums[i] + prefix[i - 1];
		}
		s.add(new int{0, n - 1});
		map.put(prefix[n - 1],1);
		for (int i = 0; i < n; i++) {
			int[] curr = s.lower(new int{queries[i] + 1, queries[i] + 1});
			long res = prefix[curr[1]] - (curr[0] - 1 < 0 ? 0L : prefix[curr[0] - 1]);
			map.put(res,map.get(res) - 1);
			if (map.get(res) == 0) {
				map.remove(res);
			}
			if (curr[0] == queries[i] && curr[0] != curr[1]) {
				map.put(prefix[curr[1]] - prefix[curr[0]],map.getOrDefault(prefix[curr[1]] - prefix[curr[0]],0) + 1);
				s.add(new int{curr[0] + 1, curr[1]});
			} 
			else if (curr[1] == queries[i] && curr[0] != curr[1]) {
				map.put(prefix[curr[1] - 1] - (curr[0] - 1 < 0 ? 0L : prefix[curr[0] - 1]),map.getOrDefault(prefix[curr[1] - 1] - (curr[0] - 1 < 0 ? 0L : prefix[curr[0] - 1]),0) + 1);
				s.add(new int{curr[0], curr[1] - 1});
			} 
			else if (curr[0] != curr[1]) {
				long left = prefix[queries[i] - 1] - (curr[0] - 1 < 0 ? 0L : prefix[curr[0] - 1]), right = prefix[curr[1]] - prefix[queries[i]];
				map.put(left,map.getOrDefault(left,0) + 1);
				map.put(right,map.getOrDefault(right,0) + 1);
				s.add(new int{curr[0], queries[i] - 1});
				s.add(new int{queries[i] + 1, curr[1]});
			}
			ans[i] = map.isEmpty() ? 0 : map.lastKey();
		}
		return ans;
	}
}