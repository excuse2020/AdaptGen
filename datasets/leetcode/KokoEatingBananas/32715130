class Solution {
	int minEatingSpeed(int[] piles, int h) {
		int min = 1;
		int max = 0;
		for (int i = 0; i < piles.length; i++) {
			max = Math.max(max,piles[i]);
		}
		int ans = Integer.MAX_VALUE;
		while (min <= max) {
			int mid = (min + max) / 2;
			if (valid(mid,piles,h)) {
				ans = Math.min(ans,mid);
				max = mid - 1;
			} 
			else {
				min = mid + 1;
			}
		}
		return ans;
	}
	boolean valid(int temp, int[] piles, int h) {
		int count = 0;
		for (int i = 0; i < piles.length; i++) {
			count += piles[i] / temp;
			if (piles[i] % temp != 0) {
				count++;
			}
			if (count > h) {
				return false;
			}
		}
		return count <= h;
	}
}