class Solution {
	int[] getStrongest(int[] arr, int k) {
		Arrays.sort(arr);
		int n = arr.length;
		int idx = (n - 1) / 2;
		int med = arr[idx];
		Map<Integer, List<Integer>> map = new TreeMap<>(Collections.reverseOrder());
		for (int val: arr) {	
			int mod = Math.abs(val - med);
			List<Integer> al = map.getOrDefault(mod,new ArrayList<>());
			al.add(val);
			map.put(mod,al);
		}
		List<Integer> al = new ArrayList<>();
		for (int key: map.keySet()) {	
			List<Integer> list = map.get(key);
			for (int i = list.size() - 1; i >= 0 && k > 0; i--) {
				int v = list.get(i);
				al.add(v);
				k--;
			}
			if (k == 0) {
				break;
			}
		}
		int[] ans = new int[al.size()];
		for (int i = 0; i < al.size(); i++) {
			ans[i] = al.get(i);
		}
		return ans;
	}
}