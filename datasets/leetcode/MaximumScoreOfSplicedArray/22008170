class Solution {
	int maxSubArraySum(int[] arr) {
		int i = 0;
		int currSum = arr[0];
		int finalSum = arr[0];
		for (i = 1; i < arr.length; i++) {
			currSum = Math.max(currSum + arr[i],arr[i]);
			finalSum = Math.max(currSum,finalSum);
		}
		return finalSum;
	}
	int maximumsSplicedArray(int[] nums1, int[] nums2) {
		int sum1 = 0;
		int sum2 = 0;
		int n = nums1.length;
		int[] arr1 = new int[n];
		int[] arr2 = new int[n];
		for (int i = 0; i < n; i++) {
			sum1 += nums1[i];
			sum2 += nums2[i];
			arr1[i] = nums1[i] - nums2[i];
			arr2[i] = -arr1[i];
		}
		int maxSum = Math.max(sum1,sum2);
		maxSum = Math.max(maxSum,sum1 + maxSubArraySum(arr2));
		maxSum = Math.max(maxSum,sum2 + maxSubArraySum(arr1));
		return maxSum;
	}
}