class Solution {
	boolean checkPossibility(int[] nums) {
		int n = nums.length;
		int modificationLeftToRight = 0;
		int[] leftToRight = nums.clone();
		for (int i = 0; i < n - 1; i++) {
			if (leftToRight[i] > leftToRight[i + 1]) {
				leftToRight[i + 1] = leftToRight[i];
				modificationLeftToRight++;
			}
			if (modificationLeftToRight > 1) {
				break;
			}
		}
		if (modificationLeftToRight <= 1) {
			return true;
		}
		int[] rightToLeft = nums.clone();
		int modificationRightToLeft = 0;
		for (int i = n - 2; i >= 0; i--) {
			if (rightToLeft[i] > rightToLeft[i + 1]) {
				rightToLeft[i] = rightToLeft[i + 1];
				modificationRightToLeft++;
			}
			if (modificationRightToLeft > 1) {
				break;
			}
		}
		return Math.min(modificationLeftToRight,modificationRightToLeft) <= 1;
	}
}