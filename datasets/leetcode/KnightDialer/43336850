class Solution {
	int mod = 1000000007;
	ArrayList<Integer>[] getMove() {
		ArrayList<Integer>[] map = new ArrayList[10];
		map[0] = new ArrayList<>(List.of(4,6));
		map[1] = new ArrayList<>(List.of(6,8));
		map[2] = new ArrayList<>(List.of(7,9));
		map[3] = new ArrayList<>(List.of(4,8));
		map[4] = new ArrayList<>(List.of(0,3,9));
		map[5] = new ArrayList<>(List.of());
		map[6] = new ArrayList<>(List.of(0,1,7));
		map[7] = new ArrayList<>(List.of(2,6));
		map[8] = new ArrayList<>(List.of(1,3));
		map[9] = new ArrayList<>(List.of(2,4));
		return map;
	}
	int knightDialer(int n) {
		long[][] dp = new long[10][n + 1];
		ArrayList<Integer>[] map = getMove();
		for (int i = 0; i < 10; i++) {
			dp[i][1] = 1L;
		}
		for (int l = 2; l <= n; l++) {
			for (int i = 0; i < 10; i++) {
				for (int j: map[i]) {	
					dp[i][l] = (dp[i][l] + dp[j][l - 1]) % mod;
				}
			}
		}
		long res = 0;
		for (int i = 0; i < 10; i++) {
			res = (res + dp[i][n]) % mod;
		}
		return (int) res % mod;
	}
}