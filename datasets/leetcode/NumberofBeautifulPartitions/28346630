class Solution {
	int mod = (int) 1e9 + 7;
	int beautifulPartitions(String s, int k, int l) {
		char[] cs = s.toCharArray();
		int n = cs.length;
		if (!prime(cs[0]) || prime(cs[n - 1])) {
			return 0;
		}
		int[][] dp = new int[k][n];
		for (int i = n - l; 0 <= i; --i) {
			dp[0][i] = prime(cs[i]) ? 1 : 0;
		}
		for (int i = 1; i < k; ++i) {
			for (int j = n - i * l, sum = 0; 0 <= j; --j) {
				if (0 == dp[i - 1][j]) {
					dp[i - 1][j] = sum;
				} 
				else if (0 != j && 0 == dp[i - 1][j - 1]) {
					sum = (sum + dp[i - 1][j]) % mod;
				}
			}
			for (int j = 0, p = l - 1; j + l * i < n; ++j) {
				if (!prime(cs[j])) {
					continue;
				}
				p = Math.max(p,j + l - 1);
				while (prime(cs[p])) {
					p++;
				}
				if (0 == dp[i - 1][p]) {
					break;
				}
				dp[i][j] = dp[i - 1][p];
			}
		}
		return dp[k - 1][0];
	}
	boolean prime(char c) {
	}
}