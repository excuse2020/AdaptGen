class Solution {
	int[] findRedundantConnection(int[][] edges) {
		int n = edges.length;
		int[] in = new int[n + 1];
		boolean vis = new boolean[n + 1];
		ArrayList<ArrayList<Integer>> adj = new ArrayList<>();
		for (int i = 0; i <= n; i++) {
			adj.add(new ArrayList<>());
		}
		for (int[] a: edges) {	
			int u = a[0];
			int v = a[1];
			in[u]++;
			in[v]++;
			adj.get(u).add(v);
			adj.get(v).add(u);
		}
		Queue<Integer> q = new LinkedList<>();
		int size = q.size();
		while (true) {
			for (int i = 1; i <= n; i++) {
				if (in[i] == 1 && !vis[i]) {
					q.add(i);
				}
			}
			if (q.isEmpty()) {
				break;
			}
			while (!q.isEmpty()) {
				int kk = q.poll();
				vis[kk] = true;
				for (Integer l: adj.get(kk)) {	
					in[l]--;
				}
			}
		}
		Set<Integer> s = new HashSet<>();
		for (int i = 1; i <= n; i++) {
			if (!vis[i]) {
				s.add(i);
			}
		}
		int[] meo = new int[2];
		for (int[] a: edges) {	
			int u = a[0];
			int v = a[1];
			if (s.contains(u) && s.contains(v)) {
				meo[0] = u;
				meo[1] = v;
			}
		}
		return meo;
	}
}