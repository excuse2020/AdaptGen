class Solution {
	void bfs(List<List<Integer>> adj, int start, List<List<Integer>> ans, int n) {
		Queue<Integer> q = new LinkedList<>();
		boolean[] visited = new boolean[n];
		q.offer(start);
		visited[start] = true;
		List<Integer> temp = new ArrayList<>();
		while (!q.isEmpty()) {
			int node = q.poll();
			for (int i: adj.get(node)) {	
				if (visited[i] == false) {
					visited[i] = true;
					q.offer(i);
					temp.add(i);
				}
			}
		}
		Collections.sort(temp);
		ans.add(temp);
	}
	List<List<Integer>> getAncestors(int n, int[][] edges) {
		List<List<Integer>> adj = new ArrayList<>();
		for (int i = 0; i < n; i++) {
			adj.add(new ArrayList<>());
		}
		for (int i = 0; i < edges.length; i++) {
			adj.get(edges[i][1]).add(edges[i][0]);
		}
		List<List<Integer>> ans = new ArrayList<>();
		for (int i = 0; i < n; i++) {
			bfs(adj,i,ans,n);
		}
		return ans;
	}
}