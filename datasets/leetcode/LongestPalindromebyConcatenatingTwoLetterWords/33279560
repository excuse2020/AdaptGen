class Solution {
	int longestPalindrome(String[] words) {
		Map<String, Integer> m = new HashMap<>();
		int flag = 0;
		for (int i = 0; i < words.length; i++) {
			m.put(words[i],m.getOrDefault(words[i],0) + 1);
		}
		int l = 0;
		for (String k: m.keySet()) {	
			if (k.charAt(0) == k.charAt(1)) {
				if (m.get(k) % 2 == 0) {
					l += m.get(k) * 2;
				} 
				else {
					if (flag == 0) {
						l += m.get(k) * 2;
						flag = 1;
					} 
					else {
						l += (m.get(k) - 1) * 2;
					}
				}
			} 
			else {
				String temp = k.charAt(1) + "";
				if (m.containsKey(temp)) {
					l += (Math.min(m.get(k),m.get(temp)) * 4);
					m.put(k,0);
					m.put(temp,0);
				}
			}
		}
		return l;
	}
}