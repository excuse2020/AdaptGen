class Solution {
	ArrayList<ArrayList<Integer>> res = new ArrayList<>();
	void dfs(int[] num, ArrayList<Integer> arr, boolean[] used) {
		if (num.length == arr.size()) {
			this.res.add(new ArrayList<Integer>(arr));
			return;
		}
		for (int i = 0; i < num.length; ++i) {
			if (used[i] || (i > 0 && num[i] == num[i - 1] && used[i - 1] == false)) {
				continue;
			}
			arr.add(num[i]);
			used[i] = true;
			dfs(num,arr,used);
			used[i] = false;
			arr.remove(arr.size() - 1);
		}
	}
	ArrayList<ArrayList<Integer>> permuteUnique(int[] num) {
		boolean[] used = new boolean[num.length];
		ArrayList<Integer> arr = new ArrayList<Integer>();
		Arrays.sort(num);
		dfs(num,arr,used);
		return this.res;
	}
}