class Solution {
	int n;
	int getMinSwaps(String num, int k) {
		n = num.length();
		char[] arr = num.toCharArray();
		char[] res = num.toCharArray();
		for (int i = 0; i < k; i++) {
			nextPermutation(res);
		}
		int count = 0;
		for (int i = 0; i < n; i++) {
			int j = i;
			while (arr[j] != res[i]) {
				j++;
			}
			while (j > i) {
				swap(arr,j,j - 1);
				j--;
				count++;
			}
		}
		return count;
	}
	void nextPermutation(char[] arr) {
		int i = n - 2;
		while (i >= 0 && arr[i] >= arr[i + 1]) {
			i--;
		}
		int j = n - 1;
		if (i >= 0) {
			while (j > i && arr[j] <= arr[i]) {
				j--;
			}
			swap(arr,i,j);
		}
		reverse(arr,i + 1,arr.length - 1);
	}
	void reverse(char[] arr, int i, int j) {
		while (i < j) {
			swap(arr,i,j);
			i++;
			j--;
		}
	}
	void swap(char[] arr, int i, int j) {
		char ch = arr[i];
		arr[i] = arr[j];
		arr[j] = ch;
	}
}