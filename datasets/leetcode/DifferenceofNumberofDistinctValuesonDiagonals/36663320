class Solution {
	boolean cellExists(int r, int c, int[][] grid) {
		return r >= 0 && r < grid.length && c >= 0 && c < grid[0].length;
	}
	int[][] differenceOfDistinctValues(int[][] grid) {
		int m = grid.length, n = grid[0].length;
		int[][] arrTopLeft = new int[m][n], arrBotRight = new int[m][n];
		for (int i = m - 1; i >= 0; i--) {
			int c = 0, r = i;
			Set<Integer> set = new HashSet<>();
			while (cellExists(r,c,grid)) {
				arrTopLeft[r][c] = set.size();
				set.add(grid[r++][c++]);
			}
		}
		for (int i = 1; i < n; i++) {
			int r = 0, c = i;
			Set<Integer> set = new HashSet<>();
			while (cellExists(r,c,grid)) {
				arrTopLeft[r][c] = set.size();
				set.add(grid[r++][c++]);
			}
		}
		for (int i = 0; i < n; i++) {
			int r = m - 1, c = i;
			Set<Integer> set = new HashSet<>();
			while (cellExists(r,c,grid)) {
				arrBotRight[r][c] = set.size();
				set.add(grid[r--][c--]);
			}
		}
		for (int i = m - 1; i >= 0; i--) {
			int c = n - 1, r = i;
			Set<Integer> set = new HashSet<>();
			while (cellExists(r,c,grid)) {
				arrBotRight[r][c] = set.size();
				set.add(grid[r--][c--]);
			}
		}
		for (int r = 0; r < m; r++) {
			for (int c = 0; c < n; c++) {
				grid[r][c] = Math.abs(arrTopLeft[r][c] - arrBotRight[r][c]);
			}
		}
		return grid;
	}
}