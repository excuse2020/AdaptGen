class Solution {
	int BASE = 10;
	boolean countBased(int n) {
		int[] inputCount = countDigits(n);
		for (int i = 2; i <= Math.pow(BASE,9); i = 2 * i) {
			if (Arrays.equals(inputCount,countDigits(i))) {
				return true;
			}
		}
		return false;
	}
	int[] countDigits(int n) {
		int[] counts = new int[10];
		while (n > 0) {
			int dig = n % BASE;
			n = n / BASE;
			counts[dig]++;
		}
		return counts;
	}
	boolean reorderedPowerOf2(int n) {
		if (n == 1) {
			return true;
		}
		if (n == 0) {
			return false;
		}
		return countBased(n);
	}
	boolean sortBased(int n) {
		char[] inputStr = Integer.toString(n).toCharArray();
		Arrays.sort(inputStr);
		for (int i = 2; i <= Math.pow(BASE,9); i = 2 * i) {
			char[] powOf2 = Integer.toString(i).toCharArray();
			Arrays.sort(powOf2);
			if (Arrays.equals(inputStr,powOf2)) {
				return true;
			}
		}
		return false;
	}
}