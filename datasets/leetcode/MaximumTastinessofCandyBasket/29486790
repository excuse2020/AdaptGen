class Solution {
	boolean isPos(int[] price, int k, int n, int mid) {
		int prev = price[0];
		k--;
		for (int i = 1; i < n; i++) {
			if (k == 0) {
				break;
			}
			if (price[i] - prev >= mid) {
				prev = price[i];
				k--;
			}
		}
		return k == 0;
	}
	int maximumTastiness(int[] price, int k) {
		Arrays.sort(price);
		int n = price.length;
		int high = price[n - 1] - price[0];
		int low = 0;
		int ans = 0;
		while (low <= high) {
			int mid = low + (high - low) / 2;
			if (isPos(price,k,n,mid)) {
				ans = mid;
				low = mid + 1;
			} 
			else {
				high = mid - 1;
			}
		}
		return ans;
	}
}