class Solution {
	int dfs(long n, Map<Long, Integer> dp) {
		if (n == 1) {
			return 1;
		}
		if (n < 1) {
			return 0;
		}
		if (dp.containsKey(n)) {
			return dp.get(n);
		}
		int res = 0;
		if (n % 2 == 0) {
			res = 1 + dfs(n / 2,dp);
		} 
		else {
			res = Math.min(1 + dfs(n + 1,dp),1 + dfs(n - 1,dp));
		}
		dp.put(n,res);
		return res;
	}
	int integerReplacement(int n) {
		Map<Long, Integer> dp = new HashMap<>();
		return dfs(n,dp) - 1;
	}
}