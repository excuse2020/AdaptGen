class Solution {
	int maxIncreasingCells(int[][] mat) {
		int m = mat.length, n = mat[0].length;
		TreeMap<Integer, List<int[]>> indexMap = new TreeMap<>();
		int[] rowMax = new int[m];
		int[] colMax = new int[n];
		int[][] dp = new int[m][n];
		for (int i = 0; i < m; i++) {
			for (int j = 0; j < n; j++) {
				int val = -mat[i][j];
				List<int[]> coordinates = new ArrayList<>(indexMap.getOrDefault(val,new ArrayList<>()));
				coordinates.add(new int{i, j});
				indexMap.put(val,coordinates);
			}
		}
		int maxPathSize = 0;
		for (Integer val: indexMap.keySet()) {	
			for (int[] coordinate: indexMap.get(val)) {	
				int row = coordinate[0], col = coordinate[1];
				dp[row][col] = Math.max(rowMax[row],colMax[col]) + 1;
				maxPathSize = Math.max(maxPathSize,dp[row][col]);
			}
			for (int[] coordinate: indexMap.get(val)) {	
				int row = coordinate[0], col = coordinate[1];
				rowMax[row] = Math.max(rowMax[row],dp[row][col]);
				colMax[col] = Math.max(colMax[col],dp[row][col]);
			}
		}
		return maxPathSize;
	}
}