class Solution {
	int countNodePath(int node1, int node2, int path1, int path2) {
		if (node1 == node2) {
			return path1 + path2;
		}
		if (node1 > node2) {
			return countNodePath(node1 / 2,node2,path1 + 1,path2);
		} 
		else {
			return countNodePath(node1,node2 / 2,path1,path2 + 1);
		}
	}
	int[] cycleLengthQueries(int n, int[][] queries) {
		int[] results = new int[queries.length];
		for (int index = 0; index < queries.length; index++) {
			int[] query = queries[index];
			results[index] = countNodePath(query[0],query[1],0,0);
		}
		return results;
	}
}