class Solution {
	int[] parent;
	int[] size;
	int find(int x) {
		if (parent[x] == x) {
			return x;
		} 
		else {
			parent[x] = find(parent[x]);
			return parent[x];
		}
	}
	int minMalwareSpread(int[][] graph, int[] initial) {
		parent = new int[graph.length];
		size = new int[graph.length];
		for (int i = 0; i < graph.length; i++) {
			parent[i] = i;
			size[i] = 1;
		}
		for (int i = 0; i < graph.length; i++) {
			for (int j = 0; j < graph.length; j++) {
				if (i != j && graph[i][j] == 1) {
					unionHelper(i,j);
				}
			}
		}
		int[] infected = new int[graph.length];
		for (int x: initial) {	
			int head = find(x);
			infected[head]++;
		}
		Arrays.sort(initial);
		int ansSize = 0;
		int ans = initial[0];
		for (int x: initial) {	
			int head = find(x);
			if (infected[head] == 1) {
				if (ansSize < size[head]) {
					ans = x;
					ansSize = size[head];
				}
			}
		}
		return ans;
	}
	void unionHelper(int x, int y) {
		int xl = find(x);
		int yl = find(y);
		if (size[xl] > size[yl]) {
			parent[yl] = xl;
			size[xl] += size[yl];
		} 
		else {
			parent[xl] = yl;
			size[yl] += size[xl];
		}
	}
}