class Solution {
	int compute(int r, int c, int[][] grid) {
		int n = grid.length, m = grid[0].length;
		Set<Integer> left = new HashSet<>();
		Set<Integer> right = new HashSet<>();
		int i = r - 1;
		int j = c - 1;
		while (i >= 0 && j >= 0) {
			left.add(grid[i][j]);
			i--;
			j--;
		}
		i = r + 1;
		j = c + 1;
		while (i < n && j < m) {
			right.add(grid[i][j]);
			i++;
			j++;
		}
		return Math.abs(left.size() - right.size());
	}
	int[][] differenceOfDistinctValues(int[][] grid) {
		int n = grid.length;
		int m = grid[0].length;
		int[][] ret = new int[n][m];
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < m; j++) {
				ret[i][j] = compute(i,j,grid);
			}
		}
		return ret;
	}
}