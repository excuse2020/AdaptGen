class Solution {
	void inOrder(TreeNode root, List<Integer> list) {
		if (root == null) {
			return;
		}
		inOrder(root.left,list);
		list.add(root.val);
		inOrder(root.right,list);
	}
	void postOrder(TreeNode root, List<Integer> list) {
		if (root == null) {
			return;
		}
		postOrder(root.left,list);
		postOrder(root.right,list);
		list.add(root.val);
	}
	void preOrder(TreeNode root, List<Integer> list) {
		if (root == null) {
			return;
		}
		list.add(root.val);
		preOrder(root.left,list);
		preOrder(root.right,list);
	}
	int[][] threeOrders(TreeNode root) {
		List<Integer> list1 = new ArrayList<>();
		List<Integer> list2 = new ArrayList<>();
		List<Integer> list3 = new ArrayList<>();
		preOrder(root,list1);
		inOrder(root,list2);
		postOrder(root,list3);
		int[][] res = new int[3][list1.size()];
		res[0] = list1.stream().mapToInt().toArray();
		res[1] = list2.stream().mapToInt().toArray();
		res[2] = list3.stream().mapToInt().toArray();
		return res;
	}
}