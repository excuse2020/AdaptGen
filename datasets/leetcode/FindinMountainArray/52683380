class Solution {
	int findInMountainArray(int target, MountainArray mountainArr) {
		int peak = findPeakElement(mountainArr);
		int result = orderAgnosticBS(mountainArr,target,0,peak);
		if (result == -1) {
			result = orderAgnosticBS(mountainArr,target,peak,mountainArr.length() - 1);
		}
		return result;
	}
	int findPeakElement(MountainArray nums) {
		int start = 0;
		int end = nums.length() - 1;
		while (start < end) {
			int mid = start + (end - start) / 2;
			if (nums.get(mid) > nums.get(mid + 1)) {
				end = mid;
			} 
			else {
				start = mid + 1;
			}
		}
		return start;
	}
	int orderAgnosticBS(MountainArray arr, int target, int start, int end) {
		boolean isAscending = arr.get(start) < arr.get(end);
		while (start <= end) {
			int mid = start + (end - start) / 2;
			if (target == arr.get(mid)) {
				return mid;
			}
			if (isAscending) {
				if (target < arr.get(mid)) {
					end = mid - 1;
				} 
				else {
					start = mid + 1;
				}
			} 
			else {
				if (target > arr.get(mid)) {
					end = mid - 1;
				} 
				else {
					start = mid + 1;
				}
			}
		}
		return -1;
	}
}