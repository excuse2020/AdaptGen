class Solution {
	List<Integer> createList(int[][] bombs, int source) {
		List<Integer> result = new ArrayList<>();
		for (int i = 0; i < bombs.length; i++) {
			if (i != source) {
				double dist = Math.sqrt(Math.pow(bombs[source][0] - bombs[i][0],2) + Math.pow(bombs[source][1] - bombs[i][1],2));
				if (dist <= bombs[source][2]) {
					result.add(i);
				}
			}
		}
		return result;
	}
	int dfs(Map<Integer, List<Integer>> bombs, int source, boolean[] visited, boolean[] recursionStack, int count) {
		for (Integer neighbour: bombs.get(source)) {	
			if ((!recursionStack[neighbour]) && (bombs.get(source).contains(neighbour))) {
				visited[neighbour] = true;
				recursionStack[neighbour] = true;
				count = dfs(bombs,neighbour,visited,recursionStack,count + 1);
			}
		}
		return count;
	}
	int maximumDetonation(int[][] bombs) {
		Map<Integer, List<Integer>> bombsMap = new HashMap<>();
		boolean[] visited = new boolean[bombs.length];
		int max = 0;
		for (int i = 0; i < bombs.length; i++) {
			bombsMap.put(i,createList(bombs,i));
		}
		for (int i = 0; i < bombs.length; i++) {
			if (!visited[i]) {
				boolean[] recursionStack = new boolean[bombs.length];
				recursionStack[i] = true;
				int num = dfs(bombsMap,i,visited,recursionStack,1);
				if (num > max) {
					max = num;
				}
			}
		}
		return max;
	}
}