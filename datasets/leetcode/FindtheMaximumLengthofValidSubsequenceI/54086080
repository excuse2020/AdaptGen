class Solution {
	int f(int nums, int turn) {
		int n = nums.length;
		int count = 0;
		for (int i = 0; i < n; i++) {
			if ((turn == 0 && nums[i] == 0) || turn == 1 && nums[i] == 1) {
				count++;
				turn ^= 1;
			}
		}
		return count;
	}
	int maximumLength(int[] nums) {
		int n = nums.length;
		int evenEven = 0, oddOdd = 0;
		for (int i = 0; i < n; i++) {
			if (nums[i] % 2 == 0) {
				nums[i] = 0;
				evenEven++;
			} 
			else {
				nums[i] = 1;
				oddOdd++;
			}
		}
		int evenOdd = f(nums,0);
		int oddEven = f(nums,1);
		return Math.max(evenOdd,Math.max(oddEven,Math.max(evenEven,oddOdd)));
	}
}