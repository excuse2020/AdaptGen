class Solution {
	int uniquePathsWithObstacles(int[][] obstacleGrid) {
		int m = obstacleGrid.length;
		if (m == 0) {
			return 1;
		}
		int n = obstacleGrid[0].length;
		if (n == 0) {
			return 1;
		}
		int uniquePath = new int[m][n];
		uniquePath[0][0] = obstacleGrid[0][0] == 0 ? 1 : 0;
		for (int i = 1; i < m; i++) {
			uniquePath[i][0] = obstacleGrid[i][0] == 0 ? uniquePath[i - 1][0] : 0;
		}
		for (int j = 1; j < n; j++) {
			uniquePath[0][j] = obstacleGrid[0][j] == 0 ? uniquePath[0][j - 1] : 0;
		}
		for (int i = 1; i < m; i++) {
			for (int j = 1; j < n; j++) {
				if (obstacleGrid[i][j] == 0) {
					uniquePath[i][j] = uniquePath[i - 1][j] + uniquePath[i][j - 1];
				} 
				else {
					uniquePath[i][j] = 0;
				}
			}
		}
		return uniquePath[m - 1][n - 1];
	}
}