class Solution {
	int[] deckRevealedIncreasing(int[] deck) {
		Deque<Integer> indexQ = new ArrayDeque<Integer>();
		Arrays.sort(deck);
		int[] result = new int[deck.length];
		int j = 0;
		int size = deck.length;
		int mid = size / 2;
		if (size % 2 == 0) {
			mid -= 1;
		}
		for (int i = 0; i <= mid; i++) {
			result[j] = deck[i];
			if (j + 1 == size) {
				continue;
			}
			j++;
			indexQ.offer(j);
			j++;
		}
		if (size % 2 == 0 && !indexQ.isEmpty()) {
			Integer index = indexQ.poll();
			result[index] = deck[++mid];
		}
		while (!indexQ.isEmpty()) {
			Integer index = indexQ.poll();
			indexQ.offer(index);
			index = indexQ.poll();
			result[index] = deck[++mid];
		}
		return result;
	}
}