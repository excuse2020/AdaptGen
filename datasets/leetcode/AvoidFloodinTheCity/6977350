class Solution {
	int[] avoidFlood(int[] rains) {
		int n = rains.length;
		int[] res = new int[n];
		Map<Integer, Integer> map = new HashMap<>();
		TreeSet<Integer> ts = new TreeSet<>();
		for (int i = 0; i < n; i++) {
			if (rains[i] != 0) {
				res[i] = -1;
				if (map.containsKey(rains[i])) {
					int index = map.get(rains[i]);
					if (ts.isEmpty() || ts.ceiling(index) == null) {
						return new int[0];
					}
					res[ts.ceiling(index)] = rains[i];
					map.put(rains[i],i);
					ts.remove(ts.ceiling(index));
				} 
				else {
					map.put(rains[i],i);
				}
			} 
			else {
				ts.add(i);
			}
		}
		for (int i = 0; i < n; i++) {
			if (res[i] == 0) {
				res[i] = 1;
			}
		}
		return res;
	}
}