class Solution {
	boolean cycle(int[] unionFind, int i, int j) {
		return findSet(unionFind,i) == findSet(unionFind,j);
	}
	int findSet(int[] unionFind, int i) {
		while (unionFind[i] != i) {
			i = unionFind[i];
		}
		return i;
	}
	int getCoord(int x, int y, int n, int root) {
		if (x == 0 || y == 0 || x == n || y == n) {
			return root;
		}
		return (x - 1) * (n - 1) + (y - 1);
	}
	int regionsBySlashes(String[] grid) {
		int n = grid.length;
		int[] unionFind = new int[(n - 1) * (n - 1) + 1];
		int root = (n - 1) * (n - 1);
		int result = 1;
		for (int i = 0; i < unionFind.length; i++) {
			unionFind[i] = i;
		}
		int i = 0;
		String row = grid[i];
		int j = 0;
		int c1;
		int c2;
	}
	void union(int[] unionFind, int i, int j) {
		i = findSet(unionFind,i);
		j = findSet(unionFind,j);
		unionFind[i] = j;
	}
}