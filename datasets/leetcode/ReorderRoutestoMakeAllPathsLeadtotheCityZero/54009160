class Solution {
	void dfs(List<List<Integer>> adj, List<List<Integer>> adjD, int u, boolean[] visited, int cnt) {
		visited[u] = true;
		for (int v: adj.get(u)) {	
			if (!visited[v]) {
				dfs(adj,adjD,v,visited,cnt);
				if (adjD.get(u).contains(v)) {
					cnt[0]++;
				}
			}
		}
	}
	int minReorder(int n, int[][] connections) {
		int cnt = new int[1];
		List<List<Integer>> adj = new ArrayList();
		List<List<Integer>> adjD = new ArrayList();
		for (int i = 0; i < n; i++) {
			adj.add(new ArrayList());
			adjD.add(new ArrayList());
		}
		for (int i = 0; i < connections.length; i++) {
			adj.get(connections[i][0]).add(connections[i][1]);
			adj.get(connections[i][1]).add(connections[i][0]);
			adjD.get(connections[i][0]).add(connections[i][1]);
		}
		boolean[] visited = new boolean[n];
		for (int i = 0; i < n; i++) {
			if (!visited[i]) {
				dfs(adj,adjD,i,visited,cnt);
			}
		}
		return cnt[0];
	}
}