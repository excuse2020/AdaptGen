class Solution {
	List<List<Integer>> findPrimePairs(int n) {
		List<Integer> primes = new ArrayList<>();
		primes = sieveOfEratosthenes(n);
		List<List<Integer>> ans = new ArrayList<>();
		int i = 0, j = primes.size() - 1;
		while (i <= j) {
			if (primes.get(i) + primes.get(j) == n) {
				List<Integer> pair = new ArrayList<>();
				pair.add(primes.get(i));
				pair.add(primes.get(j));
				ans.add(pair);
				i++;
				j--;
			} 
			else if (primes.get(i) + primes.get(j) < n) {
				i++;
			} 
			else {
				j--;
			}
		}
		return ans;
	}
	List<Integer> sieveOfEratosthenes(int n) {
		boolean prime = new boolean[n + 1];
		Arrays.fill(prime,true);
		for (int p = 2; p * p <= n; p++) {
			if (prime[p] == true) {
				for (int i = p * p; i <= n; i += p) {
					prime[i] = false;
				}
			}
		}
		List<Integer> ans = new ArrayList<>();
		for (int i = 2; i <= n; i++) {
			if (prime[i] == true) {
				ans.add(i);
			}
		}
		return ans;
	}
}