class Solution {
	int getLength(ListNode head) {
		int length = 0;
		ListNode temp = head;
		while (temp != null) {
			temp = temp.next;
			length++;
		}
		return length;
	}
	int pairSum(ListNode head) {
		int len = getLength(head);
		int halfLen = len / 2;
		ListNode mid = head;
		for (int i = 0; i < halfLen; i++) {
			mid = mid.next;
		}
		ListNode revHead = reverseList(mid);
		ListNode firstHalf = head;
		ListNode secondHalf = revHead;
		int maxSum = 0;
		while (secondHalf != null) {
			int twinSum = firstHalf.val + secondHalf.val;
			maxSum = Math.max(maxSum,twinSum);
			firstHalf = firstHalf.next;
			secondHalf = secondHalf.next;
		}
		return maxSum;
	}
	ListNode reverseList(ListNode head) {
		ListNode prev = null;
		ListNode curr = head;
		while (curr != null) {
			ListNode next = curr.next;
			curr.next = prev;
			prev = curr;
			curr = next;
		}
		return prev;
	}
}