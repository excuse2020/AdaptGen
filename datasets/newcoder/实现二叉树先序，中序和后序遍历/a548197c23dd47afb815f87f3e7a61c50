class Solution {
	void inOrder(TreeNode root, List<Integer> list2) {
		if (root == null) {
			return;
		}
		inOrder(root.left,list2);
		list2.add(root.val);
		inOrder(root.right,list2);
	}
	void postOrder(TreeNode root, List<Integer> list3) {
		if (root == null) {
			return;
		}
		postOrder(root.left,list3);
		postOrder(root.right,list3);
		list3.add(root.val);
	}
	void preOrder(TreeNode root, List<Integer> list1) {
		if (root == null) {
			return;
		}
		list1.add(root.val);
		preOrder(root.left,list1);
		preOrder(root.right,list1);
	}
	int[][] threeOrders(TreeNode root) {
		List<Integer> list1 = new ArrayList<>();
		List<Integer> list2 = new ArrayList<>();
		List<Integer> list3 = new ArrayList<>();
		preOrder(root,list1);
		inOrder(root,list2);
		postOrder(root,list3);
		int[][] ans = new int[3][list1.size()];
		for (int i = 0; i < list1.size(); i++) {
			ans[0][i] = list1.get(i);
			ans[1][i] = list2.get(i);
			ans[2][i] = list3.get(i);
		}
		return ans;
	}
}