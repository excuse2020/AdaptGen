class Solution {
	int[] findDiagonalOrder(List<List<Integer>> nums) {
		int maxBucket = 0;
		int count = 0;
		Map<Integer, Deque<Integer>> map = new HashMap<>();
		for (int i = 0; i < nums.size(); ++i) {
			for (int j = 0; j < nums.get(i).size(); ++j) {
				int bucket = i + j;
				count++;
				maxBucket = Math.max(maxBucket,bucket);
				map.computeIfAbsent(bucket,(x) -> {new LinkedList<>()}).addFirst(nums.get(i).get(j));
			}
		}
		int[] res = new int[count];
		count = 0;
		for (int i = 0; i <= maxBucket; ++i) {
			if (map.containsKey(i)) {
				var queue = map.get(i);
				while (!queue.isEmpty()) {
					res[count++] = queue.pollFirst();
				}
			}
		}
		return res;
	}
}