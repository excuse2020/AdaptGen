class Solution {
	int dp, n;
	int rec(int ind, int[] nums, int check) {
		if (ind >= n) {
			return 0;
		}
		if (dp[ind][check] != -1) {
			return dp[ind][check];
		}
		int skip = 0, take = 0;
		if (ind == n - 1 && check == 1) {
			return 0;
		}
		take = rec(ind + 2,nums,check) + nums[ind];
		skip = rec(ind + 1,nums,check);
		return dp[ind][check] = Math.max(skip,take);
	}
	int rob(int[] nums) {
		n = nums.length;
		dp = new int[n][2];
		for (int i = 0; i < n; i++) {
			Arrays.fill(dp[i],-1);
		}
		return Math.max(rec(2,nums,1) + nums[0],rec(1,nums,0));
	}
}