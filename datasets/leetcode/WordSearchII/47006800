class Solution {
	boolean[][] visited;
	Set<String> words_set;
	void dfs(char[][] board, int row, int col, StringBuilder sb, Set<String> ans, int length, int max_len) {
		if (row < 0 || col < 0 || row == board.length || col == board[0].length) {
			return;
		}
		if (length >= max_len) {
			return;
		}
		if (visited[row][col]) {
			return;
		}
		visited[row][col] = true;
		sb.append(board[row][col]);
		if (words_set.contains(sb.toString())) {
			ans.add(sb.toString());
		}
		dfs(board,row + 1,col,sb,ans,length + 1,max_len);
		dfs(board,row - 1,col,sb,ans,length + 1,max_len);
		dfs(board,row,col + 1,sb,ans,length + 1,max_len);
		dfs(board,row,col - 1,sb,ans,length + 1,max_len);
		visited[row][col] = false;
		sb.setLength(sb.length() - 1);
	}
	List<String> findWords(char[][] board, String[] words) {
		int row = board.length;
		int col = board[0].length;
		visited = new boolean[row][col];
		words_set = new HashSet<>();
		int max_len = 0;
		for (String w: words) {	
			words_set.add(w);
			max_len = Math.max(max_len,w.length());
		}
		Set<String> ans = new HashSet<>();
		for (int i = 0; i < row; i++) {
			for (int j = 0; j < col; j++) {
				dfs(board,i,j,new StringBuilder(),ans,0,max_len);
			}
		}
		List<String> list = new ArrayList<String>();
		list.addAll(ans);
		return list;
	}
}