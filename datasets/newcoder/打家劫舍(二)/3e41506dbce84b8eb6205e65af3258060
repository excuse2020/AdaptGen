class Solution {
	int rob(int[] nums) {
		int N = nums.length;
		if (N == 1) {
			return nums[0];
		} 
		else if (N == 2) {
			return Math.max(nums[0],nums[1]);
		} 
		else if (N == 3) {
			return Math.max(Math.max(nums[0],nums[1]),nums[2]);
		}
		int[] dp = new int[N];
		dp[0] = nums[0];
		dp[1] = nums[1];
		dp[2] = nums[0] + nums[2];
		for (int i = 3; i < N - 1; i++) {
			dp[i] = Math.max(dp[i - 3],dp[i - 2]) + nums[i];
		}
		int max = 0;
		max = Math.max(max,dp[N - 2]);
		dp[1] = nums[1];
		dp[2] = nums[2];
		dp[3] = nums[1] + nums[3];
		for (int i = 4; i < N; i++) {
			dp[i] = Math.max(dp[i - 3],dp[i - 2]) + nums[i];
		}
		max = Math.max(max,dp[N - 1]);
		return max;
	}
}