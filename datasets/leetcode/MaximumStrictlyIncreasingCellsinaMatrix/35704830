class Solution {
	int dfs(int[][] mat, int[][] dp, int i, int j, int m, int n) {
		if (dp[i][j] != 0) {
			return dp[i][j];
		}
		int maxCells = 1;
		for (int col = 0; col < n; col++) {
			if (mat[i][col] > mat[i][j]) {
				int cells = 1 + dfs(mat,dp,i,col,m,n);
				maxCells = Math.max(maxCells,cells);
			}
		}
		for (int row = 0; row < m; row++) {
			if (mat[row][j] > mat[i][j]) {
				int cells = 1 + dfs(mat,dp,row,j,m,n);
				maxCells = Math.max(maxCells,cells);
			}
		}
		return dp[i][j] = maxCells;
	}
	int maxIncreasingCells(int[][] mat) {
		int m = mat.length;
		int n = mat[0].length;
		int[][] dp = new int[m][n];
		int maxCells = 1;
		for (int i = 0; i < m; i++) {
			for (int j = 0; j < n; j++) {
				int cells = dfs(mat,dp,i,j,m,n);
				maxCells = Math.max(maxCells,cells);
			}
		}
		return maxCells;
	}
}