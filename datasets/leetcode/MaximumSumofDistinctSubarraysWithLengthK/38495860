class Solution {
	long maximumSubarraySum(int[] a, int k) {
		int n = a.length;
		if (a.length < k) {
			return 0;
		}
		Map<Integer, Integer> map = new HashMap<>();
		long max = 0;
		long sum = 0;
		for (int i = 0; i < k; i++) {
			sum += a[i];
			map.put(a[i],map.getOrDefault(a[i],0) + 1);
		}
		if (map.size() == k) {
			max = sum;
		}
		int l = 0;
		int r = k;
		for (int i = 1; i < n - k + 1; i++) {
			sum -= a[l];
			if (map.get(a[l]) == 1) {
				map.remove(a[l]);
			} 
			else {
				map.put(a[l],map.get(a[l]) - 1);
			}
			sum += a[r];
			map.put(a[r],map.getOrDefault(a[r],0) + 1);
			l++;
			r++;
			if (map.size() == k) {
				max = Math.max(max,sum);
			}
		}
		return max;
	}
}