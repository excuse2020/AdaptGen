class Solution {
	boolean isValidSquare(int[][] grid, int row, int col, int colLimit, int rowLimit) {
		int i = row, j = col;
		while (j < colLimit && grid[i][j] == 1) {
			++j;
		}
		if (j != colLimit) {
			return false;
		}
		--j;
		while (i < rowLimit && grid[i][j] == 1) {
			++i;
		}
		if (i != rowLimit) {
			return false;
		}
		--i;
		while (j >= col && grid[i][j] == 1) {
			--j;
		}
		if (j >= col) {
			return false;
		}
		++j;
		while (i >= row && grid[i][j] == 1) {
			--i;
		}
		return i < row;
	}
	int largest1BorderedSquare(int[][] grid) {
		int m = grid.length, n = grid[0].length;
		int largest = 0;
		for (int maxSqaure = Math.min(m,n); maxSqaure >= 1; maxSqaure--) {
			for (int row = 0; row <= m - maxSqaure; row++) {
				for (int col = 0; col <= n - maxSqaure; col++) {
					if (isValidSquare(grid,row,col,col + maxSqaure,row + maxSqaure)) {
						return maxSqaure * maxSqaure;
					}
				}
			}
		}
		return largest;
	}
}