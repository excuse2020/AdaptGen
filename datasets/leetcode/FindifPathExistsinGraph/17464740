class Solution {
	Set<Integer> findNeighbours(int[][] edges, int n, int v) {
		Set<Integer> neighbours = new HashSet<Integer>();
		for (int[] edge: edges) {	
			if (edge[0] == v) {
				neighbours.add(edge[1]);
			} 
			else if (edge[1] == v) {
				neighbours.add(edge[0]);
			}
		}
		return neighbours;
	}
	boolean validPath(int n, int[][] edges, int source, int destination) {
		boolean[] visited = new boolean[n];
		Queue<Integer> bfs = new LinkedList<Integer>();
		bfs.add(source);
		visited[source] = true;
		while (!bfs.isEmpty()) {
			int currentVertex = bfs.poll();
			if (currentVertex == destination) {
				return true;
			}
			Set<Integer> neighbours = findNeighbours(edges,n,currentVertex);
			for (int neighbour: neighbours) {	
				if (!visited[neighbour]) {
					visited[neighbour] = true;
					bfs.add(neighbour);
				}
			}
		}
		return false;
	}
}