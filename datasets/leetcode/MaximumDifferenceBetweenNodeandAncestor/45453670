class Solution {
	int diff = 0;
	int maxAncestorDiff(TreeNode root) {
		minMax(root);
		return diff;
	}
	int[] minMax(TreeNode root) {
		int minMax = new int[2];
		if (root.left != null && root.right != null) {
			int left = minMax(root.left);
			int right = minMax(root.right);
			diff = Math.max(diff,Math.abs(root.val - right[0]));
			diff = Math.max(diff,Math.abs(root.val - right[1]));
			diff = Math.max(diff,Math.abs(root.val - left[0]));
			diff = Math.max(diff,Math.abs(root.val - left[1]));
			minMax[0] = Math.max(left[0],Math.max(right[0],root.val));
			minMax[1] = Math.min(left[1],Math.min(right[1],root.val));
		} 
		else if (root.right != null) {
			int right = minMax(root.right);
			diff = Math.max(diff,Math.abs(root.val - right[0]));
			diff = Math.max(diff,Math.abs(root.val - right[1]));
			minMax[0] = Math.max(right[0],root.val);
			minMax[1] = Math.min(right[1],root.val);
		} 
		else if (root.left != null) {
			int left = minMax(root.left);
			diff = Math.max(diff,Math.abs(root.val - left[0]));
			diff = Math.max(diff,Math.abs(root.val - left[1]));
			minMax[0] = Math.max(left[0],root.val);
			minMax[1] = Math.min(left[1],root.val);
		} 
		else {
			minMax[0] = root.val;
			minMax[1] = root.val;
		}
		return minMax;
	}
}