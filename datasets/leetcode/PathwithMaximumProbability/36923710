class Solution {
	double maxProbability(int n, int[][] edges, double[] succProb, int start, int end) {
		Map<Integer, List<double[]>> map = new HashMap<>();
		for (int i = 0; i < edges.length; i++) {
			map.putIfAbsent(edges[i][0],new LinkedList<>());
			map.get(edges[i][0]).add(new double{edges[i][1], succProb[i]});
			map.putIfAbsent(edges[i][1],new LinkedList<>());
			map.get(edges[i][1]).add(new double{edges[i][0], succProb[i]});
		}
		Set<Integer> visited = new HashSet<>();
		PriorityQueue<double[]> q = new PriorityQueue<>(new Comparator<double[]>());
		q.add(new double{start, 1.0});
		while (!q.isEmpty()) {
			double[] curr = q.poll();
			if (curr[0] == end) {
				return curr[1];
			}
			if (visited.contains((int) curr[0])) {
				continue;
			}
			visited.add((int) curr[0]);
			if (map.containsKey((int) curr[0])) {
				for (double[] nei: map.get((int) curr[0])) {	
					q.add(new double{nei[0], curr[1] * nei[1]});
				}
			}
		}
		return 0;
	}
}