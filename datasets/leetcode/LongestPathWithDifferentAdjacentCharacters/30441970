class Solution {
	int longestPath(int[] parent, String s) {
		int[] indegree = new int[parent.length];
		for (int i = 1; i < parent.length; i++) {
			indegree[parent[i]]++;
		}
		Deque<Integer> queue = new ArrayDeque<>();
		for (int i = 0; i < indegree.length; i++) {
			if (indegree[i] != 0) {
				continue;
			}
			queue.add(i);
		}
		int res = 1;
		int[] counter = new int[parent.length];
		while (!queue.isEmpty()) {
			int i = queue.poll();
			int p = parent[i];
			if (p != -1 && (--indegree[p]) == 0) {
				queue.add(p);
			}
			if (p == -1 || s.charAt(p) == s.charAt(i)) {
				continue;
			}
			int currCount = 1 + counter[i];
			int pathLen = 1 + counter[p];
			res = Math.max(res,pathLen);
			counter[p] = Math.max(counter[p],currCount);
			res = Math.max(res,counter[p]);
		}
		return res;
	}
}