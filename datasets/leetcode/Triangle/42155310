class Solution {
	int minimumTotal(List<List<Integer>> triangle) {
		int[] dp = new int[triangle.size()];
		Arrays.fill(dp,Integer.MAX_VALUE);
		return recursion(triangle,dp,0,0,0);
	}
	int recursion(List<List<Integer>> list, int[] dp, int rowIndex, int columnIndex, int dir) {
		if (rowIndex == list.size() - 1) {
			return dp[rowIndex] = list.get(rowIndex).get(columnIndex);
		}
		if (dp[rowIndex] != Integer.MAX_VALUE && dir == 0) {
			return dp[rowIndex];
		}
		return dp[rowIndex] = list.get(rowIndex).get(columnIndex) + Math.min(recursion(list,dp,rowIndex + 1,columnIndex,0),recursion(list,dp,rowIndex + 1,columnIndex + 1,1));
	}
}