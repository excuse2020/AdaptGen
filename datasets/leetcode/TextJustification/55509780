class Solution {
	int Max_width;
	String findLine(int i, int j, int eachgaddhyespace, int extraspacegaddhe, String words) {
		String line = "";
		for (int k = i; k < j; k++) {
			line += words[k];
			if (k == j - 1) {
				continue;
			}
			for (int z = 1; z <= eachgaddhyespace; z++) {
				line += " ";
			}
			if (extraspacegaddhe > 0) {
				line += " ";
				extraspacegaddhe--;
			}
		}
		while (line.length() < Max_width) {
			line += " ";
		}
		return line;
	}
	List<String> fullJustify(String[] words, int maxWidth) {
		List<String> result = new ArrayList<>();
		int n = words.length;
		Max_width = maxWidth;
		int i = 0;
		while (i < n) {
			int lettersCount = words[i].length();
			int j = i + 1;
			int gaddhe = 0;
			while (j < n && words[j].length() + 1 <= maxWidth) {
				lettersCount += words[j].length();
				gaddhe += 1;
				j++;
			}
			int remainninggahhe = maxWidth - lettersCount;
			int eachgaddhyespace = gaddhe == 0 ? 0 : remainninggahhe / gaddhe;
			int extraspacegaddhe = gaddhe == 0 ? 0 : remainninggahhe % gaddhe;
			if (j == n) {
				eachgaddhyespace = 1;
				extraspacegaddhe = 0;
			}
			result.add(findLine(i,j,eachgaddhyespace,extraspacegaddhe,words));
			i = j;
		}
		return result;
	}
}