class Solution {
	int max(int[] arr) {
		int maxi = Integer.MIN_VALUE;
		for (int i = 0; i < arr.length; i++) {
			maxi = Math.max(maxi,arr[i]);
		}
		return maxi;
	}
	int minEatingSpeed(int[] piles, int h) {
		int low = 1, high = max(piles), ans = Integer.MAX_VALUE;
		while (low <= high) {
			int mid = (low + high) / 2;
			int k = totalHours(piles,mid);
			if (k <= h) {
				ans = mid;
				high = mid - 1;
			} 
			else {
				low = mid + 1;
			}
		}
		return ans;
	}
	int totalHours(int[] pile, int hourly) {
		int totalHour = 0;
		for (int i = 0; i < pile.length; i++) {
			totalHour += Math.ceil((double) (pile[i]) / (double) (hourly));
		}
		return totalHour;
	}
}