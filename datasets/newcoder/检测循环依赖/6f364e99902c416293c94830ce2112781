class Solution {
	int[] findOrder(int[][] prerequisites, int n) {
		List<List<Integer>> list = new ArrayList<>();
		int[] indeg = new int[n];
		int[] result = new int[n];
		int index = 0;
		for (int i = 0; i < n; i++) {
			list.add(new ArrayList<>());
		}
		for (int[] num: prerequisites) {	
			int start = num[1], end = num[0];
			list.get(start).add(end);
			++indeg[end];
		}
		Queue<Integer> queue = new LinkedList<>();
		for (int i = 0; i < n; i++) {
			if (indeg[i] == 0) {
				queue.offer(i);
			}
		}
		while (!queue.isEmpty()) {
			int start = queue.poll();
			result[index++] = start;
			for (int end: list.get(start)) {	
				--indeg[end];
				if (indeg[end] == 0) {
					queue.offer(end);
				}
			}
		}
		if (index == n) {
			return result;
		}
		return new int[0];
	}
}