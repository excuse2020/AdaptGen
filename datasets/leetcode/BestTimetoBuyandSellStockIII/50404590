class Solution {
	int maxProfit(int[] prices) {
		int n = prices.length;
		int c = 2;
		int[][][] dp = new int[n][2][3];
		int buy = 1;
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < 2; j++) {
				Arrays.fill(dp[i][j],-1);
			}
		}
		return stock(0,buy,dp,prices,c);
	}
	int stock(int ind, int buy, int[][][] dp, int[] arr, int c) {
		if (c == 0) {
			return 0;
		}
		if (ind == arr.length) {
			return 0;
		}
		if (dp[ind][buy][c] != -1) {
			return dp[ind][buy][c];
		}
		int profit = 0;
		if (buy == 1) {
			profit = Math.max((-arr[ind] + stock(ind + 1,0,dp,arr,c)),stock(ind + 1,1,dp,arr,c));
		} 
		else {
			profit = Math.max((arr[ind] + stock(ind + 1,1,dp,arr,c - 1)),stock(ind + 1,0,dp,arr,c));
		}
		return dp[ind][buy][c] = profit;
	}
}