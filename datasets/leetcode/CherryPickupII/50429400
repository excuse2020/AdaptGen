class Solution {
	int cherryPickup(int[][] grid) {
		int[][][] dp = new int[grid.length][grid[0].length][grid[0].length];
		for (int i = grid.length - 1; i >= 0; i--) {
			for (int j1 = 0; j1 < grid[0].length; j1++) {
				for (int j2 = 0; j2 < grid[0].length; j2++) {
					if (i == grid.length - 1) {
						dp[i][j1][j2] = (j1 == j2) ? grid[i][j1] : grid[i][j1] + grid[i][j2];
					} 
					else {
						int max = Integer.MIN_VALUE;
						for (int p = -1; p <= 1; p++) {
							if (j1 + p < grid[0].length && j1 + p >= 0) {
								for (int q = -1; q <= 1; q++) {
									if (j2 + q < grid[0].length && j2 + q >= 0) {
										int curr = dp[i + 1][j1 + p][j2 + q];
										max = Math.max(max,curr);
									}
								}
							}
						}
						dp[i][j1][j2] = max + ((j1 == j2) ? grid[i][j1] : grid[i][j1] + grid[i][j2]);
					}
				}
			}
		}
		return dp[0][0][grid[0].length - 1];
	}
	int solve(int[][] grid, int i, int j1, int j2, int n, int m, int[][][] dp) {
		if (j1 >= m || j1 < 0 || j2 >= m || j2 < 0) {
			return Integer.MIN_VALUE;
		}
		if (i == n - 1) {
			int ans = (j1 == j2) ? grid[i][j1] : grid[i][j1] + grid[i][j2];
			return ans;
		}
		if (dp[i][j1][j2] != -1) {
			return dp[i][j1][j2];
		}
		int ans = (j1 == j2) ? grid[i][j1] : grid[i][j1] + grid[i][j2];
		int max = Integer.MIN_VALUE;
		for (int p = -1; p <= 1; p++) {
			for (int q = -1; q <= 1; q++) {
				max = Math.max(max,solve(grid,i + 1,j1 + p,j2 + q,n,m,dp));
			}
		}
		dp[i][j1][j2] = (max == Integer.MIN_VALUE) ? ans : (ans + max);
		return dp[i][j1][j2];
	}
}