class Solution {
	int res, ans;
	void dfs(int i, ArrayList<Integer>[] adj, boolean[] isVis) {
		isVis[i] = true;
		res++;
		for (int j: adj[i]) {	
			if (!isVis[j]) {
				dfs(j,adj,isVis);
			}
		}
	}
	int maximumDetonation(int[][] bombs) {
		int n = bombs.length;
		ArrayList<Integer>[] det = new ArrayList[n];
		for (int i = 0; i < n; i++) {
			det[i] = new ArrayList<Integer>();
		}
		for (int i = 0; i < n; i++) {
			for (int j = i + 1; j < n; j++) {
				float dist = (float) Math.sqrt(Math.pow(bombs[i][0] - bombs[j][0],2) + Math.pow(bombs[i][1] - bombs[j][1],2));
				if (dist <= bombs[i][2]) {
					det[i].add(j);
				}
				if (dist <= bombs[j][2]) {
					det[j].add(i);
				}
			}
		}
		for (int i = 0; i < n; i++) {
			boolean[] isVis = new boolean[n];
			res = 0;
			dfs(i,det,isVis);
			ans = Math.max(res,ans);
		}
		return ans;
	}
}