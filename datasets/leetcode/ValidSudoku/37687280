class Solution {
	boolean isSafe(char[][] board, int row, int col, char num) {
		for (int i = 0; i < board.length; i++) {
			if (board[i][col] == num) {
				return false;
			}
			if (board[row][i] == num) {
				return false;
			}
		}
		int sqrt = (int) (Math.sqrt(board.length));
		int rowStart = row - row % sqrt;
		int colStart = col - col % sqrt;
		for (int r = rowStart; r < rowStart + sqrt; r++) {
			for (int c = colStart; c < colStart + sqrt; c++) {
				if (board[r][c] == num) {
					return false;
				}
			}
		}
		return true;
	}
	boolean isValidSudoku(char[][] board) {
		return solve(board);
	}
	boolean solve(char[][] board) {
		int i = 0;
		int j = 0;
	}
}