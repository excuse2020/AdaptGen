class Solution {
	int largestRectangleArea(int[] heights) {
		int n = heights.length;
		int max = Integer.MIN_VALUE;
		Stack<Integer> left = new Stack<>();
		int[] l = new int[n];
		Stack<Integer> right = new Stack<>();
		int[] r = new int[n];
		for (int i = 0; i < n; i++) {
			while (!left.isEmpty() && heights[left.peek()] >= heights[i]) {
				left.pop();
			}
			if (left.isEmpty()) {
				l[i] = -1;
			} 
			else {
				l[i] = left.peek();
			}
			left.push(i);
		}
		for (int i = n - 1; i >= 0; i--) {
			while (!right.isEmpty() && heights[right.peek()] >= heights[i]) {
				right.pop();
			}
			if (right.isEmpty()) {
				r[i] = n;
			} 
			else {
				r[i] = right.peek();
			}
			right.push(i);
		}
		for (int i = 0; i < n; i++) {
			int length = r[i] - l[i];
			int height = heights[i];
			int side = Math.min(length,height);
			max = Math.max(max,(side * side));
		}
		return max;
	}
	int maximalSquare(char[][] matrix) {
		int m = matrix.length;
		if (m == 0) {
			return 0;
		}
		int n = matrix[0].length;
		int[] heights = new int[n];
		int max = Integer.MIN_VALUE;
		int i = 0;
		int j = 0;
	}
}