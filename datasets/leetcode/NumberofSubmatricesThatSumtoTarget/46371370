class Solution {
	int numSubmatrixSumTarget(int[][] matrix, int target) {
		int m = matrix.length, n = matrix[0].length;
		for (int i = 0; i < m; i++) {
			for (int j = 1; j < n; j++) {
				matrix[i][j] += matrix[i][j - 1];
			}
		}
		int res = 0;
		for (int i = 0; i < n; i++) {
			for (int j = i; j < n; j++) {
				int count = 0;
				HashMap<Integer, Integer> map = new HashMap<>();
				map.put(0,1);
				for (int a = 0; a < m; a++) {
					int sum = i == 0 ? 0 : matrix[a][i - 1];
					count += matrix[a][j] - sum;
					if (map.containsKey(count - target)) {
						res += map.get(count - target);
					}
					if (map.containsKey(count)) {
						map.put(count,map.get(count) + 1);
					} 
					else {
						map.put(count,1);
					}
				}
			}
		}
		return res;
	}
}