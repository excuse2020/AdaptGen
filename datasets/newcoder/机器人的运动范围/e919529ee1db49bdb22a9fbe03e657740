class Solution {
	int check(int row, int col) {
		int sum = 0;
		while (row != 0) {
			sum = sum + (row % 10);
			row = row / 10;
		}
		while (col != 0) {
			sum = sum + (col % 10);
			col = col / 10;
		}
		return sum;
	}
	int movingCount(int threshold, int rows, int cols) {
		boolean[][] visited = new boolean[rows][cols];
		int res = 0;
		Queue<int[]> queue = new LinkedList<>();
		queue.add(new int{0, 0});
		while (queue.size() > 0) {
			int[] x = queue.poll();
			int i = x[0], j = x[1];
			if (i >= rows || j >= cols || threshold < check(i,j) || visited[i][j]) {
				continue;
			}
			visited[i][j] = true;
			res++;
			queue.add(new int{i + 1, j});
			queue.add(new int{i, j + 1});
		}
		return res;
	}
}