class Solution {
	long subArrayRanges(int[] arr) {
		int left = new int[arr.length];
		int right = new int[arr.length];
		Stack<Integer> st = new Stack<>();
		for (int i = 0; i < arr.length; i++) {
			if (st.isEmpty()) {
				left[i] = -1;
			} 
			else {
				while (!st.isEmpty() && arr[st.peek()] >= arr[i]) {
					st.pop();
				}
				if (st.isEmpty()) {
					left[i] = -1;
				} 
				else {
					left[i] = st.peek();
				}
			}
			st.push(i);
		}
		while (!st.isEmpty()) {
			st.pop();
		}
		for (int i = arr.length - 1; i >= 0; i--) {
			if (st.isEmpty()) {
				right[i] = arr.length;
			} 
			else {
				while (!st.isEmpty() && arr[st.peek()] > arr[i]) {
					st.pop();
				}
				if (st.isEmpty()) {
					right[i] = arr.length;
				} 
				else {
					right[i] = st.peek();
				}
			}
			st.push(i);
		}
		long sum = 0;
		for (int i = 0; i < arr.length; i++) {
			int l = i - left[i];
			int r = right[i] - i;
			long ways = l * r;
			sum += ways * arr[i];
		}
		while (!st.isEmpty()) {
			st.pop();
		}
		for (int i = 0; i < arr.length; i++) {
			if (st.isEmpty()) {
				left[i] = -1;
			} 
			else {
				while (!st.isEmpty() && arr[st.peek()] <= arr[i]) {
					st.pop();
				}
				if (st.isEmpty()) {
					left[i] = -1;
				} 
				else {
					left[i] = st.peek();
				}
			}
			st.push(i);
		}
		while (!st.isEmpty()) {
			st.pop();
		}
		for (int i = arr.length - 1; i >= 0; i--) {
			if (st.isEmpty()) {
				right[i] = arr.length;
			} 
			else {
				while (!st.isEmpty() && arr[st.peek()] < arr[i]) {
					st.pop();
				}
				if (st.isEmpty()) {
					right[i] = arr.length;
				} 
				else {
					right[i] = st.peek();
				}
			}
			st.push(i);
		}
		long s = 0;
		for (int i = 0; i < arr.length; i++) {
			int l = i - left[i];
			int r = right[i] - i;
			long ways = l * r;
			s += ways * arr[i];
		}
		return s - sum;
	}
}