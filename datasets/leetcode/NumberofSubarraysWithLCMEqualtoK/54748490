class Solution {
	int gcd(int a, int b) {
		if (a == b) {
			return a;
		}
		if (a == 0) {
			return b;
		}
		if (b == 0) {
			return a;
		}
		if ((a & 1) == 0 && (b & 1) == 0) {
			return gcd(a >> 1,b >> 1) << 1;
		}
		if ((a & 1) == 0) {
			return gcd(a >> 1,b);
		}
		if ((b & 1) == 0) {
			return gcd(a,b >> 1);
		}
		return a > b ? gcd((a - b) >> 1,b) : gcd((b - a) >> 1,a);
	}
	int lcm(int a, int b) {
		return a * (b / gcd(a,b));
	}
	int subarrayLCM(int[] nums, int k) {
		int n = nums.length;
		int ans = 0;
		for (int i = 0; i < n; i++) {
			int l = 1;
			for (int j = i; j < n; j++) {
				l = lcm(l,nums[j]);
				if (l == k) {
					ans += 1;
				}
				if (l > k) {
					break;
				}
			}
		}
		return ans;
	}
}