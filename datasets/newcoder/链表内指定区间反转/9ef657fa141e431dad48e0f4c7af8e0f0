class Solution {
	ListNode reverseBetween(ListNode head, int m, int n) {
		ListNode next = null;
		List<Integer> nodeList = new ArrayList<>();
		while (head != null) {
			nodeList.add(head.val);
			next = head.next;
			head = next;
		}
		List<Integer> nodeListm = nodeList.subList(0,m - 1);
		List<Integer> nodeListmn = nodeList.subList(m - 1,n);
		List<Integer> nodeListn = nodeList.subList(n,nodeList.size());
		Collections.reverse(nodeListmn);
		nodeList = new ArrayList<>();
		nodeList.addAll(nodeListm);
		nodeList.addAll(nodeListmn);
		nodeList.addAll(nodeListn);
		Collections.reverse(nodeList);
		ListNode resultNode = null;
		for (int i = 0; i < nodeList.size(); i++) {
			ListNode nowNode = new ListNode(nodeList.get(i));
			nowNode.next = resultNode;
			resultNode = nowNode;
		}
		return resultNode;
	}
}