class Solution {
	Integer dp;
	int helper(int ind, int[] obs, int lane) {
		if (ind == obs.length - 1) {
			return 0;
		}
		if (lane == obs[ind]) {
			return 1000000;
		}
		if (dp[ind][lane] != null) {
			return dp[ind][lane];
		}
		int take = 0;
		if (lane != obs[ind + 1]) {
			take = 0 + helper(ind + 1,obs,lane);
		} 
		else {
			if (lane == 1) {
				take = Math.min(1 + helper(ind,obs,2),1 + helper(ind,obs,3));
			} 
			else if (lane == 2) {
				take = Math.min(1 + helper(ind,obs,1),1 + helper(ind,obs,3));
			} 
			else {
				take = Math.min(1 + helper(ind,obs,1),1 + helper(ind,obs,2));
			}
		}
		return dp[ind][lane] = take;
	}
	int minSideJumps(int[] obstacles) {
		dp = new Integer[obstacles.length + 1][4];
		int ans = helper(0,obstacles,2);
		return ans;
	}
}