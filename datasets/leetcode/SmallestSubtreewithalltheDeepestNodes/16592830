class Solution {
	int depth(TreeNode root) {
		if (root == null) {
			return 0;
		}
		int lh = depth(root.left);
		int rh = depth(root.right);
		if (lh >= rh) {
			return lh + 1;
		} 
		else {
			return rh + 1;
		}
	}
	TreeNode parent(TreeNode root, int h) {
		if (root == null) {
			return null;
		}
		TreeNode left = parent(root.left,h - 1);
		TreeNode right = parent(root.right,h - 1);
		if (h == 0) {
			return root;
		}
		if (left == null) {
			return right;
		}
		if (right == null) {
			return left;
		} 
		else {
			return root;
		}
	}
	TreeNode subtreeWithAllDeepest(TreeNode root) {
		int height = 0;
		height = depth(root);
		height--;
		return parent(root,height);
	}
}