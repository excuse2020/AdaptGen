class Solution {
	boolean bfs(HashMap<Integer, LinkedList<Integer>> graph, int start, int[] colors) {
		Queue<int[]> q = new LinkedList();
		q.add(new int{start, -1});
		while (!q.isEmpty()) {
			int cur = q.peek()[0];
			int prev = q.peek()[1];
			q.remove();
			if (prev == -1 || prev == 2) {
				colors[cur] = 1;
			} 
			else if (prev == 1) {
				colors[cur] = 2;
			}
			for (int x: graph.get(cur)) {	
				if (colors[x] == -1) {
					q.add(new int{x, colors[cur]});
				} 
				else if (colors[cur] == colors[x]) {
					return false;
				}
			}
		}
		return true;
	}
	boolean possibleBipartition(int n, int[][] dislikes) {
		HashMap<Integer, LinkedList<Integer>> graph = new HashMap();
		for (int i = 1; i <= n; i++) {
			graph.put(i,new LinkedList<Integer>());
		}
		for (int[] e: dislikes) {	
			int from = e[0];
			int to = e[1];
			graph.get(from).add(to);
			graph.get(to).add(from);
		}
		int[] colors = new int[n + 1];
		Arrays.fill(colors,-1);
		for (int i = 1; i <= n; i++) {
			if (colors[i] == -1) {
				if (!bfs(graph,i,colors)) {
					return false;
				}
			}
		}
		return true;
	}
}