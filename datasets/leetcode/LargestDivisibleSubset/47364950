class Solution {
	List<Integer> largestDivisibleSubset(int[] nums) {
		int n = nums.length;
		Arrays.sort(nums);
		int[] idx = new int[n];
		int[] count = new int[n];
		Arrays.fill(idx,-1);
		Arrays.fill(count,1);
		for (int i = 0; i < n; i++) {
			for (int j = i - 1; j >= 0; j--) {
				if (nums[i] % nums[j] == 0) {
					if (count[j] + 1 > count[i]) {
						count[i] = count[j] + 1;
						idx[i] = j;
					}
				}
			}
		}
		int maxCount = 0;
		int maxIdx = -1;
		for (int i = 0; i < n; i++) {
			if (count[i] > maxCount) {
				maxCount = count[i];
				maxIdx = i;
			}
		}
		List<Integer> res = new ArrayList<>();
		while (maxIdx != -1) {
			res.add(nums[maxIdx]);
			maxIdx = idx[maxIdx];
		}
		return res;
	}
}