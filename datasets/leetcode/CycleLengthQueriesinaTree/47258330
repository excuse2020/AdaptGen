class Solution {
	int[] cycleLengthQueries(int n, int[][] queries) {
		int result = new int[queries.length];
		for (int i = 0; i < queries.length; i++) {
			result[i] = getSum(queries[i][0],queries[i][1]);
		}
		return result;
	}
	int getSum(int a, int b) {
		int depthA = 0;
		int k = a;
		while (k > 0) {
			depthA++;
			k /= 2;
		}
		int depthB = 0;
		k = b;
		while (k > 0) {
			depthB++;
			k /= 2;
		}
		if (depthA > depthB) {
			int temp = depthA;
			depthA = depthB;
			depthB = temp;
			temp = a;
			a = b;
			b = temp;
		}
		int len = 0;
		while (depthA < depthB) {
			depthB--;
			b /= 2;
			len++;
		}
		int lcaLen = 0;
		while (a != b) {
			a /= 2;
			b /= 2;
			lcaLen++;
		}
		return len + lcaLen * 2 + 1;
	}
}