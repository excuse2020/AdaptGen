class Solution {
	long[] countBlackBlocks(int m, int n, int[][] coordinates) {
		long[] output = new long[5];
		output[0] = (Long.valueOf(m) - 1) * (Long.valueOf(n) - 1);
		Set<Integer> blocks = new HashSet<Integer>();
		for (int i = 0; i < coordinates.length; i++) {
			int x = coordinates[i][0], y = coordinates[i][1];
			blocks.add(x * n + y);
			if (x >= 1 && y >= 1) {
				int count = 0;
				for (int xn = 0; xn < 2; xn++) {
					for (int yn = 0; yn < 2; yn++) {
						if (blocks.contains((x - xn) * n + (y - yn))) {
							count++;
						}
					}
				}
				output[count - 1]--;
				output[count]++;
			}
			if (x >= 1 && y < n - 1) {
				int count = 0;
				for (int xn = 0; xn < 2; xn++) {
					for (int yn = 0; yn < 2; yn++) {
						if (blocks.contains((x - xn) * n + (y + yn))) {
							count++;
						}
					}
				}
				output[count - 1]--;
				output[count]++;
			}
			if (x < m - 1 && y >= 1) {
				int count = 0;
				for (int xn = 0; xn < 2; xn++) {
					for (int yn = 0; yn < 2; yn++) {
						if (blocks.contains((x + xn) * n + (y - yn))) {
							count++;
						}
					}
				}
				output[count - 1]--;
				output[count]++;
			}
			if (x < m - 1 && y < n - 1) {
				int count = 0;
				for (int xn = 0; xn < 2; xn++) {
					for (int yn = 0; yn < 2; yn++) {
						if (blocks.contains((x + xn) * n + (y + yn))) {
							count++;
						}
					}
				}
				output[count - 1]--;
				output[count]++;
			}
		}
		return output;
	}
}