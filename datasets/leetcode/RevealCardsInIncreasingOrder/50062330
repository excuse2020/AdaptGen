class Solution {
	int[] deckRevealedIncreasing(int[] deck) {
		Deque<Integer> dq = new LinkedList<>();
		if (deck.length < 3) {
			return deck;
		}
		Arrays.sort(deck);
		reverse(deck);
		dq.offerFirst(deck[0]);
		dq.offerFirst(deck[1]);
		for (int i = 2; i < deck.length; i++) {
			dq.offerFirst(dq.pollLast());
			dq.offerFirst(deck[i]);
		}
		for (int i = 0; i < deck.length; i++) {
			deck[i] = dq.pollFirst();
		}
		return deck;
	}
	void reverse(int[] array) {
		int n = array.length;
		for (int i = 0; i < n / 2; i++) {
			int temp = array[i];
			array[i] = array[n - i - 1];
			array[n - i - 1] = temp;
		}
	}
}