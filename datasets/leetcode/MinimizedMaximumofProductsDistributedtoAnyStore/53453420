class Solution {
	boolean isValid(int quantities, int maxProduct, int stores) {
		int storeCount = 0;
		for (int i = 0; i < quantities.length; i++) {
			storeCount += quantities[i] / maxProduct;
			if (quantities[i] % maxProduct != 0) {
				storeCount += 1;
			}
			if (storeCount > stores) {
				return false;
			}
		}
		return true;
	}
	int minimizedMaximum(int n, int[] quantities) {
		int ans = -1;
		int start = 1;
		int end = Integer.MIN_VALUE;
		for (int i = 0; i < quantities.length; i++) {
			if (quantities[i] > end) {
				end = quantities[i];
			}
		}
		while (start <= end) {
			int mid = start + (end - start) / 2;
			if (isValid(quantities,mid,n)) {
				ans = mid;
				end = mid - 1;
			} 
			else {
				start = mid + 1;
			}
		}
		return ans;
	}
}