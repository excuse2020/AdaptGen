class Solution {
	int minimumJumps(int[] forbidden, int a, int b, int x) {
		int n = forbidden.length;
		boolean[][] visited = new boolean[6000][2];
		if (x == 0) {
			return 0;
		}
		for (int i = 0; i < n; i++) {
			visited[forbidden[i]][0] = true;
			visited[forbidden[i]][1] = true;
		}
		int ans = 0;
		Queue<int[]> q = new LinkedList();
		q.add(new int{0, 0});
		while (q.size() > 0) {
			int size = q.size();
			while (size-- > 0) {
				int[] pos = q.poll();
				if (visited[pos[0]][pos[1]]) {
					continue;
				}
				visited[pos[0]][pos[1]] = true;
				if (pos[0] == x) {
					return ans;
				}
				if (pos[0] + a < 6000) {
					q.add(new int{pos[0] + a, 0});
				}
				if (pos[0] - b >= 0 && pos[1] != 1) {
					q.add(new int{pos[0] - b, 1});
				}
			}
			ans++;
		}
		return -1;
	}
}