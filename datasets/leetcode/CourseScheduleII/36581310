class Solution {
	int[] findOrder(int numCourses, int[][] prerequisites) {
		int n = numCourses;
		List<List<Integer>> adj = new ArrayList<>();
		for (int i = 0; i < n; i++) {
			adj.add(new ArrayList<>());
		}
		for (int i = 0; i < prerequisites.length; i++) {
			adj.get(prerequisites[i][1]).add(prerequisites[i][0]);
		}
		int[] indegree = new int[n];
		for (int i = 0; i < n; i++) {
			for (int it: adj.get(i)) {	
				indegree[it]++;
			}
		}
		Queue<Integer> q = new LinkedList<>();
		for (int i = 0; i < n; i++) {
			if (indegree[i] == 0) {
				q.add(i);
			}
		}
		int[] ans = new int[n];
		int index = 0;
		int count = 0;
		while (!q.isEmpty()) {
			int node = q.poll();
			count++;
			ans[index++] = node;
			for (int it: adj.get(node)) {	
				indegree[it]--;
				if (indegree[it] == 0) {
					q.add(it);
				}
			}
		}
		if (count != n) {
			return new int[0];
		}
		return ans;
	}
}