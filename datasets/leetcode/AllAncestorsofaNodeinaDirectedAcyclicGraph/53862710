class Solution {
	void dfs(int index, List<List<Integer>> output, List<List<Integer>> container, boolean[] visited) {
		if (container.get(index).size() == 0) {
			return;
		}
		Queue<Integer> q = new LinkedList<>();
		TreeSet<Integer> ts = new TreeSet<>();
		for (int i: container.get(index)) {	
			if (visited[i] == false) {
				q.offer(i);
				visited[i] = true;
			}
		}
		while (!q.isEmpty()) {
			int digit = q.poll();
			ts.add(digit);
			for (int i: container.get(digit)) {	
				if (visited[i] == false) {
					q.offer(i);
					visited[i] = true;
				}
			}
		}
		for (int i: ts) {	
			output.get(index).add(i);
		}
	}
	List<List<Integer>> getAncestors(int n, int[][] edges) {
		List<List<Integer>> container = new ArrayList<>();
		List<List<Integer>> output = new ArrayList<>();
		for (int i = 0; i < n; i++) {
			container.add(new ArrayList<>());
			output.add(new ArrayList<>());
		}
		for (int[] e: edges) {	
			int first = e[0];
			int second = e[1];
			container.get(second).add(first);
		}
		for (int i = 0; i < n; i++) {
			dfs(i,output,container,new boolean[n]);
		}
		return output;
	}
}