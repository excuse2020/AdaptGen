class Solution {
	int gcd(int a, int b) {
		if (b == 0) {
			return a;
		}
		return gcd(b,a % b);
	}
	int maxPoints(int[][] points) {
		int n = points.length;
		if (n == 1) {
			return 1;
		}
		int maxPoint = Integer.MIN_VALUE;
		for (int i = 0; i < n - 1; i++) {
			int x1 = points[i][0];
			int y1 = points[i][1];
			int repeat = 1;
			Map<String, Integer> slope = new HashMap<>();
			int curMax = Integer.MIN_VALUE;
			for (int j = i + 1; j < n; j++) {
				int x2 = points[j][0];
				int y2 = points[j][1];
				if (x1 == x2 && y1 == y2) {
					repeat++;
					continue;
				}
				int x = x2 - x1;
				int y = y2 - y1;
				int gcd = gcd(x,y);
				x /= gcd;
				y /= gcd;
				if ((x < 0 && y < 0) || (x * y < 0)) {
					x *= -1;
					y *= -1;
				}
				String key = x + "-";
				slope.put(key,slope.getOrDefault(key,0) + 1);
				curMax = Math.max(curMax,slope.get(key));
			}
			maxPoint = Math.max(maxPoint,curMax + repeat);
		}
		return maxPoint;
	}
}