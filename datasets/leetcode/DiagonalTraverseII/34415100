class Solution {
	int[] findDiagonalOrder(List<List<Integer>> nums) {
		int diagonals = 0;
		int arrSize = 0;
		for (int i = 0; i < nums.size(); i++) {
			diagonals = Math.max(i + nums.get(i).size(),diagonals);
			arrSize += nums.get(i).size();
		}
		List<List<Integer>> buckets = new ArrayList<>();
		for (int i = 0; i < diagonals; i++) {
			buckets.add(new ArrayList<Integer>());
		}
		int bucketIndex = 0;
		for (List<Integer> ls: nums) {	
			int index = bucketIndex;
			for (int n: ls) {	
				buckets.get(index).add(n);
				index++;
			}
			bucketIndex++;
		}
		int[] output = new int[arrSize];
		int i = 0;
		for (List<Integer> ls: buckets) {	
			for (int j = ls.size() - 1; j >= 0; j--) {
				output[i] = ls.get(j);
				i++;
			}
		}
		return output;
	}
}