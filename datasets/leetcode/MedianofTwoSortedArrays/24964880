class Solution {
	double findMedianSortedArrays(int[] nums1, int[] nums2) {
		int nums1Pointer = 0;
		int nums2Pointer = 0;
		int numsPointer = 0;
		int[] nums = new int[nums1.length + nums2.length];
		while (nums1Pointer < nums1.length && nums2Pointer < nums2.length) {
			if (nums1[nums1Pointer] < nums2[nums2Pointer]) {
				nums[numsPointer] = nums1[nums1Pointer];
				nums1Pointer++;
			} 
			else {
				nums[numsPointer] = nums2[nums2Pointer];
				nums2Pointer++;
			}
			numsPointer++;
		}
		while (nums1Pointer < nums1.length) {
			nums[numsPointer] = nums1[nums1Pointer];
			numsPointer++;
			nums1Pointer++;
		}
		while (nums2Pointer < nums2.length) {
			nums[numsPointer] = nums2[nums2Pointer];
			numsPointer++;
			nums2Pointer++;
		}
		if (nums.length % 2 == 0) {
			double median = (double) (nums[nums.length / 2] + nums[(nums.length / 2) - 1]) / 2;
			return median;
		} 
		else {
			double median = nums[(nums.length - 1) / 2];
			return median;
		}
	}
}
class Solution {
	double findMedianSortedArrays(int[] nums1, int[] nums2) {
		if (nums1.length > nums2.length) {
			return findMedianSortedArrays(nums2,nums1);
		}
		int nums1Length = nums1.length;
		int nums2Length = nums2.length;
		int start = 0;
		int end = nums1Length;
		while (start <= end) {
			int partition1 = start + (end - start) / 2;
			int partition2 = (nums1Length + nums2Length) / 2 - partition1;
			int left1 = (partition1 > 0) ? nums1[partition1 - 1] : Integer.MIN_VALUE;
			int left2 = (partition2 > 0) ? nums2[partition2 - 1] : Integer.MIN_VALUE;
			int right1 = (partition1 < nums1Length) ? nums1[partition1] : Integer.MAX_VALUE;
			int right2 = (partition2 < nums2Length) ? nums2[partition2] : Integer.MAX_VALUE;
			if (left1 <= right2 && left2 <= right1) {
				if ((nums1Length + nums2Length) % 2 == 0) {
					return (Math.max(left1,left2) + Math.min(right1,right2)) / 2.0;
				} 
				else {
					return Math.max(left1,left2);
				}
			} 
			else if (left1 > right2) {
				end = partition1 - 1;
			} 
			else {
				start = partition1 + 1;
			}
		}
		return 0.0;
	}
}