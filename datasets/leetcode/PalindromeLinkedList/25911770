class Solution {
	int getSize(ListNode head) {
		int size = 0;
		ListNode current = head;
		while (current != null) {
			size++;
			current = current.next;
		}
		return size;
	}
	boolean isPalindrome(ListNode head) {
		int mid = getSize(head) / 2;
		int count = 0;
		ListNode curr = head;
		ListNode prev = head;
		ListNode second = null;
		while (count < mid) {
			count++;
			prev = curr;
			curr = curr.next;
		}
		second = curr;
		prev.next = null;
		ListNode l1 = head;
		ListNode l2 = reverse(second);
		while (l1 != null && l2 != null) {
			if (l1.val != l2.val) {
				return false;
			}
			l1 = l1.next;
			l2 = l2.next;
		}
		return true;
	}
	ListNode reverse(ListNode head) {
		ListNode prev = null;
		ListNode curr = head;
		while (curr != null) {
			ListNode next = curr.next;
			curr.next = prev;
			prev = curr;
			curr = next;
		}
		return prev;
	}
}