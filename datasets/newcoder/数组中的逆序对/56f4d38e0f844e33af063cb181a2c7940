class SolutionInv {
	Integer count = 0;
	Integer InversePairs(int[] array) {
		divMerge(array,0,array.length - 1);
		return count;
	}
	void divMerge(int[] array, int left, int right) {
		if (left >= right) {
			return;
		}
		int middle = left + (right - left) / 2;
		divMerge(array,left,middle);
		divMerge(array,middle + 1,right);
		int i = left;
		int j = middle + 1;
		int[] tmp = new int[right - left + 1];
		int k = 0;
		while (i <= middle && j <= right) {
			if (array[i] > array[j]) {
				count += (middle - i + 1);
				count %= 1000000007;
				tmp[k++] = array[j++];
			} 
			else {
				tmp[k++] = array[i++];
			}
		}
		while (j <= right) {
			tmp[k++] = array[j++];
		}
		while (i <= middle) {
			tmp[k++] = array[i++];
		}
		for (int l = 0; l < k; l++) {
			array[left++] = tmp[l];
		}
		System.out.println(JSON.toJSONString(array));
	}
}