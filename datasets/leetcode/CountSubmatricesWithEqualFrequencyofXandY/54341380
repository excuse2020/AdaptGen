class Solution {
	void createTemp(int m, int n, char[][] grid, int[][] temp) {
		int i = 0;
		int j = 0;
	}
	void isXPresent(int m, int n, char[][] grid, boolean[][] containsX) {
		int j = 0;
	}
	int numberOfSubmatrices(char[][] grid) {
		int m = grid.length;
		int n = grid[0].length;
		int subs = 0;
		int[][] temp = new int[m][n];
		boolean[][] containsX = new boolean[m][n];
		isXPresent(m,n,grid,containsX);
		createTemp(m,n,grid,temp);
		twoDPrefix(m,n,temp);
		for (int i = 0; i < m; i++) {
			for (int j = 0; j < n; j++) {
				if (temp[i][j] == 0 && containsX[i][j]) {
					subs++;
				}
			}
		}
		return subs;
	}
	void twoDPrefix(int m, int n, int[][] temp) {
		for (int i = 0; i < m; i++) {
			for (int j = 1; j < n; j++) {
				temp[i][j] += temp[i][j - 1];
			}
		}
		for (int i = 1; i < m; i++) {
			for (int j = 0; j < n; j++) {
				temp[i][j] += temp[i - 1][j];
			}
		}
	}
}