class Solution {
	int[] findOrder(int numCourses, int[][] prerequisites) {
		int n = prerequisites.length;
		List<ArrayList<Integer>> adj = new ArrayList<>();
		for (int i = 0; i < numCourses; i++) {
			adj.add(new ArrayList<>());
		}
		for (int i = 0; i < n; i++) {
			adj.get(prerequisites[i][1]).add(prerequisites[i][0]);
		}
		int[] indegree = new int[numCourses];
		for (int i = 0; i < numCourses; i++) {
			for (int x: adj.get(i)) {	
				indegree[x]++;
			}
		}
		Queue<Integer> q = new LinkedList<>();
		for (int i = 0; i < indegree.length; i++) {
			if (indegree[i] == 0) {
				q.add(i);
			}
		}
		int topo = new int[numCourses];
		int topoIndex = 0;
		while (!q.isEmpty()) {
			int curr = q.poll();
			topo[topoIndex++] = curr;
			for (int neighbour: adj.get(curr)) {	
				indegree[neighbour]--;
				if (indegree[neighbour] == 0) {
					q.add(neighbour);
				}
			}
		}
		if (topoIndex == numCourses) {
			return topo;
		} 
		else {
			return new int[0];
		}
	}
}