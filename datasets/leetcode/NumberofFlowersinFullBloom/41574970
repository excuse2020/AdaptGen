class Solution {
	int firstGreater(List<Integer> A, int target) {
		int l = 0;
		int r = A.size();
		while (l < r) {
			int m = (l + r) / 2;
			if (A.get(m) > target) {
				r = m;
			} 
			else {
				l = m + 1;
			}
		}
		return l;
	}
	int firstGreaterEqual(List<Integer> A, int target) {
		int l = 0;
		int r = A.size();
		while (l < r) {
			int m = (l + r) / 2;
			if (A.get(m) >= target) {
				r = m;
			} 
			else {
				l = m + 1;
			}
		}
		return l;
	}
	int[] fullBloomFlowers(int[][] flowers, int[] people) {
		int[] ans = new int[people.length];
		List<Integer> starts = new ArrayList<>();
		List<Integer> ends = new ArrayList<>();
		for (int[] flower: flowers) {	
			starts.add(flower[0]);
			ends.add(flower[1]);
		}
		Collections.sort(starts);
		Collections.sort(ends);
		for (int i = 0; i < people.length; ++i) {
			int started = firstGreater(starts,people[i]);
			int ended = firstGreaterEqual(ends,people[i]);
			ans[i] = started - ended;
		}
		return ans;
	}
}