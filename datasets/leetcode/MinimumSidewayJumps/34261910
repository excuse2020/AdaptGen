class Solution {
	int minSideJumps(int[] arr) {
		int n = arr.length;
		int[][] res = new int[n][3];
		for (int[] a: res) {	
			Arrays.fill(a,(int) (1e9));
		}
		for (int i = 0; i < n; i++) {
			if (arr[i] > 0) {
				res[i][arr[i] - 1] = -1;
			}
		}
		Queue<int[]> queue = new LinkedList<>();
		queue.add(new int{0, 1});
		res[0][1] = 0;
		while (!queue.isEmpty()) {
			int[] cur = queue.remove();
			int i = cur[0], j = cur[1];
			if (i + 1 < n && res[i + 1][j] != -1 && res[i][j] < res[i + 1][j]) {
				res[i + 1][j] = res[i][j];
				queue.add(new int{i + 1, j});
			}
			if (j + 1 < 3 && res[i][j + 1] != -1 && res[i][j] + 1 < res[i][j + 1]) {
				res[i][j + 1] = res[i][j] + 1;
				queue.add(new int{i, j + 1});
			}
			if (j - 1 >= 0 && res[i][j - 1] != -1 && res[i][j] + 1 < res[i][j - 1]) {
				res[i][j - 1] = res[i][j] + 1;
				queue.add(new int{i, j - 1});
			}
			if (j + 2 < 3 && res[i][j + 2] != -1 && res[i][j] + 1 < res[i][j + 2]) {
				res[i][j + 2] = res[i][j] + 1;
				queue.add(new int{i, j + 2});
			}
			if (j - 2 >= 0 && res[i][j - 2] != -1 && res[i][j] + 1 < res[i][j - 2]) {
				res[i][j - 2] = res[i][j] + 1;
				queue.add(new int{i, j - 2});
			}
		}
		return Math.min(res[n - 1][0],Math.min(res[n - 1][1],res[n - 1][2]));
	}
}