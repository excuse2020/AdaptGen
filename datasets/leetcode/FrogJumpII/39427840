class Solution {
	boolean check(int[] stones, int mj) {
		List<Integer> wrap = new ArrayList<>();
		wrap.add(0);
		int i = 1, n = stones.length;
		while (i < n) {
			if (stones[i] - stones[wrap.get(wrap.size() - 1)] > mj) {
				if (i - 1 != wrap.get(wrap.size() - 1)) {
					wrap.add(i - 1);
				} 
				else {
					return false;
				}
			} 
			else {
				i++;
			}
		}
		int c = n - 1;
		i = n - 2;
		while (i >= 0) {
			if (wrap.get(wrap.size() - 1) == i && i != 0) {
				i--;
				wrap.remove(wrap.size() - 1);
			} 
			else {
				if (stones[c] - stones[i] > mj) {
					return false;
				} 
				else {
					c = i;
					i--;
				}
			}
		}
		return true;
	}
	int maxJump(int[] stones) {
		int l = 1, r = stones[stones.length - 1] - stones[0];
		while (l <= r) {
			int mid = l + (r - l) / 2;
			if (check(stones,mid)) {
				r = mid - 1;
			} 
			else {
				l = mid + 1;
			}
		}
		return r + 1;
	}
}