class Solution {
	int binarySearch(int val, int[] wordsFreq) {
		int left = 0;
		int right = wordsFreq.length - 1;
		while (right > left) {
			int mid = (right - left) / 2 + left;
			if (wordsFreq[mid] > val) {
				right = mid;
			} 
			else {
				left = mid + 1;
			}
		}
		if (wordsFreq[left] <= val) {
			return 0;
		}
		return wordsFreq.length - left;
	}
	void findFreq(String[] queries, int[] queriesFreq) {
		int i = 0;
		String curStr = queries[i];
		char[] arr = curStr.toCharArray();
		int[] freqTable = new int[26];
		char minChar;
	}
	int[] numSmallerByFrequency(String[] queries, String[] words) {
		int[] queriesFreq = new int[queries.length];
		int[] wordsFreq = new int[words.length];
		findFreq(queries,queriesFreq);
		findFreq(words,wordsFreq);
		Arrays.sort(wordsFreq);
		int[] res = processAllQuery(queriesFreq,wordsFreq);
		return res;
	}
	int[] processAllQuery(int[] queriesFreq, int[] wordsFreq) {
		int size = queriesFreq.length;
		int[] res = new int[size];
		for (int i = 0; i < size; i++) {
			res[i] = binarySearch(queriesFreq[i],wordsFreq);
		}
		return res;
	}
}