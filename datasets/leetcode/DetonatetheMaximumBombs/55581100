class Solution {
	void bfs(int i, boolean[] visited, int[][] bombs) {
		Queue<Integer> pq = new LinkedList<>();
		pq.add(i);
		visited[i] = true;
		while (!pq.isEmpty()) {
			int a = pq.poll();
			for (int j = 0; j < visited.length; j++) {
				if (j != i && !visited[j] && isFeasible(a,j,bombs)) {
					pq.add(j);
					visited[j] = true;
				}
			}
		}
	}
	int count(boolean[] visited) {
		int c = 0;
		for (int i = 0; i < visited.length; i++) {
			if (visited[i] == true) {
				c++;
			}
		}
		return c;
	}
	double distance(int x1, int y1, int x2, int y2) {
		return Math.sqrt(Math.pow(x2 - x1,2) + Math.pow(y2 - y1,2));
	}
	boolean isFeasible(int i, int j, int[][] bombs) {
		return (distance(bombs[i][0],bombs[i][1],bombs[j][0],bombs[j][1])) <= bombs[i][2];
	}
	int maximumDetonation(int[][] bombs) {
		boolean[] visited = new boolean[bombs.length];
		int max = Integer.MIN_VALUE;
		for (int i = 0; i < bombs.length; i++) {
			Arrays.fill(visited,false);
			bfs(i,visited,bombs);
			max = Math.max(max,count(visited));
		}
		return max;
	}
}