class Solution {
	List<Integer> adjlist;
	int ans;
	boolean visited;
	int[] countSubTrees(int n, int[][] edges, String labels) {
		adjlist = new ArrayList[n];
		ans = new int[n];
		for (int i = 0; i < n; i++) {
			adjlist[i] = new ArrayList<>();
		}
		for (int i = 0; i < edges.length; i++) {
			adjlist[edges[i][0]].add(edges[i][1]);
			adjlist[edges[i][1]].add(edges[i][0]);
		}
		visited = new boolean[n];
		helper(0,labels);
		return ans;
	}
	int[] helper(int currnode, String labels) {
		visited[currnode] = true;
		int count = new int[26];
		for (int i = 0; i < adjlist[currnode].size(); i++) {
			if (!visited[adjlist[currnode].get(i)]) {
				int countsfromchild = helper(adjlist[currnode].get(i),labels);
				for (int j = 0; j < 26; j++) {
					count[j] += countsfromchild[j];
				}
			}
		}
		char c = labels.charAt(currnode);
	}
}