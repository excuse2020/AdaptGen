class Solution {
	List<Boolean> checkIfPrerequisite(int numCourses, int[][] prerequisites, int[][] queries) {
		ArrayList<ArrayList<Integer>> adj = new ArrayList<>();
		ArrayList<HashSet<Integer>> ans = new ArrayList<>();
		for (int i = 0; i < numCourses; i++) {
			adj.add(new ArrayList<>());
			ans.add(new HashSet<>());
		}
		for (int[] arr: prerequisites) {	
			adj.get(arr[0]).add(arr[1]);
		}
		for (int i = 0; i < numCourses; i++) {
			boolean[] visited = new boolean[numCourses];
			dfs(i,adj,visited);
			for (int j = 0; j < visited.length; j++) {
				if (visited[j] == true && j != i) {
					ans.get(i).add(j);
				}
			}
		}
		List<Boolean> res = new ArrayList<>();
		for (int[] arr: queries) {	
			if (ans.get(arr[0]).contains(arr[1])) {
				res.add(true);
			} 
			else {
				res.add(false);
			}
		}
		return res;
	}
	void dfs(int node, ArrayList<ArrayList<Integer>> adj, boolean[] visited) {
		visited[node] = true;
		for (int it: adj.get(node)) {	
			if (visited[it] == false) {
				dfs(it,adj,visited);
			}
		}
	}
}