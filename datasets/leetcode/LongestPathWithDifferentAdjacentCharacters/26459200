class Solution {
	int longestPath(int[] parent, String s) {
		int n = parent.length;
		List<Integer>[] g = new ArrayList[n];
		for (int i = 0; i < n; i++) {
			g[i] = new ArrayList<>();
		}
		for (int i = 1; i < n; i++) {
			g[parent[i]].add(i);
		}
		int[] max = new int[1];
		longestPathHelper(g,0,s,max);
		return max[0];
	}
	int longestPathHelper(List<Integer>[] g, int src, String s, int[] max) {
		int top1 = 0;
		int top2 = 0;
		for (int neigh: g[src]) {	
			int ret = longestPathHelper(g,neigh,s,max);
			if (s.charAt(src) == s.charAt(neigh)) {
				continue;
			}
			if (ret >= top1) {
				top2 = top1;
				top1 = ret;
			} 
			else if (top2 < ret) {
				top2 = ret;
			}
		}
		max[0] = Math.max(max[0],top1 + top2);
		return top1 + 1;
	}
}