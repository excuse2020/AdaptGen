class Solution {
	int[] getCoordinate(int num, int n) {
		int[] coordinate = new int[2];
		int row_from_top = (num - 1) / n;
		int row_from_bottom = (n - 1) - row_from_top;
		int col = (num - 1) % n;
		if ((n % 2 == 1 && row_from_bottom % 2 == 1) || (n % 2 == 0 && row_from_bottom % 2 == 0)) {
			col = (n - 1) - col;
		}
		coordinate[0] = row_from_bottom;
		coordinate[1] = col;
		return coordinate;
	}
	int snakesAndLadders(int[][] board) {
		int n = board.length;
		int steps = 0;
		Queue<Integer> queue = new LinkedList<>();
		boolean[][] visited = new boolean[n][n];
		visited[n - 1][0] = true;
		queue.add(1);
		while (!queue.isEmpty()) {
			int size_queue = queue.size();
			for (int i = 1; i <= size_queue; i++) {
				int curr = queue.remove();
				if (curr == n * n) {
					return steps;
				}
				for (int j = 1; j <= 6; j++) {
					int next = curr + j;
					if (next > n * n) {
						break;
					}
					int[] coordinate = getCoordinate(next,n);
					int row = coordinate[0];
					int col = coordinate[1];
					if (visited[row][col] == true) {
						continue;
					} 
					else {
						visited[row][col] = true;
					}
					if (board[row][col] != -1) {
						queue.add(board[row][col]);
					} 
					else {
						queue.add(next);
					}
				}
			}
			steps++;
		}
		return -1;
	}
}