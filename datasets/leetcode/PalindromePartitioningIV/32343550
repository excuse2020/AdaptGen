class Solution {
	boolean checkPartitioning(String s) {
		boolean[][] cache = createCache(s);
		for (int i = 0; i < s.length(); i++) {
			if (!cache[0][i]) {
				continue;
			}
			for (int j = i + 1; j <= s.length() - 2; j++) {
				if (cache[i + 1][j] && cache[j + 1][s.length() - 1]) {
					return true;
				}
			}
		}
		return false;
	}
	boolean[][] createCache(String s) {
		boolean[][] cache = new boolean[s.length()][s.length()];
		for (int i = 0; i < s.length(); i++) {
			initializeCache(s,i,i,cache);
			initializeCache(s,i,i + 1,cache);
		}
		return cache;
	}
	void initializeCache(String s, int l, int r, boolean[][] cache) {
		while (l >= 0 && r <= s.length() - 1) {
			if (s.charAt(l) != s.charAt(r)) {
				return;
			}
			cache[l--][r++] = true;
		}
	}
}