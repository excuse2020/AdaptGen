class Solution {
	int f(int i, int j, int[][] grid, int n, int m, int[][] dp) {
		if (i == n - 1 && j == m - 1) {
			return grid[i][j];
		}
		if (i == n || j == m) {
			return (int) 1e9;
		}
		if (dp[i][j] != -1) {
			return dp[i][j];
		}
		int right = grid[i][j] + f(i,j + 1,grid,n,m,dp);
		int down = grid[i][j] + f(i + 1,j,grid,n,m,dp);
		return dp[i][j] = Math.min(right,down);
	}
	int minPathSum(int[][] grid) {
		int n = grid.length, m = grid[0].length;
		int[][] dp = new int[n][m];
		for (int[] d: dp) {	
			Arrays.fill(d,-1);
		}
		return f(0,0,grid,n,m,dp);
	}
}