class Solution {
	int findmax(int[] p) {
		int maxi = Integer.MIN_VALUE;
		int n = p.length;
		for (int i = 0; i < n; i++) {
			maxi = Math.max(p[i],maxi);
		}
		return maxi;
	}
	int minEatingSpeed(int[] piles, int h) {
		int n = piles.length;
		int low = 1;
		int high = findmax(piles);
		while (low <= high) {
			int mid = (low + high) / 2;
			int total = th(piles,mid);
			if (total <= h) {
				high = mid - 1;
			} 
			else {
				low = mid + 1;
			}
		}
		return low;
	}
	int th(int[] arr, int k) {
		int sum = 0;
		for (int i = 0; i < arr.length; i++) {
			sum += Math.ceil((double) arr[i] / (double) k);
		}
		return sum;
	}
}