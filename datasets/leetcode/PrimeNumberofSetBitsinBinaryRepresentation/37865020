class Solution {
	int countPrimeSetBits(int left, int right) {
		boolean[] isPrime = getPrimeList(right);
		int ans = 0;
		for (int i = left; i <= right; i++) {
			if (isPrime[getSetBits(i)]) {
				ans += 1;
			}
		}
		return ans;
	}
	boolean[] getPrimeList(int n) {
		boolean[] isPrime = new boolean[n + 1];
		Arrays.fill(isPrime,true);
		isPrime[0] = false;
		isPrime[1] = false;
		for (int i = 2; i * i <= n; i++) {
			for (int j = 2 * i; j <= n; j += i) {
				isPrime[j] = false;
			}
		}
		return isPrime;
	}
	int getSetBits(int num) {
		int count = 0;
		while (num != 0) {
			num &= num - 1;
			count += 1;
		}
		return count;
	}
}