class Solution {
	int path = 1;
	int dfs(int currentNode, int parentNode, ArrayList<Integer>[] graph, String s) {
		int rank1 = 0, rank2 = 0;
		for (int childNode: graph[currentNode]) {	
			int longestChain = dfs(childNode,currentNode,graph,s);
			if (s.charAt(currentNode) == s.charAt(childNode)) {
				continue;
			}
			if (longestChain > rank1) {
				rank2 = rank1;
				rank1 = longestChain;
			} 
			else if (longestChain > rank2) {
				rank2 = longestChain;
			}
		}
		path = Math.max(path,rank1 + rank2);
		return rank1 + 1;
	}
	int longestPath(int[] parent, String s) {
		ArrayList<Integer>[] graph = new ArrayList[parent.length];
		for (int i = 0; i < parent.length; i++) {
			graph[i] = new ArrayList();
		}
		for (int i = 1; i < parent.length; i++) {
			graph[parent[i]].add(i);
		}
		dfs(0,-1,graph,s);
		return path;
	}
}