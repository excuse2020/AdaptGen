class Solution {
	int[] countDigit(long n) {
		int[] nCount = new int[10];
		while (n > 0) {
			int i = (int) n % 10;
			nCount[i]++;
			n /= 10;
		}
		return nCount;
	}
	long power(long base, long power) {
		if (power == 0) {
			return 1l;
		}
		if (power == 1) {
			return base;
		}
		long ans = 1l;
		while (power >= 1) {
			if ((power & 1) == 1) {
				ans *= base;
			}
			base *= base;
			power /= 2;
		}
		return ans;
	}
	boolean reorderedPowerOf2(int n) {
		long num = n;
		int[] nDigitCount = countDigit(num);
		for (int i = 0; i < 31; i++) {
			long ans = power(2,i);
			int[] ansDigitCount = countDigit(ans);
			if (Arrays.equals(nDigitCount,ansDigitCount)) {
				return true;
			}
		}
		return false;
	}
}