class Solution {
	int ans(List<Integer> l) {
		int s = 0;
		Map<Integer, Integer> m = new HashMap<>();
		List<Integer> li = new ArrayList<>(l);
		Collections.sort(li);
		for (int i = 0; i < l.size(); i++) {
			m.put(l.get(i),i);
		}
		for (int i = 0; i < l.size(); i++) {
			if (!l.get(i).equals(li.get(i))) {
				int correct = m.get(li.get(i));
				Collections.swap(l,i,correct);
				m.put(l.get(correct),correct);
				s++;
			}
		}
		return s;
	}
	int minimumOperations(TreeNode root) {
		Queue<TreeNode> q = new LinkedList<>();
		q.add(root);
		int c = 0;
		while (!q.isEmpty()) {
			int s = q.size();
			List<Integer> l = new ArrayList<>();
			for (int i = 0; i < s; i++) {
				TreeNode a = q.poll();
				l.add(a.val);
				if (a.left != null) {
					q.add(a.left);
				}
				if (a.right != null) {
					q.add(a.right);
				}
			}
			c += ans(l);
		}
		return c;
	}
}