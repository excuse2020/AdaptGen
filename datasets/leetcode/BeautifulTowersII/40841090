class Solution {
	long maximumSumOfHeights(List<Integer> maxHeights) {
		int n = maxHeights.size();
		long[] left = new long[n];
		long[] right = new long[n];
		Stack<Integer> st = new Stack<Integer>();
		for (int i = 0; i < n; i++) {
			while (!st.isEmpty() && maxHeights.get(st.peek()) > maxHeights.get(i)) {
				st.pop();
			}
			if (st.isEmpty()) {
				left[i] = ((long) maxHeights.get(i) * (i + 1));
			} 
			else {
				left[i] += left[st.peek()] + ((long) maxHeights.get(i) * (i - st.peek()));
			}
			st.push(i);
		}
		st.clear();
		for (int i = n - 1; i >= 0; i--) {
			while (!st.isEmpty() && maxHeights.get(st.peek()) > maxHeights.get(i)) {
				st.pop();
			}
			if (st.isEmpty()) {
				right[i] = ((long) maxHeights.get(i) * (n - i));
			} 
			else {
				right[i] += right[st.peek()] + ((long) maxHeights.get(i) * (st.peek() - i));
			}
			st.push(i);
		}
		long max = 0;
		for (int i = 0; i < n; i++) {
			max = Math.max((left[i] + right[i] - maxHeights.get(i)),max);
		}
		return max;
	}
}