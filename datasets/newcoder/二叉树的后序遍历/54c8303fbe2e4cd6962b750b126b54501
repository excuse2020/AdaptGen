class Solution {
	int[] postorderTraversal(TreeNode root) {
		List<Integer> temp = search(root);
		int[] result = new int[temp.size()];
		for (int i = 0; i < temp.size(); i++) {
			result[i] = temp.get(i);
		}
		return result;
	}
	List<Integer> search(TreeNode root) {
		List<Integer> res = new ArrayList<Integer>();
		if (root == null) {
			return res;
		}
		Deque<TreeNode> stack = new LinkedList<TreeNode>();
		TreeNode prev = null;
		while (root != null || !stack.isEmpty()) {
			while (root != null) {
				stack.push(root);
				root = root.left;
			}
			root = stack.pop();
			if (root.right == null || root.right == prev) {
				res.add(root.val);
				prev = root;
				root = null;
			} 
			else {
				stack.push(root);
				root = root.right;
			}
		}
		return res;
	}
}