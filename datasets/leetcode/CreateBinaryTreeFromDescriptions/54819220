class Solution {
	TreeNode createBinaryTree(int[][] descriptions) {
		Map<Integer, TreeNode> node_map = new HashMap<>();
		Map<Integer, Boolean> has_parent = new HashMap<>();
		for (int[] description: descriptions) {	
			int parentVal = description[0];
			int childVal = description[1];
			boolean isLeft = description[2] == 1;
			TreeNode parentNode = node_map.getOrDefault(parentVal,new TreeNode(parentVal));
			TreeNode childNode = node_map.getOrDefault(childVal,new TreeNode(childVal));
			if (isLeft == true) {
				parentNode.left = childNode;
			} 
			else {
				parentNode.right = childNode;
			}
			has_parent.put(childVal,true);
			node_map.put(parentVal,parentNode);
			node_map.put(childVal,childNode);
		}
		TreeNode root = null;
		for (Map.Entry<Integer, TreeNode> entry: node_map.entrySet()) {	
			if (!has_parent.getOrDefault(entry.getKey(),false)) {
				root = entry.getValue();
				break;
			}
		}
		return root;
	}
}