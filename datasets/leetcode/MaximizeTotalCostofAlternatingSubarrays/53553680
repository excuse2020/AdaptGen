class Solution {
	long helper(int[] arr, int n, int s, int index, long[][] dp) {
		if (index == n - 1) {
			if (s == 1) {
				return arr[n - 1];
			} 
			else {
				return -arr[n - 1];
			}
		}
		if (dp[index][s] != Long.MIN_VALUE) {
			return dp[index][s];
		}
		if (s == 1) {
			long k1 = helper(arr,n,1,index + 1,dp);
			long dk1 = helper(arr,n,0,index + 1,dp);
			return dp[index][s] = arr[index] + Math.max(k1,dk1);
		} 
		else {
			return dp[index][s] = -arr[index] + helper(arr,n,1,index + 1,dp);
		}
	}
	long maximumTotalCost(int[] nums) {
		int n = nums.length;
		long[][] dp = new long[n][2];
		for (long[] x: dp) {	
			Arrays.fill(x,Long.MIN_VALUE);
		}
		return helper(nums,n,1,0,dp);
	}
}