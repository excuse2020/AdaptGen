class Solution {
	int minPathSum(int[][] grid) {
		int n = grid.length;
		int m = grid[0].length;
		int[][] dp = new int[n][m];
		for (int[] row: dp) {	
			Arrays.fill(row,-1);
		}
		return minSumPathUtil(n - 1,m - 1,grid,dp);
	}
	int minSumPathUtil(int i, int j, int[][] matrix, int[][] dp) {
		if (i == 0 && j == 0) {
			return matrix[0][0];
		}
		if (i < 0 || j < 0) {
			return Integer.MAX_VALUE;
		}
		if (dp[i][j] != -1) {
			return dp[i][j];
		}
		int up = i > 0 ? matrix[i][j] + minSumPathUtil(i - 1,j,matrix,dp) : Integer.MAX_VALUE;
		int left = j > 0 ? matrix[i][j] + minSumPathUtil(i,j - 1,matrix,dp) : Integer.MAX_VALUE;
		return dp[i][j] = Math.min(up,left);
	}
}