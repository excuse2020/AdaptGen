class Solution {
	int dfs(int[][] matrix, int[][] dp, int i, int j, int row, int col) {
		if (dp[i][j] != 0) {
			return dp[i][j];
		}
		dp[i][j]++;
		if (j + 1 < col && matrix[i][j + 1] > matrix[i][j]) {
			dp[i][j] = Math.max(dp[i][j],dfs(matrix,dp,i,j + 1,row,col) + 1);
		}
		if (j - 1 >= 0 && matrix[i][j - 1] > matrix[i][j]) {
			dp[i][j] = Math.max(dp[i][j],dfs(matrix,dp,i,j - 1,row,col) + 1);
		}
		if (i - 1 >= 0 && matrix[i - 1][j] > matrix[i][j]) {
			dp[i][j] = Math.max(dp[i][j],dfs(matrix,dp,i - 1,j,row,col) + 1);
		}
		if (i + 1 < row && matrix[i + 1][j] > matrix[i][j]) {
			dp[i][j] = Math.max(dp[i][j],dfs(matrix,dp,i + 1,j,row,col) + 1);
		}
		return dp[i][j];
	}
	int solve(int[][] matrix) {
		int row = matrix.length;
		if (row == 0) {
			return 0;
		}
		int col = matrix[0].length;
		int maxValue = 0;
		int[][] dp = new int[row][col];
		for (int i = 0; i < row; i++) {
			for (int j = 0; j < col; j++) {
				maxValue = Math.max(maxValue,dfs(matrix,dp,i,j,row,col));
			}
		}
		return maxValue;
	}
}