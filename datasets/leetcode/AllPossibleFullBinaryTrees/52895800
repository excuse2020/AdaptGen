class Solution {
	Map<Integer, List<TreeNode>> dp = new HashMap<>();
	List<TreeNode> allPossibleFBT(int n) {
		if (dp.containsKey(n)) {
			return dp.get(n);
		}
		List<TreeNode> res = new ArrayList<>();
		if (n == 1) {
			res.add(new TreeNode(0));
		} 
		else if (n % 2 == 1) {
			for (int i = 0; i < n; i++) {
				int r = n - 1;
				List<TreeNode> leftTrees = allPossibleFBT(i);
				List<TreeNode> rightTrees = allPossibleFBT(r);
				for (TreeNode left: leftTrees) {	
					for (TreeNode right: rightTrees) {	
						TreeNode root = new TreeNode(0, left, right);
						res.add(root);
					}
				}
			}
		}
		dp.put(n,res);
		return res;
	}
}