class Solution {
	int find(int index, int[] dp, int[][] arr) {
		if (index == arr.length) {
			return 0;
		}
		if (dp[index] != -1) {
			return dp[index];
		}
		int notInclude = find(index + 1,dp,arr);
		int include = arr[index][2];
		int endTime = arr[index][1];
		int nextIndex = getNextIndex(arr,index + 1,endTime);
		if (nextIndex != -1) {
			include += find(nextIndex,dp,arr);
		}
		return dp[index] = Math.max(notInclude,include);
	}
	int getNextIndex(int[][] arr, int start, int endTime) {
		int ans = -1;
		int end = arr.length - 1;
		while (start <= end) {
			int mid = start + (end - start) / 2;
			if (arr[mid][0] >= endTime) {
				ans = mid;
				end = mid - 1;
			} 
			else {
				start = mid + 1;
			}
		}
		return ans;
	}
	int jobScheduling(int[] startTime, int[] endTime, int[] profit) {
		int[][] arr = new int[startTime.length][3];
		int[] dp = new int[startTime.length];
		Arrays.fill(dp,-1);
		for (int i = 0; i < startTime.length; i++) {
			arr[i][0] = startTime[i];
			arr[i][1] = endTime[i];
			arr[i][2] = profit[i];
		}
		Arrays.sort(arr,(a, b) -> {a[0] == b[0] ? a[1] - b[1] : a[0] - b[0]});
		return find(0,dp,arr);
	}
}