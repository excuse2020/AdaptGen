class Solution {
	void exchange(int[] array, int i, int j) {
		int temp = array[i];
		array[i] = array[j];
		array[j] = temp;
	}
	void num2ArrayList(List<ArrayList<Integer>> result, int[] num) {
		ArrayList<Integer> temp = new ArrayList<>(num.length);
		for (int element: num) {	
			temp.add(element);
		}
		result.add(temp);
	}
	ArrayList<ArrayList<Integer>> permute(int[] num) {
		ArrayList<ArrayList<Integer>> result = new ArrayList<>();
		Arrays.sort(num);
		recursion(result,num,0);
		return result;
	}
	void recursion(List<ArrayList<Integer>> result, int[] num, int index) {
		if (index < num.length) {
			for (int i = index; i < num.length; i++) {
				exchange(num,index,i);
				recursion(result,num,index + 1);
				exchange(num,index,i);
			}
		} 
		else {
			num2ArrayList(result,num);
		}
	}
}