class Solution {
	int minOpera1(int n) {
		int oneCount = 0, res = 0;
		while (n != 0) {
			int digit = n & 1;
			if (digit == 0 && oneCount > 0) {
				++res;
				oneCount = oneCount == 1 ? 0 : 1;
			} 
			else if (digit == 1) {
				++oneCount;
			}
			n >>= 1;
		}
		if (oneCount == 1) {
			++res;
		} 
		else if (oneCount > 1) {
			res += 2;
		}
		return res;
	}
	int minOpera2(int n) {
		List<Integer> list = new ArrayList<>();
		while (n != 0) {
			list.add(n & 1);
			n >>= 1;
		}
		list.add(0);
		int res = 0, oneCount = 0;
		for (int i = 0; i < list.size(); ++i) {
			if (list.get(i) == 0) {
				if (oneCount > 0) {
					res++;
					oneCount = oneCount == 1 ? 0 : 1;
				}
			} 
			else {
				oneCount++;
			}
		}
		return res + (oneCount == 0 ? 0 : 1);
	}
	int minOperations(int n) {
		return minOpera1(n);
	}
}