class Solution {
	long max = 0;
	void helper(int[] nums, int index, long neg, long pos) {
		if (index >= nums.length) {
			max = Math.max(max,pos);
			return;
		}
		if (nums[index] > 0) {
			helper(nums,index + 1,neg * nums[index],pos * nums[index]);
		} 
		else if (nums[index] < 0) {
			helper(nums,index + 1,neg * nums[index],pos * nums[index]);
		}
		helper(nums,index + 1,neg,pos);
	}
	long maxStrength(int[] nums) {
		int neg = 0, pos = 0;
		if (nums.length == 1) {
			return nums[0];
		}
		for (int i: nums) {	
			if (i > 0) {
				pos += 1;
			}
			if (i < 0) {
				neg++;
			}
		}
		if (pos == 0 && neg <= 1) {
			return 0;
		}
		helper(nums,0,-1,1);
		return max;
	}
}