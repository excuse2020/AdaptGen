class Solution {
	List<List<String>> results;
	Map<String, List<String>> wordGraph;
	void backtrack(String word, String start, List<String> path) {
		if (word.equals(start)) {
			path.add(0,start);
			results.add(new ArrayList<String>(path));
			path.remove(0);
			return;
		}
		path.add(0,word);
		if (wordGraph.get(word) != null) {
			for (String prevWord: wordGraph.get(word)) {	
				backtrack(prevWord,start,path);
			}
		}
		path.remove(0);
	}
	List<List<String>> findLadders(String start, String end, List<String> wordList) {
		results = new ArrayList<List<String>>();
		if (wordList.isEmpty()) {
			return results;
		}
		int minSteps = Integer.MAX_VALUE;
		Queue<String> queue = new LinkedList<String>();
		queue.add(start);
		wordGraph = new HashMap<String, List<String>>();
		Map<String, Integer> steps = new HashMap<String, Integer>();
		for (String word: wordList) {	
			steps.put(word,Integer.MAX_VALUE);
		}
		steps.put(start,0);
		String currentWord = queue.poll();
		int currentSteps = steps.get(currentWord) + 1;
		if (currentSteps > minSteps) {
			break;
		}
		int i = 0;
		StringBuilder builder = new StringBuilder(currentWord);
		char ch;
	}
}