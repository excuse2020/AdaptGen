class Solution {
	List<Integer> largestDivisibleSubset(int[] nums) {
		int n = nums.length;
		int[] dp = new int[n];
		Arrays.fill(dp,1);
		int[] hash = new int[n];
		Arrays.sort(nums);
		for (int i = 0; i < n; i++) {
			hash[i] = i;
			for (int j = 0; j < i; j++) {
				if (nums[i] % nums[j] == 0 && 1 + dp[j] > dp[i]) {
					dp[i] = 1 + dp[j];
					hash[i] = j;
				}
			}
		}
		int ans = -1;
		int lastIndex = -1;
		for (int i = 0; i < n; i++) {
			if (dp[i] > ans) {
				ans = dp[i];
				lastIndex = i;
			}
		}
		List<Integer> res = new ArrayList<>();
		res.add(0,nums[lastIndex]);
		while (hash[lastIndex] != lastIndex) {
			lastIndex = hash[lastIndex];
			res.add(0,nums[lastIndex]);
		}
		return res;
	}
}