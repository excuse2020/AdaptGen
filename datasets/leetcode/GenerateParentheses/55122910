class Solution {
	void dfs(String stringSoFar, int leftRem, int rightRem, List<String> res) {
		if (leftRem > rightRem) {
			return;
		}
		if (leftRem < 0 || rightRem < 0) {
			return;
		}
		if (leftRem == 0 && rightRem == 0) {
			res.add(new String(stringSoFar));
		}
		if (leftRem > 0) {
			stringSoFar = stringSoFar + "(";
			dfs(stringSoFar,leftRem - 1,rightRem,res);
			stringSoFar = stringSoFar.substring(0,stringSoFar.length() - 1);
		}
		if (rightRem > 0) {
			stringSoFar = stringSoFar + ")";
			dfs(stringSoFar,leftRem,rightRem - 1,res);
			stringSoFar = stringSoFar.substring(0,stringSoFar.length() - 1);
		}
	}
	List<String> generateParenthesis(int n) {
		List<String> res = new ArrayList<>();
		dfs("(",n - 1,n,res);
		return res;
	}
}