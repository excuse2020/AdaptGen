class Solution {
	List<Integer> largestDivisibleSubset(int[] nums) {
		Arrays.sort(nums);
		HashMap<Integer, List<Integer>> hm = new HashMap<>();
		int[] dp = new int[nums.length];
		Arrays.fill(dp,1);
		int maxL = 1, ind = 0;
		List<Integer> l = new ArrayList<>();
		l.add(nums[0]);
		hm.put(0,l);
		for (int i = 1; i < nums.length; i++) {
			List<Integer> li = new ArrayList<>();
			li.add(nums[i]);
			hm.put(i,li);
			for (int j = 0; j < i; j++) {
				if (nums[i] % nums[j] == 0) {
					if (dp[j] + 1 > dp[i]) {
						dp[i] = dp[j] + 1;
						List<Integer> ll = new ArrayList<>(hm.get(j));
						ll.add(nums[i]);
						hm.put(i,ll);
					}
					if (dp[i] > maxL) {
						maxL = dp[i];
						ind = i;
					}
				}
			}
		}
		return hm.get(ind);
	}
}