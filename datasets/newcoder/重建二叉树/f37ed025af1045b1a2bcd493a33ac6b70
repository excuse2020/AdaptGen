class Solution {
	Map<Integer, Integer> midMap = new HashMap<>();
	Map<Integer, Integer> preMap = new HashMap<>();
	TreeNode Find(int[] pre, int[] vin, int left, int right) {
		if (left > right) {
			return null;
		}
		if (left == right) {
			return new TreeNode(vin[left]);
		}
		TreeNode temp = null;
		int min = right;
		for (int i = left; i <= right; i++) {
			min = preMap.get(vin[i]) < preMap.get(vin[min]) ? i : min;
		}
		temp = new TreeNode(vin[min]);
		temp.left = Find(pre,vin,left,min - 1);
		temp.right = Find(pre,vin,min + 1,right);
		return temp;
	}
	TreeNode reConstructBinaryTree(int[] pre, int[] vin) {
		int len = pre.length;
		if (len < 1) {
			return null;
		}
		for (int i = 0; i < len; i++) {
			preMap.put(pre[i],i);
			midMap.put(vin[i],i);
		}
		int mid = midMap.get(pre[0]);
		TreeNode root = new TreeNode(pre[0]);
		root.left = Find(pre,vin,0,mid - 1);
		root.right = Find(pre,vin,mid + 1,len - 1);
		return root;
	}
}