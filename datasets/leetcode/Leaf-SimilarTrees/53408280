class Solution {
	boolean check(TreeNode root, Queue<TreeNode> queue) {
		if (root.left == null && root.right == null) {
			if (queue.isEmpty()) {
				return false;
			}
			return root.val == queue.poll().val ? true : false;
		}
		boolean lStatus = true;
		boolean rStatus = true;
		if (root.left != null) {
			lStatus = check(root.left,queue);
		}
		if (lStatus == false) {
			return false;
		}
		if (root.right != null) {
			rStatus = check(root.right,queue);
		}
		return lStatus && rStatus;
	}
	boolean leafSimilar(TreeNode root1, TreeNode root2) {
		Queue<TreeNode> queue = new LinkedList<>();
		populate(root1,queue);
		boolean res = check(root2,queue);
		return res && queue.isEmpty();
	}
	void populate(TreeNode root, Queue<TreeNode> queue) {
		if (root.left == null && root.right == null) {
			queue.add(root);
			return;
		}
		if (root.left != null) {
			populate(root.left,queue);
		}
		if (root.right != null) {
			populate(root.right,queue);
		}
	}
}