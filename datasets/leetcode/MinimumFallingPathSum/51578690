class Solution {
	int memorisation(int[][] matrix, int[][] dp, int r, int c, int n) {
		if (c < 0 || c >= n) {
			return Integer.MAX_VALUE;
		}
		if (r == 0) {
			return matrix[r][c];
		}
		if (dp[r][c] != -101) {
			return dp[r][c];
		}
		int up = memorisation(matrix,dp,r - 1,c,n);
		int lDiog = memorisation(matrix,dp,r - 1,c - 1,n);
		int rDiog = memorisation(matrix,dp,r - 1,c + 1,n);
		return dp[r][c] = Math.min(rDiog,Math.min(up,lDiog)) + matrix[r][c];
	}
	int minFallingPathSum(int[][] matrix) {
		int r = matrix.length;
		int c = matrix[0].length;
		int[][] dp = new int[r][c];
		for (int[] ar: dp) {	
			Arrays.fill(ar,-101);
		}
		int min = Integer.MAX_VALUE;
		for (int j = 0; j < c; j++) {
			min = Math.min(min,memorisation(matrix,dp,r - 1,j,c));
		}
		return min;
	}
	int tabulation(int[][] grid, int[][] dp, int m, int n) {
		for (int j = 0; j < n; j++) {
			dp[0][j] = grid[0][j];
		}
		for (int i = 1; i < m; i++) {
			for (int j = 0; j < n; j++) {
				int min = Integer.MAX_VALUE;
				if (j > 0) {
					min = Math.min(dp[i - 1][j - 1],dp[i - 1][j]);
				}
				if (j < n - 1) {
					min = Math.min(min,Math.min(dp[i - 1][j + 1],dp[i - 1][j]));
				}
				dp[i][j] = min + grid[i][j];
			}
		}
		int mini = Integer.MAX_VALUE;
		for (int j = 0; j < n; j++) {
			mini = Math.min(mini,dp[m - 1][j]);
		}
		return mini;
	}
}