class Solution {
	int maxPerformance(int n, int[] speed, int[] efficiency, int k) {
		long mod = (long) 1e9 + 7;
		int[][] engineers = new int[n][2];
		for (int i = 0; i < n; i++) {
			engineers[i][0] = efficiency[i];
			engineers[i][1] = speed[i];
		}
		Arrays.sort(engineers,(a, b) -> {b[0] - a[0]});
		PriorityQueue<Integer> pq = new PriorityQueue<>();
		long sum = 0;
		long max = 0;
		for (int[] engineer: engineers) {	
			pq.add(engineer[1]);
			sum = sum + engineer[1];
			if (pq.size() > k) {
				sum = sum - pq.remove();
			}
			max = Math.max(max,sum * engineer[0]);
		}
		return (int) Math.floorMod(max,mod);
	}
}