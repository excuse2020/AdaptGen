class Solution {
	int mod = (int) Math.pow(10,9) + 7;
	int countPaths(int[][] grid) {
		int ans = 0;
		int dp = new int[grid.length][grid[0].length];
		for (int row: dp) {	
			Arrays.fill(row,-1);
		}
		for (int i = 0; i < grid.length; i++) {
			for (int j = 0; j < grid[0].length; j++) {
				ans = (ans + dfs(i,j,grid,-1,dp)) % mod;
			}
		}
		return ans;
	}
	int dfs(int i, int j, int[][] grid, int prev, int dp) {
		if (i >= grid.length || i < 0 || j >= grid[0].length || j < 0) {
			return 0;
		}
		if (prev >= grid[i][j]) {
			return 0;
		}
		if (dp[i][j] == -1) {
			dp[i][j] = dfs(i + 1,j,grid,grid[i][j],dp) % mod;
			dp[i][j] = (dp[i][j] + dfs(i,j + 1,grid,grid[i][j],dp)) % mod;
			dp[i][j] = (dp[i][j] + dfs(i - 1,j,grid,grid[i][j],dp)) % mod;
			dp[i][j] = (dp[i][j] + dfs(i,j - 1,grid,grid[i][j],dp)) % mod;
		}
		return dp[i][j];
	}
}