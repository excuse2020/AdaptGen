class Solution {
	int f(int nums) {
		int n = nums.length;
		int dp = new int[n];
		if (n == 1) {
			return nums[0];
		}
		dp[0] = nums[0];
		for (int i = 1; i < n; i++) {
			int fs = nums[i];
			if (i > 1) {
				fs += dp[i - 2];
			}
			int ss = dp[i - 1];
			dp[i] = Math.max(fs,ss);
		}
		return dp[n - 1];
	}
	int rob(int[] valueInHouse) {
		int n = valueInHouse.length;
		int temp1 = new int[n - 1];
		int temp2 = new int[n - 1];
		if (n == 1) {
			return valueInHouse[0];
		}
		for (int i = 1; i < n; i++) {
			temp1[i - 1] = valueInHouse[i];
		}
		for (int i = 0; i < n - 1; i++) {
			temp2[i] = valueInHouse[i];
		}
		int t1 = f(temp1);
		int t2 = f(temp2);
		return Math.max(t1,t2);
	}
}