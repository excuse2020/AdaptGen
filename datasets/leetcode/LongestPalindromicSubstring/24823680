class Solution {
	String getEvenStr(String s) {
		int n = s.length();
		String res = "";
		for (int i = 1; i < n; i++) {
			int left = i - 1;
			int right = i;
			StringBuilder sb = new StringBuilder();
			while (left >= 0 && right < n) {
				if (s.charAt(left) == s.charAt(right)) {
					sb.insert(0,s.charAt(left));
					sb.append(s.charAt(right));
				} 
				else {
					break;
				}
				left--;
				right++;
			}
			if (sb.length() > res.length()) {
				res = sb.toString();
			}
		}
		return res;
	}
	String getOddStr(String s) {
		int n = s.length();
		String res = "";
		for (int i = 0; i < n; i++) {
			int left = i - 1;
			int right = i + 1;
			StringBuilder sb = new StringBuilder();
			sb.append(s.charAt(i));
			while (left >= 0 && right < n) {
				if (s.charAt(left) == s.charAt(right)) {
					sb.insert(0,s.charAt(left));
					sb.append(s.charAt(right));
				} 
				else {
					break;
				}
				left--;
				right++;
			}
			if (sb.length() > res.length()) {
				res = sb.toString();
			}
		}
		return res;
	}
	String longestPalindrome(String s) {
		String odd = getOddStr(s);
		String even = getEvenStr(s);
		return odd.length() > even.length() ? odd : even;
	}
}