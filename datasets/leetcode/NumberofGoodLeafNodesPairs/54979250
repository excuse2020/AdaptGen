class Solution {
	void constructMap(TreeNode root, TreeMap<Integer, Integer> map, int len) {
		if (root == null) {
			return;
		}
		if (root.left == null && root.right == null) {
			map.put(len,map.getOrDefault(len,0) + 1);
		}
		constructMap(root.left,map,len + 1);
		constructMap(root.right,map,len + 1);
	}
	int countAsRoot(TreeNode root, int distance) {
		TreeMap<Integer, Integer> map1 = new TreeMap<>();
		constructMap(root.left,map1,1);
		TreeMap<Integer, Integer> map2 = new TreeMap<>();
		constructMap(root.right,map2,1);
		int count = 0;
		for (Integer k: map1.keySet()) {	
			int lenRight = distance - k;
			for (Map.Entry<Integer, Integer> entry: map2.headMap(lenRight,true).entrySet()) {	
				count += map1.get(k) * (entry.getValue());
			}
		}
		return count;
	}
	int countPairs(TreeNode root, int distance) {
		if (root == null) {
			return 0;
		}
		int count = 0;
		if (root.left != null && root.right != null) {
			count += countAsRoot(root,distance);
		}
		count += countPairs(root.left,distance);
		count += countPairs(root.right,distance);
		return count;
	}
}