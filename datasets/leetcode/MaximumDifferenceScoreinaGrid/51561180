class Solution {
	Integer dp;
	int helper(int i, int j, List<List<Integer>> list, int first) {
		int m = list.size();
		int n = list.get(0).size();
		if (i >= m || j >= n) {
			return 0;
		}
		if (dp[first][i][j] != null) {
			return dp[first][i][j];
		}
		int ans = 0;
		if (first == 0) {
			ans = Integer.MIN_VALUE;
		}
		for (int ii = i + 1; ii < m; ii++) {
			ans = Math.max(ans,helper(ii,j,list,1) + list.get(ii).get(j) - list.get(i).get(j));
		}
		for (int ij = j + 1; ij < n; ij++) {
			ans = Math.max(ans,helper(i,ij,list,1) + list.get(i).get(ij) - list.get(i).get(j));
		}
		return dp[first][i][j] = ans;
	}
	int maxScore(List<List<Integer>> grid) {
		int ans = Integer.MIN_VALUE;
		dp = new Integer[2][grid.size()][grid.get(0).size()];
		for (int i = 0; i < grid.size(); i++) {
			for (int j = 0; j < grid.get(0).size(); j++) {
				ans = Math.max(ans,helper(i,j,grid,0));
			}
		}
		return ans;
	}
}