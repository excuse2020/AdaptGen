class Solution {
	int bSearchLower(int[] arr, int tgt) {
		int l = 0, r = arr.length - 1;
		int ans = -1;
		while (l <= r) {
			int mid = l + (r - l) / 2;
			if (arr[mid] <= tgt) {
				ans = mid;
				l = mid + 1;
			} 
			else {
				r = mid - 1;
			}
		}
		return ans;
	}
	int bSearchUpper(int[] arr, int tgt) {
		int l = 0, r = arr.length - 1;
		int ans = arr.length;
		while (l <= r) {
			int mid = l + (r - l) / 2;
			if (arr[mid] < tgt) {
				l = mid + 1;
			} 
			else {
				ans = mid;
				r = mid - 1;
			}
		}
		return ans;
	}
	int[] fullBloomFlowers(int[][] flowers, int[] people) {
		int n = flowers.length;
		int[] start = new int[n];
		int[] end = new int[n];
		for (int i = 0; i < n; i++) {
			start[i] = flowers[i][0];
			end[i] = flowers[i][1];
		}
		Arrays.sort(start);
		Arrays.sort(end);
		int[] ans = new int[people.length];
		for (int i = 0; i < people.length; i++) {
			int x = bSearchLower(start,people[i]);
			int y = bSearchUpper(end,people[i]);
			ans[i] = x - y + 1;
		}
		return ans;
	}
}