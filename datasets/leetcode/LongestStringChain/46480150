class Solution {
	int dfs(String s, TreeMap<Integer, HashSet<String>> hm, HashMap<String, Integer> visitHm) {
		Integer visitVal = visitHm.get(s);
		if (visitVal != null) {
			return visitVal;
		}
		int best = 0;
		HashSet<String> nextLenHs = hm.get(s.length() + 1);
		if (nextLenHs == null) {
			return 0;
		}
		for (String next: nextLenHs) {	
			if (isPredec(s,next)) {
				best = Math.max(best,dfs(next,hm,visitHm) + 1);
			}
		}
		visitHm.put(s,best);
		return best;
	}
	boolean isPredec(String s1, String s2) {
		if (s2.length() - s1.length() != 1) {
			return false;
		}
		int diffCount = 0;
		int j = 0;
		for (int i = 0; i < s2.length(); i++) {
			if (s1.charAt(j) != s2.charAt(i)) {
				diffCount++;
			} 
			else {
				j++;
			}
			if (diffCount > 1) {
				return false;
			}
			if (diffCount == 0 && j == s1.length()) {
				return true;
			}
		}
		return true;
	}
	int longestStrChain(String[] words) {
		TreeMap<Integer, HashSet<String>> hm = new TreeMap<>();
		HashMap<String, Integer> visitHm = new HashMap<>();
		int res = -1;
		for (String s: words) {	
			hm.computeIfAbsent(s.length(),(value) -> {new HashSet<String>()}).add(s);
		}
		for (Map.Entry<Integer, HashSet<String>> es: hm.entrySet()) {	
			HashSet<String> hs = es.getValue();
			for (String str: hs) {	
				res = Math.max(res,dfs(str,hm,visitHm));
			}
		}
		return res + 1;
	}
}