class Solution {
	int minPathSum(int[][] matrix) {
		int rowLen = matrix.length;
		int colLen = matrix[0].length;
		int[][] dp = new int[rowLen][colLen];
		dp[0][0] = matrix[0][0];
		for (int i = 1; i < rowLen; ++i) {
			dp[i][0] = matrix[i][0] + dp[i - 1][0];
		}
		for (int i = 1; i < colLen; ++i) {
			dp[0][i] = matrix[0][i] + dp[0][i - 1];
		}
		for (int i = 1; i < rowLen; ++i) {
			for (int j = 1; j < colLen; ++j) {
				int minVal = dp[i - 1][j] < dp[i][j - 1] ? dp[i - 1][j] : dp[i][j - 1];
				dp[i][j] = matrix[i][j] + minVal;
			}
		}
		return dp[rowLen - 1][colLen - 1];
	}
	int minPathSum(int[][] matrix) {
		int colLen = matrix[0].length;
		int[] dp = new int[colLen];
		dp[0] = matrix[0][0];
		for (int i = 1; i < colLen; ++i) {
			dp[i] = matrix[0][i] + dp[i - 1];
		}
		for (int i = 1; i < matrix.length; ++i) {
			dp[0] += matrix[i][0];
			for (int j = 1; j < colLen; ++j) {
				int minVal = dp[j] < dp[j - 1] ? dp[j] : dp[j - 1];
				dp[j] = matrix[i][j] + minVal;
			}
		}
		return dp[colLen - 1];
	}
}