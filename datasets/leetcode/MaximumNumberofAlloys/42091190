class Solution {
	int maxNumberOfAlloys(int n, int k, int budget, List<List<Integer>> composition, List<Integer> stock, List<Integer> cost) {
		int maxCount = 0;
		for (int i = 0; i < k; i++) {
			int count = 0;
			int thisBudget = budget;
			List<Integer> thisStock = new ArrayList<Integer>(stock);
			boolean stop = false;
			while (!stop) {
				int buy = 0;
				int buyFull = 0;
				int thisCount = Integer.MAX_VALUE;
				for (int j = 0; j < n; j++) {
					if (thisStock.get(j) < composition.get(i).get(j)) {
						buy += (cost.get(j) * (composition.get(i).get(j) - thisStock.get(j)));
						buyFull += (cost.get(j) * composition.get(i).get(j));
					} 
					else {
						thisCount = Math.min(thisCount,thisStock.get(j) / composition.get(i).get(j));
					}
				}
				if (buyFull > 0) {
					if (thisBudget - buy < 0) {
						thisCount = 0;
					} 
					else {
						thisCount = Math.min(thisCount,1 + (thisBudget - buy) / buyFull);
					}
				}
				if (thisCount == 0) {
					stop = true;
				} 
				else {
					count += thisCount;
					for (int j = 0; j < n; j++) {
						int diff = thisStock.get(j) - composition.get(i).get(j) * thisCount;
						thisBudget += (cost.get(j) * Math.min(0,diff));
						thisStock.set(j,Math.max(0,diff));
					}
				}
			}
			maxCount = Math.max(maxCount,count);
		}
		return maxCount;
	}
}