class Solution {
	boolean check(int r, int c, int i, int j, int arr) {
		if (r >= arr.length || c >= arr[0].length) {
			return false;
		}
		for (int k = j; k <= Math.min(c,arr[0].length - 1); k++) {
			if (arr[i][k] == 0) {
				return false;
			}
		}
		for (int k = i; k <= Math.min(r,arr.length - 1); k++) {
			if (arr[k][j] == 0) {
				return false;
			}
		}
		for (int k = j; k <= Math.min(c,arr[0].length - 1); k++) {
			if (arr[r][k] == 0) {
				return false;
			}
		}
		for (int k = i; k <= Math.min(r,arr.length - 1); k++) {
			if (arr[k][c] == 0) {
				return false;
			}
		}
		return true;
	}
	int largest1BorderedSquare(int[][] grid) {
		int n = grid.length;
		int m = grid[0].length;
		int max = 0;
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < m; j++) {
				int curr_i = i;
				int curr_j = j;
				int ans = 0;
				int next_i = curr_i;
				int next_j = curr_j;
				for (int k = 0; k < grid.length; k++) {
					if (check(next_i,next_j,i,j,grid)) {
						int area = k + 1;
						max = Math.max(area * area,max);
					}
					next_i++;
					next_j++;
				}
			}
		}
		return max;
	}
}