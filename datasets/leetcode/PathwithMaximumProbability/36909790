class Solution {
	double maxProbability(int n, int[][] edges, double[] succProb, int start, int end) {
		ArrayList<List<double[]>> graph = new ArrayList<List<double[]>>();
		for (int i = 0; i < n; i++) {
			graph.add(new ArrayList<double[]>());
		}
		for (int i = 0; i < edges.length; i++) {
			int[] edge = edges[i];
			graph.get(edge[0]).add(new double{edge[1], succProb[i]});
			graph.get(edge[1]).add(new double{edge[0], succProb[i]});
		}
		PriorityQueue<double[]> pq = new PriorityQueue<double[]>(new Comparator<double[]>());
		pq.add(new double{start, 1.0});
		double[] dis = new double[n];
		Arrays.fill(dis,Double.MIN_VALUE);
		dis[start] = 1.00;
		while (!pq.isEmpty()) {
			double[] temp = pq.poll();
			for (double[] edge: graph.get((int) temp[0])) {	
				if (dis[(int)edge[0]] < edge[1] * temp[1]) {
					pq.add(new double{edge[0], edge[1] * temp[1]});
					dis[(int)edge[0]] = edge[1] * temp[1];
				}
			}
		}
		return dis[end];
	}
}