class Solution {
	boolean checkBipartite(ArrayList<ArrayList<Integer>> adj, int[] color, int src) {
		Queue<Integer> q = new LinkedList<>();
		q.add(src);
		color[src] = 0;
		while (!q.isEmpty()) {
			int node = q.poll();
			for (Integer it: adj.get(node)) {	
				if (color[it] == -1) {
					color[it] = 1 - color[node];
					q.add(it);
				} 
				else if (color[it] == color[node]) {
					return false;
				}
			}
		}
		return true;
	}
	boolean possibleBipartition(int n, int[][] dislikes) {
		ArrayList<ArrayList<Integer>> adj = new ArrayList<>();
		for (int i = 0; i <= n; i++) {
			adj.add(new ArrayList<Integer>());
		}
		for (int i = 0; i < dislikes.length; i++) {
			adj.get(dislikes[i][0]).add(dislikes[i][1]);
			adj.get(dislikes[i][1]).add(dislikes[i][0]);
		}
		int color = new int[n + 1];
		Arrays.fill(color,-1);
		for (int i = 1; i <= n; i++) {
			if (color[i] == -1) {
				if (checkBipartite(adj,color,i) == false) {
					return false;
				}
			}
		}
		return true;
	}
}