class Solution {
	List<Boolean> checkIfPrerequisite(int numCourses, int[][] prerequisites, int[][] queries) {
		boolean[][] cache = new boolean[numCourses][numCourses];
		List<List<Integer>> graph = new ArrayList<>();
		Queue<Integer> queue = new LinkedList<>();
		for (int i = 0; i < numCourses; i++) {
			graph.add(new ArrayList<>());
		}
		for (int[] prerequisite: prerequisites) {	
			graph.get(prerequisite[0]).add(prerequisite[1]);
		}
		for (int i = 0; i < numCourses; i++) {
			dfs(graph,cache,i,i);
		}
		List<Boolean> result = new ArrayList<>();
		for (int[] query: queries) {	
			result.add(cache[query[0]][query[1]]);
		}
		return result;
	}
	void dfs(List<List<Integer>> graph, boolean[][] cache, int startNode, int curNode) {
		if (cache[startNode][curNode]) {
			return;
		}
		cache[startNode][curNode] = true;
		List<Integer> neighbours = graph.get(curNode);
		if (neighbours == null) {
			return;
		}
		for (Integer neighbour: neighbours) {	
			dfs(graph,cache,startNode,neighbour);
		}
	}
}