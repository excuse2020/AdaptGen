class Solution {
	int fun(List<List<Integer>> triangle, int i, int j, int dp) {
		if (i == triangle.size() - 1) {
			return triangle.get(i).get(j);
		}
		if (i < 0 || j < 0) {
			return (int) Math.pow(10,9);
		}
		if (dp[i][j] != -1) {
			return dp[i][j];
		}
		int left = triangle.get(i).get(j) + fun(triangle,i + 1,j,dp);
		int right = triangle.get(i).get(j) + fun(triangle,i + 1,j + 1,dp);
		return dp[i][j] = Math.min(left,right);
	}
	int minimumTotal(List<List<Integer>> triangle) {
		int n = triangle.size();
		int dp = new int[n][triangle.get(n - 1).size()];
		for (int row: dp) {	
			Arrays.fill(row,-1);
		}
		return fun(triangle,0,0,dp);
	}
}