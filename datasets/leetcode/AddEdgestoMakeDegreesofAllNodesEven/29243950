class Solution {
	boolean isPossible(int n, List<List<Integer>> edges) {
		ArrayList<Integer>[] adj = new ArrayList[n + 1];
		ArrayList<Integer> odd = new ArrayList<>();
		for (int i = 0; i <= n; i++) {
			adj[i] = new ArrayList<>();
		}
		for (int i = 0; i < edges.size(); i++) {
			int u = edges.get(i).get(0);
			int v = edges.get(i).get(1);
			adj[u].add(v);
			adj[v].add(u);
		}
		for (int i = 1; i <= n; i++) {
			if (adj[i].size() % 2 == 1) {
				odd.add(i);
			}
		}
		if (odd.size() == 0) {
			return true;
		}
		if (odd.size() == 2) {
			int u = odd.get(0);
			int v = odd.get(1);
			if (adj[u].contains(v)) {
				for (int i = 1; i <= n; i++) {
					if (i != u && i != v && !adj[i].contains(u) && !adj[i].contains(v)) {
						return true;
					}
				}
				return false;
			}
			return true;
		}
		if (odd.size() == 4) {
			int a = odd.get(0), b = odd.get(1), c = odd.get(2), d = odd.get(3);
			if (!adj[a].contains(b) && !adj[c].contains(d) || !adj[a].contains(c) && !adj[b].contains(d) || !adj[a].contains(d) && !adj[b].contains(c)) {
				return true;
			}
		}
		return false;
	}
}