class Solution {
	List<List<Integer>> ans = new ArrayList<>();
	List<Integer> combination_list = new LinkedList<>();
	void backtracking(int start_num, int rest_sum, int k) {
		if (rest_sum == 0 && combination_list.size() == k) {
			ans.add(new ArrayList<>(combination_list));
			return;
		}
		for (int i = start_num; i <= 9 && i <= rest_sum; i++) {
			combination_list.add(i);
			backtracking(i + 1,rest_sum - i,k);
			combination_list.removeLast();
		}
	}
	List<List<Integer>> combinationSum3(int k, int n) {
		backtracking(1,n,k);
		return ans;
	}
}