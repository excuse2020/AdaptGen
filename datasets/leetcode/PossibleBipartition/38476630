class Solution {
	boolean possibleBipartition(int n, int[][] dislikes) {
		int[] colors = new int[n + 1];
		List<Integer>[] adj = new ArrayList[n + 1];
		for (int i = 1; i <= n; i++) {
			adj[i] = new ArrayList<>();
		}
		for (int i = 0; i < dislikes.length; i++) {
			adj[dislikes[i][0]].add(dislikes[i][1]);
			adj[dislikes[i][1]].add(dislikes[i][0]);
		}
		for (int i = 1; i < n + 1; i++) {
			if (colors[i] == 0) {
				if (solve(i,adj,colors,1)) {
					return false;
				}
			}
		}
		return true;
	}
	boolean solve(int node, List<Integer>[] adj, int[] colors, int color) {
		colors[node] = color;
		for (int neighbor: adj[node]) {	
			if (colors[neighbor] == 0) {
				if (solve(neighbor,adj,colors,-color)) {
					return true;
				}
			} 
			else {
				if (colors[neighbor] == color) {
					return true;
				}
			}
		}
		return false;
	}
}