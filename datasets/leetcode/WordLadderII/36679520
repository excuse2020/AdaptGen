class Solution {
	void backtrack(List<List<String>> sequences, List<String> sequence, String word, String beginWord, Map<String, List<String>> parents) {
		if (word.equals(beginWord)) {
			sequence.add(0,beginWord);
			sequences.add(new ArrayList<>(sequence));
			sequence.remove(0);
		} 
		else {
			sequence.add(0,word);
			for (String parent: parents.get(word)) {	
				backtrack(sequences,sequence,parent,beginWord,parents);
			}
			sequence.remove(0);
		}
	}
	List<List<String>> findLadders(String beginWord, String endWord, List<String> wordList) {
		List<List<String>> sequences = new ArrayList<>();
		Set<String> dict = new HashSet<>(wordList);
		if (!dict.contains(endWord)) {
			return sequences;
		}
		Map<String, List<String>> parents = new HashMap<>();
		Map<String, Integer> distances = new HashMap<>();
		Queue<String> queue = new LinkedList<>();
		queue.offer(beginWord);
		parents.put(beginWord,new ArrayList<>());
		distances.put(beginWord,0);
		int minDistance = Integer.MAX_VALUE;
		String word = queue.poll();
		int distance = distances.get(word) + 1;
		if (distance > minDistance) {
			break;
		}
		int i = 0;
		char[] chars = word.toCharArray();
		char c;
	}
}