class Solution {
	int find(int[] parent, int x) {
		if (parent[x] != x) {
			parent[x] = find(parent,parent[x]);
			return parent[x];
		}
		return x;
	}
	void union(int[] parent, int x, int y) {
		parent[y] = x;
	}
	boolean validateBinaryTreeNodes(int n, int[] left, int[] right) {
		int[] parent = new int[n];
		for (int i = 0; i < n; i++) {
			parent[i] = i;
		}
		for (int i = 0; i < n; i++) {
			int l = left[i];
			int r = right[i];
			int x = find(parent,i);
			if (l != -1) {
				int root = find(parent,l);
				if (root == x) {
					return false;
				}
				union(parent,i,l);
			}
			if (r != -1) {
				int root = find(parent,r);
				if (root == x) {
					return false;
				}
				union(parent,i,r);
			}
		}
		int root = find(parent,0);
		for (int i = 1; i < n; i++) {
			int rootI = find(parent,i);
			if (root != rootI) {
				return false;
			}
		}
		return true;
	}
}