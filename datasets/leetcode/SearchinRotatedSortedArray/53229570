class Solution {
	int bSearch(int[] nums, int start, int end, int target) {
		while (start <= end) {
			int mid = start + (end - start) / 2;
			if (nums[mid] == target) {
				return mid;
			} 
			else if (target < nums[mid]) {
				end = mid - 1;
			} 
			else {
				start = mid + 1;
			}
		}
		return -1;
	}
	int findPivot(int[] nums) {
		int start = 0, end = nums.length - 1;
		while (start <= end) {
			int mid = start + (end - start) / 2;
			if (mid < end && nums[mid] > nums[mid + 1]) {
				return mid;
			}
			if (mid > start && nums[mid] < nums[mid - 1]) {
				return mid - 1;
			}
			if (nums[start] >= nums[mid]) {
				end = mid - 1;
			} 
			else {
				start = mid + 1;
			}
		}
		return -1;
	}
	int search(int[] nums, int target) {
		int pivot = findPivot(nums);
		if (pivot == -1) {
			return bSearch(nums,0,nums.length - 1,target);
		}
		if (target == nums[pivot]) {
			return pivot;
		}
		if (target >= nums[0]) {
			return bSearch(nums,0,pivot,target);
		}
		return bSearch(nums,pivot + 1,nums.length - 1,target);
	}
}