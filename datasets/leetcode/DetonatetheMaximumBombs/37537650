class Solution {
	int bfs(int idx, int[][] bombs, boolean[] vis) {
		int ans = 1;
		Queue<Integer> q = new LinkedList<>();
		q.offer(idx);
		vis[idx] = true;
		while (!q.isEmpty()) {
			int num = q.poll();
			for (int i = 0; i < bombs.length; i++) {
				if (!vis[i]) {
					int dis = (int) Math.ceil(Math.sqrt(Math.pow(bombs[num][0] - bombs[i][0],2) + Math.pow(bombs[num][1] - bombs[i][1],2)));
					if (dis <= bombs[num][2]) {
						q.offer(i);
						vis[i] = true;
						ans++;
					}
				}
			}
		}
		return ans;
	}
	int dfs(int idx, int[][] bombs, boolean[] vis) {
		int n = bombs.length, ans = 0;
		vis[idx] = true;
		for (int i = 0; i < n; i++) {
			if (!vis[i]) {
				int dis = (int) Math.ceil(Math.sqrt(Math.pow(bombs[idx][0] - bombs[i][0],2) + Math.pow(bombs[idx][1] - bombs[i][1],2)));
				if (dis <= bombs[idx][2]) {
					ans += dfs(i,bombs,vis);
				}
			}
		}
		return ans + 1;
	}
	int maximumDetonation(int[][] bombs) {
		int n = bombs.length, ans = 0;
		for (int i = 0; i < n; i++) {
			ans = Math.max(ans,bfs(i,bombs,new boolean[n]));
		}
		return ans;
	}
}