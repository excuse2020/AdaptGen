class Solution {
	ArrayList<Integer> One = new ArrayList<Integer>();
	ArrayList<Integer> Three = new ArrayList<Integer>();
	ArrayList<Integer> Two = new ArrayList<Integer>();
	void Second(TreeNode root) {
		if (root == null) {
			return;
		}
		Second(root.left);
		Two.add(root.val);
		Second(root.right);
	}
	void Third(TreeNode root) {
		if (root == null) {
			return;
		}
		Third(root.left);
		Third(root.right);
		Three.add(root.val);
	}
	void first(TreeNode root) {
		if (root == null) {
			return;
		}
		One.add(root.val);
		first(root.left);
		first(root.right);
	}
	int[][] threeOrders(TreeNode root) {
		first(root);
		Second(root);
		Third(root);
		int n = One.size();
		int[][] count = new int[3][n];
		Integer[] one = One.toArray(new Integer[n]);
		Integer[] two = Two.toArray(new Integer[n]);
		Integer[] three = Three.toArray(new Integer[n]);
		for (int i = 0; i < n; i++) {
			count[0][i] = one[i];
			count[1][i] = two[i];
			count[2][i] = three[i];
		}
		return count;
	}
}