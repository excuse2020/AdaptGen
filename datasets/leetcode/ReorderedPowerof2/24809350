class Solution {
	boolean reorderedPowerOf2(int n) {
		int[] frequency = new int[10];
		int digitCount = 0;
		while (n > 0) {
			frequency[n % 10]++;
			n /= 10;
			digitCount++;
		}
		int currP = 1;
		while (currP > 0) {
			int[] currFreq = new int[10];
			int currDigitCount = 0;
			int currN = currP;
			while (currN > 0) {
				currFreq[currN % 10]++;
				currN /= 10;
				currDigitCount++;
			}
			if (currDigitCount > digitCount) {
				return false;
			}
			if (currDigitCount == digitCount && Arrays.equals(currFreq,frequency)) {
				return true;
			}
			currP <<= 1;
		}
		return false;
	}
}