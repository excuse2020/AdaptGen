class Solution {
	List<List<Integer>> combinationSum2(int[] arr, int target) {
		Arrays.sort(arr);
		List<List<Integer>> ans = new ArrayList<>();
		List<Integer> curr = new ArrayList<>();
		helper(arr,0,target,ans,curr);
		return ans;
	}
	void helper(int[] arr, int start, int target, List<List<Integer>> ans, List<Integer> curr) {
		if (target < 0) {
			return;
		}
		if (target == 0) {
			if (!ans.contains(curr)) {
				ans.add(new ArrayList<Integer>(curr));
			}
		}
		for (int i = start; i < arr.length; i++) {
			if (i > start && arr[i] == arr[i - 1]) {
				continue;
			}
			curr.add(arr[i]);
			helper(arr,i + 1,target - arr[i],ans,curr);
			curr.remove(curr.size() - 1);
		}
	}
}