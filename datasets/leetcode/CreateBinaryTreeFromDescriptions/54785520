class Solution {
	TreeNode createBinaryTree(int[][] d) {
		Set<Integer> set = new HashSet<>();
		HashMap<Integer, TreeNode> map = new HashMap<>();
		for (int i = 0; i < d.length; i++) {
			if (map.containsKey(d[i][0])) {
				TreeNode temp = map.get(d[i][0]);
				if (set.contains(d[i][1])) {
					TreeNode node = map.get(d[i][1]);
					if (d[i][2] == 1) {
						temp.left = node;
					} 
					else {
						temp.right = node;
					}
					set.remove(d[i][1]);
				} 
				else {
					TreeNode node = new TreeNode(d[i][1]);
					if (d[i][2] == 1) {
						temp.left = node;
					} 
					else {
						temp.right = node;
					}
					map.put(d[i][1],node);
				}
			} 
			else {
				TreeNode temp = new TreeNode(d[i][0]);
				map.put(d[i][0],temp);
				if (map.containsKey(d[i][1])) {
					if (d[i][2] == 1) {
						temp.left = map.get(d[i][1]);
					} 
					else {
						temp.right = map.get(d[i][1]);
					}
					set.remove(d[i][1]);
				} 
				else {
					TreeNode node = new TreeNode(d[i][1]);
					map.put(d[i][1],node);
					if (d[i][2] == 1) {
						temp.left = node;
					} 
					else {
						temp.right = node;
					}
				}
				set.add(d[i][0]);
			}
		}
		for (Integer element: set) {	
			return map.get(element);
		}
		TreeNode temp = new TreeNode();
		return temp;
	}
}