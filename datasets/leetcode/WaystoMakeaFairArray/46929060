class Solution {
	int waysToMakeFair(int[] nums) {
		int dpLengthPairs = nums.length % 2 == 0 ? nums.length / 2 : nums.length / 2 + 1;
		int dpLengthOdds = nums.length / 2;
		int[] dpPairs = new int[dpLengthPairs + 1];
		int[] dpOdds = new int[dpLengthOdds + 1];
		int index = 1;
		for (int i = 0; i < nums.length; i++) {
			if (i % 2 == 0) {
				dpPairs[index] = dpPairs[index - 1] + nums[i];
			} 
			else {
				dpOdds[index] = dpOdds[index - 1] + nums[i];
				index++;
			}
		}
		int result = 0;
		index = 1;
		for (int i = 0; i < nums.length; i++) {
			int pairSum = dpPairs[dpLengthPairs];
			int oddSum = dpOdds[dpLengthOdds];
			if (i % 2 == 0) {
				pairSum = pairSum - dpPairs[index] + dpOdds[index - 1];
				oddSum = oddSum - dpOdds[index - 1] + dpPairs[index];
			} 
			else {
				oddSum = oddSum - dpOdds[index] + dpPairs[index];
				pairSum = pairSum - dpPairs[index] + dpOdds[index];
				index++;
			}
			if (pairSum == oddSum) {
				result++;
			}
		}
		return result;
	}
}