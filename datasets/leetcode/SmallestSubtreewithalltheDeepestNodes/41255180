class Solution {
	Pair<TreeNode, Integer> getSmallestSubtreeWithAllDeepestNodesAndGreatestDepth(TreeNode root) {
		if (root == null) {
			return new Pair(null, 0);
		}
		Pair<TreeNode, Integer> left = getSmallestSubtreeWithAllDeepestNodesAndGreatestDepth(root.left);
		Pair<TreeNode, Integer> right = getSmallestSubtreeWithAllDeepestNodesAndGreatestDepth(root.right);
		if (left.getValue() < right.getValue()) {
			return new Pair(right.getKey(), right.getValue() + 1);
		} 
		else if (left.getValue() > right.getValue()) {
			return new Pair(left.getKey(), left.getValue() + 1);
		}
		return new Pair(root, left.getValue() + 1);
	}
	TreeNode subtreeWithAllDeepest(TreeNode root) {
		return getSmallestSubtreeWithAllDeepestNodesAndGreatestDepth(root).getKey();
	}
}