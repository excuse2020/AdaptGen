class Solution {
	ListNode mergeList(ListNode head1, ListNode head2) {
		if (head1 == null) {
			return head2;
		}
		if (head2 == null) {
			return head1;
		}
		ListNode head1Cursor = head1;
		ListNode head2Cursor = head2;
		ListNode newHead = new ListNode(0);
		ListNode newCursor = newHead;
		while (head1Cursor != null && head2Cursor != null) {
			if (head1Cursor.val < head2Cursor.val) {
				newCursor.next = head1Cursor;
				head1Cursor = head1Cursor.next;
			} 
			else {
				newCursor.next = head2Cursor;
				head2Cursor = head2Cursor.next;
			}
			newCursor = newCursor.next;
		}
		newCursor.next = head1Cursor == null ? head2Cursor : head1Cursor;
		return newHead.next;
	}
	ListNode sortInList(ListNode head) {
		if (head == null || head.next == null) {
			return head;
		}
		ListNode fast = head.next;
		ListNode slow = head;
		while (fast != null && fast.next != null) {
			slow = slow.next;
			fast = fast.next.next;
		}
		ListNode temp = slow.next;
		slow.next = null;
		return mergeList(sortInList(head),sortInList(temp));
	}
}