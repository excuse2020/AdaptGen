class Solution {
	boolean containsNearbyAlmostDuplicate(int[] nums, int k, int t) {
		if (t < 0 || k <= 0) {
			return false;
		}
		Map<Long, Integer> data = new HashMap<>();
		for (int i = 0; i < nums.length; i++) {
			long bucketId = getBucketId((long) nums[i],t);
			if (data.containsKey(bucketId) && Math.abs(data.get(bucketId) - (long) nums[i]) <= t) {
				return true;
			}
			if (data.containsKey(bucketId - 1) && Math.abs(data.get(bucketId - 1) - (long) nums[i]) <= t) {
				return true;
			}
			if (data.containsKey(bucketId + 1) && Math.abs(data.get(bucketId + 1) - (long) nums[i]) <= t) {
				return true;
			}
			if (i >= k) {
				data.remove(getBucketId((long) nums[i - k],t));
			}
			data.put(bucketId,nums[i]);
		}
		return false;
	}
	long getBucketId(long itm, int t) {
		return t == 0 ? itm : itm / t;
	}
}