class Solution {
	double helper(int m, int n, double[][] dp) {
		if (m <= 0 && n <= 0) {
			return 0.5;
		}
		if (m <= 0) {
			return 1.0;
		}
		if (n <= 0) {
			return 0.0;
		}
		if (dp[m][n] != -1.0) {
			return dp[m][n];
		}
		double res = 0.25 * (helper(m - 4,n,dp) + helper(m - 3,n - 1,dp));
		dp[m][n] = res;
		return res;
	}
	double soupServings(int n) {
		if (n > 5000) {
			return 1.0;
		}
		int m = (int) Math.ceil(n / 25.0);
		double[][] dp = new double[m + 1][m + 1];
		for (int i = 0; i < m + 1; i++) {
			for (int j = 0; j < m + 1; j++) {
				dp[i][j] = -1;
			}
		}
		return helper(m,m,dp);
	}
}