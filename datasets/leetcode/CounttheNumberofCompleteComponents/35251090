class Solution {
	int[] edgeCount;
	int[] parent;
	int[] rank;
	int[] verticesCount;
	int countCompleteComponents(int n, int[][] edges) {
		init(n);
		for (int[] edge: edges) {	
			union(edge);
		}
		int count = 0;
		for (int i = 0; i < n; i++) {
			if (parent[i] == i && edgeCount[i] == (verticesCount[i] * (verticesCount[i] - 1)) / 2) {
				count++;
			}
		}
		return count;
	}
	int find(int i) {
		if (parent[i] != i) {
			parent[i] = parent[parent[i]];
			i = parent[i];
		}
		return i;
	}
	void init(int n) {
		edgeCount = new int[n];
		rank = new int[n];
		verticesCount = new int[n];
		Arrays.fill(verticesCount,1);
		parent = new int[n];
		for (int i = 0; i < n; i++) {
			parent[i] = i;
		}
	}
	void union(int[] edge) {
		var p1 = find(edge[0]);
		var p2 = find(edge[1]);
		edgeCount[p1]++;
		if (p1 == p2) {
			return;
		}
		if (rank[p1] < rank[p2]) {
			parent[p1] = p2;
			edgeCount[p2] += edgeCount[p1];
			verticesCount[p2] += verticesCount[p1];
		} 
		else {
			parent[p2] = p1;
			edgeCount[p1] += edgeCount[p2];
			verticesCount[p1] += verticesCount[p2];
			if (rank[p1] == rank[p2]) {
				rank[p1]++;
			}
		}
	}
}