class Solution {
	void dfs(int src, int vis, Map<Integer, List<Integer>> map) {
		vis[src] = 1;
		if (map.containsKey(src) == false) {
			return;
		}
		List<Integer> nbrs = map.get(src);
		for (int nbr: nbrs) {	
			if (vis[nbr] == 0) {
				dfs(nbr,vis,map);
			}
		}
	}
	boolean validateBinaryTreeNodes(int n, int[] leftChild, int[] rightChild) {
		Map<Integer, List<Integer>> map = new HashMap<>();
		int in = new int[n];
		for (int i = 0; i < leftChild.length; i++) {
			if (leftChild[i] != -1) {
				map.computeIfAbsent(i,(v) -> {new ArrayList<>()}).add(leftChild[i]);
				in[leftChild[i]]++;
			}
			if (rightChild[i] != -1) {
				map.computeIfAbsent(i,(v) -> {new ArrayList<>()}).add(rightChild[i]);
				in[rightChild[i]]++;
			}
		}
		for (int node: map.keySet()) {	
			List<Integer> nbrs = map.get(node);
			if (nbrs.size() > 2) {
				return false;
			}
		}
		Queue<Integer> queue = new LinkedList<>();
		int parentNode = -1;
		for (int i = 0; i < n; i++) {
			if (in[i] > 1) {
				return false;
			}
			if (in[i] == 0) {
				parentNode = i;
				queue.add(i);
			}
		}
		int count = 0;
		while (queue.size() > 0) {
			int rem = queue.remove();
			count++;
			if (map.containsKey(rem) == false) {
				continue;
			}
			List<Integer> nbrs = map.get(rem);
			for (int nbr: nbrs) {	
				if (--in[nbr] == 0) {
					queue.add(nbr);
				}
			}
		}
		if (count != n) {
			return false;
		}
		int vis = new int[n];
		dfs(parentNode,vis,map);
		for (int i: vis) {	
			if (i == 0) {
				return false;
			}
		}
		return true;
	}
}