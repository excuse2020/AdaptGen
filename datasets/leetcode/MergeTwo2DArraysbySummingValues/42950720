class Solution {
	int[][] mergeArrays(int[][] nums1, int[][] nums2) {
		int n = nums1.length;
		int m = nums2.length;
		int i = 0, j = 0;
		int c = 0;
		ArrayList<ArrayList<Integer>> list = new ArrayList<>();
		while (i < n || j < m) {
			ArrayList<Integer> list1 = new ArrayList<>();
			if ((i < n && j < m) && (nums1[i][0] == nums2[j][0])) {
				list1.add(nums1[i][0]);
				list1.add(nums1[i][1] + nums2[j][1]);
				i++;
				j++;
				c++;
			} 
			else if ((i < n && j < m) && nums1[i][0] < nums2[j][0]) {
				list1.add(nums1[i][0]);
				list1.add(nums1[i][1]);
				i++;
				c++;
			} 
			else if (i < n && j >= m) {
				list1.add(nums1[i][0]);
				list1.add(nums1[i][1]);
				i++;
				c++;
			} 
			else if ((j < m && i < n) && nums2[j][0] < nums1[i][0]) {
				list1.add(nums2[j][0]);
				list1.add(nums2[j][1]);
				j++;
				c++;
			} 
			else if (i >= n && j < m) {
				list1.add(nums2[j][0]);
				list1.add(nums2[j][1]);
				j++;
				c++;
			}
			list.add(list1);
		}
		int[][] ans = new int[c][2];
		for (int p = 0; p < c; p++) {
			ans[p][0] = list.get(p).get(0);
			ans[p][1] = list.get(p).get(1);
		}
		return ans;
	}
}