class Solution {
	ListNode addInList(ListNode head1, ListNode head2) {
		Stack<Integer> stack1 = new Stack<>();
		Stack<Integer> stack2 = new Stack<>();
		while (head1 != null) {
			stack1.push(head1.val);
			head1 = head1.next;
		}
		while (head2 != null) {
			stack2.push(head2.val);
			head2 = head2.next;
		}
		Stack<Integer> stack3 = new Stack<>();
		int flag = 0;
		while (!stack1.isEmpty() || !stack2.isEmpty()) {
			int val = flag;
			if (!stack1.isEmpty()) {
				val += stack1.pop();
			}
			if (!stack2.isEmpty()) {
				val += stack2.pop();
			}
			flag = val / 10;
			stack3.push(val % 10);
		}
		if (flag == 1) {
			stack3.push(1);
		}
		ListNode ret = new ListNode(-1);
		ListNode cur = ret;
		while (!stack3.isEmpty()) {
			cur.next = new ListNode(stack3.pop());
			cur = cur.next;
		}
		return ret.next;
	}
}