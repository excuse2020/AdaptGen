class Solution {
	boolean isPalindrome(StringBuilder st) {
		for (int i = 0; i < st.length() / 2; i++) {
			if (st.charAt(i) != st.charAt(st.length() - i)) {
				return false;
			}
		}
		return true;
	}
	boolean validPalindrome(String s) {
		int n = s.length();
		int left = 0;
		int right = 0;
		int k = 0;
		for (int i = 0; i < s.length() / 2; i++) {
			if (s.charAt(i) != s.charAt(n - i)) {
				left = i;
				right = n - i;
				k++;
				break;
			}
		}
		boolean ans = true;
		StringBuilder sb = new StringBuilder("");
		for (int i = 0; i < n; i++) {
			if (i == left) {
				continue;
			} 
			else {
				sb.append(s.charAt(i));
			}
		}
		StringBuilder sb2 = new StringBuilder("");
		for (int i = 0; i < n; i++) {
			if (i == right) {
				continue;
			} 
			else {
				sb2.append(s.charAt(i));
			}
		}
		if (k == 0 || isPalindrome(sb) || isPalindrome(sb2)) {
			return true;
		}
		return false;
	}
}