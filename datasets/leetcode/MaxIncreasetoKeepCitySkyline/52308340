class Solution {
	int[] findMaxCol(int[][] grid) {
		int len = grid.length;
		int colMax = new int[len];
		for (int i = 0; i < len; i++) {
			int max = 0, max1 = 0;
			for (int j = 0; j < len; j++) {
				max = Math.max(grid[j][i],max);
			}
			colMax[i] = max;
		}
		return colMax;
	}
	int[] findMaxRow(int[][] grid) {
		int len = grid.length;
		int rowMax = new int[len];
		for (int i = 0; i < len; i++) {
			int max = 0, max1 = 0;
			for (int j = 0; j < len; j++) {
				max = Math.max(grid[i][j],max);
			}
			rowMax[i] = max;
		}
		return rowMax;
	}
	int maxIncreaseKeepingSkyline(int[][] grid) {
		int n = grid.length;
		int[] row = new int[n];
		int[] col = new int[n];
		row = findMaxRow(grid);
		col = findMaxCol(grid);
		for (int i = 0; i < n; i++) {
			System.out.println(row[i]);
		}
		System.out.println();
		for (int i = 0; i < n; i++) {
			System.out.print(col[i] + ",");
		}
		int sumDiff = 0;
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < n; j++) {
				sumDiff += (Math.min(row[i],col[j]) - grid[i][j]);
			}
		}
		return sumDiff;
	}
}