class Solution {
	int maxIncreaseKeepingSkyline(int[][] grid) {
		int[] row = new int[grid.length];
		int[] column = new int[grid.length];
		for (int i = 0; i < grid.length; i++) {
			int maxNum = 0;
			for (int j = 0; j < grid[i].length; j++) {
				if (grid[i][j] > maxNum) {
					maxNum = grid[i][j];
				}
			}
			row[i] = maxNum;
		}
		for (int i = 0; i < grid.length; i++) {
			int maxNum = 0;
			for (int j = 0; j < grid[i].length; j++) {
				if (grid[j][i] > maxNum) {
					maxNum = grid[j][i];
				}
			}
			column[i] = maxNum;
		}
		int result = 0;
		for (int i = 0; i < row.length; i++) {
			for (int j = 0; j < row.length; j++) {
				int rowMax = row[i];
				int columnMax = column[j];
				int maxAvailable = Math.min(rowMax,columnMax);
				result = (maxAvailable - grid[i][j]) + result;
			}
		}
		return result;
	}
}