class Solution {
	boolean isUnivalSubtree(TreeNode current) {
		if (current.left != null && current.val != current.left.val) {
			return false;
		}
		if (current.right != null && current.val != current.right.val) {
			return false;
		}
		return true;
	}
	boolean isUnivalTree(TreeNode root) {
		return unival(root);
	}
	boolean unival(TreeNode root) {
		if (root == null) {
			return true;
		}
		Queue<TreeNode> queue = new LinkedList<>();
		queue.add(root);
		while (!queue.isEmpty()) {
			TreeNode current = queue.poll();
			if (!isUnivalSubtree(current)) {
				return false;
			}
			if (current.left != null) {
				queue.add(current.left);
			}
			if (current.right != null) {
				queue.add(current.right);
			}
		}
		return true;
	}
}