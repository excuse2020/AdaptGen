class Solution {
	int[][] dp = new int[32][1002];
	int mod = 1000000007;
	int helper(int n, int k, int target, int[][] dp) {
		if (target == 0 && n == 0) {
			return 1;
		} 
		else if (n == 0 && target != 0) {
			return 0;
		} 
		else if (target < 0) {
			return 0;
		}
		if (dp[n][target] != -1) {
			return dp[n][target] % mod;
		}
		int ct = 0;
		for (int i = 1; i <= k; i++) {
			ct += helper(n - 1,k,target - i,dp) % mod;
			ct = ct % mod;
		}
		return dp[n][target] = ct;
	}
	int numRollsToTarget(int n, int k, int target) {
		for (int i = 0; i < dp.length; i++) {
			for (int j = 0; j < dp[i].length; j++) {
				dp[i][j] = -1;
			}
		}
		return helper(n,k,target,dp);
	}
}