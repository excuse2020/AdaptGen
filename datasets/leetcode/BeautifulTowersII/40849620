class Solution {
	long[] getPrefixSum(List<Integer> ls) {
		int n = ls.size();
		long arr = new long[n];
		Stack<Integer> stack = new Stack<>();
		stack.add(-1);
		for (int i = 0; i < n; i++) {
			while ((stack.peek() == -1 ? 0 : ls.get(stack.peek())) >= ls.get(i)) {
				stack.pop();
			}
			arr[i] = (i - stack.peek()) * (long) ls.get(i) + (stack.peek() == -1 ? 0L : arr[stack.peek()]);
			stack.add(i);
		}
		return arr;
	}
	long maximumSumOfHeights(List<Integer> ht) {
		long[] prefix = getPrefixSum(ht);
		Collections.reverse(ht);
		long[] postfix = getPrefixSum(ht);
		long res = 0;
		int n = prefix.length;
		for (int i = 0; i < n; i++) {
			res = Math.max(res,prefix[i] + postfix[n - i - 1] - ht.get(n - i));
		}
		return res;
	}
}