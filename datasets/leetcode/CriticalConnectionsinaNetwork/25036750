class Solution {
	int timer = 0;
	List<List<Integer>> createGraph(List<List<Integer>> connections, int n) {
		List<List<Integer>> graph = new ArrayList<>();
		for (int i = 0; i < n; i++) {
			graph.add(i,new ArrayList<Integer>());
		}
		for (int i = 0; i < connections.size(); i++) {
			List<Integer> temp = connections.get(i);
			graph.get(temp.get(0)).add(temp.get(1));
			graph.get(temp.get(1)).add(temp.get(0));
		}
		return graph;
	}
	List<List<Integer>> criticalConnections(int n, List<List<Integer>> connections) {
		List<List<Integer>> graph = createGraph(connections,n);
		int[] disc = new int[n];
		int[] low = new int[n];
		int[] parent = new int[n];
		Arrays.fill(disc,-1);
		Arrays.fill(low,Integer.MAX_VALUE);
		Arrays.fill(parent,Integer.MAX_VALUE);
		List<List<Integer>> bridges = new ArrayList<>();
		for (int i = 0; i < n; i++) {
			if (disc[i] == -1) {
				dfs(i,graph,disc,low,parent,bridges);
			}
		}
		return bridges;
	}
	void dfs(int i, List<List<Integer>> graph, int[] disc, int[] low, int[] parent, List<List<Integer>> bridges) {
		disc[i] = low[i] = timer;
		timer++;
		int children = 0;
		for (int adj: graph.get(i)) {	
			if (disc[adj] == -1) {
				parent[adj] = i;
				dfs(adj,graph,disc,low,parent,bridges);
				low[i] = Math.min(low[i],low[adj]);
				if (low[adj] > disc[i]) {
					List<Integer> bridge = new ArrayList<Integer>();
					bridge.add(i);
					bridge.add(adj);
					bridges.add(bridge);
				}
			} 
			else if (parent[i] != adj) {
				low[i] = Math.min(low[i],disc[adj]);
			}
		}
	}
}