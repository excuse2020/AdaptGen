class Solution {
	boolean isLeaf(TreeNode root) {
		if (root == null) {
			return false;
		}
		if (root.left == null && root.right == null) {
			return true;
		}
		return false;
	}
	void leafSeq(TreeNode root, ArrayList<Integer> q) {
		if (root == null) {
			return;
		}
		if (isLeaf(root) == true) {
			q.add(root.val);
			return;
		}
		leafSeq(root.left,q);
		leafSeq(root.right,q);
	}
	boolean leafSimilar(TreeNode root1, TreeNode root2) {
		if (root1 == null && root2 == null || root1 == null || root2 == null) {
			return false;
		}
		ArrayList<Integer> leaves1 = new ArrayList<>();
		ArrayList<Integer> leaves2 = new ArrayList<>();
		leafSeq(root1,leaves1);
		leafSeq(root2,leaves2);
		if (leaves1.size() != leaves2.size()) {
			return false;
		}
		int i = 0;
		while (i < leaves1.size()) {
			if (leaves1.get(i) != leaves2.get(i)) {
				return false;
			}
			i++;
		}
		return true;
	}
}