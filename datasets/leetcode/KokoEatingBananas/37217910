class Solution {
	int findHours(int[] piles, int hours) {
		int totalHours = 0;
		for (int i = 0; i < piles.length; i++) {
			totalHours += (Math.ceil((double) (piles[i]) / (double) (hours)));
		}
		return totalHours;
	}
	int findMax(int[] piles) {
		int max = Integer.MIN_VALUE;
		for (int i = 0; i < piles.length; i++) {
			max = Math.max(max,piles[i]);
		}
		return max;
	}
	int minEatingSpeed(int[] piles, int h) {
		int i = 1;
		int j = findMax(piles);
		while (i <= j) {
			int mid = (i + j) / 2;
			int time = findHours(piles,mid);
			if (time <= h) {
				j = mid - 1;
			} 
			else {
				i = mid + 1;
			}
		}
		return i;
	}
}