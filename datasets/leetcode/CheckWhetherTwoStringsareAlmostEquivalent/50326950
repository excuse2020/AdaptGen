class Solution {
	boolean checkAlmostEquivalent(String word1, String word2) {
		HashMap<Character, Integer> hm1 = new HashMap<>();
		HashMap<Character, Integer> hm2 = new HashMap<>();
		HashMap<Character, Integer> hm3 = new HashMap<>();
		for (int i = 0; i < word1.length(); i++) {
			if (hm1.containsKey(word1.charAt(i))) {
				hm1.put(word1.charAt(i),hm1.get(word1.charAt(i)) + 1);
			} 
			else {
				hm1.put(word1.charAt(i),1);
			}
		}
		for (int i = 0; i < word2.length(); i++) {
			if (hm2.containsKey(word2.charAt(i))) {
				hm2.put(word2.charAt(i),hm2.get(word2.charAt(i)) + 1);
			} 
			else {
				hm2.put(word2.charAt(i),1);
			}
		}
		Set<Character> s1 = hm1.keySet();
		Set<Character> s2 = hm2.keySet();
		List<Character> l = new ArrayList<>();
		for (Character ch: s1) {	
			l.add(ch);
		}
		for (Character ch: s2) {	
			l.add(ch);
		}
		for (int i = 0; i < l.size(); i++) {
			char ch = l.get(i);
			if (hm1.containsKey(ch) && hm2.containsKey(ch)) {
				hm3.put(ch,Math.abs(hm1.get(ch) - hm2.get(ch)));
			} 
			else if (hm1.containsKey(ch)) {
				hm3.put(ch,hm1.get(ch));
			} 
			else {
				hm3.put(ch,hm2.get(ch));
			}
		}
		for (Character ch: hm3.keySet()) {	
			if (hm3.get(ch) > 3) {
				return false;
			}
		}
		return true;
	}
}