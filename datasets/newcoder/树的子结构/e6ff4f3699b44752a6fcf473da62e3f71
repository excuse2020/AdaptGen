class Solution {
	boolean HasSubtree(TreeNode root1, TreeNode root2) {
		if (root1 == null || root2 == null) {
			return false;
		}
		Queue<TreeNode> queue = new LinkedList<>();
		queue.offer(root1);
		while (!queue.isEmpty()) {
			TreeNode node = queue.poll();
			if (isEqual(node,root2)) {
				return true;
			}
			if (node.left != null) {
				queue.offer(node.left);
			}
			if (node.right != null) {
				queue.offer(node.right);
			}
		}
		return false;
	}
	boolean isEqual(TreeNode root1, TreeNode root2) {
		if (root2 == null) {
			return true;
		}
		if (root1 == null || root1.val != root2.val) {
			return false;
		}
		return isEqual(root1.left,root2.left) && isEqual(root1.right,root2.right);
	}
}