class Solution {
	boolean isFound = false;
	void getPath(TreeNode root, int target, ArrayList<Integer> path) {
		if (root == null || isFound == true) {
			return;
		}
		path.add(root.val);
		if (root.val == target) {
			isFound = true;
			return;
		}
		getPath(root.left,target,path);
		getPath(root.right,target,path);
		if (isFound) {
			return;
		}
		path.remove(path.size() - 1);
		return;
	}
	int lowestCommonAncestor(TreeNode root, int o1, int o2) {
		ArrayList<Integer> pathP = new ArrayList<>();
		ArrayList<Integer> pathQ = new ArrayList<>();
		getPath(root,o1,pathP);
		isFound = false;
		getPath(root,o2,pathQ);
		int res = 0;
		for (int i = 0; i < pathP.size() && i < pathQ.size(); ++i) {
			int x = pathP.get(i);
			int y = pathQ.get(i);
			if (x == y) {
				res = pathP.get(i);
			} 
			else {
				break;
			}
		}
		return res;
	}
}