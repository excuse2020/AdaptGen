class Solution {
	int BLUE = 1;
	int RED = -1;
	boolean helper(List<Integer>[] adj, int x, int parColor, int[] colors) {
		if (colors[x] == parColor) {
			return false;
		}
		if (colors[x] != 0) {
			return true;
		}
		colors[x] = parColor == RED ? BLUE : RED;
		for (int y: adj[x]) {	
			if (!helper(adj,y,colors[x],colors)) {
				return false;
			}
		}
		return true;
	}
	boolean possibleBipartition(int n, int[][] dislikes) {
		List<Integer>[] adj = new List[n + 1];
		for (int i = 0; i <= n; i++) {
			adj[i] = new ArrayList<>();
		}
		for (int[] edge: dislikes) {	
			adj[edge[0]].add(edge[1]);
			adj[edge[1]].add(edge[0]);
		}
		int[] colors = new int[n + 1];
		for (int i = 1; i <= n; i++) {
			if (colors[i] != 0) {
				continue;
			}
			if (!helper(adj,i,RED,colors)) {
				return false;
			}
		}
		return true;
	}
}