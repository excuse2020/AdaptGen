class Solution {
	Map<Integer, List<TreeNode>> dp = new HashMap<>();
	List<TreeNode> allPossibleFBT(int n) {
		List<TreeNode> res = new ArrayList<>();
		if (dp.get(n) != null) {
			return dp.get(n);
		}
		if (n % 2 == 0) {
			return new ArrayList<>();
		}
		if (n == 1) {
			res.add(new TreeNode(0));
		}
		for (int i = 1; i <= n - 1; i += 2) {
			List<TreeNode> left = allPossibleFBT(i);
			List<TreeNode> right = allPossibleFBT(n - 1);
			for (TreeNode nodeLeft: left) {	
				for (TreeNode nodeRight: right) {	
					TreeNode newNode = new TreeNode(0, nodeLeft, nodeRight);
					res.add(newNode);
				}
			}
		}
		dp.put(n,res);
		return res;
	}
}