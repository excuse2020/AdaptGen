class Solution {
	int numEquivDominoPairs(int[][] dominoes) {
		int largest = 0;
		if (dominoes.length == 1) {
		}
		HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
		for (int i = 0; i < dominoes.length; i++) {
			int firstcase = dominoes[i][0] * 10 + dominoes[i][1];
			int secondcase = dominoes[i][1] * 10 + dominoes[i][0];
			if (map.containsKey(firstcase)) {
				map.put(firstcase,map.get(firstcase) + 1);
			} 
			else if (map.containsKey(secondcase)) {
				map.put(secondcase,map.get(secondcase) + 1);
			} 
			else {
				map.put(firstcase,1);
			}
		}
		int sum = 0;
		for (Map.Entry<Integer, Integer> find: map.entrySet()) {	
			sum += (find.getValue() * (find.getValue() - 1)) / 2;
		}
		return sum;
	}
}