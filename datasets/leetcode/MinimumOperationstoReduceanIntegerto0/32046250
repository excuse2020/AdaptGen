class Solution {
	int minOperations(int n) {
		Deque<Integer> queue = new ArrayDeque<>();
		queue.add(0);
		int ops = 0;
		Set<Integer> seen = new HashSet<>();
		seen.add(0);
		while (!queue.isEmpty()) {
			int size = queue.size();
			for (int i = 0; i < size; i++) {
				int num = queue.poll();
				if (num == n) {
					return ops;
				}
				for (int j = 0; ((int) Math.pow(2,j) + num) <= 100000; j++) {
					int p = (int) Math.pow(2,j) + num;
					if (seen.contains(p)) {
						continue;
					}
					seen.add(p);
					queue.add(p);
				}
				for (int j = 0; (num - (int) Math.pow(2,j)) >= 0; j++) {
					int p = num - (int) Math.pow(2,j);
					if (seen.contains(p)) {
						continue;
					}
					seen.add(p);
					queue.add(p);
				}
			}
			ops++;
		}
		return ops;
	}
}