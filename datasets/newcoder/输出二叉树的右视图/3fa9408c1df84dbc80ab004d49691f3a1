class Solution {
	Map<Integer, Integer> index;
	TreeNode buildTree(int[] xianxu, int l1, int r1, int[] zhongxu, int l2, int r2) {
		if (l1 > r1 || l2 > r2) {
			return null;
		}
		int xianxu_root = l1;
		int zhongxu_root = index.get(xianxu[xianxu_root]);
		TreeNode root = new TreeNode(xianxu[xianxu_root]);
		int leftsize = zhongxu_root - l2;
		root.left = buildTree(xianxu,l1 + 1,l1 + leftsize,zhongxu,l2,zhongxu_root - 1);
		root.right = buildTree(xianxu,l1 + leftsize,r1,zhongxu,zhongxu_root + 1,r2);
		return root;
	}
	ArrayList<Integer> rightSideView(TreeNode root) {
		ArrayList<Integer> res = new ArrayList<Integer>();
		Queue<TreeNode> q = new LinkedList<TreeNode>();
		q.offer(root);
		while (!q.isEmpty()) {
			int size = q.size();
			while (size-- != 0) {
				TreeNode temp = q.poll();
				if (temp.left != null) {
					q.offer(temp.left);
				}
				if (temp.right != null) {
					q.offer(temp.right);
				}
				if (size == 0) {
					res.add(temp.val);
				}
			}
		}
		return res;
	}
	int[] solve(int[] xianxu, int[] zhongxu) {
		index = new HashMap<Integer, Integer>();
		if (xianxu.length == 0) {
			return new int[0];
		}
		for (int i = 0; i < xianxu.length; i++) {
			index.put(zhongxu[i],i);
		}
		TreeNode root = buildTree(xianxu,0,xianxu.length - 1,zhongxu,0,zhongxu.length - 1);
		ArrayList<Integer> temp = rightSideView(root);
		int[] res = new int[temp.size()];
		for (int i = 0; i < temp.size(); i++) {
			res[i] = temp.get(i);
		}
		return res;
	}
}