class Solution {
	int maxDepthDownToVal = 0;
	int maxDepthFromStack = 0;
	List<TreeNode> stack = new ArrayList<>();
	boolean valFound = false;
	int amountOfTime(TreeNode root, int start) {
		findVal(root,start,0,false);
		getMaxFromStack();
		return Math.max(maxDepthDownToVal,maxDepthFromStack);
	}
	void findVal(TreeNode root, int start, int steps, boolean countSteps) {
		if (!valFound) {
			stack.add(root);
		}
		if (root.val == start) {
			valFound = true;
			countSteps = true;
			steps = 0;
		}
		if (root.left != null) {
			findVal(root.left,start,steps + 1,countSteps);
		}
		if (root.right != null) {
			findVal(root.right,start,steps + 1,countSteps);
		}
		if (valFound && root.left == null && root.right == null && countSteps) {
			maxDepthDownToVal = Math.max(maxDepthDownToVal,steps);
		}
		if (!valFound) {
			stack.remove(stack.size() - 1);
		}
	}
	void getMaxDepth(TreeNode root, int depth) {
		if (root == null) {
			maxDepthFromStack = Math.max(maxDepthFromStack,depth - 1);
			return;
		}
		if (root.left != null) {
			getMaxDepth(root.left,depth + 1);
		}
		if (root.right != null) {
			getMaxDepth(root.right,depth + 1);
		}
		if (root.left == null && root.right == null) {
			maxDepthFromStack = Math.max(maxDepthFromStack,depth);
		}
	}
	void getMaxFromStack() {
		for (int i = stack.size() - 2; i >= 0; i--) {
			if (stack.get(i).left != stack.get(i + 1)) {
				getMaxDepth(stack.get(i).left,stack.size() - i);
			}
			if (stack.get(i).right != stack.get(i + 1)) {
				getMaxDepth(stack.get(i).right,stack.size() - i);
			}
		}
	}
}