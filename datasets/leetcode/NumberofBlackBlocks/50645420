class Solution {
	long[] countBlackBlocks(int m, int n, int[][] crds) {
		long[] res = new long[5];
		Map<Long, Integer> map = new HashMap<>();
		for (int[] crd: crds) {	
			long key0 = crd[0] * 100000l + crd[1];
			long key1 = (crd[0] - 1) * 100000l + crd[1];
			long key2 = crd[0] * 100000l + crd[1] - 1;
			long key3 = (crd[0] - 1) * 100000l + crd[1] - 1;
			if (crd[0] < m - 1 && crd[1] < n - 1) {
				map.merge(key0,1,);
			}
			if (crd[0] > 0 && crd[1] < n - 1) {
				map.merge(key1,1,);
			}
			if (crd[0] < m - 1 && crd[1] > 0) {
				map.merge(key2,1,);
			}
			if (crd[0] > 0 && crd[1] > 0) {
				map.merge(key3,1,);
			}
		}
		for (int val: map.values()) {	
			res[val]++;
		}
		res[0] = (long) (m - 1) * (n - 1) - res[1] - res[2] - res[3] - res[4];
		return res;
	}
}