class Solution {
	int maxEnd = -1;
	int maxLen = 0;
	int maxStart = -1;
	String longestPalindrome(String s) {
		int n = s.length();
		Boolean[][] dp = new Boolean[n + 1][n + 1];
		solveRec(0,s.length() - 1,s,dp);
		return s.substring(maxStart,maxEnd + 1);
	}
	boolean solveRec(int start, int end, String s, Boolean[][] dp) {
		if (start > end) {
			return true;
		}
		if (dp[start][end] != null) {
			return dp[start][end];
		}
		boolean match = false;
		if (s.charAt(start) == s.charAt(end)) {
			match = true;
		}
		boolean finalMatch = match & solveRec(start + 1,end - 1,s,dp);
		if (!finalMatch) {
			solveRec(start + 1,end,s,dp);
			solveRec(start,end - 1,s,dp);
		}
		if (finalMatch && (end - start + 1 > maxLen)) {
			maxStart = start;
			maxEnd = end;
			maxLen = end - start + 1;
		}
		return dp[start][end] = finalMatch;
	}
}