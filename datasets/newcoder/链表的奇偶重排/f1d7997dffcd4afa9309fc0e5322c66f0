class Solution {
	ListNode oddEvenList(ListNode head) {
		ListNode oddHead = new ListNode(-1);
		ListNode oddTempHead = oddHead;
		ListNode evenHead = new ListNode(-1);
		ListNode evenTempHead = evenHead;
		int counter = 1;
		while (head != null) {
			if (counter % 2 != 0) {
				oddTempHead.next = new ListNode(head.val);
				oddTempHead = oddTempHead.next;
			} 
			else {
				evenTempHead.next = new ListNode(head.val);
				evenTempHead = evenTempHead.next;
			}
			head = head.next;
			counter++;
		}
		oddTempHead.next = evenHead.next;
		return oddHead.next;
	}
}