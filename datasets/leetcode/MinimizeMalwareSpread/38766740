class Solution {
	int[] par;
	int[] size;
	int findPar(int u) {
		return u == par[u] ? u : (par[u] = findPar(par[u]));
	}
	int minMalwareSpread(int[][] graph, int[] initial) {
		int n = graph.length;
		par = new int[n];
		size = new int[n];
		for (int i = 0; i < n; i++) {
			par[i] = i;
			size[i] = 1;
		}
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < n; j++) {
				if (graph[i][j] == 1) {
					int u = findPar(i), v = findPar(j);
					if (u != v) {
						union(u,v);
					}
				}
			}
		}
		int[] infectedNodesInGroup = new int[n];
		for (int node: initial) {	
			int parent = findPar(node);
			infectedNodesInGroup[parent]++;
		}
		Arrays.sort(initial);
		int maxSpreadNode = initial[0], maxSpreadSize = 0;
		for (int node: initial) {	
			int parent = findPar(node);
			if (infectedNodesInGroup[parent] == 1 && size[parent] > maxSpreadSize) {
				maxSpreadNode = node;
				maxSpreadSize = size[parent];
			}
		}
		return maxSpreadNode;
	}
	void union(int u, int v) {
		if (size[u] >= size[v]) {
			par[v] = u;
			size[u] += size[v];
		} 
		else {
			par[u] = v;
			size[v] += size[u];
		}
	}
}