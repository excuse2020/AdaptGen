class Solution {
	List<List<Integer>> getAncestors(int n, int[][] edges) {
		Map<Integer, Set<Integer>> children = new HashMap<>();
		for (int[] edge: edges) {	
			int from = edge[0];
			int to = edge[1];
			Set<Integer> chSet = children.get(from);
			if (chSet == null) {
				chSet = new HashSet<>();
				children.put(from,chSet);
			}
			chSet.add(to);
		}
		List<Set<Integer>> res = new ArrayList<>();
		for (int i = 0; i < n; i++) {
			res.add(new HashSet<>());
		}
		Queue<Integer> queue = new LinkedList<>();
		for (int i = 0; i < n; i++) {
			if (!children.containsKey(i)) {
				continue;
			}
			Set<Integer> seen = new HashSet<>();
			for (Integer child: children.get(i)) {	
				queue.add(child);
				seen.add(child);
			}
			while (!queue.isEmpty()) {
				int nextChild = queue.poll();
				res.get(nextChild).add(i);
				if (!children.containsKey(nextChild)) {
					continue;
				}
				for (Integer child: children.get(nextChild)) {	
					if (!seen.contains(child)) {
						queue.add(child);
						seen.add(child);
					}
				}
			}
		}
		List<List<Integer>> result = new ArrayList<>();
		for (int i = 0; i < n; i++) {
			List<Integer> list = new ArrayList(res.get(i));
			Collections.sort(list);
			result.add(list);
		}
		return result;
	}
}