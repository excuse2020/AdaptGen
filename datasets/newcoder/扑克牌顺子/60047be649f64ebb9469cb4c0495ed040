class Solution {
	boolean IsContinuous(int[] numbers) {
		return method2(numbers);
	}
	boolean method1(int[] numbers) {
		if (numbers.length == 0) {
			return false;
		}
		int[] cards = new int[14];
		int max = -1;
		int min = 14;
		boolean flg = false;
		for (int i = 0; i < numbers.length; i++) {
			cards[numbers[i]] += 1;
			if (numbers[i] == 0) {
				continue;
			}
			if (cards[numbers[i]] > 1) {
				flg = true;
				break;
			}
			if (numbers[i] > max) {
				max = numbers[i];
			}
			if (numbers[i] < min) {
				min = numbers[i];
			}
		}
		if (max - min < 5 && !flg) {
			return true;
		}
		return false;
	}
	boolean method2(int[] numbers) {
		if (numbers.length == 0) {
			return false;
		}
		Arrays.sort(numbers);
		int minusSum = 0;
		for (int i = 0; i < numbers.length - 1; i++) {
			if (numbers[i] == 0) {
				continue;
			} 
			else if (numbers[i] == numbers[i + 1]) {
				return false;
			} 
			else {
				minusSum += numbers[i + 1] - numbers[i];
			}
		}
		if (minusSum <= 4) {
			return true;
		}
		return false;
	}
}