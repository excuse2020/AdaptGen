class Solution {
	int[] findOriginalArray(int[] changed) {
		if (changed.length == 1 || changed.length % 2 != 0) {
			return new int[0];
		}
		HashMap<Integer, Integer> map = new HashMap<>();
		Arrays.sort(changed);
		int max = 0;
		for (int i = 0; i < changed.length; i++) {
			map.put(changed[i],map.getOrDefault(changed[i],0) + 1);
			max = Math.max(max,changed[i]);
		}
		int[] res = new int[changed.length / 2];
		int in = 0;
		for (int i = 0; i < changed.length; i++) {
			if (changed[i] <= max / 2 && map.containsKey(changed[i]) && map.get(changed[i]) > 0) {
				if (in >= changed.length / 2) {
					return res;
				}
				res[in++] = changed[i];
				if (changed[i] == 0 && map.get(0) <= 1) {
					return new int[0];
				}
				if (!map.containsKey(changed[i] * 2) || map.get(changed[i] * 2) <= 0) {
					return new int[0];
				}
				map.put(changed[i] * 2,map.get(changed[i] * 2) - 1);
				map.put(changed[i],map.get(changed[i]) - 1);
			}
		}
		if (in == res.length) {
			return res;
		}
		return new int[0];
	}
}