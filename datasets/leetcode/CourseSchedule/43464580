class Solution {
	int e;
	ArrayList<Integer> graph;
	int v;
	void addEdge(int a, int b) {
		graph[b].add(a);
	}
	boolean canFinish(int num, int[][] pre) {
		v = num;
		e = pre.length;
		graph = new ArrayList[v];
		for (int i = 0; i < v; i++) {
			graph[i] = new ArrayList<>();
		}
		for (int i = 0; i < pre.length; i++) {
			addEdge(pre[i][0],pre[i][1]);
		}
		int indegree = new int[v];
		for (int i = 0; i < pre.length; i++) {
			indegree[pre[i][0]]++;
		}
		Queue<Integer> q = new LinkedList<>();
		for (int i = 0; i < indegree.length; i++) {
			if (indegree[i] == 0) {
				q.add(i);
			}
		}
		while (q.size() != 0) {
			int a = q.remove();
			for (var x: graph[a]) {	
				indegree[x]--;
				if (indegree[x] == 0) {
					q.add(x);
				}
			}
		}
		for (int i = 0; i < indegree.length; i++) {
			if (indegree[i] != 0) {
				return false;
			}
		}
		return true;
	}
}