class Solution {
	void dfs(int[][] grid, boolean[] visited, int i) {
		if (visited[i]) {
			return;
		}
		visited[i] = true;
		for (int j = 0; j < grid[0].length; j++) {
			if (grid[i][j] == 1) {
				dfs(grid,visited,j);
			}
		}
	}
	int findCircleNum(int[][] isConnected) {
		if (isConnected.length == 0) {
			return 0;
		}
		int n = isConnected.length;
		int m = isConnected[0].length;
		int ans = 0;
		boolean[] visited = new boolean[n];
		for (int i = 0; i < n; i++) {
			if (!visited[i]) {
				ans++;
				dfs(isConnected,visited,i);
			}
		}
		return ans;
	}
}