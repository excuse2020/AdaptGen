class Solution {
	int start, end, maxLength;
	void expandSearch(String inputStr, int startPosition, int endPosition) {
		while (startPosition >= 0 && endPosition < inputStr.length() && inputStr.charAt(startPosition) == inputStr.charAt(endPosition)) {
			startPosition--;
			endPosition++;
		}
		int substringLength = endPosition - startPosition;
		if (substringLength > maxLength) {
			this.start = startPosition + 1;
			end = endPosition;
			this.maxLength = substringLength;
		}
	}
	String longestPalindrome(String inputStr) {
		if (inputStr.length() < 2) {
			return inputStr;
		}
		for (int index = 0; index < inputStr.length() - 1; index++) {
			expandSearch(inputStr,index,index);
			expandSearch(inputStr,index,index + 1);
		}
		return inputStr.substring(start,end);
	}
	String longestPalindrome1(String str) {
		boolean[][] dp = new boolean[str.length()][str.length()];
		int start = 0, end = 0;
		for (int gap = 0; gap < str.length(); gap++) {
			for (int i = 0, j = gap; j < dp[0].length; i++, j++) {
				if (gap == 0) {
					dp[i][j] = true;
					continue;
				}
				if (gap == 1 && str.charAt(i) == str.charAt(j)) {
					dp[i][j] = true;
				} 
				else if (str.charAt(i) == str.charAt(j) && dp[i + 1][j - 1] == true) {
					dp[i][j] = true;
				}
				if (dp[i][j]) {
					start = i;
					end = j;
				}
			}
		}
		return str.substring(start,end + 1);
	}
}