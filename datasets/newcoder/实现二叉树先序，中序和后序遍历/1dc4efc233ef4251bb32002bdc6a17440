class Solution {
	int l = -1;
	int m = -1;
	int n;
	int[][] order;
	int p = -1;
	int count(TreeNode root) {
		if (root == null) {
			return n;
		}
		n++;
		count(root.left);
		count(root.right);
		return n;
	}
	void lastOrder(TreeNode root) {
		if (root == null) {
			return;
		} 
		else {
			lastOrder(root.left);
			lastOrder(root.right);
			order[2][++l] = root.val;
		}
	}
	void midOrder(TreeNode root) {
		if (root == null) {
			return;
		} 
		else {
			midOrder(root.left);
			order[1][++m] = root.val;
			midOrder(root.right);
		}
	}
	void preOrder(TreeNode root) {
		if (root == null) {
			return;
		} 
		else {
			order[0][++p] = root.val;
			preOrder(root.left);
			preOrder(root.right);
		}
	}
	int[][] threeOrders(TreeNode root) {
		n = count(root);
		order = new int[3][n];
		preOrder(root);
		midOrder(root);
		lastOrder(root);
		return order;
	}
}