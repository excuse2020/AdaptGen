class Solution {
	List<String> ambiguousCoordinates(String s) {
		char[] sc = s.toCharArray();
		List<String> result = new ArrayList();
		StringBuilder sb = new StringBuilder();
		for (int commaPos = 2; commaPos < sc.length - 1; commaPos++) {
			if (isValidNum(sc,1,commaPos - 1)) {
				if (isValidNum(sc,commaPos,sc.length - 2)) {
					buildNums(result,sb,sc,1,commaPos - 1,0,commaPos,sc.length - 2,0);
				}
				for (int dp2Idx = commaPos + 1; dp2Idx < sc.length - 1; dp2Idx++) {
					if (isValidDPNum(sc,commaPos,sc.length - 2,dp2Idx)) {
						buildNums(result,sb,sc,1,commaPos - 1,0,commaPos,sc.length - 2,dp2Idx);
					}
				}
			}
			for (int dp1Idx = 2; dp1Idx < commaPos; dp1Idx++) {
				if (isValidDPNum(sc,1,commaPos - 1,dp1Idx)) {
					if (isValidNum(sc,commaPos,sc.length - 2)) {
						buildNums(result,sb,sc,1,commaPos - 1,dp1Idx,commaPos,sc.length - 2,0);
					}
					for (int dp2Idx = commaPos + 1; dp2Idx < sc.length - 1; dp2Idx++) {
						if (isValidDPNum(sc,commaPos,sc.length - 2,dp2Idx)) {
							buildNums(result,sb,sc,1,commaPos - 1,dp1Idx,commaPos,sc.length - 2,dp2Idx);
						}
					}
				}
			}
		}
		return result;
	}
	void buildNums(List<String> result, StringBuilder sb, char[] sc, int start1Idx, int last1Idx, int dp1Idx, int start2Idx, int last2Idx, int dp2Idx) {
		sb.setLength(0);
	}
	boolean isValidDPNum(char[] sc, int startIdx, int lastIdx, int dpIdx) {
	}
	boolean isValidNum(char[] sc, int startIdx, int lastIdx) {
	}
}