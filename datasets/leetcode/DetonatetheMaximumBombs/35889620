class Solution {
	List<List<Integer>> adj;
	boolean vis;
	long dfs(int node) {
		if (vis[node]) {
			return 0;
		}
		long ans = 1;
		vis[node] = true;
		for (var c: adj.get(node)) {	
			ans += dfs(c);
		}
		return ans;
	}
	int maximumDetonation(int[][] bombs) {
		adj = new ArrayList<>();
		for (int i = 0; i < bombs.length; i++) {
			adj.add(new ArrayList<>());
		}
		for (int i = 0; i < bombs.length; i++) {
			for (int j = 0; j < bombs.length; j++) {
				if (i == j) {
					continue;
				}
				long x1 = bombs[i][0];
				long y1 = bombs[i][1];
				long r1 = bombs[i][2];
				long x2 = bombs[j][0];
				long y2 = bombs[j][1];
				if (r1 * r1 >= (x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2)) {
					adj.get(i).add(j);
				}
			}
		}
		long ans = 0;
		for (int i = 0; i < bombs.length; i++) {
			vis = new boolean[bombs.length];
			ans = Math.max(ans,dfs(i));
		}
		return (int) ans;
	}
}