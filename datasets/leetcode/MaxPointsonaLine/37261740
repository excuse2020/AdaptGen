class Solution {
	int maxPoints(int[][] points) {
		if (points.length <= 1) {
			return points.length;
		}
		Map<Double, List<Set<String>>> slopes = new HashMap<>();
		for (int i = 0; i < points.length - 1; i++) {
			for (int j = i + 1; j < points.length; j++) {
				Double slope = (double) (points[i][1] - points[j][1]) / (double) (points[i][0] - points[j][0]);
				if (!slopes.containsKey(slope)) {
					slopes.put(slope,new ArrayList<>());
				}
				String pt1 = ptToStr(points[i]);
				String pt2 = ptToStr(points[j]);
				boolean added = false;
				for (Set<String> set: slopes.get(slope)) {	
					if (set.contains(pt1) || set.contains(pt2)) {
						set.add(pt1);
						set.add(pt2);
						added = true;
					}
				}
				if (!added) {
					Set<String> set = new HashSet<>();
					set.add(pt1);
					set.add(pt2);
					slopes.get(slope).add(set);
				}
			}
		}
		int max = 0;
		for (Double key: slopes.keySet()) {	
			for (Set<String> set: slopes.get(key)) {	
				max = Math.max(max,set.size());
			}
		}
		return max;
	}
	String ptToStr(int[] pt) {
		return pt[0] + "_";
	}
}