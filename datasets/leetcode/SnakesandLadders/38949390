class Solution {
	int colTransform(int num, int n) {
		int col = (num - 1) % (2 * n);
		if (col >= n) {
			col = 2 * n - col - 1;
		}
		return col;
	}
	int rowTransform(int num, int n) {
		return n - (num - 1) / n - 1;
	}
	int snakesAndLadders(int[][] board) {
		Queue<Integer> q = new LinkedList<>();
		int n = board.length;
		boolean[][] visited = new boolean[n][n];
		q.add(1);
		visited[n - 1][0] = true;
		int dist = 0;
		while (!q.isEmpty()) {
			int size = q.size();
			for (int i = 0; i < size; i++) {
				int curPos = q.remove();
				if (curPos == n * n) {
					return dist;
				}
				for (int j = curPos + 1; j <= Math.min(curPos + 6,n * n); j++) {
					int row = rowTransform(j,n);
					int col = colTransform(j,n);
					if (!visited[row][col]) {
						visited[row][col] = true;
						if (board[row][col] != -1) {
							q.add(board[row][col]);
						} 
						else {
							q.add(j);
						}
					}
				}
			}
			dist++;
		}
		return -1;
	}
}