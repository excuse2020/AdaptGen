class Solution {
	boolean IsBalanced_Solution(TreeNode pRoot) {
		if (pRoot == null) {
			return true;
		}
		if (Math.abs(getTreeHigh(pRoot.left) - getTreeHigh(pRoot.right)) > 1) {
			return false;
		}
		return IsBalanced_Solution(pRoot.left) && IsBalanced_Solution(pRoot.right);
	}
	int getTreeHigh(TreeNode root) {
		int level = 0;
		if (root == null) {
			return level;
		}
		Deque<TreeNode> deque = new LinkedList<TreeNode>();
		deque.push(root);
		while (!deque.isEmpty()) {
			int count = deque.size();
			for (int i = 0; i < count; i++) {
				TreeNode node = deque.poll();
				if (node.left != null) {
					deque.offer(node.left);
				}
				if (node.right != null) {
					deque.offer(node.right);
				}
			}
			level++;
		}
		return level;
	}
}