class Solution {
	List<List<Integer>> list = new ArrayList<>();
	void dsfPathSum(TreeNode root, int t, int sum, List<Integer> path) {
		if (root == null) {
			return;
		}
		path.add(root.val);
		sum += root.val;
		if (root.left == null && root.right == null) {
			if (sum == t) {
				list.add(new ArrayList<>(path));
			}
			path.remove((path.size() - 1));
			return;
		}
		dsfPathSum(root.left,t,sum,path);
		dsfPathSum(root.right,t,sum,path);
		path.remove((path.size() - 1));
	}
	List<List<Integer>> pathSum(TreeNode root, int targetSum) {
		List<Integer> path = new ArrayList<>();
		dsfPathSum(root,targetSum,0,path);
		return list;
	}
}