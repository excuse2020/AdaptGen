class Solution {
	ListNode Merge(ListNode list1, ListNode list2) {
		if (list1 == null) {
			return list2;
		}
		if (list2 == null) {
			return list1;
		}
		ListNode head = null;
		if (list1.val <= list2.val) {
			head = list1;
			list1 = list1.next;
		} 
		else {
			head = list2;
			list2 = list2.next;
		}
		ListNode head0 = head;
		while (list1 != null && list2 != null) {
			if (list1.val <= list2.val) {
				head0.next = list1;
				head0 = head0.next;
				list1 = list1.next;
			} 
			else {
				head0.next = list2;
				head0 = head0.next;
				list2 = list2.next;
			}
		}
		if (list1 != null) {
			head0.next = list1;
		}
		if (list2 != null) {
			head0.next = list2;
		}
		return head;
	}
	ListNode mergeKLists(ArrayList<ListNode> lists) {
		int size = lists.size();
		if (size == 0) {
			return null;
		}
		if (size == 1) {
			return lists.get(0);
		}
		ListNode head = lists.get(0);
		for (int i = 0; i < size - 1; i++) {
			head = Merge(head,lists.get(i + 1));
		}
		return head;
	}
}