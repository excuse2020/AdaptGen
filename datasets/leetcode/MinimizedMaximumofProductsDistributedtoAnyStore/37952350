class Solution {
	int findMaxProduct(int[] products, int n) {
		int min = 1;
		int max = 1;
		for (int q: products) {	
			max = Math.max(max,q);
		}
		int ans = -1;
		while (min <= max) {
			int mid = min + (max - min) / 2;
			int storesNeeded = findStoresNeeded(products,mid);
			if (storesNeeded <= n) {
				ans = mid;
				max = mid - 1;
			} 
			else {
				min = mid + 1;
			}
		}
		return ans;
	}
	int findStoresNeeded(int[] products, int maxProductsPerStore) {
		int count = 0;
		for (int quantity: products) {	
			count += (quantity + maxProductsPerStore - 1) / maxProductsPerStore;
		}
		return count;
	}
	int minimizedMaximum(int n, int[] quantities) {
		return findMaxProduct(quantities,n);
	}
}