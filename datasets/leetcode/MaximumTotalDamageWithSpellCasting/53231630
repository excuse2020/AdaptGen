class Solution {
	long getPreviousAnswer(List<Pair<Integer, Long>> totalPower, int index, long[] dp) {
		for (int i = index - 1; i >= 0; i--) {
			if (Math.abs(totalPower.get(i).getKey() - totalPower.get(index).getKey()) > 2) {
				return dp[i];
			}
		}
		return 0;
	}
	long maximumTotalDamage(int[] power) {
		List<Pair<Integer, Long>> totalPower = new ArrayList<>();
		Map<Integer, Long> freq = new HashMap<>();
		for (int i: power) {	
			freq.merge(i,(long) i,);
		}
		for (int key: freq.keySet()) {	
			totalPower.add(new Pair<>(key, freq.get(key)));
		}
		Collections.sort(totalPower,Comparator.comparingInt());
		int n = totalPower.size();
		long[] dp = new long[n];
		for (int i = 0; i < n; i++) {
			long include = totalPower.get(i).getValue();
			if (i > 0) {
				include += getPreviousAnswer(totalPower,i,dp);
			}
			long exclude = (i > 0) ? dp[i - 1] : 0;
			dp[i] = Math.max(include,exclude);
		}
		return dp[n - 1];
	}
}