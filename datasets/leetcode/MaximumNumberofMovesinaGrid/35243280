class Solution {
	int[][] dp;
	int dfs(int i, int j, int prev, int[][] grid, int m, int n) {
		if (i < 0 || i >= m || j >= n || grid[i][j] <= prev) {
			return -1;
		}
		if (dp[i][j] != -1) {
			return dp[i][j];
		}
		int height = grid[i][j];
		int topRight = dfs(i - 1,j + 1,height,grid,m,n);
		int right = dfs(i,j + 1,height,grid,m,n);
		int bottomRight = dfs(i + 1,j + 1,height,grid,m,n);
		return dp[i][j] = 1 + Math.max(topRight,Math.max(right,bottomRight));
	}
	int maxMoves(int[][] grid) {
		int m = grid.length, n = grid[0].length;
		dp = new int[m][n];
		for (int[] row: dp) {	
			Arrays.fill(row,-1);
		}
		int maxi = 0;
		for (int i = 0; i < m; i++) {
			maxi = Math.max(maxi,dfs(i,0,-1,grid,m,n));
		}
		return maxi;
	}
}