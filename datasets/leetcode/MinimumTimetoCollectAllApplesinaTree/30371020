class Solution {
	int c = 0;
	int check(int i, List<Integer>[] l, List<Boolean> hasApple, int[] v) {
		int k = 0;
		if (v[i] == 1) {
			return 0;
		}
		v[i] = 1;
		if (l[i].size() == 0 && hasApple.get(i)) {
			c += 2;
			return 1;
		}
		for (int j = 0; j < l[i].size(); j++) {
			k = Math.max(k,check(l[i].get(j),l,hasApple,v));
		}
		if ((hasApple.get(i) || k == 1) && i != 0) {
			c += 2;
			return 1;
		}
		return 0;
	}
	int minTime(int n, int[][] edges, List<Boolean> hasApple) {
		List<Integer> l = new ArrayList[n];
		for (int i = 0; i < n; i++) {
			l[i] = new ArrayList();
		}
		for (int[] edge: edges) {	
			l[edge[0]].add(edge[1]);
			l[edge[1]].add(edge[0]);
		}
		int v = new int[n];
		check(0,l,hasApple,v);
		return c;
	}
}