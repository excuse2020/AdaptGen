class Solution {
	Boolean DFS(HashMap<Integer, ArrayList<Integer>> graph, Integer curr, Set<Integer> visited) {
		if (visited.contains(curr)) {
			return false;
		}
		if (graph.get(curr).isEmpty()) {
			return true;
		}
		visited.add(curr);
		for (var neighbor: graph.get(curr)) {	
			if (!DFS(graph,neighbor,visited)) {
				return false;
			}
		}
		visited.remove(curr);
		graph.put(curr,new ArrayList<>());
		return true;
	}
	boolean canFinish(int numCourses, int[][] prerequisites) {
		var graph = new HashMap<Integer, ArrayList<Integer>>();
		for (int[] prerequisite: prerequisites) {	
			var from = prerequisite[0];
			var to = prerequisite[1];
			if (!graph.containsKey(from)) {
				graph.put(from,new ArrayList<>());
			}
			if (!graph.containsKey(to)) {
				graph.put(to,new ArrayList<>());
			}
			graph.get(from).add(to);
		}
		for (Map.Entry<Integer, ArrayList<Integer>> entry: graph.entrySet()) {	
			var node = entry.getKey();
			var visited = new HashSet<Integer>();
			if (!DFS(graph,node,visited)) {
				return false;
			}
		}
		return true;
	}
}