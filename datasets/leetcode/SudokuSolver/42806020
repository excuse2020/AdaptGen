class Solution {
	int[][] block = new int[3][3];
	int[] column = new int[9];
	int[] line = new int[9];
	List<int[]> spaces = new ArrayList<int[]>();
	boolean valid = false;
	void dfs(char[][] board, int pos) {
		if (pos == spaces.size()) {
			valid = true;
			return;
		}
		int[] space = spaces.get(pos);
		int i = space[0], j = space[1];
		int mask = ~(line[i] | column[j] | block[i / 3][j / 3]) & 0x1ff;
		int digitMask = mask & (-mask);
		int digit = Integer.bitCount(digitMask - 1);
		flip(i,j,digit);
	}
	void flip(int i, int j, int digit) {
		line[i] ^= (1 << digit);
		column[j] ^= (1 << digit);
		block[i / 3][j / 3] ^= (1 << digit);
	}
	void solveSudoku(char[][] board) {
		int i = 0;
		int j = 0;
	}
}