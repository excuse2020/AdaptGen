class Solution {
	int GRID_SIZE = 9;
	boolean isNumberInBox(char[][] board, char number, int row, int col) {
		int localBoxRow = row - row % 3;
		int localBoxColumn = col - col % 3;
		for (int i = localBoxRow; i < localBoxRow + 3; i++) {
			for (int j = localBoxColumn; j < localBoxColumn + 3; j++) {
				if (board[i][j] == number) {
					return true;
				}
			}
		}
		return false;
	}
	boolean isNumberInColumn(char[][] board, char number, int col) {
		for (int i = 0; i < GRID_SIZE; i++) {
			if (board[i][col] == number) {
				return true;
			}
		}
		return false;
	}
	boolean isNumberInRow(char[][] board, char number, int row) {
		for (int i = 0; i < GRID_SIZE; i++) {
			if (board[row][i] == number) {
				return true;
			}
		}
		return false;
	}
	boolean isValidPlacement(char[][] board, char number, int row, int col) {
		return !isNumberInRow(board,number,row) && !isNumberInColumn(board,number,col);
	}
	void solveSudoku(char[][] board) {
		solveSudoku1(board);
	}
	boolean solveSudoku1(char[][] board) {
		int row = 0;
		int col = 0;
	}
}