class Solution {
	long maxStrength(int[] nums) {
		int n = nums.length;
		if (n == 1) {
			return nums[0];
		}
		long[][] dp = new long[n + 1][2];
		dp[0][0] = 0l;
		dp[0][1] = 0l;
		for (int i = 0; i < nums.length; ++i) {
			dp[i + 1][1] = Math.max(dp[i][0] * (long) nums[i],Math.max(dp[i][1] * (long) nums[i],Math.max(dp[i][1],(long) nums[i])));
			dp[i + 1][0] = Math.min(dp[i][0] * (long) nums[i],Math.min(dp[i][1] * (long) nums[i],Math.min(dp[i][0],(long) nums[i])));
		}
		return dp[n][1];
	}
	long maxStrength(int[] nums) {
		int n = nums.length;
		if (n == 1) {
			return nums[0];
		}
		long prevMin = 0l;
		long prevMax = 0l;
		for (int i = 0; i < nums.length; ++i) {
			long currMax = Math.max(prevMin * (long) nums[i],Math.max(prevMax * (long) nums[i],Math.max(prevMax,(long) nums[i])));
			long currMin = Math.min(prevMin * (long) nums[i],Math.min(prevMax * (long) nums[i],Math.min(prevMin,(long) nums[i])));
			prevMin = currMin;
			prevMax = currMax;
		}
		return prevMax;
	}
}