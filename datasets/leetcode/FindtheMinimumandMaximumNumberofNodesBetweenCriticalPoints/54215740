class Solution {
	int[] nodesBetweenCriticalPoints(ListNode head) {
		int ans = new int[2];
		ans[0] = -1;
		ans[1] = -1;
		ArrayList<Integer> list = new ArrayList<>();
		ListNode current = head.next;
		ListNode prev = head;
		ListNode front = head.next.next;
		int index = 1;
		while (front != null) {
			if (current.val > prev.val && current.val > front.val || current.val < prev.val && current.val < front.val) {
				list.add(index);
			}
			index++;
			prev = current;
			current = front;
			front = front.next;
		}
		if (list.size() > 1) {
			int arr = new int[list.size()];
			int k = 0;
			for (Integer el: list) {	
				arr[k] = el;
				k++;
			}
			int min = Integer.MAX_VALUE;
			for (int i = 0; i < arr.length - 1; i++) {
				if (arr[i + 1] - arr[i] < min) {
					min = arr[i + 1] - arr[i];
				}
			}
			ans[0] = min;
			ans[1] = arr[arr.length - 1] - arr[0];
		}
		return ans;
	}
}