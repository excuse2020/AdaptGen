class Solution {
	int count = 0;
	Queue<Integer> max_heap = new PriorityQueue<>(Collections.reverseOrder());
	Queue<Integer> min_heap = new PriorityQueue<>();
	Double GetMedian() {
		double result;
		if (count % 2 == 0) {
			result = (min_heap.peek() + max_heap.peek()) / 2.0;
		} 
		else {
			result = max_heap.peek();
		}
		return result;
	}
	void Insert(Integer num) {
		count++;
		if (!min_heap.isEmpty() && num > min_heap.peek()) {
			max_heap.add(min_heap.poll());
			min_heap.add(num);
		} 
		else {
			max_heap.add(num);
		}
		if (max_heap.size() - min_heap.size() > 1) {
			min_heap.add(max_heap.poll());
		}
	}
}