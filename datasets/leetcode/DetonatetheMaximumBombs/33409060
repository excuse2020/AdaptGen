class Solution {
	int bfs(ArrayList<ArrayList<Integer>> adj, int src, boolean[] visited) {
		int count = 0;
		Queue<Integer> q = new ArrayDeque<>();
		q.add(src);
		while (q.size() > 0) {
			int v = q.poll();
			if (visited[v]) {
				continue;
			}
			count++;
			visited[v] = true;
			for (int t: adj.get(v)) {	
				if (!visited[t]) {
					q.add(t);
				}
			}
		}
		return count;
	}
	int maximumDetonation(int[][] bombs) {
		int ans = 0;
		ArrayList<ArrayList<Integer>> adj = new ArrayList<>();
		for (int i = 0; i < bombs.length; i++) {
			adj.add(new ArrayList<>());
		}
		for (int i = 0; i < bombs.length; i++) {
			for (int j = 0; j < bombs.length; j++) {
				if (i == j) {
					continue;
				}
				long X = Math.abs(bombs[i][0] - bombs[j][0]);
				long Y = Math.abs(bombs[i][1] - bombs[j][1]);
				long check = bombs[i][2];
				if (X * X + Y * Y <= check * check) {
					adj.get(i).add(j);
				}
			}
		}
		for (int i = 0; i < bombs.length; i++) {
			boolean[] visited = new boolean[bombs.length];
			ans = Math.max(ans,bfs(adj,i,visited));
		}
		return ans;
	}
}