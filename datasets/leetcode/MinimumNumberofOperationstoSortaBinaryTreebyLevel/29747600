class Solution {
	int calculateMin(List<TreeNode> list) {
		List<TreeNode> sortedList = list.stream().sorted((o1, o2) -> {Integer.compare(o1.val,o2.val)}).collect(Collectors.toList());
		Map<Integer, Integer> map = new HashMap<>();
		for (int i = 0; i < sortedList.size(); i++) {
			map.put(sortedList.get(i).val,i);
		}
		int res = 0;
		int i = 0;
		while (i < list.size()) {
			int correctIndex = map.get(list.get(i).val);
			if (correctIndex != i) {
				TreeNode tmp = list.get(correctIndex);
				list.set(correctIndex,list.get(i));
				list.set(i,tmp);
				res++;
			} 
			else {
				i++;
			}
		}
		return res;
	}
	int minimumOperations(TreeNode root) {
		Queue<TreeNode> q = new LinkedList<TreeNode>();
		q.offer(root);
		int total = 0;
		while (!q.isEmpty()) {
			int size = q.size();
			List<TreeNode> line = new ArrayList<>();
			for (int i = 0; i < size; i++) {
				TreeNode t = q.poll();
				line.add(t);
				if (t.left != null) {
					q.offer(t.left);
				}
				if (t.right != null) {
					q.offer(t.right);
				}
			}
			total += calculateMin(line);
		}
		return total;
	}
}