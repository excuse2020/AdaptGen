class Solution {
	ArrayList<String> ans = new ArrayList<>();
	int n;
	String s;
	void dfs(LinkedList<String> path, int i, int cnt) {
		if (i == n && cnt == 0) {
			ans.add(path.stream().collect(Collectors.joining(".")));
			return;
		}
		if (cnt == 0 || i == n) {
			return;
		}
		path.offerLast("" + s.charAt(i));
		dfs(path,i + 1,cnt - 1);
		path.removeLast();
		if (s.charAt(i) != '0' && i + 1 < n) {
			path.offer(s.substring(i,i + 2));
			dfs(path,i + 2,cnt - 1);
			path.removeLast();
		}
		if (s.charAt(i) != '0' && i + 2 < n) {
			int p = Integer.parseInt(s.substring(i,i + 3));
			if (p >= 0 && p <= 255) {
				path.offerLast(s.substring(i,i + 3));
				dfs(path,i + 3,cnt - 1);
				path.removeLast();
			}
		}
	}
	ArrayList<String> restoreIpAddresses(String s) {
		n = s.length();
		this.s = s;
		LinkedList<String> path = new LinkedList<>();
		dfs(path,0,4);
		return ans;
	}
}