class Solution {
	int maxScore(List<List<Integer>> grid) {
		int m = grid.size();
		int n = grid.get(0).size();
		int[][] min = new int[m][n];
		min[0][0] = grid.get(0).get(0);
		for (int i = 1; i < m; i++) {
			min[i][0] = Math.min(grid.get(i).get(0),min[i - 1][0]);
		}
		for (int i = 1; i < n; i++) {
			min[0][i] = Math.min(grid.get(0).get(i),min[0][i - 1]);
		}
		for (int i = 1; i < m; i++) {
			for (int j = 1; j < n; j++) {
				min[i][j] = Math.min(grid.get(i).get(j),Math.min(min[i - 1][j - 1],Math.min(min[i - 1][j],min[i][j - 1])));
			}
		}
		int ans = Integer.MIN_VALUE;
		for (int i = 1; i < m; i++) {
			ans = Math.max(ans,grid.get(i).get(0) - min[i - 1][0]);
		}
		for (int i = 1; i < n; i++) {
			ans = Math.max(ans,grid.get(0).get(i) - min[0][i - 1]);
		}
		for (int i = 1; i < m; i++) {
			for (int j = 1; j < n; j++) {
				ans = Math.max(ans,grid.get(i).get(j) - Math.min(min[i - 1][j - 1],Math.min(min[i - 1][j],min[i][j - 1])));
			}
		}
		return ans;
	}
}