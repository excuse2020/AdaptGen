class Solution {
	HashSet<Integer> hashSetDeepCopy(Set<Integer> set) {
		Integer[] arr = set.toArray(new Integer[set.size()]);
		HashSet<Integer> result = new HashSet<Integer>();
		for (int i = 0; i < arr.length; i++) {
			result.add(arr[i]);
		}
		return result;
	}
	int helper(TreeNode root, HashSet<Integer> path) {
		if (root == null) {
			return 0;
		}
		HashSet<Integer> left = hashSetDeepCopy(path);
		if (left.contains(root.val)) {
			left.remove(root.val);
			path.remove(root.val);
		} 
		else {
			path.add(root.val);
			left.add(root.val);
		}
		if (root.left == null && root.right == null) {
			if (path.size() == 1 || path.size() == 0) {
				return 1;
			}
			return 0;
		}
		return (helper(root.left,left) + helper(root.right,path));
	}
	int pseudoPalindromicPaths(TreeNode root) {
		return helper(root,new HashSet<Integer>());
	}
}