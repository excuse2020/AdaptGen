class Solution {
	int[] findOriginalArray(int[] changed) {
		if (changed.length % 2 == 1) {
			return new int[0];
		}
		Map<Integer, Integer> freq = new HashMap<>();
		for (int c: changed) {	
			freq.put(c,freq.getOrDefault(c,0) + 1);
		}
		List<Integer> keySet = freq.keySet().stream().collect(Collectors.toList());
		Collections.sort(keySet);
		List<Integer> ans = new LinkedList<>();
		for (Integer key: keySet) {	
			int count = freq.get(key);
			if (freq.get(key) == 0) {
				continue;
			}
			if (key == 0) {
				if (count % 2 == 1) {
					return new int[0];
				}
				for (int i = 0; i < count / 2; i++) {
					ans.add(key);
				}
				continue;
			}
			if (!freq.containsKey(key * 2) || freq.get(key * 2) < count) {
				return new int[0];
			}
			for (int i = 0; i < count; i++) {
				ans.add(key);
			}
			freq.put(key * 2,freq.get(key * 2) - count);
		}
		return ans.stream().mapToInt().toArray();
	}
}