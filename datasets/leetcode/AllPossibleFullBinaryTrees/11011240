class Solution {
	Map<Integer, List<TreeNode>> cache = new HashMap();
	List<TreeNode> allPossibleFBT(int n) {
		if (cache.containsKey(n)) {
			return cache.get(n);
		}
		List<TreeNode> trees = new LinkedList();
		if (n % 2 == 0) {
			return trees;
		}
		if (n == 1) {
			trees.add(new TreeNode(0));
			cache.put(n,trees);
			return trees;
		}
		for (int x = 1; x < n; x += 2) {
			int y = n - 1;
			for (TreeNode left: allPossibleFBT(x)) {	
				for (TreeNode right: allPossibleFBT(y)) {	
					TreeNode tree = new TreeNode(0);
					tree.left = left;
					tree.right = right;
					trees.add(tree);
				}
			}
		}
		cache.put(n,trees);
		List<TreeNode> clonedTrees = new LinkedList();
		for (TreeNode tree: trees) {	
			clonedTrees.add(deepCopy(tree));
		}
		return clonedTrees;
	}
	TreeNode deepCopy(TreeNode tree) {
		if (tree == null) {
			return null;
		}
		TreeNode newTree = new TreeNode(tree.val);
		newTree.left = clone(tree.left);
		newTree.right = clone(tree.right);
		return newTree;
	}
}