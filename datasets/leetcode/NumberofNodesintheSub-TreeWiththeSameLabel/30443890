class Solution {
	int[] countSubTrees(int n, int[][] edges, String labels) {
		List<Integer>[] graph = new ArrayList[n];
		boolean[] visited = new boolean[n];
		for (int i = 0; i < graph.length; i++) {
			graph[i] = new ArrayList<>();
		}
		for (int[] edge: edges) {	
			graph[edge[0]].add(edge[1]);
			graph[edge[1]].add(edge[0]);
		}
		int[] labelCount = new int[26];
		int[] ans = new int[n];
		dfs(ans,labelCount,0,labels,graph,visited);
		return ans;
	}
	void dfs(int[] ans, int[] labelCount, int node, String labels, List<Integer>[] graph, boolean[] visited) {
		visited[node] = true;
		int label;
	}
}