class Solution {
	void backtrack(int left, int right, String track, List<String> res) {
		if (right < left) {
			return;
		}
		if (left < 0 || right < 0) {
			return;
		}
		if (left == 0 && right == 0) {
			res.add(track);
			return;
		}
		backtrack(left - 1,right,track + "(",res);
		backtrack(left,right - 1,track + ")",res);
	}
	List<String> generateParenthesis(int n) {
		List<String> res = new ArrayList<>();
		if (n == 0) {
			return res;
		}
		backtrack(n,n,new String(),res);
		return res;
	}
}