class Solution {
	Integer dp;
	int cherryPickup(int[][] grid) {
		int n = grid.length;
		int m = grid[0].length;
		dp = new Integer[n + 1][m + 1][n + 1][m + 1];
		int ans = helper(0,0,0,m - 1,grid,n,m);
		return ans;
	}
	int helper(int i, int j, int k, int l, int grid, int n, int m) {
		if (i < 0 || i >= n || k < 0 || k >= n || j < 0 || j >= m || l < 0 || l >= m) {
			return 0;
		}
		if (dp[i][j][k][l] != null) {
			return dp[i][j][k][l];
		}
		int sub = 0;
		if (i == k && j == l) {
			sub = grid[i][j];
		}
		int ans1 = grid[i][j] + grid[k][l] - sub;
		int ans2 = grid[i][j] + grid[k][l] - sub;
		int ans3 = grid[i][j] + grid[k][l] - sub;
		int ans4 = grid[i][j] + grid[k][l] - sub;
		int ans5 = grid[i][j] + grid[k][l] - sub;
		int ans6 = grid[i][j] + grid[k][l] - sub;
		int ans7 = grid[i][j] + grid[k][l] - sub;
		int ans8 = grid[i][j] + grid[k][l] - sub;
		int ans9 = grid[i][j] + grid[k][l] - sub;
		int finalAns = Math.max(ans1,Math.max(ans2,Math.max(ans3,Math.max(ans4,Math.max(ans5,Math.max(ans6,Math.max(ans7,Math.max(ans8,ans9))))))));
		return dp[i][j][k][l] = finalAns;
	}
}