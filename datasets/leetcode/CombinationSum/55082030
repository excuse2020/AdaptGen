class Solution {
	List<List<Integer>> combinationSum(int[] candidates, int target) {
		List<Integer> inner = new ArrayList<>();
		List<List<Integer>> outer = new ArrayList<>();
		int length = candidates.length;
		dfs(candidates,target,inner,outer,0,length,0);
		return outer;
	}
	void dfs(int[] candidates, int target, List<Integer> inner, List<List<Integer>> outer, int s, int length, int sum) {
		if (sum == target) {
			outer.add(new ArrayList<>(inner));
		}
		if (sum > target) {
			return;
		}
		for (int i = s; i < length; i++) {
			inner.add(candidates[i]);
			sum += candidates[i];
			dfs(candidates,target,inner,outer,i,length,sum);
			inner.remove(inner.size() - 1);
			sum -= candidates[i];
		}
	}
}