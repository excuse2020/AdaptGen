class Solution {
	int ans = 1;
	int distances = new int[100005];
	void dfshelper(int src, String s, ArrayList<ArrayList<Integer>> list) {
		distances[src] = 1;
		for (int child: list.get(src)) {	
			dfshelper(child,s,list);
			if (s.charAt(child) != s.charAt(src)) {
				ans = Math.max(ans,distances[src] + distances[child]);
				distances[src] = Math.max(distances[src],distances[child] + 1);
			}
		}
	}
	int longestPath(int[] parent, String s) {
		ArrayList<ArrayList<Integer>> list = new ArrayList<>();
		for (int i = 0; i < s.length(); i++) {
			list.add(new ArrayList<>());
		}
		for (int i = 1; i < s.length(); i++) {
			list.get(parent[i]).add(i);
		}
		dfshelper(0,s,list);
		return ans;
	}
}