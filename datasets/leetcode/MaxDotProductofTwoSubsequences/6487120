class Solution {
	int helper(int[] nums1, int[] nums2, int i, int j, Integer[][] dp) {
		if (i == nums1.length || j == nums2.length) {
			return 0;
		}
		if (dp[i][j] != null) {
			return dp[i][j];
		}
		int val1 = nums1[i] * nums2[j] + helper(nums1,nums2,i + 1,j + 1,dp);
		int val2 = helper(nums1,nums2,i + 1,j + 1,dp);
		int val3 = helper(nums1,nums2,i + 1,j,dp);
		int val4 = helper(nums1,nums2,i,j + 1,dp);
		return dp[i][j] = Math.max(val1,Math.max(val2,Math.max(val3,val4)));
	}
	int maxDotProduct(int[] nums1, int[] nums2) {
		Integer[][] dp = new Integer[nums1.length][nums2.length];
		int ans = helper(nums1,nums2,0,0,dp);
		if (ans == 0) {
			int min1 = Integer.MAX_VALUE;
			int min2 = Integer.MAX_VALUE;
			for (int i = 0; i < nums1.length; i++) {
				min1 = min1 > Math.abs(nums1[i]) ? Math.abs(nums1[i]) : min1;
			}
			for (int i = 0; i < nums2.length; i++) {
				min2 = min2 > Math.abs(nums2[i]) ? Math.abs(nums2[i]) : min2;
			}
			return min1 * min2 == 0 ? 0 : -(min1 * min2);
		}
		return ans;
	}
}