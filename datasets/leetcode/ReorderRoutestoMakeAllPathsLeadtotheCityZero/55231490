class Solution {
	int changes = 0;
	void dfs(Map<Integer, List<Integer>> map, boolean[] v, int c) {
		v[c] = true;
		for (int con: map.get(c)) {	
			if (!v[Math.abs(con)]) {
				dfs(map,v,Math.abs(con));
				changes += con > 0 ? 1 : 0;
			}
		}
	}
	int minReorder(int n, int[][] connections) {
		Map<Integer, List<Integer>> map = new HashMap<>();
		boolean[] v = new boolean[n];
		for (int i = 0; i < n; i++) {
			map.put(i,new ArrayList<>());
		}
		for (int[] c: connections) {	
			map.get(c[0]).add(c[1]);
			map.get(c[1]).add(-c[0]);
		}
		dfs(map,v,0);
		return changes;
	}
}