class Solution {
	int[] par;
	int[] rank;
	int find(int x) {
		while (par[x] != x) {
			par[x] = par[par[x]];
			x = par[x];
		}
		return x;
	}
	int findCircleNum(int[][] isConnected) {
		int n = isConnected.length;
		par = new int[n];
		rank = new int[n];
		for (int i = 0; i < n; i++) {
			par[i] = i;
			rank[i] = 1;
		}
		int groups = n;
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < n; j++) {
				if (isConnected[i][j] == 1) {
					groups -= union_find(i,j);
				}
			}
		}
		return groups;
	}
	int union_find(int n1, int n2) {
		int p1 = find(n1);
		int p2 = find(n2);
		if (p1 == p2) {
			return 0;
		}
		if (rank[p1] > rank[p2]) {
			par[p2] = p1;
			rank[p1] += rank[p2];
		} 
		else {
			par[p1] = p2;
			rank[p2] += rank[p1];
		}
		return 1;
	}
}