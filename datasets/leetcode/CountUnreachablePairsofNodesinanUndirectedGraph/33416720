class Solution {
	int[] area = new int[100010];
	int num = 0;
	long countPairs(int n, int[][] edges) {
		List<List<Integer>> adj = new ArrayList<>();
		for (int i = 0; i < n; i++) {
			adj.add(new ArrayList<>());
		}
		for (int[] edge: edges) {	
			adj.get(edge[0]).add(edge[1]);
			adj.get(edge[1]).add(edge[0]);
		}
		boolean[] vis = new boolean[n];
		int index = 0;
		for (int i = 0; i < n; i++) {
			if (!vis[i]) {
				dfs(adj,vis,i);
				area[index++] = num;
				num = 0;
			}
		}
		long ans = 0;
		long pre = new long[index];
		pre[0] = area[0];
		for (int i = 1; i < index; i++) {
			pre[i] = pre[i - 1] + area[i];
		}
		for (int i = 1; i < index; i++) {
			ans += area[i] * pre[i - 1];
		}
		return ans;
	}
	void dfs(List<List<Integer>> adj, boolean[] vis, int cur) {
		vis[cur] = true;
		num++;
		for (int x: adj.get(cur)) {	
			if (vis[x]) {
				continue;
			}
			dfs(adj,vis,x);
		}
	}
}