class Solution {
	boolean check(String temp, HashMap<String, Integer> map, int len) {
		HashMap<String, Integer> map2 = new HashMap<>();
		for (int i = 0; i < temp.length(); i += len) {
			String t = temp.substring(i,i + len);
			map2.putIfAbsent(t,0);
			map2.put(t,map2.get(t) + 1);
		}
		if (map.equals(map2)) {
			return true;
		}
		return false;
	}
	List<Integer> findSubstring(String s, String[] words) {
		List<Integer> list = new ArrayList<>();
		HashMap<String, Integer> map = new HashMap<>();
		for (String a: words) {	
			map.putIfAbsent(a,0);
			map.put(a,map.get(a) + 1);
		}
		int n = words.length * words[0].length();
		for (int i = 0; i < s.length() - n + 1; i++) {
			String temp = s.substring(i,i + n);
			boolean flag = check(temp,map,words[0].length());
			if (flag) {
				list.add(i);
			}
		}
		return list;
	}
}