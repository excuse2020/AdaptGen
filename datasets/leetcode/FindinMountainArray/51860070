class Solution {
	MountainArray arr;
	int asendingBinarySearch(int low, int high, int target) {
		while (low <= high) {
			int mid = low + ((high - low) / 2);
			int val = arr.get(mid);
			if (val == target) {
				return mid;
			}
			if (val < target) {
				low = mid + 1;
			} 
			else {
				high = mid - 1;
			}
		}
		return -1;
	}
	int decendingBinarySearch(int low, int high, int target) {
		while (low <= high) {
			int mid = low + ((high - low) / 2);
			int val = arr.get(mid);
			if (val == target) {
				return mid;
			}
			if (val > target) {
				low = mid + 1;
			} 
			else {
				high = mid - 1;
			}
		}
		return -1;
	}
	int findInMountainArray(int target, MountainArray arr) {
		this.arr = arr;
		int max = arr.length();
		int peak = findPeak(max - 1,0,max);
		if (peak == -1) {
			return asendingBinarySearch(0,max - 1,target);
		}
		int firstHalfIndex = asendingBinarySearch(0,peak,target);
		return (firstHalfIndex != -1) ? firstHalfIndex : decendingBinarySearch(peak,max - 1,target);
	}
	int findPeak(int high, int low, int max) {
		while (low <= high) {
			int mid = low + ((high - low) / 2);
			int val = arr.get(mid);
			if (mid < max - 1 && val > arr.get(mid + 1) && mid > 0 && val > arr.get(mid - 1)) {
				return mid;
			}
			if (mid > 0 && val > arr.get(mid - 1) || mid < max - 1 && val < arr.get(mid + 1)) {
				low = mid + 1;
			} 
			else {
				high = mid - 1;
			}
		}
		return -1;
	}
}