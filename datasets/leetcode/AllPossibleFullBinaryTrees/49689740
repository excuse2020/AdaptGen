class Solution {
	List<TreeNode> allPossibleFBT(int n) {
		if (n % 2 == 0) {
			return new ArrayList<>();
		}
		return allPossibleFBTHelper(n);
	}
	List<TreeNode> allPossibleFBTHelper(int n) {
		if (n == 1) {
			List<TreeNode> base = new LinkedList<>();
			base.add(new TreeNode(0));
			return base;
		}
		List<TreeNode> nodeList = new LinkedList<>();
		for (int i = 1; i < n; i += 2) {
			List<TreeNode> leftList = allPossibleFBTHelper(i);
			List<TreeNode> rightList = allPossibleFBTHelper(n - i);
			for (TreeNode left: leftList) {	
				for (TreeNode right: rightList) {	
					TreeNode node = new TreeNode(0);
					node.left = left;
					node.right = right;
					nodeList.add(node);
				}
			}
		}
		return nodeList;
	}
}