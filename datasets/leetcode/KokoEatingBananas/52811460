class Solution {
	boolean isPossible(int[] piles, long mid, int h) {
		long sum = 0;
		for (int i: piles) {	
			sum += i % mid == 0 ? i / mid : (int) ((i / mid) + 1);
		}
		return (sum) <= h;
	}
	int max(int[] arr) {
		int max = arr[0];
		for (int i: arr) {	
			if (i > max) {
				max = i;
			}
		}
		return max;
	}
	int min(int[] arr) {
		int min = arr[0];
		for (int i: arr) {	
			if (i < min) {
				min = i;
			}
		}
		return min;
	}
	int minEatingSpeed(int[] piles, int h) {
		long s = 1;
		long e = max(piles);
		int ans = -1;
		while (s <= e) {
			long mid = s + (e - s) / 2;
			if (isPossible(piles,mid,h)) {
				ans = (int) (mid);
				e = mid - 1;
			} 
			else {
				s = mid + 1;
			}
		}
		return ans;
	}
}