class Solution {
	int minFallingPathSum(int[][] matrix) {
		int n = matrix.length;
		int m = matrix[0].length;
		int dp = new int[n][m];
		for (int i = 0; i < n; i++) {
			Arrays.fill(dp[i],Integer.MAX_VALUE);
		}
		int ans = Integer.MAX_VALUE;
		for (int i = 0; i < m; i++) {
			ans = Math.min(ans,rec(0,i,matrix,dp));
		}
		return ans;
	}
	int rec(int i, int j, int A, int dp) {
		int r = A.length;
		int c = A[0].length;
		if (i == r) {
			return 0;
		}
		if (j < 0 || j >= c) {
			return Integer.MAX_VALUE;
		}
		if (dp[i][j] != Integer.MAX_VALUE) {
			return dp[i][j];
		}
		int op1 = rec(i + 1,j - 1,A,dp);
		int op2 = rec(i + 1,j,A,dp);
		int op3 = rec(i + 1,j + 1,A,dp);
		dp[i][j] = A[i][j] + Math.min(op1,Math.min(op2,op3));
		return dp[i][j];
	}
}