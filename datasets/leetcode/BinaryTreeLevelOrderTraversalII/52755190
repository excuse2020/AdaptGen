class Solution {
	List<List<Integer>> levelOrderBottom(TreeNode root) {
		List<List<Integer>> list = new ArrayList<>();
		Queue<TreeNode> queue = new LinkedList<>();
		if (root == null) {
			return list;
		}
		queue.add(root);
		queue.add(null);
		List<Integer> list1 = new ArrayList<>();
		while (!queue.isEmpty()) {
			TreeNode currNode = queue.remove();
			if (currNode == null) {
				if (queue.isEmpty()) {
					list.add(list1);
					break;
				} 
				else {
					list.add(list1);
					list1 = new ArrayList<>();
					queue.add(null);
				}
			} 
			else {
				list1.add(currNode.val);
				if (currNode.left != null) {
					queue.add(currNode.left);
				}
				if (currNode.right != null) {
					queue.add(currNode.right);
				}
			}
		}
		Collections.reverse(list);
		return list;
	}
}