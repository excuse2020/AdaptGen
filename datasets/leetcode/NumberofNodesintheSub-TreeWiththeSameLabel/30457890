class Solution {
	void addUp(int[] counts, int[] subCounts) {
		for (int i = 0; i < counts.length; i++) {
			counts[i] += subCounts[i];
		}
	}
	int[] countSubTrees(int n, int[][] edges, String labels) {
		int[] ans = new int[n];
		boolean[] visited = new boolean[n];
		List<Integer>[] tree = edgesToNodeArray(edges,n);
		countSubTrees(ans,visited,0,tree,labels);
		return ans;
	}
	int[] countSubTrees(int[] ans, boolean[] visited, int node, List<Integer>[] tree, String labels) {
		int[] counts = new int[26];
		char cur = labels.charAt(node);
		visited[node] = true;
	}
	List<Integer>[] edgesToNodeArray(int[][] edges, int n) {
		List<Integer>[] nodeArray = new List[n];
		for (int[] edge: edges) {	
			if (nodeArray[edge[0]] == null) {
				nodeArray[edge[0]] = new ArrayList<>();
			}
			nodeArray[edge[0]].add(edge[1]);
			if (nodeArray[edge[1]] == null) {
				nodeArray[edge[1]] = new ArrayList<>();
			}
			nodeArray[edge[1]].add(edge[0]);
		}
		return nodeArray;
	}
}