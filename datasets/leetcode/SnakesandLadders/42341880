class Solution {
	int snakesAndLadders(int[][] board) {
		int n = board.length;
		int n2 = n * n;
		int[] flatBoard = new int[n2 + 1];
		int index = 1;
		boolean leftToRight = true;
		for (int i = n - 1; i >= 0; i--) {
			if (leftToRight) {
				for (int j = 0; j < n; j++) {
					flatBoard[index++] = board[i][j];
				}
			} 
			else {
				for (int j = n - 1; j >= 0; j--) {
					flatBoard[index++] = board[i][j];
				}
			}
			leftToRight = !leftToRight;
		}
		Queue<Integer> queue = new LinkedList<>();
		boolean[] visited = new boolean[n2 + 1];
		queue.offer(1);
		visited[1] = true;
		int moves = 0;
		while (!queue.isEmpty()) {
			int size = queue.size();
			for (int i = 0; i < size; i++) {
				int curr = queue.poll();
				if (curr == n2) {
					return moves;
				}
				for (int j = 1; j <= 6 && curr + j <= n2; j++) {
					int next = curr + j;
					int destination = flatBoard[next] == -1 ? next : flatBoard[next];
					if (!visited[destination]) {
						queue.offer(destination);
						visited[destination] = true;
					}
				}
			}
			moves++;
		}
		return -1;
	}
}