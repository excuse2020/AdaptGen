class Solution {
	boolean canFinish(int numCourses, int[][] prerequisites) {
		ArrayList<Integer>[] preq = new ArrayList[numCourses];
		int[] needTake = new int[numCourses];
		ArrayList<Integer> tookCourses = new ArrayList<>();
		for (int i = 0; i < prerequisites.length; i++) {
			int want = prerequisites[i][0];
			int first = prerequisites[i][1];
			if (preq[first] == null) {
				preq[first] = new ArrayList<>();
			}
			preq[first].add(want);
			needTake[want]++;
		}
		for (int i = 0; i < needTake.length; i++) {
			if (needTake[i] == 0) {
				tookCourses.add(i);
			}
		}
		for (int i = 0; i < tookCourses.size(); i++) {
			if (preq[tookCourses.get(i)] != null) {
				for (int course: preq[tookCourses.get(i)]) {	
					if (--needTake[course] == 0) {
						tookCourses.add(course);
					}
				}
			}
		}
		return tookCourses.size() == numCourses;
	}
}