class Solution {
	int maxCol = 0;
	int maxRow = 0;
	void dfs(int[][] land, int row, int col) {
		int n = land.length;
		int m = land[0].length;
		if (row < 0 || row >= n || col < 0 || col >= m || land[row][col] == 0) {
			return;
		}
		land[row][col] = 0;
		maxRow = Math.max(row,maxRow);
		maxCol = Math.max(col,maxCol);
		dfs(land,row + 1,col);
		dfs(land,row,col + 1);
	}
	int[][] findFarmland(int[][] land) {
		int n = land.length;
		int m = land[0].length;
		List<int[]> ans = new ArrayList<>();
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < m; j++) {
				if (land[i][j] == 1) {
					int startRow = i;
					int startCol = j;
					dfs(land,i,j);
					ans.add(new int{startRow, startCol, maxRow, maxCol});
					maxRow = 0;
					maxCol = 0;
				}
			}
		}
		return ans.toArray(new int[ans.size()]);
	}
}