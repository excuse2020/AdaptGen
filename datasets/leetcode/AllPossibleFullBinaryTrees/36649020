class Solution {
	Map<Integer, List<TreeNode>> map = new HashMap<>();
	List<TreeNode> allPossibleFBT(int n) {
		if (n % 2 == 0) {
			return new ArrayList<>();
		}
		return fun(n);
	}
	List<TreeNode> fun(int n) {
		if (map.containsKey(n)) {
			return map.get(n);
		}
		List<TreeNode> list = new ArrayList<>();
		if (n == 1) {
			list.add(new TreeNode(0));
			return list;
		}
		for (int ln = 1; ln < n - 1; ln += 2) {
			List<TreeNode> ll = fun(ln);
			List<TreeNode> rl = fun(n - ln);
			for (TreeNode l: ll) {	
				for (TreeNode r: rl) {	
					list.add(new TreeNode(0, l, r));
				}
			}
		}
		return list;
	}
}