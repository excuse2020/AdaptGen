class Solution {
	void brute(int[] arr) {
		for (int i = 0; i < arr.length; i++) {
			if (arr[i] == 0) {
				int j = i + 1;
				int prev = arr[i];
				while (j < arr.length) {
					int temp = arr[j];
					arr[j] = prev;
					prev = temp;
					j += 1;
				}
				i += 1;
			}
		}
	}
	void duplicateZeros(int[] arr) {
		kindaOptimal(arr);
	}
	void kindaOptimal(int[] arr) {
		int n = arr.length;
		int[] cpy = new int[n];
		int p1 = 0;
		int p2 = 0;
		for (; p2 < cpy.length; p2++) {
			if (arr[p1] == 0 && p2 < n - 1) {
				p2 += 1;
			} 
			else {
				cpy[p2] = arr[p1];
			}
			p1 += 1;
		}
		for (int i = 0; i < n; i++) {
			arr[i] = cpy[i];
		}
	}
}