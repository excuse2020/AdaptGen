class Solution {
	LinkedList<String> track = new LinkedList();
	boolean[] used;
	ArrayList<String> Permutation(String str) {
		String[] nums = new String[str.length()];
		for (int i = 0; i < str.length(); i++) {
			nums[i] = String.valueOf(str.charAt(i));
		}
		used = new boolean[str.length()];
		Set<String> set = new HashSet();
		perm(nums,set);
		return new ArrayList(set);
	}
	void perm(String[] nums, Set<String> set) {
		if (track.size() == nums.length) {
			String str = "";
			for (String s: track) {	
				str += s;
			}
			set.add(str);
			str = "";
			return;
		}
		for (int i = 0; i < nums.length; i++) {
			if (used[i]) {
				continue;
			}
			track.add(nums[i]);
			used[i] = true;
			perm(nums,set);
			track.removeLast();
			used[i] = false;
		}
	}
}