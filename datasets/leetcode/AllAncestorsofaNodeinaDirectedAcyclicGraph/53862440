class Solution {
	void bfs(ArrayList<Integer>[] graph, int parent, List<List<Integer>> res, boolean[] isVisited) {
		Queue<Integer> q = new LinkedList<>();
		q.offer(parent);
		while (!q.isEmpty()) {
			int u = q.poll();
			for (int i: graph[u]) {	
				if (!isVisited[i]) {
					res.get(i).add(parent);
					q.offer(i);
					isVisited[i] = true;
				}
			}
		}
	}
	void dfs(ArrayList<Integer>[] graph, int source, int parent, List<List<Integer>> res, boolean[] isVisited) {
		isVisited[source] = true;
		for (int u: graph[source]) {	
			if (!isVisited[u]) {
				res.get(u).add(parent);
				dfs(graph,u,parent,res,isVisited);
			}
		}
	}
	List<List<Integer>> getAncestors(int n, int[][] edges) {
		List<List<Integer>> res = new ArrayList<>();
		ArrayList<Integer>[] graph = new ArrayList[n];
		for (int i = 0; i < n; i++) {
			graph[i] = new ArrayList<>();
		}
		for (int i = 0; i < n; i++) {
			res.add(new ArrayList<>());
		}
		for (int[] edge: edges) {	
			graph[edge[0]].add(edge[1]);
		}
		for (int i = 0; i < n; i++) {
			bfs(graph,i,res,new boolean[n]);
		}
		for (int i = 0; i < n; i++) {
			res.get(i).sort((a, b) -> {a - b});
		}
		return res;
	}
}