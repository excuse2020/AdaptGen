class Solution {
	int f(int i, int j, List<Integer> list, int[][] dp) {
		if (i > j) {
			return 0;
		}
		if (dp[i][j] != -1) {
			return dp[i][j];
		}
		int mini = Integer.MAX_VALUE;
		for (int ind = i; ind <= j; ind++) {
			int cost = list.get(j + 1) - list.get(i - 1) + f(i,ind - 1,list,dp) + f(ind + 1,j,list,dp);
			mini = Math.min(mini,cost);
		}
		dp[i][j] = mini;
		return dp[i][j];
	}
	int minCost(int n, int[] cuts) {
		Arrays.sort(cuts);
		int c = cuts.length;
		List<Integer> list = new ArrayList<>();
		list.add(0);
		for (int i = 0; i < c; i++) {
			list.add(cuts[i]);
		}
		list.add(n);
		int[][] dp = new int[c + 1][c + 1];
		for (int[] row: dp) {	
			Arrays.fill(row,-1);
		}
		return f(1,c,list,dp);
	}
}