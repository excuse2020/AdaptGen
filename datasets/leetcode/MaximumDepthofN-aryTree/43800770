class Solution {
	int iteration(Node root) {
		int depth = 0;
		Deque<Node> queue = new ArrayDeque<>();
		if (root != null) {
			queue.add(root);
		}
		while (!queue.isEmpty()) {
			int size = queue.size();
			depth++;
			for (int i = 0; i < size; i++) {
				Node node = queue.poll();
				for (Node child: node.children) {	
					queue.add(child);
				}
			}
		}
		return depth;
	}
	int maxDepth(Node root) {
		if (root == null) {
			return 0;
		}
		return recursion(root,1);
	}
	int recursion(Node node, int currDepth) {
		if (node == null) {
			return currDepth;
		}
		int maxDepth = currDepth;
		for (Node child: node.children) {	
			maxDepth = Math.max(recursion(child,currDepth + 1),maxDepth);
		}
		return maxDepth;
	}
}