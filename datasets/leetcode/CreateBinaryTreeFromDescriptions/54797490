class Solution {
	TreeNode createBinaryTree(int[][] descriptions) {
		HashMap<Integer, TreeNode> map = new HashMap<>();
		HashSet<Integer> set = new HashSet<>();
		for (int i = 0; i < descriptions.length; i++) {
			if (!map.containsKey(descriptions[i][0])) {
				map.put(descriptions[i][0],new TreeNode(descriptions[i][0]));
			}
			if (!map.containsKey(descriptions[i][1])) {
				map.put(descriptions[i][1],new TreeNode(descriptions[i][1]));
			}
			if (descriptions[i][2] == 1) {
				map.get(descriptions[i][0]).left = map.get(descriptions[i][1]);
			} 
			else {
				map.get(descriptions[i][0]).right = map.get(descriptions[i][1]);
			}
			set.add(descriptions[i][1]);
		}
		for (int i = 0; i < descriptions.length; i++) {
			if (!set.contains(descriptions[i][0])) {
				return map.get(descriptions[i][0]);
			}
		}
		return null;
	}
}