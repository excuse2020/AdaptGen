class Solution {
	long maximumSubarraySum(int[] A, int k) {
		long ans = 0;
		int i = 0;
		int j = 0;
		int n = A.length;
		long sum = 0;
		HashMap<Integer, Integer> map = new HashMap<>();
		while (j < n) {
			if (map.containsKey(A[j])) {
				map.put(A[j],map.get(A[j]) + 1);
			} 
			else {
				map.put(A[j],1);
			}
			sum += A[j];
			if (j - i + 1 < k) {
				j++;
			} 
			else if (j - i + 1 == k) {
				if (map.size() == j - i + 1) {
					ans = Math.max(ans,sum);
				}
				j++;
			} 
			else {
				while (j - i + 1 > k) {
					map.put(A[i],map.get(A[i]) - 1);
					sum -= A[i];
					if (map.get(A[i]) == 0) {
						map.remove(A[i]);
					}
					i++;
				}
				if (j - i + 1 == k) {
					if (map.size() == j - i + 1) {
						ans = Math.max(ans,sum);
					}
				}
				j++;
			}
		}
		return ans;
	}
}