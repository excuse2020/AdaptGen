class Solution {
	boolean isBipartite(int i, Map<Integer, List<Integer>> adjList, int[] colors, int color) {
		if (colors[i] != 0) {
			return colors[i] == color;
		}
		colors[i] = color;
		for (int n: adjList.getOrDefault(i,Collections.emptyList())) {	
			if (!isBipartite(n,adjList,colors,color * -1)) {
				return false;
			}
		}
		return true;
	}
	boolean possibleBipartition(int n, int[][] dislikes) {
		Map<Integer, List<Integer>> adjList = new HashMap<>();
		for (int[] pair: dislikes) {	
			adjList.computeIfAbsent(pair[0],(key) -> {new ArrayList<>()}).add(pair[1]);
			adjList.computeIfAbsent(pair[1],(key) -> {new ArrayList<>()}).add(pair[0]);
		}
		int[] colors = new int[n + 1];
		for (int i = 1; i <= n; i++) {
			if (colors[i] == 0 && !isBipartite(i,adjList,colors,1)) {
				return false;
			}
		}
		return true;
	}
}