class Solution {
	int eatenApples(int[] apples, int[] days) {
		int rV = 0;
		PriorityQueue<int[]> pq0 = new PriorityQueue<>((a, b) -> {b[1] - a[1]});
		PriorityQueue<int[]> pq1 = new PriorityQueue<>((a, b) -> {b[0] - a[0]});
		int d0 = Integer.MAX_VALUE;
		int d1 = Integer.MIN_VALUE;
		for (int i = 0; i < apples.length; i++) {
			if (apples[i] > 0) {
				pq0.add(new int{i, i + days[i] - 1, apples[i]});
				d0 = Math.min(d0,i);
				d1 = Math.max(d1,i + days[i] - 1);
			}
		}
		for (int i = d1; i >= d0; i--) {
			while (!pq0.isEmpty() && pq0.peek()[1] >= i) {
				pq1.add(pq0.poll());
			}
			while (!pq1.isEmpty() && (pq1.peek()[0] > i || pq1.peek()[2] == 0)) {
				pq1.poll();
			}
			if (!pq1.isEmpty()) {
				rV++;
				pq1.peek()[2]--;
			}
		}
		return rV;
	}
}