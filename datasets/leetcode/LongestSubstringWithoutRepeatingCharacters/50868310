class Solution {
	int lengthOfLongestSubstring(String s) {
		int maxLength = 0;
		int currLength = 0;
		int sLength = s.length();
		int i = 0;
		int j = 0;
		int repeatingCharIndex;
		HashMap<Character, Integer> hm = new HashMap<>();
		while (j < sLength) {
			char ch = s.charAt(j);
			if (!hm.containsKey(ch)) {
				currLength++;
				hm.put(ch,j);
				j++;
			} 
			else {
				maxLength = Math.max(maxLength,currLength);
				repeatingCharIndex = hm.get(ch);
				while (i <= repeatingCharIndex) {
					hm.remove(s.charAt(i));
					currLength--;
					i++;
				}
			}
		}
		maxLength = Math.max(maxLength,currLength);
		return maxLength;
	}
}