class Solution {
	int[][] dp = new int[1001][1001];
	int n;
	boolean checkPred(String prev, String curr) {
		int M = prev.length();
		int N = curr.length();
		if (M >= N || N - M != 1) {
			return false;
		}
		int i = 0;
		int j = 0;
		while (i < M && j < N) {
			if (prev.charAt(i) == curr.charAt(j)) {
				i++;
			}
			j++;
		}
		return i == M;
	}
	int lis(String[] words, int previdx, int curridx) {
		if (curridx == n) {
			return 0;
		}
		if (previdx != -1 && dp[previdx][curridx] != -1) {
			return dp[previdx][curridx];
		}
		int taken = 0;
		int not_taken = 0;
		if (previdx == -1 || checkPred(words[previdx],words[curridx])) {
			taken = 1 + lis(words,curridx,curridx + 1);
		}
		not_taken = lis(words,previdx,curridx + 1);
		if (previdx != -1) {
			dp[previdx][curridx] = Math.max(taken,not_taken);
		}
		return Math.max(taken,not_taken);
	}
	int longestStrChain(String[] words) {
		for (int i = 0; i < 1000; i++) {
			for (int j = 0; j < 1000; j++) {
				dp[i][j] = -1;
			}
		}
		n = words.length;
		Arrays.sort(words,(s1, s2) -> {Integer.compare(s1.length(),s2.length())});
		return lis(words,-1,0);
	}
}