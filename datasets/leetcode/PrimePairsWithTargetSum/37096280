class Solution {
	List<Integer> lst = new ArrayList<>();
	List<List<Integer>> findPrimePairs(int n) {
		sieveOfEratosthenes(n);
		List<List<Integer>> ans = new ArrayList<>();
		int i = 0, j = lst.size() - 1;
		while (i <= j) {
			int val1 = lst.get(i);
			int val2 = lst.get(j);
			if (val1 + val2 == n) {
				List<Integer> l = new ArrayList<>();
				l.add(val1);
				l.add(val2);
				ans.add(l);
				i++;
				j--;
			} 
			else if (val1 + val2 < n) {
				i++;
			} 
			else {
				j--;
			}
		}
		if (ans.size() == 0 || ans.size() == 1) {
			return ans;
		}
		Collections.sort(ans,(a, b) -> {Integer.compare(a.get(0),b.get(0))});
		return ans;
	}
	void sieveOfEratosthenes(int n) {
		boolean prime = new boolean[n + 1];
		for (int i = 0; i <= n; i++) {
			prime[i] = true;
		}
		for (int p = 2; p * p <= n; p++) {
			if (prime[p] == true) {
				for (int i = p * p; i <= n; i += p) {
					prime[i] = false;
				}
			}
		}
		for (int i = 2; i <= n; i++) {
			if (prime[i] == true) {
				lst.add(i);
			}
		}
	}
}