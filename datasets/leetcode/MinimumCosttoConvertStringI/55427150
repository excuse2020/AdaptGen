class Solution {
	int CHAR_COUNT = 26;
	int INF = Integer.MAX_VALUE;
	int[][] buildGraph(char[] original, char[] changed, int[] cost) {
		int[][] graph = new int[CHAR_COUNT][CHAR_COUNT];
		for (int[] row: graph) {	
			Arrays.fill(row,INF);
		}
		for (int i = 0; i < CHAR_COUNT; i++) {
			graph[i][i] = 0;
		}
		int i = 0;
	}
	long minimumCost(String source, String target, char[] original, char[] changed, int[] cost) {
		int[][] graph = buildGraph(original,changed,cost);
		optimizeGraph(graph);
		return totalConversionCost(source,target,graph);
	}
	void optimizeGraph(int[][] graph) {
		for (int k = 0; k < CHAR_COUNT; k++) {
			for (int i = 0; i < CHAR_COUNT; i++) {
				for (int j = 0; j < CHAR_COUNT; j++) {
					if (graph[i][k] != Integer.MAX_VALUE && graph[k][j] != Integer.MAX_VALUE && graph[i][k] + graph[k][j] < graph[i][j]) {
						graph[i][j] = graph[i][k] + graph[k][j];
					}
				}
			}
		}
	}
	long totalConversionCost(String source, String target, int[][] graph) {
		long totalCost = 0;
		int i = 0;
		int sChar;
	}
}