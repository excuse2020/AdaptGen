class Solution {
	int find(int x, int[] parent) {
		if (parent[x] == -1) {
			return x;
		}
		parent[x] = find(parent[x],parent);
		return parent[x];
	}
	int largestComponentSize(int[] nums) {
		int n = nums.length;
		int[] parent = new int[100001];
		Arrays.fill(parent,-1);
		for (int i = 0; i < n; i++) {
			for (int k = 2; k <= Math.sqrt(nums[i]); k++) {
				if (nums[i] % k == 0) {
					union(nums[i],k,parent);
					union(nums[i],nums[i] / k,parent);
				}
			}
		}
		int count = 0;
		Map<Integer, Integer> map = new HashMap<>();
		for (int i = 0; i < n; i++) {
			int p = find(nums[i],parent);
			count = Math.max(count,1 + map.getOrDefault(p,0));
			map.put(p,1 + map.getOrDefault(p,0));
		}
		return count;
	}
	void union(int x, int y, int[] parent) {
		int xp = find(x,parent);
		int yp = find(y,parent);
		if (xp != yp) {
			parent[yp] = xp;
		}
	}
}