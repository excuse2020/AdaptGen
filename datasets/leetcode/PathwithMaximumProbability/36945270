class Solution {
	void buildGraph(int n, int[][] edges, double[] succProb, Map<Integer, Map<Integer, Double>> map) {
		int i = 0;
		for (int[] edge: edges) {	
			map.putIfAbsent(edge[0],new HashMap<>());
			map.putIfAbsent(edge[1],new HashMap<>());
			map.get(edge[0]).put(edge[1],succProb[i]);
			map.get(edge[1]).put(edge[0],succProb[i]);
			i++;
		}
	}
	double maxProbability(int n, int[][] edges, double[] succProb, int start, int end) {
		Map<Integer, Map<Integer, Double>> graph = new HashMap<>();
		buildGraph(n,edges,succProb,graph);
		Set<Integer> visited = new HashSet<>();
		double[] distance = new double[n];
		Arrays.fill(distance,0.0);
		distance[start] = 1;
		Queue<Integer> queue = new LinkedList<>();
		queue.offer(start);
		if (graph.get(start) == null) {
			return 0.0;
		}
		while (!queue.isEmpty()) {
			int size = queue.size();
			for (int i = 0; i < size; i++) {
				Integer curr = queue.poll();
				for (Integer neighbor: graph.get(curr).keySet()) {	
					double prob = graph.get(curr).get(neighbor);
					double newProb = distance[curr] * prob;
					if (newProb > distance[neighbor]) {
						distance[neighbor] = newProb;
						queue.add(neighbor);
					}
				}
			}
		}
		return distance[end];
	}
}