class Solution {
	void duplicateZeros(int[] arr) {
		int zeroCouter = 0;
		int n = arr.length;
		for (int i = 0; i < n; i++) {
			if (arr[i] == 0) {
				zeroCouter++;
			}
		}
		if (zeroCouter == 0) {
			return;
		}
		for (int j = n - 1; j >= 0; j--) {
			if (arr[j] != 0) {
				int shiftIndex = findShiftIndex(j,zeroCouter,n);
				if (shiftIndex >= 0) {
					arr[shiftIndex] = arr[j];
				}
			} 
			else {
				zeroCouter--;
				int shiftIndex = findShiftIndex(j,zeroCouter,n);
				if (shiftIndex >= 0) {
					arr[shiftIndex] = 0;
					if (shiftIndex + 1 < n) {
						arr[shiftIndex + 1] = 0;
					}
				}
			}
		}
	}
	int findShiftIndex(int currindex, int zerosBeofreIt, int n) {
		return currindex + zerosBeofreIt >= n ? -1 : currindex + zerosBeofreIt;
	}
}