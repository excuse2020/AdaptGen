class Solution {
	int snakesAndLadders(int[][] board) {
		int n = board.length;
		int[] b = new int[n * n + 1];
		int index = 1;
		boolean leftToRight = true;
		for (int i = n - 1; i >= 0; i--) {
			if (leftToRight) {
				for (int j = 0; j < n; j++) {
					b[index++] = board[i][j];
				}
			} 
			else {
				for (int j = n - 1; j >= 0; j--) {
					b[index++] = board[i][j];
				}
			}
			leftToRight = !leftToRight;
		}
		Queue<Integer> q = new LinkedList<>();
		q.offer(1);
		boolean[] visited = new boolean[n * n + 1];
		visited[1] = true;
		int steps = 0;
		while (!q.isEmpty()) {
			int size = q.size();
			for (int i = 0; i < size; i++) {
				int curr = q.poll();
				if (curr == n * n) {
					return steps;
				}
				for (int next = curr + 1; next <= Math.min(curr + 6,n * n); next++) {
					int dest = b[next] > 0 ? b[next] : next;
					if (!visited[dest]) {
						q.offer(dest);
						visited[dest] = true;
					}
				}
			}
			steps++;
		}
		return -1;
	}
}