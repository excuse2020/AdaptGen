class Solution {
	TreeNode ans;
	int maxDepth = 0;
	void solve(TreeNode root, int depth) {
		if (root == null) {
			return;
		}
		if (maxDepth < depth) {
			ans = root;
			maxDepth = depth;
		}
		solve(root.left,depth + 1);
		solve(root.right,depth + 1);
	}
	TreeNode subtreeWithAllDeepest(TreeNode root) {
		ans = root;
		solve(root,1);
		util(root,1);
		return ans;
	}
	int util(TreeNode root, int depth) {
		if (root == null) {
			return 0;
		}
		int left = util(root.left,depth + 1);
		int right = util(root.right,depth + 1);
		if (left == maxDepth && right == maxDepth) {
			ans = root;
		}
		return Math.max(depth,Math.max(left,right));
	}
}