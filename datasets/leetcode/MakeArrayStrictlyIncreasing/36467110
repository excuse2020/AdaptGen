class Solution {
	int makeArrayIncreasing(int[] arr1, int[] arr2) {
		Arrays.sort(arr2);
		int[] num2 = new int[arr2.length + 1];
		num2[0] = -1;
		System.arraycopy(arr2,0,num2,1,arr2.length);
		int[][] dp = new int[arr1.length][num2.length];
		for (int i = 0; i < arr1.length; i++) {
			Arrays.fill(dp[i],Integer.MAX_VALUE / 2);
		}
		for (int i = 0; i < num2.length; i++) {
			dp[0][i] = 1;
		}
		dp[0][0] = 0;
		for (int i = 1; i < arr1.length; i++) {
			int currVal = arr1[i];
			int preVal = arr1[i - 1];
			if (dp[i - 1][0] < Integer.MAX_VALUE / 2) {
				if (currVal > preVal) {
					dp[i][0] = Math.min(dp[i][0],dp[i - 1][0]);
				}
				for (int j = 1; j < num2.length; j++) {
					if (num2[j] > preVal) {
						dp[i][j] = Math.min(dp[i - 1][0] + 1,dp[i][j]);
						break;
					}
				}
			}
			for (int j = 1; j < num2.length; j++) {
				preVal = num2[j];
				if (currVal > preVal) {
					dp[i][0] = Math.min(dp[i - 1][j],dp[i][0]);
				}
				for (int k = j + 1; k < num2.length; k++) {
					int tempCurrVal = num2[k];
					if (tempCurrVal > preVal) {
						dp[i][k] = Math.min(dp[i][k],dp[i - 1][j] + 1);
						break;
					}
				}
			}
		}
		int ret = Integer.MAX_VALUE / 2;
		for (int i = 0; i < num2.length; i++) {
			ret = Math.min(ret,dp[arr1.length - 1][i]);
		}
		return (ret >= Integer.MAX_VALUE / 2 ? -1 : ret);
	}
}