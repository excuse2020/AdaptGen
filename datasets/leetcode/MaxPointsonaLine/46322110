class Solution {
	int maxPoints(int[][] points) {
		if (points == null || points.length == 0) {
			return 0;
		}
		if (points.length == 1) {
			return 1;
		}
		int maxPoints = 2;
		int n = points.length;
		for (int i = 0; i < n; i++) {
			Map<Double, Integer> slopeCount = new HashMap<>();
			int samePointCount = 0;
			int localMax = 1;
			for (int j = i + 1; j < n; j++) {
				if (points[i][0] == points[j][0] && points[i][1] == points[j][1]) {
					samePointCount++;
				} 
				else {
					double slope = (points[i][0] == points[j][0]) ? Double.POSITIVE_INFINITY : 0.0 + (double) (points[j][1] - points[i][1]) / (points[j][0] - points[i][0]);
					slopeCount.put(slope,slopeCount.getOrDefault(slope,1) + 1);
					localMax = Math.max(localMax,slopeCount.get(slope));
				}
			}
			maxPoints = Math.max(maxPoints,localMax + samePointCount);
		}
		return maxPoints;
	}
}