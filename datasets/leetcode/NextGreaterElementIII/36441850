class Solution {
	int nextGreaterElement(int n) {
		char[] arr = (n + "").toCharArray();
		int result = -1;
		int revIndex = -1;
		boolean param = false;
		int max = 0;
		Stack<Integer> st = new Stack<>();
		for (int i = arr.length - 1; i >= 0; i--) {
			while (!st.isEmpty() && arr[i] < arr[st.peek()]) {
				max = Math.max(max,st.peek() - i);
				st.pop();
			}
			st.push(i);
			if (max > 0) {
				char temp = arr[i];
				arr[i] = arr[i + max];
				arr[i + max] = temp;
				revIndex = ++i;
				break;
			}
		}
		int arrLength = arr.length - 1;
		while (revIndex >= 0 && revIndex <= arrLength) {
			char temp = arr[revIndex];
			arr[revIndex] = arr[arrLength];
			arr[arrLength] = temp;
			revIndex++;
			arrLength--;
		}
		int finalRes = 0;
		for (int i = 0; i < arr.length; i++) {
			finalRes = finalRes * 10 + Integer.parseInt(String.valueOf(arr[i]));
		}
		if (finalRes > n) {
			return finalRes;
		}
		return result;
	}
}