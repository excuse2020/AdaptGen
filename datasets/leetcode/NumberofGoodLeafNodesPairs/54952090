class Solution {
	int cnt;
	int d;
	int countPairs(TreeNode root, int distance) {
		d = distance;
		cnt = 0;
		dfs(root);
		return cnt;
	}
	int[] dfs(TreeNode nd) {
		int[] arr = new int[d + 1];
		if (nd == null) {
			return arr;
		}
		if (nd.left == null && nd.right == null) {
			arr[0] = 1;
			return arr;
		}
		int[] left = dfs(nd.left);
		int[] right = dfs(nd.right);
		int sm = 0;
		for (int i = d; i >= 1; i--) {
			left[i] = left[i - 1];
			right[i] = right[i - 1];
			sm += right[i];
		}
		left[0] = 0;
		right[0] = 0;
		for (int i = 0; i <= d; i++) {
			cnt += left[i] * sm;
			sm -= right[d - i];
		}
		for (int i = 0; i <= d; i++) {
			arr[i] = left[i] + right[i];
		}
		return arr;
	}
}