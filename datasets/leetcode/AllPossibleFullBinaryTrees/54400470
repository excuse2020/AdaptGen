class Solution {
	Map<Integer, List<TreeNode>> memo = new HashMap<>();
	List<TreeNode> allPossibleFBT(int n) {
		if (n % 2 == 0) {
			return new ArrayList<>();
		}
		if (n == 1) {
			return Arrays.asList(new TreeNode(0));
		}
		if (memo.containsKey(n)) {
			return memo.get(n);
		}
		List<TreeNode> result = new ArrayList<>();
		for (int leftNodes = 1; leftNodes < n; leftNodes += 2) {
			int rightNodes = n - 1;
			List<TreeNode> leftSubtrees = allPossibleFBT(leftNodes);
			List<TreeNode> rightSubtrees = allPossibleFBT(rightNodes);
			for (TreeNode left: leftSubtrees) {	
				for (TreeNode right: rightSubtrees) {	
					TreeNode root = new TreeNode(0);
					root.left = left;
					root.right = right;
					result.add(root);
				}
			}
		}
		memo.put(n,result);
		return result;
	}
}