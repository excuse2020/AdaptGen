class Solution {
	int atMostNGivenDigitSet(String[] digits, int n) {
		int nlen = len(n);
		int dlen = digits.length;
		int ans = 0;
		for (int i = 1; i < nlen; i++) {
			ans += pow(dlen,i);
		}
		String newn = Integer.toString(n);
		ans += find(newn,digits,0);
		return ans;
	}
	int find(String n, String digits, int start) {
		int ans = 0;
		int index = start;
		int i = index;
		int less = 0;
		int equal = 0;
		int j = 0;
		int d = Integer.parseInt(digits[j]);
	}
	int len(int n) {
		int ans = 0;
		while (n > 0) {
			n /= 10;
			ans++;
		}
		return ans;
	}
	int pow(int a, int b) {
		int res = 1;
		while (b > 0) {
			if (b % 2 == 1) {
				res *= a;
				b--;
			}
			a *= a;
			b /= 2;
		}
		return res;
	}
}