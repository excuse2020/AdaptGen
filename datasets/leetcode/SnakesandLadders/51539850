class Solution {
	int snakesAndLadders(int[][] board) {
		int n = board.length;
		int arr = new int[n * n + 1];
		int idx = 1;
		for (int i = n - 1; i >= 0; i--) {
			for (int j = 0; j < n; j++) {
				if (i % 2 != n % 2) {
					arr[idx] = board[i][j];
				} 
				else {
					arr[idx] = board[i][n - j - 1];
				}
				idx++;
			}
		}
		Queue<Integer> q = new LinkedList<Integer>();
		HashSet<Integer> h = new HashSet<Integer>();
		q.add(1);
		h.add(1);
		int c = 0;
		while (!q.isEmpty()) {
			int size = q.size();
			for (int i = 0; i < size; i++) {
				int x = q.poll();
				if (x + 6 >= n * n) {
					return c + 1;
				}
				int max = 0;
				for (int j = 1; j <= 6 && x + j <= n * n; j++) {
					if (arr[x + j] == -1) {
						max = Math.max(max,x + j);
					} 
					else if (!h.contains(arr[x + j])) {
						if (arr[x + j] == n * n) {
							return c + 1;
						}
						h.add(arr[x + j]);
						q.add(arr[x + j]);
					}
				}
				if (max != 0 && !h.contains(max)) {
					if (max == n * n) {
						return c + 1;
					}
					h.add(max);
					q.add(max);
				}
			}
			c++;
		}
		return -1;
	}
}