class Solution {
	boolean SlidingMinSum(ArrayList<Integer> arr, int n, int k, int maxCost) {
		boolean ans = false;
		int WinSum = 0;
		for (int i = 0; i < k; i++) {
			WinSum += arr.get(i);
		}
		int curr_sum = WinSum;
		for (int i = k; i < arr.size(); i++) {
			if (curr_sum <= maxCost) {
				return true;
			}
			curr_sum += arr.get(i) - arr.get(i - k);
			WinSum = Math.min(WinSum,curr_sum);
		}
		if (curr_sum <= maxCost) {
			return true;
		}
		return ans;
	}
	ArrayList<Integer> changeToAscii(String s1, String s2) {
		ArrayList<Integer> arr = new ArrayList<>();
		char[] char_s1 = s1.toCharArray();
		char[] char_s2 = s2.toCharArray();
		int n = char_s1.length;
		for (int i = 0; i < n; i++) {
			int asciiDiff = Math.abs(((int) char_s1[i] - (int) char_s2[i]));
			arr.add(asciiDiff);
		}
		return arr;
	}
	int equalSubstring(String s, String t, int maxCost) {
		ArrayList<Integer> AsciiToIntArr = changeToAscii(s,t);
		int n = AsciiToIntArr.size();
		int ans = 0, left = 0, right = n - 1;
		while (left <= right) {
			int mid = (left + right) / 2;
			boolean is_possible = SlidingMinSum(AsciiToIntArr,n,mid,maxCost);
			if (is_possible) {
				ans = mid;
				left = mid + 1;
			} 
			else {
				right = mid - 1;
			}
			System.out.print(mid + " ");
		}
		if (SlidingMinSum(AsciiToIntArr,n,left,maxCost)) {
			ans = left;
		} 
		else if (SlidingMinSum(AsciiToIntArr,n,right,maxCost)) {
			ans = right;
		}
		return ans;
	}
}