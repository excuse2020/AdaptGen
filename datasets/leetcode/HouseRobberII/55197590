class Solution {
	int helper(int[] nums, int index, int last_index, int[] dp) {
		if (index > last_index) {
			return 0;
		}
		if (dp[index] != -1) {
			return dp[index];
		}
		int max = 0;
		int select = helper(nums,index + 2,last_index,dp) + nums[index];
		int dnt_select = helper(nums,index + 1,last_index,dp);
		max = Math.max(select,dnt_select);
		dp[index] = max;
		return max;
	}
	int rob(int[] nums) {
		if (nums.length == 1) {
			return nums[0];
		}
		int[] dp1 = new int[nums.length];
		int[] dp2 = new int[nums.length];
		Arrays.fill(dp1,-1);
		Arrays.fill(dp2,-1);
		int max = Math.max(helper(nums,0,nums.length - 2,dp1),helper(nums,1,nums.length - 1,dp2));
		return max;
	}
}