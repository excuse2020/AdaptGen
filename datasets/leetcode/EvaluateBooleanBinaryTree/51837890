class Solution {
	int evaluateLeftAndRightValues(TreeNode node) {
		if (node == null) {
			return 0;
		}
		int leftSubTree = this.evaluateLeftAndRightValues(node.left);
		int rightSubTree = this.evaluateLeftAndRightValues(node.right);
		if (Arrays.asList(0,1).contains(node.val)) {
			return node.val;
		}
		return (node.val == 2) ? ((leftSubTree == 1 || rightSubTree == 1) ? (1) : (0)) : ((leftSubTree != 0 && rightSubTree != 0) ? (1) : (0));
	}
	boolean evaluateTree(TreeNode root) {
		return (this.evaluateLeftAndRightValues(root) == 1);
	}
}