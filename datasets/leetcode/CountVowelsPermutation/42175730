class Solution {
	int countVowelPermutation(int n) {
		Long[][] dp = new Long[n + 1][6];
		return (int) cv(n,-1,dp);
	}
	long cv(int n, int prev, Long[][] dp) {
		if (n == 0) {
			return 1;
		}
		if (dp[n][prev + 1] != null) {
			return dp[n][prev + 1];
		}
		if (prev == -1) {
			long ans = 0;
			ans = (ans + cv(n - 1,0,dp)) % 1000000007;
			ans = (ans + cv(n - 1,1,dp)) % 1000000007;
			ans = (ans + cv(n - 1,2,dp)) % 1000000007;
			ans = (ans + cv(n - 1,3,dp)) % 1000000007;
			ans = (ans + cv(n - 1,4,dp)) % 1000000007;
			return dp[n][prev + 1] = ans;
		} 
		else {
			long ans = 0;
			if (prev == 0) {
				ans = (ans + cv(n - 1,1,dp)) % 1000000007;
			} 
			else if (prev == 1) {
				ans = (ans + cv(n - 1,0,dp)) % 1000000007;
				ans = (ans + cv(n - 1,2,dp)) % 1000000007;
			} 
			else if (prev == 2) {
				ans = (ans + cv(n - 1,0,dp)) % 1000000007;
				ans = (ans + cv(n - 1,1,dp)) % 1000000007;
				ans = (ans + cv(n - 1,3,dp)) % 1000000007;
				ans = (ans + cv(n - 1,4,dp)) % 1000000007;
			} 
			else if (prev == 3) {
				ans = (ans + cv(n - 1,2,dp)) % 1000000007;
				ans = (ans + cv(n - 1,4,dp)) % 1000000007;
			} 
			else {
				ans = (ans + cv(n - 1,0,dp)) % 1000000007;
			}
			return dp[n][prev + 1] = ans;
		}
	}
}