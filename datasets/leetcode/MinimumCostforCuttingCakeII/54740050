class Solution {
	long minimumCost(int m, int n, int[] horizontalCut, int[] verticalCut) {
		Arrays.sort(horizontalCut);
		Arrays.sort(verticalCut);
		reverse(horizontalCut);
		reverse(verticalCut);
		int i = 0, j = 0;
		long totalCost = 0;
		int horizontalPieces = 1;
		int verticalPieces = 1;
		while (i < horizontalCut.length || j < verticalCut.length) {
			if (j == verticalCut.length || (i < horizontalCut.length && horizontalCut[i] >= verticalCut[j])) {
				totalCost += (long) horizontalCut[i] * verticalPieces;
				horizontalPieces++;
				i++;
			} 
			else {
				totalCost += (long) verticalCut[j] * horizontalPieces;
				verticalPieces++;
				j++;
			}
		}
		return totalCost;
	}
	void reverse(int[] arr) {
		int left = 0, right = arr.length - 1;
		while (left < right) {
			int temp = arr[left];
			arr[left] = arr[right];
			arr[right] = temp;
			left++;
			right--;
		}
	}
}