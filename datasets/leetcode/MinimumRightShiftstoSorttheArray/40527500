class Solution {
	int minimumRightShifts(List<Integer> nums) {
		int[] ans = new int[nums.size()];
		for (int i = 0; i < nums.size(); i++) {
			ans[i] = nums.get(i);
		}
		if (ans.length == 1) {
			return 0;
		}
		int c = 0;
		for (int i = 0; i < ans.length - 1; i++) {
			if (ans[i] < ans[i + 1]) {
				c++;
			}
		}
		if (c == ans.length - 1) {
			return 0;
		}
		int max = 0;
		for (int i = 0; i < ans.length; i++) {
			if (max < ans[i]) {
				max = ans[i];
			}
		}
		int count = 0;
		while (ans[ans.length - 1] != max) {
			int j, last;
			last = ans[ans.length - 1];
			for (j = ans.length - 1; j > 0; j--) {
				ans[j] = ans[j - 1];
			}
			ans[0] = last;
			count++;
		}
		for (int i = 0; i < ans.length - 1; i++) {
			if (ans[i + 1] < ans[i]) {
				return -1;
			}
		}
		return count;
	}
}