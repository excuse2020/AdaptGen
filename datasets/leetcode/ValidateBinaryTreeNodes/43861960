class Solution {
	boolean validateBinaryTreeNodes(int n, int[] leftChild, int[] rightChild) {
		int[] degree = new int[n];
		for (int i = 0; i < n; i++) {
			int l = leftChild[i];
			int r = rightChild[i];
			if (l != -1) {
				if (degree[l] > 0) {
					return false;
				}
				degree[l]++;
			}
			if (r != -1) {
				if (degree[r] > 0) {
					return false;
				}
				degree[r]++;
			}
		}
		int root = -1;
		for (int i = 0; i < n; i++) {
			if (degree[i] == 1) {
				continue;
			}
			if (root == -1) {
				root = i;
			} 
			else {
				return false;
			}
		}
		if (root == -1) {
			return false;
		}
		boolean[] visited = new boolean[n];
		Queue<Integer> q = new LinkedList<>();
		q.add(root);
		while (!q.isEmpty()) {
			Integer e = q.remove();
			if (visited[e]) {
				return false;
			}
			visited[e] = true;
			int l = leftChild[e];
			int r = rightChild[e];
			if (l != -1) {
				q.add(l);
			}
			if (r != -1) {
				q.add(r);
			}
		}
		for (boolean v: visited) {	
			if (!v) {
				return false;
			}
		}
		return true;
	}
}