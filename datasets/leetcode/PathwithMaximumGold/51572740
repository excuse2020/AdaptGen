class Solution {
	int max;
	int getMaximumGold(int[][] grid) {
		int m = grid.length;
		int n = grid[0].length;
		max = 0;
		for (int i = 0; i < grid.length; i++) {
			for (int j = 0; j < grid[0].length; j++) {
				if (grid[i][j] != 0) {
					int[][] visited = new int[m][n];
					solve(grid,visited,i,j,0);
				}
			}
		}
		return max;
	}
	boolean isSafe(int[][] grid, int[][] visited, int i, int j) {
		if (i >= 0 && i < grid.length && j >= 0 && j < grid[0].length && visited[i][j] == 0 && grid[i][j] != 0) {
			return true;
		}
		return false;
	}
	void solve(int[][] grid, int[][] visited, int i, int j, int coins) {
		max = Math.max(max,coins + grid[i][j]);
		visited[i][j] = 1;
		if (isSafe(grid,visited,i - 1,j)) {
			solve(grid,visited,i - 1,j,coins + grid[i][j]);
		}
		if (isSafe(grid,visited,i + 1,j)) {
			solve(grid,visited,i + 1,j,coins + grid[i][j]);
		}
		if (isSafe(grid,visited,i,j - 1)) {
			solve(grid,visited,i,j - 1,coins + grid[i][j]);
		}
		if (isSafe(grid,visited,i,j + 1)) {
			solve(grid,visited,i,j + 1,coins + grid[i][j]);
		}
		visited[i][j] = 0;
	}
}