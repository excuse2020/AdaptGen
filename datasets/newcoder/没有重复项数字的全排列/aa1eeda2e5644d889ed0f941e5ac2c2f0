class Solution {
	ArrayList<ArrayList<Integer>> permute(int[] num) {
		ArrayList<Integer> allElements = toArrayList(num);
		return permute(allElements);
	}
	ArrayList<ArrayList<Integer>> permute(ArrayList<Integer> elements) {
		ArrayList<ArrayList<Integer>> result = new ArrayList<ArrayList<Integer>>();
		if (elements.size() == 0) {
			return result;
		}
		if (elements.size() == 1) {
			ArrayList<Integer> element = new ArrayList<Integer>(elements);
			result.add(element);
			return result;
		}
		for (int index = 0; index < elements.size(); index++) {
			int currentElement = elements.get(index);
			ArrayList<Integer> excludeCurrent = new ArrayList<Integer>(elements);
			excludeCurrent.remove(index);
			ArrayList<ArrayList<Integer>> permuteFromNext = permute(excludeCurrent);
			for (int i = 0; i < permuteFromNext.size(); i++) {
				ArrayList<Integer> current = new ArrayList<Integer>(elements.size());
				current.add(currentElement);
				current.addAll(permuteFromNext.get(i));
				result.add(current);
			}
		}
		return result;
	}
	ArrayList<Integer> toArrayList(int[] num) {
		ArrayList<Integer> allElements = new ArrayList<Integer>(num.length);
		for (int i = 0; i < num.length; i++) {
			allElements.add(num[i]);
		}
		return allElements;
	}
}