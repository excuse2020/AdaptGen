class Solution {
	ListNode ReverseList(ListNode head) {
		ListNode pre = null;
		ListNode cur = head;
		while (cur != null) {
			ListNode cur_Next = cur.next;
			cur.next = pre;
			pre = cur;
			cur = cur_Next;
		}
		return pre;
	}
	ListNode addInList(ListNode head1, ListNode head2) {
		if (head1 == null) {
			return head2;
		}
		if (head2 == null) {
			return head1;
		}
		head1 = ReverseList(head1);
		head2 = ReverseList(head2);
		ListNode head = new ListNode(-1);
		ListNode vNode = head;
		int sn = 0;
		while (head1 != null || head2 != null) {
			int val = sn;
			if (head1 != null) {
				val += head1.val;
				head1 = head1.next;
			}
			if (head2 != null) {
				val += head2.val;
				head2 = head2.next;
			}
			sn = val / 10;
			vNode.next = new ListNode(val % 10);
			vNode = vNode.next;
		}
		if (sn > 0) {
			vNode.next = new ListNode(sn);
		}
		return ReverseList(head.next);
	}
}