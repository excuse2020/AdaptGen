class Solution {
	int[][] memo;
	int dfs(int row, int col, int[][] grid, int[][] moveCost) {
		if (row == grid.length - 1) {
			return grid[row][col];
		}
		if (memo[row][col] != -1) {
			return memo[row][col];
		}
		int res = Integer.MAX_VALUE;
		for (int j = 0; j < grid[0].length; j++) {
			int cost = grid[row][col] + moveCost[grid[row][col]][j];
			res = Math.min(res,cost + dfs(row + 1,j,grid,moveCost));
		}
		return memo[row][col] = res;
	}
	int minPathCost(int[][] grid, int[][] moveCost) {
		this.memo = new int[grid.length][grid[0].length];
		for (int[] row: memo) {	
			Arrays.fill(row,-1);
		}
		int res = Integer.MAX_VALUE;
		for (int i = 0; i < grid[0].length; i++) {
			res = Math.min(res,dfs(0,i,grid,moveCost));
		}
		return res;
	}
}