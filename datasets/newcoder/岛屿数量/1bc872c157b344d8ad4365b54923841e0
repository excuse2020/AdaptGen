class Solution {
	void dfs(char[][] grid, int r, int c) {
		int x = grid.length;
		int y = grid[0].length;
		grid[r][c] = '0';
		if (r - 1 >= 0 && grid[r - 1][c] == '1') {
			dfs(grid,r - 1,c);
		}
		if (c - 1 >= 0 && grid[r][c - 1] == '1') {
			dfs(grid,r,c - 1);
		}
		if (r + 1 < x && grid[r + 1][c] == '1') {
			dfs(grid,r + 1,c);
		}
		if (c + 1 < y && grid[r][c + 1] == '1') {
			dfs(grid,r,c + 1);
		}
	}
	int solve(char[][] grid) {
		int m = grid.length;
		int n = grid[0].length;
		int count = 0;
		for (int i = 0; i < m; i++) {
			for (int j = 0; j < n; j++) {
				if (grid[i][j] == '1') {
					dfs(grid,i,j);
					count++;
				}
			}
		}
		return count;
	}
}