class Solution {
	int minimumCost(int m, int n, int[] horizontalCut, int[] verticalCut) {
		PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> {b[0] - a[0]});
		for (int i = 0; i < horizontalCut.length; i++) {
			pq.add(new int{horizontalCut[i], 0});
		}
		for (int j = 0; j < verticalCut.length; j++) {
			pq.add(new int{verticalCut[j], 1});
		}
		int totalCost = 0;
		int horizontalPieces = 1, verticalPieces = 1;
		while (!pq.isEmpty()) {
			int[] cut = pq.poll();
			int cost = cut[0];
			int type = cut[1];
			if (type == 0) {
				totalCost += cost * verticalPieces;
				horizontalPieces++;
			} 
			else {
				totalCost += cost * horizontalPieces;
				verticalPieces++;
			}
		}
		return totalCost;
	}
}