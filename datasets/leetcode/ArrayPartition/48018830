class Solution {
	int arrayPairSum(int[] nums) {
		int size = nums.length;
		int start = 0;
		int end = size - 1;
		quickSort(nums,start,end);
		int maxSum = 0;
		for (int i = start; i < end; i += 2) {
			maxSum += nums[i];
		}
		return maxSum;
	}
	int findPartition(int[] nums, int start, int end) {
		int pivot = nums[end];
		int i = start - 1;
		for (int j = start; j < end; j++) {
			if (nums[j] < pivot) {
				i = i + 1;
				swap(nums,i,j);
			}
		}
		swap(nums,i + 1,end);
		return i + 1;
	}
	void quickSort(int[] nums, int start, int end) {
		if (start < end) {
			int pivot = findPartition(nums,start,end);
			quickSort(nums,start,pivot - 1);
			quickSort(nums,pivot + 1,end);
		}
	}
	void swap(int[] nums, int i, int j) {
		int temp = nums[i];
		nums[i] = nums[j];
		nums[j] = temp;
	}
}