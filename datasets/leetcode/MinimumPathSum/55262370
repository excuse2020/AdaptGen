class Solution {
	int minPath(int m, int n, int i, int j, int[][] grid, int[][] arr) {
		if (i == m && j == n) {
			return grid[i][j];
		}
		if (i > m || j > n) {
			return Integer.MAX_VALUE;
		}
		if (arr[i][j] != 0) {
			return arr[i][j];
		}
		int bottom = minPath(m,n,i + 1,j,grid,arr);
		int right = minPath(m,n,i,j + 1,grid,arr);
		return arr[i][j] = grid[i][j] + Math.min(right,bottom);
	}
	int minPathSum(int[][] grid) {
		int m = grid.length;
		int n = grid[0].length;
		int[][] arr = new int[m][n];
		return minPath(m - 1,n - 1,0,0,grid,arr);
	}
}