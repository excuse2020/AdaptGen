class Solution {
	boolean canFinish(int numCourses, int[][] edges) {
		if (numCourses <= 0) {
			return true;
		}
		List<Integer> result = new ArrayList<>();
		Map<Integer, List<Integer>> graph = new HashMap<>();
		Map<Integer, Integer> indegree = new HashMap<>();
		for (int i = 0; i < numCourses; i++) {
			indegree.put(i,0);
			graph.put(i,new ArrayList<>());
		}
		for (int[] edge: edges) {	
			int parent = edge[0], child = edge[1];
			graph.get(parent).add(child);
			indegree.put(child,indegree.get(child) + 1);
		}
		Queue<Integer> queue = new LinkedList<>();
		for (Map.Entry<Integer, Integer> entry: indegree.entrySet()) {	
			if (entry.getValue() == 0) {
				queue.add(entry.getKey());
			}
		}
		while (!queue.isEmpty()) {
			int vertex = queue.poll();
			result.add(vertex);
			for (int child: graph.get(vertex)) {	
				indegree.put(child,indegree.get(child) - 1);
				if (indegree.get(child) == 0) {
					queue.add(child);
				}
			}
		}
		if (result.size() != numCourses) {
			return false;
		}
		return true;
	}
}