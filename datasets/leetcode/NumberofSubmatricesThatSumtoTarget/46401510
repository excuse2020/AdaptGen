class Solution {
	int numSubmatrixSumTarget(int[][] matrix, int target) {
		int rows = matrix.length;
		int cols = matrix[0].length;
		for (int row = 0; row < rows; row++) {
			for (int col = 1; col < cols; col++) {
				matrix[row][col] += matrix[row][col - 1];
			}
		}
		int result = 0;
		for (int startCol = 0; startCol < cols; startCol++) {
			for (int endCol = startCol; endCol < cols; endCol++) {
				HashMap<Integer, Integer> mp = new HashMap<>();
				mp.put(0,1);
				int cumSum = 0;
				for (int row = 0; row < rows; row++) {
					cumSum += matrix[row][endCol] - (startCol > 0 ? matrix[row][startCol - 1] : 0);
					if (mp.containsKey(cumSum - target)) {
						result += mp.get(cumSum - target);
					}
					mp.put(cumSum,mp.getOrDefault(cumSum,0) + 1);
				}
			}
		}
		return result;
	}
}