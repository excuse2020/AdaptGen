class Solution {
	int[] postorderTraversal(TreeNode root) {
		ArrayList<Integer> res = new ArrayList<Integer>();
		ArrayList<TreeNode> stack = new ArrayList<TreeNode>();
		boolean ispop = false;
		TreeNode pre = root;
		while (root != null) {
			if (ispop == false) {
				stack.add(root);
				pre = root;
				if (root.left != null) {
					root = root.left;
					continue;
				} 
				else if (root.right != null) {
					root = root.right;
					continue;
				} 
				else {
					if (stack.size() > 0) {
						root = stack.get(stack.size() - 1);
						stack.remove(stack.size() - 1);
						ispop = true;
						continue;
					}
				}
			} 
			else {
				if (root.right != null) {
					if (root.right != pre) {
						pre = root;
						stack.add(root);
						root = root.right;
						ispop = false;
						continue;
					} 
					else {
						pre = root;
						res.add(root.val);
						if (stack.size() > 0) {
							root = stack.get(stack.size() - 1);
							stack.remove(stack.size() - 1);
						} 
						else {
							break;
						}
					}
				} 
				else {
					pre = root;
					res.add(root.val);
					if (stack.size() > 0) {
						root = stack.get(stack.size() - 1);
						stack.remove(stack.size() - 1);
						ispop = true;
					} 
					else {
						break;
					}
					continue;
				}
			}
		}
		int[] result = new int[res.size()];
		for (int i = 0; i < res.size(); i++) {
			result[i] = res.get(i);
		}
		return result;
	}
	int[] postorderTraversalRecursive(TreeNode root) {
		ArrayList<Integer> res = new ArrayList<Integer>();
		postorderTraversalRecursive(root,res);
		int[] result = new int[res.size()];
		for (int i = 0; i < res.size(); i++) {
			result[i] = res.get(i);
		}
		return result;
	}
	void postorderTraversalRecursive(TreeNode root, ArrayList<Integer> res) {
		if (root == null) {
			return;
		}
		postorderTraversalRecursive(root.left,res);
		postorderTraversalRecursive(root.right,res);
		res.add(root.val);
	}
}