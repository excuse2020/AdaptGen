class Solution {
	int minReorder(int n, int[][] connections) {
		List<List<Integer>> adj = new ArrayList<>();
		for (int i = 0; i < n; i++) {
			adj.add(new ArrayList<>());
		}
		Queue<Integer> q = new LinkedList<>();
		int res = 0;
		for (int[] con: connections) {	
			adj.get(con[1]).add(con[0]);
			adj.get(con[0]).add(0 - con[1]);
		}
		List<Integer> adj0 = adj.get(0);
		boolean[] visited = new boolean[n];
		visited[0] = true;
		for (int i = 0; i < adj0.size(); i++) {
			int curr = adj0.get(i);
			q.add(curr);
			if (curr > 0) {
				visited[curr] = true;
			} 
			else {
				visited[0 - curr] = true;
			}
		}
		while (!q.isEmpty()) {
			int curr = q.poll();
			if (curr < 0) {
				res++;
				curr = 0 - curr;
			}
			List<Integer> curradj = adj.get(curr);
			for (int i = 0; i < curradj.size(); i++) {
				int tmp = curradj.get(i);
				if (tmp > 0) {
					if (!visited[tmp]) {
						q.add(tmp);
						visited[tmp] = true;
					}
				} 
				else {
					if (!visited[0 - tmp]) {
						q.add(tmp);
						visited[0 - tmp] = true;
					}
				}
			}
		}
		return res;
	}
}