class Solution {
	int binarySearch(MountainArray mountainArr, int left, int right, int target) {
		boolean isAsc = mountainArr.get(left) < mountainArr.get(right);
		while (left <= right) {
			int mid = left + (right - left) / 2;
			if (mountainArr.get(mid) == target) {
				return mid;
			}
			if (isAsc) {
				if (mountainArr.get(mid) > target) {
					right = mid - 1;
				} 
				else {
					left = mid + 1;
				}
			} 
			else {
				if (mountainArr.get(mid) > target) {
					left = mid + 1;
				} 
				else {
					right = mid - 1;
				}
			}
		}
		return -1;
	}
	int findInMountainArray(int target, MountainArray mountainArr) {
		int peak = findPeakIndex(mountainArr);
		int leftSide = binarySearch(mountainArr,0,peak,target);
		return (leftSide != -1) ? leftSide : binarySearch(mountainArr,peak + 1,mountainArr.length() - 1,target);
	}
	int findPeakIndex(MountainArray mountainArr) {
		int left = 0;
		int right = mountainArr.length() - 1;
		while (left < right) {
			int mid = left + (right - left) / 2;
			if (mountainArr.get(mid) > mountainArr.get(mid + 1)) {
				right = mid;
			} 
			else {
				left = mid + 1;
			}
		}
		return left;
	}
}