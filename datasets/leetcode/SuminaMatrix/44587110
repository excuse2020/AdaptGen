class Solution {
	int matrixSum(int[][] nums) {
		List<PriorityQueue<Integer>> rowMaxHeapList = new ArrayList<>();
		for (int[] r: nums) {	
			PriorityQueue<Integer> currRowMaxHeap = new PriorityQueue<>((a, b) -> {a > b ? -1 : 1});
			for (int i: r) {	
				currRowMaxHeap.offer(i);
			}
			rowMaxHeapList.add(currRowMaxHeap);
		}
		int cols = nums[0].length;
		int mtrMaxSum = 0;
		for (int i = 0; i < cols; i++) {
			int currMax = Integer.MIN_VALUE;
			for (int j = 0; j < rowMaxHeapList.size(); j++) {
				currMax = Math.max(currMax,rowMaxHeapList.get(j).poll());
			}
			mtrMaxSum += currMax;
		}
		return mtrMaxSum;
	}
}