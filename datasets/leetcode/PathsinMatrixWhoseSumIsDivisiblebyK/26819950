class Solution {
	int MOD = 1_000_000_000 + 7;
	int numberOfPaths(int[][] grid, int k) {
		int m = grid.length, n = grid[0].length;
		int[][][] dp = new int[m][n][k + 1];
		int lastCellRemainder = grid[m - 1][n - 1] % k;
		dp[m - 1][n - 1][lastCellRemainder] = 1;
		int lastRemainder = lastCellRemainder;
		for (int c = n - 2; c >= 0; c--) {
			int cellRemainder = grid[m - 1][c] % k;
			dp[m - 1][c][(lastRemainder + cellRemainder) % k] = 1;
			lastRemainder = (lastRemainder + cellRemainder) % k;
		}
		lastRemainder = lastCellRemainder;
		for (int r = m - 2; r >= 0; r--) {
			int cellRemainder = grid[r][n - 1] % k;
			dp[r][n - 1][(lastRemainder + cellRemainder) % k] = 1;
			lastRemainder = (lastRemainder + cellRemainder) % k;
		}
		for (int r = m - 2; r >= 0; r--) {
			for (int c = n - 2; c >= 0; c--) {
				int cellRemainder = grid[r][c] % k;
				for (int rem = 0; rem <= k; rem++) {
					dp[r][c][(cellRemainder + rem) % k] = (dp[r][c][(cellRemainder + rem) % k] + dp[r][c + 1][rem]) % MOD;
					dp[r][c][(cellRemainder + rem) % k] = (dp[r][c][(cellRemainder + rem) % k] + dp[r + 1][c][rem]) % MOD;
				}
			}
		}
		return dp[0][0][0];
	}
}