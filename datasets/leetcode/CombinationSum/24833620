class Solution {
	List<List<Integer>> combinationSum(int[] candidates, int target) {
		List<List<Integer>> result = new ArrayList<>();
		depth(candidates,target,0,new ArrayList<>(),result,0);
		return result;
	}
	void depth(int[] nums, int target, int start, List<Integer> trace, List<List<Integer>> result, int sum) {
		if (target <= sum) {
			if (sum == target) {
				result.add(new ArrayList<>(trace));
			}
			return;
		}
		for (int i = start; i < nums.length; i++) {
			trace.add(nums[i]);
			depth(nums,target,i,trace,result,sum + nums[i]);
			trace.remove(trace.size() - 1);
		}
	}
}