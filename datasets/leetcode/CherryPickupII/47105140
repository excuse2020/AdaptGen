class Solution {
	int cherryPickup(int[][] grid) {
		int r = grid.length;
		int c = grid[0].length;
		int[][][] dp = new int[r + 1][c + 1][c + 1];
		for (int[][] dp1: dp) {	
			for (int[] dp2: dp1) {	
				Arrays.fill(dp2,-1);
			}
		}
		int ans = solve(0,0,c - 1,grid,dp,r,c);
		return ans;
	}
	int solve(int i, int j1, int j2, int[][] grid, int[][][] dp, int r, int c) {
		if (i < 0 || i >= r || j1 < 0 || j1 >= c || j2 < 0 || j2 >= c) {
			return -10000009;
		}
		if (i == r - 1) {
			if (j1 == j2) {
				return grid[i][j1];
			} 
			else {
				return grid[i][j1] + grid[i][j2];
			}
		}
		if (dp[i][j1][j2] != -1) {
			return dp[i][j1][j2];
		}
		int max = 0;
		for (int d1 = -1; d1 <= 1; d1++) {
			for (int d2 = -1; d2 <= 1; d2++) {
				if (j1 == j2) {
					max = Math.max(max,grid[i][j1] + solve(i + 1,j1 + d1,j2 + d2,grid,dp,r,c));
				} 
				else {
					max = Math.max(max,grid[i][j1] + grid[i][j2]);
				}
			}
		}
		return dp[i][j1][j2] = max;
	}
}