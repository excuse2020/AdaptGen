class Solution {
	int minPathSum(int[][] grid) {
		int m = grid.length;
		int n = grid[0].length;
		int[][] dp = new int[m][n];
		for (int[] row: dp) {	
			Arrays.fill(row,-1);
		}
		return solve(m - 1,n - 1,dp,grid);
	}
	int solve(int m, int n, int[][] dp, int[][] grid) {
		if (m < 0 || n < 0) {
			return (int) Math.pow(10,9);
		}
		if (m == 0 && n == 0) {
			return grid[m][n];
		}
		if (dp[m][n] != -1) {
			return dp[m][n];
		}
		int left = grid[m][n] + solve(m,n - 1,dp,grid);
		int up = grid[m][n] + solve(m - 1,n,dp,grid);
		return dp[m][n] = Math.min(left,up);
	}
}