class Solution {
	int[] parent;
	int[] rank;
	void Union(int x, int y) {
		int x_parent = find(x);
		int y_parent = find(y);
		if (rank[x_parent] > rank[y_parent]) {
			parent[y_parent] = x_parent;
		} 
		else if (rank[y_parent] < rank[x_parent]) {
			parent[x_parent] = y_parent;
		} 
		else {
			parent[y_parent] = x_parent;
			rank[x_parent]++;
		}
	}
	int find(int i) {
		if (i == parent[i]) {
			return i;
		} 
		else {
			return parent[i] = find(parent[i]);
		}
	}
	int[] findRedundantConnection(int[][] edges) {
		parent = new int[edges.length + 1];
		rank = new int[edges.length + 1];
		for (int i = 0; i < edges.length; i++) {
			parent[i] = i;
			rank[i] = 0;
		}
		for (int[] e: edges) {	
			if (find(e[0]) == find(e[1])) {
				return e;
			} 
			else if (find(e[0]) != find(e[1])) {
				Union(e[0],e[1]);
			}
		}
		return new int[0];
	}
}