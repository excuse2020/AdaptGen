class Solution {
	int minSideJumps(int[] obstacles) {
		int N = obstacles.length;
		int[] arr1 = new int[N];
		int[] arr2 = new int[N];
		int[] arr3 = new int[N];
		int cur1 = 0;
		int cur2 = 0;
		int cur3 = 0;
		for (int i = N - 1; i >= 0; i--) {
			if (obstacles[i] != 1) {
				cur1++;
			} 
			else {
				cur1 = 0;
			}
			arr1[i] = cur1;
			if (obstacles[i] != 2) {
				cur2++;
			} 
			else {
				cur2 = 0;
			}
			arr2[i] = cur2;
			if (obstacles[i] != 3) {
				cur3++;
			} 
			else {
				cur3 = 0;
			}
			arr3[i] = cur3;
		}
		int ans = 0;
		int curLane = 2;
		for (int i = 0; i < N - 1; i++) {
			if (obstacles[i + 1] == curLane) {
				if (arr1[i] >= arr2[i] && arr1[i] >= arr3[i]) {
					curLane = 1;
					ans++;
				} 
				else if (arr2[i] >= arr1[i] && arr2[i] >= arr3[i]) {
					curLane = 2;
					ans++;
				} 
				else if (arr3[i] >= arr1[i] && arr3[i] >= arr2[i]) {
					curLane = 3;
					ans++;
				}
			}
		}
		return ans;
	}
}