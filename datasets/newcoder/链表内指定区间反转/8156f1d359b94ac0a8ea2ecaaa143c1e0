class Solution {
	ListNode reverseBetween(ListNode head, int m, int n) {
		int i = 1;
		ListNode currNode = head;
		ListNode pre = head;
		ListNode mn_head = null;
		while (currNode != null) {
			if (i >= m && i <= n) {
				ListNode afterMNode = currNode;
				for (int j = 0; j < n - m + 1; j++) {
					afterMNode = afterMNode.next;
				}
				mn_head = reverseMN(currNode,n - m + 1);
				if (i == 1) {
					head = mn_head;
				} 
				else {
					pre.next = mn_head;
				}
				currNode.next = afterMNode;
				break;
			} 
			else {
				pre = currNode;
				currNode = currNode.next;
				i++;
			}
		}
		return head;
	}
	ListNode reverseMN(ListNode currNode, int n) {
		if (n == 1) {
			return currNode;
		}
		ListNode new_head = reverseMN(currNode.next,--n);
		currNode.next.next = currNode;
		currNode.next = null;
		return new_head;
	}
}