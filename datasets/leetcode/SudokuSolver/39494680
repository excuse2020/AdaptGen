class Solution {
	boolean isSafe(char[][] board, int row, int col, char digit) {
		for (int k = 0; k <= 8; k++) {
			if (board[k][col] == digit) {
				return false;
			}
		}
		for (int k = 0; k <= 8; k++) {
			if (board[row][k] == digit) {
				return false;
			}
		}
		int gridRow = (row / 3) * 3;
		int gridCol = (col / 3) * 3;
		for (int x = gridRow; x < gridRow + 3; x++) {
			for (int y = gridCol; y < gridCol + 3; y++) {
				if (board[x][y] == digit) {
					return false;
				}
			}
		}
		return true;
	}
	void solveSudoku(char[][] board) {
		solveSudokuUtil(board,0,0);
	}
	boolean solveSudokuUtil(char[][] board, int row, int col) {
		if (row == 9) {
			return true;
		}
		int nextRow = row, nextCol = col + 1;
		if (col + 1 == 9) {
			nextRow++;
			nextCol = 0;
		}
	}
}