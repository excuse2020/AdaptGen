class Solution {
	void ReverseList(ListNode head) {
		if (head == null || head.next == null) {
		}
		ListNode pre = null;
		ListNode cur = head;
		ListNode tmp = null;
		while (cur != null) {
			tmp = cur.next;
			cur.next = pre;
			pre = cur;
			cur = tmp;
		}
	}
	ListNode reverseBetween(ListNode head, int m, int n) {
		if (m == n) {
			return head;
		}
		ListNode dummyNode = new ListNode(-1);
		dummyNode.next = head;
		ListNode pre = dummyNode;
		ListNode cur = head;
		ListNode leftNode = null;
		ListNode rightNode = null;
		for (int i = 0; i < m - 1; i++) {
			pre = pre.next;
		}
		leftNode = pre.next;
		for (int i = 0; i < n; i++) {
			rightNode = cur;
			cur = cur.next;
		}
		pre.next = null;
		rightNode.next = null;
		ReverseList(leftNode);
		pre.next = rightNode;
		leftNode.next = cur;
		return dummyNode.next;
	}
}