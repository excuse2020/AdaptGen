class Solution {
	int rob(int[] nums) {
		int n = nums.length;
		if (n == 0) {
			return 0;
		}
		if (n == 1) {
			return nums[0];
		}
		int[] temp1 = new int[n - 1];
		int[] temp2 = new int[n - 1];
		for (int i = 1; i < n; i++) {
			temp1[i - 1] = nums[i];
		}
		for (int i = 0; i < n - 1; i++) {
			temp2[i] = nums[i];
		}
		return Math.max(solve(temp1.length,temp1),solve(temp2.length,temp2));
	}
	int solve(int n, int[] arr) {
		int prev = arr[0];
		int prev2 = 0;
		for (int i = 1; i < n; i++) {
			int pick = arr[i];
			if (i > 1) {
				pick += prev2;
			}
			int nonPick = 0 + prev;
			int cur_i = Math.max(pick,nonPick);
			prev2 = prev;
			prev = cur_i;
		}
		return prev;
	}
}