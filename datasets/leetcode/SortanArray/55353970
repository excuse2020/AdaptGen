class Solution {
	void merge(int[] nums, int start, int mid, int end) {
		int[] res = new int[end - start];
		int index = 0, index1 = start, index2 = mid;
		while (index1 < mid && index2 < end) {
			if (nums[index1] < nums[index2]) {
				res[index++] = nums[index1++];
			} 
			else {
				res[index++] = nums[index2++];
			}
		}
		while (index1 < mid) {
			res[index++] = nums[index1++];
		}
		while (index2 < end) {
			res[index++] = nums[index2++];
		}
		for (int i = 0; i < res.length; i++) {
			nums[start + i] = res[i];
		}
	}
	void mergeSort(int[] nums, int start, int end) {
		if (start == end - 1 || start == end) {
			return;
		}
		int mid = start + (end - start) / 2;
		mergeSort(nums,start,mid);
		mergeSort(nums,mid,end);
		merge(nums,start,mid,end);
	}
	int[] sortArray(int[] nums) {
		mergeSort(nums,0,nums.length);
		return nums;
	}
}