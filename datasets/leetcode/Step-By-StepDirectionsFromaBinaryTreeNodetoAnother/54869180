class Solution {
	boolean findPath(TreeNode node, int x, StringBuilder path) {
		if (node == null) {
			return false;
		}
		if (node.val == x) {
			return true;
		}
	}
	String getDirections(TreeNode root, int startValue, int destValue) {
		TreeNode lca = lowestCommonAncestor(root,startValue,destValue);
		StringBuilder pathToStart = new StringBuilder();
		StringBuilder pathToDest = new StringBuilder();
		findPath(lca,startValue,pathToStart);
		findPath(lca,destValue,pathToDest);
		StringBuilder result = new StringBuilder();
		int i = 0;
	}
	TreeNode lowestCommonAncestor(TreeNode root, int p, int q) {
		if (root == null) {
			return null;
		}
		if (root.val == p || root.val == q) {
			return root;
		}
		TreeNode left = lowestCommonAncestor(root.left,p,q);
		TreeNode right = lowestCommonAncestor(root.right,p,q);
		if (left != null && right != null) {
			return root;
		}
		return left == null ? right : left;
	}
}