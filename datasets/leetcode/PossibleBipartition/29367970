class Solution {
	Map<Integer, Integer> color;
	List<Integer>[] graph;
	boolean dfs(int node, int c) {
		if (color.containsKey(node)) {
			return color.get(node) == c;
		}
		color.put(node,c);
		for (int neighbor: graph[node]) {	
			if (!dfs(neighbor,c ^ 1)) {
				return false;
			}
		}
		return true;
	}
	boolean possibleBipartition(int n, int[][] dislikes) {
		graph = new ArrayList[n + 1];
		color = new HashMap<>();
		for (int i = 0; i < n + 1; i++) {
			graph[i] = new ArrayList<>();
		}
		for (int[] edge: dislikes) {	
			graph[edge[0]].add(edge[1]);
			graph[edge[1]].add(edge[0]);
		}
		for (int node = 1; node < n + 1; node++) {
			if (!color.containsKey(node) && !dfs(node,0)) {
				return false;
			}
		}
		return true;
	}
}