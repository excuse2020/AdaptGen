class Solution {
	int minimizedMaximum(int n, int[] quantities) {
		int low = 1;
		int high = Integer.MIN_VALUE;
		for (int i = 0; i < quantities.length; i++) {
			if (high < quantities[i]) {
				high = quantities[i];
			}
		}
		while (low <= high) {
			int mid = (low + high) / 2;
			int count = returnCount(quantities,mid);
			if (count <= n) {
				high = mid - 1;
			} 
			else {
				low = mid + 1;
			}
		}
		return low;
	}
	int returnCount(int[] quantities, int mid) {
		int count = 0;
		for (int i = 0; i < quantities.length; i++) {
			count += Math.ceil((double) quantities[i] / (double) (mid));
		}
		return count;
	}
}