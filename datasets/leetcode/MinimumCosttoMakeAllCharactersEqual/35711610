class Solution {
	long count(char toBe, int lMid, int rMid, char[] chars) {
		long count = 0;
		int i = lMid;
		boolean flipped = false;
		while (i >= 0) {
			if ((!flipped && chars[i] != toBe) || (flipped && chars[i] == toBe)) {
				count += (i + 1);
				flipped = !flipped;
			}
			i--;
		}
		i = rMid;
		flipped = false;
		while (i < chars.length) {
			if ((!flipped && chars[i] != toBe) || (flipped && chars[i] == toBe)) {
				count += (chars.length - i);
				flipped = !flipped;
			}
			i++;
		}
		return count;
	}
	long minimumCost(String s) {
		if (s.length() == 1) {
			return 0;
		}
		long count = 0;
		char[] chars = s.toCharArray();
		if ((chars.length & 1) == 1) {
			int mid = chars.length / 2;
			count = count(chars[mid],mid - 1,mid + 1,chars);
		} 
		else {
			int rMid = chars.length / 2;
			int lMid = rMid - 1;
			if (chars[lMid] == chars[rMid]) {
				count = count(chars[lMid],lMid - 1,rMid + 1,chars);
			} 
			else {
				long lRes = count(chars[lMid],lMid - 1,rMid,chars);
				long rRes = count(chars[rMid],lMid,rMid + 1,chars);
				count = Math.min(lRes,rRes);
			}
		}
		return count;
	}
}