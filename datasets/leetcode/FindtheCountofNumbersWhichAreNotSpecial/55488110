class Solution {
	int nonSpecialCount(int l, int r) {
		boolean[] prime = sieveOfEratosthenes((int) Math.sqrt(r));
		int count = r - l + 1;
		for (int i = 2; i < prime.length; i++) {
			if (!prime[i]) {
				if (i * i >= l) {
					count--;
				}
			}
		}
		return count;
	}
	boolean[] sieveOfEratosthenes(int n) {
		boolean[] primes = new boolean[n + 1];
		primes[0] = primes[1] = true;
		for (int p = 2; p * p <= n; p++) {
			if (!primes[p]) {
				for (int i = p * p; i <= n; i += p) {
					primes[i] = true;
				}
			}
		}
		return primes;
	}
}