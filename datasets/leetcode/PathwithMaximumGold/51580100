class Solution {
	int getMaximumGold(int[][] grid) {
		boolean visited = new boolean[grid.length][grid[0].length];
		int result = 0;
		for (int i = 0; i < grid.length; i++) {
			for (int j = 0; j < grid[0].length; j++) {
				if (grid[i][j] > 0) {
					result = Math.max(result,helper(grid,i,j,visited));
				}
			}
		}
		return result;
	}
	int helper(int grid, int i, int j, boolean visited) {
		if (i < 0 || i >= grid.length || j < 0 || j >= grid[0].length || visited[i][j] || grid[i][j] == 0) {
			return 0;
		}
		visited[i][j] = true;
		int up = helper(grid,i - 1,j,visited);
		int down = helper(grid,i + 1,j,visited);
		int left = helper(grid,i,j - 1,visited);
		int right = helper(grid,i,j + 1,visited);
		visited[i][j] = false;
		return Math.max(Math.max(up,down),Math.max(left,right)) + grid[i][j];
	}
}