class Solution {
	int[][] cache;
	char[][] matrix;
	int dp(int i, int j) {
		if (i >= matrix.length || j >= matrix[i].length) {
			return 0;
		}
		if (cache[i][j] != -1) {
			return cache[i][j];
		}
		int left = dp(i,j + 1);
		int down = dp(i + 1,j);
		int diag = dp(i + 1,j + 1);
		int min = Math.min(left,Math.min(down,diag));
	}
	int maximalSquare(char[][] matrix) {
		this.matrix = matrix;
		cache = new int[matrix.length][matrix[0].length];
		for (int i = 0; i < matrix.length; i++) {
			for (int j = 0; j < matrix[i].length; j++) {
				cache[i][j] = -1;
			}
		}
		dp(0,0);
		int max = 0;
		for (int i = 0; i < matrix.length; i++) {
			for (int j = 0; j < matrix[i].length; j++) {
				max = Math.max(max,cache[i][j]);
			}
		}
		int val = max;
		return max * max;
	}
}