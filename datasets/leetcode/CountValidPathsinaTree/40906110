class Solution {
	List<Integer>[] G;
	long ans = 0;
	long countPaths(int n, int[][] edges) {
		G = new ArrayList[n + 1];
		for (int i = 0; i <= n; i++) {
			G[i] = new ArrayList<>();
		}
		for (int[] e: edges) {	
			G[e[0]].add(e[1]);
			G[e[1]].add(e[0]);
		}
		dfs(1,-1);
		return ans;
	}
	int[] dfs(int u, int prev) {
		boolean isp = isPrime(u);
		int primeChildren = 0;
		int nonPrimeChildren = 0;
		for (int v: G[u]) {	
			if (v == prev) {
				continue;
			}
			int[] next = dfs(v,u);
			if (isp) {
				ans += (nonPrimeChildren + 1) * next[0];
			} 
			else {
				ans += primeChildren * next[0];
				ans += (nonPrimeChildren + 1) * next[1];
			}
			primeChildren += next[1];
			nonPrimeChildren += next[0];
		}
		int[] res = new int[2];
		res[0] = isp ? 0 : nonPrimeChildren + 1;
		res[1] = isp ? nonPrimeChildren + 1 : primeChildren;
		return res;
	}
	boolean isPrime(int n) {
		if (n <= 1) {
			return false;
		}
		for (int i = 2; i <= Math.sqrt(n); i++) {
			if (n % i == 0) {
				return false;
			}
		}
		return true;
	}
}