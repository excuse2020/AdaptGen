class Solution4 {
	int getLongestPalindrome(String A, int n) {
		if (A == null || n == 0) {
			return 0;
		}
		char[] cs = manacherString(A,n);
		int[] pArr = new int[cs.length];
		int pR = -1;
		int index = -1;
		int maxLen = Integer.MIN_VALUE;
		for (int i = 0; i != cs.length; i++) {
			pArr[i] = pR > i ? Math.min(pArr[2 * index - i],pR - i) : 1;
			while (i + pArr[i] < cs.length && i - pArr[i] >= 0) {
				if (cs[i + pArr[i]] == cs[i - pArr[i]]) {
					pArr[i]++;
				} 
				else {
					break;
				}
			}
			if (i + pArr[i] > pR) {
				pR = i + pArr[i];
				index = i;
			}
			maxLen = Math.max(maxLen,pArr[i]);
		}
		return maxLen - 1;
	}
	char[] manacherString(String s, int n) {
		char[] charArr = s.toCharArray();
		int index = 0;
		char[] res = new char[n * 2 + 1];
		for (int i = 0; i != res.length; i++) {
			res[i] = (i & 1) == 0 ? '#' : charArr[index++];
		}
		return res;
	}
}