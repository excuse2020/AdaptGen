class Solution {
	ListNode reverseBetween(ListNode head, int m, int n) {
		if (m == n) {
			return head;
		}
		List<ListNode> ndoes = new ArrayList<>();
		List<ListNode> resndoes = new ArrayList<>();
		ListNode res = null;
		if (head == null) {
			return null;
		}
		while (head.next != null) {
			ListNode node = new ListNode(head.val);
			ndoes.add(node);
			if (head.next != null) {
				head = head.next;
			}
		}
		ListNode node = new ListNode(head.val);
		ndoes.add(node);
		if (ndoes.size() == 1) {
			return head;
		}
		if (m - 1 > 0) {
			List<ListNode> nodes1 = ndoes.subList(0,m - 1);
			resndoes.addAll(nodes1);
		}
		List<ListNode> nodes2 = ndoes.subList(m - 1,n);
		Collections.reverse(nodes2);
		resndoes.addAll(nodes2);
		if (n > 0 && n < ndoes.size()) {
			List<ListNode> nodes3 = ndoes.subList(n,ndoes.size());
			resndoes.addAll(nodes3);
		}
		if (resndoes.size() > 1) {
			for (int i = 0; i < resndoes.size() - 1; i++) {
				resndoes.get(i).next = resndoes.get(i + 1);
			}
		}
		return resndoes.get(0);
	}
}