class Solution {
	int MOD = (int) 1e9 + 7;
	long factMod(int n) {
		if (n <= 1) {
			return 1;
		}
		long fact = new long[n + 1];
		fact[0] = fact[1] = 1;
		for (int i = 2; i <= n; i++) {
			fact[i] = mulMod(fact[i - 1],i);
		}
		return fact[n];
	}
	long mulMod(long a, long b) {
		long ans = 0;
		for (; b != 0; ) {
			if ((b & 1) == 1) {
				ans += a;
				ans %= MOD;
			}
			a += a;
			a %= MOD;
			b >>= 1;
		}
		return ans;
	}
	int numPrimeArrangements(int n) {
		int temp = primeSieve(n);
		return (int) mulMod(factMod(temp),factMod(n - temp));
	}
	int primeSieve(int n) {
		int arr = new int[n + 1];
		Arrays.fill(arr,1);
		arr[0] = arr[1] = 0;
		for (int i = 2; i < arr.length; i++) {
			if (arr[i] == 1) {
				for (int j = i * i; j < arr.length; j += i) {
					arr[j] = 0;
				}
			}
		}
		int ans = 0;
		for (int i = 0; i < arr.length; i++) {
			if (arr[i] == 1) {
				++ans;
			}
		}
		return ans;
	}
}