class Solution {
	ListNode reverseBetween(ListNode head, int m, int n) {
		if (head == null) {
			return null;
		}
		ListNode leftList = null;
		ListNode tailLeftList = null;
		ListNode midList = null;
		ListNode tailMidList = null;
		ListNode rightList = null;
		ListNode ptrCurHead = head;
		ListNode ptrNextHead = null;
		int index = 1;
		if (m > 1) {
			leftList = head;
		}
		while (index <= n) {
			ptrNextHead = ptrCurHead.next;
			if (index < m) {
				tailLeftList = ptrCurHead;
			} 
			else {
				if (index == m) {
					tailMidList = ptrCurHead;
				}
				ptrCurHead.next = midList;
				midList = ptrCurHead;
			}
			ptrCurHead = ptrNextHead;
			index++;
		}
		rightList = ptrCurHead;
		ListNode list = null;
		if (leftList != null) {
			list = leftList;
			tailLeftList.next = midList;
		} 
		else {
			list = midList;
		}
		if (rightList != null) {
			tailMidList.next = rightList;
		} 
		else {
			tailMidList.next = null;
		}
		return list;
	}
}