class Solution {
	int nodes, edge;
	int countCompleteComponents(int n, int[][] edges) {
		Map<Integer, List<Integer>> graph = new HashMap<>();
		for (int edge: edges) {	
			graph.computeIfAbsent(edge[0],(k) -> {new ArrayList<>()}).add(edge[1]);
			graph.computeIfAbsent(edge[1],(k) -> {new ArrayList<>()}).add(edge[0]);
		}
		int ans = 0;
		boolean visited = new boolean[n];
		for (int i = 0; i < n; i++) {
			nodes = 0;
			edge = 0;
			if (visited[i]) {
				continue;
			}
			dfs(graph,visited,i);
			if ((nodes * (nodes - 1)) == edge) {
				ans++;
			}
			int nodes = 0, edge = 0;
			visited[i] = true;
		}
		return ans;
	}
	void dfs(Map<Integer, List<Integer>> graph, boolean visited, int currNode) {
		if (visited[currNode]) {
			return;
		}
		visited[currNode] = true;
		nodes++;
		for (Integer node: graph.getOrDefault(currNode,new ArrayList<>())) {	
			edge++;
			dfs(graph,visited,node);
		}
	}
}