class Solution {
	int[] countVisitedNodes(List<Integer> edges) {
		int n = edges.size();
		LinkedHashSet<Integer> visited = new LinkedHashSet<>();
		int[] res = new int[edges.size()];
		for (int i = 0; i < edges.size(); i++) {
			if (res[i] != 0) {
				continue;
			}
			int curr = i;
			while (!visited.contains(curr)) {
				visited.add(curr);
				curr = edges.get(curr);
				if (res[curr] != 0) {
					res[i] = visited.size() + res[curr];
					visited.clear();
					break;
				}
			}
			int count = 0;
			boolean inCycle = false;
			for (int node: visited) {	
				if (node == curr) {
					inCycle = true;
				}
				res[node] = visited.size() - count;
				if (!inCycle) {
					count++;
				}
			}
			visited.clear();
		}
		return res;
	}
}