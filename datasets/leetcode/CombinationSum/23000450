class Solution {
	List<List<Integer>> combinationSum(int[] candidates, int target) {
		List<List<Integer>> allCombinations = new ArrayList<>();
		ArrayList<Integer> combination = new ArrayList<>();
		combinationSumUtil(0,target,combination,candidates,allCombinations);
		return allCombinations;
	}
	void combinationSumUtil(int ind, int target, ArrayList<Integer> combination, int[] candidates, List<List<Integer>> allCombinations) {
		if (ind == candidates.length) {
			return;
		}
		if (target == 0) {
			allCombinations.add(new ArrayList<Integer>(combination));
			return;
		}
		if (target >= candidates[ind]) {
			combination.add(candidates[ind]);
			combinationSumUtil(ind,target - candidates[ind],combination,candidates,allCombinations);
			combination.remove(combination.size() - 1);
		}
		combinationSumUtil(ind + 1,target,combination,candidates,allCombinations);
	}
}