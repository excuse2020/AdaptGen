class Solution {
	int largest1BorderedSquare(int[][] grid) {
		int m = grid.length;
		int n = grid[0].length;
		int[][] ver = new int[m][n];
		int[][] hor = new int[m][n];
		int max = 0;
		for (int i = 0; i < m; i++) {
			for (int j = 0; j < n; j++) {
				if (grid[i][j] == 1) {
					hor[i][j] = j == 0 ? 1 : hor[i][j - 1] + 1;
					ver[i][j] = i == 0 ? 1 : ver[i - 1][j] + 1;
				}
			}
		}
		for (int i = m - 1; i >= 0; i--) {
			for (int j = n - 1; j >= 0; j--) {
				int side = Math.min(hor[i][j],ver[i][j]);
				while (side > max) {
					if (ver[i][j - side + 1] >= side && hor[i - side + 1][j] >= side) {
						max = side;
					}
					side--;
				}
			}
		}
		return max * max;
	}
}