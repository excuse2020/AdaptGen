class Solution {
	int[] ans;
	LinkedList<Integer>[] g;
	int[] vis;
	int[] countSubTrees(int n, int[][] edges, String labels) {
		vis = new int[n];
		ans = new int[n];
		g = new LinkedList[n];
		for (int i = 0; i != n; i++) {
			g[i] = new LinkedList<>();
		}
		for (int[] e: edges) {	
			g[e[0]].addLast(e[1]);
			g[e[1]].addLast(e[0]);
		}
		dfs(0,labels);
		return ans;
	}
	int[] dfs(int node, String labels) {
		int letters = new int[26];
		vis[node] = 1;
		for (int next: g[node]) {	
			if (vis[next] == 0) {
				int temp = dfs(next,labels);
				for (int i = 0; i != 26; i++) {
					letters[i] += temp[i];
				}
			}
		}
	}
}