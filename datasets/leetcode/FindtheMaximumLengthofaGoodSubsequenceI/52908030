class Solution {
	int function(int nums, int[][][] dp, boolean[][][] vis, int index, int rem, int prev) {
		if (index >= nums.length) {
			return 0;
		}
		if (prev != -1 && vis[index][prev][rem]) {
			return dp[index][prev][rem];
		}
		int max = Integer.MIN_VALUE;
		if (prev == -1) {
			max = Math.max(max,1 + function(nums,dp,vis,index + 1,rem,index));
		} 
		else {
			if (nums[index] != nums[prev] && rem > 0) {
				max = Math.max(max,1 + function(nums,dp,vis,index + 1,rem - 1,index));
			} 
			else if (nums[index] == nums[prev]) {
				max = Math.max(max,1 + function(nums,dp,vis,index + 1,rem,index));
			}
		}
		max = Math.max(max,function(nums,dp,vis,index + 1,rem,prev));
		if (prev != -1) {
			vis[index][prev][rem] = true;
			dp[index][prev][rem] = max;
		}
		return max;
	}
	int maximumLength(int[] nums, int k) {
		int n = nums.length;
		int[][][] dp = new int[n + 1][n + 1][k + 1];
		boolean[][][] vis = new boolean[n + 1][n + 1][k + 1];
		return function(nums,dp,vis,0,k,-1);
	}
}