class Solution {
	boolean check(long n) {
		if (Math.ceil((double) Math.sqrt(n)) == Math.floor((double) Math.sqrt(n))) {
			return true;
		}
		return false;
	}
	long maximumSum(List<Integer> nums) {
		int n = nums.size();
		ArrayList<Integer> perfectSquares = new ArrayList<>();
		for (int i = 1; i < n + 1; i++) {
			if (i * i <= n) {
				perfectSquares.add(i * i);
			}
		}
		long ans = 0;
		for (int i = 1; i < n + 1; i++) {
			long curAns = nums.get(i - 1);
			for (int j = 0; j < perfectSquares.size(); j++) {
				int cur = check(i) ? perfectSquares.get(j) : i * perfectSquares.get(j);
				if (cur > n || i >= cur) {
					continue;
				}
				curAns = curAns + nums.get(cur - 1);
			}
			ans = Math.max(ans,curAns);
		}
		return ans;
	}
}