class Solution {
	List<TreeNode> allPossibleFBT(int n) {
		List<TreeNode> list = new ArrayList<>();
		if (n % 2 == 0) {
			return list;
		}
		if (n == 1) {
			list.add(new TreeNode(0));
			return list;
		}
		for (int i = 1; i <= (n - 1) / 2; i += 2) {
			List<TreeNode> lefts = allPossibleFBT(i);
			List<TreeNode> rights = allPossibleFBT(n - 1);
			for (TreeNode l: lefts) {	
				for (TreeNode r: rights) {	
					TreeNode root = new TreeNode(0, l, r);
					list.add(root);
					if (i != (n - 1) / 2) {
						root = new TreeNode(0, r, l);
						list.add(root);
					}
				}
			}
		}
		return list;
	}
}