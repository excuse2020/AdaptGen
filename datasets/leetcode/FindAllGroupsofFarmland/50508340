class Solution {
	int row2, col2, m, n;
	int[][] findFarmland(int[][] land) {
		m = land.length;
		n = land[0].length;
		List<int[]> list = new ArrayList<>();
		boolean[][] visited = new boolean[m][n];
		for (int i = 0; i < m; i++) {
			for (int j = 0; j < n; j++) {
				if (land[i][j] == 1 && !visited[i][j]) {
					row2 = 0;
					col2 = 0;
					solve(i,j,visited,land);
					list.add(new int{i, j, row2, col2});
				}
			}
		}
		int[][] ans = new int[list.size()][4];
		for (int i = 0; i < list.size(); i++) {
			ans[i] = list.get(i);
		}
		return ans;
	}
	void solve(int i, int j, boolean[][] v, int[][] land) {
		if (i >= m || j >= n || i < 0 || j < 0 || v[i][j] || land[i][j] == 0) {
			return;
		}
		v[i][j] = true;
		if (i >= row2 && j >= col2) {
			row2 = i;
			col2 = j;
		}
		solve(i + 1,j,v,land);
		solve(i - 1,j,v,land);
		solve(i,j + 1,v,land);
		solve(i,j - 1,v,land);
	}
}