class Solution {
	int countPrimeSetBits(int left, int right) {
		Set<Integer> primes = new HashSet<>(Arrays.asList(new Integer{2, 3, 5, 7, 11, 13, 17, 19, 23, 27, 29, 31}));
		int totalNumsWithPrimeSetBits = 0;
		for (int i = left; i <= right; i++) {
			if (primes.contains(getSetBitCount(i))) {
				totalNumsWithPrimeSetBits++;
			}
		}
		return totalNumsWithPrimeSetBits;
	}
	int getSetBitCount(int n) {
		int count = 0;
		for (int i = 0; i < 32; i++) {
			if (isIthBitSet(n,i)) {
				count++;
			}
		}
		return count;
	}
	boolean isIthBitSet(int n, int i) {
		return (n & (1 << i)) > 0;
	}
}