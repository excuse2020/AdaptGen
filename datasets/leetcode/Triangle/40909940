class Solution {
	int fn(int i, int j, List<List<Integer>> triangle, HashMap<Pair, Integer> map) {
		Pair key = new Pair(i, j);
		if (map.containsKey(key)) {
			return map.get(key);
		}
		if (i == triangle.size() - 1) {
			return triangle.get(i).get(j);
		}
		int take1 = fn(i + 1,j,triangle,map) + triangle.get(i).get(j);
		int take2 = fn(i + 1,j + 1,triangle,map) + triangle.get(i).get(j);
		map.put(key,Math.min(take1,take2));
		return Math.min(take1,take2);
	}
	int minimumTotal(List<List<Integer>> triangle) {
		HashMap<Pair, Integer> map = new HashMap<>();
		return fn(0,0,triangle,map);
	}
}