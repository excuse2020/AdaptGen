class Solution {
	int countOne(int n) {
		int c = 0;
		while (n > 0) {
			c = c + (n % 2);
			n = n / 2;
		}
		return c;
	}
	int hasConOne(int n) {
		int i = 0, p = -2;
		while (n > 0) {
			int d = n % 2;
			if (d == 1) {
				if (p == i - 1) {
					return p;
				} 
				else {
					p = i;
				}
			}
			n = n / 2;
			i++;
		}
		return -1;
	}
	int minOperations(int n) {
		int s = 0;
		while (hasConOne(n) != -1) {
			n = n + pow(hasConOne(n));
			s++;
		}
		s = s + countOne(n);
		return s;
	}
	int pow(int n) {
		if (n == 0) {
			return 1;
		}
		return 2 * pow(n - 1);
	}
}