class Solution {
	boolean canFinish(int numCourses, int[][] prerequisites) {
		int[] inDegree = new int[numCourses];
		List<List<Integer>> graph = new ArrayList<>();
		for (int i = 0; i < numCourses; i++) {
			graph.add(new ArrayList<>());
		}
		for (int[] pair: prerequisites) {	
			int a = pair[0];
			int b = pair[1];
			graph.get(b).add(a);
			inDegree[a]++;
		}
		return topologicalSort(numCourses,graph,inDegree);
	}
	boolean topologicalSort(int numCourses, List<List<Integer>> graph, int[] inDegree) {
		Queue<Integer> queue = new LinkedList<>();
		int count = 0;
		for (int i = 0; i < numCourses; i++) {
			if (inDegree[i] == 0) {
				queue.add(i);
				count++;
			}
		}
		while (!queue.isEmpty()) {
			int course = queue.poll();
			for (int next: graph.get(course)) {	
				inDegree[next]--;
				if (inDegree[next] == 0) {
					queue.add(next);
					count++;
				}
			}
		}
		return numCourses == count;
	}
}