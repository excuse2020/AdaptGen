class Solution {
	int minOperations(List<Integer> n, int k) {
		Map<Integer, Integer> mp = new HashMap<>();
		List<Integer> li = new ArrayList();
		for (int i = 1; i <= k; i++) {
			li.add(i);
		}
		int p = n.size();
		for (int i = 0; i < n.size(); i++) {
			if (n.get(i) <= k) {
				mp.put(n.get(i),mp.getOrDefault(n.get(i),0) + 1);
			}
		}
		int c = 0;
		for (int i = p - 1; i >= 0; i--) {
			if (mp.containsKey(n.get(i))) {
				li.remove(n.get(i));
				int count = mp.get(n.get(i));
				if (count > 1) {
					mp.put(n.get(i),count - 1);
				} 
				else {
					mp.remove(n.get(i));
				}
			}
			c++;
			if (li.size() == 0) {
				return c;
			}
			if (mp.isEmpty()) {
				return c;
			}
		}
		return c;
	}
}