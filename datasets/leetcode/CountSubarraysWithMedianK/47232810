class Solution {
	int countSubarrays(int[] nums, int k) {
		int n = nums.length;
		int indexOfK = getIndexOf(nums,k);
		var left = new int[indexOfK + 1];
		var right = new int[n - indexOfK];
		var rightMap = new HashMap<Integer, Integer>();
		for (int i = 1; i < indexOfK + 1; i++) {
			if (nums[indexOfK - i] < k) {
				left[i] = left[i - 1] - 1;
			} 
			else {
				left[i] = left[i - 1] + 1;
			}
		}
		for (int i = 1; i < n - indexOfK; i++) {
			if (nums[indexOfK + i] < k) {
				right[i] = right[i - 1] - 1;
			} 
			else {
				right[i] = right[i - 1] + 1;
			}
			rightMap.put(right[i],rightMap.getOrDefault(right[i],0) + 1);
		}
		int ans = 0;
		for (int i = 0; i < indexOfK + 1; i++) {
			if (left[i] == 0 || left[i] == 1) {
				ans += 1;
			}
			ans += rightMap.getOrDefault(-left[i],0);
			ans += rightMap.getOrDefault(-left[i] + 1,0);
		}
		return ans;
	}
	int getIndexOf(int[] nums, int target) {
		for (int i = 0; i < nums.length; i++) {
			if (target == nums[i]) {
				return i;
			}
		}
		return -1;
	}
}