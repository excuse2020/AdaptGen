class Solution {
	int findKthLargest(int[] nums, int k) {
		k = nums.length - k;
		return quickSelect(0,nums.length - 1,nums,k);
	}
	int quickSelect(int l, int r, int[] nums, int k) {
		int pivot = nums[r];
		int p = l;
		for (int i = l; i < r; i++) {
			if (nums[i] <= pivot) {
				swap(nums,i,p);
				p++;
			}
		}
		swap(nums,p,r);
		if (p < k) {
			return quickSelect(p + 1,r,nums,k);
		} 
		else if (p > k) {
			return quickSelect(l,p - 1,nums,k);
		} 
		else {
			return nums[p];
		}
	}
	void swap(int[] arr, int i, int j) {
		int temp = arr[i];
		arr[i] = arr[j];
		arr[j] = temp;
	}
}