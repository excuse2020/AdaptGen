class Solution {
	int getNewSquare(int[][] board, int square, int n) {
		int row = n - ((square - 1) / n);
		int col = (square - 1) % n;
		col = (n - row) % 2 == 0 ? col : n - col;
		return board[row][col] != -1 ? board[row][col] : square;
	}
	int snakesAndLadders(int[][] board) {
		int n = board.length;
		boolean[] visited = new boolean[n * n];
		Queue<Integer> queue = new LinkedList<>();
		queue.add(1);
		int moves = 0;
		while (!queue.isEmpty()) {
			int size = queue.size();
			moves++;
			for (int i = 0; i < size; i++) {
				int square = queue.poll();
				for (int k = 1; k <= 6; k++) {
					int newSq = getNewSquare(board,square + k,n);
					if (newSq == n * n) {
						return moves;
					}
					if (visited[newSq]) {
						continue;
					}
					visited[newSq] = true;
					queue.add(newSq);
				}
			}
		}
		return -1;
	}
}