class Solution {
	boolean isValid(String s1, String s2) {
		if (s1.length() != s2.length() + 1) {
			return false;
		}
		int i = 0;
		int j = 0;
		while (i != s1.length()) {
			if (j < s2.length() && s1.charAt(i) == s2.charAt(j)) {
				i++;
				j++;
			} 
			else {
				i++;
			}
		}
		if (i == s1.length() && j == s2.length()) {
			return true;
		}
		return false;
	}
	int longestStrChain(String[] words) {
		int n = words.length;
		int dp = new int[n];
		Arrays.fill(dp,1);
		int max_size = 1;
		Arrays.sort(words,(a, b) -> {a.length() - b.length()});
		for (int i = 0; i < n; i++) {
			for (int prev = 0; prev < i; prev++) {
				if (isValid(words[i],words[prev]) && dp[i] < 1 + dp[prev]) {
					dp[i] = 1 + dp[prev];
				}
			}
			max_size = Math.max(dp[i],max_size);
		}
		return max_size;
	}
}