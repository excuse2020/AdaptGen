class Solution {
	long minimumCost(int m, int n, int[] horizontalCut, int[] verticalCut) {
		PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> {b[0] - a[0]});
		for (int i = 0; i < horizontalCut.length; i++) {
			pq.offer(new int{horizontalCut[i], 0});
		}
		for (int i = 0; i < verticalCut.length; i++) {
			pq.offer(new int{verticalCut[i], 1});
		}
		long tCost = 0;
		long hp = 1;
		long vp = 1;
		while (!pq.isEmpty()) {
			int[] cut = pq.poll();
			long cost = cut[0];
			long type = cut[1];
			if (type == 0) {
				tCost += cost * vp;
				hp++;
			} 
			else {
				tCost += cost * hp;
				vp++;
			}
		}
		return tCost;
	}
}