class Solution {
	boolean canFinish(int numCourses, int[][] prerequisites) {
		Map<Integer, Set<Integer>> map = new HashMap<>();
		Map<Integer, Integer> indegree = new HashMap<>();
		for (int[] prerequisite: prerequisites) {	
			int src = prerequisite[1];
			int dest = prerequisite[0];
			if (!map.containsKey(src)) {
				map.put(src,new HashSet<>());
			}
			map.get(src).add(dest);
			indegree.put(dest,indegree.getOrDefault(dest,0) + 1);
			indegree.put(src,indegree.getOrDefault(src,0));
		}
		LinkedList<Integer> queue = new LinkedList<>();
		for (int key: indegree.keySet()) {	
			if (indegree.get(key) == 0) {
				queue.addLast(key);
			}
		}
		int count = 0;
		while (queue.size() != 0) {
			int temp = queue.poll();
			count++;
			if (map.containsKey(temp)) {
				for (int nei: map.get(temp)) {	
					indegree.put(nei,indegree.get(nei) - 1);
					if (indegree.get(nei) == 0) {
						queue.addLast(nei);
					}
				}
			}
		}
		return count == indegree.size();
	}
}