class Solution {
	int minimumOperations(int[] nums, int start, int goal) {
		Queue<Integer> queue = new LinkedList<>();
		HashSet<Integer> generated = new HashSet<Integer>();
		queue.add(start);
		generated.add(start);
		for (int operations = 1, size = 1; !queue.isEmpty(); size = queue.size(), operations++) {
			while (size-- > 0) {
				int x = queue.poll();
				for (int i = 0; i < nums.length; i++) {
					if (process(nums,x + nums[i],generated,queue,goal) || process(nums,x - nums[i],generated,queue,goal)) {
						return operations;
					}
				}
			}
		}
		return -1;
	}
	boolean process(int[] nums, int n, HashSet<Integer> set, Queue<Integer> queue, int goal) {
		if (n == goal) {
			return true;
		}
		if (n >= 0 && n <= 1000 && !set.contains(n)) {
			queue.add(n);
			set.add(n);
		}
		return false;
	}
}