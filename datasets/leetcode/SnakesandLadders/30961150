class Solution {
	void convertTo1D(int[][] board, int[] board1d, int n) {
		boolean flag = true;
		int k = 1;
		for (int j = n - 1; j >= 0; j--) {
			int[] row = board[j];
			if (flag) {
				for (int i = 0; i < n; i++) {
					board1d[k] = row[i];
					k++;
				}
				flag = !flag;
			} 
			else {
				for (int i = row.length - 1; i >= 0; i--) {
					board1d[k] = row[i];
					k++;
				}
				flag = !flag;
			}
		}
	}
	int snakesAndLadders(int[][] board) {
		int n = board.length;
		int[] board1d = new int[(n * n) + 1];
		int[] dist = new int[(n * n) + 1];
		Queue<Integer> q = new LinkedList<>();
		convertTo1D(board,board1d,n);
		Arrays.fill(dist,-1);
		q.add(1);
		dist[1] = 0;
		while (!q.isEmpty()) {
			int curr = q.poll();
			for (int i = curr + 1; i <= curr + 6 && i < board1d.length; i++) {
				int d = (board1d[i] != -1) ? board1d[i] : i;
				if (dist[d] == -1) {
					dist[d] = dist[curr] + 1;
					q.add(d);
				}
			}
		}
		return dist[n * n];
	}
}