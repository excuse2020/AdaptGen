class Solution {
	int numSubmatrixSumTarget(int[][] matrix, int target) {
		int m = matrix.length, n = matrix[0].length;
		int count = 0;
		for (int r = 0; r < m; r++) {
			for (int c = 1; c < n; c++) {
				matrix[r][c] += matrix[r][c - 1];
			}
		}
		for (int c1 = 0; c1 < n; c1++) {
			for (int c2 = c1; c2 < n; c2++) {
				Map<Integer, Integer> map = new HashMap<>();
				int sum = 0;
				map.put(sum,1);
				for (int r = 0; r < m; r++) {
					sum += matrix[r][c2] - ((c1 > 0) ? matrix[r][c1 - 1] : 0);
					count += map.getOrDefault(sum - target,0);
					map.put(sum,map.getOrDefault(sum,0) + 1);
				}
			}
		}
		return count;
	}
}