class Solution {
	int[][] matrixBlockSum(int[][] mat, int k) {
		for (int i = 0; i < mat.length; i++) {
			for (int j = 0; j < mat[0].length; j++) {
				if (i == 0 && j == 0) {
					continue;
				} 
				else if (i == 0) {
					mat[i][j] += mat[i][j - 1];
				} 
				else if (j == 0) {
					mat[i][j] += mat[i - 1][j];
				} 
				else {
					mat[i][j] += (mat[i][j - 1] + mat[i - 1][j] - mat[i - 1][j - 1]);
				}
			}
		}
		int ans = new int[mat.length][mat[0].length];
		for (int i = 0; i < ans.length; i++) {
			for (int j = 0; j < ans[0].length; j++) {
				int first_corner_i = Math.max(0,i - k);
				int first_corner_j = Math.max(0,j - k);
				int second_corner_i = Math.min(mat.length - 1,i + k);
				int second_corner_j = Math.min(mat[0].length - 1,j + k);
				int sum = mat[second_corner_i][second_corner_j];
				if (first_corner_i - 1 >= 0) {
					sum -= mat[first_corner_i - 1][second_corner_j];
				}
				if (first_corner_j - 1 >= 0) {
					sum -= mat[second_corner_i][first_corner_j - 1];
				}
				if (first_corner_i - 1 >= 0 && first_corner_j - 1 >= 0) {
					sum += mat[first_corner_i - 1][first_corner_j - 1];
				}
				ans[i][j] = sum;
			}
		}
		return ans;
	}
}