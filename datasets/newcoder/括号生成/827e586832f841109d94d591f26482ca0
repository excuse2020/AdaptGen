class Solution {
	int stackLevel = 0;
	void backTrack2(int left, int right, String output, ArrayList<String> res, int n) {
		if (left == n && right == n) {
			res.add(output);
			return;
		}
		if (left < n) {
			backTrack2(left + 1,right,output + "(",res,n);
		}
		if (right < n && left > right) {
			backTrack2(left,right + 1,output + ")",res,n);
		}
	}
	void backtrack(int left, int right, int n, String out, List<String> res) {
		if (left == n && right == n) {
			res.add(out.toString());
			return;
		}
		if (left < n) {
			backtrack(left + 1,right,n,out + "(",res);
		}
		if (right < n && left > right) {
			backtrack(left,right + 1,n,out + ")",res);
		}
	}
	ArrayList<String> generateParenthesis(int n) {
		ArrayList<String> res = new ArrayList<String>();
		StringBuffer out = new StringBuffer();
		backtrack(0,0,n,"",res);
		return res;
	}
	ArrayList<String> generateParenthesis2(int n) {
		ArrayList<String> res = new ArrayList<String>();
		String output = new String();
		backTrack2(0,0,output,res,n);
		return res;
	}
}