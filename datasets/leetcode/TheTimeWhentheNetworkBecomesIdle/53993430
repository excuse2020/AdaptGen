class Solution {
	int networkBecomesIdle(int[][] edges, int[] patience) {
		int n = patience.length;
		List<Integer>[] adjList = new List[n];
		for (int i = 0; i < n; i++) {
			adjList[i] = new LinkedList();
		}
		for (int[] edge: edges) {	
			adjList[edge[0]].add(edge[1]);
			adjList[edge[1]].add(edge[0]);
		}
		int distanceFromSrc = new int[n];
		Arrays.fill(distanceFromSrc,n + 1);
		PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> {a[1] - b[1]});
		pq.add(new int{0, 0});
		distanceFromSrc[0] = 0;
		while (!pq.isEmpty()) {
			int[] temp = pq.poll();
			for (int nextNode: adjList[temp[0]]) {	
				if (distanceFromSrc[nextNode] > distanceFromSrc[temp[0]] + 1) {
					distanceFromSrc[nextNode] = distanceFromSrc[temp[0]] + 1;
					pq.add(new int{nextNode, distanceFromSrc[nextNode]});
				} 
				else {
					continue;
				}
			}
		}
		int ans = 0;
		for (int i = 1; i < n; i++) {
			int noOfPacketsSent = (2 * distanceFromSrc[i] - 1) / patience[i];
			int lastPacketSentTime = noOfPacketsSent * patience[i];
			int lastAcknowledgeReceiveTime = lastPacketSentTime + 2 * distanceFromSrc[i];
			ans = Math.max(lastAcknowledgeReceiveTime,ans);
		}
		return ans + 1;
	}
}