class Solution {
	void dfs(int node, ArrayList<ArrayList<Integer>> adj, int[] vis) {
		vis[node] = 1;
		for (int it: adj.get(node)) {	
			if (vis[it] == 0) {
				dfs(it,adj,vis);
			}
		}
	}
	int findCircleNum(int[][] isC) {
		int n = isC.length;
		ArrayList<ArrayList<Integer>> adj = new ArrayList<>();
		for (int i = 0; i < n; i++) {
			adj.add(new ArrayList<>());
		}
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < n; j++) {
				if (isC[i][j] == 1 && i != j) {
					adj.get(i).add(j);
					adj.get(j).add(i);
				}
			}
		}
		int[] vis = new int[n];
		int cnt = 0;
		for (int i = 0; i < n; i++) {
			if (vis[i] == 0) {
				cnt++;
				dfs(i,adj,vis);
			}
		}
		return cnt;
	}
}