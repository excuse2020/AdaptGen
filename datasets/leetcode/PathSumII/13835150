class Solution {
	List<List<Integer>> pathSum(TreeNode root, int targetSum) {
		List<Integer> currPath = new ArrayList<>();
		List<List<Integer>> allPaths = new ArrayList<>();
		pathSum(root,targetSum,currPath,allPaths);
		return allPaths;
	}
	void pathSum(TreeNode root, int targetSum, List<Integer> currPath, List<List<Integer>> allPaths) {
		if (root == null) {
			return;
		}
		if (root.left == null && root.right == null && targetSum - root.val == 0) {
			currPath.add(root.val);
			allPaths.add(new ArrayList<>(currPath));
			currPath.remove(currPath.size() - 1);
			return;
		}
		currPath.add(root.val);
		pathSum(root.left,targetSum - root.val,currPath,allPaths);
		pathSum(root.right,targetSum - root.val,currPath,allPaths);
		currPath.remove(currPath.size() - 1);
	}
}