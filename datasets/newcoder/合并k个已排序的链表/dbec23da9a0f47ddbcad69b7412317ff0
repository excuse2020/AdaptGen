class Solution {
	boolean isfull(ListNode[] arr, int k) {
		return k == arr.length;
	}
	ListNode mergeKLists(ArrayList<ListNode> lists) {
		ListNode ret = null;
		int len = lists.size();
		ListNode[] arr = new ListNode[10];
		int k = 0;
		for (int i = 0; i < len; i++) {
			ListNode cur = lists.get(i);
			while (cur != null) {
				if (isfull(arr,k)) {
					arr = Arrays.copyOf(arr,arr.length * 2);
				}
				arr[k] = cur;
				k++;
				cur = cur.next;
			}
		}
		for (int i = 0; i < k; i++) {
			arr[i].next = null;
		}
		quickSort(arr,k);
		ret = arr[0];
		ListNode cur = ret;
		for (int i = 1; i < k; i++) {
			cur.next = arr[i];
			cur = cur.next;
		}
		return ret;
	}
	int parttion(ListNode[] arr, int left, int right) {
		ListNode priovt = arr[left];
		while (left < right) {
			while (left < right && arr[right].val > priovt.val) {
				right--;
			}
			arr[left] = arr[right];
			while (left < right && arr[left].val <= priovt.val) {
				left++;
			}
			arr[right] = arr[left];
		}
		arr[left] = priovt;
		return left;
	}
	void quick(ListNode[] arr, int left, int right) {
		if (left >= right) {
			return;
		}
		int privot = parttion(arr,left,right);
		if (privot == 0) {
			quick(arr,left,left);
		} 
		else {
			quick(arr,left,privot - 1);
		}
		if (privot == right) {
			quick(arr,right,right);
		} 
		else {
			quick(arr,privot + 1,right);
		}
	}
	void quickSort(ListNode[] arr, int k) {
		quick(arr,0,k - 1);
	}
}