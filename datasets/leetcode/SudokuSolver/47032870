class Solution {
	boolean isSafe(char[][] board, int row, int col, int num) {
		for (int i = 0; i < board.length; i++) {
			if (board[row][i] == num) {
				return false;
			}
		}
		for (int i = 0; i < board[0].length; i++) {
			if (board[i][col] == num) {
				return false;
			}
		}
		int sqrt = (int) (Math.sqrt(board.length));
		int rowStart = row - row % sqrt;
		int colStart = col - col % sqrt;
		for (int i = rowStart; i < rowStart + sqrt; i++) {
			for (int j = colStart; j < colStart + sqrt; j++) {
				if (board[i][j] == num) {
					return false;
				}
			}
		}
		return true;
	}
	boolean solve(char[][] board, int row, int col) {
		if (row == board.length) {
			return true;
		}
		if (col == board[0].length) {
			return solve(board,row + 1,0);
		}
	}
	void solveSudoku(char[][] board) {
		solve(board,0,0);
	}
}