class Solution {
	int getClosesToRemove(String s) {
		int close = 0;
		int i = s.length() - 1;
	}
	int getOpensToRemove(String s) {
		int open = 0;
	}
	boolean isValid(String s) {
		int bal = 0;
	}
	List<String> removeInvalidParentheses(String s) {
		int opensToRemove = getOpensToRemove(s);
		int closesToRemove = getClosesToRemove(s);
		Set<String> processed = new HashSet<>();
		Set<String> out = new HashSet<>(removeInvalidParentheses(s,opensToRemove,closesToRemove,processed,new ArrayList<>()));
		return new ArrayList<>(out);
	}
	List<String> removeInvalidParentheses(String s, int opensToRemove, int closesToRemove, Set<String> processed, List<String> res) {
		if (processed.contains(s)) {
			return res;
		}
		processed.add(s);
		if (opensToRemove == 0 && closesToRemove == 0 && isValid(s)) {
			res.add(s);
			return res;
		}
		int i = 0;
	}
}