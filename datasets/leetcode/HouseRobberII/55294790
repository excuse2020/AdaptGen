class Solution {
	int rob(int[] nums) {
		if (nums.length == 1) {
			return nums[0];
		}
		ArrayList<Integer> arr1 = new ArrayList<>();
		ArrayList<Integer> arr2 = new ArrayList<>();
		int n = nums.length;
		for (int i = 0; i < n; i++) {
			if (i != 0) {
				arr1.add(nums[i]);
			}
			if (i != n - 1) {
				arr2.add(nums[i]);
			}
		}
		int[] dp1 = new int[arr1.size()];
		Arrays.fill(dp1,-1);
		int[] dp2 = new int[arr2.size()];
		Arrays.fill(dp2,-1);
		int ans1 = solve(arr1.size() - 1,arr1,dp1);
		int ans2 = solve(arr2.size() - 1,arr2,dp2);
		return Math.max(ans1,ans2);
	}
	int solve(int ind, ArrayList<Integer> nums, int[] dp) {
		if (ind == 0) {
			return nums.get(ind);
		}
		if (ind < 0) {
			return 0;
		}
		if (dp[ind] != -1) {
			return dp[ind];
		}
		int pick = nums.get(ind) + (ind >= 2 ? solve(ind - 2,nums,dp) : 0);
		int notpick = solve(ind - 1,nums,dp);
		return dp[ind] = Math.max(pick,notpick);
	}
}