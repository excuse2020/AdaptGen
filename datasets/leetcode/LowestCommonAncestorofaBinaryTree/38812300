class Solution {
	boolean findPath(TreeNode root, TreeNode target, ArrayList<TreeNode> path) {
		if (root == null) {
			return false;
		}
		path.add(root);
		if (root == target) {
			return true;
		}
		boolean left = findPath(root.left,target,path);
		boolean right = findPath(root.right,target,path);
		if (left || right) {
			return true;
		}
		path.remove(path.size() - 1);
		return false;
	}
	TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
		if (root == null) {
			return null;
		}
		ArrayList<TreeNode> l1 = new ArrayList<>();
		ArrayList<TreeNode> l2 = new ArrayList<>();
		findPath(root,p,l1);
		findPath(root,q,l2);
		int i = 0;
		while (i < l1.size() && i < l2.size() && l1.get(i) == l2.get(i)) {
			i++;
		}
		return l1.get(--i);
	}
}