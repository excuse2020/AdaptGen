class Solution {
	int maxPerformance(int n, int[] speed, int[] efficiency, int k) {
		long mod = 1000000007;
		int[][] arr = new int[n][2];
		for (int i = 0; i < n; i++) {
			arr[i][0] = speed[i];
			arr[i][1] = efficiency[i];
		}
		Arrays.sort(arr,(a, b) -> {b[1] - a[1]});
		long sum = 0;
		PriorityQueue<Integer> q = new PriorityQueue<>();
		long ans = 0;
		for (int i = 0; i < k; i++) {
			sum = (sum + arr[i][0]);
			ans = Math.max(ans,sum * arr[i][1]);
			q.offer(arr[i][0]);
		}
		for (int i = k; i < n; i++) {
			sum = (sum + arr[i][0] - q.poll());
			q.offer(arr[i][0]);
			ans = Math.max(ans,sum * arr[i][1]);
		}
		return (int) (ans % mod);
	}
}