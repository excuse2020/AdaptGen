class Solution {
	HashMap<Integer, Integer> map;
	TreeNode build(int[] pre, int preStart, int preEnd, int[] in, int inStart, int inEnd) {
		if (preStart > preEnd || inStart > inEnd) {
			return null;
		}
		TreeNode root = new TreeNode(pre[preStart]);
		int inindex = map.get(pre[preStart]);
		int preindex = inindex - inStart + preStart;
		root.left = build(pre,preStart + 1,preindex,in,inStart,inindex - 1);
		root.right = build(pre,preindex + 1,preEnd,in,inindex + 1,inEnd);
		return root;
	}
	TreeNode reConstructBinaryTree(int[] pre, int[] in) {
		int preLen = pre.length;
		int inLen = in.length;
		if (pre.length != in.length) {
			throw new RuntimeException("输入有误！")
		}
		map = new HashMap();
		for (int index = 0; index < in.length; index++) {
			map.put(in[index],index);
		}
		return build(pre,0,preLen - 1,in,0,inLen - 1);
	}
}