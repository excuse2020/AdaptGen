class Solution {
	int maxProduct(int[] nums) {
		int n = nums.length;
		if (n == 1 || n == 0) {
			return 0;
		}
		quickSort(nums,0,n - 1);
		return (nums[n - 1] - 1) * (nums[n - 2] - 1);
	}
	int partition(int[] nums, int low, int high) {
		int pivot = nums[low];
		int i = low;
		int j = high;
		while (i < j) {
			while (i < high && nums[i] <= pivot) {
				i++;
			}
			while (j > low && nums[j] > pivot) {
				j--;
			}
			if (i < j) {
				swap(nums,i,j);
			}
		}
		swap(nums,low,j);
		return j;
	}
	void quickSort(int[] nums, int low, int high) {
		if (low < high) {
			int pi = partition(nums,low,high);
			quickSort(nums,low,pi - 1);
			quickSort(nums,pi + 1,high);
		}
	}
	void swap(int[] nums, int i, int j) {
		int temp = nums[i];
		nums[i] = nums[j];
		nums[j] = temp;
	}
}