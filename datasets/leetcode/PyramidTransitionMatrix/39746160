class Solution {
	Map<String, Boolean> dp;
	Map<String, List<Character>> mp;
	boolean helper(String bottom, int idx, String temp) {
		if (bottom.length() == 1) {
			return true;
		}
		if (dp.containsKey(bottom + temp)) {
			return dp.get(bottom + temp);
		}
		if (idx == bottom.length()) {
			return helper(temp,1,"");
		}
		String key = "" + bottom.charAt(idx - 1);
		if (!mp.containsKey(key)) {
			dp.put(bottom + temp,false);
			return false;
		}
		for (var c: mp.get(key)) {	
			if (helper(bottom,idx + 1,temp + c)) {
				dp.put(bottom + temp,true);
				return true;
			}
		}
		dp.put(bottom + temp,false);
		return false;
	}
	boolean pyramidTransition(String bottom, List<String> allowed) {
		mp = new HashMap<>();
		dp = new HashMap<>();
		for (var a: allowed) {	
			String key = "" + a.charAt(0);
			if (!mp.containsKey(key)) {
				mp.put(key,new ArrayList<>());
			}
			mp.get(key).add(a.charAt(2));
		}
		return helper(bottom,1,"");
	}
}