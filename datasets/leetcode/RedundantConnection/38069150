class Solution {
	int[] parents;
	int[] ranks;
	int find(int n) {
		int p = parents[n];
		while (p != parents[p]) {
			parents[p] = parents[parents[p]];
			p = parents[p];
		}
		return p;
	}
	int[] findRedundantConnection(int[][] edges) {
		parents = new int[edges.length + 1];
		ranks = new int[edges.length + 1];
		for (int i = 1; i <= edges.length; i++) {
			parents[i] = i;
			ranks[i] = 1;
		}
		for (int i = 0; i < edges.length; i++) {
			if (!union(edges[i][0],edges[i][1])) {
				return edges[i];
			}
		}
		return null;
	}
	boolean union(int n1, int n2) {
		int p1 = find(n1);
		int p2 = find(n2);
		if (p1 == p2) {
			return false;
		}
		if (ranks[p1] >= ranks[p2]) {
			parents[p2] = p1;
			ranks[p1] += ranks[p2];
		} 
		else {
			parents[p1] = p2;
			ranks[p2] += ranks[p1];
		}
		return true;
	}
}