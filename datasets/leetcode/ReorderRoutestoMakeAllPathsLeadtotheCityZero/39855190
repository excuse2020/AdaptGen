class Solution {
	int minReorder(int n, int[][] connections) {
		List<List<Integer>> adj = new ArrayList<>();
		List<List<Integer>> ud = new ArrayList<>();
		for (int i = 0; i <= n; i++) {
			adj.add(new ArrayList<>());
			ud.add(new ArrayList<>());
		}
		for (int[] row: connections) {	
			adj.get(row[0]).add(row[1]);
			ud.get(row[0]).add(row[1]);
			ud.get(row[1]).add(row[0]);
		}
		int reconnect = 0;
		Queue<Integer> queue = new LinkedList<>();
		boolean[] vis = new boolean[n];
		queue.offer(0);
		while (!queue.isEmpty()) {
			int currNode = queue.poll();
			vis[currNode] = true;
			for (int neigh: ud.get(currNode)) {	
				if (!vis[neigh]) {
					for (int i: adj.get(currNode)) {	
						if (i == neigh) {
							reconnect++;
							break;
						}
					}
					queue.offer(neigh);
				}
			}
		}
		return reconnect;
	}
}