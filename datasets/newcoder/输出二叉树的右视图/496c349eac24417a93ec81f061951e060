class Solution {
	Map<Integer, Integer> map = new HashMap<>();
	TreeNode dfs(int[] pre, int[] vin, int pl, int pr, int vl, int vr) {
		if (pl > pr) {
			return null;
		}
		int rootVal = pre[pl];
		TreeNode root = new TreeNode(rootVal);
		int size = map.get(rootVal) - vl;
		root.left = dfs(pre,vin,pl + 1,pl + size,vl,size - 1);
		root.right = dfs(pre,vin,pl + size,pr,vl + size,vr);
		return root;
	}
	int[] solve(int[] xianxu, int[] zhongxu) {
		int n = xianxu.length;
		for (int i = 0; i < n; i++) {
			map.put(zhongxu[i],i);
		}
		TreeNode root = dfs(xianxu,zhongxu,0,n - 1,0,n - 1);
		List<Integer> list = new ArrayList<>();
		Queue<TreeNode> q = new LinkedList<>();
		q.offer(root);
		int last = -1;
		while (!q.isEmpty()) {
			int size = q.size();
			for (int i = 0; i < size; i++) {
				TreeNode node = q.poll();
				last = node.val;
				if (node.left != null) {
					q.offer(node.left);
				}
				if (node.right != null) {
					q.offer(node.right);
				}
			}
			list.add(last);
		}
		int[] nums = new int[list.size()];
		int i = 0;
		for (int l: list) {	
			nums[i++] = l;
		}
		return nums;
	}
}