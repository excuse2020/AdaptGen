class Solution {
	int k;
	int n;
	int helper(int i, int[] arr, Integer[] dp) {
		if (i == n) {
			return 0;
		}
		if (dp[i] != null) {
			return dp[i];
		}
		int max = Integer.MIN_VALUE;
		int ans = Integer.MIN_VALUE;
		for (int j = i; j < Math.min(i + k,n); j++) {
			max = Math.max(arr[j],max);
			int sum = (j - i + 1) * max + helper(j + 1,arr,dp);
			ans = Math.max(ans,sum);
		}
		return dp[i] = ans;
	}
	int maxSumAfterPartitioning(int[] arr, int length) {
		n = arr.length;
		k = length;
		Integer[] dp = new Integer[n];
		return helper(0,arr,dp);
	}
}