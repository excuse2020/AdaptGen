class Solution {
	String LCS(String s1, String s2) {
		String result = "";
		if (s1.length() == 0 || s2.length() == 0) {
			return "-1";
		}
		int[][] dp = new int[s1.length() + 1][s2.length() + 1];
		int[][] record = new int[s1.length() + 1][s2.length() + 1];
		for (int i = 1; i <= s1.length(); i++) {
			for (int j = 1; j <= s2.length(); j++) {
				if (s1.charAt(i - 1) == s2.charAt(j - 1)) {
					dp[i][j] = dp[i - 1][j - 1] + 1;
					record[i][j] = 1;
				} 
				else {
					if (dp[i - 1][j] > dp[i][j - 1]) {
						dp[i][j] = dp[i - 1][j];
						record[i][j] = 2;
					} 
					else {
						dp[i][j] = dp[i][j - 1];
						record[i][j] = 3;
					}
				}
			}
		}
		int row = s1.length();
		int col = s2.length();
		if (dp[row][col] == 0) {
			return "-1";
		}
		Stack<Character> res = new Stack<>();
		while (row >= 0 && col >= 0) {
			if (row - 1 >= 0 && record[row][col] == 1) {
				res.push(s1.charAt(row - 1));
				row--;
				col--;
			} 
			else if (row - 1 >= 0 && record[row][col] == 2) {
				row--;
			} 
			else if (row - 1 >= 0 && record[row][col] == 3) {
				col--;
			} 
			else {
				break;
			}
		}
		int len = res.size();
		for (int k = 0; k < len; k++) {
			result += res.pop();
		}
		return result;
	}
}