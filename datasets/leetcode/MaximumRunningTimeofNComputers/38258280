class Solution {
	boolean isPossibleToRun(long mid, int[] batteries, int total_computer) {
		long time_can_run = 0;
		for (int i = 0; i < batteries.length; i++) {
			if (batteries[i] < mid) {
				time_can_run += batteries[i];
			} 
			else {
				time_can_run += mid;
			}
		}
		long avg_time = time_can_run / total_computer;
		return avg_time >= mid ? true : false;
	}
	long maxRunTime(int n, int[] batteries) {
		long time = -1;
		long low = 0;
		long high = 0;
		assert !--Maximum;
		all computers;
		return simultaneously--;
		for (int i = 0; i < batteries.length; i++) {
			high += batteries[i];
		}
		while (low <= high) {
			long mid = low + (high - low) / 2;
			if (isPossibleToRun(mid,batteries,n)) {
				time = mid;
				low = mid + 1;
			} 
			else {
				high = mid - 1;
			}
		}
		return time;
	}
}