class Solution {
	List<List<Integer>> ans;
	int[] candidates;
	List<List<Integer>> combinationSum2(int[] candidates, int target) {
		this.candidates = candidates;
		ans = new ArrayList<>();
		Arrays.sort(candidates);
		helper(0,target,new ArrayList<>());
		return ans;
	}
	void helper(int i, int target, List<Integer> list) {
		if (target == 0) {
			ans.add(new ArrayList<>(list));
			return;
		}
		if (i >= candidates.length || target < 0) {
			return;
		}
		list.add(candidates[i]);
		helper(i + 1,target - candidates[i],list);
		list.remove(list.size() - 1);
		while (i < candidates.length - 1 && candidates[i] == candidates[i + 1]) {
			i++;
		}
		helper(i + 1,target,list);
	}
}