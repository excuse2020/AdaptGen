class Solution {
	int getSum(int[][] mat, int i, int j, int k) {
		int M = mat.length;
		int N = mat[0].length;
		int startRow = Math.max(i - k,0);
		int endRow = Math.min(i + k,M - 1);
		int startCol = Math.max(j - k,0);
		int endCol = Math.min(j + k,N - 1);
		int sum = mat[endRow][endCol];
		int up = (startRow - 1 >= 0) ? mat[startRow - 1][endCol] : 0;
		int left = (startCol - 1 >= 0) ? mat[endRow][startCol - 1] : 0;
		int diagnol = (startRow - 1 >= 0 && startCol - 1 >= 0) ? mat[startRow - 1][startCol - 1] : 0;
		sum += diagnol - up;
		return sum;
	}
	int[][] matrixBlockSum(int[][] mat, int k) {
		int M = mat.length;
		int N = mat[0].length;
		int[][] res = new int[M][N];
		for (int i = 0; i < M; i++) {
			for (int j = 1; j < N; j++) {
				mat[i][j] += mat[i][j - 1];
			}
		}
		for (int i = 1; i < M; i++) {
			for (int j = 0; j < N; j++) {
				mat[i][j] += mat[i - 1][j];
			}
		}
		for (int i = 0; i < M; i++) {
			for (int j = 0; j < N; j++) {
				res[i][j] = getSum(mat,i,j,k);
			}
		}
		return res;
	}
}