class Solution {
	boolean isPossibleToEat(int[] piles, int speed, int h) {
		int hours = 0;
		for (int i = 0; i < piles.length; i++) {
			hours += Math.ceil((double) piles[i] / (double) speed);
		}
		if (hours <= h) {
			return true;
		}
		return false;
	}
	int minEatingSpeed(int[] piles, int h) {
		int bananas = 0;
		for (int i: piles) {	
			bananas = Math.max(i,bananas);
		}
		int min = 1, max = bananas;
		int minSpeed = Integer.MAX_VALUE;
		while (min <= max) {
			int avg = (min + max) / 2;
			if (isPossibleToEat(piles,avg,h)) {
				max = avg - 1;
			} 
			else {
				min = avg + 1;
			}
		}
		return min;
	}
}