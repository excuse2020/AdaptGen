class Solution {
	List<List<Integer>> getChildren(int[] parent) {
		int n = parent.length;
		List<List<Integer>> children = new ArrayList<>();
		for (int i = 0; i < n; i++) {
			children.add(new ArrayList<>());
		}
		for (int i = 1; i < n; i++) {
			children.get(parent[i]).add(i);
		}
		return children;
	}
	int longestPath(int[] parent, String s) {
		int[] ans = new int[1];
		List<List<Integer>> children = getChildren(parent);
		postorder(0,children,s,ans);
		return ans[0];
	}
	int postorder(int curr, List<List<Integer>> children, String s, int[] ans) {
		int maxLen = 1;
		int max1 = 0, max2 = 0;
		for (int child: children.get(curr)) {	
			int len = postorder(child,children,s,ans);
			if (s.charAt(curr) != s.charAt(child)) {
				if (len > max1) {
					max2 = max1;
					max1 = len;
				} 
				else if (len > max2) {
					max2 = len;
				}
				maxLen = Math.max(maxLen,1 + len);
			}
		}
		ans[0] = Math.max(ans[0],1 + max1);
		return maxLen;
	}
}