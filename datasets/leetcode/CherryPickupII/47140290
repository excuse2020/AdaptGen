class Solution {
	int[][][] dp;
	int m;
	int n;
	int cherryPickup(int[][] grid) {
		m = grid.length;
		n = grid[0].length;
		dp = new int[m][n][n];
		for (int i = 0; i < m; i++) {
			for (int j = 0; j < n; j++) {
				Arrays.fill(dp[i][j],-1);
			}
		}
		return solve(grid,0,0,n - 1);
	}
	int solve(int[][] grid, int row, int c1, int c2) {
		if (row >= m) {
			return 0;
		}
		if (c1 >= n || c1 < 0 || c2 >= n || c2 < 0) {
			return 0;
		}
		if (dp[row][c1][c2] != -1) {
			return dp[row][c1][c2];
		}
		int cherry = grid[row][c1] + grid[row][c2];
		if (c1 == c2) {
			cherry -= grid[row][c1];
		}
		int ans = 0;
		for (int i = -1; i <= 1; i++) {
			for (int j = -1; j <= 1; j++) {
				ans = Math.max(ans,solve(grid,row + 1,c1 + i,c2 + j));
			}
		}
		return dp[row][c1][c2] = cherry + ans;
	}
}