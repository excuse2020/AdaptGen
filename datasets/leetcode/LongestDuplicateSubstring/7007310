class Solution {
	String lcp(String s, String t) {
		int N = Math.min(s.length(),t.length());
		for (int i = 0; i < N; i++) {
			if (s.charAt(i) != t.charAt(i)) {
				return s.substring(0,i);
			}
		}
		return s.substring(0,N);
	}
	String longestDupSubstring(String S) {
		int N = S.length();
		String[] suffixes = new String[N];
		for (int i = 0; i < N; i++) {
			suffixes[i] = S.substring(i,N);
		}
		Arrays.sort(suffixes);
		String lrs = "";
		for (int i = 0; i < N - 1; i++) {
			String x = lcp(suffixes[i],suffixes[i + 1]);
			if (x.length() > lrs.length()) {
				lrs = x;
			}
		}
		return lrs;
	}
}