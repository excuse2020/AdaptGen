class Solution {
	int maxLength(int[] arr) {
		int maxLen = 0;
		HashMap<Integer, Integer> hash = new HashMap<>();
		int i = 0, j = 0;
		for (; j < arr.length; ++j) {
			if (hash.containsKey(arr[j])) {
				int k = hash.get(arr[j]);
				maxLen = (j - i) > maxLen ? (j - i) : maxLen;
				while (i <= k) {
					hash.remove(arr[i]);
					i++;
				}
			}
			hash.put(arr[j],j);
		}
		maxLen = (j - i) > maxLen ? (j - i) : maxLen;
		return maxLen;
	}
}
class Solution {
	int maxLength(int[] arr) {
		int maxLen = 0;
		Queue<Integer> q = new LinkedList<>();
		for (int i = 0; i < arr.length; ++i) {
			while (q.contains(arr[i])) {
				q.poll();
			}
			q.add(arr[i]);
			maxLen = Math.max(maxLen,q.size());
		}
		return maxLen;
	}
}