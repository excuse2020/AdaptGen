class Solution {
	int maxSumAfterPartitioning(int[] arr, int k) {
		int[] dp = new int[arr.length];
		Arrays.fill(dp,-1);
		return solveMemo(arr,k,0,dp);
	}
	int solveMemo(int[] arr, int k, int idx, int[] dp) {
		if (idx == arr.length) {
			return 0;
		}
		if (dp[idx] != -1) {
			return dp[idx];
		}
		int max = 0;
		int res = 0;
		for (int i = idx; i < idx + k && i < arr.length; i++) {
			max = Math.max(max,arr[i]);
			res = Math.max(res,solveMemo(arr,k,i + 1,dp) + (i - idx + 1) * max);
		}
		return dp[idx] = res;
	}
}