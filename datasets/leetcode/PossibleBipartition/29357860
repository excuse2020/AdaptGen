class Solution {
	boolean possibleBipartition(int n, int[][] dislikes) {
		List<List<Integer>> graph = new ArrayList<>();
		for (int i = 0; i <= n; i++) {
			graph.add(new ArrayList<Integer>());
		}
		for (int[] dislike: dislikes) {	
			int source = dislike[0];
			int dest = dislike[1];
			graph.get(source).add(dest);
			graph.get(dest).add(source);
		}
		int color = new int[n + 1];
		for (int i = 1; i <= n; i++) {
			if (color[i] != 0) {
				continue;
			}
			color[i] = 1;
			Queue<Integer> queue = new LinkedList<>();
			queue.add(i);
			while (!queue.isEmpty()) {
				int current = queue.poll();
				for (int k = 0; k < graph.get(current).size(); k++) {
					int adj = graph.get(current).get(k);
					if (color[adj] == color[current]) {
						return false;
					}
					if (color[adj] == 0) {
						color[adj] = -color[current];
						queue.add(adj);
					}
				}
			}
		}
		return true;
	}
}