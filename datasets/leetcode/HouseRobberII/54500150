class Solution {
	int SpaceOptimal(int N, ArrayList<Integer> nums) {
		int prev = nums.get(0);
		int prev2 = 0;
		int curi = 0;
		for (int i = 1; i < N; i++) {
			int pick = nums.get(i);
			if (i > 1) {
				pick += prev2;
			}
			int notpick = 0 + prev;
			curi = Math.max(pick,notpick);
			prev2 = prev;
			prev = curi;
		}
		return prev;
	}
	int rob(int[] nums) {
		int N = nums.length;
		if (N == 1) {
			return nums[0];
		}
		ArrayList<Integer> arr1 = new ArrayList<>();
		ArrayList<Integer> arr2 = new ArrayList<>();
		for (int i = 0; i < N; i++) {
			if (i != 0) {
				arr1.add(nums[i]);
			}
			if (i != (N - 1)) {
				arr2.add(nums[i]);
			}
		}
		return Math.max(SpaceOptimal(N - 1,arr1),SpaceOptimal(N - 1,arr2));
	}
}