class Solution {
	void DFS(List<List<Integer>> edge, int start, List<Integer> curr, boolean[] visited) {
		visited[start] = true;
		for (int i = 0; i < edge.get(start).size(); i++) {
			if (!visited[edge.get(start).get(i)]) {
				curr.add(edge.get(start).get(i));
				DFS(edge,edge.get(start).get(i),curr,visited);
			}
		}
	}
	List<List<Integer>> getAncestors(int n, int[][] edges) {
		List<List<Integer>> edge = new ArrayList<>();
		for (int i = 0; i < n; i++) {
			edge.add(new ArrayList<>());
		}
		for (int[] temp: edges) {	
			edge.get(temp[1]).add(temp[0]);
		}
		List<List<Integer>> ans = new ArrayList<>();
		for (int i = 0; i < n; i++) {
			List<Integer> curr = new ArrayList<>();
			boolean[] visited = new boolean[n];
			DFS(edge,i,curr,visited);
			Collections.sort(curr);
			ans.add(curr);
		}
		return ans;
	}
}