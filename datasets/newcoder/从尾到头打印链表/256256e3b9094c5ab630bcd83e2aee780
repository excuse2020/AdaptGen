class Solution {
	ArrayList<Integer> printListFromTailToHead(ListNode listNode) {
		ArrayList<Integer> list = new ArrayList<>();
		ListNode pre = null;
		ListNode cur = listNode;
		ListNode temp = cur;
		while (cur != null) {
			temp = cur.next;
			cur.next = pre;
			pre = cur;
			cur = temp;
		}
		while (pre != null) {
			list.add(pre.val);
			pre = pre.next;
		}
		return list;
	}
	ArrayList<Integer> printListFromTailToHead1(ListNode listNode) {
		ArrayList<Integer> list = new ArrayList<>();
		while (listNode != null) {
			list.add(0,listNode.val);
			listNode = listNode.next;
		}
		return list;
	}
	ArrayList<Integer> printListFromTailToHead2(ListNode listNode) {
		ArrayList<Integer> list = new ArrayList<>();
		while (listNode != null) {
			printListFromTailToHead2(listNode.next);
			list.add(listNode.val);
		}
		return list;
	}
	ArrayList<Integer> printListFromTailToHead3(ListNode listNode) {
		ArrayList<Integer> list = new ArrayList<>();
		while (listNode != null) {
			list.add(listNode.val);
			listNode = listNode.next;
		}
		Collections.reverse(list);
		return list;
	}
	ArrayList<Integer> printListFromTailToHead4(ListNode listNode) {
		ArrayList<Integer> list = new ArrayList<>();
		Stack<Integer> stack = new Stack<>();
		while (listNode != null) {
			stack.push(listNode.val);
			listNode = listNode.next;
		}
		while (!stack.empty()) {
			list.add(stack.pop());
		}
		return list;
	}
}