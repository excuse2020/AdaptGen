class Solution {
	long dfs(int node, int isEven, int[] nums, int k, long[][] memo) {
		if (node == nums.length) {
			return isEven == 1 ? 0 : Integer.MIN_VALUE;
		}
		if (memo[node][isEven] != -1) {
			return memo[node][isEven];
		}
		long noXorDone = nums[node] + dfs(node + 1,isEven,nums,k,memo);
		long xorDone = (nums[node] ^ k) + dfs(node + 1,isEven ^ 1,nums,k,memo);
		return memo[node][isEven] = Math.max(xorDone,noXorDone);
	}
	long maximumValueSum(int[] nums, int k, int[][] edges) {
		int n = nums.length;
		long[][] memo = new long[n][2];
		for (long[] row: memo) {	
			Arrays.fill(row,-1);
		}
		return dfs(0,1,nums,k,memo);
	}
}