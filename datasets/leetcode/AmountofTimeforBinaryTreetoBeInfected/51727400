class Solution {
	int amountOfTime(TreeNode root, int start) {
		Map<TreeNode, TreeNode> parentMap = new HashMap<>();
		fillMap(root,parentMap);
		TreeNode startNode = findStartNode(root,start);
		if (startNode == null) {
			return 0;
		}
		Queue<TreeNode> q = new LinkedList<>();
		Map<TreeNode, Boolean> visited = new HashMap<>();
		q.offer(startNode);
		visited.put(startNode,true);
		int currentDistance = -1;
		while (!q.isEmpty()) {
			int size = q.size();
			boolean hasNewInfections = false;
			for (int i = 0; i < size; i++) {
				TreeNode current = q.poll();
				if (current.left != null && !visited.containsKey(current.left)) {
					q.offer(current.left);
					visited.put(current.left,true);
					hasNewInfections = true;
				}
				if (current.right != null && !visited.containsKey(current.right)) {
					q.offer(current.right);
					visited.put(current.right,true);
					hasNewInfections = true;
				}
				if (parentMap.get(current) != null && !visited.containsKey(parentMap.get(current))) {
					q.offer(parentMap.get(current));
					visited.put(parentMap.get(current),true);
					hasNewInfections = true;
				}
			}
			currentDistance++;
		}
		return currentDistance;
	}
	void fillMap(TreeNode root, Map<TreeNode, TreeNode> parentMap) {
		Queue<TreeNode> q = new LinkedList<>();
		q.offer(root);
		while (!q.isEmpty()) {
			TreeNode curr = q.poll();
			if (curr.left != null) {
				parentMap.put(curr.left,curr);
				q.offer(curr.left);
			}
			if (curr.right != null) {
				parentMap.put(curr.right,curr);
				q.offer(curr.right);
			}
		}
	}
	TreeNode findStartNode(TreeNode root, int start) {
		if (root == null) {
			return null;
		}
		if (root.val == start) {
			return root;
		}
		TreeNode left = findStartNode(root.left,start);
		if (left != null) {
			return left;
		}
		return findStartNode(root.right,start);
	}
}