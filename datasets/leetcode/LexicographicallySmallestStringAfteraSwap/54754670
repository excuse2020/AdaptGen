class Solution {
	String getSmallestString(String s) {
		BigInteger min = new BigInteger(s);
		String returnStatement = "";
		for (int i = 0; i < s.length() - 1; i++) {
			if ((Character.getNumericValue(s.charAt(i)) % 2 == 0 && Character.getNumericValue(s.charAt(i + 1)) % 2 == 0) || (Character.getNumericValue(s.charAt(i)) % 2 != 0 && Character.getNumericValue(s.charAt(i + 1)) % 2 != 0)) {
				String swapElement = swap(s,i,i + 1);
				BigInteger swapElementInteger = new BigInteger(swapElement);
				int result = min.compareTo(swapElementInteger);
				if (result == 1) {
					min = swapElementInteger;
					returnStatement = swapElement;
				}
			}
		}
		if (returnStatement == "") {
			returnStatement = s;
		}
		return returnStatement;
	}
	String swap(String str, int i, int j) {
		StringBuilder strB = new StringBuilder(str);
		char l = strB.charAt(i), r = strB.charAt(j);
		strB.setCharAt(i,r);
		strB.setCharAt(j,l);
		return strB.toString();
	}
}