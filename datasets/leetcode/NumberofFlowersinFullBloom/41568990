class Solution {
	int[] fullBloomFlowers(int[][] flowers, int[] people) {
		int[] ans = new int[people.length];
		int[] newPeople = Arrays.copyOf(people,people.length);
		HashMap<Integer, Integer> map = new HashMap<>();
		PriorityQueue<Integer> pq = new PriorityQueue<>();
		Arrays.sort(newPeople);
		Arrays.sort(flowers,(a, b) -> {Integer.compare(a[0],b[0])});
		int startBloom = 0;
		for (int i = 0; i < newPeople.length; i++) {
			while (startBloom < flowers.length && flowers[startBloom][0] <= newPeople[i]) {
				pq.add(flowers[startBloom][1]);
				startBloom++;
			}
			while (!pq.isEmpty() && pq.peek() < newPeople[i]) {
				pq.poll();
			}
			map.put(newPeople[i],pq.size());
		}
		int index = 0;
		for (int i = 0; i < people.length; i++) {
			ans[index++] = map.get(people[i]);
		}
		return ans;
	}
}