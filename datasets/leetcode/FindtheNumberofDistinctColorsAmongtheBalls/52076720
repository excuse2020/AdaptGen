class Solution {
	int[] queryResults(int limit, int[][] queries) {
		int n = queries.length;
		int[] ans = new int[n];
		HashMap<Integer, Integer> map = new HashMap<>();
		HashMap<Integer, Integer> freq = new HashMap<>();
		for (int i = 0; i < n; i++) {
			if (map.containsKey(queries[i][0])) {
				int cf = freq.get(map.get(queries[i][0])) - 1;
				if (cf == 0) {
					freq.remove(map.get(queries[i][0]));
				} 
				else {
					freq.remove(map.get(queries[i][0]));
					freq.put(map.get(queries[i][0]),cf);
				}
				map.remove(queries[i][0]);
				map.put(queries[i][0],queries[i][1]);
				freq.put(queries[i][1],freq.containsKey(queries[i][1]) ? freq.getOrDefault(queries[i][1],0) + 1 : 1);
				ans[i] = freq.size();
			} 
			else {
				map.put(queries[i][0],queries[i][1]);
				freq.put(queries[i][1],freq.containsKey(queries[i][1]) ? freq.getOrDefault(queries[i][1],0) + 1 : 1);
				ans[i] = freq.size();
			}
		}
		return ans;
	}
}