class Solution {
	HashMap<Integer, Integer> map;
	void calLevel(TreeNode root, int level) {
		if (root == null) {
			return;
		}
		map.put(level,map.getOrDefault(level,0) + root.val);
		calLevel(root.left,level + 1);
		calLevel(root.right,level + 1);
	}
	void func(TreeNode root, int level) {
		if (root == null) {
			return;
		}
		if (root.left == null && root.right == null) {
			return;
		}
		func(root.left,level + 1);
		func(root.right,level + 1);
		int wt = map.get(level + 1);
		int childWt = (root.left == null) ? 0 : root.left.val;
		childWt += (root.right == null) ? 0 : root.right.val;
		if (root.left != null) {
			root.left.val = wt - childWt;
		}
		if (root.right != null) {
			root.right.val = wt - childWt;
		}
	}
	TreeNode replaceValueInTree(TreeNode root) {
		map = new HashMap<>();
		calLevel(root,0);
		func(root,0);
		root.val = 0;
		return root;
	}
}