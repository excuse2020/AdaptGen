class Solution {
	List<List<Integer>> combinationSum3(int k, int n) {
		List<List<Integer>> list = new ArrayList<>();
		int[] a = new int[9];
		for (int i = 0; i < a.length; i++) {
			a[i] = i + 1;
		}
		helper(k,n,a,0,new ArrayList<>(),list);
		return list;
	}
	void helper(int k, int n, int[] a, int i, List<Integer> temp, List<List<Integer>> list) {
		if (k == 0 && n == 0) {
			if (!list.contains(temp)) {
				list.add(new ArrayList<>(temp));
			}
		}
		if (k < 0 || n < 0 || i == a.length) {
			return;
		}
		temp.add(a[i]);
		helper(k - 1,n - a[i],a,i + 1,temp,list);
		temp.remove(temp.size() - 1);
		helper(k,n,a,i + 1,temp,list);
	}
}