class Solution {
	int[][][] dp;
	int kMax = (int) 1e6 + 1;
	int minCost(int[] houses, int[][] cost, int m, int n, int target) {
		dp = new int[target + 1][m][n + 1];
		int c = minCost(houses,cost,m,n,target,0,0);
		return c == kMax ? -1 : c;
	}
	int minCost(int[] houses, int[][] cost, int m, int n, int k, int i, int prevColor) {
		if (i == m || k < 0) {
			return k == 0 ? 0 : kMax;
		}
		if (dp[k][i][prevColor] > 0) {
			return dp[k][i][prevColor];
		}
		if (houses[i] > 0) {
			return minCost(houses,cost,m,n,k - (prevColor == houses[i] ? 0 : 1),i + 1,houses[i]);
		}
		int ans = kMax;
		for (int color = 1; color <= n; ++color) {
			ans = Math.min(ans,cost[i][color - 1] + minCost(houses,cost,m,n,k - (prevColor == color ? 0 : 1),i + 1,color));
		}
		return dp[k][i][prevColor] = ans;
	}
}