class Solution {
	int func(int lo, int[] piles) {
		double sum = 0;
		for (int i = 0; i < piles.length; i++) {
			sum += Math.ceil((double) piles[i] / (double) lo);
		}
		return (int) sum;
	}
	int minEatingSpeed(int[] piles, int h) {
		int max = -1;
		int min = Integer.MAX_VALUE;
		for (int i = 0; i < piles.length; i++) {
			max = Math.max(max,piles[i]);
		}
		int hi = max;
		int lo = 1;
		while (lo <= hi) {
			int mid = (lo + hi) / 2;
			int req = func(mid,piles);
			if (h >= req) {
				hi = mid - 1;
			} 
			else if (req > h) {
				lo = mid + 1;
			} 
			else {
				hi = mid - 1;
			}
		}
		return lo;
	}
}