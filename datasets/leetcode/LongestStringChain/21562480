class Solution {
	boolean isPredecessor(String str1, String str2) {
		for (int i = 0; i < str2.length(); i++) {
			if (str2.charAt(i) == str1.charAt(i) || str2.charAt(i) == str1.charAt(i + 1)) {
			} 
			else {
				return false;
			}
		}
		return true;
	}
	int longestStrChain(String[] words) {
		Arrays.sort(words,(a, b) -> {a.length() - b.length()});
		int[] dp = new int[words.length];
		for (int i = 0; i < dp.length; i++) {
			dp[i] = 1;
		}
		int ans = 1;
		for (int i = 1; i < words.length; i++) {
			for (int j = i - 1; j >= 0; j--) {
				if (words[i].length() == words[j].length() + 1) {
					if (isPredecessor(words[i],words[j])) {
						dp[i] = Math.max(dp[i],dp[j] + 1);
						ans = Math.max(ans,dp[i]);
					}
				}
			}
		}
		return ans;
	}
}