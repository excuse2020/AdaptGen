class Solution {
	int f(int idx, int time, int[] satisfaction, int[][] dp) {
		if (idx > satisfaction.length - 1) {
			return 0;
		}
		if (dp[idx][time - 1] != -1) {
			return dp[idx][time - 1];
		}
		int l = (satisfaction[idx] * time) + f(idx + 1,time + 1,satisfaction,dp);
		int r = (0) + f(idx + 1,time,satisfaction,dp);
		return dp[idx][time - 1] = Math.max(l,r);
	}
	int maxSatisfaction(int[] satisfaction) {
		Arrays.sort(satisfaction);
		int n = satisfaction.length;
		int[][] dp = new int[n][n];
		for (int i = 0; i < n; i++) {
			Arrays.fill(dp[i],-1);
		}
		return f(0,1,satisfaction,dp);
	}
}