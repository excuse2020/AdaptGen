class Solution {
	ListNode middle(ListNode head) {
		ListNode slow = head;
		ListNode fast = head;
		while (fast.next != null && fast.next.next != null) {
			fast = fast.next.next;
			slow = slow.next;
		}
		return slow;
	}
	int pairSum(ListNode head) {
		int count = 0;
		ListNode mid = middle(head);
		ListNode last = reverse(mid);
		ListNode curr = head;
		while (last.next != null) {
			if (last.val + curr.val > count) {
				count = last.val + curr.val;
			}
			last = last.next;
			curr = curr.next;
		}
		return count;
	}
	ListNode reverse(ListNode head) {
		ListNode prev = null;
		ListNode curr = head;
		while (curr != null) {
			ListNode next = curr.next;
			curr.next = prev;
			prev = curr;
			curr = next;
		}
		return prev;
	}
}