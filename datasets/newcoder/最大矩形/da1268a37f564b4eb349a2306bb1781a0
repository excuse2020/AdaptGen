class Solution {
	int help(int[] heights) {
		int n = heights.length;
		int[] left = new int[n];
		int[] right = new int[n];
		Deque<Integer> stack = new ArrayDeque<>();
		for (int i = 0; i < n; i++) {
			while (!stack.isEmpty() && heights[stack.peek()] >= heights[i]) {
				stack.pop();
			}
			left[i] = (stack.isEmpty() ? -1 : stack.peek());
			stack.push(i);
		}
		stack.clear();
		for (int i = n - 1; i >= 0; i--) {
			while (!stack.isEmpty() && heights[stack.peek()] >= heights[i]) {
				stack.pop();
			}
			right[i] = (stack.isEmpty() ? n : stack.peek());
			stack.push(i);
		}
		int max = 0;
		for (int i = 0; i < n; i++) {
			max = Math.max(max,(right[i] - left[i]) * heights[i]);
		}
		return max;
	}
	int maximalRectangle(int[][] matrix) {
		int m = matrix.length;
		int n = matrix[0].length;
		int[] heights = new int[n];
		int maxArea = 0;
		for (int i = 0; i < m; i++) {
			for (int j = 0; j < n; j++) {
				if (matrix[i][j] == 1) {
					heights[j] += 1;
				} 
				else {
					heights[j] = 0;
				}
			}
			maxArea = Math.max(help(heights),maxArea);
		}
		return maxArea;
	}
}