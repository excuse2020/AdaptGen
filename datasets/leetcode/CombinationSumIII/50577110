class Solution {
	void backtrack(List<List<Integer>> result, int k, int target, List<Integer> curr, int start) {
		if (k == 0 && target == 0) {
			result.add(new ArrayList<>(curr));
			return;
		}
		for (int i = start; i <= 9; i++) {
			if (i > target) {
				break;
			}
			curr.add(i);
			backtrack(result,k - 1,target - i,curr,i + 1);
			curr.remove(curr.size() - 1);
		}
	}
	List<List<Integer>> combinationSum3(int k, int n) {
		List<List<Integer>> result = new ArrayList<>();
		backtrack(result,k,n,new ArrayList<>(),1);
		return result;
	}
}