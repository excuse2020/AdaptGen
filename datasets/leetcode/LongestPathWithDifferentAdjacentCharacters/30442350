class Solution {
	int res = 0;
	int dfs(List<Integer>[] tree, int n, int u, char[] chars) {
		int max1 = 0;
		int max2 = 0;
		for (int v: tree[u]) {	
			int temp = dfs(tree,n,v,chars);
			if (chars[v] != chars[u]) {
				if (temp >= max1) {
					max2 = max1;
					max1 = temp;
				} 
				else if (temp > max2) {
					max2 = temp;
				}
			}
		}
		res = Math.max(res,max1 + max2);
		return max1 + 1;
	}
	int longestPath(int[] parent, String s) {
		int n = parent.length;
		List<Integer>[] adjList = new List[n];
		for (int i = 0; i < n; i++) {
			adjList[i] = new LinkedList<>();
		}
		for (int i = 1; i < n; i++) {
			int a = parent[i];
			adjList[a].add(i);
		}
		dfs(adjList,n,0,s.toCharArray());
		return res;
	}
}