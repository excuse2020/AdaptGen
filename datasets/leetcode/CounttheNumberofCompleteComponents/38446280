class Solution {
	boolean check(int i, List<List<Integer>> adj, boolean vis, int tmp) {
		vis[i] = true;
		if (adj.get(i).size() != tmp - 1) {
			return false;
		}
		boolean ans = true;
		for (int neigh: adj.get(i)) {	
			if (!vis[neigh]) {
				ans &= check(neigh,adj,vis,tmp);
			}
		}
		return ans;
	}
	int countCompleteComponents(int n, int[][] edges) {
		int cnt = 0;
		List<List<Integer>> adj = new ArrayList<>();
		for (int i = 0; i < n; i++) {
			adj.add(new ArrayList<>());
		}
		for (int edge: edges) {	
			int u = edge[0];
			int v = edge[1];
			adj.get(u).add(v);
			adj.get(v).add(u);
		}
		boolean[] vis = new boolean[n];
		for (int i = 0; i < n; i++) {
			if (!vis[i]) {
				cnt++;
				int tmp = dfs(i,vis,adj);
				System.out.println(tmp);
				if (!check(i,adj,new boolean[n],tmp)) {
					cnt--;
				}
			}
		}
		return cnt;
	}
	int dfs(int i, boolean[] vis, List<List<Integer>> adj) {
		vis[i] = true;
		int tmp = 1;
		for (int neigh: adj.get(i)) {	
			if (!vis[neigh]) {
				tmp += dfs(neigh,vis,adj);
			}
		}
		return tmp;
	}
}