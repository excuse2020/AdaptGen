class Solution {
	ListNode addInList(ListNode head1, ListNode head2) {
		if (head1 == null) {
			return head2;
		}
		if (head2 == null) {
			return head1;
		}
		ListNode r1 = reverse(head1);
		ListNode r2 = reverse(head2);
		int temp = 0;
		ListNode root = new ListNode(-1);
		ListNode cur = root;
		while (r1 != null || r2 != null) {
			int v1 = (r1 == null) ? 0 : r1.val;
			int v2 = (r2 == null) ? 0 : r2.val;
			int sum = temp + v1;
			temp = sum / 10;
			cur.next = new ListNode(sum % 10);
			cur = cur.next;
			if (r1 != null) {
				r1 = r1.next;
			}
			if (r2 != null) {
				r2 = r2.next;
			}
		}
		if (temp > 0) {
			cur.next = new ListNode(temp);
		}
		return reverse(root.next);
	}
	ListNode reverse(ListNode head1) {
		if (head1 == null) {
			return null;
		}
		ListNode pre = null;
		ListNode next;
		while (head1 != null) {
			next = head1.next;
			head1.next = pre;
			pre = head1;
			head1 = next;
		}
		return pre;
	}
}