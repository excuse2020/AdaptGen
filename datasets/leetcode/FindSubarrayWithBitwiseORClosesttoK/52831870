class Solution {
	void addEle(int[] mapping, int ele) {
		for (int i = 0; i < 32; i++) {
			if (((1 << i) & ele) != 0) {
				mapping[i]++;
			}
		}
		return;
	}
	int calcORres(int[] mapping) {
		int ORres = 0;
		for (int i = 0; i < 32; i++) {
			if (mapping[i] > 0) {
				ORres |= (1 << i);
			}
		}
		return ORres;
	}
	int minimumDifference(int[] nums, int k) {
		int leftPoi = 0;
		int index = 0;
		int minDiff = Integer.MAX_VALUE;
		int[] mapping = new int[32];
		int ORres = 0;
		int n = nums.length;
		while (index < n) {
			addEle(mapping,nums[index]);
			ORres = calcORres(mapping);
			minDiff = Math.min(minDiff,Math.abs(k - ORres));
			while (leftPoi < index && ORres > k) {
				remEle(mapping,nums[leftPoi]);
				ORres = calcORres(mapping);
				minDiff = Math.min(minDiff,Math.abs(k - ORres));
				if (minDiff == 0) {
					return 0;
				}
				leftPoi++;
			}
			if (minDiff == 0) {
				return 0;
			}
			index++;
		}
		return minDiff;
	}
	void remEle(int[] mapping, int ele) {
		for (int i = 0; i < 32; i++) {
			if (((1 << i) & ele) != 0) {
				mapping[i]--;
			}
		}
		return;
	}
}