class Solution {
	int mod = (int) Math.pow(10,9) + 7;
	int countPaths(int[][] grid) {
		int m = grid.length;
		int n = grid[0].length;
		long dp = new long[m][n];
		for (long x: dp) {	
			Arrays.fill(x,-1);
		}
		long ans = 0;
		long p;
		for (int i = 0; i < m; i++) {
			for (int j = 0; j < n; j++) {
				if (dp[i][j] == -1) {
					p = dfs(grid,dp,i,j);
				}
				ans += dp[i][j] % mod;
			}
		}
		return (int) (ans % mod);
	}
	long dfs(int grid, long dp, int i, int j) {
		if (i < 0 || j < 0 || i >= grid.length || j >= grid[0].length) {
			return 0;
		}
		if (dp[i][j] != -1) {
			return dp[i][j];
		}
		long ans = 1;
		if (isPossible(grid,i - 1,j) && grid[i - 1][j] > grid[i][j]) {
			ans += dfs(grid,dp,i - 1,j) % mod;
		}
		if (isPossible(grid,i + 1,j) && grid[i + 1][j] > grid[i][j]) {
			ans += dfs(grid,dp,i + 1,j) % mod;
		}
		if (isPossible(grid,i,j - 1) && grid[i][j - 1] > grid[i][j]) {
			ans += dfs(grid,dp,i,j - 1) % mod;
		}
		if (isPossible(grid,i,j + 1) && grid[i][j + 1] > grid[i][j]) {
			ans += dfs(grid,dp,i,j + 1) % mod;
		}
		return dp[i][j] = ans;
	}
	boolean isPossible(int grid, int i, int j) {
		if (i < 0 || j < 0 || i >= grid.length || j >= grid[0].length) {
			return false;
		}
		return true;
	}
}