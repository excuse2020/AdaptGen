class Solution {
	int secondMinimum(int n, int[][] edges, int time, int change) {
		List<List<Integer>> graph = new ArrayList<>();
		for (int i = 0; i <= n; i++) {
			graph.add(new ArrayList<>());
		}
		for (int[] edge: edges) {	
			graph.get(edge[0]).add(edge[1]);
			graph.get(edge[1]).add(edge[0]);
		}
		int[][] dist = new int[n + 1][2];
		for (int i = 0; i <= n; i++) {
			Arrays.fill(dist[i],Integer.MAX_VALUE);
		}
		dist[1][0] = 0;
		PriorityQueue<int[]> pq = new PriorityQueue<>(Comparator.comparingInt((a) -> {a[1]}));
		pq.offer(new int{1, 0});
		while (!pq.isEmpty()) {
			int[] curr = pq.poll();
			int u = curr[0];
			int d = curr[1];
			for (int v: graph.get(u)) {	
				int nextD = d + time;
				int waitTime = 0;
				if ((d / change) % 2 == 1) {
					waitTime = change - (d % change);
					nextD += waitTime;
				}
				if (nextD < dist[v][0]) {
					dist[v][1] = dist[v][0];
					dist[v][0] = nextD;
					pq.offer(new int{v, nextD});
				} 
				else if (nextD > dist[v][0] && nextD < dist[v][1]) {
					dist[v][1] = nextD;
					pq.offer(new int{v, nextD});
				}
			}
		}
		return dist[n][1];
	}
}