class Solution {
	int maxArea(int h, int w, int[] horizontalCuts, int[] verticalCuts) {
		int max1 = Integer.MIN_VALUE;
		int max2 = Integer.MIN_VALUE;
		Arrays.sort(horizontalCuts);
		Arrays.sort(verticalCuts);
		for (int i = 0; i < horizontalCuts.length - 1; i++) {
			max1 = Math.max(max1,Math.abs(horizontalCuts[i] - horizontalCuts[i + 1]));
		}
		max1 = Math.max(max1,Math.abs(0 - horizontalCuts[0]));
		max1 = Math.max(max1,Math.abs(h - horizontalCuts[horizontalCuts.length - 1]));
		for (int i = 0; i < verticalCuts.length - 1; i++) {
			max2 = Math.max(max2,Math.abs(verticalCuts[i] - verticalCuts[i + 1]));
		}
		max2 = Math.max(max2,Math.abs(0 - verticalCuts[0]));
		max2 = Math.max(max2,Math.abs(w - verticalCuts[verticalCuts.length - 1]));
		long ans = 1L * max1;
		return (int) (ans % 1000000007);
	}
}