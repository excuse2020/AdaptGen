class Solution {
	int cherryPickup(int[][] grid) {
		int dp = new int[grid.length][grid[0].length][grid[0].length];
		for (int[][] gridA: dp) {	
			for (int[] gridB: gridA) {	
				Arrays.fill(gridB,-1);
			}
		}
		return helper(grid,0,0,grid[0].length - 1,dp);
	}
	int helper(int grid, int i, int j1, int j2, int dp) {
		if (i >= grid.length || j1 < 0 || j1 >= grid[0].length || j2 < 0 || j2 >= grid[0].length) {
			return 0;
		}
		if (i == grid.length - 1) {
			if (j1 == j2) {
				return grid[i][j1];
			} 
			else {
				return grid[i][j1] + grid[i][j2];
			}
		}
		if (dp[i][j1][j2] != -1) {
			return dp[i][j1][j2];
		}
		int max = Integer.MIN_VALUE;
		for (int k = -1; k <= 1; k++) {
			for (int m = -1; m <= 1; m++) {
				int sum = 0;
				if (j1 != j2) {
					sum += grid[i][j1] + grid[i][j2];
				} 
				else {
					sum += grid[i][j2];
				}
				sum += helper(grid,i + 1,j1 + k,j2 + m,dp);
				max = Math.max(sum,max);
			}
		}
		return dp[i][j1][j2] = max;
	}
}