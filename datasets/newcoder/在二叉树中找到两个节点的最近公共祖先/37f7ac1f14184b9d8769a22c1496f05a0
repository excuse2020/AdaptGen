class Solution {
	boolean getPath(TreeNode root, int target, ArrayList<Integer> path) {
		if (root == null) {
			return false;
		}
		path.add(root.val);
		if (root.val == target) {
			return true;
		}
		if (getPath(root.left,target,path) || getPath(root.right,target,path)) {
			return true;
		}
		path.remove(path.size() - 1);
		return false;
	}
	int lowestCommonAncestor(TreeNode root, int o1, int o2) {
		ArrayList<Integer> path_p = new ArrayList<>();
		ArrayList<Integer> path_q = new ArrayList<>();
		getPath(root,o1,path_p);
		getPath(root,o2,path_q);
		int res = 0;
		for (int i = 0; i < path_p.size() && i < path_q.size(); i++) {
			int x = path_p.get(i);
			int y = path_q.get(i);
			if (x == y) {
				res = path_p.get(i);
			} 
			else {
				break;
			}
		}
		return res;
	}
}