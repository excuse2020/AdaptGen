class Solution {
	int helper(int i, int j, int grid, int dp) {
		if (i < 0 || i >= grid.length || j >= grid[0].length || j < 0 || j >= grid[0].length) {
			return 0;
		}
		if (dp[i][j] != -1) {
			return dp[i][j];
		}
		int maxCount = 0;
		if (i - 1 >= 0 && j + 1 < grid[0].length && grid[i][j] < grid[i - 1][j + 1]) {
			maxCount = Math.max(maxCount,1 + helper(i - 1,j + 1,grid,dp));
		}
		if (i + 1 < grid.length && j + 1 < grid[0].length && grid[i][j] < grid[i + 1][j + 1]) {
			maxCount = Math.max(maxCount,1 + helper(i + 1,j + 1,grid,dp));
		}
		if (j + 1 < grid[0].length && grid[i][j] < grid[i][j + 1]) {
			maxCount = Math.max(maxCount,1 + helper(i,j + 1,grid,dp));
		}
		return dp[i][j] = maxCount;
	}
	int maxMoves(int[][] grid) {
		int n = grid.length;
		int m = grid[0].length;
		int dp = new int[n][m];
		for (int row: dp) {	
			Arrays.fill(row,-1);
		}
		int ans = 0;
		for (int i = 0; i < n; i++) {
			ans = Math.max(ans,helper(i,0,grid,dp));
		}
		return ans;
	}
}