class Solution {
	int constrainedSubsetSum(int[] nums, int k) {
		int[] LIS = new int[nums.length];
		int ans = Integer.MIN_VALUE;
		Deque<Integer> deque = new LinkedList<Integer>();
		for (int i = nums.length - 1; i >= 0; i--) {
			LIS[i] = nums[i];
			while (!deque.isEmpty() && deque.peekFirst() - i > k) {
				deque.removeFirst();
			}
			if (!deque.isEmpty()) {
				int j = deque.peekFirst();
				LIS[i] = Math.max(LIS[i],nums[i] + LIS[j]);
			}
			while (!deque.isEmpty() && LIS[deque.peekLast()] <= LIS[i]) {
				deque.removeLast();
			}
			deque.addLast(i);
			ans = Math.max(ans,LIS[i]);
		}
		return ans;
	}
}