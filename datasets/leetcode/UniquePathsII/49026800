class Solution {
	int func(int i, int j, int[][] obstacleGrid, int[][] dp) {
		if (i == 0 && j == 0) {
			return 1;
		}
		if (i < 0 || j < 0) {
			return 0;
		}
		if (obstacleGrid[i][j] == 1) {
			return 0;
		}
		if (dp[i][j] != -1) {
			return dp[i][j];
		}
		int up = func(i - 1,j,obstacleGrid,dp);
		int left = func(i,j - 1,obstacleGrid,dp);
		return dp[i][j] = up + left;
	}
	int uniquePathsWithObstacles(int[][] obstacleGrid) {
		int n = obstacleGrid.length;
		int m = obstacleGrid[0].length;
		if (n == 1 && m == 1 && obstacleGrid[0][0] == 1) {
			return 0;
		}
		if (obstacleGrid[0][0] == 1) {
			return 0;
		}
		int[][] dp = new int[n][m];
		for (int[] row: dp) {	
			Arrays.fill(row,-1);
		}
		return func(n - 1,m - 1,obstacleGrid,dp);
	}
}