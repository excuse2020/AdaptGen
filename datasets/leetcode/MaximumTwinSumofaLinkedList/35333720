class Solution {
	int countNodes(ListNode head) {
		int count = 0;
		while (head != null) {
			count++;
			head = head.next;
		}
		return count;
	}
	int pairSum(ListNode head) {
		ListNode slow = head;
		ListNode fast = head;
		ListNode prev = null;
		while (fast != null) {
			prev = slow;
			slow = slow.next;
			fast = fast.next.next;
		}
		ListNode rev = null;
		ListNode curr = head;
		while (curr != slow) {
			ListNode temp = curr.next;
			curr.next = rev;
			rev = curr;
			curr = temp;
		}
		ListNode back = rev;
		ListNode front = slow;
		int ans = 0;
		while (back != null) {
			ans = Math.max(ans,front.val + back.val);
			front = front.next;
			back = back.next;
		}
		return ans;
	}
	ListNode reverse(ListNode head) {
		ListNode prev = null;
		ListNode curr = head;
		while (curr != null) {
			ListNode temp = curr.next;
			curr.next = prev;
			prev = curr;
			curr = temp;
		}
		return prev;
	}
}