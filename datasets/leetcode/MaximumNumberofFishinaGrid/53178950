class Solution {
	int currentSum = 0;
	int max = 0;
	void dfs(int[][] grid, int i, int j) {
		if (i < 0 || i >= grid.length || j < 0 || j >= grid[0].length || grid[i][j] == 0) {
			return;
		}
		currentSum = currentSum + grid[i][j];
		grid[i][j] = 0;
		dfs(grid,i - 1,j);
		dfs(grid,i + 1,j);
		dfs(grid,i,j - 1);
		dfs(grid,i,j + 1);
	}
	int findMaxFish(int[][] grid) {
		for (int i = 0; i < grid.length; i++) {
			for (int j = 0; j < grid[i].length; j++) {
				if (grid[i][j] != 0) {
					currentSum = 0;
					dfs(grid,i,j);
					max = Math.max(currentSum,max);
				}
			}
		}
		return max;
	}
}