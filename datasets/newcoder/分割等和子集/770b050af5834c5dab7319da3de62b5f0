class Solution {
	int num = 0;
	boolean partition(int[] nums) {
		if (1 == nums.length) {
			return false;
		}
		for (int i = 0; i < nums.length; i++) {
			num += nums[i];
		}
		if (num % 2 != 0) {
			return false;
		}
		int[][] dp = new int[nums.length + 1][num + 1];
		for (int i = 0; i < nums.length + 1; i++) {
			for (int j = 0; j < num + 1; j++) {
				dp[i][j] = Integer.MIN_VALUE;
			}
		}
		return process(nums,0,0,dp) == 1 ? true : false;
	}
	int process(int[] nums, int index, int currentNum, int[][] dp) {
		if (dp[index][currentNum] == Integer.MIN_VALUE) {
			if (currentNum * 2 == num) {
				dp[index][currentNum] = 1;
			} 
			else if (index >= nums.length) {
				dp[index][currentNum] = 0;
			} 
			else {
				dp[index][currentNum] = Math.max(process(nums,index + 1,currentNum,dp),process(nums,index + 1,currentNum + nums[index],dp));
			}
		}
		return dp[index][currentNum];
	}
}