class Solution {
	int countDistinctIntegers(int[] nums) {
		int l = nums.length;
		int[] arr = new int[2 * l];
		for (int i = 0; i < l; i++) {
			arr[i] = reverse(nums[i]);
		}
		int[] ans = new int[2 * l];
		for (int j = 0; j < l; j++) {
			ans[j] = nums[j];
		}
		int p = 0;
		for (int k = l; k < 2 * l; k++) {
			ans[k] = arr[p];
			p++;
		}
		Set<Integer> hs = new HashSet<>();
		for (int i = 0; i < 2 * l; i++) {
			hs.add(ans[i]);
		}
		return hs.size();
	}
	int reverse(int n) {
		int l;
		int rev = 0;
		while (n != 0) {
			l = n % 10;
			rev = rev * 10 + l;
			n = n / 10;
		}
		return rev;
	}
}