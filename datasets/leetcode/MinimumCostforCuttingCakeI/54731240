class Solution {
	void countSort(int[] arr) {
		int n = arr.length;
		int max = arr[0];
		for (int i = 1; i < n; i++) {
			if (arr[i] > max) {
				max = arr[i];
			}
		}
		int[] count = new int[max + 1];
		for (int i = 0; i < max + 1; i++) {
			count[i] = 0;
		}
		for (int i = 0; i < n; i++) {
			count[arr[i]]++;
		}
		int index = 0;
		for (int i = 0; i <= max; i++) {
			while (count[i] > 0) {
				arr[index++] = i;
				count[i]--;
			}
		}
	}
	int minimumCost(int m, int n, int[] horizontalCut, int[] verticalCut) {
		if (horizontalCut.length > 1) {
			countSort(horizontalCut);
		}
		if (verticalCut.length > 1) {
			countSort(verticalCut);
		}
		int hIndex = horizontalCut.length - 1;
		int vIndex = verticalCut.length - 1;
		int horizontalPieces = 1;
		int verticalPieces = 1;
		int totalCost = 0;
		while (hIndex >= 0 && vIndex >= 0) {
			if (horizontalCut[hIndex] > verticalCut[vIndex]) {
				totalCost += horizontalCut[hIndex] * verticalPieces;
				--hIndex;
				++horizontalPieces;
			} 
			else {
				totalCost += verticalCut[vIndex] * horizontalPieces;
				--vIndex;
				++verticalPieces;
			}
		}
		while (hIndex >= 0) {
			totalCost += horizontalCut[hIndex] * verticalPieces;
			--hIndex;
			++horizontalPieces;
		}
		while (vIndex >= 0) {
			totalCost += verticalCut[vIndex] * horizontalPieces;
			--vIndex;
			++verticalPieces;
		}
		return totalCost;
	}
}