class Solution {
	int findWinningPlayer(int[] skills, int k) {
		int pref = new int[skills.length];
		pref[0] = 0;
		int max = skills[0];
		for (int i = 1; i < skills.length; i++) {
			if (skills[i] > max) {
				max = skills[i];
				pref[i] = 1;
			}
		}
		Stack<Integer> stck = new Stack<Integer>();
		int suf = new int[skills.length];
		suf[skills.length - 1] = -1;
		stck.push(skills.length - 1);
		for (int i = skills.length - 2; i >= 0; i--) {
			if (skills[i] < skills[stck.peek()]) {
				suf[i] = stck.peek();
				stck.push(i);
			} 
			else {
				while (!stck.empty() && skills[stck.peek()] < skills[i]) {
					stck.pop();
				}
				if (!stck.empty()) {
					suf[i] = stck.peek();
					stck.push(i);
				} 
				else {
					suf[i] = -1;
					stck.push(i);
				}
			}
		}
		for (int i = 0; i < skills.length; i++) {
			if (i == 0) {
				if (suf[i] == -1) {
					return i;
				} 
				else if (suf[i] - i >= k) {
					return i;
				}
			}
			if (pref[i] == 1) {
				if (k == 1) {
					return i;
				} 
				else {
					if (suf[i] == -1) {
						return i;
					} 
					else if (suf[i] - i >= k) {
						return i;
					}
				}
			}
		}
		return 0;
	}
}