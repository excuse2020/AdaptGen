class Solution {
	HashMap<String, Long> dp;
	int len;
	long helper(int[] nums, int ind, int prev, boolean[] used, long mask) {
		if (ind == len) {
			return 1;
		}
		String s = String.valueOf(prev) + ".";
		if (dp.containsKey(s)) {
			return dp.get(s);
		}
		long temp = 0;
		for (int i = 0; i < len; i++) {
			if (used[i]) {
				continue;
			}
			if (prev % nums[i] == 0 || nums[i] % prev == 0) {
				used[i] = true;
				int cur = len - (i + 1);
				long one = 1;
				while (cur-- > 0) {
					one *= 2;
				}
				mask = mask | one;
				temp = (temp + helper(nums,ind + 1,nums[i],used,mask)) % 1000000007;
				mask = mask ^ one;
				used[i] = false;
			}
		}
		dp.put(s,temp);
		return temp;
	}
	int specialPerm(int[] nums) {
		len = nums.length;
		dp = new HashMap<>();
		return (int) helper(nums,0,-1,new boolean[len],0);
	}
}