class Solution {
	double helper(int points, int i, int j) {
		double m = 0;
		int x1 = points[i][0];
		int x2 = points[j][0];
		int y1 = points[i][1];
		int y2 = points[j][1];
		int x = x2 - x1;
		int y = y2 - y1;
		if (x == 0) {
			return -90;
		}
		m = (double) y / x;
		return m;
	}
	int maxPoints(int[][] points) {
		if (points.length < 3) {
			return points.length;
		}
		int max = 0;
		int n = points.length;
		for (int i = 0; i < n; i++) {
			HashMap<Double, Integer> hm = new HashMap<>();
			for (int j = 0; j < n; j++) {
				if (j == i) {
					continue;
				}
				double x = helper(points,i,j);
				hm.put(x,hm.getOrDefault(x,0) + 1);
				max = Math.max(max,hm.get(x));
			}
		}
		return max + 1;
	}
}