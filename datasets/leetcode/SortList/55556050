class Solution {
	ListNode merge(ListNode list1, ListNode list2) {
		ListNode head = new ListNode(0);
		ListNode tail = head;
		while (list1 != null && list2 != null) {
			if (list1.val <= list2.val) {
				tail.next = list1;
				tail = tail.next;
				list1 = list1.next;
			} 
			else {
				tail.next = list2;
				tail = tail.next;
				list2 = list2.next;
			}
		}
		list1 = list1 != null ? list1 : list2;
		while (list1 != null) {
			tail.next = list1;
			tail = tail.next;
			list1 = list1.next;
		}
		return head.next;
	}
	ListNode sortList(ListNode head) {
		if (head == null) {
			return null;
		}
		if (head.next == null) {
			return head;
		}
		ListNode[] list = split(head);
		ListNode list1 = sortList(list[0]);
		ListNode list2 = sortList(list[1]);
		return merge(list1,list2);
	}
	ListNode[] split(ListNode head) {
		ListNode[] output = new ListNode[2];
		ListNode slow = head;
		ListNode fast = head;
		while (fast != null && fast.next != null && fast.next.next != null) {
			slow = slow.next;
			fast = fast.next.next;
		}
		ListNode list2 = slow.next;
		slow.next = null;
		output[0] = head;
		output[1] = list2;
		return output;
	}
}