class Solution {
	boolean is_prime(int n) {
		if (n <= 1) {
			return false;
		}
		for (int i = 2; i <= Math.sqrt(n); i++) {
			if (n % i == 0) {
				return false;
			}
		}
		return true;
	}
	int nonSpecialCount(int l, int r) {
		Set<Integer> special_num = new HashSet<>();
		for (int i = 2; i * i <= r; i++) {
			int square = i * i;
			if (square >= l && is_prime(i)) {
				special_num.add(square);
			}
		}
		int range = r - l + 1;
		return range - special_num.size();
	}
}