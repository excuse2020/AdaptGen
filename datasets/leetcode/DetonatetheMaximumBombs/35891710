class Solution {
	void checkDetonation(int[][] bombs, int x1, int y1, int r1, int i, boolean[] detonates) {
		if (detonates[i]) {
			return;
		}
		detonates[i] = true;
		for (int j = 0; j < bombs.length; j++) {
			if (j == i) {
				continue;
			}
			int x2 = bombs[j][0];
			int y2 = bombs[j][1];
			int r2 = bombs[j][2];
			boolean d = isDetonateAnother(x1,y1,x2,y2,r1,r2);
			if (d) {
				checkDetonation(bombs,x2,y2,r2,j,detonates);
			}
		}
	}
	boolean isDetonateAnother(int x1, int y1, int x2, int y2, int r1, int r2) {
		long x = (long) (x2 - x1) * (long) (x2 - x1);
		long y = (long) (y2 - y1) * (long) (y2 - y1);
		long distance = x + y;
		if (distance <= (long) r1 * (long) r1) {
			return true;
		}
		return false;
	}
	int maximumDetonation(int[][] bombs) {
		int max = 0;
		boolean[] detonates = new boolean[bombs.length];
		for (int i = 0; i < bombs.length; i++) {
			int x1 = bombs[i][0];
			int y1 = bombs[i][1];
			int r1 = bombs[i][2];
			Arrays.fill(detonates,false);
			checkDetonation(bombs,x1,y1,r1,i,detonates);
			int count = 0;
			for (int d = 0; d < detonates.length; d++) {
				if (detonates[d]) {
					count++;
				}
			}
			max = Math.max(count,max);
		}
		return max;
	}
}