class Solution {
	int fun(int i, int curr, int[] nums, int[][] dp) {
		if (i == nums.length - 1) {
			return 0;
		}
		int up = (int) 1e9;
		int down = (int) 1e9;
		int mid = (int) 1e9;
		if (dp[i][curr] != -1) {
			return dp[i][curr];
		}
		if (i < nums.length - 1 && (nums[i + 1] == 0 || curr != nums[i + 1])) {
			return fun(i + 1,curr,nums,dp);
		} 
		else {
			if (curr == 2) {
				if (nums[i] == 1) {
					down = 1 + fun(i,3,nums,dp);
				} 
				else if (nums[i] == 3) {
					up = 1 + fun(i,1,nums,dp);
				} 
				else {
					return Math.min(1 + fun(i,3,nums,dp),1 + fun(i,1,nums,dp));
				}
			} 
			else if (curr == 1) {
				if (nums[i] == 2) {
					down = 1 + fun(i,3,nums,dp);
				} 
				else if (nums[i] == 3) {
					mid = 1 + fun(i,2,nums,dp);
				} 
				else {
					return Math.min(1 + fun(i,3,nums,dp),1 + fun(i,2,nums,dp));
				}
			} 
			else {
				if (nums[i] == 1) {
					mid = 1 + fun(i,2,nums,dp);
				} 
				else if (nums[i] == 2) {
					up = 1 + fun(i,1,nums,dp);
				} 
				else {
					return Math.min(1 + fun(i,2,nums,dp),1 + fun(i,1,nums,dp));
				}
			}
		}
		return dp[i][curr] = Math.min(up,Math.min(down,mid));
	}
	int minSideJumps(int[] obstacles) {
		int[][] dp = new int[obstacles.length][4];
		for (int[] i: dp) {	
			Arrays.fill(i,-1);
		}
		return fun(0,2,obstacles,dp);
	}
}