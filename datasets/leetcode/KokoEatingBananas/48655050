class Solution {
	boolean is_eatable(int p, int eating_time, int hours) {
		int eating_hours = 0;
		for (int i = 0; i < p.length; i++) {
			eating_hours += p[i] / eating_time;
			if (p[i] % eating_time != 0) {
				eating_hours += 1;
			}
			if (eating_hours > hours) {
				return false;
			}
		}
		return true;
	}
	int minEatingSpeed(int[] p, int h) {
		int max = p[0];
		for (int n: p) {	
			if (n > max) {
				max = n;
			}
		}
		int left = 1;
		int right = max;
		int res = -1;
		while (left <= right) {
			int mid = left + (right - left) / 2;
			if (is_eatable(p,mid,h)) {
				res = mid;
				right = mid - 1;
			} 
			else {
				left = mid + 1;
			}
		}
		return res;
	}
}