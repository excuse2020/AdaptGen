class Solution {
	int lengthOfLongestSubstring(String s) {
		if (s.length() <= 1) {
			return s.length();
		}
		int[] len = new int[s.length()];
		HashMap<Character, Integer> map = new HashMap<Character, Integer>();
		int maxlength = 1;
		len[0] = 1;
		map.put(s.charAt(0),0);
		for (int i = 1; i < s.length(); i++) {
			if (!map.containsKey(s.charAt(i))) {
				len[i] = len[i - 1] + 1;
			} 
			else {
				int theBeforeIndex = map.get(s.charAt(i));
				int tmpCount = i - theBeforeIndex;
				len[i] = Math.min(tmpCount,len[i - 1] + 1);
			}
			map.put(s.charAt(i),i);
			maxlength = Math.max(maxlength,len[i]);
		}
		return maxlength;
	}
}