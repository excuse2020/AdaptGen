class Solution {
	boolean isPalindrome(long n) {
		long temp = n;
		long x = 0;
		while (n > 0) {
			x = (x * 10) + (n % 10);
			n /= 10;
		}
		return (temp == x);
	}
	int superpalindromesInRange(String left, String right) {
		long l = Long.valueOf(left);
		long r = Long.valueOf(right);
		int count = 0;
		if (l <= 1 && 1 <= r) {
			count++;
		}
		if (l <= 4 && 4 <= r) {
			count++;
		}
		if (l <= 9 && 9 <= r) {
			count++;
		}
		for (int i = 1; i < 100000; i++) {
			StringBuilder sb1 = new StringBuilder(Integer.toString(i));
			StringBuilder sb2 = new StringBuilder(sb1);
			sb1.append(sb2.reverse());
			long n = Long.valueOf(sb1.toString());
			n *= n;
			if (n >= l && n <= r && isPalindrome(n)) {
				count++;
			}
		}
		for (int j = 10; j < 100000; j++) {
			String s = Integer.toString(j);
			StringBuilder sb3 = new StringBuilder(s);
			StringBuilder sb4 = new StringBuilder(s.substring(0,s.length() - 1));
			sb3.append(sb4.reverse());
			long n1 = Long.valueOf(sb3.toString());
			n1 *= n1;
			if (n1 >= l && n1 <= r && isPalindrome(n1)) {
				count++;
			}
		}
		return count;
	}
}