class Solution {
	long subArrayRanges(int[] nums) {
		return sumMaxSubs(nums) - sumMinSubs(nums);
	}
	long sumMaxSubs(int[] nums) {
		int n = nums.length;
		int[][] ft = new int[n][2];
		Stack<Integer> stack = new Stack<>();
		for (int i = 0; i < n; i++) {
			while (!stack.isEmpty() && nums[i] >= nums[stack.peek()]) {
				stack.pop();
			}
			ft[i][0] = stack.isEmpty() ? -1 : stack.peek();
			stack.push(i);
		}
		stack = new Stack<>();
		for (int i = n - 1; i >= 0; i--) {
			while (!stack.isEmpty() && nums[i] > nums[stack.peek()]) {
				stack.pop();
			}
			ft[i][1] = stack.isEmpty() ? n : stack.peek();
			stack.push(i);
		}
		long sol = 0;
		for (int i = 0; i < n; i++) {
			sol += (long) (i - ft[i][0]) * (ft[i][1] - i);
		}
		return sol;
	}
	long sumMinSubs(int[] nums) {
		int n = nums.length;
		int[][] ft = new int[n][2];
		Stack<Integer> stack = new Stack<>();
		for (int i = 0; i < n; i++) {
			while (!stack.isEmpty() && nums[i] <= nums[stack.peek()]) {
				stack.pop();
			}
			ft[i][0] = stack.isEmpty() ? -1 : stack.peek();
			stack.push(i);
		}
		stack = new Stack<>();
		for (int i = n - 1; i >= 0; i--) {
			while (!stack.isEmpty() && nums[i] < nums[stack.peek()]) {
				stack.pop();
			}
			ft[i][1] = stack.isEmpty() ? n : stack.peek();
			stack.push(i);
		}
		long sol = 0;
		for (int i = 0; i < n; i++) {
			sol += (long) (i - ft[i][0]) * (ft[i][1] - i);
		}
		return sol;
	}
}