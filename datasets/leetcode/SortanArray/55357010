class Solution {
	void heapSort(int arr) {
		int n = arr.length;
		for (int i = n / 2; i >= 0; i--) {
			heapify1(arr,i,n);
		}
		for (int i = n - 1; i > 0; i--) {
			int temp = arr[0];
			arr[0] = arr[i];
			arr[i] = temp;
			heapify1(arr,0,i);
		}
	}
	void heapify1(int arr, int i, int size) {
		int left = 2 * i + 1;
		int right = 2 * i + 2;
		int maxIdx = i;
		if (left < size && arr[maxIdx] < arr[left]) {
			maxIdx = left;
		}
		if (right < size && arr[maxIdx] < arr[right]) {
			maxIdx = right;
		}
		if (maxIdx != i) {
			int temp = arr[i];
			arr[i] = arr[maxIdx];
			arr[maxIdx] = temp;
			heapify1(arr,maxIdx,size);
		}
	}
	void heapify2(int arr, int i, int size) {
		int left = 2 * i + 1;
		int right = 2 * i + 2;
		int minIdx = i;
		if (right < size && arr[minIdx] > arr[left]) {
			minIdx = left;
		}
		if (left < size && arr[minIdx] > arr[right]) {
			minIdx = right;
		}
		if (minIdx != i) {
			int temp = arr[i];
			arr[i] = arr[minIdx];
			arr[minIdx] = temp;
			heapify2(arr,minIdx,size);
		}
	}
	int[] sortArray(int[] nums) {
		heapSort(nums);
		return nums;
	}
}