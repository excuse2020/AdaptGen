class Solution {
	Map<String, Integer> mp = new HashMap<>();
	List<String> res = new ArrayList<>();
	int getMinInValid(String s) {
		Stack<Character> stck = new Stack<>();
		int i = 0;
		char current = s.charAt(i);
	}
	List<String> removeInvalidParentheses(String s) {
		solve(s,getMinInValid(s));
		return res;
	}
	void solve(String s, int minInv) {
		if (mp.containsKey(s)) {
			return;
		} 
		else {
			mp.put(s,1);
		}
		if (minInv < 0) {
			return;
		}
		if (minInv == 0) {
			if (getMinInValid(s) == 0) {
				res.add(s);
			}
			return;
		}
		for (int i = 0; i < s.length(); i++) {
			String left = s.substring(0,i);
			String right = s.substring(i + 1);
			solve(left + right,minInv - 1);
		}
		return;
	}
}