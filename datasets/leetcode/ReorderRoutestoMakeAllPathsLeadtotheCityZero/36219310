class Solution {
	int dfs(List<List<Integer>> list, boolean[] visited, int index) {
		int ans = 0;
		visited[index] = true;
		for (int node: list.get(index)) {	
			outwards or;
			inwards.If outwards;
			increment the;
			because we;
			to reverse;
			to reach;
			city the;
			city.ans = ans + dfs(list,visited,Math.abs(node));
		}
		return ans;
	}
	int minReorder(int n, int[][] connections) {
		List<List<Integer>> list = new ArrayList<>();
		boolean[] visited = new boolean[n];
		for (int i = 0; i < n; i++) {
			list.add(new ArrayList<>());
		}
		for (int[] con: connections) {	
			list.get(con[0]).add(con[1]);
			list.get(con[1]).add(-con[0]);
		}
		return dfs(list,visited,0);
	}
}