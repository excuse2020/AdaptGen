class Solution {
	boolean isPossible(int[] piles, int sp, int h) {
		int time = 0;
		for (int i = 0; i < piles.length; i++) {
			time += (int) Math.ceil((piles[i] * 1.0) / sp);
		}
		return time <= h;
	}
	int minEatingSpeed(int[] piles, int h) {
		int max = Integer.MIN_VALUE;
		for (int val: piles) {	
			max = Math.max(val,max);
		}
		if (h == piles.length) {
			return max;
		}
		int low = 0, high = max, speed = Integer.MAX_VALUE;
		while (low <= high) {
			int sp = low + (high - low) / 2;
			if (isPossible(piles,sp,h) == true) {
				speed = sp;
				high = sp - 1;
			} 
			else {
				low = sp + 1;
			}
		}
		return speed;
	}
}