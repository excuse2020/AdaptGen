class Solution {
	int[][][] dp;
	int mod = 1000000007;
	int numberOfPath(int[][] grid, int i, int j, int m, int n, int k, int sum) {
		sum += grid[i][j];
		sum = sum % k;
		if (i == m - 1 && j == n - 1) {
			if (sum == 0) {
				return 1;
			}
			return 0;
		}
		if (dp[i][j][sum] != -1) {
			return dp[i][j][sum];
		}
		long count = 0;
		if (i != m - 1) {
			count += numberOfPath(grid,i + 1,j,m,n,k,sum);
			count %= mod;
		}
		if (j != n - 1) {
			count += numberOfPath(grid,i,j + 1,m,n,k,sum);
			count %= mod;
		}
		dp[i][j][sum] = (int) (count % mod);
		return (int) (count % mod);
	}
	int numberOfPaths(int[][] grid, int k) {
		dp = new int[grid.length][grid[0].length][k];
		int n = grid.length;
		int m = grid[0].length;
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < m; j++) {
				for (int g = 0; g < k; g++) {
					dp[i][j][g] = -1;
				}
			}
		}
		return numberOfPath(grid,0,0,grid.length,grid[0].length,k,0);
	}
}