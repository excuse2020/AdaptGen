class Solution {
	int colNums;
	int rowNums;
	void dfs(int[][] isConnected, int row, int col) {
		if (row < 0 || col < 0 || row >= rowNums || col >= colNums || isConnected[row][col] != 1) {
			return;
		}
		isConnected[row][col] = 0;
		for (int i = 0; i < isConnected[row].length; i++) {
			if (isConnected[i][row] == 1) {
				dfs(isConnected,i,row);
			}
		}
	}
	int findCircleNum(int[][] isConnected) {
		int provinces = 0;
		rowNums = isConnected.length;
		if (rowNums == 0) {
			return 0;
		}
		colNums = isConnected[0].length;
		for (int row = 0; row < rowNums; row++) {
			for (int col = 0; col < colNums; col++) {
				if (isConnected[row][col] == 1) {
					provinces++;
					dfs(isConnected,row,col);
				}
			}
		}
		return provinces;
	}
}