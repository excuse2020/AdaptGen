class Solution {
	int arr;
	int n;
	int minimumDifference(int[] nums, int k) {
		n = nums.length;
		arr = new int[n * 4];
		segmentTree(0,n - 1,nums,0);
		int subres = Math.abs(nums[0] - k);
		for (int i = 0; i < n; i++) {
			int low = i;
			int high = n;
			while (low <= high) {
				int mid = (low + high) / 2;
				int res = query(0,n - 1,i,mid,0);
				subres = Math.min(subres,Math.abs(res - k));
				if (res > k) {
					low = mid + 1;
				} 
				else {
					high = mid - 1;
				}
			}
		}
		return subres;
	}
	int query(int low, int high, int q_low, int q_high, int idx) {
		if (low > q_high || high < q_low) {
			return Integer.MAX_VALUE;
		}
		if (q_low <= low && q_high >= high) {
			return arr[idx];
		}
		int mid = (low + high) / 2;
		int left = (idx * 2) + 1;
		int right = left + 1;
		return query(low,mid,q_low,q_high,left) & query(mid + 1,high,q_low,q_high,right);
	}
	void segmentTree(int low, int high, int nums, int idx) {
		if (low == high) {
			arr[idx] = nums[low];
			return;
		}
		int mid = (low + high) / 2;
		int left = (idx * 2) + 1;
		int right = left + 1;
		segmentTree(low,mid,nums,left);
		segmentTree(mid + 1,high,nums,right);
		arr[idx] = arr[left] & arr[right];
	}
}