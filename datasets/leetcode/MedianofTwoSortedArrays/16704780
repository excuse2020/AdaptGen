class Solution {
	double findMedianSortedArrays(int[] nums1, int[] nums2) {
		int n = nums1.length;
		int m = nums2.length;
		if (m < n) {
			return findMedianSortedArrays(nums2,nums1);
		}
		int start = 0;
		int end = n;
		while (start <= end) {
			int mid = (start + end) / 2;
			int mid2 = (n + m) / 2 - mid;
			int leftnum1 = mid == 0 ? Integer.MIN_VALUE : nums1[mid - 1];
			int rightnum1 = mid == n ? Integer.MAX_VALUE : nums1[mid];
			int leftnum2 = mid2 == 0 ? Integer.MIN_VALUE : nums2[mid2 - 1];
			int rightnum2 = mid2 == m ? Integer.MAX_VALUE : nums2[mid2];
			if (leftnum2 <= rightnum1 && leftnum1 <= rightnum2) {
				if ((m + n) % 2 == 0) {
					return (Math.max(leftnum1,leftnum2) + Math.min(rightnum1,rightnum2)) / 2.0;
				} 
				else {
					return Math.max(leftnum1,leftnum2);
				}
			} 
			else if (leftnum1 > rightnum2) {
				end = mid - 1;
			} 
			else {
				start = mid + 1;
			}
		}
		throw new IllegalArgumentException()
	}
}