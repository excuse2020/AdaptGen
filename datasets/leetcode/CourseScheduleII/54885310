class Solution {
	int[] findOrder(int numCourses, int[][] prerequisites) {
		ArrayList<ArrayList<Integer>> graph = new ArrayList<>();
		for (int i = 0; i < numCourses; i++) {
			graph.add(new ArrayList<>());
		}
		for (int i = 0; i < prerequisites.length; i++) {
			graph.get(prerequisites[i][1]).add(prerequisites[i][0]);
		}
		int indegree = new int[numCourses];
		for (int curr: prerequisites) {	
			indegree[curr[0]]++;
		}
		Queue<Integer> q = new LinkedList<>();
		for (int i = 0; i < indegree.length; i++) {
			if (indegree[i] == 0) {
				q.add(i);
			}
		}
		ArrayList<Integer> topo = new ArrayList<>();
		while (!q.isEmpty()) {
			int curr = q.remove();
			topo.add(curr);
			for (int temp: graph.get(curr)) {	
				if (--indegree[temp] == 0) {
					q.add(temp);
				}
			}
		}
		if (topo.size() == numCourses) {
			int res = new int[numCourses];
			for (int i = 0; i < numCourses; i++) {
				res[i] = topo.get(i);
			}
			return res;
		}
		return new int[0];
	}
}