class Solution {
	boolean isFound = false;
	void dfs(TreeNode root, int target, ArrayList<Integer> path) {
		if (root == null) {
			return;
		}
		if (isFound) {
			return;
		}
		path.add(root.val);
		if (root.val == target) {
			isFound = true;
			return;
		}
		dfs(root.left,target,path);
		dfs(root.right,target,path);
		if (isFound) {
			return;
		}
		path.remove(path.size() - 1);
	}
	int lowestCommonAncestor(TreeNode root, int o1, int o2) {
		ArrayList<Integer> path1 = new ArrayList<>();
		ArrayList<Integer> path2 = new ArrayList<>();
		isFound = false;
		dfs(root,o1,path1);
		isFound = false;
		dfs(root,o2,path2);
		int res = 0;
		for (int i = 0; i < path1.size() && i < path2.size(); i++) {
			int i1 = path1.get(i);
			int i2 = path2.get(i);
			if (i1 == i2) {
				res = i1;
			} 
			else {
				break;
			}
		}
		return res;
	}
}