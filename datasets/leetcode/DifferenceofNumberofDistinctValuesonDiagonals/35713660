class Solution {
	int bottomRight(int[][] grid, int i, int j) {
		Set<Integer> hs = new HashSet<>();
		if (i == grid.length - 1 || j == grid[i].length - 1) {
			return 0;
		}
		int r = i + 1;
		int c = j + 1;
		while (r < grid.length && c < grid[i].length) {
			hs.add(grid[r][c]);
			r++;
			c++;
		}
		return hs.size();
	}
	int[][] differenceOfDistinctValues(int[][] grid) {
		int[][] ans = new int[grid.length][grid[0].length];
		for (int i = 0; i < grid.length; i++) {
			for (int j = 0; j < grid[i].length; j++) {
				int r = topLeft(grid,i,j);
				int c = bottomRight(grid,i,j);
				ans[i][j] = Math.abs(r - c);
			}
		}
		return ans;
	}
	int topLeft(int[][] grid, int i, int j) {
		Set<Integer> hs = new HashSet<>();
		if (i == 0 || j == 0) {
			return 0;
		}
		int r = i - 1;
		int c = j - 1;
		while (r >= 0 && c >= 0) {
			hs.add(grid[r][c]);
			r--;
			c--;
		}
		return hs.size();
	}
}