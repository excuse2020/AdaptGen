class Solution {
	int binarySearch(int[][] arr, int s, int e, int tar) {
		while (s <= e) {
			int m = (s + e) / 2;
			if (arr[m][0] >= tar) {
				e = m - 1;
			} 
			else {
				s = m + 1;
			}
		}
		return s;
	}
	int jobScheduling(int[] startTime, int[] endTime, int[] profit) {
		int n = startTime.length;
		int[][] arr = new int[n][3];
		for (int i = 0; i < n; i++) {
			int s = startTime[i];
			int e = endTime[i];
			int p = profit[i];
			arr[i][0] = s;
			arr[i][1] = e;
			arr[i][2] = p;
		}
	}
	int maxProfit(int[][] arr, int i, int n, Integer[] dp) {
		if (i >= n) {
			return 0;
		}
		if (dp[i] != null) {
			return dp[i];
		}
		int index = binarySearch(arr,0,n - 1,arr[i][1]);
		int take = arr[i][2] + maxProfit(arr,index,n,dp);
		int not_Take = maxProfit(arr,i + 1,n,dp);
		return dp[i] = Math.max(take,not_Take);
	}
}