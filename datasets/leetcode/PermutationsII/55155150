class Solution {
	void backtrack(List<List<Integer>> results, List<Integer> tempList, int[] nums, boolean[] visited) {
		if (tempList.size() == nums.length) {
			results.add(new ArrayList<>(tempList));
		} 
		else {
			for (int i = 0; i < nums.length; i++) {
				if (visited[i] || (i > 0 && nums[i] == nums[i - 1] && !visited[i - 1])) {
					continue;
				}
				visited[i] = true;
				tempList.add(nums[i]);
				backtrack(results,tempList,nums,visited);
				visited[i] = false;
				tempList.remove(tempList.size() - 1);
			}
		}
	}
	void main(String[] args) {
		Solution sol = new Solution();
		System.out.println(sol.permuteUnique(new int{1, 1, 2}));
		System.out.println(sol.permuteUnique(new int{1, 2, 3}));
	}
	List<List<Integer>> permuteUnique(int[] nums) {
		List<List<Integer>> results = new ArrayList<>();
		Arrays.sort(nums);
		boolean[] visited = new boolean[nums.length];
		backtrack(results,new ArrayList<>(),nums,visited);
		return results;
	}
}