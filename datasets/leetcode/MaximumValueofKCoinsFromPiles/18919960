class Solution {
	int compute(int ind, List<List<Integer>> piles, int k, int[][] dp) {
		if (ind == piles.size() || k == 0) {
			return 0;
		}
		if (dp[ind][k] != -1) {
			return dp[ind][k];
		}
		int best = compute(ind + 1,piles,k,dp);
		int pick = 0;
		for (int i = 0; i < (int) Math.min(k,piles.get(ind).size()); i++) {
			pick += piles.get(ind).get(i);
			best = (int) Math.max(best,pick + compute(ind + 1,piles,k - (i + 1),dp));
		}
		return dp[ind][k] = best;
	}
	int maxValueOfCoins(List<List<Integer>> piles, int k) {
		int[][] dp = new int[piles.size()][k + 1];
		for (int[] row: dp) {	
			Arrays.fill(row,-1);
		}
		return compute(0,piles,k,dp);
	}
}