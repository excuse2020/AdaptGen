class Solution {
	int maximumLength(int[] nums, int l) {
		int n = nums.length;
		int[][] dp = new int[n + 1][l + 1];
		for (int i = 0; i <= n; i++) {
			Arrays.fill(dp[i],1);
		}
		for (int j = 0; j <= l; j++) {
			HashMap<Integer, Integer> map = new HashMap<>();
			int max1 = 0;
			for (int i = 0; i < n; i++) {
				if (map.containsKey(nums[i])) {
					dp[i][j] = Math.max(dp[i][j],1 + map.get(nums[i]));
				}
				if (j > 0) {
					dp[i][j] = Math.max(dp[i][j],1 + max1);
				}
				if (j > 0) {
					max1 = Math.max(max1,dp[i][j - 1]);
				}
				map.put(nums[i],dp[i][j]);
			}
		}
		int ans = 0;
		for (int i = 0; i < n; i++) {
			ans = Math.max(ans,dp[i][l]);
		}
		return ans;
	}
}