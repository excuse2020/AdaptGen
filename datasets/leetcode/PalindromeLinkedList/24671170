class Solution {
	ListNode findMiddle(ListNode head) {
		ListNode slow = head, fast = head.next;
		while (fast != null && fast.next != null) {
			slow = slow.next;
			fast = fast.next.next;
		}
		return slow;
	}
	boolean isPalindrome(ListNode head) {
		if (head == null || head.next == null) {
			return true;
		}
		ListNode middle = findMiddle(head);
		ListNode nextMiddle = reverse(middle.next);
		middle.next = null;
		while (head != null && nextMiddle != null) {
			if (head.val != nextMiddle.val) {
				return false;
			}
			head = head.next;
			nextMiddle = nextMiddle.next;
		}
		return true;
	}
	ListNode reverse(ListNode head) {
		ListNode prev = null, curr = head, next;
		while (curr != null) {
			next = curr.next;
			curr.next = prev;
			prev = curr;
			curr = next;
		}
		return prev;
	}
}