class Solution {
	TreeNode build(int[] postorder, int postStart, int postEnd, int[] inorder, int inStart, int inEnd, Map<Integer, Integer> inMap) {
		if (postStart > postEnd || inStart > inEnd) {
			return null;
		}
		TreeNode root = new TreeNode(postorder[postEnd]);
		int inRoot = inMap.get(root.val);
		int numsleft = inRoot - inStart;
		root.left = build(postorder,postStart,postStart + numsleft - 1,inorder,inStart,inRoot - 1,inMap);
		root.right = build(postorder,postStart + numsleft,postEnd - 1,inorder,inRoot + 1,inEnd,inMap);
		return root;
	}
	TreeNode buildTree(int[] inorder, int[] postorder) {
		if (inorder == null || postorder == null || inorder.length != postorder.length) {
			return null;
		}
		Map<Integer, Integer> inMap = new HashMap<>();
		for (int i = 0; i < inorder.length; i++) {
			inMap.put(inorder[i],i);
		}
		TreeNode root = build(postorder,0,postorder.length - 1,inorder,0,inorder.length - 1,inMap);
		return root;
	}
}