class Solution {
	boolean check(int k, int h, int[] piles) {
		int count = 0;
		for (int i = 0; i < piles.length; i++) {
			if (piles[i] <= k) {
				count += 1;
			} 
			else {
				count += Math.ceil((double) piles[i] / k);
			}
		}
		return count <= h;
	}
	int minEatingSpeed(int[] piles, int h) {
		int max = piles[0];
		for (int i = 0; i < piles.length; i++) {
			if (piles[i] > max) {
				max = piles[i];
			}
		}
		int left = 1;
		int right = max;
		while (left <= right) {
			int mid = right - (right - left) / 2;
			if (check(mid,h,piles)) {
				right = mid - 1;
			} 
			else {
				left = mid + 1;
			}
		}
		return left;
	}
}