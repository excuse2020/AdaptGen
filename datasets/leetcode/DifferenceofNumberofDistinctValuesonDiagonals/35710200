class Solution {
	int[][] differenceOfDistinctValues(int[][] grid) {
		int m = grid.length;
		int n = grid[0].length;
		int[][] ans = new int[m][n];
		for (int i = 0; i < m; i++) {
			for (int j = 0; j < n; j++) {
				HashSet<Integer> leftdia = findDistinctleft(grid,i - 1,j - 1);
				HashSet<Integer> rightdia = findDistinctright(grid,i + 1,j + 1);
				ans[i][j] = Math.abs(rightdia.size() - leftdia.size());
			}
		}
		return ans;
	}
	HashSet<Integer> findDistinctleft(int[][] mat, int sr, int sc) {
		HashSet<Integer> set = new HashSet<>();
		for (int i = sr, j = sc; i >= 0 && j >= 0; i--, j--) {
			set.add(mat[i][j]);
		}
		return set;
	}
	HashSet<Integer> findDistinctright(int[][] mat, int sr, int sc) {
		HashSet<Integer> set = new HashSet<>();
		for (int i = sr, j = sc; i < mat.length && j < mat[0].length; i++, j++) {
			set.add(mat[i][j]);
		}
		return set;
	}
}