class Solution {
	int[] digits;
	int[] rates;
	int atMostNGivenDigitSet(String[] D, int N) {
		int k = D.length;
		digits = new int[k];
		for (int i = 0; i < k; i++) {
			digits[i] = Integer.parseInt(D[i]);
		}
		int cnt = 0;
		String s = String.valueOf(N);
		int len = s.length();
		rates = new int[len];
		rates[0] = 1;
		for (int i = 0; i < len - 1; i++) {
			rates[i + 1] = rates[i] * k;
			cnt += rates[i + 1];
		}
		cnt += helper(s);
		return cnt;
	}
	int countLT(int n) {
		int cnt = 0;
		for (int d: digits) {	
			if (d < n) {
				cnt++;
			} 
			else {
				break;
			}
		}
		return cnt;
	}
	boolean exists(int n) {
		for (int d: digits) {	
			if (d == n) {
				return true;
			}
			if (d > n) {
				break;
			}
		}
		return false;
	}
	int helper(String s) {
		if (s.length() == 0) {
			return 1;
		}
		int n;
	}
}