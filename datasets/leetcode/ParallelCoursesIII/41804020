class Solution {
	int minimumTime(int n, int[][] relations, int[] time) {
		HashMap<Integer, HashSet<Integer>> map = new HashMap<>();
		int[] pre = new int[n + 1];
		int[] mintime = new int[n + 1];
		for (int i = 1; i <= n; i++) {
			map.put(i,new HashSet<>());
		}
		for (int[] cur: relations) {	
			map.get(cur[0]).add(cur[1]);
			pre[cur[1]]++;
		}
		int res = 0;
		Queue<Integer> q = new LinkedList<>();
		for (int i = 1; i <= n; i++) {
			if (pre[i] == 0) {
				mintime[i] = time[i - 1];
				res = Math.max(res,mintime[i]);
				q.add(i);
			}
		}
		while (!q.isEmpty()) {
			int size = q.size();
			for (int i = 0; i < size; i++) {
				int cur = q.poll();
				for (int next: map.get(cur)) {	
					mintime[next] = Math.max(mintime[cur] + time[next - 1],mintime[next]);
					res = Math.max(res,mintime[next]);
					if (--pre[next] == 0) {
						q.add(next);
					}
				}
			}
		}
		return res;
	}
}