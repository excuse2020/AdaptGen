class Solution {
	List<Boolean> checkIfPrerequisite(int numCourses, int[][] prerequisites, int[][] queries) {
		List<List<Integer>> graph = new ArrayList<>();
		for (int i = 0; i < numCourses; i++) {
			graph.add(new ArrayList<>());
		}
		for (int[] pre: prerequisites) {	
			graph.get(pre[0]).add(pre[1]);
		}
		List<Boolean> res = new ArrayList<>();
		for (int[] q: queries) {	
			boolean[] visited = new boolean[graph.size()];
			res.add(valid(graph,q[0],q[1],visited));
		}
		return res;
	}
	Boolean valid(List<List<Integer>> graph, int curr, int end, boolean[] visited) {
		if (visited[curr]) {
			return false;
		}
		visited[curr] = true;
		if (curr == end) {
			return true;
		}
		for (int nb: graph.get(curr)) {	
			if (valid(graph,nb,end,visited)) {
				return true;
			}
		}
		return false;
	}
}