class Solution {
	int numSubmatrixSumTarget(int[][] matrix, int target) {
		int r = matrix.length, c = matrix[0].length;
		int ans = 0;
		for (int i = 0; i < r; i++) {
			for (int j = 1; j < c; j++) {
				matrix[i][j] += matrix[i][j - 1];
			}
		}
		print(matrix);
		for (int j1 = 0; j1 < c; j1++) {
			for (int j2 = j1; j2 < c; j2++) {
				HashMap<Integer, Integer> hm = new HashMap<>();
				hm.put(0,1);
				int cum_sum = 0;
				for (int row = 0; row < r; row++) {
					int curr = matrix[row][j2];
					int prev = (j1 > 0) ? matrix[row][j1 - 1] : 0;
					cum_sum += curr - prev;
					if (hm.containsKey(cum_sum - target)) {
						ans += hm.get(cum_sum - target);
					}
					hm.put(cum_sum,hm.getOrDefault(cum_sum,0) + 1);
				}
			}
		}
		return ans;
	}
	void print(int arr) {
		for (int i = 0; i < arr.length; i++) {
			for (int j = 0; j < arr[0].length; j++) {
				System.out.print(arr[i][j] + " ");
			}
			System.out.println();
		}
	}
}