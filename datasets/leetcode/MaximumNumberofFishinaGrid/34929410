class Solution {
	int dfs(int r, int c, int[][] grid, boolean[][] visited) {
		if (r < 0 || r >= grid.length || c < 0 || c >= grid[0].length || grid[r][c] == 0 || visited[r][c]) {
			return 0;
		}
		visited[r][c] = true;
		int fishes = grid[r][c] + dfs(r,c + 1,grid,visited);
		return fishes;
	}
	int findMaxFish(int[][] grid) {
		int maxi = 0;
		boolean[][] visited = new boolean[grid.length][grid[0].length];
		for (int i = 0; i < grid.length; i++) {
			for (int j = 0; j < grid[0].length; j++) {
				if (grid[i][j] > 0) {
					int val = dfs(i,j,grid,visited);
					maxi = Math.max(maxi,val);
				}
			}
		}
		return maxi;
	}
}