class Solution {
	List<Integer> arr = new ArrayList<>();
	List<Integer> rightSideView(TreeNode root) {
		List<List<Integer>> x = new ArrayList<List<Integer>>();
		if (root == null) {
			return arr;
		}
		int k = 0;
		Queue<TreeNode> q = new LinkedList<>();
		q.add(root);
		q.add(null);
		int m = 0;
		x.add(new ArrayList<Integer>());
		while (!q.isEmpty()) {
			TreeNode curr = q.remove();
			if (curr == null) {
				x.add(new ArrayList<Integer>());
				k++;
				m = 0;
				if (q.isEmpty()) {
					break;
				} 
				else {
					q.add(null);
				}
			} 
			else {
				x.get(k).add(m++,curr.val);
				if (curr.left != null) {
					q.add(curr.left);
				}
				if (curr.right != null) {
					q.add(curr.right);
				}
			}
		}
		x.remove(x.size() - 1);
		for (int i = 0; i < x.size(); i++) {
			arr.add(x.get(i).get(x.get(i).size() - 1));
		}
		return arr;
	}
}