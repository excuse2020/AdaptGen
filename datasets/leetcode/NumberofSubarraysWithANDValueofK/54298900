class Solution {
	long countSubarrays(int[] nums, int k) {
		long ans = 0;
		int n = nums.length;
		int kBit = new int[32];
		for (int j = 0; j < 32; j++) {
			int bit = k & (1 << j);
			if (bit != 0) {
				kBit[j] = 1;
			}
		}
		int lastZero = new int[n][32];
		for (int j = 0; j <= 31; j++) {
			int bit = nums[n - 1] & (1 << j);
			if (bit == 0) {
				lastZero[n - 1][j] = n - 1;
			} 
			else {
				lastZero[n - 1][j] = n;
			}
		}
		for (int i = n - 2; i >= 0; i--) {
			for (int j = 0; j <= 31; j++) {
				int bit = nums[i] & (1 << j);
				if (bit == 0) {
					lastZero[i][j] = i;
				} 
				else {
					lastZero[i][j] = lastZero[i + 1][j];
				}
			}
		}
		for (int i = 0; i < n; i++) {
			if (i == n - 1) {
				if (nums[i] == k) {
					ans = ans + 1;
				}
				continue;
			}
			int closestZero = -1;
			int farthestOne = n - 1;
			int cur = nums[i];
			int curBit = new int[32];
			for (int j = 0; j < 32; j++) {
				int bit = cur & (1 << j);
				if (bit != 0) {
					curBit[j] = 1;
				}
			}
			boolean poss = true;
			for (int j = 0; j < 32; j++) {
				if (kBit[j] == 1) {
					if (curBit[j] != 1) {
						poss = false;
						break;
					}
					farthestOne = Math.min(farthestOne,lastZero[i][j] - 1);
				} 
				else {
					if (lastZero[i][j] == n + 1) {
						poss = false;
						break;
					}
					closestZero = Math.max(closestZero,lastZero[i][j]);
				}
			}
			if (poss == false || closestZero == -1) {
				continue;
			}
			if (closestZero > farthestOne) {
				continue;
			}
			long length = farthestOne - closestZero + 1;
			ans = ans + length;
		}
		return ans;
	}
}