class Solution {
	Map<Integer, Integer> map;
	int dp(int n) {
		if (map.containsKey(n)) {
			return map.get(n);
		}
		int result = 0;
		if (n % 2 == 0) {
			map.put(n,1 + dp(n / 2));
		} 
		else {
			int plus = 1 + dp(n + 1);
			int minus = 1 + dp(n - 1);
			map.put(n,Math.min(plus,minus));
		}
		return map.get(n);
	}
	int integerReplacement(int n) {
		map = new HashMap<>();
		Integer product = 1;
		for (int i = 1; i <= 30; i++) {
			product *= 2;
			map.put(product,i);
		}
		map.put(Integer.MAX_VALUE,32);
		map.put(1,0);
		return dp(n);
	}
}