class Solution {
	int minProcessingTime(List<Integer> processorTime, List<Integer> tasks) {
		int[] a = new int[processorTime.size()];
		int[] b = new int[tasks.size()];
		for (int i = 0; i < processorTime.size(); i++) {
			a[i] = processorTime.get(i);
		}
		for (int i = 0; i < tasks.size(); i++) {
			b[i] = tasks.get(i);
		}
		int re = 0;
		Arrays.sort(a);
		Arrays.sort(b);
		int maxTime = 0;
		int taskIndex = tasks.size() - 1;
		for (int i = 0; i < a.length; i++) {
			int processorMaxTime = 0;
			for (int j = 0; j < 4; j++) {
				if (taskIndex >= 0) {
					processorMaxTime = Math.max(processorMaxTime,a[i] + b[taskIndex]);
					taskIndex--;
				}
			}
			maxTime = Math.max(maxTime,processorMaxTime);
		}
		return maxTime;
	}
}