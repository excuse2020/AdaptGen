class Solution {
	int findInMountainArray(int target, MountainArray mountainArr) {
		int peak = peakElement(mountainArr);
		int ans = orderAgnosticBS(mountainArr,0,peak,target);
		if (ans != -1) {
			return ans;
		} 
		else {
			ans = orderAgnosticBS(mountainArr,peak + 1,mountainArr.length() - 1,target);
			return ans;
		}
	}
	int orderAgnosticBS(MountainArray mountainArr, int start, int end, int target) {
		boolean isAsc = mountainArr.get(start) < mountainArr.get(end);
		while (start <= end) {
			int mid = start + (end - start) / 2;
			if (mountainArr.get(mid) == target) {
				return mid;
			}
			if (isAsc) {
				if (mountainArr.get(mid) < target) {
					start = mid + 1;
				} 
				else {
					end = mid - 1;
				}
			} 
			else {
				if (mountainArr.get(mid) > target) {
					start = mid + 1;
				} 
				else if (mountainArr.get(mid) < target) {
					end = mid - 1;
				}
			}
		}
		return -1;
	}
	int peakElement(MountainArray mountainArr) {
		int start = 0;
		int end = mountainArr.length() - 1;
		while (start != end) {
			int mid = start + (end - start) / 2;
			if (mountainArr.get(mid) > mountainArr.get(mid + 1)) {
				end = mid;
			} 
			else {
				start = mid + 1;
			}
		}
		return start;
	}
}