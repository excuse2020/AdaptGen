class Solution {
	void inorder(TreeNode root, List<Integer> list) {
		Stack<TreeNode> stack = new Stack<>();
		TreeNode tempNode = root;
		while (!stack.isEmpty() || tempNode != null) {
			if (tempNode != null) {
				stack.push(tempNode);
				tempNode = tempNode.left;
			} 
			else {
				tempNode = stack.pop();
				list.add(tempNode.val);
				tempNode = tempNode.right;
			}
		}
	}
	int[] listToArray(List<Integer> list) {
		return list.stream().mapToInt().toArray();
	}
	void postorder(TreeNode root, List<Integer> list) {
		Stack<TreeNode> stack = new Stack<>();
		TreeNode tempNode = root;
		while (!stack.isEmpty() || tempNode != null) {
			if (tempNode != null) {
				stack.push(tempNode);
				list.add(0,tempNode.val);
				tempNode = tempNode.right;
			} 
			else {
				tempNode = stack.pop();
				tempNode = tempNode.left;
			}
		}
	}
	void preorder(TreeNode root, List<Integer> list) {
		Stack<TreeNode> stack = new Stack<>();
		TreeNode tempNode = root;
		while (!stack.isEmpty() || tempNode != null) {
			if (tempNode != null) {
				list.add(tempNode.val);
				stack.push(tempNode);
				tempNode = tempNode.left;
			} 
			else {
				tempNode = stack.pop();
				tempNode = tempNode.right;
			}
		}
	}
	int[][] threeOrders(TreeNode root) {
		int[][] arr = new int[3];
		List<Integer> list = new ArrayList<>();
		preorder(root,list);
		arr[0] = listToArray(list);
		list.clear();
		inorder(root,list);
		arr[1] = listToArray(list);
		list.clear();
		postorder(root,list);
		arr[2] = listToArray(list);
		list.clear();
		return arr;
	}
}