class Solution {
	int f(int n, int[] cuts, int i, int j, Integer[][] dp) {
		if (i > j) {
			return 0;
		}
		int min = Integer.MAX_VALUE;
		if (dp[i][j] != null) {
			return dp[i][j];
		}
		for (int ind = i; ind <= j; ind++) {
			min = Math.min(min,cuts[j + 1] - cuts[i - 1] + f(n,cuts,i,ind - 1,dp) + f(n,cuts,ind + 1,j,dp));
		}
		return dp[i][j] = min;
	}
	int minCost(int n, int[] cuts) {
		int c = cuts.length;
		int[] arr = new int[c + 2];
		int[][] dp = new int[c + 2][c + 2];
		arr[0] = 0;
		arr[c + 1] = n;
		for (int i = 0; i < c; i++) {
			arr[i + 1] = cuts[i];
		}
		Arrays.sort(arr);
		for (int i = c; i >= 1; i--) {
			for (int j = 1; j <= c; j++) {
				if (i > j) {
					continue;
				}
				int min = Integer.MAX_VALUE;
				for (int ind = i; ind <= j; ind++) {
					min = Math.min(min,arr[j + 1] - arr[i - 1] + dp[i][ind - 1] + dp[ind + 1][j]);
				}
				dp[i][j] = min;
			}
		}
		return dp[1][c];
	}
}