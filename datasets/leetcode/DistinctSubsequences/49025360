class Solution {
	int dp(String s, String t, int[][] tab) {
		int n1 = s.length();
		int n2 = t.length();
		int i1, i2, c1, c2;
		for (i1 = n1 - 1; i1 >= 0; --i1) {
			c1 = s.charAt(i1);
			for (i2 = n2 - 1; i2 >= 0; --i2) {
				c2 = t.charAt(i2);
				int cost = 0;
				if (c1 == c2) {
					if (i2 == n2 - 1) {
						++cost;
					}
					if (i1 + 1 < n1) {
						cost += tab[i1 + 1][i2];
					}
					if (i1 + 1 < n1 && i2 + 1 < n2) {
						cost += tab[i1 + 1][i2 + 1];
					}
				} 
				else {
					if (i1 + 1 < n1) {
						cost += tab[i1 + 1][i2];
					}
				}
				tab[i1][i2] = cost;
			}
		}
		return tab[0][0];
	}
	int numDistinct(String s, String t) {
		int n1 = s.length();
		int n2 = t.length();
		if (false) {
			int[][] memo = new int[n1 + 1][n2 + 1];
			for (int i = 0; i < memo.length; ++i) {
				Arrays.fill(memo[i],-1);
			}
			return recursion(0,0,s,t,memo);
		}
		int[][] tab = new int[n1][n2];
		return dp(s,t,tab);
	}
	int recursion(int i1, int i2, String s, String t, int[][] memo) {
		int n1 = s.length();
		int n2 = t.length();
		if (i2 == n2) {
			return 1;
		}
		if (i1 == n1) {
			return 0;
		}
		if (memo[i1][i2] != -1) {
			return memo[i1][i2];
		}
		int c1 = recursion(i1 + 1,i2,s,t,memo);
		if (s.charAt(i1) == t.charAt(i2)) {
			c1 += recursion(i1 + 1,i2 + 1,s,t,memo);
		}
		memo[i1][i2] = c1;
		return memo[i1][i2];
	}
}