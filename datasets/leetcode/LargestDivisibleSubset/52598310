class Solution {
	List<Integer> largestDivisibleSubset(int[] nums) {
		int n = nums.length;
		int dp = new int[n];
		Arrays.fill(dp,1);
		Arrays.sort(nums);
		int max = 1;
		int ind = new int[n];
		for (int i = 0; i < n; i++) {
			ind[i] = i;
			for (int j = 0; j < i; j++) {
				if (nums[i] % nums[j] == 0) {
					if (dp[j] + 1 > dp[i]) {
						dp[i] = 1 + dp[j];
						ind[i] = j;
					}
				}
			}
		}
		int last = 0;
		for (int i = 0; i < n; i++) {
			if (dp[i] > max) {
				max = dp[i];
				last = i;
			}
		}
		ArrayList<Integer> ans = new ArrayList<>();
		ans.add(nums[last]);
		while (ind[last] != last) {
			last = ind[last];
			ans.add(nums[last]);
		}
		return ans;
	}
}