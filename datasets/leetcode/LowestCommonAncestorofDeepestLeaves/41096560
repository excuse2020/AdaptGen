class Solution {
	int maxdepth = 0;
	void helper(TreeNode node, int depth) {
		if (node == null) {
			return;
		}
		if (node.left == null && node.right == null && depth > maxdepth) {
			maxdepth = depth;
			return;
		}
		helper(node.left,depth + 1);
		helper(node.right,depth + 1);
	}
	TreeNode lca(TreeNode root, int depth) {
		if (root == null) {
			return null;
		}
		if (root.left == null && root.right == null && depth == maxdepth) {
			return root;
		}
		TreeNode left = lca(root.left,depth + 1);
		TreeNode right = lca(root.right,depth + 1);
		if (left != null && right != null) {
			return root;
		}
		return left == null ? right : left;
	}
	TreeNode lcaDeepestLeaves(TreeNode root) {
		if (root == null) {
			return null;
		}
		helper(root,1);
		return lca(root,1);
	}
}