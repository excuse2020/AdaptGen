class Solution {
	int dfs(int i, int j, int n, int m, int grid) {
		int sum = 0;
		if (i < 0 || j < 0 || i >= n || j >= m || grid[i][j] == 0) {
			return 0;
		}
		sum += grid[i][j];
		grid[i][j] = 0;
		sum += dfs(i - 1,j,n,m,grid);
		sum += dfs(i + 1,j,n,m,grid);
		sum += dfs(i,j - 1,n,m,grid);
		sum += dfs(i,j + 1,n,m,grid);
		return sum;
	}
	int findMaxFish(int[][] grid) {
		int n = grid.length;
		int m = grid[0].length;
		int ans = 0, sum = 0;
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < m; j++) {
				if (grid[i][j] != 0) {
					sum = dfs(i,j,n,m,grid);
				}
				ans = Math.max(sum,ans);
			}
		}
		return ans;
	}
}