class Solution {
	int[] fillArr(int[] arr, int n, int threshold) {
		int[] ans = new int[n];
		for (int i = 0; i < n; i++) {
			ans[i] = findVal(arr[i],threshold,n);
		}
		return ans;
	}
	int[] findLeftArr(int[] arr, int n) {
		int[] ans = new int[n];
		ans[0] = -1;
		Stack<Integer> stack = new Stack<>();
		stack.push(0);
		for (int i = 1; i < n; i++) {
			while (!stack.isEmpty() && arr[stack.peek()] <= arr[i]) {
				stack.pop();
			}
			ans[i] = (stack.isEmpty()) ? (-1) : stack.peek();
			stack.push(i);
		}
		return ans;
	}
	int[] findRightArr(int[] arr, int n) {
		int[] ans = new int[n];
		ans[n - 1] = n;
		Stack<Integer> stack = new Stack<>();
		stack.push(n - 1);
		for (int i = n - 2; i >= 0; i--) {
			while (!stack.isEmpty() && arr[stack.peek()] <= arr[i]) {
				stack.pop();
			}
			ans[i] = (stack.isEmpty()) ? n : stack.peek();
			stack.push(i);
		}
		return ans;
	}
	int findVal(int x, int threshold, int n) {
		int low = 1, high = n, ans = -1;
		while (low <= high) {
			int mid = low + (high - low) / 2;
			double active_threshold = threshold / (mid * 1.0);
			if (active_threshold >= x) {
				low = mid + 1;
			} 
			else {
				ans = mid;
				high = mid - 1;
			}
		}
		return (ans == -1) ? (n + 1) : ans;
	}
	int validSubarraySize(int[] arr, int threshold) {
		int n = arr.length;
		int[] new_arr = fillArr(arr,n,threshold);
		int[] leftArr = findLeftArr(new_arr,n);
		int[] rightArr = findRightArr(new_arr,n);
		for (int i = 0; i < n; i++) {
			if (rightArr[i] - leftArr[i] >= new_arr[i]) {
				return new_arr[i];
			}
		}
		return -1;
	}
}