class Solution {
	ArrayList<ArrayList<Integer>> ll = new ArrayList<>();
	Set<String> set = new HashSet<>();
	boolean[] visited;
	ArrayList<ArrayList<Integer>> subsets(int[] S) {
		visited = new boolean[S.length];
		visit(0,S,visited);
		return ll;
	}
	void visit(int n, int[] S, boolean[] visited) {
		if (n >= S.length) {
			ArrayList<Integer> list = new ArrayList<Integer>();
			for (int i = 0; i < visited.length; ++i) {
				if (visited[i]) {
					list.add(S[i]);
				}
			}
			Collections.sort(list);
			StringBuilder sb = new StringBuilder();
			for (int val: list) {	
				sb.append(val);
			}
			if (set.add(sb.toString())) {
				ll.add(list);
			}
			return;
		}
		visit(n + 1,S,visited);
		visited[n] = true;
		visit(n + 1,S,visited);
		visited[n] = false;
	}
}