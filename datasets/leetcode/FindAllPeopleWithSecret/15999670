class Solution {
	int[] parents;
	int find(int a) {
		if (parents[a] != a) {
			parents[a] = find(parents[a]);
		}
		return parents[a];
	}
	List<Integer> findAllPeople(int n, int[][] meetings, int firstPerson) {
		Arrays.sort(meetings,(a, b) -> {a[2] - b[2]});
		parents = new int[n];
		for (int i = 0; i < n; i++) {
			parents[i] = i;
		}
		union(0,firstPerson);
		Set<Integer> visited = new HashSet<>();
		visited.add(0);
		visited.add(firstPerson);
		for (int i = 0; i < meetings.length; i++) {
			int time = meetings[i][2];
			int x = i;
			while (x < meetings.length && meetings[x][2] == time) {
				union(meetings[x][0],meetings[x][1]);
				x++;
			}
			while (i < meetings.length && meetings[i][2] == time) {
				if (isConnect(0,meetings[i][0]) || isConnect(0,meetings[i][1])) {
					visited.add(meetings[i][0]);
					visited.add(meetings[i][1]);
				} 
				else {
					reset(meetings[i][0]);
					reset(meetings[i][1]);
				}
				i++;
			}
			i--;
		}
		return visited.stream().collect(Collectors.toList());
	}
	boolean isConnect(int a, int b) {
		return find(a) == find(b);
	}
	void reset(int a) {
		parents[a] = a;
	}
	void union(int a, int b) {
		int pa = find(a);
		int pb = find(b);
		if (pa != pb) {
			parents[pa] = pb;
		}
	}
}