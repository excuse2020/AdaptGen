class Solution {
	void dfs(List<List<Integer>> adjList, int node, boolean[] visited) {
		visited[node] = true;
		for (int adjNode: adjList.get(node)) {	
			if (!visited[adjNode]) {
				dfs(adjList,adjNode,visited);
			}
		}
	}
	List<List<Integer>> getAncestors(int n, int[][] edges) {
		List<List<Integer>> result = new ArrayList<>();
		List<List<Integer>> adjList = new ArrayList<>();
		for (int i = 0; i < n; i++) {
			result.add(new ArrayList<>());
			adjList.add(new ArrayList<>());
		}
		for (int i = 0; i < edges.length; i++) {
			int u = edges[i][0];
			int v = edges[i][1];
			adjList.get(v).add(u);
		}
		for (int node = 0; node < n; node++) {
			boolean[] visited = new boolean[n];
			for (int adjNode: adjList.get(node)) {	
				dfs(adjList,adjNode,visited);
			}
			for (int ancestors = 0; ancestors < n; ancestors++) {
				if (visited[ancestors]) {
					result.get(node).add(ancestors);
				}
			}
		}
		return result;
	}
}