class Solution {
	ArrayList<String> res = new ArrayList<>();
	ArrayList<String> Permutation(String str) {
		boolean[] visited = new boolean[str.length()];
		StringBuilder track = new StringBuilder();
		recursion(str,track,visited);
		return res;
	}
	void recursion(String str, StringBuilder track, boolean[] visited) {
		if (str.length() == track.length()) {
			if (!res.contains(track.toString())) {
				res.add(track.toString());
			}
			return;
		}
		for (int i = 0; i < str.length(); i++) {
			if (visited[i]) {
				continue;
			}
			track.append(str.charAt(i));
			visited[i] = true;
			recursion(str,track,visited);
			track.deleteCharAt(track.length() - 1);
			visited[i] = false;
		}
	}
}