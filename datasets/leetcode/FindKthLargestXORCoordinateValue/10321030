class Solution {
	int kthLargestValue(int[][] matrix, int k) {
		PriorityQueue<Integer> pq = new PriorityQueue<>();
		int m = matrix.length, n = matrix[0].length;
		int[][] prefixXOR = new int[m][n];
		preComputeXor(matrix,prefixXOR);
		for (int i = 0; i < m; i++) {
			for (int j = 0; j < n; j++) {
				int cur = prefixXOR[i][j];
				pq.offer(cur);
				if (pq.size() > k) {
					pq.poll();
				}
			}
		}
		return pq.peek();
	}
	void preComputeXor(int[][] arr, int[][] prefix) {
		for (int i = 0; i < arr.length; i++) {
			for (int j = 0; j < arr[0].length; j++) {
				if (j == 0) {
					prefix[i][j] = arr[i][j];
				} 
				else {
					prefix[i][j] = arr[i][j] ^ prefix[i][j - 1];
				}
			}
		}
		for (int j = 0; j < arr[0].length; j++) {
			for (int i = 1; i < arr.length; i++) {
				prefix[i][j] ^= prefix[i - 1][j];
			}
		}
	}
}