class Solution {
	int numberWays(List<List<Integer>> hats) {
		int n = hats.size(), i, j, ind;
		ArrayList<Integer>[] people = new ArrayList[40];
		for (i = 0; i < 40; i++) {
			people[i] = new ArrayList<Integer>();
		}
		i = 0;
		for (List<Integer> ppl: hats) {	
			for (int h: ppl) {	
				people[h - 1].add(i);
			}
			i++;
		}
		int[] pow = new int[n + 1];
		pow[0] = 1;
		for (j = 1; j <= n; j++) {
			pow[j] = pow[j - 1] * 2;
		}
		int l = pow[n];
		long[] dpCurr = new long[l];
		long[] dpNext = new long[l];
		long[] t;
		dpCurr[0] = 1;
		for (i = 0; i < 40; i++) {
			if (people[i].size() == 0) {
				continue;
			}
			System.arraycopy(dpCurr,0,dpNext,0,l);
			for (int p: people[i]) {	
				for (j = 0; j < l; j++) {
					ind = pow[p] | j;
					if (ind != j) {
						dpNext[ind] += dpCurr[j];
					}
				}
			}
			t = dpCurr;
			dpCurr = dpNext;
			dpNext = t;
		}
		return (int) (dpCurr[l - 1] % 1000000007);
	}
}