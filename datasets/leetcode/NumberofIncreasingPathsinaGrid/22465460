class Solution {
	int m = 1000000007;
	HashMap<ArrayList<Integer>, Integer> map = new HashMap<>();
	int countPaths(int[][] grid) {
		int deep = 0;
		for (int i = 0; i < grid.length; i++) {
			for (int j = 0; j < grid[0].length; j++) {
				deep = (deep % m) + getRaisingPath(grid,map,i,j);
			}
		}
		return deep % m;
	}
	int getRaisingPath(int[][] grid, HashMap<ArrayList<Integer>, Integer> map, int x, int y) {
		ArrayList<Integer> currList = new ArrayList<>();
		currList.add(x);
		currList.add(y);
		if (map.containsKey(currList)) {
			return map.get(currList);
		}
		int currVal = grid[x][y];
		int deep = 1;
		if (x + 1 < grid.length) {
			if (grid[x + 1][y] > currVal) {
				deep = (deep % m) + getRaisingPath(grid,map,x + 1,y);
			}
		}
		if (x - 1 >= 0) {
			if (grid[x - 1][y] > currVal) {
				deep = (deep % m) + getRaisingPath(grid,map,x - 1,y);
			}
		}
		if (y + 1 < grid[0].length) {
			if (grid[x][y + 1] > currVal) {
				deep = (deep % m) + getRaisingPath(grid,map,x,y + 1);
			}
		}
		if (y - 1 >= 0) {
			if (grid[x][y - 1] > currVal) {
				deep = (deep % m) + getRaisingPath(grid,map,x,y - 1);
			}
		}
		deep %= m;
		map.put(currList,deep);
		return deep;
	}
}