class Solution {
	int getNearestAvailableValue(Set<Integer> uniqueNums, int num) {
		int lo = num;
		int hi = num;
		while (uniqueNums.contains(lo) && uniqueNums.contains(hi)) {
			lo = Math.max(0,lo - 1);
			hi += 1;
		}
		if (!uniqueNums.contains(lo)) {
			return lo;
		}
		return hi;
	}
	int minIncrementForUnique(int[] nums) {
		Set<Integer> uniqueNums = new HashSet<>();
		for (int num: nums) {	
			uniqueNums.add(num);
		}
		Set<Integer> currNums = new HashSet<>();
		int changesCount = 0;
		Arrays.sort(nums);
		for (int i = 0; i < nums.length; i++) {
			int currNum = nums[i];
			if (currNums.contains(currNum)) {
				int nearestValue = getNearestAvailableValue(uniqueNums,currNum);
				changesCount += Math.abs(nearestValue - currNum);
				uniqueNums.add(nearestValue);
				System.out.println(nearestValue + " ");
			}
			currNums.add(currNum);
		}
		return changesCount;
	}
}