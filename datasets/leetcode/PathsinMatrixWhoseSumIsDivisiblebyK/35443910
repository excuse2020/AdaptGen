class Solution {
	int COL;
	int ROW;
	Integer[][][] memo;
	int mod = 1000000007;
	int helper(int[][] grid, int k, int row, int col, int currSum) {
		if (isOutOfBounds(row,col)) {
			return 0;
		}
		if (row == ROW - 1 && col == COL - 1) {
			return (currSum + grid[row][col]) % k == 0 ? 1 : 0;
		}
		if (memo[row][col][currSum] != null) {
			return memo[row][col][currSum];
		}
		int ways = 0;
		ways = (ways + helper(grid,k,row + 1,col,(currSum + grid[row][col]) % k)) % mod;
		ways = (ways + helper(grid,k,row,col + 1,(currSum + grid[row][col]) % k)) % mod;
		return memo[row][col][currSum] = ways;
	}
	boolean isOutOfBounds(int row, int col) {
		return row < 0 || row >= ROW || col < 0 || col >= COL;
	}
	int numberOfPaths(int[][] grid, int k) {
		ROW = grid.length;
		COL = grid[0].length;
		memo = new Integer[ROW][COL][51];
		return helper(grid,k,0,0,0);
	}
}