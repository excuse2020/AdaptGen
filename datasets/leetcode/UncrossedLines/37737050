class Solution {
	int maxUncrossedLines(int[] nums1, int[] nums2) {
		int n1 = nums1.length;
		int n2 = nums2.length;
		int[][] dp = new int[n1 + 1][n2 + 1];
		Map<String, Integer> memo = new HashMap<>();
		return recursion(dp,memo,nums1,nums2,n1,n2);
	}
	int recursion(int[][] dp, Map<String, Integer> memo, int[] nums1, int[] nums2, int n1, int n2) {
		if (n1 == 0 || n2 == 0) {
			return 0;
		}
		String key = n1 + "-";
		if (memo.containsKey(key)) {
			return memo.get(key);
		}
		if (nums1[n1 - 1] == nums2[n2 - 1]) {
			dp[n1][n2] = 1 + recursion(dp,memo,nums1,nums2,n1 - 1,n2 - 1);
		} 
		else {
			dp[n1][n2] = Math.max(recursion(dp,memo,nums1,nums2,n1,n2 - 1),recursion(dp,memo,nums1,nums2,n1 - 1,n2));
		}
		memo.put(key,dp[n1][n2]);
		return dp[n1][n2];
	}
}