class Solution {
	List<TreeNode> allPossibleFBT(int n) {
		List<TreeNode>[] dp = new List[n + 1];
		return f(n,dp);
	}
	List<TreeNode> f(int n, List<TreeNode>[] dp) {
		if (dp[n] != null) {
			return dp[n];
		}
		List<TreeNode> ans = new ArrayList<>();
		if (n == 1) {
			ans.add(new TreeNode(0));
			return ans;
		}
		for (int i = 0; i <= n - 3; i += 2) {
			List<TreeNode> left = f(i + 1,dp);
			List<TreeNode> right = f(n - 3 + 1,dp);
			for (TreeNode l: left) {	
				for (TreeNode r: right) {	
					TreeNode root = new TreeNode(0);
					root.left = l;
					root.right = r;
					ans.add(root);
				}
			}
		}
		return dp[n] = ans;
	}
}