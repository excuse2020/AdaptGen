class Solution {
	HashMap<Integer, List<TreeNode>> hp = new HashMap<>();
	List<TreeNode> allPossibleFBT(int n) {
		if (n % 2 == 0) {
			return new ArrayList<>();
		}
		if (hp.containsKey(n)) {
			return hp.get(n);
		}
		List<TreeNode> res = new ArrayList<>();
		if (n == 1) {
			res.add(new TreeNode(0));
		} 
		else {
			for (int leftnode = 1; leftnode < n; leftnode += 2) {
				int rightnode = n - 1;
				List<TreeNode> leftsubtree = allPossibleFBT(leftnode);
				List<TreeNode> rightsubtree = allPossibleFBT(rightnode);
				for (TreeNode left: leftsubtree) {	
					for (TreeNode right: rightsubtree) {	
						TreeNode current = new TreeNode(0);
						current.left = left;
						current.right = right;
						res.add(current);
					}
				}
			}
		}
		hp.put(n,res);
		return res;
	}
}