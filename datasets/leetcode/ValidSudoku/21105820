class Solution {
	char[][] mat;
	boolean isValidSudoku(char[][] board) {
		mat = board;
		for (int i = 0; i < 9; i++) {
			if (!search3x3(i)) {
				return false;
			}
		}
		return true;
	}
	boolean search3x3(int n) {
		int i = (n / 3) * 3, r = i + 3;
		int j = (n % 3) * 3, c = j + 3;
		int[] map = new int[9];
	}
	boolean searchCol(int n, int r, int c) {
		for (int i = 0; i < 9; ++i) {
			if (r != i && mat[i][c] == n) {
				return false;
			}
		}
		return true;
	}
	boolean searchRow(int n, int r, int c) {
		for (int i = 0; i < 9; ++i) {
			if (c != i && mat[r][i] == n) {
				return false;
			}
		}
		return true;
	}
}