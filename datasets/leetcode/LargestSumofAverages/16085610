class Solution {
	double[][] dp;
	int n;
	int[] psa;
	double largestSumOfAverages(int[] nums, int k) {
		n = nums.length;
		psa = new int[n + 1];
		dp = new double[n + 1][k + 1];
		for (double[] nxt: dp) {	
			Arrays.fill(nxt,-1.0);
		}
		for (int i = 1; i <= n; i++) {
			psa[i] = psa[i - 1] + nums[i - 1];
		}
		return recursion(k - 1,1,nums);
	}
	double recursion(int k, int idx, int[] nums) {
		if (idx == n + 1) {
			return 0.0;
		}
		if (k < 0) {
			return -1;
		}
		if (dp[idx][k] != -1.0) {
			return dp[idx][k];
		}
		double ret = 0;
		for (int size = 1; idx + size - 1 <= n; size++) {
			int end = idx + size - 1;
			double res = recursion(k - 1,idx + size,nums);
			if (res == -1) {
				continue;
			}
			ret = Math.max(ret,res + ((double) psa[end] - psa[idx - 1]) / size);
		}
		dp[idx][k] = ret;
		return ret;
	}
}