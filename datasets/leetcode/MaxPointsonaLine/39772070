class Solution {
	int maxPoints(int[][] arr) {
		int n = arr.length;
		if (n <= 2) {
			return n;
		}
		int ans = 0;
		for (int i = 0; i < n; i++) {
			HashMap<Double, Integer> hp = new HashMap<>();
			int duplicate = 0;
			int vertical = 0;
			for (int j = 0; j < n; j++) {
				if (i != j) {
					if (arr[i][0] == arr[j][0]) {
						if (arr[i][1] == arr[j][1]) {
							duplicate++;
						} 
						else {
							vertical++;
						}
					} 
					else {
						double m = slope(arr[i],arr[j]);
						hp.put(m,hp.getOrDefault(m,0) + 1);
					}
				}
			}
			int maxCount = vertical;
			for (var count: hp.values()) {	
				maxCount = Math.max(maxCount,count);
			}
			ans = Math.max(ans,maxCount + duplicate);
		}
		return ans;
	}
	double slope(int[] arr1, int[] arr2) {
		int x1 = arr1[0];
		int x2 = arr2[0];
		int y1 = arr1[1];
		int y2 = arr2[1];
		if (x2 - x1 == 0) {
			return Double.POSITIVE_INFINITY;
		}
		return (double) (y2 - y1) / (x2 - x1);
	}
}