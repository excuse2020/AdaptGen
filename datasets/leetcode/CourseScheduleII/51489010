class Solution {
	int[] findOrder(int numCourses, int[][] prerequisites) {
		Map<Integer, List<Integer>> map = new HashMap<>();
		Stack<Integer> stack = new Stack<>();
		int[] visited = new int[numCourses];
		for (int i = 0; i < numCourses; i++) {
			map.put(i,new ArrayList<>());
		}
		for (int[] prerequisite: prerequisites) {	
			int course = prerequisite[0], preCourse = prerequisite[1];
			map.get(course).add(preCourse);
		}
		for (int i = 0; i < numCourses; i++) {
			if (!topologicalSort(i,visited,map,stack)) {
				return new int[0];
			}
		}
		int[] result = new int[stack.size()];
		for (int i = result.length - 1; i >= 0; i--) {
			result[i] = stack.pop();
		}
		return result;
	}
	boolean topologicalSort(int course, int[] visited, Map<Integer, List<Integer>> map, Stack<Integer> stack) {
		if (visited[course] == 1) {
			return true;
		}
		if (visited[course] == -1) {
			return false;
		}
		visited[course] = -1;
		for (int preCourse: map.get(course)) {	
			if (!topologicalSort(preCourse,visited,map,stack)) {
				return false;
			}
		}
		visited[course] = 1;
		stack.push(course);
		return true;
	}
}