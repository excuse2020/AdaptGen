class Solution {
	int numberOfWeakCharacters(int[][] arr) {
		int i, n = arr.length, j;
		Map<Integer, List<Integer>> map = new TreeMap<>();
		for (i = 0; i < n; i++) {
			List<Integer> list = map.getOrDefault(arr[i][0],new ArrayList<>());
			list.add(arr[i][1]);
			map.put(arr[i][0],list);
		}
		for (Integer key: map.keySet()) {	
			List<Integer> list = new ArrayList<>(map.get(key));
			Collections.sort(list);
			map.put(key,list);
		}
		List<Entry<Integer, List<Integer>>> list = new ArrayList<>(map.entrySet());
		int max_ele = new int[list.size()], max = -1;
		for (i = list.size() - 1; i >= 0; i--) {
			max_ele[i] = Math.max(max,list.get(i).getValue().get(list.get(i).getValue().size() - 1));
			max = Math.max(max_ele[i],max);
		}
		int c = 0;
		for (i = 0; i < list.size() - 1; i++) {
			for (Integer ele: list.get(i).getValue()) {	
				if (ele < max_ele[i + 1]) {
					c++;
				}
			}
		}
		return c;
	}
}