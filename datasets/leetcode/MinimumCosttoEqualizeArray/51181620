class Solution {
	int len, c1, c2;
	int mod = (int) 1e9 + 7;
	int minCostToEqualizeArray(int[] nums, int cost1, int cost2) {
		if (nums.length <= 1) {
			return 0;
		}
		len = nums.length;
		c1 = cost1;
		c2 = cost2;
		int max = Arrays.stream(nums).max().getAsInt();
		long sumD = 0;
		long maxD = 0;
		for (int i = 0; i < len; i++) {
			maxD = Math.max(maxD,max - nums[i]);
			sumD += max - nums[i];
		}
		if (c2 >= c1 * 2) {
			return (int) (sumD * c1 % mod);
		}
		if (nums.length == 2) {
			return (int) (sumD * c1 % mod);
		}
		long ans = solve(maxD,sumD);
		while (maxD * 2 > sumD) {
			maxD++;
			sumD += len;
			ans = Math.min(ans,solve(maxD,sumD));
		}
		if (sumD % 2 == 1) {
			maxD++;
			sumD += len;
			ans = Math.min(ans,solve(maxD,sumD));
		}
		return (int) (ans % mod);
	}
	long solve(long maxD, long sumD) {
		if (maxD * 2 <= sumD) {
			return (sumD / 2) * c2 + (sumD & 1) * c1;
		} 
		else {
			return (2 * maxD - sumD) * c1 + (sumD - maxD) * c2;
		}
	}
}