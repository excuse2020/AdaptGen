class Solution {
	int m;
	int n;
	boolean[] visited;
	int helper(int i, int[][] students, int[][] mentors) {
		if (i == m) {
			return 0;
		}
		int maxScore = 0;
		int currScore = 0;
		for (int k = 0; k < m; k++) {
			if (visited[k] == true) {
				continue;
			}
			int compatibiltyScore = 0;
			for (int j = 0; j < n; j++) {
				if (students[i][j] == mentors[k][j]) {
					compatibiltyScore++;
				}
			}
			visited[k] = true;
			currScore = compatibiltyScore + helper(i + 1,students,mentors);
			visited[k] = false;
			maxScore = Math.max(currScore,maxScore);
		}
		return maxScore;
	}
	int maxCompatibilitySum(int[][] students, int[][] mentors) {
		m = students.length;
		n = students[0].length;
		visited = new boolean[m];
		return helper(0,students,mentors);
	}
}