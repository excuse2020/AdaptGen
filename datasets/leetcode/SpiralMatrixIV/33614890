class Solution {
	int[][] spiralMatrix(int m, int n, ListNode head) {
		int count = m * n;
		int[][] arr = new int[m][n];
		int startingRow = 0;
		int endingRow = m - 1;
		int startingCol = 0;
		int endingCol = n - 1;
		int index = 0;
		int total = 0;
		while (count > total) {
			for (index = startingCol; count > total && index <= endingCol; index++) {
				if (head != null) {
					arr[startingRow][index] = head.val;
					head = head.next;
				} 
				else {
					arr[startingRow][index] = -1;
				}
				total++;
			}
			startingRow++;
			for (index = startingRow; count > total && index <= endingRow; index++) {
				if (head != null) {
					arr[index][endingCol] = head.val;
					head = head.next;
				} 
				else {
					arr[index][endingCol] = -1;
				}
				total++;
			}
			endingCol--;
			for (index = endingCol; count > total && index >= startingCol; index--) {
				if (head != null) {
					arr[endingRow][index] = head.val;
					head = head.next;
				} 
				else {
					arr[endingRow][index] = -1;
				}
				total++;
			}
			endingRow--;
			for (index = endingRow; count > total && index >= startingRow; index--) {
				if (head != null) {
					arr[index][startingCol] = head.val;
					head = head.next;
				} 
				else {
					arr[index][startingCol] = -1;
				}
				total++;
			}
			startingCol++;
		}
		return arr;
	}
}