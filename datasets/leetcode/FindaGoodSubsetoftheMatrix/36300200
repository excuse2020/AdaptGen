class Solution {
	boolean check(int[][] grid, int i, int j, int col) {
		int val = 0;
		for (int c = 0; c < col; c++) {
			val = grid[i][c] + grid[j][c];
			if (val > 1) {
				return false;
			}
		}
		return true;
	}
	List<Integer> goodSubsetofBinaryMatrix(int[][] grid) {
		List<Integer> list = new ArrayList<>();
		int row = grid.length;
		int col = grid[0].length;
		for (int i = 0; i < row; i++) {
			for (int j = i + 1; j < row; j++) {
				if (check(grid,i,j,col)) {
					list.add(i);
					list.add(j);
					return list;
				}
			}
		}
		for (int i = 0; i < row; i++) {
			boolean flag = false;
			for (int j = 0; j < col; j++) {
				if (grid[i][j] > 0) {
					flag = true;
					break;
				}
			}
			if (!flag) {
				list.add(i);
				return list;
			}
		}
		return list;
	}
}