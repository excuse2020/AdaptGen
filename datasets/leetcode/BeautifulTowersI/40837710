class Solution {
	long lsum(List<Integer> hm, int p) {
		long l1 = new long[hm.size()];
		int n = hm.size();
		l1[p] = hm.get(p);
		for (int i = p - 1; i >= 0; i--) {
			if (hm.get(i) <= l1[i + 1]) {
				l1[i] = hm.get(i);
			} 
			else {
				l1[i] = l1[i + 1];
			}
		}
		long sum = 0;
		for (int i = 0; i < l1.length; i++) {
			sum += l1[i];
		}
		return sum;
	}
	long maximumSumOfHeights(List<Integer> hm) {
		long m = -1000L;
		for (int i = 0; i < hm.size(); i++) {
			long s = lsum(hm,i) + rsum(hm,i) - hm.get(i);
			m = Math.max(s,m);
		}
		return m;
	}
	long rsum(List<Integer> hm, int p) {
		long l1 = new long[hm.size()];
		int n = hm.size();
		l1[p] = hm.get(p);
		for (int i = p + 1; i < n; i++) {
			if (hm.get(i) <= l1[i - 1]) {
				l1[i] = hm.get(i);
			} 
			else {
				l1[i] = l1[i - 1];
			}
		}
		long sum = 0;
		for (int i = 0; i < l1.length; i++) {
			sum += l1[i];
		}
		return sum;
	}
}