class Solution {
	int maximumLength(int[] nums, int k) {
		int n = nums.length;
		int dp = new int[n][k + 1];
		for (int i = 0; i <= k; i++) {
			dp[0][i] = 1;
		}
		Map<Integer, Integer> lastIndexMap = new HashMap<Integer, Integer>();
		lastIndexMap.put(nums[0],0);
		int maxIdx = new int[n][k + 1][2];
		for (int i = 0; i <= k; i++) {
			maxIdx[0][i][0] = 1;
			maxIdx[0][i][1] = 0;
		}
		int max = 1;
		for (int i = 1; i < n; i++) {
			for (int a = 0; a <= k; a++) {
				dp[i][a] = 1;
				if (lastIndexMap.containsKey(nums[i])) {
					int idx = lastIndexMap.get(nums[i]);
					dp[i][a] = Math.max(dp[i][a],dp[idx][a] + 1);
				}
				if (a - 1 >= 0) {
					int idx = maxIdx[i - 1][a - 1][1];
					if (nums[idx] != nums[i]) {
						dp[i][a] = Math.max(dp[i][a],dp[idx][a - 1] + 1);
					}
				}
				dp[i][a] = Math.max(dp[i][a],1);
				if (dp[i][a] > maxIdx[i][a][0]) {
					maxIdx[i][a][0] = dp[i][a];
					maxIdx[i][a][1] = i;
				}
				max = Math.max(max,dp[i][a]);
			}
			for (int a = 0; a <= k; a++) {
				if (maxIdx[i - 1][a][0] > maxIdx[i][a][0]) {
					maxIdx[i][a][0] = maxIdx[i - 1][a][0];
					maxIdx[i][a][1] = maxIdx[i - 1][a][1];
				}
			}
			lastIndexMap.put(nums[i],i);
		}
		return max;
	}
}