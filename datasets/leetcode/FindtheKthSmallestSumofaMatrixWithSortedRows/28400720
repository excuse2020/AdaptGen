class Solution {
	int kthSmallest(int[][] mat, int k) {
		if (mat.length == 1) {
			return mat[0][k - 1];
		}
		int[] arr = smallest(mat[0],mat[1],k);
		for (int i = 2; i < mat.length; i++) {
			arr = merge(arr,mat[i],k);
		}
		return arr[k - 1];
	}
	int[] smallest(int[] a, int[] b, int k) {
		PriorityQueue<Integer> pq = new PriorityQueue<>(Collections.reverseOrder());
		int count = 0;
		for (int i = 0; i < a.length; i++) {
			for (int j = 0; j < b.length; j++) {
				int sum = a[i] + b[j];
				if (count >= k && sum < pq.peek()) {
					pq.poll();
					pq.add(sum);
				} 
				else if (count < k) {
					pq.add(sum);
				} 
				else {
					break;
				}
				count++;
			}
		}
		Stack<Integer> s = new Stack<>();
		while (!pq.isEmpty()) {
			s.add(pq.poll());
		}
		int[] res = new int[s.size()];
		int i = 0;
		while (!s.isEmpty()) {
			res[i] = s.pop();
			i++;
		}
		return res;
	}
}