class Solution {
	int rob(ArrayList<Integer> nums) {
		int n = nums.size();
		if (n == 0) {
			return 0;
		}
		if (n == 1) {
			return nums.get(0);
		}
		int prev2 = 0;
		int prev1 = nums.get(0);
		int curr = 0;
		for (int i = 1; i < n; i++) {
			int toPick = nums.get(i);
			if (i > 1) {
				toPick += prev2;
			}
			int noToPick = prev1;
			curr = Math.max(toPick,noToPick);
			prev2 = prev1;
			prev1 = curr;
		}
		return curr;
	}
	int rob(int[] nums) {
		int n = nums.length;
		if (n == 0) {
			return 0;
		}
		if (n == 1) {
			return nums[0];
		}
		if (n == 2) {
			return Math.max(nums[0],nums[1]);
		}
		ArrayList<Integer> exceptFirst = new ArrayList<>();
		ArrayList<Integer> exceptLast = new ArrayList<>();
		for (int i = 0; i < n; i++) {
			if (i != 0) {
				exceptFirst.add(nums[i]);
			}
			if (i != n - 1) {
				exceptLast.add(nums[i]);
			}
		}
		return Math.max(rob(exceptFirst),rob(exceptLast));
	}
}