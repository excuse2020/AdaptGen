class Solution {
	int maxStarSum(int[] vals, int[][] edges, int k) {
		ArrayList<PriorityQueue<Integer>> list = new ArrayList<>();
		int n = vals.length;
		for (int i = 0; i < n; i++) {
			list.add(new PriorityQueue<>((a, b) -> {a - b}));
		}
		for (int a: edges) {	
			PriorityQueue<Integer> q1 = list.get(a[0]);
			PriorityQueue<Integer> q2 = list.get(a[1]);
			if (q1.size() < k) {
				q1.add(vals[a[1]]);
			} 
			else if (k != 0 && q1.peek() < vals[a[1]]) {
				q1.poll();
				q1.add(vals[a[1]]);
			}
			if (q2.size() < k) {
				q2.add(vals[a[0]]);
			} 
			else if (k != 0 && q2.peek() < vals[a[0]]) {
				q2.poll();
				q2.add(vals[a[0]]);
			}
		}
		int max = Integer.MIN_VALUE;
		for (int i = 0; i < n; i++) {
			int sum = vals[i];
			PriorityQueue<Integer> q = list.get(i);
			while (q.isEmpty() == false) {
				if (q.peek() < 0) {
					q.poll();
					continue;
				}
				sum += q.poll();
			}
			max = Math.max(max,sum);
		}
		return max;
	}
}