class Solution {
	int minEditCost(String str1, String str2, int ic, int dc, int rc) {
		int n = str1.length();
		int m = str2.length();
		if (n * m == 0) {
			return n + m;
		}
		int[][] dp = new int[n + 1][m + 1];
		for (int i = 0; i <= n; i++) {
			dp[i][0] = i * dc;
		}
		for (int i = 0; i <= m; i++) {
			dp[0][i] = i * ic;
		}
		for (int i = 1; i <= n; ++i) {
			char c1 = str1.charAt(i - 1);
			for (int j = 1; j <= m; ++j) {
				int left = dp[i][j - 1] + ic;
				int above = dp[i - 1][j] + dc;
				int left_above = dp[i - 1][j - 1];
				if (c1 != str2.charAt(j - 1)) {
					left_above = dp[i - 1][j - 1] + rc;
				}
				dp[i][j] = Math.min(left_above,Math.min(left,above));
			}
		}
		return dp[n][m];
	}
}