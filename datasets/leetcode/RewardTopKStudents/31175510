class Solution {
	HashSet<String> neg = new HashSet<>();
	HashSet<String> pos = new HashSet<>();
	int Match(String s) {
		if (pos.contains(s)) {
			return 3;
		}
		if (neg.contains(s)) {
			return -1;
		}
		return 0;
	}
	int[] feedback(String s, int std) {
		int[] res = new int[2];
		int tscore = 0;
		String[] tokens = s.split(" ");
		for (String ss: tokens) {	
			tscore += Match(ss);
		}
		res[0] = tscore;
		res[1] = std;
		return res;
	}
	List<Integer> topStudents(String[] positive_feedback, String[] negative_feedback, String[] report, int[] student_id, int k) {
		for (String s: positive_feedback) {	
			pos.add(s);
		}
		for (String s: negative_feedback) {	
			neg.add(s);
		}
		PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> {b[0] == a[0] ? b[1] - a[1] : a[0] - b[0]});
		for (int i = 0; i < report.length; i++) {
			int[] temp = feedback(report[i],student_id[i]);
			pq.add(temp);
			if (i >= k) {
				pq.poll();
			}
		}
		List<Integer> res = new ArrayList<>(k);
		while (pq.size() != 0) {
			res.add(pq.poll()[1]);
		}
		Collections.reverse(res);
		return res;
	}
}