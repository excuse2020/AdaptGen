class Solution {
	void binarySearch(List<Integer> sorted, List<List<Integer>> solution, int q) {
		int left = 0, right = sorted.size() - 1;
		while (left <= right) {
			int mid = (right + left) / 2;
			int midElement = sorted.get(mid);
			if (midElement == q) {
				solution.add(Arrays.asList(q,q));
				return;
			} 
			else if (midElement < q) {
				left = mid + 1;
			} 
			else if (midElement > q) {
				right = mid - 1;
			}
		}
		if (right < 0) {
			solution.add(Arrays.asList(-1,sorted.get(left)));
		} 
		else if (left > sorted.size() - 1) {
			solution.add(Arrays.asList(sorted.get(right),-1));
		} 
		else {
			solution.add(Arrays.asList(sorted.get(right),sorted.get(left)));
		}
	}
	List<List<Integer>> closestNodes(TreeNode root, List<Integer> queries) {
		List<Integer> sorted = new ArrayList<>();
		getTreeNodes(root,sorted);
		Collections.sort(sorted);
		List<List<Integer>> solution = new ArrayList<>();
		for (int q: queries) {	
			binarySearch(sorted,solution,q);
		}
		return solution;
	}
	void getTreeNodes(TreeNode root, List<Integer> nodes) {
		if (root == null) {
			return;
		}
		nodes.add(root.val);
		getTreeNodes(root.left,nodes);
		getTreeNodes(root.right,nodes);
	}
}