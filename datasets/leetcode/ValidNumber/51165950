class Solution {
	DFA numberDfa = new DFA();
	boolean isNumber(String s) {
		return numberDfa.accept(s);
	}
	class DFA {
		Set<Integer> finalStates = new HashSet<>();
		Map<Integer, Map<Character, Integer>> transitions = new HashMap<>();
		boolean accept(String s) {
			int state = 0;
			for (int i = 0; i < s.length(); i++) {
				Integer nextState = transition(state,s.charAt(i));
				if (nextState == null) {
					return false;
				}
				state = nextState;
			}
			return finalStates.contains(state);
		}
		void finalStates(int finals) {
			for (var f: finals) {	
				finalStates.add(f);
			}
		}
		void transition(int source, int target, char characters) {
			Map<Character, Integer> out;
		}
		Integer transition(int origin, char c) {
			if (transitions.containsKey(origin)) {
				var target = transitions.get(origin).get(c);
				return target;
			}
			return null;
		}
	}
}