class Solution {
	int maxIncreasingCells(int[][] mat) {
		int m = mat.length;
		int n = mat[0].length;
		int[] rows = new int[m];
		int[] cols = new int[n];
		Map<Integer, ArrayList<Pair<Integer, Integer>>> valToIndices = new HashMap<>();
		int[][] maxPathLength = new int[m][n];
		TreeSet<Integer> decreasingSet = new TreeSet<>(Comparator.reverseOrder());
		for (int i = 0; i < m; ++i) {
			for (int j = 0; j < n; ++j) {
				int val = mat[i][j];
				valToIndices.putIfAbsent(val,new ArrayList<>());
				valToIndices.get(val).add(new Pair<>(i, j));
				decreasingSet.add(val);
			}
		}
		for (int val: decreasingSet) {	
			for (Pair<Integer, Integer> pair: valToIndices.get(val)) {	
				int i = pair.getKey();
				int j = pair.getValue();
				maxPathLength[i][j] = Math.max(rows[i],cols[j]) + 1;
			}
			for (Pair<Integer, Integer> pair: valToIndices.get(val)) {	
				int i = pair.getKey();
				int j = pair.getValue();
				rows[i] = Math.max(rows[i],maxPathLength[i][j]);
				cols[j] = Math.max(cols[j],maxPathLength[i][j]);
			}
		}
		return Math.max(Arrays.stream(rows).max().getAsInt(),Arrays.stream(cols).max().getAsInt());
	}
}