class Solution {
	int mod = 1000000007;
	long memoize(int st, String s, int k, Long[] dp) {
		if (st >= s.length()) {
			return 1;
		}
		if (dp[st] != null) {
			return dp[st];
		}
		long count = 0;
		for (int i = st; i < s.length(); i++) {
			long val = Long.parseLong(s.substring(st,i + 1));
			if (val > k || val == 0) {
				break;
			}
			count += memoize(i + 1,s,k,dp) % mod;
		}
		return dp[st] = count % mod;
	}
	int numberOfArrays(String s, int k) {
		return tabulation(s,k);
	}
	long recursion(int st, String s, int k) {
		if (st >= s.length()) {
			return 1;
		}
		long count = 0;
		for (int i = st; i < s.length(); i++) {
			long val = Long.parseLong(s.substring(st,i + 1));
			if (val > k || val == 0) {
				break;
			}
			count += recursion(i + 1,s,k) % mod;
		}
		return count % mod;
	}
	int tabulation(String s, int k) {
		int n = s.length();
		int[] dp = new int[n + 1];
		dp[n] = 1;
		for (int st = n - 1; st >= 0; st--) {
			int count = 0;
			for (int i = st; i < n; i++) {
				long val = Long.parseLong(s.substring(st,i + 1));
				if (val > k || val == 0) {
					break;
				}
				count += dp[i + 1];
				count %= mod;
			}
			dp[st] = count % mod;
		}
		return dp[0];
	}
}