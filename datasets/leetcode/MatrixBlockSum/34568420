class Solution {
	int blockSum(int[][] mat, int rowStart, int rowEnd, int colStart, int colEnd) {
		int sum = 0;
		for (int i = rowStart; i <= rowEnd; i++) {
			for (int j = colStart; j <= colEnd; j++) {
				sum += mat[i][j];
			}
		}
		return sum;
	}
	int[][] matrixBlockSum(int[][] mat, int k) {
		int[][] answer = new int[mat.length][mat[0].length];
		for (int i = 0; i < mat.length; i++) {
			for (int j = 0; j < mat[0].length; j++) {
				int rowStart = i - k;
				int rowEnd = i + k;
				int colStart = j - k;
				int colEnd = j + k;
				if (rowStart < 0) {
					rowStart = 0;
				}
				if (rowEnd >= mat.length) {
					rowEnd = mat.length - 1;
				}
				if (colStart < 0) {
					colStart = 0;
				}
				if (colEnd >= mat[0].length) {
					colEnd = mat[0].length - 1;
				}
				answer[i][j] = blockSum(mat,rowStart,rowEnd,colStart,colEnd);
			}
		}
		return answer;
	}
}