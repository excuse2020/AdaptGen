class Solution {
	int numBusesToDestination(int[][] routes, int source, int target) {
		Map<Integer, List<Integer>> map = new HashMap<>();
		for (int i = 0; i < routes.length; i++) {
			for (int j = 0; j < routes[i].length; j++) {
				map.computeIfAbsent(routes[i][j],(k) -> {new ArrayList<>()}).add(i);
			}
		}
		Queue<Integer> queue = new LinkedList<>();
		queue.offer(source);
		Set<Integer> visitedBusStops = new HashSet<>();
		Set<Integer> visitedBuses = new HashSet<>();
		int level = 0;
		while (!queue.isEmpty()) {
			int size = queue.size();
			while (size-- > 0) {
				int stop = queue.poll();
				if (stop == target) {
					return level;
				}
				if (visitedBusStops.contains(stop)) {
					continue;
				}
				visitedBusStops.add(stop);
				for (int bus: map.get(stop)) {	
					if (visitedBuses.contains(bus)) {
						continue;
					}
					for (int remainingBusStop: routes[bus]) {	
						queue.offer(remainingBusStop);
					}
					visitedBuses.add(bus);
				}
			}
			level++;
		}
		return -1;
	}
}