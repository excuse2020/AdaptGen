class Solution {
	Map<Integer, Integer> map;
	TreeNode buildTree(int[] inorder, int[] postorder) {
		map = new HashMap<>();
		for (int i = 0; i < inorder.length; ++i) {
			map.put(inorder[i],i);
		}
		TreeNode root = split(inorder,0,inorder.length,postorder,0,postorder.length);
		return root;
	}
	TreeNode split(int[] inorder, int inStart, int inEnd, int[] postorder, int postStart, int postEnd) {
		if (inStart >= inEnd || postStart >= postEnd) {
			return null;
		}
		int rootVal = postorder[postEnd - 1];
		int rootIndex = map.get(rootVal);
		int leftLength = rootIndex - inStart;
		TreeNode root = new TreeNode(rootVal);
		root.left = split(inorder,inStart,rootIndex,postorder,postStart,postStart + leftLength);
		root.right = split(inorder,rootIndex + 1,inEnd,postorder,postStart + leftLength,postEnd - 1);
		return root;
	}
}