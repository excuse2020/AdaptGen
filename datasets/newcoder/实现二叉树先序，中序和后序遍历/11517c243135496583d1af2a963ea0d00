class Solution {
	void inOrder(TreeNode root, List res) {
		if (root == null) {
			return;
		}
		inOrder(root.left,res);
		res.add(root.val);
		inOrder(root.right,res);
	}
	List inOrderTraversal(TreeNode root) {
		if (root == null) {
			return new ArrayList();
		}
		List res = new ArrayList();
		inOrder(root,res);
		return res;
	}
	void postOrder(TreeNode root, List res) {
		if (root == null) {
			return;
		}
		postOrder(root.left,res);
		postOrder(root.right,res);
		res.add(root.val);
	}
	List postOrderTraversal(TreeNode root) {
		if (root == null) {
			return new ArrayList();
		}
		List res = new ArrayList();
		postOrder(root,res);
		return res;
	}
	void preOrder(TreeNode root, List res) {
		if (root == null) {
			return;
		}
		res.add(root.val);
		preOrder(root.left,res);
		preOrder(root.right,res);
	}
	List preOrderTraversal(TreeNode root) {
		if (root == null) {
			return new ArrayList();
		}
		List res = new ArrayList();
		preOrder(root,res);
		return res;
	}
	int[][] threeOrders(TreeNode root) {
		int[][] res;
		if (root == null) {
			return new int[0][0];
		}
		List pre = preOrderTraversal(root);
		List in = inOrderTraversal(root);
		List post = postOrderTraversal(root);
		int size = pre.size();
		res = new int[3][size];
		for (int i = 0; i < size; i++) {
			res[0][i] = pre.get(i);
			res[1][i] = in.get(i);
			res[2][i] = post.get(i);
		}
		return res;
	}
}