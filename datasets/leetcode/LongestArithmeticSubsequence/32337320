class Solution {
	int longestArithSeqLength(int[] nums) {
		HashMap<Integer, Integer>[] dp = new HashMap[nums.length + 1];
		return solveTab(nums,dp);
	}
	int solveMem(int[] nums, int prev, int diff, HashMap<Integer, Integer>[] dp) {
		if (prev == nums.length) {
			return 0;
		}
		if (dp[prev] != null && dp[prev].containsKey(diff)) {
			return dp[prev].get(diff);
		}
		int ans = 0;
		for (int i = prev + 1; i < nums.length; i++) {
			if (nums[i] - nums[prev] == diff) {
				ans = Math.max(ans,1 + solveMem(nums,i,diff,dp));
			}
		}
		if (dp[prev] == null) {
			dp[prev] = new HashMap<Integer, Integer>();
		}
		dp[prev].put(diff,ans);
		return ans;
	}
	int solveTab(int[] nums, HashMap<Integer, Integer>[] dp) {
		int ans = 0;
		for (int i = nums.length - 2; i >= 0; i--) {
			for (int j = nums.length - 1; j > i; j--) {
				int diff = nums[i] - nums[j];
				int cnt = 1;
				if (dp[j] != null && dp[j].containsKey(diff)) {
					cnt = dp[j].get(diff);
				}
				if (dp[i] == null) {
					dp[i] = new HashMap<Integer, Integer>();
				}
				dp[i].put(diff,1 + cnt);
				ans = Math.max(ans,1 + cnt);
			}
		}
		return ans;
	}
}