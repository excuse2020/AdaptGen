class Solution {
	ListNode reverseBetween(ListNode head, int m, int n) {
		if (m == n) {
			return head;
		}
		if (m == 1) {
			ListNode L1 = head;
			int mc = m;
			int nc = n;
			while (nc != 1) {
				nc--;
				L1 = L1.next;
			}
			ListNode L2 = L1;
			ListNode L3 = L2.next;
			L1 = head;
			L2.next = null;
			ListNode pre = L3;
			ListNode cur = L1;
			while (cur != null) {
				ListNode temp = cur.next;
				cur.next = pre;
				pre = cur;
				cur = temp;
			}
			return pre;
		} 
		else {
			ListNode L1 = head;
			ListNode L2 = head;
			ListNode L3 = head;
			ListNode L4 = head;
			int mc = m;
			int nc = n;
			while (mc != 1) {
				mc--;
				L2 = L2.next;
				if (L2 != L1.next) {
					L1 = L1.next;
				}
			}
			while (nc != 1) {
				nc--;
				L3 = L3.next;
			}
			L4 = L3.next;
			L3.next = null;
			L1.next = L3;
			ListNode pre = L4;
			ListNode cur = L2;
			while (cur != null) {
				ListNode temp = cur.next;
				cur.next = pre;
				pre = cur;
				cur = temp;
			}
			return head;
		}
	}
}