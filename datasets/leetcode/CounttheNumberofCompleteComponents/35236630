class Solution {
	int curr_nodes, curr_edges;
	int countCompleteComponents(int n, int[][] edges) {
		ArrayList<ArrayList<Integer>> adj = new ArrayList<>();
		for (int i = 0; i < n; i++) {
			adj.add(new ArrayList<>());
		}
		for (int edge: edges) {	
			adj.get(edge[0]).add(edge[1]);
			adj.get(edge[1]).add(edge[0]);
		}
		boolean vis = new boolean[n];
		int connected_components = 0;
		for (int i = 0; i < n; i++) {
			if (!vis[i]) {
				curr_nodes = 0;
				curr_edges = 0;
				dfs(i,adj,vis);
				if ((curr_nodes * (curr_nodes - 1)) == curr_edges) {
					connected_components += 1;
				}
			}
		}
		return connected_components;
	}
	void dfs(int node, ArrayList<ArrayList<Integer>> adj, boolean vis) {
		if (vis[node]) {
			return;
		}
		vis[node] = true;
		curr_nodes += 1;
		curr_edges += adj.get(node).size();
		for (Integer it: adj.get(node)) {	
			dfs(it,adj,vis);
		}
	}
}