class Solution {
	int max = 0;
	void dfs(int n, int V, ArrayList<ArrayList<Integer>> adj, int[] informTime, int count) {
		max = Math.max(max,count);
		for (int i: adj.get(V)) {	
			count += informTime[V];
			dfs(n,i,adj,informTime,count);
			count -= informTime[V];
		}
	}
	int numOfMinutes(int n, int headID, int[] manager, int[] informTime) {
		boolean[] visited = new boolean[n];
		ArrayList<ArrayList<Integer>> adj = new ArrayList<>(n);
		for (int i = 0; i < n; i++) {
			adj.add(new ArrayList<>());
		}
		for (int i = 0; i < n; i++) {
			if (manager[i] != -1) {
				adj.get(manager[i]).add(i);
			}
		}
		dfs(n,headID,adj,informTime,0);
		return max;
	}
}