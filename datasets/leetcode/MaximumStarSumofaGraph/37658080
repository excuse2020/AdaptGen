class Solution {
	int maxStarSum(int[] vals, int[][] edges, int k) {
		if (edges.length == 0) {
			Arrays.sort(vals);
			return vals[vals.length - 1];
		}
		ArrayList<ArrayList<Integer>> adj = new ArrayList<>();
		int max = Integer.MIN_VALUE;
		for (int i = 0; i < vals.length; i++) {
			adj.add(new ArrayList<>());
		}
		for (int i = 0; i < edges.length; i++) {
			int u = edges[i][0];
			int v = edges[i][1];
			adj.get(u).add(v);
			adj.get(v).add(u);
		}
		for (int i = 0; i < vals.length; i++) {
			PriorityQueue<Integer> pq = new PriorityQueue<>();
			int sum = 0;
			for (Integer it: adj.get(i)) {	
				pq.add(vals[it]);
				if (pq.size() > k) {
					pq.poll();
				}
			}
			while (!pq.isEmpty()) {
				if (sum + pq.peek() > sum) {
					sum = sum + pq.peek();
				}
				pq.poll();
			}
			max = Integer.max(max,sum + vals[i]);
			max = Integer.max(max,vals[i]);
		}
		return max;
	}
}