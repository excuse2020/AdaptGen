class Solution {
	void dfs(int[][] stones, int[] stone, HashSet<int[]> visited) {
		if (visited.contains(stone)) {
			return;
		}
		visited.add(stone);
		for (int i = 0; i < stones.length; i++) {
			if (!visited.contains(stones[i]) && (stones[i][0] == stone[0] || stones[i][1] == stone[1])) {
				dfs(stones,stones[i],visited);
			}
		}
	}
	int removeStones(int[][] stones) {
		HashSet<int[]> visited = new HashSet<>();
		int count = 0;
		for (int i = 0; i < stones.length; i++) {
			if (!visited.contains(stones[i])) {
				dfs(stones,stones[i],visited);
				count++;
			}
		}
		return stones.length - count;
	}
}