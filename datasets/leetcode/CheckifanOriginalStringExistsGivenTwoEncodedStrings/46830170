class Solution {
	Boolean[][][] dp;
	boolean possiblyEquals(String s1, String s2) {
		dp = new Boolean[s1.length() + 1][s2.length() + 1][2000];
		return possiblyEquals(s1,s2,0,0,0);
	}
	boolean possiblyEquals(String s1, String s2, int i1, int i2, int lengthDifference) {
		if (i1 == s1.length() && s2.length() == i2) {
			return lengthDifference == 0;
		} 
		else if (dp[i1][i2][lengthDifference + 1000] != null) {
			return dp[i1][i2][lengthDifference + 1000];
		} 
		else if (i1 < s1.length() && i2 < s2.length() && lengthDifference == 0 && !Character.isDigit(s1.charAt(i1)) && s1.charAt(i1) == s2.charAt(i2)) {
			return possiblyEquals(s1,s2,i1 + 1,i2 + 1,lengthDifference);
		} 
		else if (i1 < s1.length() && !Character.isDigit(s1.charAt(i1)) && lengthDifference < 0) {
			if (possiblyEquals(s1,s2,i1 + 1,i2,lengthDifference + 1)) {
				return true;
			}
		} 
		else if (i2 < s2.length() && !Character.isDigit(s2.charAt(i2)) && lengthDifference > 0) {
			return (possiblyEquals(s1,s2,i1,i2 + 1,lengthDifference - 1));
		} 
		else if (i1 < s1.length() && Character.isDigit(s1.charAt(i1))) {
			for (int i = i1, val = 0; i < i1 + 3 && i < s1.length() && Character.isDigit(s1.charAt(i)); ++i) {
				val *= 10;
				val += Character.getNumericValue(s1.charAt(i));
				if (possiblyEquals(s1,s2,i + 1,i2,lengthDifference + val)) {
					return true;
				}
			}
		} 
		else if (i2 < s2.length() && Character.isDigit(s2.charAt(i2))) {
			for (int i = i2, val = 0; i < i2 + 3 && i < s2.length() && Character.isDigit(s2.charAt(i)); ++i) {
				val *= 10;
				val += Character.getNumericValue(s2.charAt(i));
				if (possiblyEquals(s1,s2,i1,i + 1,lengthDifference - val)) {
					return true;
				}
			}
		}
		return dp[i1][i2][lengthDifference + 1000] = false;
	}
}