class Solution {
	void dfs(char[][] grid, int r, int c) {
		int row = grid.length;
		int col = grid[0].length;
		if (r < 0 || c < 0 || r >= row || c >= col || grid[r][c] == '0') {
			return;
		}
		grid[r][c] = '0';
		dfs(grid,r - 1,c);
		dfs(grid,r + 1,c);
		dfs(grid,r,c - 1);
		dfs(grid,r,c + 1);
	}
	int solve(char[][] grid) {
		if (grid == null || grid.length == 0) {
			return 0;
		}
		int landNum = 0;
		for (int i = 0; i < grid.length; i++) {
			for (int j = 0; j < grid[0].length; j++) {
				if (grid[i][j] == '1') {
					landNum++;
					dfs(grid,i,j);
				}
			}
		}
		return landNum;
	}
}