class Solution {
	int dfs(List<List<Integer>> adj, boolean visited, int from) {
		int change = 0;
		visited[from] = true;
		for (var to: adj.get(from)) {	
			if (!visited[Math.abs(to)]) {
				change += dfs(adj,visited,Math.abs(to)) + (to > 0 ? 1 : 0);
			}
		}
		return change;
	}
	int minReorder(int n, int[][] connections) {
		List<List<Integer>> adj = new ArrayList<>();
		for (int i = 0; i < n; i++) {
			adj.add(new ArrayList<>());
		}
		for (var c: connections) {	
			adj.get(c[0]).add(c[1]);
			adj.get(c[1]).add(-c[0]);
		}
		return dfs(adj,new boolean[n],0);
	}
}