class Solution {
	List<Integer> in = new ArrayList<>();
	List<Integer> post = new ArrayList<>();
	List<Integer> pre = new ArrayList<>();
	void inOrderRecur(TreeNode root) {
		if (root != null) {
			Stack<TreeNode> stack = new Stack();
			while (!stack.isEmpty() || root != null) {
				if (root != null) {
					stack.add(root);
					root = root.left;
				} 
				else {
					TreeNode node = stack.pop();
					in.add(node.val);
					if (node.right != null) {
						root = node.right;
					}
				}
			}
		}
	}
	void inOrderRecur1(TreeNode root) {
		if (root == null) {
			return;
		}
		inOrderRecur(root.left);
		in.add(root.val);
		inOrderRecur(root.right);
	}
	void postOrderRecur(TreeNode root) {
		if (root != null) {
			Stack<Integer> help = new Stack();
			Stack<TreeNode> stack = new Stack();
			stack.add(root);
			while (!stack.isEmpty()) {
				TreeNode node = stack.pop();
				help.add(node.val);
				if (node.left != null) {
					stack.add(node.left);
				}
				if (node.right != null) {
					stack.add(node.right);
				}
			}
			while (!help.isEmpty()) {
				post.add(help.pop());
			}
		}
	}
	void postOrderRecur1(TreeNode root) {
		if (root == null) {
			return;
		}
		postOrderRecur(root.left);
		postOrderRecur(root.right);
		post.add(root.val);
	}
	void preOrderRecur(TreeNode root) {
		if (root != null) {
			Stack<TreeNode> stack = new Stack();
			stack.push(root);
			while (!stack.isEmpty()) {
				TreeNode node = stack.pop();
				pre.add(node.val);
				if (node.right != null) {
					stack.push(node.right);
				}
				if (node.left != null) {
					stack.push(node.left);
				}
			}
		}
	}
	void preOrderRecur1(TreeNode root) {
		if (root == null) {
			return;
		}
		pre.add(root.val);
		preOrderRecur(root.left);
		preOrderRecur(root.right);
	}
	int[][] threeOrders(TreeNode root) {
		preOrderRecur(root);
		inOrderRecur(root);
		postOrderRecur(root);
		int i = 0;
		int[][] res = new int[3][pre.size()];
		while (i < pre.size()) {
			res[0][i] = pre.get(i);
			res[1][i] = in.get(i);
			res[2][i] = post.get(i);
			i++;
		}
		return res;
	}
}