class Solution {
	int ways(String[] pizza, int k) {
		int[][] apples = new int[pizza.length][pizza[0].length()];
		Integer[][][] memo = new Integer[apples.length][apples[0].length][10];
		int i = pizza.length - 1;
		int j = pizza[0].length() - 1;
	}
	int waysHelper(Integer[][][] memo, int[][] apples, int k, int r, int c) {
		if (k == 1) {
			return apples[r][c] > 0 ? 1 : 0;
		} 
		else if (memo[r][c][k - 1] != null) {
			return memo[r][c][k - 1];
		}
		long s = 0;
		for (int i = r + 1; i < apples.length; i++) {
			if (apples[r][c] - apples[i][c] > 0 && apples[i][c] >= k - 1) {
				s += waysHelper(memo,apples,k - 1,i,c);
			}
		}
		for (int j = c + 1; j < apples[0].length; j++) {
			if (apples[r][c] - apples[r][j] > 0 && apples[r][j] >= k - 1) {
				s += waysHelper(memo,apples,k - 1,r,j);
			}
		}
		memo[r][c][k - 1] = Math.toIntExact(s % 1_000_000_007);
		return memo[r][c][k - 1];
	}
}