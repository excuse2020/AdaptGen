class Solution {
	boolean[][] mark;
	void dfs(char[][] grid, int i, int j) {
		if (i < 0 || i >= grid.length || j < 0 || j >= grid[i].length || grid[i][j] == '0' || mark[i][j]) {
			return;
		}
		mark[i][j] = true;
		dfs(grid,i + 1,j);
		dfs(grid,i - 1,j);
		dfs(grid,i,j + 1);
		dfs(grid,i,j - 1);
	}
	int solve(char[][] grid) {
		mark = new boolean[grid.length][grid[0].length];
		int count = 0;
		for (int i = 0; i < grid.length; i++) {
			for (int j = 0; j < grid[i].length; j++) {
				if (grid[i][j] == '1' && !mark[i][j]) {
					dfs(grid,i,j);
					count++;
				}
			}
		}
		return count;
	}
}