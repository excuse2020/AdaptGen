class Solution {
	int getMaximumGold(int[][] grid) {
		int max = 0;
		for (int i = 0; i < grid.length; i++) {
			for (int j = 0; j < grid[0].length; j++) {
				if (grid[i][j] != 0) {
					max = Math.max(max,recur(i,j,grid));
				}
			}
		}
		return max;
	}
	int recur(int row, int col, int[][] grid) {
		if (row < 0 || row >= grid.length || col < 0 || col >= grid[0].length) {
			return 0;
		}
		if (grid[row][col] == 0) {
			return 0;
		}
		int cur = grid[row][col];
		grid[row][col] = 0;
		int up = cur + recur(row - 1,col,grid);
		int down = cur + recur(row + 1,col,grid);
		int left = cur + recur(row,col - 1,grid);
		int right = cur + recur(row,col + 1,grid);
		grid[row][col] = cur;
		return Math.max(up,Math.max(down,Math.max(left,right)));
	}
}