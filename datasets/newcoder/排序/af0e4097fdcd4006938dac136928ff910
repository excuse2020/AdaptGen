class Solution {
	int[] MySort(int[] arr) {
		int tmp = new int[arr.length];
		merge_sort(arr,0,arr.length - 1,tmp);
		return arr;
	}
	void merge_sort(int q, int l, int r, int tmp) {
		if (l >= r) {
			return;
		}
		int mid = l + r >> 1;
		merge_sort(q,l,mid,tmp);
		merge_sort(q,mid + 1,r,tmp);
		int k = 0, i = l, j = mid + 1;
		while (i <= mid && j <= r) {
			if (q[i] <= q[j]) {
				tmp[k++] = q[i++];
			} 
			else {
				tmp[k++] = q[j++];
			}
		}
		while (i <= mid) {
			tmp[k++] = q[i++];
		}
		while (j <= r) {
			tmp[k++] = q[j++];
		}
		for (i = l, j = 0; i <= r; i++, j++) {
			q[i] = tmp[j];
		}
	}
}