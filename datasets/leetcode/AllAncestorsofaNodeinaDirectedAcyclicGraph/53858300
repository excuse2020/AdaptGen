class Solution {
	ArrayList<Integer> graph;
	int n;
	List<Integer> bfs(int x) {
		Queue<Integer> q = new LinkedList<>();
		q.add(x);
		int visited = new int[n];
		visited[x] = 1;
		List<Integer> ans = new ArrayList<>();
		while (q.size() != 0) {
			int a = q.remove();
			if (a != x) {
				ans.add(a);
			}
			for (var neigh: graph[a]) {	
				if (visited[neigh] != 1) {
					visited[neigh] = 1;
					q.add(neigh);
				}
			}
		}
		return ans;
	}
	List<List<Integer>> getAncestors(int nodes, int[][] edges) {
		n = nodes;
		graph = new ArrayList[n];
		for (int i = 0; i < n; i++) {
			graph[i] = new ArrayList<>();
		}
		for (var a: edges) {	
			graph[a[1]].add(a[0]);
		}
		List<List<Integer>> ans = new ArrayList<>();
		int node = 0;
		for (int i = 0; i < n; i++) {
			List<Integer> x = bfs(i);
			Collections.sort(x);
			ans.add(x);
		}
		return ans;
	}
}