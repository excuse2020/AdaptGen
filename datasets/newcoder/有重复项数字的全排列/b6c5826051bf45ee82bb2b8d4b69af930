class Solution {
	ArrayList<ArrayList<Integer>> res = new ArrayList<>();
	LinkedList<Integer> tmp = new LinkedList<>();
	void dfs(int[] num) {
		int n = num.length;
		if (tmp.size() == n) {
			ArrayList<Integer> list = new ArrayList<>();
			for (int i: tmp) {	
				list.add(num[i]);
			}
			res.add(list);
			return;
		}
		boolean[] visit = new boolean[7];
		for (int i = 0; i < n; ++i) {
			if (tmp.contains(i) || visit[num[i] + 1]) {
				continue;
			}
			tmp.add(i);
			visit[num[i] + 1] = true;
			dfs(num);
			tmp.removeLast();
		}
	}
	ArrayList<ArrayList<Integer>> permuteUnique(int[] num) {
		int n = num.length;
		Arrays.sort(num);
		dfs(num);
		return res;
	}
}