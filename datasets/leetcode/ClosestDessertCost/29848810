class Solution {
	int res = 0;
	int closestCost(int[] baseCosts, int[] toppingCosts, int target) {
		int n = baseCosts.length;
		res = baseCosts[0];
		for (int i = 0; i < n; i++) {
			helper(toppingCosts,target,baseCosts[i],0);
		}
		return res;
	}
	void helper(int top, int target, int curr, int i) {
		if (Math.abs(target - curr) < Math.abs(target - res) || Math.abs(target - curr) == Math.abs(target - res) && curr < res) {
			res = curr;
		}
		if (i >= top.length || curr > target) {
			return;
		}
		helper(top,target,curr,i + 1);
		helper(top,target,curr + top[i],i + 1);
		helper(top,target,curr + (top[i] * 2),i + 1);
	}
}