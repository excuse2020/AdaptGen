class Solution {
	int algo(int[] arr, int[] prefix, int target) {
		int left = 0, right = arr.length - 1, mid = 0;
		while (left <= right) {
			mid = (left + right) / 2;
			if (arr[mid] <= target) {
				left = mid + 1;
			} 
			else {
				right = mid - 1;
			}
		}
		int leftval = left == 0 ? 0 : prefix[left - 1];
		int diff = leftval + (arr.length - left) * target;
		return diff;
	}
	int findBestValue(int[] arr, int target) {
		Arrays.sort(arr);
		int prefix = new int[arr.length];
		prefix[0] = arr[0];
		for (int i = 1; i < arr.length; i++) {
			prefix[i] = prefix[i - 1] + arr[i];
		}
		int n = arr.length, diff = Math.abs(prefix[n - 1] - target), res = arr[n - 1];
		for (int i = target / 2 + 1; i > -1; i--) {
			int curr = Math.abs(target - algo(arr,prefix,i));
			if (curr <= diff) {
				diff = curr;
				res = i;
			}
		}
		return res;
	}
}