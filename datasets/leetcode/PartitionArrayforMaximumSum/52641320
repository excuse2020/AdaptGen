class Solution {
	int cal(int ind, int k, int a, int dp) {
		if (ind == a.length) {
			return 0;
		}
		if (dp[ind] != -1) {
			return dp[ind];
		}
		int ans = 0, sum = Integer.MIN_VALUE, len = 0, max = Integer.MIN_VALUE;
		for (int i = ind; i < Math.min(a.length,ind + k); i++) {
			len++;
			max = Math.max(max,a[i]);
			sum = (max * len) + cal(i + 1,k,a,dp);
			ans = Math.max(sum,ans);
		}
		return dp[ind] = ans;
	}
	int maxSumAfterPartitioning(int[] a, int k) {
		int dp = new int[a.length];
		Arrays.fill(dp,-1);
		return cal(0,k,a,dp);
	}
}