class Solution {
	ListNode addInList(ListNode head1, ListNode head2) {
		if (head1 == null) {
			return head2;
		}
		if (head2 == null) {
			return head1;
		}
		head1 = reverse(head1);
		head2 = reverse(head2);
		ListNode res = new ListNode(-1);
		ListNode current = null;
		int carry = 0;
		int val1 = 0;
		int val2 = 0;
		int temp = 0;
		res.next = current;
		while (head1 != null || head2 != null || carry != 0) {
			if (head1 != null) {
				val1 = head1.val;
				head1 = head1.next;
			} 
			else {
				val1 = 0;
			}
			if (head2 != null) {
				val2 = head2.val;
				head2 = head2.next;
			} 
			else {
				val2 = 0;
			}
			temp = val1 + val2;
			carry = temp / 10;
			temp %= 10;
			ListNode node = new ListNode(temp);
			node.next = current;
			current = node;
			res.next = current;
		}
		return res.next;
	}
	ListNode reverse(ListNode head) {
		ListNode current = head;
		ListNode pre = null;
		ListNode temp = null;
		while (current != null) {
			temp = current.next;
			current.next = pre;
			pre = current;
			current = temp;
		}
		return pre;
	}
}