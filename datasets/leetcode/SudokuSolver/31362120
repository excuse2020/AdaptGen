class Solution {
	int[] columnRestrictedNumbers;
	int[] rowRestrictedNumbers;
	int[] squareRestrictedNumbers;
	void fillInitialRestrictions(char[][] board) {
		int row = 0;
		int column = 0;
	}
	int getAvailableNumbersCountForPosition(int row, int column) {
		int x = getAvailableNumbersForPosition(row,column);
		int count = 0;
		for (int i = 0; i < 9; i++) {
			count += (~(x >> i) & 1);
		}
		return count;
	}
	int getAvailableNumbersForPosition(int row, int column) {
		int r = rowRestrictedNumbers[row];
		int c = columnRestrictedNumbers[column];
		int s = squareRestrictedNumbers[getSquareFromPosition(row,column)];
		return r | c;
	}
	int getSquareFromPosition(int row, int column) {
		return row / 3 * 3 + column / 3;
	}
	void removeNumberFromRestricted(int[] arr, int position, int value) {
		arr[position] &= ~value;
	}
	void removeNumberFromRestrictedArrays(int row, int column, int value) {
		removeNumberFromRestricted(rowRestrictedNumbers,row,value);
		removeNumberFromRestricted(columnRestrictedNumbers,column,value);
		removeNumberFromRestricted(squareRestrictedNumbers,getSquareFromPosition(row,column),value);
	}
	void setNumberToRestricted(int[] arr, int position, int value) {
		arr[position] |= value;
	}
	void setNumberToRestrictedArrays(int row, int column, int value) {
		setNumberToRestricted(rowRestrictedNumbers,row,value);
		setNumberToRestricted(columnRestrictedNumbers,column,value);
		setNumberToRestricted(squareRestrictedNumbers,getSquareFromPosition(row,column),value);
	}
	void solveSudoku(char[][] board) {
		if (board == null) {
			return;
		}
		rowRestrictedNumbers = new int[9];
		columnRestrictedNumbers = new int[9];
		squareRestrictedNumbers = new int[9];
		fillInitialRestrictions(board);
		sudokuSolverHelper(board);
	}
	boolean sudokuSolverHelper(char[][] board) {
		int availableNumbers, ri = 0, ci = 0, count = 0;
		int minAvailableNumbers = Integer.MAX_VALUE;
		int row = 0;
		int column = 0;
	}
}