class Solution {
	ListNode reverseBetween(ListNode head, int m, int n) {
		ArrayList<Integer> begin = new ArrayList<>();
		ArrayList<Integer> mid = new ArrayList<>();
		ArrayList<Integer> end = new ArrayList<>();
		Stack<Integer> stack = new Stack<>();
		ListNode find = head;
		int i = 1;
		while (find != null) {
			if (i < m) {
				begin.add(find.val);
			}
			if (i >= m && i <= n) {
				stack.push(find.val);
			}
			if (i > n) {
				end.add(find.val);
			}
			i++;
			find = find.next;
		}
		while (!stack.isEmpty()) {
			mid.add(stack.pop());
		}
		begin.addAll(mid);
		begin.addAll(end);
		i = 1;
		Integer first = begin.get(0);
		ListNode tmp = new ListNode(first);
		ListNode returnList = tmp;
		for (Integer num: begin) {	
			if (i == 1) {
				i++;
				continue;
			}
			ListNode tmpNode = new ListNode(num);
			tmp.next = tmpNode;
			tmp = tmp.next;
		}
		return returnList;
	}
}