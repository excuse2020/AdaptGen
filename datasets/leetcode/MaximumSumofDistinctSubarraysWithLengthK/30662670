class Solution {
	long maximumSubarraySum(int[] nums, int k) {
		Map<Integer, Integer> count = new HashMap<>();
		long ans = 0;
		long sum = 0;
		for (int i = 0; i < k; i++) {
			int num = nums[i];
			sum += num;
			count.put(num,count.getOrDefault(num,0) + 1);
		}
		for (int i = k; i < nums.length; i++) {
			if (count.size() == k) {
				ans = Math.max(ans,sum);
			}
			int before = nums[i - k];
			int current = nums[i];
			sum -= nums[i - k];
			sum += nums[i];
			if (count.get(before) == 1) {
				count.remove(before);
			} 
			else {
				count.put(before,count.get(before) - 1);
			}
			count.put(current,count.getOrDefault(current,0) + 1);
		}
		if (count.size() == k) {
			ans = Math.max(ans,sum);
		}
		return ans;
	}
}