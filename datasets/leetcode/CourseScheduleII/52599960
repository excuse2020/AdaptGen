class Solution {
	int[] findOrder(int numCourses, int[][] prerequisites) {
		int[] indegree = new int[numCourses];
		List<Integer>[] adjList = new ArrayList[numCourses];
		for (int i = 0; i < numCourses; i += 1) {
			adjList[i] = new ArrayList<>();
		}
		for (int[] pre: prerequisites) {	
			indegree[pre[0]] += 1;
			adjList[pre[1]].add(pre[0]);
		}
		Queue<Integer> queue = new LinkedList<>();
		for (int i = 0; i < indegree.length; i += 1) {
			if (indegree[i] == 0) {
				queue.add(i);
			}
		}
		List<Integer> res = new ArrayList<>();
		while (!queue.isEmpty()) {
			int curr = queue.poll();
			res.add(curr);
			for (int neighbor: adjList[curr]) {	
				indegree[neighbor] -= 1;
				if (indegree[neighbor] == 0) {
					queue.add(neighbor);
				}
			}
		}
		for (int val: indegree) {	
			if (val > 0) {
				return new int[0];
			}
		}
		int[] finalRes = new int[res.size()];
		for (int i = 0; i < res.size(); i += 1) {
			finalRes[i] = res.get(i);
		}
		return finalRes;
	}
}