class Solution {
	int maxStarSum(int[] vals, int[][] edges, int k) {
		int n = vals.length;
		List<List<Integer>> adj = new ArrayList<>();
		for (int i = 0; i < n; i++) {
			adj.add(new ArrayList<>());
		}
		for (int i = 0; i < edges.length; i++) {
			int u = edges[i][0];
			int v = edges[i][1];
			adj.get(u).add(v);
			adj.get(v).add(u);
		}
		int maxSum = Integer.MIN_VALUE;
		for (int i = 0; i < n; i++) {
			PriorityQueue<Integer> pq = new PriorityQueue<>(Collections.reverseOrder());
			for (int adjNode: adj.get(i)) {	
				pq.add(vals[adjNode]);
			}
			int currSum = vals[i];
			int e = k;
			while (!pq.isEmpty() && e > 0) {
				e--;
				int val = pq.poll();
				if (val < 0) {
					break;
				} 
				else {
					currSum += val;
				}
			}
			maxSum = Math.max(maxSum,currSum);
		}
		return maxSum;
	}
}