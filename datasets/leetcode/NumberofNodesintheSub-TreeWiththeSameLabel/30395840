class Solution {
	int[] countSubTrees(int n, int[][] edges, String labels) {
		int[] parent = new int[n];
		Arrays.fill(parent,-1);
		parent[0] = 0;
		int[] childCount = new int[n];
		for (int[] e: edges) {	
			if (parent[e[0]] == -1) {
				parent[e[0]] = e[1];
				childCount[e[1]]++;
			} 
			else {
				parent[e[1]] = e[0];
				childCount[e[0]]++;
			}
		}
		Queue<int[]> queue = new LinkedList<>();
		for (int node = 0; node < n; node++) {
			if (childCount[node] == 0) {
				int[] arr = new int[27];
				arr[26] = node;
				queue.offer(arr);
			}
		}
		int[] ans = new int[n];
		Map<Integer, int[]> map = new HashMap<>();
		int[] arr = queue.poll();
		int node = arr[26];
	}
}