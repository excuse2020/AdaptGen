class Solution {
	int maxMoves(int[][] A) {
		int n = A.length, m = A[0].length;
		int[][] M = new int[n][m];
		int max = 0;
		for (int i = 1; i < m; i++) {
			for (int j = 0; j < n; j++) {
				if (j - 1 >= 0 && A[j - 1][i - 1] < A[j][i]) {
					M[j][i] = Math.max(M[j][i],M[j - 1][i - 1] + 1);
				}
				if (A[j][i - 1] < A[j][i]) {
					M[j][i] = Math.max(M[j][i],M[j][i - 1] + 1);
				}
				if (j + 1 < n && A[j + 1][i - 1] < A[j][i]) {
					M[j][i] = Math.max(M[j][i],M[j + 1][i - 1] + 1);
				}
				if (M[j][i] == i) {
					max = Math.max(max,M[j][i]);
				}
			}
		}
		return max;
	}
}
class Solution {
	int max = 0;
	void dfs(int[][] A, int r, int c, boolean[][] seen) {
		if (seen[r][c]) {
			return;
		}
		if (c == A[0].length - 1) {
			max = A[0].length - 1;
			return;
		}
		seen[r][c] = true;
		max = Math.max(max,c);
		if (r > 0 && A[r][c] < A[r - 1][c + 1]) {
			dfs(A,r - 1,c + 1,seen);
		}
		if (A[r][c] < A[r][c + 1]) {
			dfs(A,r,c + 1,seen);
		}
		if (r < A.length - 1 && A[r][c] < A[r + 1][c + 1]) {
			dfs(A,r + 1,c + 1,seen);
		}
	}
	int maxMoves(int[][] A) {
		int m = A.length, n = A[0].length;
		boolean[][] seen = new boolean[m][n];
		for (int i = 0; i < m; i++) {
			dfs(A,i,0,seen);
		}
		return max;
	}
}
class Solution {
	int maxMoves(int[][] A) {
		int max = 0, m = A.length, n = A[0].length;
		Queue<int[]> q = new LinkedList<>();
		for (int i = 0; i < m; i++) {
			q.offer(new int{i, 0});
		}
		boolean[][] seen = new boolean[m][n];
		while (q.size() > 0) {
			int[] p = q.poll();
			int r = p[0], c = p[1];
			if (seen[r][c]) {
				continue;
			}
			seen[r][c] = true;
			if (c == n - 1) {
				return n - 1;
			}
			max = Math.max(max,c);
			if (r > 0 && A[r][c] < A[r - 1][c + 1]) {
				q.offer(new int{r - 1, c + 1});
			}
			if (A[r][c] < A[r][c + 1]) {
				q.offer(new int{r, c + 1});
			}
			if (r < A.length - 1 && A[r][c] < A[r + 1][c + 1]) {
				q.offer(new int{r + 1, c + 1});
			}
		}
		return max;
	}
}