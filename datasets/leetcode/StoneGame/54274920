class Solution {
	int solve(int[] piles, int i, int j, boolean flag, int[][] dp) {
		if (i > j) {
			return 0;
		}
		if (dp[i][j] != -1) {
			return dp[i][j];
		}
		int pick = Integer.MIN_VALUE;
		if (flag == true) {
			pick = Math.max(piles[i] + solve(piles,i + 1,j,false,dp),piles[j] + solve(piles,i,j - 1,false,dp));
		} 
		else if (flag == false) {
			pick = Math.min(solve(piles,i + 1,j,true,dp) - piles[i],solve(piles,i,j - 1,true,dp) - piles[j]);
		}
		return dp[i][j] = pick;
	}
	boolean stoneGame(int[] piles) {
		int[][] dp = new int[piles.length][piles.length];
		for (int i = 0; i < dp.length; i++) {
			Arrays.fill(dp[i],-1);
		}
		return solve(piles,0,piles.length - 1,true,dp) < 0 ? false : true;
	}
}