class Solution {
	int mostBooked(int n, int[][] meetings) {
		Arrays.sort(meetings,(a, b) -> {a[0] - b[0]});
		PriorityQueue<int[]> pq = new PriorityQueue<int[]>((a, b) -> {a[0] - b[0] == 0 ? a[1] - b[1] : a[0] - b[0]});
		for (int i = 0; i < n; i++) {
			int[] room = new int[3];
			room[0] = 0;
			room[1] = i;
			pq.add(room);
		}
		for (int i = 0; i < meetings.length; i++) {
			while (pq.peek()[0] < meetings[i][0]) {
				int[] temp = pq.poll();
				temp[0] = meetings[i][0];
				pq.add(temp);
			}
			int[] cur = pq.poll();
			cur[0] += meetings[i][1] - meetings[i][0];
			cur[2]++;
			pq.add(cur);
		}
		int max = 0;
		int res = 0;
		for (int[] m: pq) {	
			if (m[2] > max) {
				max = m[2];
				res = m[1];
			} 
			else if (m[2] == max) {
				res = Math.min(m[1],res);
			}
		}
		return res;
	}
}