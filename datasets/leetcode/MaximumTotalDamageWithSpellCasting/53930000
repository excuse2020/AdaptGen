class Solution {
	long maximumTotalDamage(int[] power) {
		Set<Integer> set = new TreeSet<>();
		HashMap<Integer, Integer> map = new HashMap<>();
		for (int val: power) {	
			set.add(val);
			map.put(val,map.getOrDefault(val,0) + 1);
		}
		int n = power.length;
		long a = 0;
		long b = 0;
		long c = 0;
		int prev = -1;
		for (int num: set) {	
			if (a == 0 && b == 0 && c == 0) {
				c = (long) map.get(num) * (long) num;
				prev = num;
			} 
			else if (num - prev == 1) {
				long val = Math.max((long) num * (long) map.get(num) + a,Math.max(b,c));
				a = b;
				b = c;
				c = val;
				prev = num;
			} 
			else if (num - prev == 2) {
				long val = Math.max((long) num * (long) map.get(num) + b,Math.max(a,c));
				b = Math.max(a,Math.max(b,c));
				a = c;
				c = val;
				prev = num;
			} 
			else if (num - prev == 3) {
				long val = Math.max(num * map.get(num) + c,Math.max(a,(Math.max(b,c))));
				long val2 = Math.max(a,Math.max(b,c));
				a = val2;
				b = val2;
				c = val;
				prev = num;
			} 
			else {
				long val = Math.max(a,Math.max(b,c));
				a = val;
				b = val;
				c = val + num * map.get(num);
				prev = num;
			}
		}
		return Math.max(a,Math.max(b,c));
	}
}