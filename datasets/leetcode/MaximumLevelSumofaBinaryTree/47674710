class Solution {
	int maxLevelSum(TreeNode root) {
		if (root == null) {
			return -1;
		}
		List<Integer> levelSums = new ArrayList<>();
		Queue<TreeNode> q = new LinkedList<>();
		q.offer(root);
		while (!q.isEmpty()) {
			int levelSize = q.size();
			int levelSum = 0;
			for (int i = 0; i < levelSize; i++) {
				TreeNode currNode = q.poll();
				levelSum += currNode.val;
				if (currNode.left != null) {
					q.add(currNode.left);
				}
				if (currNode.right != null) {
					q.add(currNode.right);
				}
			}
			levelSums.add(levelSum);
		}
		int maxLevelSum = Integer.MIN_VALUE;
		int maxLevel = -1;
		for (int i = 0; i < levelSums.size(); i++) {
			if (levelSums.get(i) > maxLevelSum) {
				maxLevelSum = levelSums.get(i);
				maxLevel = i + 1;
			}
		}
		return maxLevel;
	}
}