class Solution {
	ArrayList<ArrayList<Integer>> ans = new ArrayList<>();
	ArrayList<ArrayList<Integer>> permute(int[] num) {
		Arrays.sort(num);
		ArrayList<Integer> remain = new ArrayList<>();
		for (int n: num) {	
			remain.add(n);
		}
		permuteRec(remain,new ArrayList<>());
		return ans;
	}
	void permuteRec(ArrayList<Integer> remain, ArrayList<Integer> perm) {
		if (remain.isEmpty()) {
			ans.add(new ArrayList<>(perm));
			return;
		}
		for (int i = 0; i < remain.size(); i++) {
			Integer a = remain.remove(i);
			perm.add(a);
			permuteRec(remain,perm);
			remain.add(i,a);
			perm.remove(perm.size() - 1);
		}
	}
}