class Solution {
	int cal(int i, int j, int a, int dp) {
		if (i > j) {
			return 0;
		}
		if (dp[i][j] != -1) {
			return dp[i][j];
		}
		int mini = Integer.MAX_VALUE, cost;
		for (int ind = i; ind <= j; ind++) {
			cost = a[j + 1] - a[i - 1] + cal(i,ind - 1,a,dp) + cal(ind + 1,j,a,dp);
			mini = Math.min(cost,mini);
		}
		return dp[i][j] = mini;
	}
	int minCost(int n, int[] cuts) {
		int len = cuts.length;
		int a = new int[len + 2];
		for (int i = 0; i < len; i++) {
			a[i + 1] = cuts[i];
		}
		a[0] = 0;
		a[len + 1] = n;
		Arrays.sort(a);
		int len2 = a.length;
		int dp = new int[len2][len2];
		for (int[] row: dp) {	
			Arrays.fill(row,-1);
		}
		return cal(1,len,a,dp);
	}
}