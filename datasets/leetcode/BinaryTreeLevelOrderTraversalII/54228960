class Solution {
	int getHeight(TreeNode root) {
		if (root == null) {
			return 0;
		}
		int l = getHeight(root.left);
		int r = getHeight(root.right);
		return Math.max(l,r) + 1;
	}
	List<List<Integer>> levelOrderBottom(TreeNode root) {
		int height = getHeight(root);
		List<List<Integer>> ans = new ArrayList<>();
		if (root == null) {
			return ans;
		}
		Queue<TreeNode> q = new LinkedList<>();
		q.offer(root);
		int j = 0;
		while (!q.isEmpty()) {
			j++;
			int size = q.size();
			List<Integer> level = new ArrayList<>();
			for (int i = 0; i < size; i++) {
				TreeNode front = q.poll();
				level.add(front.val);
				if (front.left != null) {
					q.add(front.left);
				}
				if (front.right != null) {
					q.add(front.right);
				}
			}
			ans.add(0,level);
		}
		return ans;
	}
}