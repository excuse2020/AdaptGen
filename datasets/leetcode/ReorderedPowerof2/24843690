class Solution {
	boolean isPossible(long val, int[] count) {
		int[] count2 = new int[10];
		while (val != 0) {
			count2[(int)(val % 10)]++;
			val /= 10;
		}
		for (int i = 0; i <= 9; i++) {
			if (count[i] != count2[i]) {
				return false;
			}
		}
		return true;
	}
	boolean reorderedPowerOf2(int n) {
		double ans = Math.log(n) / Math.log(2);
		if (Math.ceil(ans) == Math.floor(ans)) {
			return true;
		}
		int temp = n;
		int[] count = new int[10];
		temp = n;
		while (temp != 0) {
			count[temp % 10]++;
			temp /= 10;
		}
		long value = 2;
		long lastValue = 1000000000;
		while (value <= lastValue) {
			if (isPossible(value,count)) {
				return true;
			}
			value *= 2;
		}
		return false;
	}
}