class Solution {
	int maxProfit(int[] prices) {
		int[][][] dp = new int[3][3][prices.length + 1];
		for (int i = 0; i < 3; i++) {
			for (int j = 0; j < 3; j++) {
				for (int k = 0; k < prices.length + 1; k++) {
					dp[i][j][k] = -1000000;
				}
			}
		}
		int a = prof(prices,2,2,0,dp);
		return a;
	}
	int prof(int[] arr, int buy, int sell, int index, int[][][] dp) {
		if (index == arr.length) {
			return 0;
		}
		if (buy == 0 && sell == 0) {
			return 0;
		}
		if (dp[buy][sell][index] != -1000000) {
			return dp[buy][sell][index];
		}
		int buyM = Integer.MIN_VALUE;
		int sellM = Integer.MIN_VALUE;
		if (buy == sell) {
			buyM = Math.max(-arr[index] + prof(arr,buy - 1,sell,index + 1,dp),prof(arr,buy,sell,index + 1,dp));
		}
		if ((sell - buy == 1)) {
			sellM = Math.max(arr[index] + prof(arr,buy,sell - 1,index + 1,dp),prof(arr,buy,sell,index + 1,dp));
		}
		return dp[buy][sell][index] = Math.max(sellM,buyM);
	}
}