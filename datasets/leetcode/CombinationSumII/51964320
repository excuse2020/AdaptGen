class Solution {
	void backtracking(int[] candidates, int target, List<List<Integer>> ans, List<Integer> list, int index) {
		if (target == 0) {
			ans.add(new ArrayList<>(list));
			return;
		}
		for (int i = index; i < candidates.length; i++) {
			if (i > index && candidates[i] == candidates[i - 1]) {
				continue;
			}
			if (target < candidates[i]) {
				break;
			}
			list.add(candidates[i]);
			backtracking(candidates,target - candidates[i],ans,list,i + 1);
			list.remove(list.size() - 1);
		}
	}
	List<List<Integer>> combinationSum2(int[] candidates, int target) {
		List<List<Integer>> ans = new ArrayList<>();
		Arrays.sort(candidates);
		backtracking(candidates,target,ans,new ArrayList<Integer>(),0);
		return ans;
	}
}