class Solution {
	int dis(int[] a, int[] b) {
		return Math.abs(a[0] - b[0]) + Math.abs(a[1] - b[1]);
	}
	int minimumCost(int[] start, int[] target, int[][] specialRoads) {
		LinkedList<int[]> points = new LinkedList<>();
		points.add(new int{start[0], start[1], 0});
		int ans = Integer.MAX_VALUE;
		int[] vis = new int[specialRoads.length];
		Arrays.fill(vis,Integer.MAX_VALUE);
		while (!points.isEmpty()) {
			int[] p = points.pollLast();
			if (p[2] + dis(p,target) < ans) {
				ans = p[2] + dis(p,target);
			}
			for (int i = 0; i != specialRoads.length; ++i) {
				if (p[2] + dis(p,specialRoads[i]) < vis[i]) {
					vis[i] = p[2] + dis(p,specialRoads[i]);
					points.add(new int{specialRoads[i][2], specialRoads[i][3], vis[i] + specialRoads[i][4]});
				}
			}
		}
		return ans;
	}
}