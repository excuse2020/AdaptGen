class Solution {
	int count;
	int InversePairs(int[] a) {
		if (a == null || a.length == 0) {
			return 0;
		}
		int[] tmp = new int[a.length];
		mergeSort(a,0,a.length - 1,tmp);
		return count;
	}
	void merge(int[] a, int l, int m, int r, int[] temp) {
		int k = 0, i = l, j = m + 1;
		while (i <= m && j <= r) {
			if (a[i] <= a[j]) {
				temp[k++] = a[i++];
			} 
			else {
				temp[k++] = a[j++];
				count += m - i + 1;
				count = count % 1000000007;
			}
		}
		while (i <= m) {
			temp[k++] = a[i++];
		}
		while (j <= r) {
			temp[k++] = a[j++];
		}
		for (i = 0; i < k; ++i) {
			a[l + i] = temp[i];
		}
	}
	void mergeSort(int[] a, int l, int r, int[] tmp) {
		if (l < r) {
			int m = (l + r) / 2;
			mergeSort(a,l,m,tmp);
			mergeSort(a,m + 1,r,tmp);
			merge(a,l,m,r,tmp);
		}
	}
}