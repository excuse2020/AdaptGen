class Solution {
	int binarySearch(int[] dp, int left, int right, int target) {
		while (left <= right) {
			int mid = left + (right - left) / 2;
			if (dp[mid] <= target) {
				left = mid + 1;
			} 
			else {
				right = mid - 1;
			}
		}
		return left;
	}
	int[] longestObstacleCourseAtEachPosition(int[] o) {
		return method2(o);
	}
	int[] method1(int o) {
		int len = o.length;
		int ans = new int[len];
		int dp = new int[len][len];
		for (int i: dp) {	
			Arrays.fill(i,-1);
		}
		for (int i = 0; i < len; i++) {
			ans[i] = solve(i,o,i,dp);
		}
		return ans;
	}
	int[] method2(int arr) {
		int len = arr.length;
		int ans = new int[len];
		int dp = new int[len];
		int count = 0;
		for (int i = 0; i < len; i++) {
			int idx = binarySearch(dp,0,count - 1,arr[i]);
			if (idx < 0) {
				idx = -(idx + 1);
			}
			dp[idx] = arr[i];
			if (idx == count) {
				count++;
			}
			ans[i] = idx + 1;
		}
		return ans;
	}
	int solve(int i, int arr, int maxindex, int dp) {
		if (i < 0) {
			return 0;
		}
		if (dp[i][maxindex] != -1) {
			return dp[i][maxindex];
		}
		int a = solve(i - 1,arr,maxindex,dp);
		if (arr[i] <= arr[maxindex]) {
			a = Math.max(a,1 + solve(i - 1,arr,i,dp));
		}
		return dp[i][maxindex] = a;
	}
}