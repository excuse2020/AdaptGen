class Solution {
	long countPairs(int n, int[][] edges) {
		int[] vis = new int[n];
		Map<Integer, List<Integer>> gph = new HashMap<>();
		for (int i = 0; i < n; i++) {
			gph.put(i,new ArrayList<Integer>());
		}
		for (int i = 0; i < edges.length; i++) {
			gph.get(edges[i][0]).add(edges[i][1]);
			gph.get(edges[i][1]).add(edges[i][0]);
		}
		long ans = 0;
		for (int i = 0; i < n; i++) {
			if (vis[i] == 0) {
				long cnt = dfs(gph,vis,i);
				ans += cnt * (n - cnt);
			}
		}
		return ans / 2;
	}
	long dfs(Map<Integer, List<Integer>> gph, int[] vis, int curr) {
		if (vis[curr] == 1) {
			return 0;
		}
		vis[curr] = 1;
		List<Integer> li = gph.get(curr);
		long ans = 1;
		for (int x: li) {	
			ans += dfs(gph,vis,x);
		}
		return ans;
	}
}