class Solution {
	ListNode addInList(ListNode head1, ListNode head2) {
		ListNode dummyHead = new ListNode(-1);
		ListNode cur = dummyHead;
		int carry = 0;
		Stack<Integer> stack1 = new Stack();
		Stack<Integer> stack2 = new Stack();
		while (head1 != null) {
			stack1.push(head1.val);
			head1 = head1.next;
		}
		while (head2 != null) {
			stack2.push(head2.val);
			head2 = head2.next;
		}
		while (!stack1.isEmpty() || !stack2.isEmpty()) {
			int x = stack1.isEmpty() ? 0 : stack1.pop();
			int y = stack2.isEmpty() ? 0 : stack2.pop();
			int sum = x + y;
			carry = sum / 10;
			sum = sum % 10;
			cur.next = new ListNode(sum);
			cur = cur.next;
		}
		return reverse(dummyHead.next);
	}
	ListNode reverse(ListNode head) {
		ListNode pre, cur, next;
		pre = null;
		cur = next = head;
		while (cur != null) {
			next = cur.next;
			cur.next = pre;
			pre = cur;
			cur = next;
		}
		return pre;
	}
}