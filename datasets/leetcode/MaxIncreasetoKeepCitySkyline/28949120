class Solution {
	int[] maxCols(int[][] mat) {
		int[] ans = new int[mat.length];
		for (int i = 0; i < mat.length; i++) {
			int max = -100;
			for (int j = 0; j < mat.length; j++) {
				max = Math.max(max,mat[j][i]);
			}
			ans[i] = max;
		}
		return ans;
	}
	int maxIncreaseKeepingSkyline(int[][] mat) {
		int ans = 0;
		int[] r = maxRows(mat);
		int[] c = maxCols(mat);
		for (int i = 0; i < mat.length; i++) {
			for (int j = 0; j < mat.length; j++) {
				if (r[i] > c[j] && c[j] > mat[i][j]) {
					ans += c[j] - mat[i][j];
				} 
				else if (r[i] < c[j] && r[i] > mat[i][j]) {
					ans += r[i] - mat[i][j];
				} 
				else if (r[i] == c[j]) {
					ans += r[i] - mat[i][j];
				}
			}
		}
		return ans;
	}
	int[] maxRows(int[][] mat) {
		int[] ans = new int[mat.length];
		for (int i = 0; i < mat.length; i++) {
			int max = -100;
			for (int j = 0; j < mat.length; j++) {
				max = Math.max(max,mat[i][j]);
			}
			ans[i] = max;
		}
		return ans;
	}
}