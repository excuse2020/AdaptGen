class Solution {
	int ans;
	boolean isVisited;
	ArrayList<Stack<Integer>> list;
	int pointer = 0;
	boolean dfs(int n) {
		Stack<Integer> stack = list.get(n);
		if (isVisited[n]) {
			return stack.isEmpty() ? true : false;
		}
		isVisited[n] = true;
		while (!stack.isEmpty()) {
			boolean ans = dfs(stack.peek());
			stack.pop();
			if (!ans) {
				return false;
			}
		}
		ans[pointer++] = n;
		return true;
	}
	int[] findOrder(int numCourses, int[][] prerequisites) {
		this.list = new ArrayList<>();
		this.isVisited = new boolean[numCourses];
		this.ans = new int[numCourses];
		for (int i = 0; i < numCourses; i++) {
			list.add(new Stack());
		}
		for (int i = 0; i < prerequisites.length; i++) {
			int a = prerequisites[i][0];
			int b = prerequisites[i][1];
			list.get(a).push(b);
		}
		for (int i = 0; i < numCourses; i++) {
			if (!dfs(i)) {
				return new int[0];
			}
		}
		return ans;
	}
}