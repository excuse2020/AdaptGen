class Solution {
	List<List<Integer>> criticalConnections(int n, List<List<Integer>> connections) {
		ArrayList<ArrayList<Integer>> graph = new ArrayList<>();
		for (int i = 0; i < n; i++) {
			graph.add(new ArrayList<Integer>());
		}
		for (List<Integer> edge: connections) {	
			int u = edge.get(0), v = edge.get(1);
			graph.get(u).add(v);
			graph.get(v).add(u);
		}
		List<List<Integer>> critical_connections = new ArrayList<>();
		boolean[] vis = new boolean[n];
		int[] tin = new int[n];
		int[] low = new int[n];
		int parent = -1;
		int timer = 0;
		for (int i = 0; i < n; i++) {
			if (!vis[i]) {
				dfs(i,graph,timer,parent,vis,tin,low,critical_connections);
			}
		}
		return critical_connections;
	}
	void dfs(int node, ArrayList<ArrayList<Integer>> graph, int timer, int parent, boolean[] vis, int[] tin, int[] low, List<List<Integer>> critical_connections) {
		vis[node] = true;
		tin[node] = low[node] = ++timer;
		Iterator<Integer> itr = graph.get(node).listIterator();
		while (itr.hasNext()) {
			int neigh = itr.next();
			if (neigh == parent) {
				continue;
			}
			if (!vis[neigh]) {
				dfs(neigh,graph,timer,node,vis,tin,low,critical_connections);
				low[node] = Math.min(low[node],low[neigh]);
				if (low[neigh] > tin[node]) {
					ArrayList<Integer> connection = new ArrayList<>();
					connection.add(node);
					connection.add(neigh);
					critical_connections.add(connection);
				}
			} 
			else {
				low[node] = Math.min(low[node],tin[neigh]);
			}
		}
	}
}