class Solution {
	int base = 33, mod = (int) 1e9 + 7;
	long[] pow, hash;
	int start, end;
	boolean check(String s, int len) {
		Set<Long> set = new HashSet<>();
		for (int i = 1; i + len - 1 <= s.length(); i++) {
			if (!set.add(get(i,i + len - 1))) {
				start = i - 1;
				end = i + len - 1;
				return true;
			}
		}
		return false;
	}
	long get(int l, int r) {
		return hash[r] - hash[l - 1] * pow[r - l + 1];
	}
	String longestDupSubstring(String s) {
		int N = s.length();
		start = end = -1;
		pow = new long[N + 2];
		hash = new long[N + 2];
		pow[0] = 1;
		int i = 1;
		pow[i] = pow[i - 1] * base;
	}
}