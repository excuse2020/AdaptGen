class Solution {
	int low = 0, high = Integer.MAX_VALUE;
	int closestCost(int[] baseCosts, int[] toppingCosts, int target) {
		for (int i = 0; i < baseCosts.length; i++) {
			dfs(baseCosts[i],0,toppingCosts,target);
		}
		return low == 0 || high - target < target - low ? high : low;
	}
	void dfs(int cost, int idx, int[] toppings, int target) {
		if (cost > high) {
			return;
		}
		if (cost <= target) {
			low = Math.max(low,cost);
		} 
		else {
			high = Math.min(high,cost);
		}
		if (idx >= toppings.length) {
			return;
		}
		for (int i = 0; i <= 2; i++) {
			dfs(cost + i * toppings[idx],idx + 1,toppings,target);
		}
	}
}