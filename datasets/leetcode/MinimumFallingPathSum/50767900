class Solution {
	int minFallingPathSum(int[][] matrix) {
		int n = matrix.length;
		for (int row = 1; row < n; row++) {
			for (int col = 0; col < n; col++) {
				int diagonallyLeft = Integer.MAX_VALUE;
				if (col - 1 >= 0 && row - 1 < matrix.length) {
					diagonallyLeft = matrix[row - 1][col - 1];
				}
				int diagonallyRight = Integer.MAX_VALUE;
				if (col + 1 < matrix.length) {
					diagonallyRight = matrix[row - 1][col + 1];
				}
				int down = Integer.MAX_VALUE;
				if (row - 1 < matrix.length) {
					down = matrix[row - 1][col];
				}
				matrix[row][col] += Math.min(Math.min(diagonallyLeft,down),diagonallyRight);
			}
		}
		int min = Integer.MAX_VALUE;
		for (int i = 0; i < n; i++) {
			min = Math.min(matrix[n - 1][i],min);
		}
		return min;
	}
}