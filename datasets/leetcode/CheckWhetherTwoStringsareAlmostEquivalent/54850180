class Solution {
	boolean checkAlmostEquivalent(String word1, String word2) {
		Map<Character, Integer> word1_map = new HashMap<>();
		Map<Character, Integer> word2_map = new HashMap<>();
		for (int i = 0; i < word1.length(); i++) {
			word1_map.put(word1.charAt(i),word1_map.getOrDefault(word1.charAt(i),0) + 1);
		}
		for (int i = 0; i < word2.length(); i++) {
			word2_map.put(word2.charAt(i),word2_map.getOrDefault(word2.charAt(i),0) + 1);
		}
		int n = word1.length();
		for (int i = 0; i < n; i++) {
			if (word1_map.containsKey(word1.charAt(i)) && !(word2_map.containsKey(word1.charAt(i)))) {
				return false;
			} 
			else if (word1_map.containsKey(word1.charAt(i)) && word2_map.containsKey(word1.charAt(i))) {
				if (Math.abs(word1_map.get(word1.charAt(i)) - word2_map.get(word1.charAt(i))) > 3) {
					return false;
				}
			}
		}
		for (int i = 0; i < n; i++) {
			if (word2_map.containsKey(word2.charAt(i)) && !(word1_map.containsKey(word2.charAt(i)))) {
				return false;
			} 
			else if (word2_map.containsKey(word2.charAt(i)) && word1_map.containsKey(word2.charAt(i))) {
				if (Math.abs(word2_map.get(word2.charAt(i)) - word1_map.get(word2.charAt(i))) > 3) {
					return false;
				}
			}
		}
		return true;
	}
}