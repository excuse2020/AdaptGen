class Solution {
	long subArrayRanges(int[] nums) {
		int n = nums.length;
		long[] leftMax = new long[n];
		long[] rightMax = new long[n];
		long[] leftMin = new long[n];
		long[] rightMin = new long[n];
		Stack<int[]> st = new Stack<>();
		for (int i = 0; i < n; i++) {
			int count = 1;
			while (!st.isEmpty() && st.peek()[0] <= nums[i]) {
				count += st.pop()[1];
			}
			st.push(new int{nums[i], count});
			leftMax[i] = count;
		}
		st = new Stack<>();
		for (int i = n - 1; i >= 0; i--) {
			int count = 1;
			while (!st.isEmpty() && st.peek()[0] < nums[i]) {
				count += st.pop()[1];
			}
			st.push(new int{nums[i], count});
			rightMax[i] = count;
		}
		long maxSum = 0;
		for (int i = 0; i < n; i++) {
			maxSum += leftMax[i] * rightMax[i];
		}
		st = new Stack<>();
		for (int i = 0; i < n; i++) {
			int count = 1;
			while (!st.isEmpty() && st.peek()[0] >= nums[i]) {
				count += st.pop()[1];
			}
			st.push(new int{nums[i], count});
			leftMin[i] = count;
		}
		st = new Stack<>();
		for (int i = n - 1; i >= 0; i--) {
			int count = 1;
			while (!st.isEmpty() && st.peek()[0] > nums[i]) {
				count += st.pop()[1];
			}
			st.push(new int{nums[i], count});
			rightMin[i] = count;
		}
		long minSum = 0;
		for (int i = 0; i < n; i++) {
			minSum += leftMin[i] * rightMin[i];
		}
		return maxSum - minSum;
	}
}