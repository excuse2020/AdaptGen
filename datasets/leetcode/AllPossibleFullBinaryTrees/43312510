class Solution {
	ArrayList<TreeNode> result = new ArrayList<>();
	List<TreeNode> allPossibleFBT(int n) {
		return solve(n);
	}
	List<TreeNode> solve(int n) {
		if (n % 2 == 0) {
			return new ArrayList<>();
		}
		if (n == 1) {
			TreeNode root = new TreeNode(0);
			return new ArrayList<>(List.of(root));
		}
		List<TreeNode> currentResult = new ArrayList<>(result);
		for (int i = 1; i < n; i = i + 2) {
			List<TreeNode> leftFBT = solve(i);
			List<TreeNode> rightFBT = solve(n - i);
			for (TreeNode left: leftFBT) {	
				for (TreeNode right: rightFBT) {	
					TreeNode root = new TreeNode(0);
					root.left = left;
					root.right = right;
					currentResult.add(root);
				}
			}
		}
		return currentResult;
	}
}