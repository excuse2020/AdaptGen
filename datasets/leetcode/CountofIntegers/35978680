class Solution {
	long[][] dp;
	int mod = 1000000007;
	int count(String num1, String num2, int min_sum, int max_sum) {
		double one = Double.parseDouble(num1);
		double two = Double.parseDouble(num2);
		if (dp == null) {
			dp = new long[23][401];
			dp[0][0] = 1;
			for (int i = 1; i < 23; i++) {
				for (int j = 0; j < 10; j++) {
					for (int k = 400; k >= 0 && k - j >= 0; k--) {
						dp[i][k] += dp[i - 1][k - j];
						dp[i][k] %= mod;
					}
				}
			}
			for (int i = 1; i < 23; i++) {
				for (int j = 1; j < 401; j++) {
					dp[i][j] += dp[i][j - 1];
					dp[i][j] %= mod;
				}
			}
		}
		return (int) travel(one,two,max_sum,min_sum,false);
	}
	int digit(double temp) {
		int sum = 0;
		while (temp > 0) {
			sum += temp % 10;
			temp = Math.floor(temp / 10);
		}
		return sum;
	}
	int last(double temp) {
		int ret = 0;
		while (temp > 0) {
			ret = (int) (temp % 10);
			temp = Math.floor(temp / 10);
		}
		return ret;
	}
	long travel(double one, double two, int max, int min, boolean clean) {
		if (clean) {
			int digit = ((int) Math.log10(two)) + 1;
			int ret = (int) (dp[digit][max]);
			if (min > 0) {
				ret -= dp[digit][min - 1];
			}
			return (ret < 0) ? ret + mod : ret;
		} 
		else {
			long ret = 0;
			if (two - one < 10d) {
				int sum = digit(one);
				for (double i = one; i <= two; i++) {
					if (sum >= min && sum <= max) {
						ret++;
					}
					if (one % 10 == 9) {
						sum = digit(one + 1);
					} 
					else {
						sum++;
					}
				}
			} 
			else {
				int dig = (int) Math.log10(two);
				dig = ((int) Math.pow(10,dig)) - 1;
				int last = last(two);
				for (int i = 0; i < last; i++) {
					if (max - i >= 0) {
						ret += travel(0,dig,max - i,Math.max(0,min - i),true);
						ret %= mod;
					}
				}
				dig++;
				dig *= last;
				if (max - last >= 0) {
					ret += travel(0,two - dig,max - last,Math.max(0,min - last),false);
				}
				ret %= mod;
				if (one != 0) {
					ret -= travel(0,one - 1,max,min,false);
					if (ret < 0) {
						ret += mod;
					}
				}
			}
			return ret;
		}
	}
}