class Solution {
	Integer[][] dp;
	int minFallingPathSum(int[][] matrix) {
		int n = matrix.length;
		dp = new Integer[n][n];
		int ans = Integer.MAX_VALUE;
		for (int i = 0; i < n; i++) {
			int temp = solve(matrix,0,i,n);
			ans = Math.min(ans,temp);
		}
		return ans;
	}
	int solve(int[][] arr, int i, int j, int n) {
		if (i == n) {
			return 0;
		}
		if (j < 0 || j >= n) {
			return 100000;
		}
		if (dp[i][j] != null) {
			return dp[i][j];
		}
		int left = arr[i][j] + solve(arr,i + 1,j - 1,n);
		int mid = arr[i][j] + solve(arr,i + 1,j,n);
		int right = arr[i][j] + solve(arr,i + 1,j + 1,n);
		dp[i][j] = Math.min(left,Math.min(mid,right));
		return dp[i][j];
	}
}