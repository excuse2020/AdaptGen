class Solution {
	int minimumTotal(List<List<Integer>> triangle) {
		int n = triangle.size();
		int[][] dp = new int[n][n];
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < n; j++) {
				dp[i][j] = -1;
			}
		}
		return minpathsum(triangle,0,0,dp);
	}
	int minpathsum(List<List<Integer>> triangle, int i, int j, int[][] dp) {
		if (dp[i][j] != -1) {
			return dp[i][j];
		}
		if (i == triangle.size() - 1) {
			return triangle.get(i).get(j);
		}
		int down = minpathsum(triangle,i + 1,j,dp);
		int diagonal = minpathsum(triangle,i + 1,j + 1,dp);
		dp[i][j] = triangle.get(i).get(j) + Math.min(down,diagonal);
		return dp[i][j];
	}
}