class Solution {
	ArrayList<Integer> in = new ArrayList<Integer>();
	ArrayList<Integer> last = new ArrayList<Integer>();
	ArrayList<Integer> pre = new ArrayList<Integer>();
	void inorder(TreeNode root) {
		if (root == null) {
			return;
		}
		TreeNode node = root;
		LinkedList<TreeNode> s = new LinkedList<>();
		while (!s.isEmpty() || node != null) {
			if (node != null) {
				s.push(node);
				node = node.left;
			} 
			else {
				node = s.pop();
				in.add(node.val);
				node = node.right;
			}
		}
	}
	void lastorder(TreeNode root) {
		if (root == null) {
			return;
		}
		TreeNode node = root;
		LinkedList<TreeNode> s = new LinkedList<>();
		while (!s.isEmpty() || node != null) {
			if (node != null) {
				s.push(node);
				last.add(node.val);
				node = node.right;
			} 
			else {
				node = s.pop();
				node = node.left;
			}
		}
		Collections.reverse(last);
	}
	int[] listtoArray(ArrayList<Integer> list) {
		int[] arr = new int[list.size()];
		for (int i = 0; i < list.size(); i++) {
			arr[i] = list.get(i);
		}
		return arr;
	}
	void preorder(TreeNode root) {
		if (root == null) {
			return;
		}
		TreeNode node = root;
		LinkedList<TreeNode> s = new LinkedList<>();
		while (!s.isEmpty() || node != null) {
			if (node != null) {
				s.push(node);
				pre.add(node.val);
				node = node.left;
			} 
			else {
				node = s.pop();
				node = node.right;
			}
		}
	}
	int[][] threeOrders(TreeNode root) {
		preorder(root);
		inorder(root);
		lastorder(root);
		int[][] res = new int[3];
		res[0] = listtoArray(pre);
		res[1] = listtoArray(in);
		res[2] = listtoArray(last);
		return res;
	}
}