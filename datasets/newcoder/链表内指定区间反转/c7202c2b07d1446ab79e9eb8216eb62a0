class Solution {
	ListNode ReverseList(ListNode head, ListNode b) {
		if (head == null || head.next == null) {
			return head;
		}
		ListNode pre = b, cur = head, nxt = head;
		while (cur != b) {
			nxt = cur.next;
			cur.next = pre;
			pre = cur;
			cur = nxt;
		}
		return pre;
	}
	ListNode reverseBetween(ListNode head, int m, int n) {
		ListNode dummy = new ListNode(-1);
		dummy.next = head;
		ListNode pre = dummy;
		for (int i = 0; i < m - 1; ++i) {
			pre = pre.next;
		}
		ListNode leftNode = pre.next;
		ListNode rightNode = pre;
		for (int i = 0; i < n - m + 1; i++) {
			rightNode = rightNode.next;
		}
		ListNode b = rightNode.next;
		pre.next = ReverseList(leftNode,b);
		return dummy.next;
	}
}