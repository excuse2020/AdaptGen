class Solution {
	boolean isEating(int piles, int eats, int hours) {
		int hs = 0;
		for (int i = 0; i < piles.length; i++) {
			hs += piles[i] / eats;
			if (piles[i] % eats != 0) {
				hs += 1;
			}
			if (hs > hours) {
				return false;
			}
		}
		return true;
	}
	int minEatingSpeed(int[] piles, int h) {
		int start = 1;
		int end = Integer.MIN_VALUE;
		for (int i = 0; i < piles.length; i++) {
			if (piles[i] > end) {
				end = piles[i];
			}
		}
		int ans = -1;
		while (start <= end) {
			int mid = start + (end - start) / 2;
			if (isEating(piles,mid,h)) {
				ans = mid;
				end = mid - 1;
			} 
			else {
				start = mid + 1;
			}
		}
		return ans;
	}
}