class Solution {
	void fill(int[][] res, List<Integer> list, int i) {
		for (int j = 0; j < list.size(); j++) {
			res[i][j] = list.get(j);
		}
	}
	void inOrder(TreeNode root, List<Integer> list) {
		if (root == null) {
			return;
		}
		inOrder(root.left,list);
		list.add(root.val);
		inOrder(root.right,list);
	}
	void postOrder(TreeNode root, List<Integer> list) {
		if (root == null) {
			return;
		}
		postOrder(root.left,list);
		postOrder(root.right,list);
		list.add(root.val);
	}
	void preOrder(TreeNode root, List<Integer> list) {
		if (root == null) {
			return;
		}
		list.add(root.val);
		preOrder(root.left,list);
		preOrder(root.right,list);
	}
	int[][] threeOrders(TreeNode root) {
		List<Integer> list = new ArrayList<>();
		preOrder(root,list);
		int len = list.size();
		int[][] res = new int[3][len];
		fill(res,list,0);
		list.clear();
		inOrder(root,list);
		fill(res,list,1);
		list.clear();
		postOrder(root,list);
		fill(res,list,2);
		return res;
	}
}