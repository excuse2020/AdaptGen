class Solution {
	int after(int[] dp, int start) {
		int min = Integer.MAX_VALUE;
		for (int i = 0; i < 26; i++) {
			if (i == start && dp[i] != Integer.MAX_VALUE) {
				min = Math.min(min,dp[i] - 1);
			} 
			else {
				min = Math.min(min,dp[i]);
			}
		}
		return min;
	}
	int before(int[][] dp, int e, int last) {
		int min = Integer.MAX_VALUE;
		for (int i = 0; i < 26; i++) {
			int prev = dp[i][e];
			if (i == last && prev != Integer.MAX_VALUE) {
				min = Math.min(min,prev - 1);
			} 
			else {
				min = Math.min(min,prev);
			}
		}
		return min;
	}
	int minimizeConcatenatedLength(String[] words) {
		int n = words.length;
		int[][][] dp = new int[n][26][26];
		int i = 0;
		String word = words[i];
		int size = word.length();
		int first;
	}
}