class Solution {
	int get_val(int piles, int num) {
		int val = 0;
		for (int i = 0; i < piles.length; i++) {
			val += Math.ceil((double) piles[i] / (double) num);
		}
		return val;
	}
	int max(int piles) {
		int max = 0;
		for (int i = 0; i < piles.length; i++) {
			max = Math.max(max,piles[i]);
		}
		return max;
	}
	int minEatingSpeed(int[] piles, int h) {
		int left = 1;
		int right = max(piles);
		int ans = Integer.MIN_VALUE;
		while (left <= right) {
			int mid = (left + right) / 2;
			int val = get_val(piles,mid);
			if (val <= h) {
				right = mid - 1;
				ans = mid;
			} 
			else {
				left = mid + 1;
			}
		}
		return ans;
	}
}