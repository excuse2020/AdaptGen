class Solution {
	int find(int n, int[] arr) {
		if (n == arr[n]) {
			return n;
		}
		return find(arr[n],arr);
	}
	int[] findRedundantConnection(int[][] edges) {
		int par = new int[1001];
		for (int i = 0; i < par.length; i++) {
			par[i] = i;
		}
		ArrayList<Integer> arr = new ArrayList<>();
		for (int[] i: edges) {	
			int n1 = i[0], n2 = i[1];
			int p1 = find(n1,par);
			int p2 = find(n2,par);
			if (p1 == p2) {
				arr.add(n1);
				arr.add(n2);
			}
			par[p1] = p2;
		}
		int arr1 = new int[arr.size()];
		for (int i = 0; i < arr.size(); i++) {
			arr1[i] = arr.get(i);
		}
		return arr1;
	}
}