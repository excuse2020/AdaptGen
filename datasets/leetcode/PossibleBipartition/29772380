class Solution {
	int[] color;
	int[] e;
	int[] h;
	int idx = 0;
	int[] nxt;
	void add(int a, int b) {
		e[idx] = b;
		nxt[idx] = h[a];
		h[a] = idx++;
	}
	boolean dfs(int x, int c) {
		color[x] = c;
		for (int t = h[x]; t != -1; t = nxt[t]) {
			int j = e[t];
			if (color[j] == 0) {
				int m = c == 1 ? -1 : 1;
				if (!dfs(j,m)) {
					return false;
				}
			} 
			else if (color[x] == color[j]) {
				return false;
			}
		}
		return true;
	}
	boolean possibleBipartition(int n, int[][] dislikes) {
		int N = 20010;
		h = new int[N];
		Arrays.fill(h,-1);
		e = new int[N];
		nxt = new int[N];
		color = new int[N];
		for (int[] edge: dislikes) {	
			add(edge[0],edge[1]);
			add(edge[1],edge[0]);
		}
		Queue<Integer> q = new LinkedList<>();
		for (int i = 1; i <= n; i++) {
			if (color[i] == 0) {
				color[i] = 1;
				q.offer(i);
				while (!q.isEmpty()) {
					int t = q.poll();
					for (int adj = h[t]; adj != -1; adj = nxt[adj]) {
						int m = e[adj];
						if (color[m] == color[t]) {
							return false;
						} 
						else if (color[m] == 0) {
							color[m] = color[t] == 1 ? -1 : 1;
							q.offer(m);
						}
					}
				}
			}
		}
		return true;
	}
}