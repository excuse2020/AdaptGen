class Solution {
	int sumSubarrayMins(int[] arr) {
		Stack<Integer> s = new Stack<>();
		int leftsmall = new int[arr.length];
		int rightsmall = new int[arr.length];
		for (int i = 0; i < arr.length; i++) {
			if (s.isEmpty()) {
				leftsmall[i] = -1;
			} 
			else {
				while (!s.isEmpty() && arr[i] < arr[s.peek()]) {
					s.pop();
				}
				leftsmall[i] = s.isEmpty() ? -1 : s.peek();
			}
			s.push(i);
		}
		while (!s.isEmpty()) {
			s.pop();
		}
		for (int i = arr.length - 1; i >= 0; i--) {
			if (s.isEmpty()) {
				rightsmall[i] = arr.length;
			} 
			else {
				while (!s.isEmpty() && arr[i] <= arr[s.peek()]) {
					s.pop();
				}
				rightsmall[i] = s.isEmpty() ? arr.length : s.peek();
			}
			s.push(i);
		}
		long ans = 0;
		for (int i = 0; i < arr.length; i++) {
			ans += ((long) i - (long) leftsmall[i]) * ((long) rightsmall[i] - (long) i);
			ans = ans % 1000000007;
		}
		return (int) ans;
	}
}