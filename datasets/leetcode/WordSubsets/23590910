class Solution {
	int[] getCounts(String word) {
		int[] count = new int[26];
	}
	int[] getMaximumFrequencies(String[] words) {
		int[] maxWordCount = new int[26];
		for (String word: words) {	
			int[] wordCount = getCounts(word);
			for (int k = 0; k < 26; k++) {
				maxWordCount[k] = Math.max(maxWordCount[k],wordCount[k]);
			}
		}
		return maxWordCount;
	}
	boolean isUniversalSuperSet(int[] wordCount, int[] maxCount) {
		boolean ans = true;
		for (int k = 0; k < 26; k++) {
			if (wordCount[k] < maxCount[k]) {
				ans = false;
				break;
			}
		}
		return ans;
	}
	List<String> wordSubsets(String[] words1, String[] words2) {
		int maxCount = getMaximumFrequencies(words2);
		List<String> universalSuperSets = new ArrayList<String>();
		for (String word: words1) {	
			int[] wordCount = getCounts(word);
			if (isUniversalSuperSet(wordCount,maxCount)) {
				universalSuperSets.add(word);
			}
		}
		return universalSuperSets;
	}
}