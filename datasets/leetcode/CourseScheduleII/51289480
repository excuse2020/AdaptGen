class Solution {
	List<List<Integer>> graph;
	boolean[] rstack;
	Stack<Integer> st;
	boolean[] visited;
	int[] findOrder(int numCourses, int[][] prerequisites) {
		graph = new ArrayList<>();
		rstack = new boolean[numCourses];
		visited = new boolean[numCourses];
		st = new Stack<>();
		for (int i = 0; i < numCourses; i++) {
			graph.add(new ArrayList<>());
		}
		for (int[] pre: prerequisites) {	
			graph.get(pre[1]).add(pre[0]);
		}
		for (int i = 0; i < numCourses; i++) {
			if (!visited[i]) {
				if (isCyclic(i)) {
					return new int[0];
				}
			}
		}
		int[] res = new int[numCourses];
		for (int i = 0; i < numCourses; i++) {
			res[i] = st.pop();
		}
		return res;
	}
	boolean isCyclic(int course) {
		if (rstack[course]) {
			return true;
		}
		if (visited[course]) {
			return false;
		}
		visited[course] = true;
		rstack[course] = true;
		for (Integer pre: graph.get(course)) {	
			if (isCyclic(pre)) {
				return true;
			}
		}
		rstack[course] = false;
		st.push(course);
		return false;
	}
}