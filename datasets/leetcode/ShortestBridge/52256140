class Solution {
	boolean adjacentWater(int grid, int i, int j, int m, int n) {
		if (i != 0 && grid[i - 1][j] == 0) {
			return true;
		} 
		else if (i != m - 1 && grid[i + 1][j] == 0) {
			return true;
		} 
		else if (j != 0 && grid[i][j - 1] == 0) {
			return true;
		} 
		else if (j != n - 1 && grid[i][j + 1] == 0) {
			return true;
		}
		return false;
	}
	void extractPerimeter(int grid, List<int[]> output, int i, int j, int m, int n) {
		if (i < 0 || j < 0 || i >= m || j >= n || grid[i][j] == 0) {
			return;
		}
		grid[i][j] = 0;
		if (adjacentWater(grid,i,j,m,n)) {
			output.add(new int{i, j});
		}
		extractPerimeter(grid,output,i - 1,j,m,n);
		extractPerimeter(grid,output,i + 1,j,m,n);
		extractPerimeter(grid,output,i,j - 1,m,n);
		extractPerimeter(grid,output,i,j + 1,m,n);
		return;
	}
	List<int[]> findIsland(int grid) {
		int m = grid.length, n = grid[0].length;
		List<int[]> result = new ArrayList<int[]>();
		for (int i = 0; i < m; i++) {
			for (int j = 0; j < n; j++) {
				if (grid[i][j] == 1) {
					extractPerimeter(grid,result,i,j,m,n);
					return result;
				}
			}
		}
		return result;
	}
	int shortestBridge(int[][] grid) {
		List<int[]> beach1 = findIsland(grid);
		List<int[]> beach2 = findIsland(grid);
		int min = Integer.MAX_VALUE;
		for (int[] b1: beach1) {	
			for (int[] b2: beach2) {	
				min = Math.min(min,Math.abs(b1[0] - b2[0]) + Math.abs(b1[1] - b2[1]));
			}
		}
		return min - 1;
	}
}