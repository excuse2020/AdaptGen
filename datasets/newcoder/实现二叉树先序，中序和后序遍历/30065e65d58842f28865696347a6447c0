class Solution {
	void inOrders(TreeNode root, ArrayList<Integer> list) {
		if (root == null) {
			return;
		}
		list.add(root.val);
		inOrders(root.left,list);
		inOrders(root.right,list);
	}
	void midOrders(TreeNode root, ArrayList<Integer> list) {
		if (root == null) {
			return;
		}
		midOrders(root.left,list);
		list.add(root.val);
		midOrders(root.right,list);
	}
	void preOrders(TreeNode root, ArrayList<Integer> list) {
		if (root == null) {
			return;
		}
		preOrders(root.left,list);
		preOrders(root.right,list);
		list.add(root.val);
	}
	int[][] threeOrders(TreeNode root) {
		ArrayList<Integer> in = new ArrayList<>();
		inOrders(root,in);
		ArrayList<Integer> mid = new ArrayList<>();
		midOrders(root,mid);
		ArrayList<Integer> pre = new ArrayList<>();
		preOrders(root,pre);
		int[][] arr = new int[3][in.size()];
		for (int i = 0; i < arr[0].length; i++) {
			arr[0][i] = in.get(i);
			arr[1][i] = mid.get(i);
			arr[2][i] = pre.get(i);
		}
		return arr;
	}
}