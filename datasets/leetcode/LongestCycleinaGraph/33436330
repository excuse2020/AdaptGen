class Solution {
	int cnt = -1;
	void dfs(int node, List<List<Integer>> adj, int vis, int path) {
		vis[node] = 1;
		path[node] = 1;
		for (int neigh: adj.get(node)) {	
			if (vis[neigh] == 0) {
				dfs(neigh,adj,vis,path);
			} 
			else if (path[neigh] == 1) {
				int len = 2;
				int n = adj.get(neigh).get(0);
				while (n != neigh) {
					n = adj.get(n).get(0);
					if (n == neigh) {
						break;
					}
					len++;
				}
				cnt = Math.max(cnt,len);
			}
		}
		path[node] = 0;
	}
	int longestCycle(int[] edges) {
		int n = edges.length;
		List<List<Integer>> adj = new ArrayList<>();
		for (int i = 0; i < n; i++) {
			adj.add(new ArrayList<>());
		}
		for (int i = 0; i < n; i++) {
			if (edges[i] == -1) {
				continue;
			}
			adj.get(i).add(edges[i]);
		}
		int vis = new int[n];
		int path = new int[n];
		for (int i = 0; i < n; i++) {
			if (vis[i] == 0) {
				dfs(i,adj,vis,path);
			}
		}
		return cnt;
	}
}