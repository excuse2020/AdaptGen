class Solution {
	Map<Pair<Integer, Integer>, Double> mp = new HashMap<>();
	double solve(int a, int b) {
		if (a <= 0 && b <= 0) {
			return 0.5;
		}
		if (a <= 0) {
			return 1;
		}
		if (b <= 0) {
			return 0;
		}
		Pair<Integer, Integer> k = new Pair<>(a, b);
		if (mp.containsKey(k)) {
			return mp.get(k);
		}
		double p = 0;
		p += solve(a - 100,b);
		p += solve(a - 75,b - 25);
		p += solve(a - 50,b - 50);
		p += solve(a - 25,b - 75);
		p = (double) p / 4.0;
		mp.put(k,p);
		return mp.get(k);
	}
	double soupServings(int n) {
		if (n >= 4800) {
			return 1;
		}
		return solve(n,n);
	}
}