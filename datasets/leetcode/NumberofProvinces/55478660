class Solution {
	void dfs(int currentNode, ArrayList<ArrayList<Integer>> adj, int[] visited) {
		visited[currentNode] = 1;
		for (Integer it: adj.get(currentNode)) {	
			if (visited[it] == 0) {
				dfs(it,adj,visited);
			}
		}
	}
	int findCircleNum(int[][] isConnected) {
		ArrayList<ArrayList<Integer>> adjLs = new ArrayList<ArrayList<Integer>>();
		int V = isConnected.length;
		for (int i = 0; i < V; i++) {
			adjLs.add(new ArrayList<Integer>());
		}
		for (int i = 0; i < V; i++) {
			for (int j = 0; j < V; j++) {
				if (isConnected[i][j] == 1 && i != j) {
					adjLs.get(i).add(j);
					adjLs.get(j).add(i);
				}
			}
		}
		int visit = new int[V];
		int count = 0;
		for (int i = 0; i < V; i++) {
			if (visit[i] == 0) {
				count++;
				dfs(i,adjLs,visit);
			}
		}
		return count;
	}
}