class Solution {
	long inf = (long) Integer.MAX_VALUE;
	long[][] buildGraph(char[] original, char[] changed, int[] cost) {
		long[][] graph = new long[26][26];
		for (int i = 0; i < 26; i++) {
			for (int j = 0; j < 26; j++) {
				if (i == j) {
					graph[i][j] = 0;
				} 
				else {
					graph[i][j] = inf;
				}
			}
		}
		int i = 0;
		int u;
	}
	long[][] fw(long[][] dist) {
		for (int k = 0; k < 26; k++) {
			for (int i = 0; i < 26; i++) {
				for (int j = 0; j < 26; j++) {
					if (dist[i][k] + dist[k][j] < dist[i][j]) {
						dist[i][j] = dist[i][k] + dist[k][j];
					}
				}
			}
		}
		return dist;
	}
	long minimumCost(String source, String target, char[] original, char[] changed, int[] cost) {
		long[][] dist = fw(buildGraph(original,changed,cost));
		long res = 0;
		int i = 0;
		int src;
	}
}