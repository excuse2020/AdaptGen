class Solution {
	void dfs(int[] nums, int len, int depth, Deque<Integer> path, boolean[] used, ArrayList<ArrayList<Integer>> res) {
		if (depth == len) {
			res.add(new ArrayList<>(path));
			return;
		}
		for (int i = 0; i < len; i++) {
			if (used[i]) {
				continue;
			}
			path.addLast(nums[i]);
			used[i] = true;
			dfs(nums,len,depth + 1,path,used,res);
			path.removeLast();
			used[i] = false;
		}
	}
	ArrayList<ArrayList<Integer>> permute(int[] num) {
		int len = num.length;
		ArrayList<ArrayList<Integer>> res = new ArrayList<>();
		if (len == 0) {
			return res;
		}
		Deque<Integer> path = new ArrayDeque<>();
		boolean[] used = new boolean[len];
		dfs(num,len,0,path,used,res);
		return res;
	}
}