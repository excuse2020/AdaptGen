class Solution {
	int getIn(int a, int[] dp) {
		if (a == 0 || a == 1) {
			return a;
		}
		if (dp[a] != 0) {
			return dp[a];
		}
		if (a % 2 == 0) {
			if (dp[a / 2] != 0) {
				return dp[a / 2];
			} 
			else {
				dp[a / 2] = getIn(a / 2,dp);
				return dp[a / 2];
			}
		}
		if (dp[a / 2] != 0 && dp[a / 2 + 1] != 0) {
			return dp[a / 2] + dp[a / 2 + 1];
		}
		if (dp[a / 2] == 0) {
			dp[a / 2] = getIn(a / 2,dp);
		}
		if (dp[a / 2 + 1] == 0) {
			dp[a / 2 + 1] = getIn(a / 2 + 1,dp);
		}
		return dp[a / 2] + dp[a / 2 + 1];
	}
	int getMaximumGenerated(int n) {
		if (n == 0 || n == 1) {
			return n;
		}
		int[] dp = new int[n + 1];
		Arrays.fill(dp,0);
		dp[0] = 0;
		dp[1] = 1;
		int max = 1;
		for (int i = 2; i <= n; i++) {
			dp[i] = getIn(i,dp);
			max = Math.max(max,dp[i]);
		}
		return max;
	}
}