class Solution {
	int MOD = 1000000007;
	int[][] dp;
	int beautifulPartitions(String s, int k, int minLength) {
		int n = s.length();
		dp = new int[n + 5][k + 5];
		if (k == 1) {
			if (isPrime(s.charAt(0)) && !isPrime(s.charAt(s.length() - 1))) {
				return 1;
			}
			return 0;
		}
		for (int[] ints: dp) {	
			Arrays.fill(ints,-1);
		}
		return go(minLength - 1,k,s,minLength);
	}
	int go(int i, int k, String s, int minLength) {
		if (i >= s.length()) {
			return 0;
		}
		if (i == s.length() - 1) {
			return k == 1 && !isPrime(s.charAt(s.length() - 1)) ? 1 : 0;
		}
		if (k < 1) {
			return 0;
		}
		if (dp[i][k] != -1) {
			return dp[i][k];
		}
		long ans = go(i + 1,k,s,minLength);
		if (!isPrime(s.charAt(i)) && isPrime(s.charAt(i + 1))) {
			ans = (ans % MOD + go(i + minLength,k - 1,s,minLength) % MOD) % MOD;
		}
		return dp[i][k] = (int) (ans % MOD);
	}
	boolean isPrime(char x) {
	}
}