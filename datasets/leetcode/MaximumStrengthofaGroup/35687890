class Solution {
	long maxStrength(int[] nums) {
		List<Integer> pos = new ArrayList<>();
		List<Integer> neg = new ArrayList<>();
		long ans = 1L;
		boolean flag = false, zero = false;
		for (int num: nums) {	
			if (num > 0) {
				pos.add(num);
			} 
			else if (num < 0) {
				neg.add(Math.abs((num)));
			} 
			else {
				zero = true;
			}
		}
		for (int n: pos) {	
			flag = true;
			ans *= n;
		}
		if (neg.size() % 2 != 0 && neg.size() > 1) {
			neg.sort(Collections.reverseOrder());
			neg.remove(neg.size() - 1);
		}
		if (neg.size() > 1) {
			for (int n: neg) {	
				flag = true;
				ans *= n;
			}
		}
		if (neg.size() == 1 && zero && pos.size() == 0) {
			return 0;
		}
		if (neg.size() == 1 && pos.size() == 0) {
			return -neg.get(0);
		}
		if (flag) {
			return Math.max(ans,0);
		}
		return 0;
	}
}