class Solution {
	void me(ListNode[] lists, int left, int right) {
		if (left >= right) {
			return;
		}
		int mid = (left + right) / 2;
		me(lists,left,mid);
		me(lists,mid + 1,right);
		lists[left] = merge(lists[left],lists[mid + 1]);
	}
	ListNode merge(ListNode l1, ListNode l2) {
		if (l1 == null || l2 == null) {
			return l1 == null ? l2 : l1;
		}
		ListNode newHead = new ListNode(-1);
		ListNode tmp = newHead;
		while (l1 != null && l2 != null) {
			if (l1.val < l2.val) {
				tmp.next = l1;
				l1 = l1.next;
			} 
			else {
				tmp.next = l2;
				l2 = l2.next;
			}
			tmp = tmp.next;
		}
		if (l1 != null) {
			tmp.next = l1;
		}
		if (l2 != null) {
			tmp.next = l2;
		}
		return newHead.next;
	}
	ListNode mergeKLists(ListNode[] lists) {
		if (lists == null || lists.length <= 0) {
			return null;
		}
		me(lists,0,lists.length - 1);
		return lists[0];
	}
	ListNode mergeKLists(ArrayList<ListNode> lists) {
		ListNode[] list = (ListNode[]) lists.toArray(new ListNode[lists.size()]);
		return mergeKLists(list);
	}
}