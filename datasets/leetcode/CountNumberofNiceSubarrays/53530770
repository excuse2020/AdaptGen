class Solution {
	int numberOfSubarrays(int[] nums, int k) {
		int sum = 0;
		List<Integer> countIndex = new ArrayList<>();
		for (int i = 0; i < nums.length; i++) {
			if (nums[i] % 2 == 1) {
				countIndex.add(i);
			}
		}
		int size = countIndex.size();
		int rightBoard = nums.length;
		int leftBoard = -1;
		int first = -1;
		int second = -1;
		int t = 0;
		for (int i = 0; i < size; i++) {
			t = i;
			first = i;
			second = i + k - 1;
			if (second >= size) {
				break;
			}
			if (first == -1 || second == -1) {
				break;
			}
			int s1 = 0;
			int s2 = 0;
			if (first != 0) {
				leftBoard = countIndex.get(first - 1);
			} 
			else {
				leftBoard = -1;
			}
			if (size - 1 >= second + 1) {
				rightBoard = countIndex.get(second + 1);
			} 
			else {
				rightBoard = nums.length;
			}
			s1 = countIndex.get(first) - 1;
			s2 = rightBoard - 1;
			sum += s1 * s2 + 1 + s1 + s2;
			i = t;
		}
		return sum;
	}
}