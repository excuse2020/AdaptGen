class Solution {
	List<List<Integer>> combinationSum2(int[] candidates, int target) {
		Arrays.sort(candidates);
		List<List<Integer>> ans = new ArrayList<>();
		get_combination(candidates,target,0,new ArrayList<>(),ans);
		return ans;
	}
	void get_combination(int[] nums, int target, int index, List<Integer> subset, List<List<Integer>> ans) {
		if (target == 0) {
			ans.add(new ArrayList(subset));
			return;
		}
		if (target < 0) {
			return;
		}
		for (int i = index; i < nums.length; i++) {
			if (i > index && nums[i] == nums[i - 1]) {
				continue;
			}
			subset.add(nums[i]);
			get_combination(nums,target - nums[i],i + 1,subset,ans);
			subset.remove(subset.size() - 1);
		}
	}
}