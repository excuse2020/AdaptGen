class Solution {
	int e = 0, v = 0;
	int countCompleteComponents(int n, int[][] edges) {
		List<List<Integer>> adj = new ArrayList<>();
		for (int i = 0; i < n; i++) {
			adj.add(new ArrayList<>());
		}
		for (int[] edge: edges) {	
			adj.get(edge[0]).add(edge[1]);
			adj.get(edge[1]).add(edge[0]);
		}
		boolean[] visited = new boolean[n];
		int c = 0;
		for (int i = 0; i < n; i++) {
			if (!visited[i]) {
				dfs(visited,i,adj);
				int Vertices_irunthu_yethana_lines_pogum_1vertice_la_irunthu_2lines_poganumMUST = v * (v - 1) / 2;
				if (Vertices_irunthu_yethana_lines_pogum_1vertice_la_irunthu_2lines_poganumMUST * 2 == e) {
					c++;
				}
			}
			e = 0;
			v = 0;
		}
		return c;
	}
	void dfs(boolean[] visited, int from, List<List<Integer>> adj) {
		visited[from] = true;
		v++;
		for (int to: adj.get(from)) {	
			e++;
			if (!visited[to]) {
				dfs(visited,to,adj);
			}
		}
	}
}