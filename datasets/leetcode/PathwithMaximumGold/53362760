class Solution {
	int m, n;
	int dfs(int[][] grid, int i, int j) {
		if (i < 0 || j < 0 || i >= m || j >= n || grid[i][j] == 0) {
			return 0;
		}
		int temp = grid[i][j];
		grid[i][j] = 0;
		int top = dfs(grid,i - 1,j);
		int bottom = dfs(grid,i + 1,j);
		int left = dfs(grid,i,j - 1);
		int right = dfs(grid,i,j + 1);
		grid[i][j] = temp;
		return temp + Math.max(Math.max(top,bottom),Math.max(left,right));
	}
	int getMaximumGold(int[][] grid) {
		m = grid.length;
		n = grid[0].length;
		int maxGold = 0;
		for (int i = 0; i < m; i++) {
			for (int j = 0; j < n; j++) {
				if (grid[i][j] != 0) {
					maxGold = Math.max(maxGold,dfs(grid,i,j));
				}
			}
		}
		return maxGold;
	}
}