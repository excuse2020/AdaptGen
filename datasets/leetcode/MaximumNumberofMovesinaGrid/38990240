class Solution {
	int helper(int[][] grid, int i, int j, int m, int n, int[][] dp) {
		if (dp[i][j] != -1) {
			return dp[i][j];
		}
		int down = 0, cent = 0, right = 0;
		if (i - 1 >= 0 && j + 1 < n && grid[i][j] < grid[i - 1][j + 1]) {
			right = 1 + helper(grid,i - 1,j + 1,m,n,dp);
		}
		if (j + 1 < n && grid[i][j] < grid[i][j + 1]) {
			down = 1 + helper(grid,i,j + 1,m,n,dp);
		}
		if (i + 1 < m && j + 1 < n && grid[i][j] < grid[i + 1][j + 1]) {
			cent = 1 + helper(grid,i + 1,j + 1,m,n,dp);
		}
		dp[i][j] = Math.max(right,Math.max(down,cent));
		return dp[i][j];
	}
	int maxMoves(int[][] grid) {
		int m = grid.length;
		int n = grid[0].length;
		int[][] dp = new int[m][n];
		for (int[] rows: dp) {	
			Arrays.fill(rows,-1);
		}
		int max = 0;
		for (int i = 0; i < m; i++) {
			int res = helper(grid,i,0,m,n,dp);
			max = Math.max(max,res);
		}
		return max;
	}
}