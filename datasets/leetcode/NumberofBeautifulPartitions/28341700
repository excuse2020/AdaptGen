class Solution {
	int M = 1_000_000_007;
	boolean[] P = new boolean[10];
	int beautifulPartitions(String s, int k, int minL) {
		int n = s.length();
		if (minL * k > n) {
			return 0;
		}
		P[2] = P[3] = P[5] = P[7] = true;
	}
	int dfs(List<Integer> begins, int k, int idx, int pre, int len, int[][] dp) {
		if (k == 0) {
			return 1;
		}
		if (dp[k][idx] > -1) {
			return dp[k][idx];
		}
		dp[k][idx] = 0;
		for (int i = idx; i <= begins.size() - k; i++) {
			int cur = begins.get(i);
			if (cur - pre < len) {
				continue;
			}
			dp[k][idx] = (dp[k][idx] + dfs(begins,k - 1,i + 1,cur,len,dp)) % M;
		}
		return dp[k][idx];
	}
	List<Integer> getValidBeginIndices(String s, int n, int minL) {
		List<Integer> begins = new ArrayList<>(n / 2 + 1);
		int i = minL;
	}
}