class Solution {
	Integer[][] dp;
	int helper(int[][] grid, int i, int j, int prev) {
		if (i < 0 || j < 0 || i >= grid.length || j >= grid[0].length || grid[i][j] <= prev) {
			return 0;
		}
		if (dp[i][j] != null) {
			return dp[i][j];
		}
		int cur = grid[i][j];
		dp[i][j] = 1 + Math.max(helper(grid,i - 1,j + 1,cur),Math.max(helper(grid,i,j + 1,cur),helper(grid,i + 1,j + 1,cur)));
		return dp[i][j];
	}
	int maxMoves(int[][] grid) {
		dp = new Integer[grid.length][grid[0].length];
		int max = 1;
		for (int i = 0; i < grid.length; i++) {
			max = Math.max(max,helper(grid,i,0,0));
		}
		return max - 1;
	}
}