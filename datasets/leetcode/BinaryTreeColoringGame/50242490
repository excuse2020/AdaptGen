class Solution {
	boolean btreeGameWinningMove(TreeNode root, int n, int x) {
		TreeNode opponentNode = find(root,x);
		int left = count(opponentNode.left);
		int right = count(opponentNode.right);
		int countToWin = n / 2 + 1;
		if (left >= countToWin || right >= countToWin) {
			return true;
		}
		if (left + right < countToWin) {
			return true;
		}
		return false;
	}
	int count(TreeNode node) {
		if (node == null) {
			return 0;
		}
		int l = count(node.left);
		int r = count(node.right);
		return 1 + l;
	}
	TreeNode find(TreeNode node, int target) {
		if (node == null) {
			return null;
		}
		if (node.val == target) {
			return node;
		}
		TreeNode l = find(node.left,target);
		if (l != null) {
			return l;
		}
		TreeNode r = find(node.right,target);
		if (r != null) {
			return r;
		}
		return null;
	}
}