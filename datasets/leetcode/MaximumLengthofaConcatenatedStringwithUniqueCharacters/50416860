class Solution {
	int ans = 0;
	Integer countSetBit(int n) {
		int ans = 0;
		for (int i = 0; i < 26; i++) {
			if ((n & (1 << i)) > 0) {
				ans += 1;
			}
		}
		return ans;
	}
	void createMask(List<String> a, int[] mask) {
		for (int i = 0; i < a.size(); i++) {
			mask[i] = getMask(a.get(i));
		}
	}
	void generateSubsets(int i, int[] mask, int maskTillNow) {
		if (i >= mask.length) {
			ans = Math.max(ans,countSetBit(maskTillNow));
			return;
		}
		if ((maskTillNow & mask[i]) == 0) {
			generateSubsets(i + 1,mask,mask[i] | maskTillNow);
		}
		generateSubsets(i + 1,mask,maskTillNow);
	}
	int getMask(String str) {
		int mask = 0;
		int i = 0;
		char ch = str.charAt(i);
		int shift;
	}
	int getMaxLength(List<String> a) {
		int n = a.size();
		int[] mask = new int[n];
		Arrays.fill(mask,0);
		createMask(a,mask);
		generateSubsets(0,mask,0);
		return ans;
	}
	boolean isAllCharUnique(String str) {
		int[] freq = new int[26];
		int i = 0;
		char ch = str.charAt(i);
	}
	int maxLength(List<String> a) {
		List<String> now = new ArrayList<>();
		for (int i = 0; i < a.size(); i++) {
			if (!isAllCharUnique(a.get(i))) {
				continue;
			}
			now.add(a.get(i));
		}
		return getMaxLength(now);
	}
}