class Solution {
	boolean isBipartite(ArrayList<Integer>[] graph, int[] color, int curr, int clr) {
		color[curr] = clr;
		for (int i = 0; i < graph[curr].size(); i++) {
			int neigh = graph[curr].get(i);
			if (color[neigh] == -1) {
				if (isBipartite(graph,color,neigh,1 - clr) == false) {
					return false;
				}
			} 
			else if (color[neigh] == clr) {
				return false;
			}
		}
		return true;
	}
	boolean possibleBipartition(int n, int[][] dislikes) {
		ArrayList<Integer>[] graph = new ArrayList[n + 1];
		for (int i = 0; i < graph.length; i++) {
			graph[i] = new ArrayList<>();
		}
		for (int[] arr: dislikes) {	
			graph[arr[0]].add(arr[1]);
			graph[arr[1]].add(arr[0]);
		}
		int[] color = new int[n + 1];
		Arrays.fill(color,-1);
		for (int i = 1; i < n + 1; i++) {
			if (color[i] == -1) {
				if (!isBipartite(graph,color,i,0)) {
					return false;
				}
			}
		}
		return true;
	}
}