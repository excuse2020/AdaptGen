class Solution {
	boolean findChar(String word, int idx, char[][] board, List<List<Integer>> poses, List<List<Integer>> moves, boolean flag) {
		AtomicInteger index = new AtomicInteger(idx);
		if (flag) {
			if (idx > word.length() - 1) {
				return true;
			}
		} 
		else {
			if (idx < 0) {
				return true;
			}
		}
		List<List<Integer>> valid = validMove(moves,board,poses,flag);
		Boolean b;
	}
	List<String> findWords(char[][] board, String[] words) {
		List<List<Integer>> moves = List.of(List.of(0,1),List.of(1,0),List.of(0,-1),List.of(-1,0));
		Set<Character> chaeSet;
	}
	boolean search(String word, char[][] board, List<List<Integer>> moves, Map<String, Character> map, Set<Character> charSet) {
	}
	List<List<Integer>> validMove(List<List<Integer>> list, char[][] board, List<List<Integer>> poses, boolean flag) {
		List<List<Integer>> list2;
		int lastN = poses.get(poses.size() - 1).getFirst();
		int lastM = poses.get(poses.size() - 1).getLast();
		int n = lastN + l.get(0);
		int m = lastM + l.get(1);
		int preN = -1;
		int preM = -1;
		if (poses.size() > 2) {
			preN = poses.get(poses.size() - 2).getFirst();
			preM = poses.get(poses.size() - 2).getLast();
		}
	}
}