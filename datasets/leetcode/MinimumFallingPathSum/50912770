class Solution {
	int minFallingPathSum(int[][] matrix) {
		int n = matrix.length;
		int m = matrix[0].length;
		int ans = new int[n][m];
		for (int i = 0; i < n; i++) {
			Arrays.fill(ans[i],-200);
		}
		int min = Integer.MAX_VALUE;
		for (int j = 0; j < m; j++) {
			int a = mps(matrix,ans,n,m,0,j);
			min = Math.min(a,min);
		}
		return min;
	}
	int mps(int[][] matrix, int[][] ans, int n, int m, int i, int j) {
		if (i > n - 1 || j > m - 1 || j < 0) {
			return Integer.MAX_VALUE;
		} 
		else if (i == n - 1) {
			return matrix[i][j];
		} 
		else if (ans[i][j] != -200) {
			return ans[i][j];
		} 
		else {
			int x1 = mps(matrix,ans,n,m,i + 1,j);
			int x2 = mps(matrix,ans,n,m,i + 1,j + 1);
			int x3 = mps(matrix,ans,n,m,i + 1,j - 1);
			int x = Math.min(x1,x2);
			x = Math.min(x3,x);
			ans[i][j] = matrix[i][j] + x;
			return ans[i][j];
		}
	}
}