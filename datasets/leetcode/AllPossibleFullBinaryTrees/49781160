class Solution {
	Map<Integer, List<TreeNode>> saved = new HashMap<>();
	List<TreeNode> allPossibleFBT(int n) {
		if (n % 2 == 0) {
			return new ArrayList<>();
		}
		if (!saved.containsKey(n)) {
			List<TreeNode> list = new ArrayList<>();
			if (n == 1) {
				list.add(new TreeNode(0));
			} 
			else {
				for (int i = 1; i <= n - 1; i += 2) {
					List<TreeNode> leftTrees = allPossibleFBT(i);
					List<TreeNode> rightTrees = allPossibleFBT(n - i);
					for (TreeNode lt: leftTrees) {	
						for (TreeNode rt: rightTrees) {	
							list.add(new TreeNode(0, lt, rt));
						}
					}
				}
			}
			saved.put(n,list);
		}
		return saved.get(n);
	}
}