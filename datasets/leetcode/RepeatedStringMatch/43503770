class Solution {
	boolean KMP(String string, String pattern) {
		if (string.length() < pattern.length()) {
			return false;
		}
		int M = pattern.length();
		int N = string.length();
		int[] lps = new int[M];
		fillLPS(pattern,M,lps);
		int i = 0, j = 0;
		while (i < N) {
			if (string.charAt(i) == pattern.charAt(j)) {
				i++;
				j++;
			}
			if (j == M) {
				j = lps[M - 1];
				return true;
			} 
			else if (i < N && string.charAt(i) != pattern.charAt(j)) {
				if (j == 0) {
					i++;
				} 
				else {
					j = lps[j - 1];
				}
			}
		}
		return false;
	}
	void fillLPS(String pattern, int M, int[] lps) {
		int j = 0, i = 1;
		lps[0] = 0;
		while (i < M) {
			if (pattern.charAt(i) == pattern.charAt(j)) {
				j++;
				lps[i] = j;
				i++;
			} 
			else {
				if (j == 0) {
					lps[i] = j;
					i++;
				} 
				else {
					j = lps[j - 1];
				}
			}
		}
	}
	int repeatedStringMatch(String a, String b) {
		Set<Character> set = new HashSet<>();
		for (char c: a.toCharArray()) {	
			set.add(c);
		}
		for (char c: b.toCharArray()) {	
			if (!set.contains(c)) {
				return -1;
			}
		}
		int count = 1;
		String newA = a;
		while (newA.length() < b.length()) {
			newA += a;
			count++;
		}
		if (KMP(newA,b)) {
			return count;
		} 
		else if (KMP(newA + "",b)) {
			return count + 1;
		}
		return -1;
	}
}