class Solution {
	List<List<Integer>> lli = new ArrayList<List<Integer>>();
	void backtracking(TreeNode root, int targetSum, int sum, List<Integer> li) {
		if (root == null) {
			return;
		}
		if (root.left == null && root.right == null) {
			if ((sum + root.val) == targetSum) {
				List<Integer> li1 = new ArrayList<Integer>(li);
				li1.add(root.val);
				lli.add(li1);
			}
			return;
		}
		li.add(root.val);
		sum = sum + root.val;
		backtracking(root.left,targetSum,sum,li);
		backtracking(root.right,targetSum,sum,li);
		li.remove(li.size() - 1);
		sum = sum - root.val;
	}
	List<List<Integer>> pathSum(TreeNode root, int targetSum) {
		List<Integer> li = new ArrayList<Integer>();
		backtracking(root,targetSum,0,li);
		return lli;
	}
}