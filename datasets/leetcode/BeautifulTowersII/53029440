class Solution {
	long maximumSumOfHeights(List<Integer> l) {
		int n = l.size(), min = 0, ind = 0, s2 = 0;
		long s = 0, max = -1, x = 0;
		int[] arr = new int[n];
		for (Integer i: l) {	
			arr[s2++] = i;
		}
		long[] arr1 = new long[n];
		long[] arr2 = new long[n];
		long[] sum = new long[n];
		long[] fs1 = new long[n];
		long[] fs2 = new long[n];
		for (int i = 0; i < n; i++) {
			while (ind - 1 >= 0 && arr1[ind - 1] > arr[i]) {
				x += arr2[ind - 1] + 1;
				ind--;
			}
			s = (x + 1) * arr[i];
			if (ind - 1 >= 0) {
				s += sum[ind - 1];
			}
			sum[ind] = s;
			arr1[ind] = arr[i];
			arr2[ind++] = x;
			fs1[i] = s;
			x = 0;
		}
		ind = 0;
		for (int i = n - 1; i >= 0; i--) {
			while (ind - 1 >= 0 && arr1[ind - 1] > arr[i]) {
				x += arr2[ind - 1] + 1;
				ind--;
			}
			s = (x + 1) * arr[i];
			if (ind - 1 >= 0) {
				s += sum[ind - 1];
			}
			sum[ind] = s;
			arr1[ind] = arr[i];
			arr2[ind++] = x;
			fs2[i] = s;
			x = 0;
		}
		for (int i = 1; i < n - 1; i++) {
			if (arr[i] >= arr[i + 1]) {
				x = fs1[i - 1] + fs2[i + 1];
				if (max < x) {
					max = x;
				}
			}
		}
		max = Math.max(fs1[n - 1],Math.max(max,fs2[0]));
		return max;
	}
}