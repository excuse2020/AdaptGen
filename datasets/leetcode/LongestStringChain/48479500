class Solution {
	boolean compare(String s1, String s2) {
		if (s1.length() != s2.length() + 1) {
			return false;
		}
		int first = 0, second = 0;
		while (first < s1.length()) {
			if (second < s2.length() && s1.charAt(first) == s2.charAt(second)) {
				first++;
				second++;
			} 
			else {
				first++;
			}
		}
		if (first == s1.length() && second == s2.length()) {
			return true;
		} 
		else {
			return false;
		}
	}
	int longestStrChain(String[] str) {
		Arrays.sort(str,Comparator.comparingInt());
		int dp = new int[str.length];
		Arrays.fill(dp,1);
		int max = 1;
		for (int idx = 1; idx < dp.length; idx++) {
			for (int prev = 0; prev < idx; prev++) {
				if (compare(str[idx],str[prev]) && 1 + dp[prev] > dp[idx]) {
					dp[idx] = 1 + dp[prev];
				}
			}
			max = Math.max(max,dp[idx]);
		}
		return max;
	}
}