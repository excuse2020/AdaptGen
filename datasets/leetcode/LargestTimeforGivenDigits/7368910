class Solution {
	List<String> permutations;
	void generateHeapsAlgorithm(int k, int[] array) {
		if (k == 1) {
			permutations.add(myToString(array));
		} 
		else {
			for (int i = 0; i < k; ++i) {
				generateHeapsAlgorithm(k - 1,array);
				if (k % 2 == 1) {
					swap(array,0,k - 1);
				} 
				else {
					swap(array,i,k - 1);
				}
			}
		}
	}
	String largestTimeFromDigits(int[] A) {
		permutations = new ArrayList<>();
		generateHeapsAlgorithm(A.length,A);
		Collections.sort(permutations);
		Iterator<String> iter = permutations.iterator();
		String currentPermutation = iter.next();
	}
	String myToString(int[] array) {
		StringBuilder sb = new StringBuilder();
		for (int i = 0; i < array.length; ++i) {
			sb.append(array[i]);
		}
		return sb.toString();
	}
	void swap(int[] array, int i, int j) {
		int temp = array[i];
		array[i] = array[j];
		array[j] = temp;
	}
}