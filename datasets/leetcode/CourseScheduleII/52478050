class Solution {
	int[] findOrder(int numCourses, int[][] prerequisites) {
		List<List<Integer>> graph = new ArrayList<>();
		int[] indegree = new int[numCourses];
		for (int i = 0; i < numCourses; i++) {
			graph.add(new ArrayList<>());
		}
		for (int[] prereq: prerequisites) {	
			int course = prereq[0];
			int prereqCourse = prereq[1];
			graph.get(prereqCourse).add(course);
			indegree[course]++;
		}
		Queue<Integer> queue = new LinkedList<>();
		for (int i = 0; i < numCourses; i++) {
			if (indegree[i] == 0) {
				queue.add(i);
			}
		}
		List<Integer> list = new ArrayList<>();
		while (!queue.isEmpty()) {
			int course = queue.poll();
			list.add(course);
			for (int neighbor: graph.get(course)) {	
				indegree[neighbor]--;
				if (indegree[neighbor] == 0) {
					queue.add(neighbor);
				}
			}
		}
		if (list.size() != numCourses) {
			return new int[0];
		}
		int[] res = new int[numCourses];
		for (int i = 0; i < numCourses; i++) {
			res[i] = list.get(i);
		}
		return res;
	}
}