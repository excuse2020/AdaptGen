class Solution {
	int minimumUnfairness = Integer.MAX_VALUE;
	int distributeCookies(int[] cookies, int k) {
		unFairnessHelper(cookies,0,new int[k]);
		return minimumUnfairness;
	}
	int getMaxDistribution(int[] distributions) {
		int maxDistribution = Integer.MIN_VALUE;
		for (int distribution: distributions) {	
			maxDistribution = Math.max(maxDistribution,distribution);
		}
		return maxDistribution;
	}
	void unFairnessHelper(int[] cookies, int startIndex, int[] distributions) {
		int maxDistribution = getMaxDistribution(distributions);
		if (maxDistribution >= minimumUnfairness) {
			return;
		}
		if (startIndex > cookies.length - 1) {
			minimumUnfairness = Math.min(minimumUnfairness,maxDistribution);
			return;
		}
		for (int i = 0; i < distributions.length; i++) {
			if (i > 0 && distributions[i] == distributions[i - 1]) {
				continue;
			}
			distributions[i] += cookies[startIndex];
			unFairnessHelper(cookies,startIndex + 1,distributions);
			distributions[i] -= cookies[startIndex];
		}
	}
}