class Solution {
	int f(int r, int c, int[][] grid, int[][] dp) {
		if (r == 0 && c == 0) {
			return (grid[r][c] == 1) ? 0 : 1;
		}
		if (grid[r][c] == 1) {
			return 0;
		}
		if (dp[r][c] != -1) {
			return dp[r][c];
		}
		int up = 0, left = 0;
		if (r - 1 >= 0) {
			up = f(r - 1,c,grid,dp);
		}
		if (c - 1 >= 0) {
			left = f(r,c - 1,grid,dp);
		}
		return dp[r][c] = up + left;
	}
	int uniquePathsWithObstacles(int[][] obstacleGrid) {
		int m = obstacleGrid.length;
		int n = obstacleGrid[0].length;
		int[][] dp = new int[m][n];
		for (int r: dp) {	
			Arrays.fill(r,-1);
		}
		return f(m - 1,n - 1,obstacleGrid,dp);
	}
}