class Solution {
	Stack<Integer>[] edges;
	void build(int v, List<Integer> path) {
		while (edges[v].size() > 0) {
			build(edges[v].pop(),path);
		}
		path.add(v);
	}
	String crackSafe(int n, int k) {
		if (n == 1) {
			String res = "";
			for (int i = 0; i < k; i++) {
				res += i;
			}
			return res;
		}
		int max = (int) Math.pow(k,n - 1);
		edges = new Stack[max];
		for (int i = 0; i < max; i++) {
			edges[i] = new Stack<>();
		}
		for (int v = 0; v < max; v++) {
			for (int i = 0; i < max; i++) {
				if ((v % (int) Math.pow(k,n - 2)) == i / k) {
					edges[v].add(i);
				}
			}
		}
		List<Integer> path = new ArrayList<>();
		build(0,path);
		Collections.reverse(path);
		StringBuilder sb = new StringBuilder();
		for (int i = 2; i < n; i++) {
			sb.append("0");
		}
		for (int i = 0; i < path.size(); i++) {
			sb.append(path.get(i) % k);
		}
		return sb.toString();
	}
}