class Solution {
	int snakesAndLadders(int[][] board) {
		int n = board.length;
		boolean visit = new boolean[n * n + 1];
		int arr = new int[n * n + 1];
		int k = 1;
		boolean flag = true;
		for (int i = n - 1; i >= 0; i--) {
			if (flag) {
				for (int j = 0; j < n; j++) {
					arr[k++] = board[i][j];
				}
			} 
			else {
				for (int j = n - 1; j >= 0; j--) {
					arr[k++] = board[i][j];
				}
			}
			flag ^= true;
		}
		Queue<Integer> q = new LinkedList<>();
		q.add(1);
		int cnt = 0;
		visit[1] = true;
		for (; !q.isEmpty(); ) {
			int s = q.size();
			++cnt;
			for (; s > 0; --s) {
				int cp = q.poll();
				for (int i = cp + 1; (i - cp <= 6) && i <= n * n; i++) {
					int np = arr[i] == -1 ? i : arr[i];
					if (!visit[np]) {
						visit[np] = true;
						if (np == n * n) {
							return cnt;
						}
						q.add(np);
					}
				}
			}
		}
		return -1;
	}
}