class Solution {
	int waysToMakeFair(int[] nums) {
		int n = nums.length;
		int[] prefixEven = new int[n];
		int[] prefixOdd = new int[n];
		int[] suffixEven = new int[n];
		int[] suffixOdd = new int[n];
		if ((n - 1) % 2 == 0) {
			suffixEven[n - 1] = nums[n - 1];
		} 
		else {
			suffixOdd[n - 1] = nums[n - 1];
		}
		for (int i = n - 2; i >= 0; i--) {
			suffixEven[i] = suffixEven[i + 1];
			suffixOdd[i] = suffixOdd[i + 1];
			if (i % 2 == 0) {
				suffixEven[i] += nums[i];
			} 
			else {
				suffixOdd[i] += nums[i];
			}
		}
		prefixEven[0] = nums[0];
		for (int i = 1; i < n; i++) {
			prefixEven[i] = prefixEven[i - 1];
			prefixOdd[i] = prefixOdd[i - 1];
			if (i % 2 == 0) {
				prefixEven[i] += nums[i];
			} 
			else {
				prefixOdd[i] += nums[i];
			}
		}
		int count = 0;
		for (int i = 0; i < n; i++) {
			int evenSum = (i > 0 ? prefixEven[i - 1] : 0) + (i < n - 1 ? suffixOdd[i + 1] : 0);
			int oddSum = (i > 0 ? prefixOdd[i - 1] : 0) + (i < n - 1 ? suffixEven[i + 1] : 0);
			if (evenSum == oddSum) {
				count++;
			}
		}
		return count;
	}
}