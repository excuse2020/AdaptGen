class Solution {
	void dfs(int[][] grid, int i, int j, Set<String> set, int val) {
		int rows = grid.length;
		int cols = grid[0].length;
		String str = i + "-";
		if (i < 0 || j < 0 || i >= rows || j >= cols || set.contains(str)) {
			return;
		}
		set.add(str);
		val[0] += grid[i][j];
		if (i + 1 < rows && grid[i + 1][j] > 0) {
			dfs(grid,i + 1,j,set,val);
		}
		if (j + 1 < cols && grid[i][j + 1] > 0) {
			dfs(grid,i,j + 1,set,val);
		}
		if (i - 1 >= 0 && grid[i - 1][j] > 0) {
			dfs(grid,i - 1,j,set,val);
		}
		if (j - 1 >= 0 && grid[i][j - 1] > 0) {
			dfs(grid,i,j - 1,set,val);
		}
	}
	int findMaxFish(int[][] grid) {
		int rows = grid.length;
		int cols = grid[0].length;
		Set<String> set = new HashSet<String>();
		int max = 0;
		for (int i = 0; i < rows; i++) {
			for (int j = 0; j < cols; j++) {
				String str = i + "-";
				if (grid[i][j] > 0 && !set.contains(str)) {
					int val = new int[1];
					dfs(grid,i,j,set,val);
					max = Math.max(max,val[0]);
				}
			}
		}
		return max;
	}
}