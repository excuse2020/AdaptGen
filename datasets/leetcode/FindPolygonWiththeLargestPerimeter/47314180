class Solution {
	long largestPerimeter(int[] nums) {
		if (nums.length < 3) {
			return -1;
		}
		long sum = 0;
		int max = -1;
		int maxIdx = -1;
		for (int i = 0; i < nums.length; i++) {
			sum += nums[i];
			if (max < nums[i]) {
				maxIdx = i;
				max = nums[i];
			}
		}
		if ((sum - max) > max) {
			return sum;
		}
		nums[maxIdx] = -1;
		for (int j = 2; j < nums.length; j++) {
			sum -= max;
			maxIdx = maxId(nums);
			max = nums[maxIdx];
			if ((sum - max) > max) {
				return sum;
			}
			nums[maxIdx] = -1;
		}
		return -1;
	}
	int maxId(int[] nums) {
		int max = -1;
		int maxIdx = -1;
		for (int i = 0; i < nums.length; i++) {
			if (max < nums[i]) {
				maxIdx = i;
				max = nums[i];
			}
		}
		return maxIdx;
	}
}