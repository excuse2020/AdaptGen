class Solution {
	int minimumRounds(int[] tasks) {
		HashMap<Integer, Integer> map = new HashMap<>();
		for (int i = 0; i < tasks.length; i++) {
			if (!map.containsKey(tasks[i])) {
				map.put(tasks[i],1);
			} 
			else {
				int currVal = map.get(tasks[i]);
				map.put(tasks[i],currVal + 1);
			}
		}
		int ans = 0;
		Iterator hmIterator = map.entrySet().iterator();
		while (hmIterator.hasNext()) {
			Map.Entry mapElement = (Map.Entry) hmIterator.next();
			int freq = ((int) mapElement.getValue());
			if (freq <= 1) {
				return -1;
			}
			if ((freq % 3 == 0)) {
				ans = ans + freq / 3;
			} 
			else if (freq % 2 == 0 || (freq % 2 != 0)) {
				int temp = freq;
				int i = 1;
				boolean flag = false;
				while (freq != 0) {
					freq = freq - 2;
					if (freq % 3 == 0) {
						flag = true;
						ans = ans + (freq / 3);
						break;
					}
					i++;
				}
				if (flag == false) {
					ans = ans + temp / 2;
				}
			}
		}
		return ans;
	}
}