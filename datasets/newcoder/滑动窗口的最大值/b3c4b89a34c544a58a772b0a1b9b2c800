class Solution {
	ArrayList<Integer> maxInWindows(int[] num, int size) {
		MonotonicQueue window = new MonotonicQueue();
		ArrayList<Integer> res = new ArrayList<>();
		if (size > num.length || size == 0) {
			return res;
		}
		for (int i = 0; i < num.length; i++) {
			if (i < size - 1) {
				window.push(num[i]);
			} 
			else {
				window.push(num[i]);
				res.add(window.max());
				window.pop(num[i - size + 1]);
			}
		}
		return res;
	}
}
class MonotonicQueue {
	LinkedList<Integer> q = new LinkedList<>();
	int max() {
		return q.getFirst();
	}
	void pop(int n) {
		if (n == q.getFirst()) {
			q.pollFirst();
		}
	}
	void push(int n) {
		while (!q.isEmpty() && q.getLast() < n) {
			q.pollLast();
		}
		q.addLast(n);
	}
}