class Solution {
	List<List<Integer>> combinationSum3(int k, int n) {
		List<List<Integer>> result = new ArrayList<>();
		helper(result,new ArrayList<Integer>(),k,n,1);
		return result;
	}
	void helper(List<List<Integer>> result, List<Integer> tempList, int listLength, int target, int begin) {
		if (target == 0 && listLength == 0) {
			List<Integer> t = new ArrayList<>(tempList);
			result.add(t);
			return;
		}
		if (listLength == 0 || target < 0) {
			return;
		}
		for (int j = begin; j <= 9; j++) {
			if (target - j < 0) {
				return;
			}
			tempList.add(j);
			begin = j + 1;
			listLength -= 1;
			target = target - j;
			helper(result,tempList,listLength,target,begin);
			listLength += 1;
			target += j;
			tempList.remove(tempList.size() - 1);
		}
	}
}