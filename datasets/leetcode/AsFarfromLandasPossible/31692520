class Solution {
	void dfs(int grid, int i, int j, int dist) {
		if (i < 0 || j < 0 || i >= grid.length || j >= grid[0].length || grid[i][j] != 0 && grid[i][j] <= dist) {
			return;
		}
		grid[i][j] = dist;
		dfs(grid,i + 1,j,dist + 1);
		dfs(grid,i - 1,j,dist + 1);
		dfs(grid,i,j - 1,dist + 1);
		dfs(grid,i,j + 1,dist + 1);
	}
	int maxDistance(int[][] grid) {
		int mx = 0;
		for (int i = 0; i < grid.length; i++) {
			for (int j = 0; j < grid[0].length; j++) {
				if (grid[i][j] == 1) {
					grid[i][j] = 0;
					dfs(grid,i,j,1);
				}
			}
		}
		for (int i = 0; i < grid.length; ++i) {
			for (int j = 0; j < grid[0].length; ++j) {
				if (grid[i][j] > 1) {
					mx = Math.max(mx,grid[i][j] - 1);
				}
			}
		}
		if (mx == 0) {
			return -1;
		}
		return mx;
	}
}