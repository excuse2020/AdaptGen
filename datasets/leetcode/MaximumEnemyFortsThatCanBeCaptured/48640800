class Solution {
	int captureForts(int[] forts) {
		int max = 0;
		for (int i = 0; i < forts.length; i++) {
			if (forts[i] == 1) {
				int countRightCapture = 0;
				int countLeftCapture = 0;
				boolean foundRightNoFort = false;
				boolean foundLeftNoFort = false;
				for (int j = i + 1; j < forts.length; j++) {
					if (forts[j] == -1) {
						foundRightNoFort = true;
						break;
					}
					if (forts[j] == 1) {
						break;
					}
					if (forts[j] == 0) {
						countRightCapture++;
					}
				}
				if (!foundRightNoFort) {
					countRightCapture = 0;
				}
				for (int k = i - 1; k >= 0; k--) {
					if (forts[k] == -1) {
						foundLeftNoFort = true;
						break;
					}
					if (forts[k] == 1) {
						break;
					}
					if (forts[k] == 0) {
						countLeftCapture++;
					}
				}
				if (!foundLeftNoFort) {
					countLeftCapture = 0;
				}
				max = Math.max(max,Math.max(countRightCapture,countLeftCapture));
			}
		}
		return max;
	}
}