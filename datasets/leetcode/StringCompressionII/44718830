class Solution {
	int[][] dp;
	int n;
	char[] s;
	int dp(int i, int k) {
		if (k < 0) {
			return this.n;
		}
		if (i + k >= n) {
			return 0;
		}
		int ans = dp[i][k];
		if (ans != -1) {
			return ans;
		}
		ans = dp(i + 1,k - 1);
		int len = 0;
		int same = 0;
		int diff = 0;
		for (int j = i; j < n && diff <= k; ++j) {
			if (s[j] == s[i]) {
				++same;
				if (same <= 2 || same == 10 || same == 100) {
					++len;
				}
			} 
			else {
				++diff;
			}
			ans = Math.min(ans,len + dp(j + 1,k - diff));
		}
		dp[i][k] = ans;
		return ans;
	}
	int getLengthOfOptimalCompression(String s, int k) {
		this.s = s.toCharArray();
		this.n = s.length();
		this.dp = new int[n][k + 1];
		for (int[] row: dp) {	
			Arrays.fill(row,-1);
		}
		return dp(0,k);
	}
}