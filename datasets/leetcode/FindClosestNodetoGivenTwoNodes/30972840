class Solution {
	void bfs(int node1, int distanceForNode1, int edge) {
		int size = edge.length;
		boolean visited = new boolean[size];
		Queue<Integer> queue = new LinkedList<>();
		queue.add(node1);
		distanceForNode1[node1] = 0;
		while (!queue.isEmpty()) {
			int value = queue.poll();
			if (visited[value]) {
				continue;
			}
			visited[value] = true;
			int nearestNode = edge[value];
			if (nearestNode != -1 && !visited[nearestNode]) {
				distanceForNode1[nearestNode] = 1 + distanceForNode1[value];
				queue.add(nearestNode);
			}
		}
	}
	int closestMeetingNode(int[] edges, int node1, int node2) {
		int size = edges.length;
		int distanceForNode1 = new int[size];
		int distanceForNode2 = new int[size];
		Arrays.fill(distanceForNode1,Integer.MAX_VALUE);
		Arrays.fill(distanceForNode2,Integer.MAX_VALUE);
		bfs(node1,distanceForNode1,edges);
		bfs(node2,distanceForNode2,edges);
		int index = -1;
		int distance = Integer.MAX_VALUE;
		for (int i = 0; i < size; i++) {
			if (distance > Math.max(distanceForNode1[i],distanceForNode2[i])) {
				index = i;
				distance = Math.max(distanceForNode1[i],distanceForNode2[i]);
			}
		}
		return index;
	}
}