class Solution {
	long[][] dp;
	Map<Integer, List<Integer>> map;
	long mod = (long) 1e9 + 7;
	long dfs(int perm, int i, int n, int pre) {
		if (i == n) {
			return 1;
		}
		if (dp[pre][perm] >= 0) {
			return dp[pre][perm];
		}
		long ans = 0;
		for (int next: map.get(pre)) {	
			if ((perm & (1 << next)) != 0) {
				continue;
			}
			ans = (ans + dfs(perm | (1 << next),i + 1,n,next)) % mod;
		}
		return dp[pre][perm] = ans;
	}
	int specialPerm(int[] nums) {
		int n = nums.length;
		dp = new long[n][1 << n];
		map = new HashMap();
		for (int i = 0; i < n; i++) {
			map.put(i,new ArrayList());
		}
		for (long[] row: dp) {	
			Arrays.fill(row,-1);
		}
		for (int i = 0; i < n - 1; i++) {
			for (int j = i + 1; j < n; j++) {
				if (nums[i] % nums[j] == 0 || nums[j] % nums[i] == 0) {
					map.get(i).add(j);
					map.get(j).add(i);
				}
			}
		}
		long ans = 0;
		for (int i = 0; i < n; i++) {
			ans = (ans + dfs(1 << i,1,n,i)) % mod;
		}
		return (int) ans;
	}
}