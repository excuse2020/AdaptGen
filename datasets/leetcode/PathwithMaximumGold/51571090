class Solution {
	int getMaximumGold(int[][] grid) {
		int m = grid.length;
		int n = grid[0].length;
		boolean[][] visited = new boolean[m][n];
		int maxSum = 0;
		for (int i = 0; i < m; i++) {
			for (int j = 0; j < n; j++) {
				if (grid[i][j] > 0) {
					maxSum = Math.max(maxSum,getMaximumGold(grid,visited,i,j));
				}
			}
		}
		return maxSum;
	}
	int getMaximumGold(int[][] grid, boolean[][] visited, int i, int j) {
		visited[i][j] = true;
		int sum = 0;
		if (i > 0 && !visited[i - 1][j] && grid[i - 1][j] > 0) {
			sum = Math.max(sum,getMaximumGold(grid,visited,i - 1,j));
		}
		if (i < grid.length - 1 && !visited[i + 1][j] && grid[i + 1][j] > 0) {
			sum = Math.max(sum,getMaximumGold(grid,visited,i + 1,j));
		}
		if (j > 0 && !visited[i][j - 1] && grid[i][j - 1] > 0) {
			sum = Math.max(sum,getMaximumGold(grid,visited,i,j - 1));
		}
		if (j < grid[0].length - 1 && !visited[i][j + 1] && grid[i][j + 1] > 0) {
			sum = Math.max(sum,getMaximumGold(grid,visited,i,j + 1));
		}
		visited[i][j] = false;
		return sum + grid[i][j];
	}
}