class Solution {
	boolean isvalid(String str) {
		Stack<Character> st = new Stack<>();
		int i = 0;
		char curr = str.charAt(i);
	}
	int noofp(String str) {
		Stack<Character> st = new Stack<>();
		int i = 0;
		char curr = str.charAt(i);
	}
	List<String> removeInvalidParentheses(String s) {
		int toremove = noofp(s);
		ArrayList<String> ans = new ArrayList<>();
		HashSet<String> set = new HashSet<String>();
		solve(s,toremove,ans,set);
		return ans;
	}
	void solve(String s, int toremove, ArrayList<String> ans, HashSet<String> set) {
		if (set.contains(s)) {
			return;
		}
		set.add(s);
		if (toremove == 0) {
			if (isvalid(s)) {
				ans.add(s);
			}
			return;
		}
		for (int i = 0; i < s.length(); i++) {
			String left = s.substring(0,i);
			String right = s.substring(i + 1);
			if (!set.contains(left + right)) {
				solve(left + right,toremove - 1,ans,set);
			}
		}
	}
}