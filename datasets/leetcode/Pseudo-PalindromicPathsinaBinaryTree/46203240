class Solution {
	int pseudoPalindromicPaths(TreeNode root) {
		return withBitManipulation(root,0);
	}
	int withArrayAsMap(TreeNode root, int[] map) {
		if (root == null) {
			return 0;
		}
		map[root.val]++;
		int left = withArrayAsMap(root.left,map);
		if (root.left == null && root.right == null) {
			int sum = 0;
			for (int i: map) {	
				sum += (i % 2);
			}
			map[root.val]--;
			if (sum <= 1) {
				return 1;
			}
			return 0;
		}
		int right = withArrayAsMap(root.right,map);
		map[root.val]--;
		return left + right;
	}
	int withBitManipulation(TreeNode root, int num) {
		if (root == null) {
			return 0;
		}
		int ans = 0;
		num = num ^ (1 << root.val);
		ans += withBitManipulation(root.left,num);
		if (root.left == null && root.right == null) {
			if (Integer.bitCount(num) <= 1) {
				return 1;
			} 
			else {
				return 0;
			}
		}
		ans += withBitManipulation(root.right,num);
		return ans;
	}
	int withMap(TreeNode root, Map<Integer, Integer> map) {
		if (root == null) {
			return 0;
		}
		if (root.left == null && root.right == null) {
			Integer val = map.putIfAbsent(root.val,1);
			if (val != null) {
				map.put(root.val,val + 1);
			}
			int sum = 0;
			for (int value: map.values()) {	
				sum += (value % 2);
			}
			map.put(root.val,map.get(root.val) - 1);
			if (sum <= 1) {
				return 1;
			} 
			else {
				return 0;
			}
		}
		int ans = 0;
		Integer val = map.putIfAbsent(root.val,1);
		if (val != null) {
			map.put(root.val,val + 1);
		}
		ans += withMap(root.left,map);
		ans += withMap(root.right,map);
		map.put(root.val,map.get(root.val) - 1);
		return ans;
	}
}