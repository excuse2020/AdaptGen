class Solution {
	int minOperations(int n) {
		int[] arr = new int[n];
		for (int i = 0; i < n; i++) {
			arr[i] = (2 * i) + 1;
		}
		int start = 0, end = n - 1, count = 0;
		int mid = (start + end) >> 1;
		if (n % 2 != 0) {
			while (start < mid && end > mid) {
				while (arr[start] != arr[mid] && arr[end] != arr[mid]) {
					arr[start] += 1;
					arr[end] += 1;
					count++;
				}
				start++;
				end--;
			}
		} 
		else {
			int midVal = (arr[mid] + arr[mid + 1]) / 2;
			while (start <= mid && end > mid) {
				while (arr[start] != midVal && arr[end] != midVal) {
					arr[start] += 1;
					arr[end] += 1;
					count++;
				}
				start++;
				end--;
			}
		}
		return count;
	}
}