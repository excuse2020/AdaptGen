class Solution {
	int[] avoidFlood(int[] rains) {
		List<Integer> toDryLakes = new ArrayList<>();
		Map<Integer, Integer> lakeRainDayMapping = new HashMap<Integer, Integer>();
		List<Integer> drydays = new ArrayList<>();
		int[] res = new int[rains.length];
		boolean flag = false;
		for (int i = 0; i < rains.length; i++) {
			if (rains[i] == 0) {
				drydays.add(i);
			} 
			else {
				if (lakeRainDayMapping.containsKey(rains[i])) {
					Integer dryday = -1;
					Integer lastFilledDay = lakeRainDayMapping.get(rains[i]);
					for (int j = 0; j < drydays.size(); j++) {
						if (drydays.get(j) > lastFilledDay) {
							dryday = drydays.get(j);
							break;
						}
					}
					if (dryday == -1) {
						flag = true;
						break;
					}
					drydays.remove(new Integer(dryday));
					res[dryday] = rains[i];
					res[i] = -1;
					lakeRainDayMapping.put(rains[i],i);
				} 
				else {
					lakeRainDayMapping.put(rains[i],i);
					res[i] = -1;
				}
			}
		}
		if (!flag) {
			for (int i = 0; i < res.length; i++) {
				if (res[i] == 0) {
					res[i] = 1;
				}
			}
			return res;
		} 
		else {
			return new int[0];
		}
	}
}