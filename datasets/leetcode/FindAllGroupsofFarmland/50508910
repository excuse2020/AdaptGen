class Solution {
	List<List<Integer>> result;
	void dfs(int[][] land, boolean visited, List<Integer> list, int x, int y) {
		int row = land.length;
		int col = land[0].length;
		if (x < 0 || y < 0 || x >= row || y >= col || visited[x][y] || land[x][y] == 0) {
			return;
		}
		visited[x][y] = true;
		if (list.get(2) < x || list.get(3) < y) {
			list.set(2,x);
			list.set(3,y);
		}
		dfs(land,visited,list,x - 1,y);
		dfs(land,visited,list,x,y + 1);
		dfs(land,visited,list,x + 1,y);
		dfs(land,visited,list,x,y - 1);
	}
	int[][] findFarmland(int[][] land) {
		int row = land.length;
		int col = land[0].length;
		result = new ArrayList<>();
		boolean visited = new boolean[row][col];
		for (int i = 0; i < row; i++) {
			for (int j = 0; j < col; j++) {
				if (land[i][j] == 1 && !visited[i][j]) {
					List<Integer> list = new ArrayList<>();
					list.add(i);
					list.add(j);
					list.add(i);
					list.add(j);
					dfs(land,visited,list,i,j);
					result.add(list);
				}
			}
		}
		int n = result.size();
		int temp = new int[n][4];
		for (int i = 0; i < n; i++) {
			temp[i] = result.get(i).stream().mapToInt((x) -> {x}).toArray();
		}
		return temp;
	}
}