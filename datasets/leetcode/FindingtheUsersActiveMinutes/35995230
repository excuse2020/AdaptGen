class Solution {
	int[] findingUsersActiveMinutes(int[][] logs, int k) {
		Map<Integer, Set<Integer>> activeMinutesByUser = new HashMap<>();
		for (int[] log: logs) {	
			if (!activeMinutesByUser.containsKey(log[0])) {
				activeMinutesByUser.put(log[0],new HashSet<>());
			}
			activeMinutesByUser.get(log[0]).add(log[1]);
		}
		Map<Integer, Integer> countsByUAM = new HashMap<>();
		for (Map.Entry<Integer, Set<Integer>> entry: activeMinutesByUser.entrySet()) {	
			int uamValue = entry.getValue().size();
			countsByUAM.put(uamValue,1 + countsByUAM.getOrDefault(uamValue,0));
		}
		int[] answer = new int[k];
		for (int i = 0; i < k; i++) {
			answer[i] = countsByUAM.getOrDefault((i + 1),0);
		}
		return answer;
	}
}