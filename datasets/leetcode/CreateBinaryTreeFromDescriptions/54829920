class Solution {
	TreeNode createBinaryTree(int[][] descriptions) {
		HashMap<Integer, TreeNode> map = new HashMap<>();
		HashSet<Integer> set = new HashSet<>();
		for (int[] arr: descriptions) {	
			int parent = arr[0];
			int child = arr[1];
			boolean has_left_Child = arr[2] == 1;
			if (!map.containsKey(parent)) {
				map.put(parent,new TreeNode(parent));
			}
			if (!map.containsKey(child)) {
				map.put(child,new TreeNode(child));
			}
			set.add(child);
			if (has_left_Child) {
				map.get(parent).left = map.get(child);
			} 
			else {
				map.get(parent).right = map.get(child);
			}
		}
		TreeNode root = new TreeNode();
		for (int i = 0; i < descriptions.length; i++) {
			if (!set.contains(descriptions[i][0])) {
				root = map.get(descriptions[i][0]);
				break;
			}
		}
		return root;
	}
}