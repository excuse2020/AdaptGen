class Solution {
	int[][] result;
	int[][] differenceOfDistinctValues(int[][] grid) {
		result = new int[grid.length][grid[0].length];
		for (int i = 0; i < grid.length; i++) {
			for (int j = 0; j < grid[0].length; j++) {
				helper(i,j,grid);
			}
		}
		return result;
	}
	void helper(int i, int j, int[][] grid) {
		int tempi = i;
		int tempj = j;
		int topLeft = 0;
		int bottomRight = 0;
		Map<Integer, Integer> count = new HashMap<>();
		i--;
		j--;
		while (i >= 0 && j >= 0) {
			count.put(grid[i][j],1);
			i--;
			j--;
		}
		i = tempi + 1;
		j = tempj + 1;
		topLeft = count.size();
		count = new HashMap<>();
		while (i < grid.length && j < grid[0].length) {
			count.put(grid[i][j],1);
			i++;
			j++;
		}
		bottomRight = count.size();
		result[tempi][tempj] = Math.abs(topLeft - bottomRight);
	}
}