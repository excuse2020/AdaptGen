class Solution {
	int helper(int[][] cal, int ind, int lastEnd) {
		if (ind >= cal.length) {
			return 0;
		}
		int pick = 0;
		int notPick = 0;
		if (cal[ind][0] < lastEnd) {
			notPick = helper(cal,ind + 1,lastEnd);
		} 
		else {
			pick = cal[ind][2] + helper(cal,ind + 1,cal[ind][1]);
			notPick = helper(cal,ind + 1,lastEnd);
		}
		return dp.get(key);
	}
	int jobScheduling(int[] startTime, int[] endTime, int[] profit) {
		int[][] cal = new int[startTime.length][3];
		for (int i = 0; i < startTime.length; i++) {
			cal[i][0] = startTime[i];
			cal[i][1] = endTime[i];
			cal[i][2] = profit[i];
		}
		Arrays.sort(cal,new Comparator<int[]>());
		dp = new HashMap<>();
		return helper(cal,0,-1);
	}
}