class Solution {
	int ans = 0;
	int helper(ArrayList<ArrayList<Integer>> graph, boolean isApple, boolean visi, int node) {
		if (visi[node]) {
			return 0;
		}
		visi[node] = true;
		boolean flag = false;
		for (int adj: graph.get(node)) {	
			if (!visi[adj] && helper(graph,isApple,visi,adj) == 1) {
				ans += 2;
				flag = true;
				System.out.println(node);
			}
		}
		if (flag || isApple[node]) {
			return 1;
		}
		return 0;
	}
	int minTime(int n, int[][] edges, List<Boolean> hasApple) {
		ArrayList<ArrayList<Integer>> graph = new ArrayList<>();
		for (int i = 0; i < n; i++) {
			graph.add(new ArrayList<>());
		}
		boolean isApple = new boolean[n];
		boolean visi = new boolean[n];
		for (int i = 0; i < n - 1; i++) {
			int ele = edges[i];
			graph.get(ele[0]).add(ele[1]);
			graph.get(ele[1]).add(ele[0]);
			if (hasApple.get(i)) {
				isApple[i] = true;
			}
		}
		if (hasApple.get(n - 1)) {
			isApple[n - 1] = true;
		}
		helper(graph,isApple,visi,0);
		return ans;
	}
}