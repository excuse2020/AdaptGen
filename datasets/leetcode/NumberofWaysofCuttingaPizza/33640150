class Solution {
	long modAdd(long a, long b, long mod) {
		return (a % mod + b % mod) % mod;
	}
	int ways(String[] pizzaString, int k) {
		k++;
		int n = pizzaString.length;
		int m = pizzaString[0].length();
		char[][] pizzaTranspose = new char[n];
		char[][] pizza = new char[n];
		for (int i = 0; i < n; i++) {
			pizzaTranspose[i] = pizzaString[i].toCharArray();
			pizza[i] = new char[m];
		}
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < m; j++) {
				pizza[i][j] = pizzaTranspose[n - i - 1][m - j - 1];
			}
		}
		long mod = (long) (1e9 + 7);
		long[][][] dp = new long[n];
		for (int i = 0; i < n; i++) {
			dp[i] = new long[m];
			for (int j = 0; j < m; j++) {
				dp[i][j] = new long[k];
			}
		}
		int[][] prefRow = new int[n];
		int[][] prefCol = new int[m];
		for (int i = 0; i < n; i++) {
			prefRow[i] = new int[m];
		}
		for (int j = 0; j < m; j++) {
			prefCol[j] = new int[n];
		}
		int i = 0;
		int j = 0;
		if (i - 1 >= 0) {
			prefCol[j][i] += prefCol[j][i - 1];
		}
		if (j - 1 >= 0) {
			prefRow[i][j] += prefRow[i][j - 1];
		}
	}
}