class Solution {
	char[][] Sudoku(char[][] board, int row, int col, char[][] ans) {
		if (col == 9) {
			row++;
			col = 0;
		}
		if (row == 9) {
			copy(board,ans);
			return ans;
		}
	}
	char[][] copy(char[][] a, char[][] b) {
		for (int i = 0; i < a.length; i++) {
			for (int j = 0; j < a[0].length; j++) {
				b[i][j] = a[i][j];
			}
		}
		return b;
	}
	boolean isPalced(char[][] board, int row, int col, char val) {
		int c = 0;
		while (c < 9) {
			if (board[row][c] == val) {
				return false;
			}
			c++;
		}
		int r = 0;
		while (r < 9) {
			if (board[r][col] == val) {
				return false;
			}
			r++;
		}
		r = row - row % 3;
		c = col - col % 3;
		for (int i = r; i < r + 3; i++) {
			for (int j = c; j < c + 3; j++) {
				if (board[i][j] == val) {
					return false;
				}
			}
		}
		return true;
	}
	void solveSudoku(char[][] board) {
		copy(Sudoku(board,0,0,new char[9][9]),board);
	}
}