class Solution {
	void dfs(char[][] grid, int i, int j) {
		int l1 = grid.length;
		int l2 = grid[0].length;
		grid[i][j] = '0';
		if (i - 1 >= 0 && grid[i - 1][j] == '1') {
			dfs(grid,i - 1,j);
		}
		if (i + 1 < l1 && grid[i + 1][j] == '1') {
			dfs(grid,i + 1,j);
		}
		if (j - 1 >= 0 && grid[i][j - 1] == '1') {
			dfs(grid,i,j - 1);
		}
		if (j + 1 < l2 && grid[i][j + 1] == '1') {
			dfs(grid,i,j + 1);
		}
	}
	int solve(char[][] grid) {
		int l1 = grid.length;
		if (l1 == 0) {
			return 0;
		}
		int l2 = grid[0].length;
		int ret = 0;
		for (int i = 0; i < l1; i++) {
			for (int j = 0; j < l2; j++) {
				if (grid[i][j] == '1') {
					ret++;
					dfs(grid,i,j);
				}
			}
		}
		return ret;
	}
}