class Solution {
	boolean function(int start, int end, int[] piles, int alice, int bob, boolean alice_turn) {
		if (start > end) {
			return alice > bob;
		}
		boolean alice_takes_first = false;
		boolean alice_takes_last = false;
		boolean bob_takes_first = false;
		boolean bob_takes_last = false;
		if (alice_turn) {
			alice_takes_first = function(start + 1,end,piles,alice + piles[start],bob,false);
			alice_takes_last = function(start,end - 1,piles,alice + piles[end],bob,false);
		} 
		else {
			bob_takes_first = function(start + 1,end,piles,alice,bob + piles[start],true);
			bob_takes_last = function(start,end - 1,piles,alice,bob + piles[end],true);
		}
		return alice_takes_first || alice_takes_last;
	}
	boolean stoneGame(int[] piles) {
		int n = piles.length;
		boolean flag = function(0,n - 1,piles,0,0,true);
		return flag;
	}
}