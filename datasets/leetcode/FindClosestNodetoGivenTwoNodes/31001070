class Solution {
	void DFS(int src, int[] edges, int[] distance, boolean[] visited, int i) {
		while (src != -1 && visited[src] != true) {
			distance[src] = i;
			visited[src] = true;
			DFS(edges[src],edges,distance,visited,++i);
		}
		return;
	}
	int closestMeetingNode(int[] edges, int node1, int node2) {
		int[] dist1 = new int[edges.length];
		int[] dist2 = new int[edges.length];
		Arrays.fill(dist1,-1);
		Arrays.fill(dist2,-1);
		boolean[] visited1 = new boolean[edges.length];
		boolean[] visited2 = new boolean[edges.length];
		DFS(node1,edges,dist1,visited1,0);
		DFS(node2,edges,dist2,visited2,0);
		int min = Integer.MAX_VALUE, index = -1;
		for (int i = 0; i < edges.length; i++) {
			if (dist1[i] == -1 || dist2[i] == -1) {
				continue;
			} 
			else if (min > Math.max(dist1[i],dist2[i])) {
				index = i;
				min = Math.max(dist1[i],dist2[i]);
			}
		}
		return index;
	}
}