class Solution {
	int min = Integer.MAX_VALUE;
	int convertCharToInt(char c) {
	}
	void dfs(ArrayList<ArrayList<Integer>> adj_list, int node, boolean[] vis) {
		min = Math.min(min,node);
		vis[node] = true;
		for (Integer neigh: adj_list.get(node)) {	
			if (vis[neigh]) {
				continue;
			}
			dfs(adj_list,neigh,vis);
		}
	}
	String smallestEquivalentString(String s1, String s2, String baseStr) {
		ArrayList<ArrayList<Integer>> adj_list = new ArrayList<>();
		for (int i = 0; i < 26; i++) {
			adj_list.add(new ArrayList<>());
		}
		for (int i = 0; i < s1.length(); i++) {
			int u = convertCharToInt(s1.charAt(i)), v = convertCharToInt(s2.charAt(i));
			adj_list.get(u).add(v);
			adj_list.get(v).add(u);
		}
		String out = "";
		int i = 0;
		int c = convertCharToInt(baseStr.charAt(i));
		min = Integer.MAX_VALUE;
		boolean[] vis = new boolean[26];
		dfs(adj_list,c,vis);
		char o;
	}
}