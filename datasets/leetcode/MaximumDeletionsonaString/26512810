class Solution {
	int deleteString(String s) {
		int len = s.length();
		Integer dp = new Integer[len];
		List<Integer> options = new ArrayList[len];
		for (int idx = 0; idx < len; idx++) {
			options[idx] = new ArrayList();
			String str = s.substring(idx);
			int lps = getLps(str);
			int lpsLen = lps.length;
			for (int currIdx = 0; currIdx < lpsLen; currIdx++) {
				if (lps[currIdx] > 0) {
					if (currIdx - 2 * lps[currIdx] + 1 == 0) {
						options[idx].add(lps[currIdx]);
					}
				}
			}
		}
		return deleteString(s,0,len,options,dp);
	}
	int deleteString(String str, int idx, int len, List<Integer> options, Integer dp) {
		if (idx == len) {
			return 0;
		}
		if (dp[idx] != null) {
			return dp[idx];
		}
		int maxOperations = 1;
		for (int length: options[idx]) {	
			int currOperations = deleteString(str,idx + length,len,options,dp);
			maxOperations = Math.max(maxOperations,currOperations + 1);
		}
		return dp[idx] = maxOperations;
	}
	int[] getLps(String str) {
		int strLen = str.length();
		int lps = new int[strLen];
		int idx = 1;
		int len = 0;
		while (idx < strLen) {
			if (str.charAt(idx) == str.charAt(len)) {
				len++;
				lps[idx] = len;
				idx++;
			} 
			else {
				if (len > 0) {
					len = lps[len - 1];
				} 
				else {
					lps[idx] = 0;
					idx++;
				}
			}
		}
		return lps;
	}
}