class Solution {
	ArrayList<ArrayList<Integer>> permuteUnique(int[] num) {
		if (num == null || num.length == 0) {
			return new ArrayList<>();
		}
		TreeSet<ArrayList<Integer>> set = new TreeSet<>(new Comparator<ArrayList<Integer>>());
		process(num,0,set);
		return new ArrayList<>(set);
	}
	void process(int[] num, int index, TreeSet<ArrayList<Integer>> set) {
		if (index == num.length) {
			ArrayList<Integer> list = new ArrayList<>();
			for (int i: num) {	
				list.add(i);
			}
			set.add(list);
			return;
		}
		for (int i = index; i < num.length; i++) {
			swap(num,index,i);
			process(num,index + 1,set);
			swap(num,index,i);
		}
	}
	void swap(int[] num, int i, int j) {
		int temp = num[i];
		num[i] = num[j];
		num[j] = temp;
	}
}