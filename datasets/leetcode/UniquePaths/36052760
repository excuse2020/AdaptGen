class Solution {
	int helper(int m, int n, int[][] dp) {
		if (m == 1 && n == 1) {
			return 1;
		}
		if (m < 1 || n < 1) {
			return 0;
		}
		if (dp[m][n] != -1) {
			return dp[m][n];
		}
		int count = 0;
		count += helper(m - 1,n,dp);
		count += helper(m,n - 1,dp);
		return dp[m][n] = count;
	}
	int uniquePaths(int m, int n) {
		int[][] dp = new int[m + 1][n + 1];
		for (int i = 0; i < dp.length; i++) {
			Arrays.fill(dp[i],-1);
		}
		return helper(m,n,dp);
	}
}