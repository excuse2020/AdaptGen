class Solution {
	int trap(int[] height) {
		int left = new int[height.length];
		left[0] = height[0];
		int right = new int[height.length];
		right[height.length - 1] = height[height.length - 1];
		int n = height.length;
		for (int i = 1; i < n; i++) {
			left[i] = Math.max(height[i],left[i - 1]);
		}
		for (int j = n - 2; j >= 0; j--) {
			right[j] = Math.max(height[j],right[j + 1]);
		}
		int ans = new int[n];
		int sum = 0;
		for (int k = 0; k < n; k++) {
			ans[k] = (Math.min(left[k],right[k]) - height[k]);
			sum = sum + ans[k];
		}
		return sum;
	}
}