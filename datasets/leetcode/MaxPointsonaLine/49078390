class Solution {
	int maxPoints(int[][] points) {
		int len = points.length;
		if (len < 3) {
			return len;
		}
		int maxPoints = 2;
		for (int i = 0; i < len - maxPoints + 1; ++i) {
			int[] pi = points[i];
			Map<Double, Integer> slopeCounts = new HashMap<>();
			for (int j = i + 1; j < len; ++j) {
				int[] pj = points[j];
				double slope = (pj[0] - pi[0]) / (double) (pj[1] - pi[1]);
				if (slope == Double.NEGATIVE_INFINITY) {
					slope = Double.POSITIVE_INFINITY;
				}
				if (slope == -0.0) {
					slope = 0.0;
				}
				int cnt = slopeCounts.merge(slope,1,) + 1;
				if (cnt > maxPoints) {
					maxPoints = cnt;
				}
			}
		}
		return maxPoints;
	}
}