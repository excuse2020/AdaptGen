class Solution {
	void bfs(int vertex, List<Integer> adjs, int[][] matrix) {
		Set<Integer> visited = new HashSet();
		LinkedList<Integer> queue = new LinkedList<Integer>();
		queue.offer(vertex);
		visited.add(vertex);
		while (!queue.isEmpty()) {
			int v = queue.poll();
			if (adjs[v] != null) {
				for (Integer adj: adjs[v]) {	
					if (!visited.contains(adj)) {
						matrix[vertex][adj] = 1;
						queue.offer(adj);
						visited.add(adj);
					}
				}
			}
		}
	}
	List<Boolean> checkIfPrerequisite(int n, int[][] prerequisites, int[][] queries) {
		List<Integer> adjs = new List[n];
		for (int[] pr: prerequisites) {	
			if (adjs[pr[0]] == null) {
				adjs[pr[0]] = new ArrayList<Integer>();
			}
			adjs[pr[0]].add(pr[1]);
		}
		int[][] matrix = new int[n][n];
		for (int i = 0; i < n; i++) {
			bfs(i,adjs,matrix);
		}
		List<Boolean> res = new ArrayList();
		for (int[] q: queries) {	
			res.add(matrix[q[0]][q[1]] == 1);
		}
		return res;
	}
}