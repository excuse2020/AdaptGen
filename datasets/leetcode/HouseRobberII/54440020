class Solution {
	int rob(int[] nums) {
		int n = nums.length;
		if (n == 1) {
			return nums[0];
		}
		int[] arr1 = new int[n - 1];
		int[] arr2 = new int[n - 1];
		for (int i = 1; i < n; i++) {
			arr1[i - 1] = nums[i];
		}
		for (int i = 0; i < n - 1; i++) {
			arr2[i] = nums[i];
		}
		int[] dp1 = new int[n - 1];
		Arrays.fill(dp1,-1);
		int ans1 = topdown(arr1,n - 2,dp1);
		int[] dp2 = new int[n - 1];
		Arrays.fill(dp2,-1);
		int ans2 = topdown(arr2,n - 2,dp2);
		return Math.max(ans1,ans2);
	}
	int topdown(int[] nums, int n, int dp) {
		if (n == 0) {
			return nums[n];
		}
		if (n < 0) {
			return 0;
		}
		if (dp[n] != -1) {
			return dp[n];
		}
		int pick = nums[n] + topdown(nums,n - 2,dp);
		int nonpick = 0 + topdown(nums,n - 1,dp);
		return dp[n] = Math.max(pick,nonpick);
	}
}