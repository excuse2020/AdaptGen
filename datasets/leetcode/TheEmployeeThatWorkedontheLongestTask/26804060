class Solution {
	int hardestWorker(int n, int[][] logs) {
		HashMap<Integer, Integer> hm = new HashMap<>();
		hm.put(logs[0][0],logs[0][1]);
		for (int i = 1; i < logs.length; i++) {
			if (hm.containsKey(logs[i][0])) {
				int value = hm.get(logs[i][0]);
				value = Math.max(value,Math.abs(logs[i][1] - logs[i - 1][1]));
				hm.put(logs[i][0],value);
			} 
			else {
				hm.put(logs[i][0],Math.abs(logs[i][1] - logs[i - 1][1]));
			}
		}
		int min = 0;
		for (Map.Entry<Integer, Integer> mapElement: hm.entrySet()) {	
			int value = (mapElement.getValue());
			min = Math.max(min,value);
		}
		int min1 = 9999999;
		for (Map.Entry<Integer, Integer> mapElement: hm.entrySet()) {	
			int value = (mapElement.getValue());
			if (min == value) {
				int key = (mapElement.getKey());
				min1 = Math.min(min1,key);
			}
		}
		return min1;
	}
}