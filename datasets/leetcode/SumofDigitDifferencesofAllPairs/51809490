class Solution {
	long sumDigitDifferences(int[] nums) {
		String s = String.valueOf(nums[0]);
		int n = s.length();
		long p = 0;
		for (int i = 0; i < n; i++) {
			HashMap<Integer, Integer> map = new HashMap<>();
			for (int j = 0; j < nums.length; j++) {
				int divisor = (int) Math.pow(10,i);
				int a = (nums[j] / divisor) % 10;
				if (map.containsKey(a)) {
					int l = map.get(a);
					map.put(a,l + 1);
				} 
				else {
					map.put(a,1);
				}
			}
			for (Map.Entry<Integer, Integer> entry1: map.entrySet()) {	
				for (Map.Entry<Integer, Integer> entry2: map.entrySet()) {	
					if (entry1.getKey() < entry2.getKey()) {
						p += entry1.getValue() * entry2.getValue();
					}
				}
			}
		}
		return p;
	}
}