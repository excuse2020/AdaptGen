class Solution {
	boolean FirstCondition(int[][] arr) {
		int n = arr.length;
		for (int i = 0; i < arr.length; i++) {
			if (arr[i][i] == 0 || arr[i][n - 1 - i] == 0) {
				return false;
			}
		}
		return true;
	}
	boolean checkXMatrix(int[][] grid) {
		if (FirstCondition(grid) == true && count0(grid) == true) {
			return true;
		}
		return false;
	}
	boolean count0(int[][] arr) {
		int n = arr.length;
		int count = 0;
		for (int i = 0; i < arr.length; i++) {
			for (int j = 0; j < arr.length; j++) {
				if (arr[i][j] == 0) {
					count++;
				}
			}
		}
		if (n % 2 == 0) {
			int totalNumber = n * n;
			int numberOfDiagonal = n * 2;
			int ans = totalNumber - numberOfDiagonal;
			if (count == ans) {
				return true;
			}
		} 
		else {
			int totalNumber = n * n;
			int numberOfDiagonal = n * 2 - 1;
			int ans = totalNumber - numberOfDiagonal;
			if (count == ans) {
				return true;
			}
		}
		return false;
	}
}