class Solution {
	int minSideJumps(int[] obstacles) {
		int n = obstacles.length;
		int[][] dp = new int[n + 1][4];
		for (int[] arr: dp) {	
			Arrays.fill(arr,-1);
		}
		return solve(0,2,n,obstacles,dp);
	}
	int solve(int i, int lane, int n, int[] obstacles, int[][] dp) {
		if ((i < n - 1 && obstacles[i] == lane) || (i > 0 && obstacles[i - 1] == lane)) {
			return 1000000;
		}
		if (i == n - 1) {
			return 0;
		}
		if (dp[i][lane] != -1) {
			return dp[i][lane];
		}
		int a = solve(i + 1,lane,n,obstacles,dp);
		int b = 0, c = 0;
		if (lane == 1) {
			b = 1 + solve(i + 1,2,n,obstacles,dp);
			c = 1 + solve(i + 1,3,n,obstacles,dp);
		} 
		else if (lane == 2) {
			b = 1 + solve(i + 1,1,n,obstacles,dp);
			c = 1 + solve(i + 1,3,n,obstacles,dp);
		} 
		else {
			b = 1 + solve(i + 1,1,n,obstacles,dp);
			c = 1 + solve(i + 1,2,n,obstacles,dp);
		}
		return dp[i][lane] = Math.min(a,Math.min(b,c));
	}
}