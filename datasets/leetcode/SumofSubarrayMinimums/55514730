class Solution {
	int[] findNSE(int[] arr) {
		int n = arr.length;
		int[] nse = new int[n];
		Stack<Integer> stack = new Stack<>();
		for (int i = n - 1; i >= 0; i--) {
			while (!stack.isEmpty() && arr[stack.peek()] >= arr[i]) {
				stack.pop();
			}
			nse[i] = stack.isEmpty() ? n : stack.peek();
			stack.push(i);
		}
		return nse;
	}
	int[] findPSE(int[] arr) {
		int n = arr.length;
		int[] pse = new int[n];
		Stack<Integer> stack = new Stack<>();
		for (int i = 0; i < n; i++) {
			while (!stack.isEmpty() && arr[stack.peek()] > arr[i]) {
				stack.pop();
			}
			pse[i] = stack.isEmpty() ? -1 : stack.peek();
			stack.push(i);
		}
		return pse;
	}
	int sumSubarrayMins(int[] arr) {
		int[] nse = findNSE(arr);
		int[] pse = findPSE(arr);
		long total = 0;
		int mod = 1000000007;
		for (int i = 0; i < arr.length; i++) {
			int left = i - pse[i];
			int right = nse[i] - i;
			total = (total + (right * left) % mod) % mod;
		}
		return (int) total;
	}
}