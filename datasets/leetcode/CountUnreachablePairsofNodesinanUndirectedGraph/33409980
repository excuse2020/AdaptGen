class Solution {
	int[] ranks;
	int[] sets;
	long countPairs(int n, int[][] edges) {
		sets = new int[n];
		ranks = new int[n];
		for (int i = 0; i < n; i++) {
			sets[i] = i;
		}
		for (int[] connection: edges) {	
			union(connection[0],connection[1]);
		}
		int[] counts = new int[n];
		for (int i = 0; i < n; i++) {
			counts[findSet(i)]++;
		}
		long pairs = 0;
		long sum = 0;
		for (int i = 0; i < n; i++) {
			int v = counts[i];
			pairs += sum * v;
			sum += v;
		}
		return pairs;
	}
	int findSet(int i) {
		if (sets[i] != i) {
			sets[i] = findSet(sets[i]);
		}
		return sets[i];
	}
	void link(int x, int y) {
		if (ranks[x] > ranks[y]) {
			sets[y] = x;
		} 
		else {
			sets[x] = y;
			if (ranks[x] == ranks[y]) {
				ranks[y]++;
			}
		}
	}
	void union(int x, int y) {
		link(findSet(x),findSet(y));
	}
}