class Solution {
	void inOrderTraversal(List list, TreeNode root) {
		if (root == null) {
			list.add(null);
			return;
		}
		inOrderTraversal(list,root.left);
		list.add(root.val);
		inOrderTraversal(list,root.right);
	}
	boolean isSameTree(TreeNode root1, TreeNode root2) {
		List listp1 = new ArrayList();
		List listq1 = new ArrayList();
		List listp2 = new ArrayList();
		List listq2 = new ArrayList();
		preOrderTraversal(listp1,root1);
		preOrderTraversal(listq1,root2);
		inOrderTraversal(listp2,root1);
		inOrderTraversal(listq2,root2);
		if (listp1.size() != listq1.size()) {
			return false;
		}
		for (int i = 0; i < listp1.size(); i++) {
			if (listp1.get(i) != listq1.get(i)) {
				return false;
			}
		}
		for (int i = 0; i < listp2.size(); i++) {
			if (listp2.get(i) != listq2.get(i)) {
				return false;
			}
		}
		return true;
	}
	void preOrderTraversal(List list, TreeNode root) {
		if (root == null) {
			list.add(null);
			return;
		}
		list.add(root.val);
		preOrderTraversal(list,root.left);
		preOrderTraversal(list,root.right);
	}
}