class Solution {
	int count = 1;
	void connections(int node, int par, ArrayList<ArrayList<Integer>> list, int[] vis, int[] a, int[] b, List<List<Integer>> lst) {
		a[node] = b[node] = count;
		vis[node] = 1;
		count++;
		for (int var: list.get(node)) {	
			if (var == par) {
				continue;
			}
			if (vis[var] == 0) {
				connections(var,node,list,vis,a,b,lst);
				a[node] = Math.min(a[node],a[var]);
				if (a[var] > b[node]) {
					lst.add(Arrays.asList(var,node));
				}
			} 
			else {
				a[node] = Math.min(a[var],a[node]);
			}
		}
	}
	List<List<Integer>> criticalConnections(int n, List<List<Integer>> connections) {
		ArrayList<ArrayList<Integer>> list = new ArrayList<ArrayList<Integer>>();
		for (int i = 0; i < n; i++) {
			list.add(new ArrayList<Integer>());
		}
		for (List<Integer> var: connections) {	
			list.get(var.get(0)).add(var.get(1));
			list.get(var.get(1)).add(var.get(0));
		}
		int[] vis = new int[n];
		int[] a = new int[n];
		int[] b = new int[n];
		List<List<Integer>> lst = new ArrayList<>();
		connections(0,-1,list,vis,a,b,lst);
		return lst;
	}
}