class Solution {
	ListNode merge(ListNode pHead1, ListNode pHead2) {
		if (pHead1 == null) {
			return pHead2;
		}
		if (pHead2 == null) {
			return pHead1;
		}
		ListNode head = new ListNode(0);
		ListNode cur = head;
		while (pHead1 != null && pHead2 != null) {
			if (pHead1.val < pHead2.val) {
				cur.next = pHead1;
				pHead1 = pHead1.next;
			} 
			else {
				cur.next = pHead2;
				pHead2 = pHead2.next;
			}
			cur = cur.next;
		}
		if (pHead1 != null) {
			cur.next = pHead1;
		} 
		else {
			cur.next = pHead2;
		}
		return head.next;
	}
	ListNode sortInList(ListNode head) {
		if (head == null || head.next == null) {
			return head;
		}
		ListNode right = head.next.next;
		ListNode mid = head.next;
		ListNode left = head;
		while (right != null && right.next != null) {
			right = right.next.next;
			mid = mid.next;
			left = left.next;
		}
		left.next = null;
		return merge(sortInList(head),sortInList(mid));
	}
}