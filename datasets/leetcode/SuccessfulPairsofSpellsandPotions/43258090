class Solution {
	int helper(int[] potions, long success, long spell) {
		int left = 0, right = potions.length - 1;
		int ans = 0;
		if (success < potions[left] * spell) {
			return potions.length;
		}
		if (success > potions[right] * spell) {
			return 0;
		}
		while (left < right && potions[left] < potions[right]) {
			int mid = (left + right) / 2;
			if (success == potions[left] * spell) {
				return potions.length - left;
			}
			if (success > potions[mid] * spell) {
				left = mid + 1;
			} 
			else {
				right = mid;
			}
		}
		if (potions[left] * spell == success) {
			return potions.length - left;
		}
		if (potions[left] * spell < success) {
			return 0;
		} 
		else {
			return potions.length - left;
		}
	}
	int[] successfulPairs(int[] spells, int[] potions, long success) {
		Arrays.sort(potions);
		int[] ans = new int[spells.length];
		for (int i = 0; i < spells.length; i++) {
			ans[i] = helper(potions,success,spells[i]);
		}
		return ans;
	}
}