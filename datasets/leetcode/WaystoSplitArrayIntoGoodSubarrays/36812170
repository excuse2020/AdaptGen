class Solution {
	int dp;
	int mod = (int) 1e9 + 7;
	int[] nums;
	int numberOfGoodSubarraySplits(int[] nums) {
		this.nums = nums;
		dp = new int[nums.length][2];
		for (int rows: dp) {	
			Arrays.fill(rows,-1);
		}
		return rec(0,0);
	}
	int rec(int idx, int flag) {
		if (idx == nums.length) {
			return flag;
		}
		if (dp[idx][flag] != -1) {
			return dp[idx][flag];
		}
		int _break = 0, not_break = 0;
		if (flag == 1) {
			if (nums[idx] == 1) {
				return 0;
			} 
			else {
				_break = rec(idx + 1,0);
				not_break = rec(idx + 1,1);
				dp[idx][flag] = (_break % mod + not_break % mod) % mod;
				return dp[idx][flag];
			}
		} 
		else {
			if (nums[idx] == 0) {
				not_break = rec(idx + 1,0);
				dp[idx][flag] = not_break % mod;
				return dp[idx][flag];
			} 
			else {
				_break = rec(idx + 1,0);
				not_break = rec(idx + 1,1);
				dp[idx][flag] = (_break % mod + not_break % mod) % mod;
				return dp[idx][flag];
			}
		}
	}
}