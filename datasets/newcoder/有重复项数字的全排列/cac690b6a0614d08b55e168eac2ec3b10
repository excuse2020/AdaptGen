class Solution {
	ArrayList<ArrayList<Integer>> res = new ArrayList<>();
	void find(int[] num, ArrayList<Integer> path, ArrayList<Integer> indexs) {
		if (path.size() == num.length) {
			if (!res.contains(new ArrayList<>(path))) {
				res.add(new ArrayList<>(path));
			}
			return;
		}
		for (int i = 0; i < num.length; i++) {
			if (path.size() <= num.length && !indexs.contains(i)) {
				path.add(num[i]);
				indexs.add(i);
				find(num,path,indexs);
				path.remove(path.size() - 1);
				indexs.remove(indexs.size() - 1);
			}
		}
	}
	ArrayList<ArrayList<Integer>> permuteUnique(int[] num) {
		Arrays.sort(num);
		find(num,new ArrayList<>(),new ArrayList<>());
		return res;
	}
}