class Solution {
	int[] edges;
	boolean loop1 = false;
	boolean loop2 = false;
	byte[] visited;
	int closestMeetingNode(int[] edges, int node1, int node2) {
		visited = new byte[edges.length];
		this.edges = edges;
		return dfs(node1,node2);
	}
	int dfs(int node1, int node2) {
		if (visited[node1] == 1 && !loop1) {
			loop1 = true;
			if (loop2) {
				return -1;
			} 
			else if (visited[node2] == 1) {
				return node2;
			} 
			else if (edges[node2] == -1) {
				return -1;
			}
			visited[node2] = 2;
			return dfs(node1,edges[node2]);
		} 
		else if (visited[node2] == 2 && !loop2) {
			loop2 = true;
			if (loop1) {
				return -1;
			} 
			else if (visited[node1] == 2) {
				return node2;
			} 
			else if (edges[node1] == -1) {
				return -1;
			}
			visited[node1] = 1;
			return dfs(edges[node1],node2);
		} 
		else if (visited[node1] == 2 && visited[node2] == 1) {
			return Math.min(node1,node2);
		} 
		else if (visited[node1] == 2) {
			return node1;
		} 
		else if (visited[node2] == 1) {
			return node2;
		} 
		else if (node1 == node2) {
			return node1;
		}
		if (edges[node1] == -1 && edges[node2] == -1) {
			return -1;
		}
		if (edges[node1] != -1) {
			visited[node1] = 1;
			node1 = edges[node1];
		}
		if (edges[node2] != -1) {
			visited[node2] = 2;
			node2 = edges[node2];
		}
		return dfs(node1,node2);
	}
}