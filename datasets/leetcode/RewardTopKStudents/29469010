class Solution {
	List<Integer> topStudents(String[] positive_feedback, String[] negative_feedback, String[] report, int[] student_id, int k) {
		HashSet<String> p = new HashSet<>();
		HashSet<String> n = new HashSet<>();
		for (String i: positive_feedback) {	
			p.add(i);
		}
		for (String i: negative_feedback) {	
			n.add(i);
		}
		HashMap<Integer, Integer> h = new HashMap<>();
		int max = Integer.MIN_VALUE;
		for (int i = 0; i < report.length; i++) {
			String a = report[i].split("\\\\s");
			int point = 0;
			for (int j = 0; j < a.length; j++) {
				if (p.contains(a[j])) {
					point += 3;
				} 
				else if (n.contains(a[j])) {
					point--;
				}
			}
			h.put(student_id[i],point);
		}
		PriorityQueue<Map.Entry<Integer, Integer>> pq = new PriorityQueue<>((a, b) -> {a.getValue() == b.getValue() ? b.getKey().compareTo(a.getKey()) : a.getValue() - b.getValue()});
		for (Map.Entry<Integer, Integer> entry: h.entrySet()) {	
			pq.offer(entry);
			if (pq.size() > k) {
				pq.poll();
			}
		}
		List<Integer> l = new ArrayList<>();
		while (!pq.isEmpty()) {
			l.add(0,pq.poll().getKey());
		}
		return l;
	}
}