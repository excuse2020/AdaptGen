class Solution {
	int count(int i, int j, int[][] grid, int[][] dp) {
		if (i >= grid.length || j >= grid[0].length) {
			return 999999;
		}
		if (i == grid.length - 1 && j == grid[0].length - 1) {
			return grid[i][j];
		}
		if (dp[i][j] != -1) {
			return dp[i][j];
		}
		int down = grid[i][j] + count(i + 1,j,grid,dp);
		int right = grid[i][j] + count(i,j + 1,grid,dp);
		dp[i][j] = Math.min(down,right);
		return dp[i][j];
	}
	int minPathSum(int[][] grid) {
		int[][] dp = new int[grid.length][grid[0].length];
		for (int[] cols: dp) {	
			Arrays.fill(cols,-1);
		}
		return count(0,0,grid,dp);
	}
}