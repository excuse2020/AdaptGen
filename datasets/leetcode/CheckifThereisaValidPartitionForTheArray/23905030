class Solution {
	boolean validPartition(int[] nums) {
		int[] dp = new int[nums.length];
		for (int i = 0; i < dp.length; i++) {
			dp[i] = -1;
		}
		return validPartitionDfs(nums,0,dp);
	}
	boolean validPartitionDfs(int[] nums, int startIndex, int[] dp) {
		if (startIndex >= nums.length) {
			return true;
		}
		if (dp[startIndex] != -1) {
			if (dp[startIndex] == 1) {
				return true;
			}
			return false;
		}
		if (startIndex + 1 < nums.length && nums[startIndex] == nums[startIndex + 1]) {
			if (validPartitionDfs(nums,startIndex + 2,dp)) {
				dp[startIndex] = 1;
				return true;
			}
		}
		if (startIndex + 2 < nums.length && nums[startIndex] == nums[startIndex + 1] && nums[startIndex + 1] == nums[startIndex + 2]) {
			if (validPartitionDfs(nums,startIndex + 3,dp)) {
				dp[startIndex] = 1;
				return true;
			}
		}
		if (startIndex + 2 < nums.length && nums[startIndex] + 1 == nums[startIndex + 1] && nums[startIndex + 1] + 1 == nums[startIndex + 2]) {
			if (validPartitionDfs(nums,startIndex + 3,dp)) {
				dp[startIndex] = 1;
				return true;
			}
		}
		dp[startIndex] = 0;
		return false;
	}
}