class Solution {
	List<List<Integer>> findPrimePairs(int n) {
		List<List<Integer>> list = new ArrayList<>();
		HashSet<Integer> set = new HashSet<>();
		List<Integer> temp = getPrimesUpTo(n);
		for (int i = 0; i < temp.size(); i++) {
			int num = temp.get(i);
			if (num + num == n) {
				List<Integer> l = new ArrayList<>();
				l.add(num);
				l.add(num);
				list.add(l);
			} 
			else if (set.contains(n - num)) {
				List<Integer> l = new ArrayList<>();
				if (num > n - num) {
					l.add(n - num);
					l.add(num);
				} 
				else {
					l.add(num);
					l.add(n - num);
				}
				list.add(l);
			}
			set.add(temp.get(i));
		}
		list.sort(Comparator.comparingInt((pair) -> {pair.get(0)}));
		return list;
	}
	List<Integer> getPrimesUpTo(int n) {
		List<Integer> primeNumbers = new ArrayList<>();
		if (n < 2) {
			return primeNumbers;
		}
		boolean[] isPrime = new boolean[n + 1];
		Arrays.fill(isPrime,true);
		isPrime[0] = false;
		isPrime[1] = false;
		for (int i = 2; i * i <= n; i++) {
			if (isPrime[i]) {
				for (int j = i * i; j <= n; j += i) {
					isPrime[j] = false;
				}
			}
		}
		for (int i = 2; i <= n; i++) {
			if (isPrime[i]) {
				primeNumbers.add(i);
			}
		}
		return primeNumbers;
	}
}