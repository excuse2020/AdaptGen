class Solution {
	int MOD = (int) 1e9 + 7;
	void dpInitializer(int[][][] dp) {
		for (int i = 0; i < dp.length; i++) {
			for (int j = 0; j < dp[0].length; j++) {
				for (int k = 0; k < dp[0][0].length; k++) {
					dp[i][j][k] = -1;
				}
			}
		}
	}
	int knightDialer(int n) {
		int matrix = new int[4][3];
		matrix[3][0] = -1;
		matrix[3][2] = -1;
		int dp = new int[4][3][n + 1];
		dpInitializer(dp);
		int result = 0;
		for (int placeX = 0; placeX < matrix.length; placeX++) {
			for (int placeY = 0; placeY < matrix[0].length; placeY++) {
				if (matrix[placeX][placeY] == -1) {
					continue;
				}
				result = (result + solver(matrix,placeX,placeY,n - 1,dp)) % MOD;
			}
		}
		return result;
	}
	int solver(int matrix, int x, int y, int target, int dp) {
		if (x >= matrix.length || x < 0 || y < 0 || y >= matrix[0].length) {
			return 0;
		}
		if (matrix[x][y] == -1) {
			return 0;
		}
		if (dp[x][y][target] != -1) {
			return dp[x][y][target];
		}
		if (target == 0) {
			return 1;
		}
		int numberOfWays = 0;
		int a = solver(matrix,x + 2,y - 1,target - 1,dp);
		int b = solver(matrix,x + 2,y + 1,target - 1,dp);
		int c = solver(matrix,x - 2,y - 1,target - 1,dp);
		int d = solver(matrix,x - 2,y + 1,target - 1,dp);
		int e = solver(matrix,x + 1,y - 2,target - 1,dp);
		int f = solver(matrix,x + 1,y + 2,target - 1,dp);
		int g = solver(matrix,x - 1,y - 2,target - 1,dp);
		int h = solver(matrix,x - 1,y + 2,target - 1,dp);
		numberOfWays = ((((((((a % MOD) + (b % MOD)) % MOD + (c % MOD)) % MOD + (d % MOD)) % MOD + (e % MOD)) % MOD + (f % MOD)) % MOD + (g % MOD)) % MOD + (h % MOD)) % MOD;
		dp[x][y][target] = numberOfWays;
		return dp[x][y][target];
	}
}