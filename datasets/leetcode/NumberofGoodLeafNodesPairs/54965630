class Solution {
	int countPairs(TreeNode root, int distance) {
		int[] result = new int[1];
		countPairsHelper(root,distance,result);
		return result[0];
	}
	int[] countPairsHelper(TreeNode node, int distance, int[] result) {
		if (node == null) {
			return new int[distance + 1];
		}
		if (node.left == null && node.right == null) {
			int[] leafDistances = new int[distance + 1];
			leafDistances[1] = 1;
			return leafDistances;
		}
		int[] leftDistances = countPairsHelper(node.left,distance,result);
		int[] rightDistances = countPairsHelper(node.right,distance,result);
		for (int i = 1; i <= distance; i++) {
			for (int j = 1; j <= distance - i; j++) {
				result[0] += leftDistances[i] * rightDistances[j];
			}
		}
		int[] currentDistances = new int[distance + 1];
		for (int i = 1; i < distance; i++) {
			currentDistances[i + 1] = leftDistances[i] + rightDistances[i];
		}
		return currentDistances;
	}
}