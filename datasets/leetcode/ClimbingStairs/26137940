class Solution {
	int climbStairs(int n) {
		return dpClimb(n,new int[n + 1]);
	}
	int climbStairs(int n) {
		int[] dp = new int[n + 1];
		dp[0] = 1;
		for (int i = 1; i <= n; i++) {
			if ((i - 2) >= 0) {
				dp[i] = dp[i - 1] + dp[i - 2];
			} 
			else {
				dp[i] = dp[i - 1];
			}
		}
		return dp[n];
	}
	int dpClimb(int n, int[] dp) {
		if (n == 0) {
			return 1;
		}
		if (n < 0) {
			return 0;
		}
		if (dp[n] != 0) {
			return dp[n];
		}
		int d1 = dpClimb(n - 1,dp);
		int d2 = dpClimb(n - 2,dp);
		int d = d1 + d2;
		dp[n] = d;
		return d;
	}
}