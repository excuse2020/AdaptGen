class Solution {
	boolean ans(List<List<Integer>> al, int n, boolean v, int i, int s) {
		Deque<Integer> q = new ArrayDeque();
		q.addLast(i);
		Set<Integer> hs = new HashSet<>();
		hs.add(i);
		while (q.size() != 0) {
			int curr = q.getFirst();
			q.removeFirst();
			v[curr] = true;
			for (int ele: al.get(curr)) {	
				if (v[ele] == false) {
					q.addLast(ele);
					v[ele] = true;
					hs.add(ele);
				}
			}
		}
		for (int k: hs) {	
			if (al.get(k).size() != hs.size() - 1) {
				return false;
			}
		}
		return true;
	}
	int countCompleteComponents(int n, int[][] edges) {
		List<List<Integer>> al = new ArrayList<>();
		for (int i = 0; i <= n; i++) {
			List<Integer> l = new ArrayList<>();
			al.add(l);
		}
		for (int i = 0; i < edges.length; i++) {
			al.get(edges[i][0]).add(edges[i][1]);
			al.get(edges[i][1]).add(edges[i][0]);
		}
		boolean v = new boolean[n];
		int c = 0;
		for (int i = 0; i < n; i++) {
			if (v[i] == false) {
				v[i] = true;
				boolean b = ans(al,n,v,i,al.get(i).size());
				System.out.println(b + " ");
				if (b) {
					c++;
				}
			}
		}
		return c;
	}
}