class Solution {
	List<List<Integer>> mergeSimilarItems(int[][] items1, int[][] items2) {
		List<List<Integer>> ans = new ArrayList<>();
		Arrays.sort(items1,(a, b) -> {Integer.compare(a[0],b[0])});
		Arrays.sort(items2,(a, b) -> {Integer.compare(a[0],b[0])});
		int i = 0;
		int j = 0;
		while (i < items1.length && j < items2.length) {
			if (items1[i][0] == items2[j][0]) {
				List<Integer> val = new ArrayList<>();
				int weights = items1[i][1] + items2[j][1];
				val.add(items1[i][0]);
				val.add(weights);
				ans.add(val);
				i++;
				j++;
			} 
			else if (items1[i][0] < items2[j][0]) {
				List<Integer> val = new ArrayList<>();
				val.add(items1[i][0]);
				val.add(items1[i][1]);
				ans.add(val);
				i++;
			} 
			else if (items1[i][0] > items2[j][0]) {
				List<Integer> val = new ArrayList<>();
				val.add(items2[j][0]);
				val.add(items2[j][1]);
				ans.add(val);
				j++;
			}
		}
		while (i < items1.length) {
			List<Integer> val = new ArrayList<>();
			val.add(items1[i][0]);
			val.add(items1[i][1]);
			ans.add(val);
			i++;
		}
		while (j < items2.length) {
			List<Integer> val = new ArrayList<>();
			val.add(items2[j][0]);
			val.add(items2[j][1]);
			ans.add(val);
			j++;
		}
		return ans;
	}
}