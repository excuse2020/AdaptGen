class Solution {
	int[][] dp = new int[2][50005];
	int score(int alice, int[] stoneValue, int ind) {
		int n = stoneValue.length;
		if (ind >= n) {
			return 0;
		}
		if (dp[alice][ind] != Integer.MIN_VALUE) {
			return dp[alice][ind];
		}
		int res = 0, i = 0, j = ind, sum = 0;
		res = alice == 1 ? Integer.MIN_VALUE : Integer.MAX_VALUE;
		for (i = 0; i < 3 && j + i < n; i++) {
			int recursive = score(1 - alice,stoneValue,j + i);
			sum += stoneValue[j + i];
			if (alice == 1) {
				res = Math.max(res,sum + recursive);
			} 
			else {
				res = Math.min(res,recursive);
			}
		}
		dp[alice][ind] = res;
		return res;
	}
	int scoreBob(int alice, int[] stoneValue, int ind) {
		int n = stoneValue.length;
		if (ind >= n) {
			return 0;
		}
		if (dp[alice][ind] != Integer.MIN_VALUE) {
			return dp[alice][ind];
		}
		int res = 0, i = 0, j = ind, sum = 0;
		res = alice == 1 ? Integer.MAX_VALUE : Integer.MIN_VALUE;
		for (i = 0; i < 3 && j + i < n; i++) {
			int recursive = scoreBob(1 - alice,stoneValue,j + i);
			sum += stoneValue[j + i];
			if (alice == 1) {
				res = Math.min(res,recursive);
			} 
			else {
				res = Math.max(res,sum + recursive);
			}
		}
		dp[alice][ind] = res;
		return res;
	}
	String stoneGameIII(int[] stoneValue) {
		for (int[] ar: dp) {	
			Arrays.fill(ar,Integer.MIN_VALUE);
		}
		int alice = score(1,stoneValue,0);
		for (int[] ar: dp) {	
			Arrays.fill(ar,Integer.MIN_VALUE);
		}
		int bob = scoreBob(1,stoneValue,0);
		return alice == bob ? "Tie" : (alice > bob ? "Alice" : "Bob");
	}
}