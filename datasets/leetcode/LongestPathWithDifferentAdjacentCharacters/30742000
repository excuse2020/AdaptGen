class Solution {
	List<Integer>[] children;
	int res = 1;
	int helper(int root, String s) {
		if (children[root].size() == 0) {
			return 1;
		}
		int max1 = 0;
		int max1Child = -1;
		int max2 = 0;
		int max2Child = -1;
		for (int child: children[root]) {	
			int childPathLen = helper(child,s);
			if (s.charAt(root) != s.charAt(child)) {
				if (childPathLen > max1) {
					max2 = max1;
					max2Child = max1Child;
					max1 = childPathLen;
					max1Child = child;
				} 
				else if (childPathLen > max2) {
					max2 = childPathLen;
					max2Child = child;
				}
			}
		}
		res = Math.max(max1 + max2,res);
		return Math.max(max1,max2) + 1;
	}
	int longestPath(int[] parent, String s) {
		int n = parent.length;
		children = new ArrayList[n];
		len = new int[n];
		for (int i = 0; i < n; i++) {
			children[i] = new ArrayList<>();
		}
		for (int i = 1; i < n; i++) {
			children[parent[i]].add(i);
		}
		helper(0,s);
		return res;
	}
}