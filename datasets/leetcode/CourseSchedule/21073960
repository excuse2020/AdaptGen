class Solution {
	boolean canFinish(int numCourses, int[][] prerequisites) {
		List<Integer>[] adj = new ArrayList[numCourses];
		for (int i = 0; i < numCourses; i++) {
			adj[i] = new ArrayList<>();
		}
		int indegree = new int[numCourses];
		for (int[] arr: prerequisites) {	
			adj[arr[0]].add(arr[1]);
			indegree[arr[1]]++;
		}
		Queue<Integer> q = new LinkedList<>();
		for (int i = 0; i < indegree.length; i++) {
			if (indegree[i] == 0) {
				q.offer(i);
			}
		}
		int count = 0;
		while (!q.isEmpty()) {
			int node = q.poll();
			count++;
			for (int x: adj[node]) {	
				indegree[x]--;
				if (indegree[x] == 0) {
					q.offer(x);
				}
			}
		}
		return count == numCourses;
	}
}