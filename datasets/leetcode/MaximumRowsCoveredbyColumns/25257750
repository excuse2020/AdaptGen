class Solution {
	int res = 0;
	void count(int[][] mat, Map<Integer, Integer> map) {
		int counter = 0;
		for (int i = 0; i < mat.length; i++) {
			boolean flag = false;
			for (int j = 0; j < mat[0].length; j++) {
				if (mat[i][j] == 1) {
					if (!map.containsKey(j)) {
						flag = true;
						break;
					}
				}
			}
			if (flag == false) {
				counter++;
			}
		}
		res = Math.max(res,counter);
	}
	void dfs(int[][] mat, Map<Integer, Integer> map, int i, int cols) {
		if (cols == 0) {
			count(mat,map);
			return;
		}
		if (i >= mat[0].length) {
			return;
		}
		map.put(i,0);
		dfs(mat,map,i + 1,cols - 1);
		map.remove(i);
		dfs(mat,map,i + 1,cols);
	}
	int maximumRows(int[][] mat, int cols) {
		for (int i = 0; i < mat[0].length - cols + 1; i++) {
			Map<Integer, Integer> map = new HashMap<>();
			map.put(i,0);
			dfs(mat,map,i + 1,cols - 1);
			map.remove(i);
		}
		return res;
	}
}