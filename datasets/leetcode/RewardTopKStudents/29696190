class Solution {
	List<Integer> topStudents(String[] positive_feedback, String[] negative_feedback, String[] report, int[] student_id, int k) {
		Set<String> positive = new HashSet<>(Arrays.stream(positive_feedback).toList());
		Set<String> negative = new HashSet<>(Arrays.stream(negative_feedback).toList());
		Map<Integer, Integer> map = new HashMap<>();
		for (int i = 0; i < report.length; i++) {
			String[] reports = report[i].split(" ");
			for (String s: reports) {	
				if (negative.contains(s)) {
					map.put(student_id[i],map.getOrDefault(student_id[i],0) - 1);
				}
			}
			for (String s: reports) {	
				if (positive.contains(s)) {
					map.put(student_id[i],map.getOrDefault(student_id[i],0) + 3);
				}
			}
		}
		for (int i: student_id) {	
			if (!map.containsKey(i)) {
				map.put(i,0);
			}
		}
		List<Student> students = new ArrayList<>();
		for (Map.Entry<Integer, Integer> entry: map.entrySet()) {	
			Student student = new Student();
			student.id = entry.getKey();
			student.point = entry.getValue();
			students.add(student);
		}
		Collections.sort(students);
		List<Integer> res = new ArrayList<>();
		for (int i = 0; i < k; i++) {
			res.add(students.get(i).id);
		}
		return res;
	}
	class Student {
		int id;
		int point;
		int compareTo(Student o) {
			if (o.point == point && o.id == id) {
				return 0;
			}
			if (o.point > point || (o.point == point && o.id < id)) {
				return 1;
			}
			return -1;
		}
	}
}