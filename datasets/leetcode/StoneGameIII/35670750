class Solution {
	int DFS(int i, int j, int[] stoneValue, int[] DP) {
		int bob = Integer.MIN_VALUE;
		if (DP[i] != Integer.MIN_VALUE) {
			return DP[i];
		}
		if (j + 1 < DP.length) {
			bob = Math.max(bob,DFS(j + 1,j + 1,stoneValue,DP));
		}
		if (j + 2 < DP.length) {
			bob = Math.max(bob,DFS(j + 1,j + 2,stoneValue,DP));
		}
		if (j + 3 < DP.length) {
			bob = Math.max(bob,DFS(j + 1,j + 3,stoneValue,DP));
		}
		int alice = 0;
		for (int k = i; k <= j; k++) {
			alice += stoneValue[k];
		}
		if (j + 1 < DP.length && bob != Integer.MIN_VALUE) {
			DP[j + 1] = bob;
		}
		return bob == Integer.MIN_VALUE ? alice : alice - bob;
	}
	String stoneGameIII(int[] stoneValue) {
		int DP = new int[stoneValue.length];
		for (int i = 0; i < DP.length; i++) {
			DP[i] = Integer.MIN_VALUE;
		}
		int ans = Integer.MIN_VALUE;
		ans = Math.max(ans,DFS(0,0,stoneValue,DP));
		if (stoneValue.length >= 2) {
			ans = Math.max(ans,DFS(0,1,stoneValue,DP));
		}
		if (stoneValue.length >= 3) {
			ans = Math.max(ans,DFS(0,2,stoneValue,DP));
		}
		if (ans == 0) {
			return "Tie";
		}
		return ans < 0 ? "Bob" : "Alice";
	}
}