class Solution {
	List<List<Integer>> getAncestors(int n, int[][] edges) {
		List<List<Integer>> result = new ArrayList<>();
		Map<Integer, List<Integer>> reverseGraph = new HashMap<>();
		for (int i = 0; i < n; i++) {
			reverseGraph.put(i,new ArrayList<>());
		}
		for (int[] edge: edges) {	
			int from = edge[0];
			int to = edge[1];
			reverseGraph.get(to).add(from);
		}
		boolean[] visited;
		Set<Integer> ancestors;
		Stack<Integer> stack;
		for (int i = 0; i < n; i++) {
			visited = new boolean[n];
			ancestors = new TreeSet<>();
			stack = new Stack<>();
			stack.push(i);
			while (!stack.isEmpty()) {
				int current = stack.pop();
				for (int neighbor: reverseGraph.get(current)) {	
					if (!visited[neighbor]) {
						visited[neighbor] = true;
						ancestors.add(neighbor);
						stack.push(neighbor);
					}
				}
			}
			result.add(new ArrayList<>(ancestors));
		}
		return result;
	}
}