class Solution {
	void backtrack(List<String> output, String current, int max, int open, int close) {
		if (current.length() == max * 2) {
			output.add(current);
			return;
		}
		if (open < max) {
			backtrack(output,current + "(",max,open + 1,close);
		}
		if (close < open) {
			backtrack(output,current + ")",max,open,close + 1);
		}
	}
	List<String> generateParenthesis(int n) {
		List<String> output = new ArrayList<>();
		backtrack(output,"",n,0,0);
		return output;
	}
}