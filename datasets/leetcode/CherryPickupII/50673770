class Solution {
	Integer[][][] memo;
	int cherryPickup(int[][] arr) {
		int n = arr.length;
		int m = arr[0].length;
		memo = new Integer[n][m][m];
		return (memoization(arr,0,0,m - 1,n,m));
	}
	int memoization(int[][] arr, int i, int j1, int j2, int n, int m) {
		if (j1 < 0 || j2 < 0 || j1 >= m || j2 >= m) {
			return 0;
		}
		if (i == n) {
			return 0;
		}
		if (memo[i][j1][j2] != null) {
			return memo[i][j1][j2];
		}
		int ans = 0;
		ans += arr[i][j1];
		ans += arr[i][j2];
		int res = 0;
		for (int x = j1 - 1; x <= j1 + 1; x++) {
			for (int y = j2 - 1; y <= j2 + 1; y++) {
				if (x < y) {
					res = Math.max(res,memoization(arr,i + 1,x,y,n,m));
				}
			}
		}
		ans += res;
		return memo[i][j1][j2] = ans;
	}
}