class Solution {
	int minimumCost(int m, int n, int[] horizontalCut, int[] verticalCut) {
		PriorityQueue<Integer> pq1 = new PriorityQueue<>(Collections.reverseOrder());
		PriorityQueue<Integer> pq2 = new PriorityQueue<>(Collections.reverseOrder());
		for (int h: horizontalCut) {	
			pq1.add(h);
		}
		for (int h: verticalCut) {	
			pq2.add(h);
		}
		int cost = 0;
		int hp = 1;
		int vp = 1;
		while (!pq1.isEmpty() || !pq2.isEmpty()) {
			if (!pq1.isEmpty() && (pq2.isEmpty() || pq1.peek() >= pq2.peek())) {
				cost += pq1.poll() * vp;
				hp++;
			} 
			else {
				cost += pq2.poll() * hp;
				vp++;
			}
		}
		return cost;
	}
}