class Solution {
	int ans = 0;
	Map<Integer, List<Integer>> map = new HashMap<>();
	int minTime(int n, int[][] edges, List<Boolean> hasApple) {
		for (int i = 0; i < n; i++) {
			map.put(i,new ArrayList<>());
		}
		for (int[] edge: edges) {	
			map.get(edge[0]).add(edge[1]);
			map.get(edge[1]).add(edge[0]);
		}
		System.out.println(map);
		solve(n,0,hasApple,-1);
		return ans;
	}
	boolean solve(int n, int root, List<Boolean> hasApple, int parent) {
		boolean flag = false;
		for (int node: map.get(root)) {	
			if (node == parent) {
				continue;
			}
			if (solve(n,node,hasApple,root)) {
				ans += 2;
				flag |= true;
			}
		}
		return flag | hasApple.get(root);
	}
}