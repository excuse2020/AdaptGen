class Solution {
	int dfs(int r, int c, int rows, int cols, int[][] grid) {
		if (r < 0 || c < 0 || r >= rows || c >= cols || grid[r][c] == 0) {
			return 0;
		}
		int temp = grid[r][c];
		grid[r][c] = 0;
		int res = 0;
		res = Math.max(res,temp + dfs(r - 1,c,rows,cols,grid));
		res = Math.max(res,temp + dfs(r + 1,c,rows,cols,grid));
		res = Math.max(res,temp + dfs(r,c - 1,rows,cols,grid));
		res = Math.max(res,temp + dfs(r,c + 1,rows,cols,grid));
		grid[r][c] = temp;
		return res;
	}
	int getMaximumGold(int[][] grid) {
		int rows = grid.length;
		int cols = grid[0].length;
		int res = 0;
		for (int i = 0; i < rows; i++) {
			for (int j = 0; j < cols; j++) {
				res = Math.max(res,dfs(i,j,rows,cols,grid));
			}
		}
		return res;
	}
}