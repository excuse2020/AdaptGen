class Solution {
	ArrayList<Integer> first = new ArrayList<>();
	ArrayList<Integer> middle = new ArrayList<>();
	ArrayList<Integer> then = new ArrayList<>();
	void firstOrder(TreeNode root) {
		if (root == null) {
			return;
		}
		first.add(root.val);
		firstOrder(root.left);
		firstOrder(root.right);
	}
	void middleOrder(TreeNode root) {
		if (root == null) {
			return;
		}
		middleOrder(root.left);
		middle.add(root.val);
		middleOrder(root.right);
	}
	void thenOrder(TreeNode root) {
		if (root == null) {
			return;
		}
		thenOrder(root.left);
		thenOrder(root.right);
		then.add(root.val);
	}
	int[][] threeOrders(TreeNode root) {
		firstOrder(root);
		middleOrder(root);
		thenOrder(root);
		int[][] result = new int[3][first.size()];
		result[0] = toIntArray(first);
		result[1] = toIntArray(middle);
		result[2] = toIntArray(then);
		return result;
	}
	int[] toIntArray(ArrayList<Integer> list) {
		if (list == null || list.size() < 1) {
			return new int[0];
		}
		int[] result = new int[list.size()];
		for (int i = 0; i < list.size(); i++) {
			result[i] = list.get(i);
		}
		return result;
	}
}