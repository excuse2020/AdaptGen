class Solution {
	int dfs(int i, int c, int[][] dp, String s, int k) {
		if (dp[i][c] != -1) {
			return dp[i][c];
		}
		dp[i][c] = 0;
		boolean match;
	}
	int longestIdealString(String s, int k) {
		int N = s.length();
		int[][] dp = new int[N][26];
		for (int i = 0; i < N; i++) {
			Arrays.fill(dp[i],-1);
		}
		int res = 0;
		for (int c = 0; c < 26; c++) {
			res = Math.max(res,dfs(N - 1,c,dp,s,k));
		}
		return res;
	}
}