class Solution {
	int findInMountainArray(int target, MountainArray mountainArr) {
		int peak = search(mountainArr);
		int ans = orderagnosticSearch(mountainArr,target,0,peak);
		if (ans != -1) {
			return ans;
		}
		return orderagnosticSearch(mountainArr,target,peak + 1,mountainArr.length() - 1);
	}
	int orderagnosticSearch(MountainArray nums, int target, int start, int end) {
		boolean isasc = nums.get(start) < nums.get(end);
		while (start <= end) {
			int mid = start + (end - start) / 2;
			if (nums.get(mid) == target) {
				return mid;
			}
			if (isasc) {
				if (nums.get(mid) > target) {
					end = mid - 1;
				} 
				else {
					start = mid + 1;
				}
			} 
			else {
				if (nums.get(mid) > target) {
					start = mid + 1;
				} 
				else {
					end = mid - 1;
				}
			}
		}
		return -1;
	}
	int search(MountainArray arr) {
		int start = 0;
		int end = arr.length() - 1;
		while (start < end) {
			int mid = start + (end - start) / 2;
			if (arr.get(mid) > arr.get(mid + 1)) {
				end = mid;
			} 
			else {
				start = mid + 1;
			}
		}
		return start;
	}
}