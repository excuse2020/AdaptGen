class Solution {
	TreeNode buildBinaryTree(int[] inorder, int is, int ie, int[] postorder, int ps, int pe, HashMap<Integer, Integer> map) {
		if (ps > pe || is > ie) {
			return null;
		}
		TreeNode root = new TreeNode(postorder[pe]);
		int inRoot = map.get(postorder[pe]);
		int numsLeft = inRoot - is;
		root.left = buildBinaryTree(inorder,is,inRoot - 1,postorder,ps,ps + numsLeft - 1,map);
		root.right = buildBinaryTree(inorder,inRoot + 1,ie,postorder,ps + numsLeft,pe - 1,map);
		return root;
	}
	TreeNode buildTree(int[] inorder, int[] postorder) {
		if (inorder.length != postorder.length) {
			return null;
		}
		HashMap<Integer, Integer> map = new HashMap<>();
		for (int i = 0; i < inorder.length; i++) {
			map.put(inorder[i],i);
		}
		return buildBinaryTree(inorder,0,inorder.length - 1,postorder,0,postorder.length - 1,map);
	}
}