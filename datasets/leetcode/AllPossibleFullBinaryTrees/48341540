class Solution {
	Map<Integer, List<TreeNode>> mp = new HashMap<Integer, List<TreeNode>>();
	List<TreeNode> allPossibleFBT(int n) {
		List<TreeNode> ans = new ArrayList();
		if (n % 2 == 0) {
			return ans;
		}
		if (n == 1) {
			TreeNode t = new TreeNode(0);
			ans.add(t);
			return ans;
		}
		if (mp.containsKey(n)) {
			return mp.get(n);
		}
		for (int i = 1; i < n; i += 2) {
			List<TreeNode> left = allPossibleFBT(i);
			List<TreeNode> right = allPossibleFBT(n - i);
			for (TreeNode l: left) {	
				for (TreeNode r: right) {	
					TreeNode newObj = new TreeNode(0);
					newObj.left = l;
					newObj.right = r;
					ans.add(newObj);
				}
			}
		}
		mp.put(n,ans);
		return ans;
	}
}