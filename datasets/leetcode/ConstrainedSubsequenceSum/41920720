class Solution {
	int constrainedSubsetSum(int[] nums, int k) {
		int ans = nums[0];
		Deque<Integer> dq = new ArrayDeque<>();
		for (int i = 0; i < nums.length; i++) {
			nums[i] += dq.size() > 0 ? dq.peek() : 0;
			ans = Math.max(ans,nums[i]);
			while (dq.size() > 0 && dq.peekLast() < nums[i]) {
				dq.pollLast();
			}
			if (nums[i] > 0) {
				dq.add(nums[i]);
			}
			if (i >= k && dq.size() > 0 && nums[i - k] == dq.peek()) {
				dq.poll();
			}
		}
		return ans;
	}
}