class Solution {
	int GetMinKey(LinkedHashMap<Integer, Integer> keyToFreq) {
		int minCount = Integer.MAX_VALUE;
		int key = 0;
		for (Map.Entry<Integer, Integer> entry: keyToFreq.entrySet()) {	
			if (entry.getValue() < minCount) {
				minCount = entry.getValue();
				key = entry.getKey();
			}
		}
		return key;
	}
	int[] LFU(int[][] operators, int k) {
		LinkedHashMap<Integer, Integer> map = new LinkedHashMap<Integer, Integer>();
		LinkedHashMap<Integer, Integer> keyToFreq = new LinkedHashMap<Integer, Integer>();
		ArrayList<Integer> list = new ArrayList<>();
		for (int i = 0; i < operators.length; i++) {
			int operator = operators[i][0];
			int key = operators[i][1];
			if (operator == 1) {
				if (map.containsKey(key)) {
					map.put(key,operators[i][2]);
					keyToFreq.put(key,keyToFreq.get(key) + 1);
				} 
				else {
					if (map.size() == k) {
						int removekey = GetMinKey(keyToFreq);
						map.remove(removekey);
						keyToFreq.remove(removekey);
					}
					map.put(key,operators[i][2]);
					keyToFreq.put(key,keyToFreq.getOrDefault(key,0) + 1);
				}
			} 
			else if (operator == 2) {
				if (map.containsKey(key)) {
					int val = map.get(key);
					keyToFreq.put(key,keyToFreq.get(key) + 1);
					list.add(val);
				} 
				else {
					list.add(-1);
				}
			}
		}
		int[] res = new int[list.size()];
		for (int i = 0; i < list.size(); i++) {
			res[i] = list.get(i);
		}
		return res;
	}
}