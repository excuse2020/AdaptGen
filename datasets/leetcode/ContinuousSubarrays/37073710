class Solution {
	Deque<Integer> maxQ;
	Deque<Integer> minQ;
	long continuousSubarrays(int[] nums) {
		minQ = new ArrayDeque<>();
		maxQ = new ArrayDeque<>();
		int l = 0;
		int r = 0;
		long ans = 0;
		int n = nums.length;
		while (r < n) {
			while (maxQ.size() > 0 && maxQ.peekLast() < nums[r]) {
				maxQ.removeLast();
			}
			while (minQ.size() > 0 && minQ.peekLast() > nums[r]) {
				minQ.removeLast();
			}
			maxQ.addLast(nums[r]);
			minQ.addLast(nums[r]);
			while (getMaxInSubarray() - getMinInSubarray() > 2) {
				if (maxQ.size() > 0 && maxQ.peekFirst() == nums[l]) {
					maxQ.removeFirst();
				}
				if (minQ.size() > 0 && minQ.peekFirst() == nums[l]) {
					minQ.removeFirst();
				}
				l++;
			}
			ans += r - l + 1;
			r++;
		}
		return ans;
	}
	int getMaxInSubarray() {
		return maxQ.size() == 0 ? -1 : maxQ.peekFirst();
	}
	int getMinInSubarray() {
		return minQ.size() == 0 ? -1 : minQ.peekFirst();
	}
}