class Solution {
	int bs(int low, int high, int[] arr, int t) {
		while (low <= high) {
			int mid = low + (high - low) / 2;
			if (arr[mid] <= t) {
				low = mid + 1;
			} 
			else {
				high = mid - 1;
			}
		}
		return low;
	}
	int getCount(int prev, int idx, int[] arr1, int[] arr2, Map<String, Integer> cache) {
		if (idx == arr1.length) {
			return 0;
		}
		String key = prev + ":";
		if (cache.containsKey(key)) {
			return cache.get(key);
		}
		int count = Integer.MAX_VALUE;
		if (prev >= arr1[idx]) {
			int val = bs(0,arr2.length - 1,arr2,prev);
			if (val != arr2.length) {
				int curr = getCount(arr2[val],idx + 1,arr1,arr2,cache);
				if (curr != Integer.MAX_VALUE) {
					count = Math.min(count,curr + 1);
				}
			}
		} 
		else {
			count = getCount(arr1[idx],idx + 1,arr1,arr2,cache);
			int val = bs(0,arr2.length - 1,arr2,prev);
			if (val != arr2.length) {
				int curr = getCount(arr2[val],idx + 1,arr1,arr2,cache);
				if (curr != Integer.MAX_VALUE) {
					count = Math.min(count,curr + 1);
				}
			}
		}
		cache.put(key,count);
		return count;
	}
	int makeArrayIncreasing(int[] arr1, int[] arr2) {
		Arrays.sort(arr2);
		int res = getCount(-1,0,arr1,arr2,new HashMap<>());
		return res == Integer.MAX_VALUE ? -1 : res;
	}
}