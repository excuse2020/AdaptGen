class Solution {
	Long dp;
	int max = (int) Math.pow(10,9) + 7;
	int countHousePlacements(int n) {
		dp = new Long[n + 1][2];
		long ans = countHousePlacements(n,0) + countHousePlacements(n,1);
		return (int) ((ans * ans) % max);
	}
	long countHousePlacements(int n, int canPlaceHouse) {
		if (n == 1) {
			return 1;
		}
		if (dp[n][canPlaceHouse] != null) {
			return dp[n][canPlaceHouse];
		}
		long ways = 0;
		if (canPlaceHouse == 0) {
			ways = countHousePlacements(n - 1,1) % max + countHousePlacements(n - 1,0) % max;
		} 
		else {
			ways = countHousePlacements(n - 1,0) % max;
		}
		return dp[n][canPlaceHouse] = ways;
	}
}