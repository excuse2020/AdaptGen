class Solution {
	int binarySearch(ArrayList<Integer> sw, int target) {
		int l = 0;
		int r = sw.size() - 1;
		while (l < r) {
			int mid = l + ((r - l) >> 1);
			if (sw.get(mid) < target) {
				l = mid + 1;
			} 
			else if (sw.get(mid) > target) {
				r = mid - 1;
			} 
			else {
				return mid;
			}
		}
		return sw.get(l) > target ? l : l + 1;
	}
	ArrayList<Double> slidewindow(ArrayList<Integer> nums, int k) {
		if (null == nums || nums.size() < 1 || nums.size() < k || k == 0) {
			return new ArrayList<Double>();
		}
		ArrayList<Double> ans = new ArrayList<>();
		if (k == 1) {
			for (int num: nums) {	
				ans.add((double) num);
			}
			return ans;
		}
		ArrayList<Integer> sw = new ArrayList<>();
		for (int i = 0; i < nums.size(); i++) {
			if (sw.size() == 0) {
				sw.add(nums.get(i));
				continue;
			}
			int insertIndex = binarySearch(sw,nums.get(i));
			sw.add(insertIndex,nums.get(i));
			if (sw.size() > k) {
				sw.remove(Integer.valueOf(nums.get(i - k)));
			}
			if (sw.size() == k) {
				if (k % 2 == 0) {
					int p1 = sw.size() / 2 - 1;
					int p2 = sw.size() / 2;
					int val1 = sw.get(p1);
					int val2 = sw.get(p2);
					ans.add(val1 + ((double) val2 - val1) / 2);
				} 
				else {
					int p = sw.size() / 2;
					ans.add((double) sw.get(p));
				}
			}
		}
		return ans;
	}
}