class Solution {
	long maximumSubarraySum(int[] nums, int k) {
		int left = 0, right = 0;
		int windowSize = 0;
		long currSum = 0, finalSum = 0;
		HashSet<Integer> set = new HashSet<>();
		for (left = 0; left < nums.length; left++) {
			while (right < nums.length && !set.contains(nums[right]) && set.size() != k) {
				set.add(nums[right]);
				currSum += nums[right];
				right++;
			}
			if (set.size() == k) {
				finalSum = Math.max(finalSum,currSum);
			}
			set.remove(nums[left]);
			currSum -= nums[left];
		}
		return finalSum;
	}
}