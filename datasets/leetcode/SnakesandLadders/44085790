class Solution {
	int[] getRowandCol(int num, int s) {
		int row = (s - 1) - ((num - 1) / s);
		int col = (num - 1) % s;
		if ((row % 2 == 0 && s % 2 == 0) || (row % 2 == 1 && s % 2 == 1)) {
			col = (s - 1) - col;
		}
		int[] ans = new int[2];
		ans[0] = row;
		ans[1] = col;
		return ans;
	}
	int snakesAndLadders(int[][] board) {
		int n = board.length;
		Queue<Integer> q = new LinkedList<>();
		Set<Integer> set = new HashSet<Integer>();
		q.add(1);
		set.add(1);
		int steps = 0;
		while (!q.isEmpty()) {
			int sz = q.size();
			for (int i = 0; i < sz; i++) {
				int p = q.poll();
				if (p == n * n) {
					return steps;
				}
				for (int k = 1; k <= 6; k++) {
					if (set.contains(p + k)) {
						continue;
					}
					if (p + k > n * n) {
						continue;
					}
					set.add(p + k);
					int[] dir = getRowandCol(p + k,n);
					int row = dir[0];
					int col = dir[1];
					if (board[row][col] == -1) {
						q.add(p + k);
					} 
					else {
						q.add(board[row][col]);
					}
				}
			}
			steps++;
		}
		return -1;
	}
}