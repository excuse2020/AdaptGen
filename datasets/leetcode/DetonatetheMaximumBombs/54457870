class Solution {
	int count(boolean[] visited) {
		int l = 0;
		for (int i = 0; i < visited.length; i++) {
			if (visited[i] == true) {
				l++;
			}
		}
		return l;
	}
	void dfs(int i, boolean[] visited, int[][] bombs) {
		for (int j = 0; j < bombs.length; j++) {
			if (j != i && !visited[j] && distance(bombs[j][0],bombs[j][1],bombs[i][0],bombs[i][1]) <= bombs[i][2]) {
				System.out.println(distance(bombs[j][0],bombs[j][1],bombs[i][0],bombs[i][1]));
				visited[j] = true;
				dfs(j,visited,bombs);
			}
		}
	}
	double distance(int x1, int y1, int x2, int y2) {
		return Math.sqrt(Math.pow((x2 - x1),2) + Math.pow((y2 - y1),2));
	}
	int maximumDetonation(int[][] bombs) {
		int count1 = Integer.MIN_VALUE;
		boolean[] visited = new boolean[bombs.length];
		for (int i = 0; i < bombs.length; i++) {
			Arrays.fill(visited,false);
			visited[i] = true;
			dfs(i,visited,bombs);
			count1 = Math.max(count1,count(visited));
		}
		return count1;
	}
}