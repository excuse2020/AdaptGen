class Solution {
	int cherryPickup(int[][] grid) {
		int rows = grid.length;
		int cols = grid[0].length;
		int[][][] dp = new int[rows][cols][cols];
		for (int c1 = 0; c1 < cols; c1++) {
			for (int c2 = 0; c2 < cols; c2++) {
				if (c1 == c2) {
					dp[rows - 1][c1][c2] = grid[rows - 1][c1];
				} 
				else {
					dp[rows - 1][c1][c2] = grid[rows - 1][c1] + grid[rows - 1][c2];
				}
			}
		}
		for (int row = rows - 2; row >= 0; row--) {
			for (int c1 = 0; c1 < cols; c1++) {
				for (int c2 = 0; c2 < cols; c2++) {
					int result = 0;
					for (int d1 = -1; d1 <= 1; d1++) {
						for (int d2 = -1; d2 <= 1; d2++) {
							int nc1 = c1 + d1;
							int nc2 = c2 + d2;
							if (nc1 >= 0 && nc1 < cols && nc2 >= 0 && nc2 < cols) {
								result = Math.max(result,dp[row + 1][nc1][nc2]);
							}
						}
					}
					if (c1 == c2) {
						result += grid[row][c1];
					} 
					else {
						result += grid[row][c1] + grid[row][c2];
					}
					dp[row][c1][c2] = result;
				}
			}
		}
		return dp[0][0][cols - 1];
	}
}