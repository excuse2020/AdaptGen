class Solution {
	ListNode getFirstMid(ListNode head) {
		ListNode slow = head, fast = head;
		while (fast != null && fast.next != null && fast.next.next != null) {
			slow = slow.next;
			fast = fast.next.next;
		}
		return slow;
	}
	boolean isPalindrome(ListNode head) {
		if (head == null || head.next == null) {
			return true;
		}
		ListNode mid = getFirstMid(head);
		mid.next = reverse(mid.next);
		ListNode t1 = head, t2 = mid.next;
		while (t1 != null && t2 != null) {
			if (t1.val != t2.val) {
				return false;
			}
			t1 = t1.next;
			t2 = t2.next;
		}
		return true;
	}
	ListNode reverse(ListNode head) {
		ListNode prev = null, curr = head;
		while (curr != null) {
			ListNode temp = curr.next;
			curr.next = prev;
			prev = curr;
			curr = temp;
		}
		return prev;
	}
}