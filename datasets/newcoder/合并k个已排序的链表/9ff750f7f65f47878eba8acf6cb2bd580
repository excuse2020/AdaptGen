class Solution {
	ListNode Merge(ListNode list1, ListNode list2) {
		ListNode result = null;
		List<Integer> middle = new ArrayList<Integer>();
		while (list1 != null || list2 != null) {
			if (list1 == null) {
				middle.add(list2.val);
				list2 = list2.next;
				continue;
			}
			if (list2 == null) {
				middle.add(list1.val);
				list1 = list1.next;
				continue;
			}
			if (list1.val > list2.val) {
				middle.add(list2.val);
				list2 = list2.next;
				continue;
			}
			middle.add(list1.val);
			list1 = list1.next;
		}
		if (middle.isEmpty()) {
			return result;
		}
		result = new ListNode(middle.get(0));
		ListNode s = result;
		for (int i = 1; i < middle.size(); i++) {
			s.next = new ListNode(middle.get(i));
			s = s.next;
		}
		return result;
	}
	ListNode mergeKLists(ArrayList<ListNode> lists) {
		if (lists == null || lists.isEmpty()) {
			return null;
		}
		ListNode list1 = lists.get(0);
		for (int i = 1; i < lists.size(); i++) {
			ListNode list2 = lists.get(i);
			list1 = Merge(list1,list2);
		}
		return list1;
	}
}