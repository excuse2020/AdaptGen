class Solution {
	int maxLevel = 0;
	void fillLevelNodes(int level, TreeNode root, Map<Integer, HashSet<Integer>> levelVsNodes) {
		if (root == null) {
			return;
		}
		maxLevel = Math.max(level,maxLevel);
		if (!levelVsNodes.containsKey(level)) {
			levelVsNodes.put(level,new HashSet<>());
		}
		levelVsNodes.get(level).add(root.val);
		fillLevelNodes(level + 1,root.left,levelVsNodes);
		fillLevelNodes(level + 1,root.right,levelVsNodes);
	}
	TreeNode lcaDeepestLeaves(TreeNode root) {
		Map<Integer, HashSet<Integer>> levelVsNodes = new HashMap<>();
		fillLevelNodes(0,root,levelVsNodes);
		return lcaDeepestLeaves(root,levelVsNodes.get(maxLevel));
	}
	TreeNode lcaDeepestLeaves(TreeNode root, HashSet<Integer> deepestNodes) {
		if (root == null) {
			return root;
		}
		if (deepestNodes.contains(root.val)) {
			return root;
		}
		TreeNode left = lcaDeepestLeaves(root.left,deepestNodes);
		TreeNode right = lcaDeepestLeaves(root.right,deepestNodes);
		if (left != null && right != null) {
			return root;
		}
		return left != null ? left : right;
	}
}