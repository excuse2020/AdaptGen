class Solution {
	int numBusesToDestination(int[][] routes, int source, int target) {
		int n = routes.length;
		Map<Integer, List<Integer>> map = new HashMap<>();
		for (int i = 0; i < routes.length; i++) {
			for (int j = 0; j < routes[i].length; j++) {
				map.putIfAbsent(routes[i][j],new ArrayList<>());
				map.get(routes[i][j]).add(i);
			}
		}
		Queue<Integer> queue = new ArrayDeque<>();
		Set<Integer> visited = new HashSet<>();
		queue.offer(source);
		int busses = 0;
		while (!queue.isEmpty()) {
			int size = queue.size();
			for (int i = 0; i < size; i++) {
				int poll = queue.poll();
				if (poll == target) {
					return busses;
				}
				List<Integer> indexes = map.getOrDefault(poll,new ArrayList<>());
				for (int index: indexes) {	
					if (visited.contains(index)) {
						continue;
					}
					for (int j = 0; j < routes[index].length; j++) {
						queue.offer(routes[index][j]);
					}
					visited.add(index);
				}
			}
			busses++;
		}
		return -1;
	}
}