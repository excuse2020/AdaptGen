class Solution {
	int max = 0;
	int maximalSquare(char[][] matrix) {
		int m = matrix.length;
		int n = matrix[0].length;
		int[][] dp = new int[m][n];
		for (int i = 0; i < m; i++) {
			Arrays.fill(dp[i],-1);
		}
		solve(matrix,0,0,dp);
		return max * max;
	}
	int solve(char[][] matrix, int i, int j) {
		if (i >= matrix.length || j >= matrix[0].length) {
			return 0;
		}
		int left = solve(matrix,i,j + 1);
		int diagonal = solve(matrix,i + 1,j + 1);
		int right = solve(matrix,i + 1,j);
		int ans = 0;
	}
	int solve(char[][] matrix, int i, int j, int[][] dp) {
		if (i >= matrix.length || j >= matrix[0].length) {
			return 0;
		}
		if (dp[i][j] != -1) {
			return dp[i][j];
		}
		int left = solve(matrix,i,j + 1,dp);
		int diagonal = solve(matrix,i + 1,j + 1,dp);
		int right = solve(matrix,i + 1,j,dp);
		int ans = 0;
	}
	void solveTab(char[][] matrix) {
		int m = matrix.length;
		int n = matrix[0].length;
		int[][] dp = new int[m + 1][n + 1];
		int i = 0;
		int j = 0;
		dp[i][j] = 0;
	}
}