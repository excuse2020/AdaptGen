class Solution {
	int getLengthOfOptimalCompression(String s, int k) {
		char ch = Character.MIN_VALUE;
		int result = getLengthOfOptimalCompression(s,0,k,ch,0,new HashMap<>());
		return result == -1 ? 0 : result;
	}
	int getLengthOfOptimalCompression(String s, int idx, int k, Character prev, int prevcnt, HashMap<String, Integer> memo) {
		String key = idx + ",";
		if (memo.containsKey(key)) {
			return memo.get(key);
		}
		if (k < 0) {
			return -1;
		}
		if (idx == s.length()) {
			return 0;
		}
		int res = 0;
		int inc = 0;
		if (s.charAt(idx) == prev) {
			if (prevcnt == 1 || prevcnt == 9 || prevcnt == 99) {
				inc = 1;
			} 
			else {
				inc = 0;
			}
			res = inc + getLengthOfOptimalCompression(s,idx + 1,k,prev,prevcnt + 1,memo);
		} 
		else {
			int option1 = getLengthOfOptimalCompression(s,idx + 1,k - 1,prev,prevcnt,memo);
			int option2 = 1 + getLengthOfOptimalCompression(s,idx + 1,k,s.charAt(idx),1,memo);
			if (option1 == -1 && option2 == -1) {
				res = -1;
			} 
			else if (option1 == -1) {
				res = option2;
			} 
			else if (option2 == -1) {
				res = option1;
			} 
			else {
				res = Math.min(option1,option2);
			}
		}
		memo.put(key,res);
		return res;
	}
}