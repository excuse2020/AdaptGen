class Solution {
	int dfs(int src, int par, ArrayList<Integer>[] graph, List<Boolean> hasApple) {
		int ans = 0;
		for (int nbr: graph[src]) {	
			if (nbr != par) {
				ans += dfs(nbr,src,graph,hasApple);
			}
		}
		if (ans == 0 && hasApple.get(src)) {
			return 1;
		} 
		else if (ans != 0) {
			return ans + 1;
		}
		return 0;
	}
	int minTime(int n, int[][] edges, List<Boolean> hasApple) {
		ArrayList<Integer>[] graph = new ArrayList[n];
		for (int i = 0; i < n; i++) {
			graph[i] = new ArrayList<>();
		}
		for (int[] e: edges) {	
			int u = e[0], v = e[1];
			graph[u].add(v);
			graph[v].add(u);
		}
		int val = dfs(0,-1,graph,hasApple);
		return val == 0 ? 0 : 2 * val - 2;
	}
}