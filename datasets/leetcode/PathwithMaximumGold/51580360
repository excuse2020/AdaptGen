class Solution {
	int ans = 0;
	int getMaximumGold(int[][] grid) {
		for (int i = 0; i < grid.length; i++) {
			for (int j = 0; j < grid[0].length; j++) {
				if (grid[i][j] != 0) {
					int x = grid[i][j];
					grid[i][j] = 0;
					traverse(grid,i,j,x);
					grid[i][j] = x;
				}
			}
		}
		return ans;
	}
	void traverse(int[][] grid, int i, int j, int temp) {
		grid[i][j] = 0;
		if (temp > ans) {
			ans = temp;
		}
		if (j + 1 < grid[0].length && grid[i][j + 1] != 0) {
			temp += grid[i][j + 1];
			int x = grid[i][j + 1];
			grid[i][j + 1] = 0;
			traverse(grid,i,j + 1,temp);
			grid[i][j + 1] = x;
			temp -= grid[i][j + 1];
		}
		if (j - 1 >= 0 && grid[i][j - 1] != 0) {
			temp += grid[i][j - 1];
			int x = grid[i][j - 1];
			grid[i][j - 1] = 0;
			traverse(grid,i,j - 1,temp);
			grid[i][j - 1] = x;
			temp -= grid[i][j - 1];
		}
		if (i + 1 < grid.length && grid[i + 1][j] != 0) {
			temp += grid[i + 1][j];
			int x = grid[i + 1][j];
			grid[i + 1][j] = 0;
			traverse(grid,i + 1,j,temp);
			grid[i + 1][j] = x;
			temp -= grid[i + 1][j];
		}
		if (i - 1 >= 0 && grid[i - 1][j] != 0) {
			temp += grid[i - 1][j];
			int x = grid[i - 1][j];
			grid[i - 1][j] = 0;
			traverse(grid,i - 1,j,temp);
			grid[i - 1][j] = x;
			temp -= grid[i - 1][j];
		}
	}
}