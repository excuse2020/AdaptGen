class Solution {
	boolean checkPalindrome(char[] s, int en) {
		int i = 0;
		int j = en;
		while (i < j) {
			if (s[i] != s[j]) {
				return false;
			}
			i++;
			j--;
		}
		return true;
	}
	String reverse(String s) {
		char[] c = s.toCharArray();
		int i = 0;
		int j = c.length - 1;
		while (i < j) {
			char temp = c[j];
			c[j] = c[i];
			c[i] = temp;
			i++;
			j--;
		}
		return String.valueOf(c);
	}
	String shortestPalindrome(String s) {
		int i = s.length() - 1;
		char[] c = s.toCharArray();
		while (i >= 0) {
			if (checkPalindrome(c,i)) {
				break;
			}
			i--;
		}
		if (i == 1) {
			int st = 0;
			int e = s.length() - 1;
			while (st < e && s.charAt(0) == s.charAt(e)) {
				st++;
				e--;
			}
			if (st > 0) {
				st--;
			}
			while (st < s.length() - 1 && s.charAt(st) == s.charAt(st + 1)) {
				st++;
			}
			i = st;
		}
		String pre = reverse(s.substring(i + 1,s.length()));
		return pre + s;
	}
}