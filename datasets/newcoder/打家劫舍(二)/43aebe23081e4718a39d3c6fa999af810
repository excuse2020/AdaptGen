class Solution {
	int process(int[] nums, int start, int end) {
		int l = end - start + 1;
		int[] dp = new int[l];
		dp[0] = nums[start];
		dp[1] = Math.max(nums[start],nums[start + 1]);
		for (int i = 2; i < l; i++) {
			dp[i] = Math.max(dp[i - 2] + nums[start + i],dp[i - 1]);
		}
		return dp[l - 1];
	}
	int rob(int[] nums) {
		if (1 == nums.length) {
			return nums[0];
		}
		if (2 == nums.length) {
			return Math.max(nums[0],nums[1]);
		}
		if (3 == nums.length) {
			return Math.max(nums[2],Math.max(nums[0],nums[1]));
		}
		int l = nums.length;
		return Math.max(process(nums,0,l - 2),process(nums,1,l - 1));
	}
}