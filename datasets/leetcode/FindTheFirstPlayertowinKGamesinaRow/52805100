class Solution {
	int findWinningPlayer(int[] skills, int k) {
		int maxid = 0;
		int max = Integer.MIN_VALUE;
		int n = skills.length;
		for (int i = 0; i < n; i++) {
			if (skills[i] > max) {
				max = skills[i];
				maxid = i;
			}
		}
		int[] nge = new int[n];
		Stack<Integer> st = new Stack<>();
		for (int i = 0; i < n; i++) {
			while (!st.isEmpty() && skills[i] > skills[st.peek()]) {
				nge[st.pop()] = i;
			}
			st.push(i);
		}
		while (!st.isEmpty()) {
			nge[st.pop()] = n;
		}
		if (nge[0] - 0 >= k) {
			return 0;
		}
		int idx = nge[0];
		while (idx < n) {
			if (idx == maxid) {
				return idx;
			}
			if (nge[idx] - idx >= k) {
				return idx;
			}
			idx = nge[idx];
		}
		return maxid;
	}
}