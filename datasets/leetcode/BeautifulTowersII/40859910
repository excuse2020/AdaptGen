class Solution {
	long[] leftMountain(List<Integer> list, int len) {
		int queue = new int[2][len + 1];
		int start = 0, end = 1;
		queue[0][0] = -1;
		queue[1][0] = -1;
		queue[0][1] = list.get(0);
		queue[1][1] = 0;
		long dp = new long[len + 1];
		dp[0] = 0;
		dp[1] = queue[0][1];
		for (int i = 1; i < len; i++) {
			int value = list.get(i);
			int pos = (lower_Bound(queue[0],start,end,value));
			pos = (pos < 0) ? Math.abs(pos) - 1 : pos;
			queue[0][pos] = value;
			queue[1][pos] = i;
			end = pos;
			int idx = queue[1][pos - 1];
			dp[i + 1] = ((long) value) * (long) (i - idx) + dp[idx + 1];
		}
		return Arrays.copyOfRange(dp,1,len + 1);
	}
	int lower_Bound(int[] arr, int start, int end, int key) {
		while (start < end) {
			int mid = (start + end) / 2;
			if (arr[mid] < key) {
				start = mid + 1;
			} 
			else if (arr[mid] >= key) {
				end = mid;
			}
		}
		if (arr[start] < key) {
			return start + 1;
		} 
		else {
			return start;
		}
	}
	long maximumSumOfHeights(List<Integer> arr) {
		int len = arr.size();
		long leftM = leftMountain(arr,len);
		long rightM = rightMountain(arr,len);
		long ans = 0;
		for (int i = 0; i < len; i++) {
			ans = Math.max(ans,leftM[i] + rightM[i] - arr.get(i));
		}
		return ans;
	}
	long[] rightMountain(List<Integer> list, int len) {
		int queue = new int[2][len + 1];
		int start = 0, end = 1;
		queue[0][0] = -1;
		queue[1][0] = len;
		queue[0][1] = list.get(len - 1);
		queue[1][1] = len - 1;
		long dp = new long[len + 1];
		dp[len] = 0;
		dp[len - 1] = queue[0][1];
		for (int i = len - 2; i >= 0; i--) {
			int value = list.get(i);
			int pos = (lower_Bound(queue[0],start,end,value));
			pos = (pos < 0) ? Math.abs(pos) - 1 : pos;
			queue[0][pos] = value;
			queue[1][pos] = i;
			end = pos;
			int idx = queue[1][pos - 1];
			dp[i] = ((long) value) * (long) (idx - i) + dp[idx];
		}
		return Arrays.copyOfRange(dp,0,len);
	}
}