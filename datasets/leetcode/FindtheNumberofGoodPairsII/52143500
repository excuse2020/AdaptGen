class Solution {
	Set<Integer> getAllFactorsVer3(int n) {
		Set<Integer> factors = new HashSet<>();
		int step = n % 2 == 0 ? 1 : 2;
		for (int i = 1; i <= Math.sqrt(n); i += step) {
			if (n % i == 0) {
				factors.add(i);
				factors.add(n / i);
			}
		}
		return factors;
	}
	long numberOfPairs(int[] nums1, int[] nums2, int k) {
		int n1 = nums1.length;
		HashMap<Integer, Integer> hmap = new HashMap<>();
		for (int n: nums2) {	
			hmap.put(n,hmap.getOrDefault(n,0) + 1);
		}
		long res = 0;
		for (int i = 0; i < n1; i++) {
			if (nums1[i] % k == 0) {
				int num = nums1[i] / k;
				Set<Integer> factors = getAllFactorsVer3(num);
				for (int n: factors) {	
					if (hmap.containsKey(n)) {
						res = res + hmap.get(n);
					}
				}
			}
		}
		return res;
	}
}