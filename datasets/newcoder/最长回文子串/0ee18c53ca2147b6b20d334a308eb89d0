class Solution {
	int getLongestPalindrome(String A) {
		if (A == null || A.length() == 0) {
			return 0;
		}
		int n = A.length();
		int res = 1;
		int res2 = 0;
		for (int i = 1; i < n - 1; i++) {
			res = Math.max(res,getLongestPalindrome(A,n,i));
		}
		for (int i = 0; i < n - 1; i++) {
			res2 = Math.max(res2,getLongestPalindromeD(A,n,i));
		}
		return Math.max(res,res2);
	}
	int getLongestPalindrome(String A, int n, int index) {
		int longest = Math.min(index,(n - index));
		int res = 1;
		for (int i = 1; i <= longest; i++) {
			if (A.charAt(index - i) != A.charAt(index + i)) {
				break;
			}
			res += 2;
		}
		return res;
	}
	int getLongestPalindromeD(String A, int n, int index) {
		int longest = Math.min(index,(n - index));
		int res = 0;
		for (int i = 0; i <= longest; i++) {
			if (A.charAt(index - i) != A.charAt(index + 1)) {
				break;
			}
			res += 2;
		}
		return res;
	}
}