class Solution {
	void backTrack(int n, int k, int count, int next, boolean[] visited) {
		if (visited[next]) {
			return;
		}
		visited[next] = true;
		backTrack(n,k,++count,(next + (count * k)) % (n),visited);
	}
	int[] circularGameLosers(int n, int k) {
		boolean[] visited = new boolean[n];
		int count = 0;
		backTrack(n,k,0,0,visited);
		List<Integer> list = new ArrayList();
		for (int i = 0; i < n; i++) {
			if (!visited[i]) {
				list.add(i + 1);
			}
		}
		int[] ans = new int[list.size()];
		for (int i = 0; i < list.size(); i++) {
			ans[i] = list.get(i);
		}
		return ans;
	}
}