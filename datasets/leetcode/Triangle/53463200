class Solution {
	int minimumTotal(List<List<Integer>> triangle) {
		int n = triangle.size();
		int dp = new int[n][n];
		for (int[] rows: dp) {	
			Arrays.fill(rows,Integer.MAX_VALUE);
		}
		return trianglemin(0,0,triangle,dp);
	}
	int trianglemin(int i, int j, List<List<Integer>> triangle, int[][] dp) {
		if (i == triangle.size()) {
			return 0;
		}
		if (i < 0 || j < 0) {
			return Integer.MAX_VALUE;
		}
		if (dp[i][j] != Integer.MAX_VALUE) {
			return dp[i][j];
		}
		int down = triangle.get(i).get(j) + trianglemin(i + 1,j,triangle,dp);
		int top = triangle.get(i).get(j) + trianglemin(i + 1,j + 1,triangle,dp);
		return dp[i][j] = Math.min(top,down);
	}
}