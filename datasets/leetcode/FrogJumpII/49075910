class Solution {
	int maxJump(int[] stones) {
		int n = stones.length;
		boolean[] visited = new boolean[n];
		Arrays.fill(visited,false);
		int maxJump = 0, previousStone = stones[0];
		for (int i = 1; i < n; i += 2) {
			int currentJump = stones[i] - previousStone;
			previousStone = stones[i];
			maxJump = Math.max(currentJump,maxJump);
			visited[i] = true;
		}
		if (!visited[n - 1]) {
			int currentJump = stones[n - 1] - previousStone;
			previousStone = stones[n - 1];
			maxJump = Math.max(currentJump,maxJump);
		}
		for (int i = n - 2; i >= 0; i--) {
			if (!visited[i]) {
				int currentJump = previousStone - stones[i];
				previousStone = stones[i];
				maxJump = Math.max(currentJump,maxJump);
			}
		}
		return maxJump;
	}
}