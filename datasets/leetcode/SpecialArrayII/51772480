class Solution {
	int binarySearch(List<Integer> list, int num) {
		int l = 0, r = list.size() - 1, mid;
		while (l <= r) {
			mid = l + (r - l) / 2;
			if (list.get(mid) == num) {
				return mid;
			} 
			else if (list.get(mid) > num) {
				r = mid - 1;
			} 
			else {
				l = mid + 1;
			}
		}
		return r;
	}
	boolean[] isArraySpecial(int[] nums, int[][] queries) {
		List<Integer> subArrays = new ArrayList<>();
		subArrays.add(0);
		for (int i = 1; i < nums.length; i++) {
			if (nums[i] % 2 == 1 && nums[i - 1] % 2 == 1) {
				subArrays.add(i);
			} 
			else if (nums[i] % 2 == 0 && nums[i - 1] % 2 == 0) {
				subArrays.add(i);
			}
		}
		subArrays.add(nums.length);
		List<Boolean> ans = new ArrayList<>();
		for (int i = 0; i < queries.length; i++) {
			int start = binarySearch(subArrays,queries[i][0]);
			if (subArrays.get(start + 1) > queries[i][1]) {
				ans.add(true);
			} 
			else {
				ans.add(false);
			}
		}
		boolean[] b = new boolean[ans.size()];
		for (int i = 0; i < ans.size(); i++) {
			b[i] = ans.get(i);
		}
		return b;
	}
}