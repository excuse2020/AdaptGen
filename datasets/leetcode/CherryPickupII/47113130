class Solution {
	int cherryPickup(int[][] grid) {
		int[][][] dp = new int[grid.length][grid[0].length][grid[0].length];
		for (int[][] arr: dp) {	
			for (int[] ar: arr) {	
				Arrays.fill(ar,-1);
			}
		}
		return grid[0][0] + grid[0][grid[0].length - 1];
	}
	int findMax(int[][] grid, int row, int col1, int col2, int[][][] dp) {
		if (row >= grid.length - 1) {
			return 0;
		}
		if (dp[row + 1][col1][col2] != -1) {
			return dp[row + 1][col1][col2];
		}
		int maxVal = 0;
		for (int i = col1 - 1; i < col1 + 2; i++) {
			for (int j = col2 - 1; j < col2 + 2; j++) {
				if (i >= 0 && i < grid[0].length && j >= 0 && j < grid[0].length) {
					int val = grid[row + 1][i];
					if (i != j) {
						val += grid[row + 1][j];
					}
					maxVal = Math.max(maxVal,val + findMax(grid,row + 1,i,j,dp));
				}
			}
		}
		return dp[row + 1][col1][col2] = maxVal;
	}
}