class Solution {
	int[] ind;
	int dfs(int i, int k, List<List<Integer>> piles, int[][] dp) {
		if (k == 0 || i >= piles.size()) {
			return 0;
		}
		if (dp[i][k] != -1) {
			return dp[i][k];
		}
		int notTake = dfs(i + 1,k,piles,dp);
		int take = 0;
		for (int j = 0; j < piles.get(i).size() && j < k; j++) {
			take = Math.max(take,piles.get(i).get(j) + dfs(i + 1,k - j,piles,dp));
		}
		return dp[i][k] = Math.max(take,notTake);
	}
	int maxValueOfCoins(List<List<Integer>> piles, int k) {
		ind = new int[piles.size()];
		int maxSize = Integer.MIN_VALUE;
		List<List<Integer>> list2 = new ArrayList<>();
		for (List<Integer> l: piles) {	
			List<Integer> temp = new ArrayList<>();
			temp.add(l.get(0));
			for (int i = 1; i < l.size(); i++) {
				temp.add(temp.get(i - 1) + l.get(i));
			}
			list2.add(new ArrayList<>(temp));
		}
		for (List<Integer> list: piles) {	
			maxSize = Math.max(maxSize,list.size());
		}
		int[][] dp = new int[piles.size() + 1][k + 1];
		Arrays.stream(dp).forEach((r) -> {Arrays.fill(r,-1)});
		return dfs(0,k,list2,dp);
	}
}