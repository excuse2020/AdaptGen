class Solution {
	int minDays(int n) {
		Queue<Integer> queue = new LinkedList<>();
		Set<Integer> visited = new HashSet<>();
		int count = 0;
		queue.add(n);
		visited.add(n);
		while (!queue.isEmpty()) {
			int size = queue.size();
			while (size-- != 0) {
				int node = queue.remove();
				if (node == 1) {
					return ++count;
				}
				if (!visited.contains(node - 1)) {
					queue.add(node - 1);
					visited.add(node - 1);
				}
				if (node % 3 == 0 && !visited.contains(node / 3)) {
					queue.add(node / 3);
					visited.add(node / 3);
				}
				if (node % 2 == 0 && !visited.contains(node / 2)) {
					queue.add(node / 2);
					visited.add(node / 2);
				}
			}
			count++;
		}
		return 0;
	}
}