class Solution {
	boolean checkForCross = true;
	int global_first = 0;
	int global_second = 0;
	int semiOrderedPermutation(int[] nums) {
		int count = 0;
		int first = 0;
		int second = 0;
		if (nums[0] == 1 && nums[nums.length - 1] == nums.length) {
			return 0;
		} 
		else if (nums[0] == 1) {
			for (int i = 0; i < nums.length; i++) {
				if (nums[i] == nums.length) {
					return nums.length - i;
				}
			}
		} 
		else if (nums[nums.length - 1] == nums.length) {
			for (int i = 0; i < nums.length; i++) {
				if (nums[i] == 1) {
					return i;
				}
			}
		} 
		else {
			for (int i = 0; i < nums.length; i++) {
				if (nums[i] == 1) {
					first = i;
				}
				if (nums[i] == nums.length) {
					second = i;
				}
			}
			global_first = first;
			global_second = second;
			int finalResult = swap(nums,first,second);
			return finalResult;
		}
		return -1;
	}
	int swap(int[] nums, int first, int second) {
		if (nums[0] == 1 && checkForCross == false) {
			return global_first + (nums.length - 1) - 1;
		}
		if (nums[0] == 1 && checkForCross == true) {
			return global_first + (nums.length - 1);
		}
		for (int i = 0; i < nums.length; i++) {
			if (nums[i] == 1) {
				first = i;
			}
			if (nums[i] == nums.length) {
				second = i;
			}
		}
		if (second == first - 1) {
			checkForCross = false;
		}
		int dummy = nums[first];
		nums[first] = nums[first - 1];
		nums[first - 1] = dummy;
		return swap(nums,first,second);
	}
}