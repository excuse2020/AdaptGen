class Solution {
	boolean canEatInTime(int[] piles, int k, int h) {
		int hours = 0;
		for (int i = 0; i < piles.length; i++) {
			int rem = piles[i] / k;
			hours += rem;
			if (piles[i] % k != 0) {
				hours++;
			}
		}
		return hours <= h;
	}
	int minEatingSpeed(int[] piles, int h) {
		int left = 1;
		int right = Integer.MAX_VALUE;
		while (left <= right) {
			int mid = left + (right - left) / 2;
			if (canEatInTime(piles,mid,h)) {
				right = mid - 1;
			} 
			else {
				left = mid + 1;
			}
		}
		return left;
	}
}