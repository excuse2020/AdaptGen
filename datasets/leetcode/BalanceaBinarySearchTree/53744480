class Solution {
	void allValues(TreeNode root, List<Integer> list) {
		if (root == null) {
			return;
		}
		allValues(root.left,list);
		list.add(root.val);
		allValues(root.right,list);
	}
	TreeNode balanceBST(TreeNode root) {
		List<Integer> values = new ArrayList<>();
		allValues(root,values);
		return completionBinaryTree(values,0,values.size());
	}
	TreeNode completionBinaryTree(List<Integer> values, int low, int high) {
		if (low >= high) {
			return null;
		}
		int mid = (low + high) / 2;
		TreeNode root = new TreeNode(values.get(mid));
		root.left = completionBinaryTree(values,low,mid);
		root.right = completionBinaryTree(values,mid + 1,high);
		return root;
	}
}