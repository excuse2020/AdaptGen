class Solution {
	List<List<Integer>> getSkyline(int[][] buildings) {
		List<List<Integer>> heightList = new LinkedList<List<Integer>>();
		TreeMap<Integer, Integer> map = new TreeMap<Integer, Integer>();
		List<List<Integer>> res = new LinkedList<List<Integer>>();
		int lastHeight = 0;
		for (int[] val: buildings) {	
			heightList.add(Arrays.asList(val[0],-val[2]));
			heightList.add(Arrays.asList(val[1],val[2]));
		}
		Collections.sort(heightList,(a, b) -> {(a.get(0).intValue() != b.get(0).intValue() ? a.get(0) - b.get(0) : a.get(1) - b.get(1))});
		map.put(0,1);
		for (List<Integer> val: heightList) {	
			int height = val.get(1);
			if (height < 0) {
				map.put(-height,map.getOrDefault(-height,0) + 1);
			} 
			else if (map.getOrDefault(height,0) > 1) {
				map.put(height,map.get(height) - 1);
			} 
			else {
				map.remove(height);
			}
			if (map.lastKey() != lastHeight) {
				lastHeight = map.lastKey();
				res.add(Arrays.asList(val.get(0),lastHeight));
			}
		}
		return res;
	}
}