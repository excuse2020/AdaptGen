class Solution {
	List<List<Integer>> levelOrderBottom(TreeNode root) {
		Queue<TreeNode> queue = new LinkedList<TreeNode>();
		List<List<Integer>> resList = new LinkedList<>();
		if (root == null) {
			return resList;
		}
		queue.offer(root);
		while (!queue.isEmpty()) {
			int level = queue.size();
			List<Integer> sublist = new ArrayList<>();
			for (int i = 0; i < level; i++) {
				if (queue.peek().left != null) {
					queue.offer(queue.peek().left);
				}
				if (queue.peek().right != null) {
					queue.offer(queue.peek().right);
				}
				sublist.add(queue.poll().val);
			}
			resList.add(sublist);
		}
		reverseList(resList);
		return resList;
	}
	List<List<Integer>> reverseList(List<List<Integer>> inputList) {
		int left = 0;
		int right = inputList.size() - 1;
		while (left < right) {
			List<Integer> temp = inputList.get(left);
			inputList.set(left,inputList.get(right));
			inputList.set(right,temp);
			left++;
			right--;
		}
		return inputList;
	}
}