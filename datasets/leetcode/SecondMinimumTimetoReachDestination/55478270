class Solution {
	int secondMinimum(int n, int[][] edges, int t, int c) {
		ArrayList<ArrayList<Integer>> adj = new ArrayList<>();
		for (int i = 0; i < n; i++) {
			adj.add(new ArrayList<>());
		}
		for (int e: edges) {	
			if (e[0] == e[1]) {
				continue;
			}
			adj.get(e[0] - 1).add(e[1] - 1);
			adj.get(e[1] - 1).add(e[0] - 1);
		}
		PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> {a[1] - b[1]});
		pq.add(new int{0, 0});
		int dist1 = new int[n];
		int dist2 = new int[n];
		for (int i = 0; i < n; i++) {
			dist1[i] = Integer.MAX_VALUE;
			dist2[i] = Integer.MAX_VALUE;
		}
		dist1[0] = 0;
		while (!pq.isEmpty()) {
			int u = pq.peek()[0], currTime = pq.peek()[1];
			pq.poll();
			int x = currTime / c;
			if (x % 2 == 1) {
				currTime += (x + 1) * c - currTime;
			}
			currTime += t;
			for (int v: adj.get(u)) {	
				if (currTime < dist1[v]) {
					dist2[v] = dist1[v];
					dist1[v] = currTime;
					pq.add(new int{v, currTime});
				} 
				else if (currTime > dist1[v] && currTime < dist2[v]) {
					dist2[v] = currTime;
					pq.add(new int{v, currTime});
				}
			}
		}
		return dist2[n - 1];
	}
}