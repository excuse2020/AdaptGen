class Solution {
	Map<Integer, int[]> map = new HashMap<>();
	int mod = 1000000007;
	Map<String, Integer> seen = new HashMap<>();
	int knightDialer(int n) {
		map.put(0,new int{4, 6});
		map.put(1,new int{8, 6});
		map.put(2,new int{7, 9});
		map.put(3,new int{8, 4});
		map.put(4,new int{3, 9, 0});
		map.put(5,new int{});
		map.put(6,new int{7, 1, 0});
		map.put(7,new int{2, 6});
		map.put(8,new int{1, 3});
		map.put(9,new int{2, 4});
		int ans = 0;
		for (int i = 0; i <= 9; i++) {
			ans = (ans + recursive(n - 1,i)) % mod;
		}
		return ans;
	}
	int recursive(int n, int currentSpot) {
		if (n == 0) {
			return 1;
		}
		String key = n + "-";
		if (seen.containsKey(key)) {
			return seen.get(key);
		}
		int ans = 0;
		for (int newSpot: map.get(currentSpot)) {	
			ans = (ans + recursive(n - 1,newSpot)) % mod;
		}
		seen.put(key,ans);
		return ans;
	}
}