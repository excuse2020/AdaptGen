class Solution {
	int min = Integer.MAX_VALUE;
	Stack<Integer> stack = new Stack<>();
	int min() {
		return min;
	}
	void pop() {
		int tmp;
		if (!stack.isEmpty()) {
			tmp = stack.pop();
			if (tmp != min) {
				return;
			} 
			else {
				min = Integer.MAX_VALUE;
				Stack<Integer> st = new Stack<>();
				while (!stack.isEmpty()) {
					tmp = stack.pop();
					min = Math.min(min,tmp);
					st.push(tmp);
				}
				while (!st.isEmpty()) {
					stack.push(st.pop());
				}
			}
		}
	}
	void push(int node) {
		min = Math.min(min,node);
		stack.push(node);
	}
	int top() {
		int tmp = 0;
		if (!stack.isEmpty()) {
			tmp = stack.pop();
			stack.push(tmp);
		}
		return tmp;
	}
}