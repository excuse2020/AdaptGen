class Solution {
	int maxStarSum(int[] vals, int[][] edges, int k) {
		ArrayList<ArrayList<Integer>> adj = new ArrayList<ArrayList<Integer>>();
		int n = vals.length;
		if (n == 1) {
			return vals[0];
		}
		int max = Integer.MIN_VALUE;
		if (edges.length == 0) {
			for (int i = 0; i < n; i++) {
				max = Math.max(max,vals[i]);
			}
			return max;
		}
		for (int i = 0; i < n; i++) {
			adj.add(new ArrayList<Integer>());
		}
		for (int i = 0; i < edges.length; i++) {
			adj.get(edges[i][0]).add(edges[i][1]);
			adj.get(edges[i][1]).add(edges[i][0]);
		}
		for (int i = 0; i < n; i++) {
			Collections.sort(adj.get(i),(a, b) -> {vals[b] - vals[a]});
		}
		for (int i = 0; i < n; i++) {
			int sum = 0;
			int j = 0;
			sum = sum + vals[i];
			max = Math.max(max,sum);
			while (j < k && j < adj.get(i).size()) {
				sum = sum + vals[adj.get(i).get(j)];
				max = Math.max(max,sum);
				j++;
			}
		}
		return max;
	}
}