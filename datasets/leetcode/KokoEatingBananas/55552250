class Solution {
	int checkPile(int[] piles, int h, int mid) {
		int ans = 0;
		for (int i = 0; i < piles.length; i++) {
			ans += piles[i] / mid;
			if (piles[i] % mid != 0) {
				ans++;
			}
		}
		return ans;
	}
	int maxElement(int[] piles) {
		int max = 0;
		for (int i = 0; i < piles.length; i++) {
			if (piles[i] > max) {
				max = piles[i];
			}
		}
		return max;
	}
	int minEatingSpeed(int[] piles, int h) {
		int n = piles.length;
		int low = 1;
		int high = maxElement(piles);
		while (low < high) {
			int mid = low + (high - low) / 2;
			int check = checkPile(piles,h,mid);
			if (check <= h) {
				high = mid;
			} 
			else {
				low = mid + 1;
			}
		}
		return low;
	}
}