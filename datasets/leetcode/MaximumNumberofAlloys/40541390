class Solution {
	boolean canCreateAlloys(long mid, int budget, List<List<Integer>> composition, List<Integer> stock, List<Integer> cost) {
		long minCost = Integer.MAX_VALUE;
		for (int i = 0; i < composition.size(); ++i) {
			long currCost = 0;
			for (int j = 0; j < composition.get(i).size(); ++j) {
				long curr = mid * composition.get(i).get(j);
				if (stock.get(j) >= curr) {
					continue;
				} 
				else {
					long extra = (curr - stock.get(j)) * cost.get(j);
					currCost += extra;
				}
			}
			minCost = Math.min(currCost,minCost);
		}
		return (minCost <= budget);
	}
	int maxNumberOfAlloys(int n, int k, int budget, List<List<Integer>> composition, List<Integer> stock, List<Integer> cost) {
		int left = 0, right = (int) 1e9;
		int result = 0;
		while (left <= right) {
			int mid = left + (right - left) / 2;
			if (canCreateAlloys(mid,budget,composition,stock,cost)) {
				result = mid;
				left = mid + 1;
			} 
			else {
				right = mid - 1;
			}
		}
		return result;
	}
}