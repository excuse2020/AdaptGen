class Solution {
	boolean IsBalanced_Solution(TreeNode pRoot) {
		return solution2(pRoot);
	}
	int dep(TreeNode pRoot) {
		if (pRoot == null) {
			return 0;
		}
		int lDep = dep(pRoot.left);
		if (lDep == -1) {
			return -1;
		}
		int rDep = dep(pRoot.right);
		if (rDep == -1) {
			return -1;
		}
		int gap = Math.abs(lDep - rDep);
		if (gap > 1) {
			return -1;
		}
		return Math.max(lDep,rDep) + 1;
	}
	int depth(TreeNode pRoot) {
		if (pRoot == null) {
			return 0;
		}
		return Math.max(depth(pRoot.left),depth(pRoot.right)) + 1;
	}
	boolean isBalanced(TreeNode pRoot) {
		if (pRoot == null) {
			return true;
		}
		if (Math.abs(depth(pRoot.left) - depth(pRoot.right)) > 1) {
			return false;
		}
		return isBalanced(pRoot.left) && isBalanced(pRoot.right);
	}
	boolean solution1(TreeNode pRoot) {
		int result = dep(pRoot);
		if (result == -1) {
			return false;
		}
		return true;
	}
	boolean solution2(TreeNode pRoot) {
		return isBalanced(pRoot);
	}
}