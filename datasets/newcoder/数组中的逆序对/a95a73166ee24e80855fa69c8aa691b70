class Solution {
	int InversePairs(int[] nums) {
		if (nums == null || nums.length <= 1) {
			return 0;
		}
		return mergeSort(nums,0,nums.length - 1) % 1000000007;
	}
	int merge(int[] nums, int left, int mid, int right) {
		int[] temp = new int[right - left + 1];
		int leftStart = left;
		int rightStart = mid + 1;
		int index = 0;
		int count = 0;
		while (leftStart <= mid && rightStart <= right) {
			if (nums[leftStart] <= nums[rightStart]) {
				temp[index++] = nums[leftStart++];
			} 
			else {
				temp[index++] = nums[rightStart++];
				count += mid - leftStart + 1;
				count %= 1000000007;
			}
		}
		while (leftStart <= mid) {
			temp[index++] = nums[leftStart++];
		}
		while (rightStart <= right) {
			temp[index++] = nums[rightStart++];
		}
		for (int i = 0; i < temp.length; i++) {
			nums[left + i] = temp[i];
		}
		return count;
	}
	int mergeSort(int[] nums, int left, int right) {
		if (left >= right) {
			return 0;
		}
		int mid = (left + right) / 2;
		int leftNum = mergeSort(nums,left,mid);
		int rightNum = mergeSort(nums,mid + 1,right);
		int leftAndRight = merge(nums,left,mid,right);
		return rightNum + leftNum;
	}
}