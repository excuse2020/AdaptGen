class Solution {
	int numBusesToDestination(int[][] routes, int source, int target) {
		if (source == target) {
			return 0;
		}
		Queue<Integer> q = new LinkedList<>();
		Set<Integer> visitedBuses = new HashSet<>(), visitedStops = new HashSet<>();
		Map<Integer, List<Integer>> map = new HashMap<>();
		for (int i = 0; i < routes.length; ++i) {
			for (int j = 0; j < routes[i].length; ++j) {
				map.putIfAbsent(routes[i][j],new ArrayList<>());
				map.get(routes[i][j]).add(i);
			}
		}
		q.offer(source);
		int level = 1;
		while (!q.isEmpty()) {
			int size = q.size();
			for (int i = 0; i < size; ++i) {
				int currentStop = q.poll();
				for (int bus: map.get(currentStop)) {	
					if (!visitedBuses.contains(bus)) {
						for (int stop: routes[bus]) {	
							if (!visitedStops.contains(stop)) {
								q.offer(stop);
								if (stop == target) {
									return level;
								}
								visitedStops.add(stop);
							}
						}
						visitedBuses.add(bus);
					}
				}
			}
			level++;
		}
		return -1;
	}
}