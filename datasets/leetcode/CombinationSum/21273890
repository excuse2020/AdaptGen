class Solution {
	List<Integer> list;
	List<List<Integer>> nums;
	List<List<Integer>> combinationSum(int[] candidates, int target) {
		nums = new ArrayList<>();
		list = new ArrayList<>();
		helper(candidates,target,0);
		return nums;
	}
	void helper(int[] candidates, int target, int i) {
		if (i >= candidates.length || target < 0) {
			return;
		}
		if (target == 0) {
			if (list.size() != 0 && !nums.contains(list)) {
				nums.add(new ArrayList<>(list));
			}
			return;
		}
		list.add(candidates[i]);
		helper(candidates,target - candidates[i],i);
		helper(candidates,target - candidates[i],i + 1);
		list.remove(list.size() - 1);
		helper(candidates,target,i + 1);
	}
}