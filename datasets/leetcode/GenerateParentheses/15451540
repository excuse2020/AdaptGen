class Solution {
	List<String> generateParenthesis(int n) {
		List<String> result = new ArrayList<>();
		if (n < 0) {
			return result;
		}
		generateParenthesisHelper(result,n,n,new StringBuilder());
		return result;
	}
	void generateParenthesisHelper(List<String> result, int open, int close, StringBuilder sb) {
		if (open == 0 && close == 0) {
			result.add(sb.toString());
			return;
		}
		if (open > 0) {
			sb.append("(");
			generateParenthesisHelper(result,open - 1,close,sb);
			sb.setLength(sb.length() - 1);
		}
		if (open < close) {
			sb.append(")");
			generateParenthesisHelper(result,open,close - 1,sb);
			sb.setLength(sb.length() - 1);
		}
	}
}