class Solution {
	int fun(int[][] grid, int i, int j, int val, int[][] dp) {
		if (i >= 0 && i < grid.length && j < grid[0].length && grid[i][j] > val) {
			if (dp[i][j] != -1) {
				return dp[i][j];
			}
			int a = fun(grid,i - 1,j + 1,grid[i][j],dp);
			int b = fun(grid,i,j + 1,grid[i][j],dp);
			int c = fun(grid,i + 1,j + 1,grid[i][j],dp);
			int d = Math.max(a,b);
			return dp[i][j] = Math.max(d,c) + 1;
		}
		return 0;
	}
	int maxMoves(int[][] grid) {
		int dp = new int[grid.length + 1][grid[0].length + 1];
		for (int i: dp) {	
			Arrays.fill(i,-1);
		}
		int maxi = Integer.MIN_VALUE;
		for (int i = 0; i < grid.length; i++) {
			maxi = Math.max(maxi,fun(grid,i,0,0,dp));
		}
		return maxi - 1;
	}
}