class Solution {
	int maxMoves(int[][] grid) {
		int m = grid.length;
		int n = grid[0].length;
		Queue<int[]> q = new LinkedList<>();
		boolean[][] visited = new boolean[m][n];
		for (int i = 0; i < m; i++) {
			q.add(new int{i, 0});
			visited[i][0] = true;
		}
		int max = -1;
		while (!q.isEmpty()) {
			int size = q.size();
			max++;
			while (size-- > 0) {
				int[] t = q.poll();
				if (t[0] - 1 >= 0 && t[1] + 1 < n && grid[t[0] - 1][t[1] + 1] > grid[t[0]][t[1]] && !visited[t[0] - 1][t[1] + 1]) {
					q.add(new int{t[0] - 1, t[1] + 1});
					visited[t[0] - 1][t[1] + 1] = true;
				}
				if (t[0] >= 0 && t[1] + 1 < n && grid[t[0]][t[1] + 1] > grid[t[0]][t[1]] && !visited[t[0]][t[1] + 1]) {
					q.add(new int{t[0], t[1] + 1});
					visited[t[0]][t[1] + 1] = true;
				}
				if (t[0] + 1 < m && t[1] + 1 < n && grid[t[0] + 1][t[1] + 1] > grid[t[0]][t[1]] && !visited[t[0] + 1][t[1] + 1]) {
					q.add(new int{t[0] + 1, t[1] + 1});
					visited[t[0] + 1][t[1] + 1] = true;
				}
			}
		}
		return max;
	}
}