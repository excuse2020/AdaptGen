class Solution {
	boolean check(String str, String pattern) {
		Map<Character, Character> map1 = new HashMap<>();
		Map<Character, Character> map2 = new HashMap<>();
		for (int i = 0; i < pattern.length(); i++) {
			if (map1.containsKey(pattern.charAt(i))) {
				Character ch = map1.get(pattern.charAt(i));
				if (ch != str.charAt(i)) {
					return false;
				} 
				else {
					map1.put(pattern.charAt(i),str.charAt(i));
				}
			} 
			else {
				map1.put(pattern.charAt(i),str.charAt(i));
			}
		}
		for (int i = 0; i < str.length(); i++) {
			if (map2.containsKey(str.charAt(i))) {
				Character ch = map2.get(str.charAt(i));
				if (ch != pattern.charAt(i)) {
					return false;
				} 
				else {
					map2.put(str.charAt(i),pattern.charAt(i));
				}
			} 
			else {
				map2.put(str.charAt(i),pattern.charAt(i));
			}
		}
		return true;
	}
	List<String> findAndReplacePattern(String[] words, String pattern) {
		List<String> list = new ArrayList<>();
		for (int i = 0; i < words.length; i++) {
			if (check(words[i],pattern)) {
				list.add(words[i]);
			}
		}
		return list;
	}
}