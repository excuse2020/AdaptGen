class Solution {
	boolean isPossible(int n, List<List<Integer>> edges) {
		Set<Integer>[] adj = new HashSet[n + 1];
		for (int i = 1; i <= n; i++) {
			adj[i] = new HashSet<>();
		}
		for (List<Integer> e: edges) {	
			adj[e.get(0)].add(e.get(1));
			adj[e.get(1)].add(e.get(0));
		}
		List<Integer> odd = new ArrayList<>();
		for (int i = 1; i <= n; i++) {
			if (adj[i].size() % 2 == 1) {
				odd.add(i);
			}
			if (odd.size() > 4) {
				return false;
			}
		}
		if (odd.size() == 2) {
			int n1 = odd.get(0), n2 = odd.get(1);
			for (int i = 1; i <= n; i++) {
				if (!adj[n1].contains(i) && !adj[n2].contains(i)) {
					return true;
				}
			}
		}
		if (odd.size() == 4) {
			int n1 = odd.get(0), n2 = odd.get(1), n3 = odd.get(2), n4 = odd.get(3);
			return (!adj[n1].contains(n2) && !adj[n3].contains(n4)) || (!adj[n1].contains(n3) && !adj[n2].contains(n4));
		}
		return odd.size() == 0;
	}
}