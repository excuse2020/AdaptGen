class Solution {
	boolean checkPossible(String s1, String s2) {
		if (s1.length() != s2.length() + 1) {
			return false;
		}
		int first = 0;
		int second = 0;
		while (first < s1.length()) {
			if (second < s2.length() && s1.charAt(first) == s2.charAt(second)) {
				first++;
				second++;
			} 
			else {
				first++;
			}
		}
		return s1.length() == first && s2.length() == second;
	}
	int longestStrChain(String[] arr) {
		int n = arr.length;
		Arrays.sort(arr,Comparator.comparing());
		int dp = new int[n];
		Arrays.fill(dp,1);
		int maxi = 0;
		for (int i = 0; i < n; i++) {
			for (int prev = 0; prev < i; prev++) {
				if (checkPossible(arr[i],arr[prev]) && 1 + dp[prev] > dp[i]) {
					dp[i] = 1 + dp[prev];
				}
			}
			maxi = Math.max(dp[i],maxi);
		}
		return maxi;
	}
}