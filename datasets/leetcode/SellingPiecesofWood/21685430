class Solution {
	long sellingWood(int m, int n, int[][] prices) {
		long dp = new long[m + 1][n + 1];
		return sol(m,n,prices,dp);
	}
	long sol(int height, int width, int[][] price, long dp) {
		if (height <= 0 || width <= 0) {
			return 0l;
		}
		if (dp[height][width] != 0) {
			return dp[height][width];
		}
		long max = 0;
		for (int i = 0; i < price.length; i++) {
			int hth = price[i][0];
			int wth = price[i][1];
			int cost = price[i][2];
			long max_cost = 0;
			if (height >= hth && width >= wth) {
				max_cost = cost + Math.max(sol(height - hth,width,price,dp) + sol(hth,width - wth,price,dp),sol(height - hth,wth,price,dp) + sol(height,width - wth,price,dp));
			}
			max = Math.max(max_cost,max);
		}
		dp[height][width] = max;
		return max;
	}
}