class Solution {
	boolean findPath(TreeNode LCA, int target, StringBuilder path) {
		if (LCA == null) {
			return false;
		}
		if (LCA.val == target) {
			return true;
		}
	}
	String getDirections(TreeNode root, int startValue, int destValue) {
		TreeNode LCA = lowestCommonAncestor(root,startValue,destValue);
		StringBuilder lcaToSrc = new StringBuilder();
		StringBuilder lcaToDest = new StringBuilder();
		findPath(LCA,startValue,lcaToSrc);
		findPath(LCA,destValue,lcaToDest);
		StringBuilder result = new StringBuilder();
		int i = 0;
	}
	TreeNode lowestCommonAncestor(TreeNode root, int src, int dest) {
		if (root == null) {
			return null;
		}
		if (root.val == src || root.val == dest) {
			return root;
		}
		TreeNode left = lowestCommonAncestor(root.left,src,dest);
		TreeNode right = lowestCommonAncestor(root.right,src,dest);
		if (left != null && right != null) {
			return root;
		}
		return left != null ? left : right;
	}
}