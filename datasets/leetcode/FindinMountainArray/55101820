class Solution {
	int OrderAgnosticBS(MountainArray arr, int target, int start, int end) {
		boolean isAscending = arr.get(start) < arr.get(end);
		while (start <= end) {
			int mid = start + (end - start) / 2;
			int midElement = arr.get(mid);
			if (midElement == target) {
				return mid;
			}
			if (isAscending) {
				if (target > midElement) {
					start = mid + 1;
				} 
				else if (target < midElement) {
					end = mid - 1;
				}
			} 
			else {
				if (target > midElement) {
					end = mid - 1;
				} 
				else if (target < midElement) {
					start = mid + 1;
				}
			}
		}
		return -1;
	}
	int findInMountainArray(int target, MountainArray arr) {
		int result = OrderAgnosticBS(arr,target,0,peakIndex(arr));
		if (result == -1) {
			result = OrderAgnosticBS(arr,target,peakIndex(arr),arr.length() - 1);
		}
		return result;
	}
	int peakIndex(MountainArray arr) {
		int start = 0, end = arr.length() - 1;
		while (start < end) {
			int mid = start + (end - start) / 2;
			if (arr.get(mid) > arr.get(mid + 1)) {
				end = mid;
			} 
			else {
				start = mid + 1;
			}
		}
		return start;
	}
}