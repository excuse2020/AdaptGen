class Solution {
	void amrit(int[] nums, int target, int s, List<List<Integer>> a, List<Integer> b) {
		if (target == 0) {
			a.add(new ArrayList<>(b));
			return;
		}
		for (int i = s; i < nums.length; i++) {
			if (s != i && nums[i] == nums[i - 1]) {
				continue;
			}
			if (nums[i] <= target) {
				b.add(nums[i]);
				amrit(nums,target - nums[i],i + 1,a,b);
				b.remove(b.size() - 1);
			}
		}
	}
	List<List<Integer>> combinationSum2(int[] candidates, int target) {
		Arrays.sort(candidates);
		List<List<Integer>> a = new ArrayList<>();
		List<Integer> b = new ArrayList<>();
		amrit(candidates,target,0,a,b);
		return a;
	}
}