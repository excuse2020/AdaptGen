class Solution {
	void dfs(char[][] board, int x, int y) {
		if (x < 0 || x >= board.length || y < 0 || y >= board[0].length || board[x][y] != 'O') {
			return;
		}
		if (board[x][y] == 'O') {
			board[x][y] = 'A';
		}
		dfs(board,x - 1,y);
		dfs(board,x,y + 1);
		dfs(board,x + 1,y);
		dfs(board,x,y - 1);
	}
	char[][] surroundedArea(char[][] board) {
		int n = board.length;
		int m = board[0].length;
		for (int i = 0; i < n; i++) {
			dfs(board,i,0);
			dfs(board,i,m - 1);
		}
		for (int j = 0; j < m; j++) {
			dfs(board,0,j);
			dfs(board,n - 1,j);
		}
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < m; j++) {
				if (board[i][j] == 'O') {
					board[i][j] = 'X';
				}
				if (board[i][j] == 'A') {
					board[i][j] = 'O';
				}
			}
		}
		return board;
	}
}