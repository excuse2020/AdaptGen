class Solution {
	List<List<Integer>> combinationSum2(int[] candidates, int target) {
		Arrays.sort(candidates);
		List<List<Integer>> lists = new ArrayList<>();
		List<Integer> list = new ArrayList<>();
		combinations(candidates,lists,list,target,0);
		return lists;
	}
	void combinations(int[] nums, List<List<Integer>> lists, List<Integer> list, int target, int i) {
		if (target == 0) {
			lists.add(new ArrayList(list));
			return;
		} 
		else if (target < 0 || i == nums.length) {
			return;
		}
		target -= nums[i];
		list.add(nums[i]);
		combinations(nums,lists,list,target,i + 1);
		while (i + 1 < nums.length && nums[i] == nums[i + 1]) {
			i++;
		}
		target += nums[i];
		list.remove(list.size() - 1);
		combinations(nums,lists,list,target,i + 1);
	}
}