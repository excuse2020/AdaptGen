class Solution {
	int minTime(int n, int[][] edges, List<Boolean> hasApple) {
		if (edges.length == 0) {
			return 0;
		}
		Map<Integer, List<Integer>> edgeMap = new HashMap<>();
		for (int[] edge: edges) {	
			List<Integer> list = edgeMap.getOrDefault(edge[0],new ArrayList<>());
			list.add(edge[1]);
			edgeMap.put(edge[0],list);
			list = edgeMap.getOrDefault(edge[1],new ArrayList<>());
			list.add(edge[0]);
			edgeMap.put(edge[1],list);
		}
		int[] parent = new int[n];
		Queue<Integer> queue = new LinkedList<>();
		queue.offer(0);
		int step = 0;
		Map<Integer, Set<Integer>> stepMap = new HashMap<>();
		for (int i = 1; i < parent.length; i++) {
			parent[i] = i;
		}
		while (!queue.isEmpty()) {
			int queueSize = queue.size();
			Set<Integer> set = new HashSet<>();
			for (int i = 0; i < queueSize; i++) {
				int num = queue.poll();
				set.add(num);
				for (int child: edgeMap.get(num)) {	
					if (parent[child] == child && child != parent[num]) {
						parent[child] = num;
						queue.offer(child);
					}
				}
			}
			stepMap.put(++step,set);
		}
		int[] steps = new int[n];
		while (step > 1) {
			for (int num: stepMap.get(step)) {	
				if (hasApple.get(num) || steps[num] != 0) {
					steps[parent[num]] += steps[num] + 2;
				}
			}
			step--;
		}
		return steps[0];
	}
}