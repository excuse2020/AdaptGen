class Solution {
	ArrayList<Integer> in = new ArrayList<Integer>();
	ArrayList<Integer> post = new ArrayList<Integer>();
	ArrayList<Integer> pre = new ArrayList<Integer>();
	void inOrderRecur(TreeNode root) {
		if (root == null) {
			return;
		}
		inOrderRecur(root.left);
		in.add(root.val);
		inOrderRecur(root.right);
	}
	void posOrderRecur(TreeNode root) {
		if (root == null) {
			return;
		}
		posOrderRecur(root.left);
		posOrderRecur(root.right);
		post.add(root.val);
	}
	void preOrderRecur(TreeNode root) {
		if (root == null) {
			return;
		}
		pre.add(root.val);
		preOrderRecur(root.left);
		preOrderRecur(root.right);
	}
	int[][] threeOrders(TreeNode root) {
		ArrayList<ArrayList<Integer>> res = new ArrayList<>();
		preOrderRecur(root);
		inOrderRecur(root);
		posOrderRecur(root);
		res.add(new ArrayList(pre));
		res.add(new ArrayList(in));
		res.add(new ArrayList(post));
		int[][] ans = new int[res.size()][res.get(0).size()];
		for (int i = 0; i < res.size(); i++) {
			for (int j = 0; j < res.get(0).size(); j++) {
				ans[i][j] = res.get(i).get(j);
			}
		}
		return ans;
	}
}