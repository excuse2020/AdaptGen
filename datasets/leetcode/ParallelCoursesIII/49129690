class Solution {
	int minimumTime(int n, int[][] relations, int[] time) {
		List<Integer>[] adjacents = new List[n + 1];
		int[] dependencies = new int[n + 1];
		for (int[] relation: relations) {	
			if (adjacents[relation[0]] == null) {
				adjacents[relation[0]] = new ArrayList<>();
			}
			adjacents[relation[0]].add(relation[1]);
			dependencies[relation[1]]++;
		}
		Queue<Integer> queue = new LinkedList<>();
		int[] costs = new int[n + 1];
		for (int i = 1; i < dependencies.length; ++i) {
			if (dependencies[i] == 0) {
				queue.offer(i);
				costs[i] = time[i - 1];
			}
		}
		while (!queue.isEmpty()) {
			int size = queue.size();
			for (int i = 0; i < size; ++i) {
				int curr = queue.poll();
				for (int j = 0; adjacents[curr] != null && j < adjacents[curr].size(); ++j) {
					int next = adjacents[curr].get(j);
					costs[next] = Math.max(costs[next],costs[curr] + time[next - 1]);
					if (--dependencies[next] == 0) {
						queue.offer(next);
					}
				}
			}
		}
		int result = 0;
		for (int i = 0; i <= n; ++i) {
			if (adjacents[i] == null) {
				result = Math.max(result,costs[i]);
			}
		}
		return result;
	}
}