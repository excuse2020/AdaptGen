class Solution {
	boolean canFinish(int numCourses, int[][] prerequisites) {
		Map<Integer, List<Integer>> adjList = new HashMap<>();
		for (int[] prerequisite: prerequisites) {	
			int course = prerequisite[0];
			int prerequisiteCourse = prerequisite[1];
			adjList.computeIfAbsent(course,(key) -> {new ArrayList<>()}).add(prerequisiteCourse);
		}
		boolean[] visited = new boolean[numCourses];
		boolean[] visiting = new boolean[numCourses];
		for (int course = 0; course < numCourses; course++) {
			if (!visited[course] && hasCycle(adjList,course,visited,visiting)) {
				return false;
			}
		}
		return true;
	}
	boolean hasCycle(Map<Integer, List<Integer>> adjList, int course, boolean[] visited, boolean[] visiting) {
		if (visiting[course]) {
			return true;
		}
		visiting[course] = true;
		List<Integer> prerequisites = adjList.get(course);
		if (prerequisites != null) {
			for (int prerequisite: prerequisites) {	
				if (!visited[prerequisite] && hasCycle(adjList,prerequisite,visited,visiting)) {
					return true;
				}
			}
		}
		visiting[course] = false;
		visited[course] = true;
		return false;
	}
}