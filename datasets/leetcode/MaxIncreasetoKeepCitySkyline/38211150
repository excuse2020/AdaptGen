class Solution {
	int maxColumn(int[][] arr, int index) {
		int max = 0;
		for (int row = 0; row < arr.length; row++) {
			max = Math.max(max,arr[row][index]);
		}
		return max;
	}
	int maxIncreaseKeepingSkyline(int[][] grid) {
		int sum = 0, max = 0;
		for (int row = 0; row < grid.length; row++) {
			int rowMax = maxRow(grid,row);
			for (int column = 0; column < grid[row].length; column++) {
				int columnMax = maxColumn(grid,column);
				if (rowMax < columnMax) {
					sum += (rowMax - grid[row][column]);
					grid[row][column] = rowMax;
				} 
				else {
					sum += (columnMax - grid[row][column]);
					grid[row][column] = columnMax;
				}
				max = Math.max(max,sum);
			}
		}
		return max;
	}
	int maxRow(int[][] arr, int index) {
		int max = 0;
		for (int column = 0; column < arr.length; column++) {
			max = Math.max(max,arr[index][column]);
		}
		return max;
	}
}