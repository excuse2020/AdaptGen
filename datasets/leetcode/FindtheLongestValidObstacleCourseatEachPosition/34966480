class Solution {
	int binarySearch(List<Integer> subsequence, int num) {
		if (subsequence.size() == 0) {
			subsequence.add(num);
			return 1;
		} 
		else if (subsequence.get(subsequence.size() - 1) <= num) {
			subsequence.add(num);
			return subsequence.size();
		}
		int lo = 0;
		int hi = subsequence.size() - 1;
		while (lo <= hi) {
			int mid = lo + (hi - lo) / 2;
			if (subsequence.get(mid) <= num) {
				lo = mid + 1;
			} 
			else {
				hi = mid - 1;
			}
		}
		subsequence.set(lo,num);
		return lo + 1;
	}
	int[] longestObstacleCourseAtEachPosition(int[] obstacles) {
		int n = obstacles.length;
		int res = new int[n];
		List<Integer> subsequence = new ArrayList<>();
		for (int i = 0; i < n; i++) {
			res[i] = binarySearch(subsequence,obstacles[i]);
		}
		return res;
	}
}