class Solution {
	HashMap<String, Integer> mp = new HashMap<>();
	List<String> res = new ArrayList<>();
	void backtrack(int mr, String s) {
		if (mp.containsKey(s)) {
			return;
		} 
		else {
			mp.put(s,mp.getOrDefault(s,0) + 1);
		}
		if (mr < 0) {
			return;
		}
		if (mr == 0) {
			if (getMin(s) == 0) {
				res.add(s);
			}
			return;
		}
		String left, right;
		for (int i = 0; i < s.length(); i++) {
			left = s.substring(0,i);
			right = s.substring(i + 1);
			backtrack(mr - 1,left + right);
		}
		return;
	}
	int getMin(String s) {
		Stack<Character> stck = new Stack<>();
		int i = 0;
	}
	List<String> removeInvalidParentheses(String s) {
		int minRemovals = getMin(s);
		backtrack(minRemovals,s);
		return res;
	}
}