class Solution {
	int closestMeetingNode(int[] edges, int node1, int node2) {
		int ans = -1;
		int distance = Integer.MAX_VALUE;
		int n = edges.length;
		int[] arr = new int[n];
		Arrays.fill(arr,-1);
		int[] arr2 = new int[n];
		Arrays.fill(arr2,-1);
		dfs(edges,arr,node1,0);
		dfs(edges,arr2,node2,0);
		for (int i = 0; i < n; i++) {
			if (arr[i] != -1 && arr2[i] != -1 && distance > Math.max(arr[i],arr2[i])) {
				distance = Math.max(arr[i],arr2[i]);
				ans = i;
			}
		}
		return ans;
	}
	void dfs(int[] list, int[] arr, int node, int dist) {
		if (node == -1 || arr[node] != -1) {
			return;
		}
		arr[node] = dist;
		dfs(list,arr,list[node],dist + 1);
	}
}