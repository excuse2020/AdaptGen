class Solution {
	int dp;
	int mod = 1000000007;
	int beautifulPartitions(String s, int k, int minLength) {
		dp = new int[s.length() + 4][k + 4];
		for (int i = 0; i < s.length(); i++) {
			Arrays.fill(dp[i],-1);
		}
		return fun(s,k,minLength,0,s.length(),0);
	}
	int fun(String s, int k, int minL, int cur, int n, int part) {
		if (cur >= n) {
			if (part == k) {
				return 1;
			}
			return 0;
		}
		if (!isPrime(s.charAt(cur))) {
			return 0;
		}
		if (part >= k) {
			return 0;
		}
		if (dp[cur][part] != -1) {
			return dp[cur][part];
		}
		int ans = 0;
		for (int i = cur + minL - 1; i < n; i++) {
			if (!isPrime(s.charAt(i))) {
				ans = (ans + fun(s,k,minL,i + 1,n,part + 1)) % mod;
			}
		}
		return dp[cur][part] = ans;
	}
	boolean isPrime(char a) {
	}
}