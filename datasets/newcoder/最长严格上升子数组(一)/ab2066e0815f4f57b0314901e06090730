class Solution {
	int F(int[] nums) {
		if (nums.length == 1) {
			return 1;
		}
		int dp = new int[nums.length];
		dp[0] = 1;
		int max = 1;
		for (int i = 1; i < nums.length; i++) {
			dp[i] = nums[i] > nums[i - 1] ? dp[i - 1] + 1 : 1;
		}
		for (int i: dp) {	
			max = Math.max(max,i);
		}
		return max;
	}
	int maxSubArrayLengthTwo(int[] nums) {
		int max = F(nums);
		int tmp = 0;
		for (int i = 1; i < nums.length; i++) {
			if (nums[i] > nums[i - 1]) {
				continue;
			}
			tmp = nums[i];
			nums[i] = nums[i - 1] + 1;
			max = Math.max(max,F(nums));
			nums[i] = tmp;
			if (nums[i] > 1) {
				tmp = nums[i - 1];
				nums[i - 1] = nums[i] - 1;
				max = Math.max(max,F(nums));
				nums[i - 1] = tmp;
			}
		}
		return max;
	}
}