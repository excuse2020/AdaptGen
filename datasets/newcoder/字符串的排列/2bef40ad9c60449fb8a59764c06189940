class Solution {
	ArrayList<String> Permutation(String str) {
		char[] arr = str.toCharArray();
		Arrays.sort(arr);
		str = new String(arr);
		ArrayList<String> ans = new ArrayList<>();
		boolean[] vis = new boolean[str.length()];
		dfs(str,0,ans,new StringBuilder(),vis);
		return ans;
	}
	void dfs(String s, int pos, ArrayList<String> ans, StringBuilder sb, boolean vis) {
		if (pos == s.length()) {
			ans.add(sb.toString());
			return;
		}
		for (int i = 0; i < s.length(); i++) {
			if (vis[i]) {
				continue;
			}
			if (i > 0 && s.charAt(i) == s.charAt(i - 1) && !vis[i - 1]) {
				continue;
			}
			sb.append(s.charAt(i));
			vis[i] = true;
			dfs(s,pos + 1,ans,sb,vis);
			sb.deleteCharAt(sb.length() - 1);
			vis[i] = false;
		}
	}
}