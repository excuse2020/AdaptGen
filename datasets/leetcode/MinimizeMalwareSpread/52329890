class Solution {
	int minMalwareSpread(int[][] graph, int[] initial) {
		DSU ds = new DSU();
		for (int i = 0; i < graph.length; i++) {
			ds.create(i);
		}
		for (int i = 0; i < graph.length; i++) {
			for (int j = i + 1; j < graph.length; j++) {
				if (graph[i][j] == 1) {
					ds.union(i,j);
				}
			}
		}
		int count = new int[graph.length];
		for (int node: initial) {	
			count[ds.find(node)]++;
		}
		int ans = -1;
		int anssize = -1;
		for (int i = 0; i < initial.length; i++) {
			int node = ds.find(initial[i]);
			if (count[node] == 1) {
				int cursize = ds.size(node);
				if (cursize > anssize) {
					ans = initial[i];
					anssize = cursize;
				} 
				else if (cursize == anssize) {
					ans = Math.min(ans,initial[i]);
					anssize = cursize;
				}
			}
		}
		if (ans == -1) {
			ans = Integer.MAX_VALUE;
			for (int i = 0; i < initial.length; i++) {
				ans = Math.min(initial[i],ans);
			}
			return ans;
		}
		return ans;
	}
	class DSU {
		HashMap<Integer, Node> map = new HashMap<>();
		void create(int v) {
			Node nn = new Node();
			nn.vtx = v;
			nn.parent = nn;
			nn.rank = 1;
			map.put(v,nn);
		}
		int find(int v) {
			Node nn = map.get(v);
			return find(nn).vtx;
		}
		Node find(Node nn) {
			if (nn.parent == nn) {
				return nn;
			}
			Node ren = find(nn.parent);
			nn.parent = ren;
			return ren;
		}
		int size(int v) {
			Node nn = map.get(v);
			return find(nn).rank;
		}
		void union(int v1, int v2) {
			Node n1 = map.get(v1);
			Node n2 = map.get(v2);
			Node ren1 = find(n1);
			Node ren2 = find(n2);
			if (ren1 != ren2) {
				if (ren1.rank > ren2.rank) {
					ren2.parent = ren1;
					ren1.rank += ren2.rank;
				} 
				else {
					ren1.parent = ren2;
					ren2.rank += ren1.rank;
				}
			}
		}
		class Node {
			Node parent;
			int rank;
			int vtx;
		}
	}
}