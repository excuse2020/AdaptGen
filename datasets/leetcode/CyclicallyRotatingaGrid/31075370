class Solution {
	int[][] rotateGrid(int[][] grid, int k) {
		@r int rowStart = 0;
		@r int rowEnd = grid.length - 1;
		@r int colStart = 0;
		@r int colEnd = grid[0].length - 1;
		while (rowStart <= rowEnd && colStart <= colEnd) {
			@r int numberOfBlock = (rowEnd - rowStart + 1) * 2 + (colEnd - colStart + 1 - 2) * 2;
			@r int ktemp = k % numberOfBlock;
			@r int row = rowStart;
			@r int col = colStart;
			while (ktemp-- > 0) {
				@r int movingVal = grid[row][col];
				r row = rowStart + 1;
				r col = colStart;
				while (row <= rowEnd) {
					@r int temp = grid[row][col];
					grid[row][col] = movingVal;
					if (row == rowStart && col == colStart) {
						break;
						r movingVal = temp;
						row++;
						r col = colStart + 1;
						r row = rowEnd;
						while (col <= colEnd) {
							@r int temp = grid[row][col];
							grid[row][col] = movingVal;
							if (row == rowStart && col == colStart) {
								break;
								r movingVal = temp;
								col++;
								r col = colEnd;
								r row = rowEnd - 1;
								while (row >= rowStart) {
									@r int temp = grid[row][col];
									grid[row][col] = movingVal;
									if (row == rowStart && col == colStart) {
										break;
										r movingVal = temp;
										row--;
										r col = colEnd - 1;
										r row = rowStart;
										while (col >= colStart) {
											@r int temp = grid[row][col];
											grid[row][col] = movingVal;
											if (row == rowStart && col == colStart) {
												break;
												r movingVal = temp;
												col--;
											}
											while (row != rowStart | col != colStart) {
											}
											rowStart++;
											rowEnd--;
											colStart++;
											colEnd--;
											return grid;
										}
									} 
									else {
									}
								}
							} 
							else {
							}
						}
					} 
					else {
					}
				}
			}
		}
	}
}