class Solution {
	ListNode preNode = null;
	ListNode ReverseN(ListNode node, int n) {
		if (n == 1) {
			preNode = node.next;
			return node;
		}
		ListNode newNode = ReverseN(node.next,--n);
		node.next.next = node;
		node.next = preNode;
		return newNode;
	}
	ListNode partReverse(ListNode node, int m, int n) {
		if (m == 1) {
			return ReverseN(node,n);
		}
		node.next = partReverse(node.next,--m,--n);
		return node;
	}
	ListNode reverseBetween(ListNode head, int m, int n) {
		return partReverse(head,m,n);
	}
}