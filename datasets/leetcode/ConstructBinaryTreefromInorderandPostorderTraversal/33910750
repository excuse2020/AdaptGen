class Solution {
	TreeNode buildTree(int[] inorder, int[] postorder) {
		if (inorder == null || postorder == null || inorder.length != postorder.length) {
			return null;
		}
		Map<Integer, Integer> inMap = new HashMap<>();
		for (int i = 0; i < inorder.length; i++) {
			inMap.put(inorder[i],i);
		}
		return buildTree(inorder,0,inorder.length - 1,postorder,0,postorder.length - 1,inMap);
	}
	TreeNode buildTree(int inorder, int inStart, int inEnd, int postorder, int posStart, int posEnd, Map<Integer, Integer> inMap) {
		if (inStart > inEnd || posStart > posEnd) {
			return null;
		}
		TreeNode root = new TreeNode(postorder[posEnd]);
		int posRoot = inMap.get(postorder[posEnd]);
		int numsLeft = posRoot - inStart;
		root.left = buildTree(inorder,inStart,posRoot - 1,postorder,posStart,posStart + numsLeft - 1,inMap);
		root.right = buildTree(inorder,posRoot + 1,inEnd,postorder,posStart + numsLeft,posEnd - 1,inMap);
		return root;
	}
}