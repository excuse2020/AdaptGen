class Solution {
	int MOD = 1000000007;
	int m, n;
	int dfs(int row, int col, int k, int[][][] dp, int[][] appleCounts) {
		if (k == 0) {
			return appleCounts[row][col] > 0 ? 1 : 0;
		}
		if (dp[row][col][k] != -1) {
			return dp[row][col][k];
		}
		int count = 0;
		for (int i = row + 1; i < m; i++) {
			if (appleCounts[row][col] > appleCounts[i][col] && appleCounts[i][col] > 0) {
				count = (count + dfs(i,col,k - 1,dp,appleCounts)) % MOD;
			}
		}
		for (int j = col + 1; j < n; j++) {
			if (appleCounts[row][col] > appleCounts[row][j] && appleCounts[row][j] > 0) {
				count = (count + dfs(row,j,k - 1,dp,appleCounts)) % MOD;
			}
		}
		return dp[row][col][k] = count;
	}
	int ways(String[] pizza, int k) {
		m = pizza.length;
		n = pizza[0].length();
		int[][] appleCounts = new int[m][n];
		int i = m - 1;
		int count = 0;
		int j = n - 1;
	}
}