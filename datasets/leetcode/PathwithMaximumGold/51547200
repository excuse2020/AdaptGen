class Solution {
	int backtrack(int[][] grid, int i, int j) {
		if (i < 0 || i >= grid.length || j < 0 || j >= grid[0].length || grid[i][j] == 0) {
			return 0;
		}
		int currentGold = grid[i][j];
		grid[i][j] = 0;
		int maxGold = 0;
		maxGold = Math.max(maxGold,currentGold + backtrack(grid,i + 1,j));
		maxGold = Math.max(maxGold,currentGold + backtrack(grid,i - 1,j));
		maxGold = Math.max(maxGold,currentGold + backtrack(grid,i,j + 1));
		maxGold = Math.max(maxGold,currentGold + backtrack(grid,i,j - 1));
		grid[i][j] = currentGold;
		return maxGold;
	}
	int getMaximumGold(int[][] grid) {
		int maxGold = 0;
		for (int i = 0; i < grid.length; i++) {
			for (int j = 0; j < grid[0].length; j++) {
				if (grid[i][j] != 0) {
					maxGold = Math.max(maxGold,backtrack(grid,i,j));
				}
			}
		}
		return maxGold;
	}
}