class Solution {
	int maxArea(int h, int w, int[] horizontalCuts, int[] verticalCuts) {
		long maxH = 0, maxV = 0;
		int lh = horizontalCuts.length;
		int lv = verticalCuts.length;
		Arrays.sort(horizontalCuts);
		Arrays.sort(verticalCuts);
		if (lh == 1) {
			maxH = Math.max(h - horizontalCuts[0],horizontalCuts[0] - 0);
			System.out.println(maxH);
		} 
		else {
			int s = 0, ms = 0;
			int a = horizontalCuts[0] - 0;
			int b = h - horizontalCuts[lh - 1];
			int m = Math.max(a,b);
			for (int i = 0; i < lh - 1; i++) {
				int c = horizontalCuts[i + 1] - horizontalCuts[i];
				s = Math.max(c,m);
				ms = Math.max(s,ms);
			}
			maxH = Math.max(ms,maxH);
		}
		if (lv == 1) {
			maxV = Math.max(w - verticalCuts[0],verticalCuts[0] - 0);
			System.out.println(maxV);
		} 
		else {
			int s = 0, ms = 0;
			int a = verticalCuts[0] - 0;
			int b = w - verticalCuts[lv - 1];
			int m = Math.max(a,b);
			for (int i = 0; i < lv - 1; i++) {
				int c = verticalCuts[i + 1] - verticalCuts[i];
				s = Math.max(c,m);
				ms = Math.max(s,ms);
			}
			maxV = Math.max(ms,maxV);
		}
		return (int) ((maxH * maxV) % 1000000007);
	}
}