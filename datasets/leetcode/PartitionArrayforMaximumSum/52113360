class Solution {
	int help(int[] arr, int i, int k, int[] dp) {
		if (i == arr.length) {
			return 0;
		}
		if (dp[i] != -1) {
			return dp[i];
		}
		int ans = Integer.MIN_VALUE, max_value = Integer.MIN_VALUE, len = 0;
		for (int j = i; j < Math.min(arr.length,i + k); j++) {
			len++;
			max_value = Math.max(max_value,arr[j]);
			int max = max_value * len + help(arr,j + 1,k,dp);
			ans = Math.max(max,ans);
		}
		return dp[i] = ans;
	}
	int maxSumAfterPartitioning(int[] arr, int k) {
		int[] dp = new int[arr.length];
		Arrays.fill(dp,-1);
		return help(arr,0,k,dp);
	}
}