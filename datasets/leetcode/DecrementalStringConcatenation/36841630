class Solution {
	String join(String x, String y) {
		if (x.isEmpty() || y.isEmpty()) {
			return x + y;
		}
		char lastCharX = x.charAt(x.length() - 1);
		char firstCharY = y.charAt(0);
		if (lastCharX == firstCharY) {
			StringBuilder sb = new StringBuilder(x.length() + y.length() - 1);
			sb.append(x).append(y.substring(1));
			return sb.toString();
		} 
		else {
			return x + y;
		}
	}
	int minimizeConcatenatedLength(String[] words) {
		int n = words.length;
		return solve(0,"",words);
	}
	int solve(int n, String x, String[] arr) {
		if (n > arr.length - 1) {
			return x.length();
		}
		int join = solve(n + 1,join(x,arr[n]),arr);
		int revjoin = solve(n + 1,join(arr[n],x),arr);
		return Math.min(join,revjoin);
	}
}