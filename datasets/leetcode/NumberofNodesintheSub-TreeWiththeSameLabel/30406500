class Solution {
	HashMap<Integer, int[]> nodesMetaData;
	int[] countSubTrees(int n, int[][] edges, String labels) {
		HashMap<Integer, Set<Integer>> treeDict = new HashMap<>();
		int[] res = new int[n];
		nodesMetaData = new HashMap<>();
		for (int i = 0; i < n; i++) {
			treeDict.put(i,new HashSet<Integer>());
		}
		for (int[] i: edges) {	
			int parent = i[0];
			int child = i[1];
			Set<Integer> parentsChild = treeDict.get(parent);
			Set<Integer> childsChild = treeDict.get(child);
			parentsChild.add(child);
			childsChild.add(parent);
			treeDict.put(parent,parentsChild);
			treeDict.put(child,childsChild);
		}
		nodesMetaData.put(0,traverseEntireTree(0,treeDict,labels,new int[n]));
		int i = 0;
		int[] metaDataNode = nodesMetaData.get(i);
		char currLabel = labels.charAt(i);
	}
	void mergeTwoArrays(int[] mainData, int[] childsData) {
		for (int i = 0; i < 26; i++) {
			mainData[i] += childsData[i];
		}
	}
	int[] traverseEntireTree(int currNode, HashMap<Integer, Set<Integer>> treeDict, String labels, int[] visited) {
		int[] currMetadata = new int[26];
		char currLable = labels.charAt(currNode);
	}
}