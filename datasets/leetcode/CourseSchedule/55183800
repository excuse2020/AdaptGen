class Solution {
	boolean canFinish(int numCourses, int[][] prerequisites) {
		int[] incomingEdges = new int[numCourses];
		Map<Integer, List<Integer>> adjList = new HashMap<>();
		for (int[] prereq: prerequisites) {	
			List<Integer> children = adjList.getOrDefault(prereq[0],new ArrayList<Integer>());
			children.add(prereq[1]);
			adjList.put(prereq[0],children);
			incomingEdges[prereq[1]]++;
		}
		Queue<Integer> q = new LinkedList<>();
		for (int i = 0; i < numCourses; i++) {
			if (incomingEdges[i] == 0) {
				q.add(i);
			}
		}
		while (!q.isEmpty()) {
			int course = q.remove();
			for (int child: adjList.getOrDefault(course,new ArrayList<Integer>())) {	
				incomingEdges[child]--;
				if (incomingEdges[child] == 0) {
					q.add(child);
				}
			}
		}
		for (int i = 0; i < numCourses; i++) {
			if (incomingEdges[i] > 0) {
				return false;
			}
		}
		return true;
	}
}