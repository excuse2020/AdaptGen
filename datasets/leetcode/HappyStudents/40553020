class Solution {
	int countWays(List<Integer> nums) {
		Map<Integer, Integer> countMap = new HashMap<>();
		for (int num: nums) {	
			countMap.put(num,countMap.getOrDefault(num,0) + 1);
		}
		PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> {a[0] - b[0]});
		for (Map.Entry<Integer, Integer> entry: countMap.entrySet()) {	
			int key = entry.getKey();
			int count = entry.getValue();
			pq.offer(new int{key, count});
		}
		int happyStudents = 0;
		int count = 0;
		if (count < pq.peek()[0]) {
			happyStudents++;
		}
		while (!pq.isEmpty()) {
			int[] curr = pq.poll();
			count += curr[1];
			if (pq.size() > 0 && (count > curr[0] && count < pq.peek()[0])) {
				happyStudents++;
			} 
			else if (pq.size() == 0 && count > curr[0]) {
				happyStudents++;
			}
		}
		return happyStudents;
	}
}