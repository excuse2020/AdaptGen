class Solution {
	int[] getNSL(int[] arr, int n) {
		int[] res = new int[n];
		Stack<Integer> stk = new Stack<>();
		for (int i = 0; i < n; i++) {
			while (!stk.isEmpty() && arr[stk.peek()] > arr[i]) {
				stk.pop();
			}
			res[i] = stk.isEmpty() ? -1 : stk.peek();
			stk.push(i);
		}
		return res;
	}
	int[] getNSR(int[] arr, int n) {
		int[] res = new int[n];
		Stack<Integer> stk = new Stack();
		for (int i = n - 1; i >= 0; i--) {
			while (!stk.isEmpty() && arr[stk.peek()] >= arr[i]) {
				stk.pop();
			}
			res[i] = stk.isEmpty() ? n : stk.peek();
			stk.push(i);
		}
		return res;
	}
	int sumSubarrayMins(int[] arr) {
		int m = 1000000007;
		int n = arr.length;
		int[] nsl = getNSL(arr,n);
		int[] nsr = getNSR(arr,n);
		long totSum = 0;
		for (int i = 0; i < n; i++) {
			long d1 = i - nsl[i];
			long d2 = nsr[i] - i;
			long totWays = d1 * d2;
			long sum = arr[i] * totWays;
			totSum = (totSum + sum) % m;
		}
		return (int) totSum;
	}
}