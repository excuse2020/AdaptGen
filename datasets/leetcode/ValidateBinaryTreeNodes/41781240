class Solution {
	boolean validateBinaryTreeNodes(int n, int[] leftChild, int[] rightChild) {
		HashSet<Integer> visited = new HashSet<>();
		HashSet<Integer> src = new HashSet<>();
		for (int i = 0; i < n; i++) {
			if (leftChild[i] != -1) {
				src.add(leftChild[i]);
			}
			if (rightChild[i] != -1) {
				src.add(rightChild[i]);
			}
		}
		if (src.size() != n - 1) {
			return false;
		}
		for (int i = 0; i < n; i++) {
			if (!src.contains(i)) {
				boolean ans = vbt(leftChild,rightChild,visited,i);
				if (visited.size() == n) {
					return ans;
				}
				return false;
			}
		}
		return false;
	}
	boolean vbt(int[] leftChild, int[] rightChild, HashSet<Integer> visited, int src) {
		if (src == -1) {
			return true;
		}
		if (visited.contains(src)) {
			return false;
		}
		visited.add(src);
		return vbt(leftChild,rightChild,visited,leftChild[src]) && vbt(leftChild,rightChild,visited,rightChild[src]);
	}
}