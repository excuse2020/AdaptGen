class Solution {
	int MAX_AMOUNT = 1000;
	int MIN_IN_HOUR = 60;
	record Transaction(String name, int time, int amount, String city) {
	}
	Transaction createFromRaw(String rawTransaction) {
		String[] parts = rawTransaction.split(",");
		return new Transaction(parts[0], Integer.parseInt(parts[1]), Integer.parseInt(parts[2]), parts[3]);
	}
	boolean differentCity(Transaction first, Transaction second) {
		return !first.city().equals(second.city());
	}
	boolean inHour(Transaction first, Transaction second) {
		return Math.abs(first.time() - second.time()) <= MIN_IN_HOUR;
	}
	List<String> invalidTransactions(String[] transactions) {
		Map<String, List<Transaction>> personTransactions = new HashMap<>();
		List<String> invalid = new ArrayList<>();
		Transaction transaction = Transaction.createFromRaw(rawTransaction);
	}
	boolean isInvalid(Transaction transaction, List<Transaction> transactions) {
		if (transaction.amount >= MAX_AMOUNT) {
			return true;
		}
		for (Transaction anotherTransaction: transactions) {	
			if (differentCity(transaction,anotherTransaction) && inHour(transaction,anotherTransaction)) {
				return true;
			}
		}
		return false;
	}
}