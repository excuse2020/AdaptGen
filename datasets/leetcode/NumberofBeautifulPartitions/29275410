class Solution {
	int MOD = (int) Math.pow(10,9) + 7;
	int[][] dp;
	int beautifulPartitions(String s, int k, int minLength) {
		dp = new int[s.length() + 1][s.length()];
		for (int[] dpObj: dp) {	
			Arrays.fill(dpObj,-1);
		}
		return isPrime(s.charAt(0)) && !isPrime(s.charAt(s.length() - 1)) ? solveRec(s,minLength,k - 1,minLength) : 0;
	}
	boolean isPrime(char c) {
	}
	int solveRec(String s, int ind, int k, int minLength) {
		if (k == 0 && ind <= s.length()) {
			return 1;
		}
		if (ind >= s.length()) {
			return 0;
		}
		if (dp[ind][k] != -1) {
			return dp[ind][k];
		}
		int ways = 0;
		if (isPrime(s.charAt(ind)) && !isPrime(s.charAt(ind - 1))) {
			ways = solveRec(s,ind + minLength,k - 1,minLength) % MOD;
		}
		ways += solveRec(s,ind + 1,k,minLength) % MOD;
		return dp[ind][k] = ways % MOD;
	}
}