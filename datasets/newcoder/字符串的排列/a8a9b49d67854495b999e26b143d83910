class Solution {
	ArrayList<String> Permutation(String str) {
		ArrayList<String> res = new ArrayList<>();
		if (str == null) {
			return res;
		}
		int len = str.length();
		boolean[] used = new boolean[str.length()];
		StringBuilder word = new StringBuilder();
		Set<String> set = new HashSet<>();
		dfs(str,0,len,word,res,used,set);
		return res;
	}
	void dfs(String str, int count, int len, StringBuilder word, ArrayList<String> res, boolean[] used, Set<String> set) {
		if (count == len) {
			if (!set.contains(word.toString())) {
				res.add(word.toString());
				set.add(word.toString());
			}
			return;
		}
		for (int i = 0; i < len; i++) {
			if (!used[i]) {
				word.append(str.charAt(i));
				used[i] = true;
				dfs(str,count + 1,len,word,res,used,set);
				word.deleteCharAt(word.length() - 1);
				used[i] = false;
			}
		}
	}
}