class Solution {
	int MOD = 1000000007;
	int count = 0;
	int InversePairs(int[] nums) {
		if (nums == null || nums.length == 0) {
			return 0;
		}
		mergeSort(nums,0,nums.length - 1);
		return count;
	}
	void merge(int[] nums, int start, int mid, int end) {
		int[] temp = new int[end - start + 1];
		int i = start, j = mid + 1, k = 0;
		while (i <= mid && j <= end) {
			if (nums[i] > nums[j]) {
				count = (count + (mid - i + 1)) % MOD;
				temp[k++] = nums[j++];
			} 
			else {
				temp[k++] = nums[i++];
			}
		}
		while (i <= mid) {
			temp[k++] = nums[i++];
		}
		while (j <= end) {
			temp[k++] = nums[j++];
		}
		System.arraycopy(temp,0,nums,start,temp.length);
	}
	void mergeSort(int[] nums, int start, int end) {
		if (start >= end) {
			return;
		}
		int mid = (start + end) / 2;
		mergeSort(nums,start,mid);
		mergeSort(nums,mid + 1,end);
		merge(nums,start,mid,end);
	}
}