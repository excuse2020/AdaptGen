class Solution {
	ListNode Merge(ListNode pHead1, ListNode pHead2) {
		if (pHead1 == null) {
			return pHead2;
		}
		if (pHead2 == null) {
			return pHead1;
		}
		ListNode head = new ListNode(-1);
		ListNode current = head;
		while (pHead1 != null && pHead2 != null) {
			if (pHead1.val < pHead2.val) {
				current.next = new ListNode(pHead1.val);
				current = current.next;
				pHead1 = pHead1.next;
			} 
			else {
				current.next = new ListNode(pHead2.val);
				current = current.next;
				pHead2 = pHead2.next;
			}
		}
		while (pHead1 != null) {
			current.next = new ListNode(pHead1.val);
			current = current.next;
			pHead1 = pHead1.next;
		}
		while (pHead2 != null) {
			current.next = new ListNode(pHead2.val);
			current = current.next;
			pHead2 = pHead2.next;
		}
		return head.next;
	}
	ListNode divideMerge(ArrayList<ListNode> lists, int left, int right) {
		if (left > right) {
			return null;
		}
		if (left == right) {
			return lists.get(left);
		}
		int mid = (left + right) / 2;
		return Merge(divideMerge(lists,left,mid),divideMerge(lists,mid + 1,right));
	}
	ListNode mergeKLists(ArrayList<ListNode> lists) {
		return divideMerge(lists,0,lists.size() - 1);
	}
}