class Solution {
	int dfs(Map<Integer, List<Integer>> map, boolean[] visited, List<Boolean> hasApple, int index) {
		if (visited[index]) {
			return 0;
		}
		visited[index] = true;
		int count = 0;
		for (int i: map.get(index)) {	
			if (!visited[i]) {
				count += dfs(map,visited,hasApple,i);
			}
		}
		if (index == 0) {
			return count;
		}
		return count += (hasApple.get(index) || count > 0) ? 2 : 0;
	}
	int minTime(int n, int[][] edges, List<Boolean> hasApple) {
		Map<Integer, List<Integer>> map = new HashMap<>();
		if (edges.length == 0) {
			return 0;
		}
		for (int[] e: edges) {	
			map.computeIfAbsent(e[0],(k) -> {new ArrayList<Integer>()}).add(e[1]);
			map.computeIfAbsent(e[1],(k) -> {new ArrayList<Integer>()}).add(e[0]);
		}
		return dfs(map,new boolean[n],hasApple,0);
	}
}