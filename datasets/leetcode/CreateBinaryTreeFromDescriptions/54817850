class Solution {
	TreeNode createBinaryTree(int[][] descriptions) {
		HashMap<Integer, Boolean> rootMap = new HashMap<>();
		HashMap<Integer, TreeNode> tree = new HashMap<>();
		for (int[] subTree: descriptions) {	
			int root = subTree[0];
			int child = subTree[1];
			boolean isLeft = subTree[2] == 1;
			rootMap.put(child,false);
			if (!tree.containsKey(root)) {
				rootMap.put(root,true);
				tree.put(root,new TreeNode(root));
			}
			if (!tree.containsKey(child)) {
				tree.put(child,new TreeNode(child));
			}
			if (isLeft) {
				tree.get(root).left = tree.get(child);
			} 
			else {
				tree.get(root).right = tree.get(child);
			}
		}
		for (Integer key: rootMap.keySet()) {	
			if (rootMap.get(key)) {
				return tree.get(key);
			}
		}
		return null;
	}
}