class Solution {
	boolean isValid(char[][] board, int row, int col, char num) {
		int n = board.length;
		for (int j = 0; j < n; j++) {
			if (board[row][j] == num) {
				return false;
			}
		}
		for (int i = 0; i < n; i++) {
			if (board[i][col] == num) {
				return false;
			}
		}
		int sRow = row / 3 * 3;
		int sCol = col / 3 * 3;
		for (int i = sRow; i < sRow + 3; i++) {
			for (int j = sCol; j < sCol + 3; j++) {
				if (board[i][j] == num) {
					return false;
				}
			}
		}
		return true;
	}
	void solve(char[][] board, int row, int col, char[][] grid) {
		int n = board.length;
		if (row == n) {
			for (int i = 0; i < n; i++) {
				for (int j = 0; j < n; j++) {
					grid[i][j] = board[i][j];
				}
			}
			return;
		}
	}
	void solveSudoku(char[][] board) {
		int n = board.length;
		char[][] grid = new char[n][n];
		solve(board,0,0,grid);
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < n; j++) {
				board[i][j] = grid[i][j];
			}
		}
	}
}