class Solution {
	int minFallingPathSum(int[][] matrix) {
		int m = matrix.length;
		int n = matrix[0].length;
		int[][] dp = new int[m][n];
		return minFallingpath(matrix,m,n,dp);
	}
	int minFallingpath(int[][] matrix, int m, int n, int[][] dp) {
		for (int i = 0; i < m; i++) {
			for (int j = 0; j < n; j++) {
				if (i == 0) {
					dp[0][j] = matrix[0][j];
				} 
				else if (j == 0) {
					dp[i][j] = matrix[i][j] + Math.min(dp[i - 1][j],dp[i - 1][j + 1]);
				} 
				else if (j == (n - 1)) {
					dp[i][j] = matrix[i][j] + Math.min(dp[i - 1][j],dp[i - 1][j - 1]);
				} 
				else {
					dp[i][j] = matrix[i][j] + Math.min(Math.min(dp[i - 1][j],dp[i - 1][j + 1]),dp[i - 1][j - 1]);
				}
			}
		}
		int minTotal = dp[m - 1][0];
		for (int i = 1; i < n; i++) {
			minTotal = Math.min(minTotal,dp[m - 1][i]);
		}
		return minTotal;
	}
}