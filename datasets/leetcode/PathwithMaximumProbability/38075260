class Solution {
	double maxProbability(int n, int[][] edges, double[] succProb, int start_node, int end_node) {
		HashMap<Integer, HashMap<Integer, Integer>> map = new HashMap<>();
		for (int i = 0; i < edges.length; i++) {
			int[] edge = edges[i];
			if (!map.containsKey(edge[0])) {
				map.put(edge[0],new HashMap<>());
			}
			if (!map.containsKey(edge[1])) {
				map.put(edge[1],new HashMap<>());
			}
			map.get(edge[0]).put(edge[1],i);
			map.get(edge[1]).put(edge[0],i);
		}
		if (!map.containsKey(end_node)) {
			return 0.0;
		}
		double[] prob = new double[n];
		prob[start_node] = 1.0;
		Queue<Integer> q = new LinkedList<>();
		q.offer(start_node);
		while (!q.isEmpty()) {
			int cur = q.poll();
			if (!map.containsKey(cur)) {
				continue;
			}
			for (int nei: map.get(cur).keySet()) {	
				int index = map.get(cur).get(nei);
				if (prob[cur] * succProb[index] > prob[nei]) {
					prob[nei] = prob[cur] * succProb[index];
					q.offer(nei);
				}
			}
		}
		return prob[end_node];
	}
}