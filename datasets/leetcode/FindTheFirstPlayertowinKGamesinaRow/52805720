class Solution {
	int findWinningPlayer(int[] skills, int k) {
		Queue<Integer> q = new LinkedList<>();
		HashMap<Integer, Integer> scoreCountMap = new HashMap<>();
		int maxSkill = 0;
		int maxSkillIndex = 0;
		for (int i = 0; i < skills.length; i++) {
			q.add(skills[i]);
			scoreCountMap.put(skills[i],0);
			if (skills[i] > maxSkill) {
				maxSkill = skills[i];
				maxSkillIndex = i;
			}
		}
		int currentSkill = q.poll();
		while (currentSkill != maxSkill) {
			int nextSkill = q.poll();
			if (currentSkill > nextSkill) {
				q.add(nextSkill);
				scoreCountMap.put(currentSkill,scoreCountMap.get(currentSkill) + 1);
				if (scoreCountMap.get(currentSkill) == k) {
					for (int i = 0; i < skills.length; i++) {
						if (skills[i] == currentSkill) {
							return i;
						}
					}
				}
			} 
			else {
				q.add(currentSkill);
				scoreCountMap.put(nextSkill,scoreCountMap.get(nextSkill) + 1);
				if (scoreCountMap.get(nextSkill) == k) {
					for (int i = 0; i < skills.length; i++) {
						if (skills[i] == nextSkill) {
							return i;
						}
					}
				}
				currentSkill = nextSkill;
			}
		}
		return maxSkillIndex;
	}
}