class Solution {
	int rob(int[] nums) {
		if (nums.length == 1) {
			return nums[0];
		}
		int dp = new int[nums.length];
		Arrays.fill(dp,-1);
		int dp1 = new int[nums.length];
		Arrays.fill(dp1,-1);
		return Math.max(rob(nums,0,dp),rob1(nums,1,dp1));
	}
	int rob(int[] nums, int i, int[] dp) {
		if (i > nums.length - 2) {
			return 0;
		}
		if (dp[i] != -1) {
			return dp[i];
		}
		return dp[i] = Math.max(nums[i] + rob(nums,i + 2,dp),rob(nums,i + 1,dp));
	}
	int rob1(int[] nums, int i, int dp) {
		if (i >= nums.length) {
			return 0;
		}
		if (dp[i] != -1) {
			return dp[i];
		}
		return dp[i] = Math.max(nums[i] + rob1(nums,i + 2,dp),rob1(nums,i + 1,dp));
	}
}