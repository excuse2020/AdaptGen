class Solution {
	TreeNode findLCA(TreeNode root, TreeNode first, TreeNode last) {
		if (root == null) {
			return null;
		}
		if (root == first || root == last) {
			return root;
		}
		TreeNode left = findLCA(root.left,first,last);
		TreeNode right = findLCA(root.right,first,last);
		if (left != null && right != null) {
			return root;
		}
		return left != null ? left : right;
	}
	TreeNode subtreeWithAllDeepest(TreeNode root) {
		Queue<TreeNode> q = new ArrayDeque<TreeNode>();
		TreeNode first = null, last = null;
		q.offer(root);
		while (!q.isEmpty()) {
			int size = q.size();
			for (int i = 0; i < size; i++) {
				TreeNode temp = q.poll();
				if (i == 0) {
					first = temp;
				}
				if (i == size - 1) {
					last = temp;
				}
				if (temp.left != null) {
					q.offer(temp.left);
				}
				if (temp.right != null) {
					q.offer(temp.right);
				}
			}
		}
		TreeNode SubTreeRoot = findLCA(root,first,last);
		return SubTreeRoot;
	}
}