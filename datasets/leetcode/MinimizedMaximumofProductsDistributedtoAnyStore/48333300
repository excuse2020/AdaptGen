class Solution {
	boolean check(int arr, int n, int maxQ) {
		int stores = 0;
		for (int i = 0; i < arr.length; i++) {
			if (arr[i] % maxQ == 0) {
				stores += arr[i] / maxQ;
			} 
			else {
				stores += arr[i] / maxQ + 1;
			}
		}
		if (stores > n) {
			return false;
		} 
		else {
			return true;
		}
	}
	int minimizedMaximum(int n, int[] arr) {
		int m = arr.length;
		int max = Integer.MIN_VALUE;
		for (int i = 0; i < m; i++) {
			max = Math.max(max,arr[i]);
		}
		int low = 1;
		int high = max;
		int ans = 0;
		while (low <= high) {
			int mid = (low + high) / 2;
			if (check(arr,n,mid) == true) {
				ans = mid;
				high = mid - 1;
			} 
			else {
				low = mid + 1;
			}
		}
		return ans;
	}
}