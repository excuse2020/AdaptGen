class Solution {
	int cols;
	String[] grid;
	int rows;
	boolean[][][] visited;
	void dfs(int row, int col, int type) {
		if (!isInsideGrid(row,col) || visited[row][col][type] == true) {
			return;
		}
		visited[row][col][type] = true;
		if (type == 0) {
			dfs(row - 1,col,2);
		} 
		else if (type == 2) {
			dfs(row + 1,col,0);
		} 
		else if (type == 1) {
			dfs(row,col + 1,3);
		} 
		else if (type == 3) {
			dfs(row,col - 1,1);
		}
	}
	boolean isInsideGrid(int row, int col) {
		return row >= 0 && row < rows && col >= 0 && col < cols;
	}
	int regionsBySlashes(String[] grid) {
		this.grid = grid;
		rows = grid.length;
		cols = grid[0].length();
		visited = new boolean[rows][cols][4];
		int regionCount = 0;
		for (int row = 0; row < rows; row++) {
			for (int col = 0; col < cols; col++) {
				for (int type = 0; type < 4; type++) {
					if (visited[row][col][type] == false) {
						dfs(row,col,type);
						regionCount++;
					}
				}
			}
		}
		return regionCount;
	}
}