class Solution {
	long countBadPairs(int[] nums) {
		return getNumPairs(getFrequencyMap(nums),nums.length);
	}
	Map<Integer, Long> getFrequencyMap(int[] nums) {
		Map<Integer, Long> freqMap = new HashMap<>();
		for (int i = 0; i < nums.length; i++) {
			freqMap.put(nums[i] - i,freqMap.getOrDefault(nums[i] - i,0L) + 1);
		}
		return freqMap;
	}
	long getNumPairs(Map<Integer, Long> frequencyMap, long totalLength) {
		long numGoodPairs = 0;
		for (Long count: frequencyMap.values()) {	
			numGoodPairs += (count * (count - 1)) / 2;
		}
		return ((totalLength * (totalLength - 1)) / 2) - numGoodPairs;
	}
}