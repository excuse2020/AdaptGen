class Solution {
	HashMap<Integer, Integer> dic = new HashMap<>();
	TreeNode createTree(int[] pre, int prestart, int preend, int[] vin, int vinstart, int vinend) {
		if (prestart > preend || vinstart > vinend) {
			return null;
		}
		TreeNode root = new TreeNode(pre[prestart]);
		int i = dic.get(pre[prestart]);
		root.left = createTree(pre,prestart + 1,prestart + i - vinstart,vin,vinstart,i - 1);
		root.right = createTree(pre,prestart + i - vinstart + 1,preend,vin,i + 1,vinend);
		return root;
	}
	TreeNode reConstructBinaryTree(int[] pre, int[] vin) {
		for (int i = 0; i < vin.length; i++) {
			dic.put(vin[i],i);
		}
		TreeNode root = createTree(pre,0,pre.length - 1,vin,0,vin.length - 1);
		return root;
	}
}