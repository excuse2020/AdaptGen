class Solution {
	int closestMeetingNode(int[] edges, int node1, int node2) {
		int n = edges.length;
		int[] dist1 = new int[n];
		int[] dist2 = new int[n];
		Arrays.fill(dist1,Integer.MAX_VALUE);
		Arrays.fill(dist2,Integer.MAX_VALUE);
		boolean[] vis1 = new boolean[n];
		boolean[] vis2 = new boolean[n];
		dfs(edges,node1,vis1,dist1,-1);
		dfs(edges,node2,vis2,dist2,-1);
		int min = Integer.MAX_VALUE;
		int idx = -1;
		int max = 0;
		for (int i = 0; i < dist1.length; i++) {
			max = Math.max(dist1[i],dist2[i]);
			if (max < min) {
				min = max;
				idx = i;
			}
		}
		return idx;
	}
	void dfs(int[] edges, int node, boolean[] vis, int[] dist, int sum) {
		if (vis[node] != true) {
			vis[node] = true;
			if (dist[node] == Integer.MAX_VALUE) {
				dist[node] = sum + 1;
			}
			if (edges[node] != -1) {
				dfs(edges,edges[node],vis,dist,dist[node]);
			}
		}
	}
}