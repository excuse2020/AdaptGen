class Solution {
	int[] insertionSoret(int[] arr) {
		for (int i = 0; i < arr.length; i++) {
			int key = arr[i];
			int j = i - 1;
			while (j >= 0 && arr[j] > key) {
				arr[j + 1] = arr[j];
				j = j - 1;
			}
			arr[j + 1] = key;
		}
		return arr;
	}
	ListNode insertionSortList(ListNode head) {
		int count = lengthlinkedlst(head);
		int[] arr = new int[count];
		ListNode x = head;
		int i = 0;
		if (x == null) {
			return head;
		} 
		else {
			while (x != null) {
				arr[i] = x.val;
				i++;
				x = x.next;
			}
			arr = insertionSoret(arr);
			x = head;
			i = 0;
			while (x != null) {
				x.val = arr[i];
				i++;
				x = x.next;
			}
		}
		return head;
	}
	int lengthlinkedlst(ListNode head) {
		int count = 0;
		while (head != null) {
			count++;
			head = head.next;
		}
		return count;
	}
}