class Solution {
	int minimumTime(int n, int[][] relations, int[] time) {
		if (n == 1) {
			return time[0];
		}
		List<List<Integer>> adj = new ArrayList<>();
		int[] indegree = new int[n];
		for (int i = 0; i < n; i++) {
			adj.add(new ArrayList<>());
			indegree[i] = 0;
		}
		for (int i = 0; i < relations.length; i++) {
			adj.get(relations[i][0] - 1).add(relations[i][1] - 1);
			indegree[relations[i][1] - 1]++;
		}
		int[] maxiTime = new int[n];
		Queue<Integer> q = new LinkedList<>();
		for (int i = 0; i < n; i++) {
			if (indegree[i] == 0) {
				q.offer(i);
				maxiTime[i] = time[i];
			}
		}
		while (!q.isEmpty()) {
			int tem = q.poll();
			for (Integer i: adj.get(tem)) {	
				maxiTime[i] = Math.max(maxiTime[i],maxiTime[tem] + time[i]);
				indegree[i]--;
				if (indegree[i] == 0) {
					q.offer(i);
				}
			}
		}
		int ans = 0;
		for (int node = 0; node < n; node++) {
			ans = Math.max(ans,maxiTime[node]);
		}
		return ans;
	}
}