class Solution {
	List<String> findAndReplacePattern(String[] words, String pattern) {
		List<String> matchingWords = new ArrayList<>();
		for (String word: words) {	
			if (matchesPattern(word,pattern)) {
				matchingWords.add(word);
			}
		}
		return matchingWords;
	}
	boolean matchesPattern(String word, String pattern) {
		if (word.length() != pattern.length()) {
			return false;
		}
		Map<Character, Character> mapPatternToWord = new HashMap<>();
		Map<Character, Character> mapWordToPattern = new HashMap<>();
		for (int i = 0; i < pattern.length(); i++) {
			char p = pattern.charAt(i);
			char w = word.charAt(i);
			if (!mapPatternToWord.containsKey(p)) {
				mapPatternToWord.put(p,w);
			} 
			else if (mapPatternToWord.get(p) != w) {
				return false;
			}
			if (!mapWordToPattern.containsKey(w)) {
				mapWordToPattern.put(w,p);
			} 
			else if (mapWordToPattern.get(w) != p) {
				return false;
			}
		}
		return true;
	}
}