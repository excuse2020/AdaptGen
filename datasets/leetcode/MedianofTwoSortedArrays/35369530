class Solution {
	double findMedianSortedArrays(int[] nums1, int[] nums2) {
		int n1 = nums1.length;
		int n2 = nums2.length;
		int[] temp = n1 > n2 ? nums1 : nums2;
		nums1 = n1 > n2 ? nums2 : nums1;
		nums2 = temp;
		n1 = nums1.length;
		n2 = nums2.length;
		double ans = nums2[n2 / 2];
		int left = 0;
		int right = n1;
		while (left <= right) {
			int mid1 = (left + right) / 2;
			int mid2 = (n1 + n2) / 2 - mid1;
			int l1 = mid1 - 1 >= 0 ? nums1[mid1 - 1] : -1000001;
			int l2 = mid2 - 1 >= 0 ? nums2[mid2 - 1] : -1000001;
			int r1 = mid1 < n1 ? nums1[mid1] : 1000001;
			int r2 = mid2 < n2 ? nums2[mid2] : 1000001;
			if (l1 <= r2 && l2 <= r1) {
				if (l1 <= r2 && l2 <= r1) {
					ans = (n2 + n1) % 2 == 0 ? (double) (Math.max(l1,l2) + Math.min(r1,r2)) / 2 : (double) Math.min(r1,r2);
					return ans;
				}
			} 
			else if (l1 > r2) {
				right = mid1 - 1;
			} 
			else {
				left = mid1 + 1;
			}
		}
		return ans;
	}
}