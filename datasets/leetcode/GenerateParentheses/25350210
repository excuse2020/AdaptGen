class Solution {
	void dfs(int closing, int open, String asf, List<String> ans) {
		if (closing == 0 && open == 0) {
			ans.add(asf);
			return;
		}
		if (closing > 0 && closing > open) {
			dfs(closing - 1,open,asf + ")",ans);
		}
		if (open > 0) {
			dfs(closing,open - 1,asf + "(",ans);
		}
	}
	List<String> generateParenthesis(int n) {
		List<String> ans = new ArrayList<>();
		dfs(n,n,"",ans);
		return ans;
	}
}