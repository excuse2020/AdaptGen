class Solution {
	boolean canFinish(int numCourses, int[][] prerequisites) {
		int[] indegree = new int[numCourses];
		int[] ans = new int[numCourses];
		ArrayList<ArrayList<Integer>> adj = new ArrayList<>();
		for (int i = 0; i < numCourses; i++) {
			adj.add(new ArrayList<>());
		}
		for (int i = 0; i < prerequisites.length; i++) {
			adj.get(prerequisites[i][1]).add(prerequisites[i][0]);
		}
		for (int i = 0; i < numCourses; i++) {
			for (int m: adj.get(i)) {	
				indegree[m]++;
			}
		}
		Queue<Integer> queue = new LinkedList<>();
		for (int i = 0; i < numCourses; i++) {
			if (indegree[i] == 0) {
				queue.add(i);
			}
		}
		int count = 0;
		while (!queue.isEmpty()) {
			int polled = queue.poll();
			ans[count++] = polled;
			for (int a: adj.get(polled)) {	
				indegree[a]--;
				if (indegree[a] == 0) {
					queue.add(a);
				}
			}
		}
		return count == numCourses;
	}
}