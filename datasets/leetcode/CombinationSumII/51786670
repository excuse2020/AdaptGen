class Solution {
	List<List<Integer>> combinationSum2(int[] nums, int target) {
		int n = nums.length;
		List<Integer> temp = new ArrayList<>();
		List<List<Integer>> ans = new ArrayList<>();
		Arrays.sort(nums);
		generate(0,n,ans,temp,nums,target);
		return ans;
	}
	void generate(int index, int n, List<List<Integer>> ans, List<Integer> temp, int[] nums, int target) {
		if (target == 0) {
			ans.add(new ArrayList<>(temp));
			return;
		}
		if (index >= n) {
			return;
		}
		if (nums[index] <= target) {
			temp.add(nums[index]);
			generate(index + 1,n,ans,temp,nums,target - nums[index]);
			temp.remove(temp.size() - 1);
		}
		int i = 1;
		while (index + i < n && nums[index] == nums[index + i]) {
			i++;
		}
		generate(index + i,n,ans,temp,nums,target);
	}
}