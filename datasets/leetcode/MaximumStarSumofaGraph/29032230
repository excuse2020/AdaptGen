class Solution {
	int maxStarSum(int[] vals, int[][] edges, int k) {
		ArrayList<ArrayList<Integer>> list = new ArrayList();
		int arr = new int[vals.length];
		for (int i = 0; i < vals.length; i++) {
			arr[i] = vals[i];
		}
		if (vals.length == 1) {
			return vals[0];
		}
		int n = vals.length;
		for (int i = 0; i <= n; i++) {
			list.add(new ArrayList<Integer>());
		}
		for (int row: edges) {	
			list.get(row[0]).add(row[1]);
			list.get(row[1]).add(row[0]);
		}
		Arrays.sort(vals);
		if (edges.length == 0) {
			return vals[vals.length - 1];
		}
		int max = 0;
		for (int i = 0; i < n; i++) {
			List<Integer> adj = list.get(i);
			List<Integer> temp = new ArrayList<Integer>();
			for (int it: adj) {	
				temp.add(arr[it]);
			}
			Collections.sort(temp,Collections.reverseOrder());
			int sum = arr[i];
			max = Math.max(sum,max);
			int s = k;
			for (int it: temp) {	
				sum += it;
				max = Math.max(sum,max);
				s--;
				if (s == 0) {
					break;
				}
			}
		}
		return max;
	}
}