class Solution {
	int maximumSum(int[] nums) {
		Map<Integer, PriorityQueue<Integer>> map = new HashMap<>();
		for (int n: nums) {	
			map.computeIfAbsent(sumOfDigits(n),(p) -> {new PriorityQueue<>(Comparator.reverseOrder())}).offer(n);
		}
		int max = -1;
		for (int key: map.keySet()) {	
			PriorityQueue<Integer> pq = map.get(key);
			if (pq.size() > 1) {
				max = Math.max(pq.poll() + pq.poll(),max);
			}
		}
		return max;
	}
	Integer sumOfDigits(int n) {
		int sum = 0;
		while (n > 0) {
			sum += n % 10;
			n /= 10;
		}
		return sum;
	}
}