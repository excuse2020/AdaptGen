class Solution {
	int cherryPickup(int[][] grid) {
		int n = grid.length;
		int m = grid[0].length;
		int dp = new int[n][m][m];
		for (int j1 = 0; j1 < m; j1++) {
			for (int j2 = 0; j2 < m; j2++) {
				if (j1 == j2) {
					dp[n - 1][j1][j1] = grid[n - 1][j1];
				} 
				else {
					dp[n - 1][j1][j2] = grid[n - 1][j1] + grid[n - 1][j2];
				}
			}
		}
		for (int i = n - 2; i >= 0; i--) {
			for (int j1 = 0; j1 < m; j1++) {
				for (int j2 = 0; j2 < m; j2++) {
					int max = Integer.MIN_VALUE;
					for (int x = -1; x <= 1; x++) {
						for (int y = -1; y <= 1; y++) {
							int ans = 0;
							if (j1 == j2) {
								ans = grid[i][j1];
							} 
							else {
								ans = grid[i][j1] + grid[i][j2];
							}
							if (j1 + x < 0 || j1 + x >= m || j2 + y < 0 || j2 + y >= m) {
								ans += Integer.MIN_VALUE;
							} 
							else {
								ans += dp[i + 1][j1 + x][j2 + y];
							}
							if (max < ans) {
								max = ans;
							}
						}
					}
					dp[i][j1][j2] = max;
				}
			}
		}
		return dp[0][0][m - 1];
	}
}