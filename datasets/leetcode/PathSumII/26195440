class Solution {
	List<List<Integer>> res = new ArrayList<List<Integer>>();
	int target = 0;
	List<List<Integer>> pathSum(TreeNode root, int targetSum) {
		target = targetSum;
		traverse(root,0,new ArrayList<Integer>());
		return res;
	}
	void traverse(TreeNode node, int currSum, ArrayList<Integer> nums) {
		if (node == null) {
			return;
		}
		nums.add(node.val);
		if (node.left == null && node.right == null) {
			if (currSum + node.val == target) {
				res.add(nums);
			}
			return;
		}
		if (node.left != null) {
			traverse(node.left,currSum + node.val,new ArrayList<Integer>(nums));
		}
		if (node.right != null) {
			traverse(node.right,currSum + node.val,new ArrayList<Integer>(nums));
		}
	}
}