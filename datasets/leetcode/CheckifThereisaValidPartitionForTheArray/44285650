class Solution {
	boolean Condition1(int a, int b) {
		if (a == b) {
			return true;
		}
		return false;
	}
	boolean Condition2(int a, int b, int c) {
		if (a == b && b == c) {
			return true;
		}
		return false;
	}
	boolean Condition3(int a, int b, int c) {
		if (b - a == 1 && c - b == 1) {
			return true;
		}
		return false;
	}
	boolean validPartition(int[] nums) {
		int n = nums.length;
		int[] DP = new int[n];
		DP[0] = 0;
		if (Condition1(nums[0],nums[1])) {
			DP[1] = 1;
		}
		if (n > 2 && Condition2(nums[0],nums[1],nums[2])) {
			DP[2] = 1;
		}
		if (n > 2 && Condition3(nums[0],nums[1],nums[2])) {
			DP[2] = 1;
		}
		for (int i = 3; i < n; i++) {
			if (DP[i - 2] == 1 && Condition1(nums[i - 1],nums[i])) {
				DP[i] = 1;
			} 
			else if (DP[i - 3] == 1 && Condition2(nums[i - 2],nums[i - 1],nums[i])) {
				DP[i] = 1;
			} 
			else if (DP[i - 3] == 1 && Condition3(nums[i - 2],nums[i - 1],nums[i])) {
				DP[i] = 1;
			}
		}
		if (DP[n - 1] == 1) {
			return true;
		}
		return false;
	}
}