class Solution {
	long[] calc(long[][] cost, int s) {
		boolean[] vis = new boolean[26];
		long[] dist = new long[26];
		for (int i = 0; i < 26; i++) {
			dist[i] = Integer.MAX_VALUE;
		}
		dist[s] = 0;
		for (int i = 0; i < cost.length - 1; i++) {
			int min = getMin(dist,vis);
			vis[min] = true;
			for (int v = 0; v < cost[min].length; v++) {
				if (!vis[v] && cost[min][v] != Integer.MAX_VALUE) {
					if (dist[v] > dist[min] + cost[min][v]) {
						dist[v] = dist[min] + cost[min][v];
					}
				}
			}
		}
		return dist;
	}
	int getMin(long[] dist, boolean[] vis) {
		long minDist = Long.MAX_VALUE;
		int idx = 0;
		for (int i = 0; i < 26; i++) {
			if (!vis[i] && dist[i] <= minDist) {
				minDist = dist[i];
				idx = i;
			}
		}
		return idx;
	}
	long minimumCost(String source, String target, char[] original, char[] changed, int[] cost) {
		long[][] mp = new long[26][26];
		Map<Integer, long[]> preCalc = new HashMap<>();
		for (int i = 0; i < 26; i++) {
			for (int j = 0; j < 26; j++) {
				mp[i][j] = Integer.MAX_VALUE;
			}
		}
		int i = 0;
	}
}