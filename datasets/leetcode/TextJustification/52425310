class Solution {
	List<String> fullJustify(String[] words, int maxWidth) {
		int length = words[0].length();
		int start = 0, end = 1;
		List<String> res = new ArrayList<>();
		while (end < words.length) {
			if (length + 1 <= maxWidth) {
				length += (1 + words[end++].length());
			} 
			else {
				if (end - start == 1) {
					res.add(leftJustify(words,start,end,maxWidth));
				} 
				else {
					res.add(ordinaryJustify(words,start,end,maxWidth));
				}
				start = end;
				length = words[start].length();
				end = start + 1;
			}
		}
		if (end - start > 0) {
			res.add(leftJustify(words,start,end,maxWidth));
		}
		return res;
	}
	String leftJustify(String[] words, int start, int end, int maxWidth) {
		StringBuffer sb = new StringBuffer();
		int length = 0;
		int i = start;
		sb.append(words[i]);
	}
	String ordinaryJustify(String[] words, int start, int end, int maxWidth) {
		int wordCnt = end - start;
		int totalWordLength = 0;
		for (int i = start; i < end; i++) {
			totalWordLength += words[i].length();
		}
		int space = (maxWidth - totalWordLength) / (wordCnt - 1);
		int extraSpace = (maxWidth - totalWordLength) % (wordCnt - 1);
		StringBuffer sb = new StringBuffer();
		int i = start;
		sb.append(words[i]);
		int j = 0;
	}
}