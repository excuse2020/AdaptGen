class Solution {
	ListNode middleNode(ListNode head) {
		ListNode slow = head;
		ListNode fast = head;
		while (fast != null && fast.next != null) {
			slow = slow.next;
			fast = fast.next.next;
		}
		return slow;
	}
	int pairSum(ListNode head) {
		if (head.next.next == null) {
			return head.val + head.next.val;
		}
		ListNode middle = middleNode(head);
		ListNode reversedStart = reverseList(middle);
		ListNode start = head;
		int max = 0;
		int sum = 0;
		while (reversedStart != null && start != middle) {
			sum = reversedStart.val + start.val;
			max = Math.max(sum,max);
			start = start.next;
			reversedStart = reversedStart.next;
		}
		return max;
	}
	ListNode reverseList(ListNode head) {
		ListNode prev = null;
		ListNode curr = head;
		while (curr != null) {
			ListNode nextTemp = curr.next;
			curr.next = prev;
			prev = curr;
			curr = nextTemp;
		}
		return prev;
	}
}