class Solution {
	int[] decrypt(int[] code, int k) {
		int[] answer = new int[code.length];
		for (int i = 0; i < code.length; i++) {
			if (k > 0) {
				answer[i] = sumOfNextKElements(code,k,i);
			} 
			else if (k < 0) {
				answer[i] = sumOfPreviousKElements(code,-k,i);
			} 
			else {
				answer[i] = 0;
			}
		}
		return answer;
	}
	int sumOfNextKElements(int[] code, int k, int startIndex) {
		int sum = 0;
		while (k > 0) {
			sum = sum + code[(startIndex + k) % code.length];
			k--;
		}
		return sum;
	}
	int sumOfPreviousKElements(int[] code, int k, int endIndex) {
		int sum = 0;
		while (k > 0) {
			int indexToBeProcessed = (endIndex - k) % code.length;
			if (indexToBeProcessed < 0) {
				indexToBeProcessed = (code.length + indexToBeProcessed);
			}
			sum = sum + code[indexToBeProcessed];
			k--;
		}
		return sum;
	}
}