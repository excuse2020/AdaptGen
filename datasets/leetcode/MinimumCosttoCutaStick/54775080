class Solution {
	int helper(int i, int j, int[] newCut, int[][] dp) {
		if (i > j) {
			return 0;
		}
		if (dp[i][j] != -1) {
			return dp[i][j];
		}
		int minCost = Integer.MAX_VALUE;
		for (int ind = i; ind <= j; ind++) {
			int cost = (newCut[j + 1] - newCut[i - 1]) + helper(i,ind - 1,newCut,dp);
			minCost = Math.min(cost,minCost);
		}
		return dp[i][j] = minCost;
	}
	int minCost(int n, int[] cuts) {
		int[] newCut = new int[cuts.length + 2];
		newCut[0] = 0;
		for (int i = 0; i < cuts.length; i++) {
			newCut[i + 1] = cuts[i];
		}
		newCut[newCut.length - 1] = n;
		Arrays.sort(newCut);
		int[][] dp = new int[newCut.length][newCut.length];
		for (int[] row: dp) {	
			Arrays.fill(row,-1);
		}
		return helper(1,newCut.length - 1,newCut,dp);
	}
}