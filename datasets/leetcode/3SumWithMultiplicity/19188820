class Solution {
	int threeSumMulti(int[] arr, int target) {
		long ans = 0;
		Arrays.sort(arr);
		for (int i = 0; i < arr.length - 2; i++) {
			int temp = target - arr[i];
			int s = i + 1, l = arr.length - 1;
			while (s < l) {
				if (arr[s] + arr[l] == temp) {
					if (arr[s] == arr[l] && arr[l] == arr[i]) {
						long r = l - i + 1;
						ans += r * (r - 1) / 6;
						break;
					} 
					else if (arr[l] == arr[s]) {
						long r = l - s + 1;
						long count = 1;
						int c = i;
						while (arr[c] == arr[c + 1]) {
							c++;
							count++;
						}
						ans += (count * r) / 2;
						break;
					} 
					else if (arr[s] == arr[i]) {
						long count = 1;
						int c = i;
						while (arr[c] == arr[c + 1]) {
							c++;
							count++;
						}
						long count2 = 1;
						s = c + 1;
						c = l;
						while (arr[c] == arr[c - 1]) {
							c--;
							count2++;
						}
						l = c - 1;
						ans += (count2 * count) / 2;
					} 
					else {
						long count = 1;
						int c = i;
						while (arr[c] == arr[c + 1]) {
							c++;
							count++;
						}
						long count1 = 1;
						c = s;
						while (arr[c] == arr[c + 1]) {
							c++;
							count1++;
						}
						long count2 = 1;
						s = c + 1;
						c = l;
						while (arr[c] == arr[c - 1]) {
							c--;
							count2++;
						}
						ans += count * count1;
						l = c - 1;
					}
				} 
				else if (arr[s] + arr[l] > temp) {
					l--;
				} 
				else {
					s++;
				}
			}
			while (i < arr.length - 1 && arr[i] == arr[i + 1]) {
				i++;
			}
		}
		return (int) (ans % (1e9 + 7));
	}
}