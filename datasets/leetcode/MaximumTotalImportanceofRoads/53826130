class Solution {
	long maximumImportance(int n, int[][] roads) {
		HashMap<Integer, Integer> map = new HashMap<>();
		for (int i = 0; i < roads.length; i++) {
			map.put(roads[i][0],map.getOrDefault(roads[i][0],0) + 1);
			map.put(roads[i][1],map.getOrDefault(roads[i][1],0) + 1);
		}
		PriorityQueue<Integer> orderedNodes = new PriorityQueue<>(Collections.reverseOrder());
		for (Map.Entry<Integer, Integer> entry: map.entrySet()) {	
			orderedNodes.offer(entry.getValue());
		}
		long res = 0;
		long multi = n;
		while (orderedNodes.size() != 0) {
			res += (orderedNodes.poll() * (multi--));
		}
		return res;
	}
}