class Solution {
	int f(int n) {
		if (n == 1) {
			return 0;
		}
		return 1 + (n % 2 == 0 ? f(n / 2) : Math.min(f(n + 1),f(n - 1)));
	}
	int integerReplacement(int n) {
		Map<Integer, Integer> dp = new HashMap<>();
		dp.put(Integer.MAX_VALUE,32);
		return memoize(n,dp);
	}
	int memoize(int n, Map<Integer, Integer> dp) {
		if (n == 1) {
			return 0;
		}
		if (dp.containsKey(n)) {
			return dp.get(n);
		}
		int result = 1 + (n % 2 == 0 ? memoize(n / 2,dp) : Math.min(memoize(n + 1,dp),memoize(n - 1,dp)));
		dp.put(n,result);
		return result;
	}
}