class Solution {
	int ans = 0;
	void dfs(int edges, int curr, boolean vis, boolean stack, int disArr, int dis) {
		if (edges[curr] == -1) {
			return;
		}
		if (!vis[curr]) {
			vis[curr] = true;
			stack[curr] = true;
			disArr[curr] = dis;
			dfs(edges,edges[curr],vis,stack,disArr,dis + 1);
		} 
		else if (stack[curr]) {
			ans = Math.max(ans,dis - disArr[curr]);
		}
		stack[curr] = false;
	}
	int longestCycle(int[] edges) {
		boolean vis = new boolean[edges.length];
		boolean stack = new boolean[edges.length];
		int disArr = new int[edges.length];
		for (int i = 0; i < edges.length; i++) {
			if (!vis[i]) {
				dfs(edges,i,vis,stack,disArr,0);
			}
		}
		if (ans == 0) {
			return -1;
		}
		return ans;
	}
}