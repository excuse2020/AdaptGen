class Solution {
	long maximumSumOfHeights(List<Integer> maxHeights) {
		int n = maxHeights.size();
		long max = Integer.MIN_VALUE;
		long result = 0;
		for (int i = 0; i < n; i++) {
			max = Math.max(max,maxHeights.get(i));
		}
		for (int i = 0; i < n; i++) {
			long lastPeak = max;
			long curSum = 0;
			for (int j = i; j < n; j++) {
				long num = maxHeights.get(j);
				if (num >= lastPeak) {
					curSum = curSum + lastPeak;
				} 
				else {
					lastPeak = num;
					curSum = curSum + num;
				}
			}
			lastPeak = max;
			for (int k = i - 1; k >= 0; k--) {
				long num = maxHeights.get(k);
				if (num >= lastPeak) {
					curSum = curSum + lastPeak;
				} 
				else {
					lastPeak = num;
					curSum = curSum + num;
				}
			}
			result = Math.max(result,curSum);
		}
		return result;
	}
}