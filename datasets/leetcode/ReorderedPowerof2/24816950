class Solution {
	boolean reorderedPowerOf2(int n) {
		HashMap<Integer, Integer> map = new HashMap<>();
		for (int i = 0; i <= 29; i++) {
			int val = (int) Math.pow(2,i);
			map.put(val,i);
		}
		int[] map_for_all_digit_of_n = new int[10];
		while (n > 0) {
			int rem = n % 10;
			map_for_all_digit_of_n[rem]++;
			n = n / 10;
		}
		for (int x: map.keySet()) {	
			int[] map_for_all_each_pow_int = new int[10];
			while (x > 0) {
				int rem = x % 10;
				map_for_all_each_pow_int[rem]++;
				x = x / 10;
			}
			boolean check_is_digit_equal_to_any_map_value = true;
			for (int i = 0; i < 10; i++) {
				map_for_all_each_pow_int[i] = map_for_all_each_pow_int[i] - map_for_all_digit_of_n[i];
				if (map_for_all_each_pow_int[i] != 0) {
					check_is_digit_equal_to_any_map_value = false;
				}
			}
			if (check_is_digit_equal_to_any_map_value) {
				return true;
			}
		}
		return false;
	}
}