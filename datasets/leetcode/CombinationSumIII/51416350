class Solution {
	List<List<Integer>> combinationSum3(int k, int n) {
		ArrayList<Integer> l = new ArrayList<>();
		for (int i = 1; i <= 9; i++) {
			l.add(i);
		}
		List<List<Integer>> ans = new ArrayList<>();
		rec(l,0,k,n,new ArrayList<>(),ans);
		return ans;
	}
	void rec(ArrayList<Integer> l, int idx, int k, int n, List<Integer> ds, List<List<Integer>> ans) {
		if (ds.size() == k && n == 0) {
			ans.add(new ArrayList<>(ds));
			return;
		}
		for (int i = idx; i < 9; i++) {
			if (i > idx && l.get(i - 1) == l.get(i)) {
				continue;
			}
			if (l.get(i) > n) {
				break;
			}
			ds.add(l.get(i));
			rec(l,i + 1,k,n - l.get(i),ds,ans);
			ds.remove(ds.size() - 1);
		}
	}
}