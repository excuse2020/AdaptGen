class Solution {
	int ans = 0;
	int dfs(int src, ArrayList<ArrayList<Integer>> al, int values, boolean[] vis, int k) {
		vis[src] = true;
		int temp = values[src];
		for (Integer z: al.get(src)) {	
			if (!vis[z]) {
				temp += dfs(z,al,values,vis,k);
			}
		}
		if (temp % k == 0) {
			++ans;
			return 0;
		}
		return temp % k;
	}
	int maxKDivisibleComponents(int n, int[][] edges, int[] values, int k) {
		ArrayList<ArrayList<Integer>> al = new ArrayList<>();
		for (int i = 0; i < n; i++) {
			al.add(new ArrayList<Integer>());
		}
		for (int x: edges) {	
			al.get(x[0]).add(x[1]);
			al.get(x[1]).add(x[0]);
		}
		boolean vis = new boolean[n];
		ans = 0;
		dfs(0,al,values,vis,k);
		return ans;
	}
}