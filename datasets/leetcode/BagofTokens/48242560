class Solution {
	int ans = 0;
	void backtrack(int[] tokens, int power, int score, int moves, boolean[] played) {
		if (moves <= tokens.length) {
			ans = Math.max(ans,score);
		}
		for (int i = 0; i < tokens.length; i++) {
			if (!played[i]) {
				if (power >= tokens[i]) {
					played[i] = true;
					backtrack(tokens,power - tokens[i],score + 1,moves + 1,played);
					played[i] = false;
				}
				if (score >= 1) {
					played[i] = true;
					backtrack(tokens,power + tokens[i],score - 1,moves + 1,played);
					played[i] = false;
				}
			}
		}
	}
	int bagOfTokensScore(int[] tokens, int power) {
		return greedy(tokens,power);
	}
	int greedy(int[] tokens, int power) {
		Arrays.sort(tokens);
		int left = 0, right = tokens.length - 1;
		int score = 0;
		boolean canMove = true;
		int moveType = -1;
		while (left <= right && canMove) {
			if (power >= tokens[left]) {
				score++;
				power -= tokens[left];
				left++;
				moveType = 1;
			} 
			else if (score >= 1) {
				score--;
				power += tokens[right];
				right--;
				moveType = 2;
			} 
			else {
				canMove = false;
			}
		}
		if (moveType == 2) {
			score++;
		}
		return score;
	}
}