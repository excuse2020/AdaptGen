class Solution {
	int binarySearch(List<Integer> potions, int multiplier, long target) {
		int start = 0;
		int end = potions.size() - 1;
		while (start <= end) {
			int mid = end - ((end - start) / 2);
			long currPair = (long) multiplier * potions.get(mid);
			if (currPair == target) {
				return potions.indexOf(potions.get(mid)) - 1;
			} 
			else if (currPair > target) {
				end = mid - 1;
			} 
			else {
				start = mid + 1;
			}
		}
		return end;
	}
	int[] successfulPairs(int[] spells, int[] potions, long success) {
		Arrays.sort(potions);
		List<Integer> newPotions = new ArrayList<>();
		for (int i = 0; i < potions.length; i++) {
			newPotions.add(potions[i]);
		}
		int[] pairs = new int[spells.length];
		for (int i = 0; i < spells.length; i++) {
			int idx = binarySearch(newPotions,spells[i],success);
			pairs[i] = potions.length - idx;
		}
		return pairs;
	}
}