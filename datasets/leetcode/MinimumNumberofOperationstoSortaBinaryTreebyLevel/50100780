class Solution {
	int minimumOperations(TreeNode root) {
		if (root == null) {
			return 0;
		}
		Queue<TreeNode> q = new LinkedList<>();
		q.add(root);
		int count = 0;
		while (!q.isEmpty()) {
			int ls = q.size();
			List<Integer> temp = new ArrayList<>();
			for (int i = 0; i < ls; i++) {
				TreeNode t = q.poll();
				if (t.left != null) {
					q.add(t.left);
				}
				if (t.right != null) {
					q.add(t.right);
				}
				temp.add(t.val);
			}
			count += swaps(temp);
		}
		return count;
	}
	int swaps(List<Integer> arr) {
		HashMap<Integer, Integer> hm = new HashMap<>();
		for (int i = 0; i < arr.size(); i++) {
			hm.put(arr.get(i),i);
		}
		Collections.sort(arr);
		boolean[] vis = new boolean[arr.size()];
		Arrays.fill(vis,false);
		int ans = 0;
		for (int i = 0; i < arr.size(); i++) {
			if (vis[i] || hm.get(arr.get(i)) == i) {
				continue;
			}
			int j = i, cycle_size = 0;
			while (!vis[j]) {
				vis[j] = true;
				j = hm.get(arr.get(j));
				cycle_size++;
			}
			if (cycle_size > 0) {
				ans += (cycle_size - 1);
			}
		}
		return ans;
	}
}