class Solution {
	Set<String> res = new HashSet();
	boolean[][] used;
	void dfs(char[][] board, char[] word, int index, int row, int col, boolean[][] used) {
		if (index == word.length) {
			res.add(new String(word));
			return;
		}
		if (row > 0 && board[row - 1][col] == word[index] && !used[row - 1][col]) {
			used[row - 1][col] = true;
			dfs(board,word,index + 1,row - 1,col,used);
			used[row - 1][col] = false;
		}
		if (col > 0 && board[row][col - 1] == word[index] && !used[row][col - 1]) {
			used[row][col - 1] = true;
			dfs(board,word,index + 1,row,col - 1,used);
			used[row][col - 1] = false;
		}
		if (row < board.length - 1 && board[row + 1][col] == word[index] && !used[row + 1][col]) {
			used[row + 1][col] = true;
			dfs(board,word,index + 1,row + 1,col,used);
			used[row + 1][col] = false;
		}
		if (col < board[0].length - 1 && board[row][col + 1] == word[index] && !used[row][col + 1]) {
			used[row][col + 1] = true;
			dfs(board,word,index + 1,row,col + 1,used);
			used[row][col + 1] = false;
		}
		return;
	}
	List<String> findWords(char[][] board, String[] words) {
		for (String word: words) {	
			char[] charWord = word.toCharArray();
			for (int row = 0; row < board.length; row++) {
				for (int col = 0; col < board[0].length; col++) {
					used = new boolean[board.length][board[0].length];
					if (board[row][col] == charWord[0]) {
						used[row][col] = true;
						dfs(board,charWord,1,row,col,used);
					}
				}
			}
		}
		return new ArrayList(res);
	}
}