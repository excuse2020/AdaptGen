class Solution {
	TreeNode createBinaryTree(int[][] description) {
		HashMap<Integer, TreeNode> map = new HashMap<>();
		HashSet<Integer> set = new HashSet<>();
		TreeNode root = new TreeNode();
		for (int i = 0; i < description.length; i++) {
			if (!map.containsKey(description[i][0])) {
				map.put(description[i][0],new TreeNode(description[i][0]));
			}
			if (!map.containsKey(description[i][1])) {
				map.put(description[i][1],new TreeNode(description[i][1]));
			}
			set.add(description[i][1]);
		}
		for (int i = 0; i < description.length; i++) {
			if (description[i][2] == 1) {
				map.get(description[i][0]).left = map.get(description[i][1]);
			} 
			else {
				map.get(description[i][0]).right = map.get(description[i][1]);
			}
			if (!set.contains(description[i][0])) {
				root = map.get(description[i][0]);
			}
		}
		return root;
	}
}