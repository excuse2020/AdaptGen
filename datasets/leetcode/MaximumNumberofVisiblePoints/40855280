class Solution {
	int visiblePoints(List<List<Integer>> points, int angle, List<Integer> location) {
		List<Double> positions = new ArrayList<>();
		int count = 0;
		for (List<Integer> point: points) {	
			int delX = point.get(0) - location.get(0);
			int delY = point.get(1) - location.get(1);
			if (delX == 0 && delY == 0) {
				count++;
				continue;
			}
			var v = (Math.atan2(delY,delX) * 180 / Math.PI);
			positions.add(v);
		}
		Collections.sort(positions);
		List<Double> list = new ArrayList<>(positions);
		for (int i = 0; i < positions.size(); i++) {
			list.add(360 + positions.get(i));
		}
		int low = 0, high = 0;
		int max = 0;
		while (high < list.size()) {
			double lowAngle = list.get(low);
			double highAngle = list.get(high);
			if (highAngle - lowAngle <= angle) {
				max = Math.max(high - low + 1,max);
				high++;
			} 
			else {
				low++;
			}
		}
		return max + count;
	}
}