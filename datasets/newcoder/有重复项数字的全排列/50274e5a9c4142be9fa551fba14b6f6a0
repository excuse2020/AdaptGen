class Solution {
	boolean[] mark;
	void backtrack(int[] num, ArrayList<arraylist<integer>> res, LinkedList<integer> track) {
		if (track.size() == num.length) {
			res.add(new ArrayList<integer>(track));
			return;
		}
		for (int i = 0; i < num.length; i++) {
			if (mark[i] || i > 0 && num[i] == num[i - 1] && !mark[i - 1]) {
				continue;
			}
			track.add(num[i]);
			mark[i] = true;
			backtrack(num,res,track);
			track.removeLast();
			mark[i] = false;
		}
	}
	ArrayList<arraylist<integer>> permuteUnique(int[] num) {
		ArrayList<arraylist<integer>> res = new ArrayList<>();
		LinkedList<integer> track = new LinkedList<>();
		mark = new boolean[num.length];
		Arrays.sort(num);
		backtrack(num,res,track);
		return res;
	}
}