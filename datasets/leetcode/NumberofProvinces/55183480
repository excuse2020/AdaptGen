class Solution {
	void bfs(boolean[] visited, int i, ArrayList<ArrayList<Integer>> adj) {
		visited[i] = true;
		Queue<Integer> q = new LinkedList<>();
		q.add(i);
		while (!q.isEmpty()) {
			int curr = q.poll();
			for (int x: adj.get(curr)) {	
				if (visited[x] == false) {
					visited[x] = true;
					q.add(x);
				}
			}
		}
	}
	int findCircleNum(int[][] isConnected) {
		ArrayList<ArrayList<Integer>> adj = new ArrayList<>();
		int n = isConnected.length;
		for (int i = 0; i < n; i++) {
			adj.add(new ArrayList<>());
		}
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < n; j++) {
				if (isConnected[i][j] == 1) {
					adj.get(i).add(j);
					adj.get(j).add(i);
				}
			}
		}
		boolean[] visited = new boolean[n];
		Arrays.fill(visited,false);
		int count = 0;
		for (int i = 0; i < n; i++) {
			if (visited[i] == false) {
				bfs(visited,i,adj);
				count += 1;
			}
		}
		return count;
	}
}