class Solution {
	int fun(int[] p, int buy, int t, int index, int[][][] dp) {
		if (index == p.length || t == 0) {
			return 0;
		}
		if (dp[buy][t - 1][index] != -1) {
			return dp[buy][t - 1][index];
		}
		if (buy == 1) {
			return dp[buy][t - 1][index] = Math.max(0 - p[index] + fun(p,0,t,index + 1,dp),fun(p,1,t,index + 1,dp));
		} 
		else {
			return dp[buy][t - 1][index] = Math.max(p[index] + fun(p,1,t - 1,index + 1,dp),fun(p,0,t,index + 1,dp));
		}
	}
	int maxProfit(int[] prices) {
		int[][][] dp = new int[2][2][prices.length];
		for (int i = 0; i < 2; i++) {
			for (int j = 0; j < 2; j++) {
				Arrays.fill(dp[i][j],-1);
			}
		}
		return fun(prices,1,2,0,dp);
	}
}