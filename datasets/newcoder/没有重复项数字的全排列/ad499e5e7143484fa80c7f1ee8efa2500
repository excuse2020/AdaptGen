class Solution {
	boolean isFullyPermuted(int[] num, int[] newNum) {
		for (int i = 0; i < num.length; i++) {
			if (num[i] != newNum[i]) {
				return false;
			}
		}
		return true;
	}
	ArrayList<ArrayList<Integer>> permute(int[] num) {
		int[] newArr = new int[num.length];
		for (int i = 0; i < newArr.length; i++) {
			newArr[i] = num[i];
		}
		ArrayList<ArrayList<Integer>> list = new ArrayList<>();
		ArrayList<Integer> first = new ArrayList<>();
		for (int i = 0; i < num.length; i++) {
			first.add(num[i]);
		}
		list.add(first);
		int pointerr = num.length - 1;
		while (true) {
			int pointerl = pointerr;
			while (pointerl - 1 >= 0 && num[pointerl - 1] > num[pointerl]) {
				pointerl--;
			}
			if (pointerl - 1 < 0) {
				reverse(num,0,num.length - 1);
				if ((isFullyPermuted(num,newArr))) {
					break;
				}
				ArrayList<Integer> item = new ArrayList<>();
				for (int i = 0; i < num.length; i++) {
					item.add(num[i]);
				}
				list.add(item);
				continue;
			} 
			else {
				int pointerx = pointerr;
				while (pointerx >= 0) {
					if (num[pointerx] > num[pointerl - 1]) {
						break;
					}
					pointerx--;
				}
				swap(num,pointerl - 1,pointerx);
				reverse(num,pointerl,num.length - 1);
				if ((isFullyPermuted(num,newArr))) {
					break;
				}
				ArrayList<Integer> item = new ArrayList<>();
				for (int i = 0; i < num.length; i++) {
					item.add(num[i]);
				}
				list.add(item);
			}
		}
		return list;
	}
	void reverse(int[] num, int begin, int end) {
		int i = begin;
		int j = end;
		for (; i >= 0 && i <= j && j < num.length; i++, j--) {
			int middle = num[i];
			num[i] = num[j];
			num[j] = middle;
		}
	}
	void swap(int[] num, int left, int right) {
		int middle = num[left];
		num[left] = num[right];
		num[right] = middle;
	}
}