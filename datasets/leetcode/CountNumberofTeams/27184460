class Solution {
	List<Integer>[] graph;
	List<Integer>[] graph_;
	int dfs(int u, int edgeLength) {
		if (edgeLength == 1) {
			return graph[u].size();
		}
		int cnt = 0;
		for (int verIdx: graph[u]) {	
			cnt += dfs(verIdx,edgeLength + 1);
		}
		return cnt;
	}
	int dfs_(int u, int edgeLength) {
		if (edgeLength == 1) {
			return graph_[u].size();
		}
		int cnt = 0;
		for (int verIdx: graph_[u]) {	
			cnt += dfs_(verIdx,edgeLength + 1);
		}
		return cnt;
	}
	int numTeams(int[] rating) {
		int n = rating.length;
		graph = new ArrayList[n];
		graph_ = new ArrayList[n];
		for (int i = 0; i < n; i += 1) {
			graph[i] = new ArrayList<>();
			graph_[i] = new ArrayList<>();
		}
		for (int i = 0; i < n; i += 1) {
			for (int j = i + 1; j < n; j += 1) {
				if (rating[i] < rating[j]) {
					graph[i].add(j);
				}
			}
		}
		for (int i = 0; i < n; i += 1) {
			for (int j = i + 1; j < n; j += 1) {
				if (rating[i] > rating[j]) {
					graph_[i].add(j);
				}
			}
		}
		int tripletCnt = 0;
		for (int i = 0; i < n; i += 1) {
			tripletCnt += dfs(i,0);
		}
		for (int i = 0; i < n; i += 1) {
			tripletCnt += dfs_(i,0);
		}
		return tripletCnt;
	}
}