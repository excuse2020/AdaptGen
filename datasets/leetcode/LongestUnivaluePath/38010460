class Solution {
	int longestUnivaluePath(TreeNode root) {
		if (root == null) {
			return 0;
		}
		return Math.max(longestUnivaluePathHelper(root,root.val,0),Math.max(longestUnivaluePath(root.left),longestUnivaluePath(root.right)));
	}
	int longestUnivaluePathHelper(TreeNode root, int prev, int counter) {
		if (root == null) {
			return 0;
		}
		if (root.val != prev) {
			return 0;
		}
		int left = longestUnivaluePathHelper(root.left,root.val,counter + 1);
		int right = longestUnivaluePathHelper(root.right,root.val,counter + 1);
		if (counter == 0) {
			return Math.max(left,Math.max(right,left + right));
		} 
		else {
			return 1 + Math.max(left,right);
		}
	}
}