class Solution {
	void backtrack(int index, int[] arr, int target, List<List<Integer>> res, List<Integer> path) {
		if (target == 0) {
			res.add(new ArrayList<>(path));
			return;
		}
		for (int i = index; i < arr.length; i++) {
			if (i > index && arr[i] == arr[i - 1]) {
				continue;
			}
			if (arr[i] > target) {
				break;
			}
			path.add(arr[i]);
			backtrack(i + 1,arr,target - arr[i],res,path);
			path.remove(path.size() - 1);
		}
	}
	List<List<Integer>> combinationSum2(int[] candidates, int target) {
		List<List<Integer>> res = new ArrayList<>();
		Arrays.sort(candidates);
		backtrack(0,candidates,target,res,new ArrayList<>());
		return res;
	}
}