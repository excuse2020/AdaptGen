class Solution {
	int dfs(int c, HashMap<Integer, List<Integer>> map, boolean[] visited) {
		List<Integer> lst = map.get(c);
		int count = 0;
		for (int i = 0; i < lst.size(); i++) {
			if (!visited[lst.get(i)]) {
				visited[lst.get(i)] = true;
				count += 1 + dfs(lst.get(i),map,visited);
			}
		}
		return count;
	}
	int maximumDetonation(int[][] bombs) {
		if (bombs.length == 1) {
			return 1;
		}
		HashMap<Integer, List<Integer>> map = new HashMap<Integer, List<Integer>>();
		for (int i = 0; i < bombs.length; i++) {
			for (int j = i + 1; j < bombs.length; j++) {
				long x1 = bombs[i][0];
				long y1 = bombs[i][1];
				long r1 = bombs[i][2];
				long x2 = bombs[j][0];
				long y2 = bombs[j][1];
				long r2 = bombs[j][2];
				if (!map.containsKey(i)) {
					map.put(i,new ArrayList<>());
				}
				if (!map.containsKey(j)) {
					map.put(j,new ArrayList<>());
				}
				long xDist = x1 - x2;
				long yDist = y1 - y2;
				long dist = (xDist * xDist + yDist * yDist);
				if (r1 * r1 >= dist) {
					map.get(i).add(j);
				}
				if (r2 * r2 >= dist) {
					map.get(j).add(i);
				}
			}
		}
		int ans = 1;
		for (int i = 0; i < bombs.length; i++) {
			boolean visited = new boolean[bombs.length];
			visited[i] = true;
			int count = 1 + dfs(i,map,visited);
			ans = Math.max(count,ans);
			if (ans == bombs.length) {
				return ans;
			}
		}
		return ans;
	}
}