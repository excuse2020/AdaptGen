class Solution {
	int helper(int[] nums1, int[] nums2, int i, int j, int[][] dp) {
		if (i == nums1.length || j == nums2.length) {
			return Integer.MIN_VALUE;
		}
		if (dp[i][j] != -1) {
			return dp[i][j];
		}
		int take = nums1[i] * nums2[j] + Math.max(helper(nums1,nums2,i + 1,j + 1,dp),0);
		int nottake = Math.max(helper(nums1,nums2,i,j + 1,dp),helper(nums1,nums2,i + 1,j,dp));
		return dp[i][j] = Math.max(take,nottake);
	}
	int maxDotProduct(int[] nums1, int[] nums2) {
		int n = nums1.length;
		int m = nums2.length;
		int[][] dp = new int[n][m];
		for (int i = 0; i < n; i++) {
			Arrays.fill(dp[i],-1);
		}
		return helper(nums1,nums2,0,0,dp);
	}
}