class Solution {
	int m, n;
	void lookAround(char[][] grid, int i, int j) {
		mark(grid,i,j - 1);
		mark(grid,i,j + 1);
		mark(grid,i - 1,j);
		mark(grid,i + 1,j);
	}
	void mark(char[][] grid, int i, int j) {
		if (i >= 0 && i < m && j >= 0 && j < n && grid[i][j] == '1') {
			grid[i][j] = '0';
			lookAround(grid,i,j);
		}
	}
	int solve(char[][] grid) {
		m = grid.length;
		n = grid[0].length;
		int cnt = 0;
		for (int i = 0; i < m; i++) {
			for (int j = 0; j < n; j++) {
				if (grid[i][j] == '1') {
					++cnt;
					lookAround(grid,i,j);
				}
			}
		}
		return cnt;
	}
}