class Solution {
	double max = Double.MIN_VALUE;
	double helper(int start, double[] sumArr, int k, double[][] dp) {
		if (k == 1) {
			if (start == 0) {
				return (double) (sumArr[sumArr.length - 1]) / sumArr.length;
			}
			return (double) (sumArr[sumArr.length - 1] - sumArr[start - 1]) / (sumArr.length - 1 + 1);
		}
		if (dp[start][k] != -1.00) {
			return dp[start][k];
		}
		double res = 0.0;
		for (int i = start; i < sumArr.length; i++) {
			double ans = 0.0;
			if (start == 0) {
				ans = (double) sumArr[i] / (i + 1);
			} 
			else {
				ans = (double) (sumArr[i] - sumArr[start - 1]) / (i - start + 1);
			}
			if (i + 1 < sumArr.length && k > 1) {
				double val = (double) ans + helper(i + 1,sumArr,k - 1,dp);
				res = Math.max(res,val);
			}
		}
		return dp[start][k] = res;
	}
	double largestSumOfAverages(int[] nums, int k) {
		double[] sumArr = new double[nums.length];
		sumArr[0] = 0.0 + nums[0];
		for (int i = 1; i < nums.length; i++) {
			sumArr[i] = nums[i] + sumArr[i - 1];
		}
		double[][] dp = new double[nums.length][k + 1];
		for (double[] dpArr: dp) {	
			Arrays.fill(dpArr,-1.00);
		}
		return helper(0,sumArr,k,dp);
	}
}