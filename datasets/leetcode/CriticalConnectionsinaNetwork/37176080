class Solution {
	int timer = 1;
	List<List<Integer>> criticalConnections(int n, List<List<Integer>> connections) {
		List<List<Integer>> adj = new ArrayList<>();
		for (int i = 0; i < n; i++) {
			adj.add(new ArrayList());
		}
		for (int i = 0; i < connections.size(); i++) {
			adj.get(connections.get(i).get(0)).add(connections.get(i).get(1));
			adj.get(connections.get(i).get(1)).add(connections.get(i).get(0));
		}
		int vis = new int[n];
		int time = new int[n];
		int low = new int[n];
		List<List<Integer>> bridges = new ArrayList<>();
		dfs(0,-1,vis,adj,time,low,bridges);
		return bridges;
	}
	void dfs(int node, int parent, int vis, List<List<Integer>> adj, int time, int low, List<List<Integer>> bridges) {
		vis[node] = 1;
		time[node] = low[node] = timer;
		timer++;
		for (int i = 0; i < adj.get(node).size(); i++) {
			if (parent == adj.get(node).get(i)) {
				continue;
			}
			if (vis[adj.get(node).get(i)] == 0) {
				dfs(adj.get(node).get(i),node,vis,adj,time,low,bridges);
				low[node] = Math.min(low[node],low[adj.get(node).get(i)]);
				if (low[adj.get(node).get(i)] > time[node]) {
					bridges.add(Arrays.asList(adj.get(node).get(i),node));
				}
			} 
			else {
				low[node] = Math.min(low[node],low[adj.get(node).get(i)]);
			}
		}
	}
}