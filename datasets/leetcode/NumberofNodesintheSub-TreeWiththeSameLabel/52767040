class Solution {
	int[] countSubTrees(int n, int[][] edges, String labels) {
		List<Integer>[] tree = new List[n];
		for (int[] edge: edges) {	
			if (tree[edge[0]] == null) {
				tree[edge[0]] = new ArrayList<>();
			}
			tree[edge[0]].add(edge[1]);
			if (tree[edge[1]] == null) {
				tree[edge[1]] = new ArrayList<>();
			}
			tree[edge[1]].add(edge[0]);
		}
		int[] result = new int[n];
		dfs(tree,labels,0,new boolean[n],result);
		return result;
	}
	int[] dfs(List<Integer>[] tree, String labels, int node, boolean[] visited, int[] result) {
		int[] count = new int[26];
	}
}