class Solution {
	void backtrack(int index, List<List<Integer>> ans, int[] candidates, int target, List<Integer> db) {
		if (index == candidates.length || target == 0) {
			if (target == 0) {
				ans.add(new ArrayList<Integer>(db));
			}
			return;
		}
		if (candidates[index] <= target) {
			db.add(candidates[index]);
			backtrack(index,ans,candidates,target - candidates[index],db);
			db.removeLast();
		}
		backtrack(index + 1,ans,candidates,target,db);
	}
	List<List<Integer>> combinationSum(int[] candidates, int target) {
		List<List<Integer>> ans = new ArrayList<>();
		backtrack(0,ans,candidates,target,new ArrayList<Integer>());
		return ans;
	}
}