class Solution {
	int[] parent;
	int[] rank;
	int find(int x) {
		while (parent[x] != x) {
			parent[x] = parent[parent[x]];
			x = parent[x];
		}
		return x;
	}
	void init() {
		for (int i = 0; i < parent.length; i++) {
			parent[i] = i;
			rank[i] = 0;
		}
	}
	boolean union(int x, int y) {
		int px = find(x);
		int py = find(y);
		if (px == py || py != y) {
			return false;
		}
		parent[py] = px;
		return true;
	}
	boolean validateBinaryTreeNodes(int n, int[] leftChild, int[] rightChild) {
		parent = new int[n];
		rank = new int[n];
		init();
		for (int i = 0; i < n; i++) {
			if (leftChild[i] != -1 && !union(i,leftChild[i]) || rightChild[i] != -1 && !union(i,rightChild[i])) {
				return false;
			}
		}
		int cnt = 0;
		for (int i = 0; i < n; i++) {
			if (parent[i] == i) {
				cnt++;
			}
		}
		if (cnt > 1) {
			return false;
		}
		return true;
	}
}