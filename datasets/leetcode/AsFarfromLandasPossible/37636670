class Solution {
	int maxDistance(int[][] grid) {
		int sum = 0;
		for (int i = 0; i < grid.length; i++) {
			for (int j = 0; j < grid[0].length; j++) {
				sum += grid[i][j];
			}
		}
		if (sum == 0 || sum == grid.length * grid[0].length) {
			return -1;
		}
		int ans = 0;
		int temp = 0;
		while (temp != -1) {
			ans++;
			temp = maxDistanceHelper(grid);
		}
		return ans;
	}
	int maxDistanceHelper(int[][] grid) {
		int[][] dp = new int[grid.length][grid[0].length];
		for (int i = 0; i < grid.length; i++) {
			for (int j = 0; j < grid.length; j++) {
				if (grid[i][j] == 0) {
					if (i - 1 >= 0 && grid[i - 1][j] == 1) {
						dp[i][j] = 1;
					} 
					else if (i + 1 < grid.length && grid[i + 1][j] == 1) {
						dp[i][j] = 1;
					} 
					else if (j - 1 >= 0 && grid[i][j - 1] == 1) {
						dp[i][j] = 1;
					} 
					else if (j + 1 < grid.length && grid[i][j + 1] == 1) {
						dp[i][j] = 1;
					}
				} 
				else {
					dp[i][j] = 1;
				}
			}
		}
		int sum = 0;
		for (int i = 0; i < grid.length; i++) {
			for (int j = 0; j < grid[0].length; j++) {
				grid[i][j] = dp[i][j];
				sum += grid[i][j];
			}
		}
		if (sum == 0 || sum == grid.length * grid[0].length) {
			return -1;
		} 
		else {
			return 1;
		}
	}
}