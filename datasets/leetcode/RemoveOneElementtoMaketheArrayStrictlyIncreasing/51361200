class Solution {
	boolean canBeIncreasing(int[] nums) {
		int n = nums.length;
		if (n <= 1) {
			return true;
		}
		List<Integer> ls = new ArrayList<>();
		List<Integer> ls1 = new ArrayList<>();
		for (int num: nums) {	
			ls.add(num);
			ls1.add(num);
		}
		int i = 1;
		while (i < n && ls.get(i - 1) < ls.get(i)) {
			i++;
		}
		if (i >= n) {
			return true;
		}
		boolean flag1 = false;
		boolean flag2 = false;
		ls.remove(i - 1);
		ls1.remove(i);
		i = 1;
		while (i < n - 1 && ls.get(i - 1) < ls.get(i)) {
			i++;
		}
		flag1 = i == n - 1;
		int j = 1;
		while (j < n - 1 && ls1.get(j - 1) < ls1.get(j)) {
			j++;
		}
		flag2 = j == n - 1;
		return flag1 || flag2;
	}
}