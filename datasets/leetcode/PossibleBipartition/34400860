class Solution {
	boolean BFS(int start, int[] visited, List<List<Integer>> graph) {
		if (visited[start] >= 1) {
			return true;
		}
		Queue<Integer> queue = new ArrayDeque<>();
		queue.offer(start);
		visited[start] = 1;
		while (!queue.isEmpty()) {
			int current = queue.poll();
			int currGroup = visited[current];
			int neiGroup = currGroup == 1 ? 2 : 1;
			List<Integer> neighbors = graph.get(current);
			for (Integer next: neighbors) {	
				if (visited[next] == 0) {
					visited[next] = neiGroup;
					queue.offer(next);
				} 
				else if (visited[next] != neiGroup) {
					return false;
				}
			}
		}
		return true;
	}
	boolean possibleBipartition(int n, int[][] dislikes) {
		List<List<Integer>> graph = new ArrayList<>();
		for (int i = 0; i <= n; i++) {
			graph.add(new ArrayList<>());
		}
		for (int[] dislike: dislikes) {	
			int current = dislike[0];
			int next = dislike[1];
			graph.get(current).add(next);
			graph.get(next).add(current);
		}
		int[] visited = new int[n + 1];
		for (int i = 1; i <= n; i++) {
			if (!BFS(i,visited,graph)) {
				return false;
			}
		}
		return true;
	}
}