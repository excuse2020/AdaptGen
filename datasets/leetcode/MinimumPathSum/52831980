class Solution {
	int minPathSum(int[][] grid) {
		int m = grid.length;
		int n = grid[0].length;
		int dp = new int[m][n];
		return pathSum(grid,m - 1,n - 1,dp);
	}
	int pathSum(int[][] grid, int m, int n, int[][] dp) {
		if (m == 0 && n == 0) {
			return grid[0][0];
		}
		if (m < 0 || n < 0) {
			return (int) 1e9;
		}
		if (dp[m][n] != 0) {
			return dp[m][n];
		}
		int up = grid[m][n] + pathSum(grid,m - 1,n,dp);
		int left = grid[m][n] + pathSum(grid,m,n - 1,dp);
		return dp[m][n] = Math.min(up,left);
	}
}