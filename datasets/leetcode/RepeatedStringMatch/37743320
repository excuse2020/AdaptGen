class Solution {
	int repeatedStringMatch(String a, String b) {
		if (a.equals(b)) {
			return 1;
		}
		int c = 1;
		String dummy = new String(a);
		while (dummy.length() < b.length()) {
			c++;
			dummy = dummy + a;
		}
		if (dummy.equals(b)) {
			return c;
		}
		if (rubinKarp(b,dummy)) {
			return c;
		}
		if (rubinKarp(b,dummy + a)) {
			return c + 1;
		}
		return -1;
	}
	boolean rubinKarp(String pattern, String text) {
		int hashcode = 0;
		int currhash = 0;
		for (int i = 0; i < pattern.length(); i++) {
			hashcode = hashcode + (int) pattern.charAt(i);
			currhash = currhash + (int) text.charAt(i);
		}
		for (int i = pattern.length(); i < text.length(); i++) {
			if (hashcode == currhash) {
				if ((pattern.equals(text.substring(i - pattern.length(),i)))) {
					return true;
				}
			}
			currhash = currhash - (int) text.charAt(i - pattern.length());
			currhash = currhash + (int) text.charAt(i);
		}
		if (hashcode == currhash) {
			return pattern.equals(text.substring(text.length() - pattern.length()));
		}
		return false;
	}
}