class Solution {
	List<List<Integer>> combinationSum2(int[] candidates, int target) {
		Arrays.sort(candidates);
		List<List<Integer>> res = new ArrayList<>();
		findsub(0,candidates,target,new ArrayList<>(),res);
		return res;
	}
	void findsub(int ind, int[] arr, int tar, List<Integer> ds, List<List<Integer>> res) {
		if (tar == 0) {
			res.add(new ArrayList(ds));
			return;
		}
		for (int i = ind; i < arr.length; i++) {
			if (i > ind && arr[i] == arr[i - 1]) {
				continue;
			}
			if (arr[i] <= tar) {
				ds.add(arr[i]);
				findsub(i + 1,arr,tar - arr[i],ds,res);
				ds.remove(ds.size() - 1);
			}
		}
	}
}