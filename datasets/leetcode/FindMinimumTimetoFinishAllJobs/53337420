class Solution {
	boolean canFinish(int[] jobs, int[] workers, int index, int maxTime) {
		if (index == jobs.length) {
			return true;
		}
		for (int i = 0; i < workers.length; i++) {
			if (workers[i] + jobs[index] <= maxTime) {
				workers[i] += jobs[index];
				if (canFinish(jobs,workers,index + 1,maxTime)) {
					return true;
				}
				workers[i] -= jobs[index];
			}
			if (workers[i] == 0) {
				break;
			}
		}
		return false;
	}
	int minimumTimeRequired(int[] jobs, int k) {
		int right = Arrays.stream(jobs).sum();
		int left = 0;
		for (int x: jobs) {	
			left = Math.max(x,left);
		}
		while (left < right) {
			int mid = (left + right) / 2;
			if (canFinish(jobs,new int[k],0,mid)) {
				right = mid;
			} 
			else {
				left = mid + 1;
			}
		}
		return left;
	}
}