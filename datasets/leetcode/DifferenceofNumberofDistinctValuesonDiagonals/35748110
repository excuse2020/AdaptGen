class Solution {
	int[][] differenceOfDistinctValues(int[][] grid) {
		int topleft = new int[grid.length];
		int topright = new int[grid.length];
		int k = 0;
		int b = 0;
		int mat = new int[grid.length][grid[0].length];
		for (int i = 0; i < grid.length; i++) {
			for (int j = 0; j < grid[i].length; j++) {
				int p = i;
				int q = j;
				int l = i;
				int m = j;
				while (p >= 0 && q >= 0) {
					p--;
					q--;
					if (p >= 0 && q >= 0) {
						topleft[k++] = grid[p][q];
					} 
					else {
						break;
					}
				}
				while (l < grid.length && m < grid[0].length) {
					l++;
					m++;
					if (l < grid.length && m < grid[0].length) {
						topright[b++] = grid[l][m];
					} 
					else {
						break;
					}
				}
				System.out.println("");
				System.out.println("index " + "  " + i);
				System.out.println("TOP LEFT");
				for (int z = 0; z < k; z++) {
					System.out.print(topleft[z] + " ");
				}
				System.out.println("");
				System.out.println("BOTTOM RIGHT");
				for (int z = 0; z < b; z++) {
					System.out.print(topright[z] + " ");
				}
				int first = findarrayWithDuplicates(topright,b);
				int second = findarrayWithDuplicates(topleft,k);
				k = 0;
				b = 0;
				mat[i][j] = Math.abs(first - second);
			}
		}
		return mat;
	}
	int findarrayWithDuplicates(int arrayWithDuplicates, int k) {
		HashMap<Integer, Integer> hashmap = new HashMap<Integer, Integer>();
		for (int j = 0; j < k; j++) {
			hashmap.put(arrayWithDuplicates[j],j);
		}
		return hashmap.size();
	}
}