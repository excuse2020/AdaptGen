class Solution {
	int helper2(int arr) {
		int n = arr.length;
		int m = arr[0].length;
		int dp = new int[n][m];
		for (int j = 0; j < m; j++) {
			dp[n - 1][j] = arr[n - 1][j];
		}
		for (int i = n - 2; i >= 0; i--) {
			for (int j = 0; j < m; j++) {
				if (j == 0) {
					dp[i][j] = arr[i][j] + Math.min(dp[i + 1][j],dp[i + 1][j + 1]);
				} 
				else if (j == m - 1) {
					dp[i][j] = arr[i][j] + Math.min(dp[i + 1][j],dp[i + 1][j - 1]);
				} 
				else {
					dp[i][j] = arr[i][j] + Math.min(dp[i + 1][j],Math.min(dp[i + 1][j - 1],dp[i + 1][j + 1]));
				}
			}
		}
		int ans = Integer.MAX_VALUE;
		for (int j = 0; j < m; j++) {
			ans = Math.min(ans,dp[0][j]);
		}
		return ans;
	}
	int minFallingPathSum(int[][] arr) {
		return helper2(arr);
	}
}