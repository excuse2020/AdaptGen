class Solution {
	int findCircleNum(int[][] isConnected) {
		int n = isConnected.length;
		List<List<Integer>> l = new ArrayList<>();
		for (int i = 0; i < n; i++) {
			l.add(new ArrayList<>());
			for (int j = 0; j < n; j++) {
				if (i != j && isConnected[i][j] == 1) {
					l.get(i).add(j);
				}
			}
		}
		Queue<Integer> q = new LinkedList<>();
		HashSet<Integer> visited = new HashSet<>();
		int count = 0;
		for (int i = 0; i < n; i++) {
			if (!visited.contains(i)) {
				q.add(i);
				visited.add(i);
				while (!q.isEmpty()) {
					int current = q.poll();
					for (int j: l.get(current)) {	
						if (!visited.contains(j)) {
							q.add(j);
							visited.add(j);
						}
					}
				}
				count++;
			}
		}
		return count;
	}
}