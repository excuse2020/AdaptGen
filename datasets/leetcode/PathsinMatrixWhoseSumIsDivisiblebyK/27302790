class Solution {
	int[][][] dp;
	int numberOfPaths(int[][] grid, int k) {
		dp = new int[grid.length][grid[0].length][k + 1];
		for (int[][] arr: dp) {	
			for (int[] a: arr) {	
				Arrays.fill(a,-1);
			}
		}
		return recursion(grid,0,0,k,0);
	}
	int recursion(int[][] grid, int row, int col, int k, int sum) {
		if (row == grid.length - 1 && col == grid[0].length - 1) {
			return (sum + grid[row][col]) % k == 0 ? 1 : 0;
		}
		sum = (sum + grid[row][col]) % k;
		if (dp[row][col][sum] != -1) {
			return dp[row][col][sum];
		}
		int ans = 0;
		if (row == grid.length - 1) {
			ans = (ans + recursion(grid,row,col + 1,k,sum)) % 1000000007;
		} 
		else if (col == grid[0].length - 1) {
			ans = (ans + recursion(grid,row + 1,col,k,sum)) % 1000000007;
		} 
		else {
			int t1 = recursion(grid,row,col + 1,k,sum) % 1000000007;
			int t2 = recursion(grid,row + 1,col,k,sum) % 1000000007;
			ans = (t1 + t2) % 1000000007;
		}
		return dp[row][col][sum] = ans;
	}
}