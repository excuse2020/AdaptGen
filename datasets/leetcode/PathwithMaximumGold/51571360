class Solution {
	int getMaximumGold(int[][] grid) {
		int m = grid.length;
		int n = grid[0].length;
		int maxGold = 0;
		for (int i = 0; i < m; i++) {
			for (int j = 0; j < n; j++) {
				if (grid[i][j] != 0) {
					boolean[][] visited = new boolean[m][n];
					int currentMax = maximumGoldPathSum(grid,i,j,visited);
					maxGold = Math.max(maxGold,currentMax);
				}
			}
		}
		return maxGold;
	}
	int maximumGoldPathSum(int grid, int i, int j, boolean[][] visited) {
		int m = grid.length;
		int n = grid[0].length;
		if (i < 0 || i >= m || j < 0 || j >= n || grid[i][j] == 0 || visited[i][j]) {
			return 0;
		}
		visited[i][j] = true;
		int sumRight = maximumGoldPathSum(grid,i,j + 1,visited);
		int sumDown = maximumGoldPathSum(grid,i + 1,j,visited);
		int sumLeft = maximumGoldPathSum(grid,i,j - 1,visited);
		int sumUp = maximumGoldPathSum(grid,i - 1,j,visited);
		visited[i][j] = false;
		return grid[i][j] + Math.max(Math.max(sumRight,sumDown),Math.max(sumLeft,sumUp));
	}
}