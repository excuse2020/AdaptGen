class Solution {
	boolean reorderedPowerOf2(int n) {
		int max = 1000000000, min = 1;
		int p = 1, t = n;
		List<Integer> list = new ArrayList();
		int[] org = new int[10], tem = new int[10];
		while (t > 0) {
			org[t % 10]++;
			t /= 10;
			min *= 10;
		}
		min /= 10;
		while (p < max) {
			if (p >= min) {
				list.add(p);
			}
			p *= 2;
		}
		for (int num: list) {	
			for (int i = 0; i < 10; i++) {
				tem[i] = 0;
			}
			while (num > 0) {
				tem[num % 10]++;
				num /= 10;
			}
			boolean b = true;
			for (int i = 0; i < 10; i++) {
				if (tem[i] != org[i]) {
					b = false;
					break;
				}
			}
			if (b) {
				return b;
			}
		}
		return false;
	}
}