class Solution {
	void help(int[][] dp, int n, int r) {
		if (r < 0) {
			return;
		}
		for (int i = 0; i < n; i++) {
			int sum = dp[r + 1][i];
			if (i > 0) {
				sum = Math.min(sum,dp[r + 1][i - 1]);
			}
			if (i < n - 1) {
				sum = Math.min(sum,dp[r + 1][i + 1]);
			}
			dp[r][i] = sum + dp[r][i];
		}
		help(dp,n,r - 1);
	}
	int minFallingPathSum(int[][] matrix) {
		int n = matrix.length;
		help(matrix,n,n - 2);
		int ans = Integer.MAX_VALUE;
		for (int i = 0; i < n; i++) {
			ans = Math.min(ans,matrix[0][i]);
		}
		return ans;
	}
}