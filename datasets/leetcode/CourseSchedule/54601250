class Solution {
	boolean canFinish(int numCourses, int[][] prerequisites) {
		List<List<Integer>> adj = new ArrayList<>();
		for (int i = 0; i < numCourses; i++) {
			adj.add(new ArrayList<>());
		}
		for (int i = 0; i < prerequisites.length; i++) {
			adj.get(prerequisites[i][0]).add(prerequisites[i][1]);
		}
		int[] indegree = new int[numCourses];
		for (int i = 0; i < numCourses; i++) {
			for (int adjacentNode: adj.get(i)) {	
				indegree[adjacentNode]++;
			}
		}
		Queue<Integer> q = new LinkedList<>();
		for (int i = 0; i < numCourses; i++) {
			if (indegree[i] == 0) {
				q.add(i);
			}
		}
		List<Integer> topo = new ArrayList<>();
		while (!q.isEmpty()) {
			int node = q.poll();
			topo.add(node);
			for (int adjacentNode: adj.get(node)) {	
				indegree[adjacentNode]--;
				if (indegree[adjacentNode] == 0) {
					q.add(adjacentNode);
				}
			}
		}
		return topo.size() == numCourses;
	}
}