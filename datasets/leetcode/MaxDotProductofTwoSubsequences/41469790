class Solution {
	Integer[][] dp;
	int f(int i, int j, int[] nums1, int[] nums2) {
		if (i == nums1.length - 1 && j == nums2.length - 1) {
			return nums1[i] * nums2[j];
		}
		if (i == nums1.length - 1) {
			int p = -(int)1e9;
			for (int k = j; k < nums2.length; k++) {
				p = Math.max(p,nums1[i] * nums2[k]);
			}
			return p;
		}
		if (j == nums2.length - 1) {
			int p = -(int)1e9;
			for (int k = i; k < nums1.length; k++) {
				p = Math.max(p,nums2[j] * nums1[k]);
			}
			return p;
		}
		if (dp[i][j] != null) {
			return dp[i][j];
		}
		int a = Math.max(nums1[i] * nums2[j] + f(i + 1,j + 1,nums1,nums2),nums1[i] * nums2[j]);
		int b = Math.max(f(i + 1,j,nums1,nums2),f(i,j + 1,nums1,nums2));
		System.out.println(a + " ");
		return dp[i][j] = Math.max(a,b);
	}
	int maxDotProduct(int[] nums1, int[] nums2) {
		dp = new Integer[nums1.length][nums2.length];
		return f(0,0,nums1,nums2);
	}
}