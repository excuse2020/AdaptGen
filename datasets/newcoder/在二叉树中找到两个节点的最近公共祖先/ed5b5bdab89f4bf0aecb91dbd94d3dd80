class Solution {
	boolean getAncetor(TreeNode node, int target, ArrayList<Integer> list) {
		if (node == null) {
			return false;
		}
		if (node.val == target) {
			list.add(node.val);
			return true;
		}
		if (getAncetor(node.left,target,list) || getAncetor(node.right,target,list)) {
			list.add(node.val);
			return true;
		}
		return false;
	}
	int lowestCommonAncestor(TreeNode root, int o1, int o2) {
		ArrayList<Integer> o1Ancetors = new ArrayList<>();
		ArrayList<Integer> o2Ancetors = new ArrayList<>();
		int returnAncetor = -1;
		getAncetor(root,o1,o1Ancetors);
		getAncetor(root,o2,o2Ancetors);
		for (int i = 0; i < o1Ancetors.size(); i++) {
			if (o2Ancetors.contains(o1Ancetors.get(i))) {
				returnAncetor = o1Ancetors.get(i);
				break;
			}
		}
		return returnAncetor;
	}
}