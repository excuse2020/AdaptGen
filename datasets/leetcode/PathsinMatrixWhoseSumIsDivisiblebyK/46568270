class Solution {
	int modulo = (int) 1e9 + 7;
	int dfs(int[][] grid, int row, int col, int k, int sum, int[][][] memo) {
		if (row >= grid.length || col >= grid[0].length) {
			return 0;
		}
		if (row == grid.length - 1 && col == grid[0].length - 1) {
			sum += (grid[row][col] % k);
			if (sum % k == 0) {
				return 1;
			}
			return 0;
		}
		if (memo[row][col][sum % k] != -1) {
			return memo[row][col][sum % k];
		}
		int n = (sum + grid[row][col] % k) % k;
		int paths = (dfs(grid,row + 1,col,k,n,memo) % modulo + dfs(grid,row,col + 1,k,n,memo) % modulo) % modulo;
		memo[row][col][sum % k] = paths;
		return memo[row][col][sum % k];
	}
	int numberOfPaths(int[][] grid, int k) {
		int[][][] memo = new int[grid.length][grid[0].length][k];
		for (int[][] arr: memo) {	
			for (int[] a: arr) {	
				Arrays.fill(a,-1);
			}
		}
		return dfs(grid,0,0,k,0,memo);
	}
}