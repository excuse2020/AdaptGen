class Solution {
	int minSizeSubarray(int[] nums, int target) {
		int n = nums.length;
		int sum = 0;
		for (int i: nums) {	
			sum += i;
		}
		int min = Integer.MAX_VALUE;
		int loops = target / sum;
		target %= sum;
		if (target == 0) {
			return loops * n;
		}
		HashMap<Integer, Integer> dp = new HashMap<>();
		dp.put(0,-1);
		int currSum = 0;
		for (int i = 0; i < 2 * n; i++) {
			currSum += (nums[i % n]);
			if (dp.containsKey(currSum - target)) {
				min = Math.min(min,i - dp.get(currSum - target));
			}
			dp.put(currSum,i);
		}
		if (min == Integer.MAX_VALUE) {
			return -1;
		}
		return min + loops * n;
	}
}