class Solution {
	boolean isIPv4(String IP) {
		String[] parts = IP.split("\\.",-1);
		if (parts.length != 4) {
			return false;
		}
		String regex = "[0-9]{1,3}";
		for (String part: parts) {	
			if (!part.matches(regex)) {
				return false;
			}
			if (part.length() > 1 && part.startsWith("0")) {
				return false;
			}
			if (255 < Integer.parseInt(part)) {
				return false;
			}
		}
		return true;
	}
	boolean isIPv6(String IP) {
		String[] parts = IP.split(":",-1);
		if (parts.length != 8) {
			return false;
		}
		String regex = "[0-9a-fA-F]{1,4}";
		for (String part: parts) {	
			if (!part.matches(regex)) {
				return false;
			}
		}
		return true;
	}
	String solution1(String IP) {
		if (IP.contains(".")) {
			if (isIPv4(IP)) {
				return "IPv4";
			}
		}
		if (IP.contains(":")) {
			if (isIPv6(IP)) {
				return "IPv6";
			}
		}
		return "Neither";
	}
	String solution2(String IP) {
		String regexIPv4 = "(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])";
		String regexIPv6 = "(([0-9a-fA-F]{1,4}):){7}([0-9a-fA-F]{1,4})";
		if (IP.matches(regexIPv4)) {
			return "IPv4";
		}
		if (IP.matches(regexIPv6)) {
			return "IPv6";
		}
		return "Neither";
	}
	String solve(String IP) {
		return solution2(IP);
	}
}