class Solution {
	ListNode addInList(ListNode head1, ListNode head2) {
		ListNode reverse1 = reverse(head1);
		ListNode reverse2 = reverse(head2);
		ListNode pre = null;
		int carry = 0;
		while (reverse1 != null && reverse2 != null) {
			int val1 = reverse1.val;
			int val2 = reverse2.val;
			int total = val1 + val2;
			int rel = total % 10;
			carry = total > 9 ? 1 : 0;
			ListNode temp = new ListNode(rel);
			temp.next = pre;
			pre = temp;
			if (reverse1.next == null && reverse2.next == null) {
				break;
			} 
			else {
				if (reverse1.next == null) {
					ListNode temp1 = new ListNode(0);
					reverse1.next = temp1;
				}
				if (reverse2.next == null) {
					ListNode temp1 = new ListNode(0);
					reverse2.next = temp1;
				}
			}
			reverse1 = reverse1.next;
			reverse2 = reverse2.next;
		}
		if (carry != 0) {
			ListNode temp = new ListNode(carry);
			temp.next = pre;
			pre = temp;
		}
		return pre;
	}
	ListNode reverse(ListNode listNode) {
		ListNode pre = null;
		while (listNode != null) {
			ListNode next = listNode.next;
			listNode.next = pre;
			pre = listNode;
			listNode = next;
		}
		return pre;
	}
}