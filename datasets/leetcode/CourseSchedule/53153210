class Solution {
	boolean canFinish(int numCourses, int[][] prerequisites) {
		ArrayList<ArrayList<Integer>> adj = new ArrayList<>();
		for (int i = 0; i < numCourses; i++) {
			adj.add(new ArrayList<>());
		}
		int m = prerequisites.length;
		for (int i = 0; i < m; i++) {
			adj.get(prerequisites[i][1]).add(prerequisites[i][0]);
		}
		int visited = new int[numCourses];
		for (int i = 0; i < numCourses; i++) {
			if (visited[i] == 0) {
				if (!dfs(adj,visited,i)) {
					return false;
				}
			}
		}
		return true;
	}
	boolean dfs(ArrayList<ArrayList<Integer>> adj, int[] visited, int course) {
		if (visited[course] == 1) {
			return false;
		}
		visited[course] = 1;
		for (int i = 0; i < adj.get(course).size(); i++) {
			if (!dfs(adj,visited,adj.get(course).get(i))) {
				return false;
			}
		}
		visited[course] = 0;
		adj.get(course).clear();
		return true;
	}
}