class Solution {
	int[] levelMap;
	int maxDepth = 0;
	void dfs(TreeNode root, int depth) {
		if (root == null) {
			return;
		}
		maxDepth = Math.max(depth,maxDepth);
		levelMap[depth] += root.val;
		dfs(root.left,depth + 1);
		dfs(root.right,depth + 1);
	}
	void dfs2(TreeNode root, int depth) {
		if (root == null) {
			return;
		}
		if (depth == 0) {
			root.val = 0;
		}
		TreeNode left = root.left;
		TreeNode right = root.right;
		int siblingSum = (left == null ? 0 : left.val) + (right == null ? 0 : right.val);
		if (root.left != null) {
			root.left.val = levelMap[depth + 1] - siblingSum;
		}
		if (root.right != null) {
			root.right.val = levelMap[depth + 1] - siblingSum;
		}
		dfs2(root.left,depth + 1);
		dfs2(root.right,depth + 1);
	}
	TreeNode replaceValueInTree(TreeNode root) {
		levelMap = new int[100000];
		dfs(root,0);
		dfs2(root,0);
		levelMap = null;
		System.gc();
		return root;
	}
}