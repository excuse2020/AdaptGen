class Solution {
	String getPermutation(int n, int k) {
		StringBuilder res = new StringBuilder();
		List<Integer> nums = new ArrayList<>();
		for (int i = 1; i <= n; i++) {
			nums.add(i);
		}
		StringBuilder cur = new StringBuilder();
		recursion(nums,k,cur,n,res);
		return res.toString();
	}
	void recursion(List<Integer> nums, int k, StringBuilder cur, int tracker, StringBuilder res) {
		if (tracker == 0) {
			res.append(cur);
			return;
		}
		int factorial = 1;
		for (int i = 1; i <= tracker - 1; ++i) {
			factorial *= i;
		}
		int idx = (k - 1) / factorial;
		int num = nums.remove(idx);
		cur.append(num);
		recursion(nums,k - idx * factorial,cur,tracker - 1,res);
	}
}