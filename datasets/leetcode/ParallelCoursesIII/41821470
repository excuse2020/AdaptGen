class Solution {
	int minimumTime(int n, int[][] relations, int[] time) {
		List<List<Integer>> adj = new ArrayList<>();
		for (int i = 0; i < n; i++) {
			adj.add(new ArrayList<>());
		}
		int max = -1;
		int[] inDegree = new int[n];
		for (int i = 0; i < relations.length; i++) {
			adj.get(relations[i][0] - 1).add(relations[i][1] - 1);
			inDegree[relations[i][1] - 1] += 1;
		}
		int[] arr = new int[n];
		Queue<Integer> q = new LinkedList<>();
		for (int i = 0; i < n; i++) {
			if (inDegree[i] == 0) {
				q.add(i);
				arr[i] = time[i];
			}
		}
		while (q.size() > 0) {
			int u = q.poll();
			for (int x: adj.get(u)) {	
				arr[x] = Math.max(arr[x],arr[u] + time[x]);
				inDegree[x]--;
				if (inDegree[x] == 0) {
					q.add(x);
				}
			}
		}
		for (int i = 0; i < n; i++) {
			max = Math.max(max,arr[i]);
		}
		return max;
	}
}