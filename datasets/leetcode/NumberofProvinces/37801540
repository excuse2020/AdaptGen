class Solution {
	void dfs(int[][] isConnected, int province, boolean[] visited) {
		visited[province] = true;
		for (int neighbor = 0; neighbor < isConnected[province].length; neighbor++) {
			if (!visited[neighbor] && isConnected[province][neighbor] == 1) {
				dfs(isConnected,neighbor,visited);
			}
		}
	}
	int findCircleNum(int[][] isConnected) {
		int numProvinces = isConnected.length;
		boolean[] visited = new boolean[numProvinces];
		int numCircles = 0;
		for (int i = 0; i < numProvinces; i++) {
			if (!visited[i]) {
				numCircles++;
				dfs(isConnected,i,visited);
			}
		}
		return numCircles;
	}
}