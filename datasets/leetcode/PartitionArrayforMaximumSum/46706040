class Solution {
	int[] dp = new int[501];
	int MaximumSum(int i, int[] arr, int k) {
		if (i >= arr.length) {
			return 0;
		}
		if (dp[i] != -1) {
			return dp[i];
		}
		int cur_max = -1;
		int result = 0;
		for (int idx = i; idx < Math.min(arr.length,i + k); idx++) {
			cur_max = Math.max(cur_max,arr[idx]);
			result = Math.max(result,cur_max * (idx - i + 1) + MaximumSum(idx + 1,arr,k));
		}
		dp[i] = result;
		return dp[i];
	}
	int maxSumAfterPartitioning(int[] arr, int k) {
		Arrays.fill(dp,-1);
		int ans = MaximumSum(0,arr,k);
		return ans;
	}
}