class Solution {
	void fillDp(int[][] dp, int a, int b, int row, int n, int[] nums) {
		for (int i = 2; i < n; i++) {
			int c = nums[i] + a;
			a = Math.max(a,b);
			b = c;
			dp[row][i] = c;
		}
	}
	int rob(int[] nums) {
		int n = nums.length;
		if (n == 1) {
			return nums[0];
		} 
		else if (n == 2) {
			return Math.max(nums[0],nums[1]);
		} 
		else if (n == 3) {
			return Math.max(nums[0],Math.max(nums[1],nums[2]));
		}
		int[][] dp = new int[2][n];
		int a = nums[0], b = nums[1];
		fillDp(dp,a,b,0,n,nums);
		fillDp(dp,0,b,1,n,nums);
		dp[0][n - 1] = 0;
		int ans = 0;
		for (int i = 0; i < 2; i++) {
			for (int j = 0; j < n; j++) {
				if (ans < dp[i][j]) {
					ans = dp[i][j];
				}
			}
		}
		return ans;
	}
}