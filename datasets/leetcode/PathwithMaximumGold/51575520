class Solution {
	int dfs(int[][] grid, int i, int j) {
		int rows = grid.length;
		int cols = grid[0].length;
		if (i < 0 || i >= rows || j < 0 || j >= cols || grid[i][j] == 0) {
			return 0;
		}
		int gold = grid[i][j];
		grid[i][j] = 0;
		int maxGold = gold + Math.max(Math.max(dfs(grid,i + 1,j),dfs(grid,i - 1,j)),Math.max(dfs(grid,i,j + 1),dfs(grid,i,j - 1)));
		grid[i][j] = gold;
		return maxGold;
	}
	int getMaximumGold(int[][] grid) {
		int rows = grid.length;
		int cols = grid[0].length;
		int maxGold = 0;
		for (int i = 0; i < rows; i++) {
			for (int j = 0; j < cols; j++) {
				if (grid[i][j] != 0) {
					maxGold = Math.max(maxGold,dfs(grid,i,j));
				}
			}
		}
		return maxGold;
	}
}