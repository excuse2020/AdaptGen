class Solution {
	int find(int ind, int[][] events, int limit, int len, int[][] dp) {
		if (ind >= len || limit >= 2) {
			return 0;
		}
		if (dp[ind][limit] != -1) {
			return dp[ind][limit];
		}
		int notpick = find(ind + 1,events,limit,len,dp);
		int pick = events[ind][2] + find(getIndex(ind,events,len),events,limit + 1,len,dp);
		return dp[ind][limit] = Math.max(notpick,pick);
	}
	int getIndex(int ind, int[][] events, int len) {
		int start = ind;
		int end = len - 1;
		int ans = len;
		while (start <= end) {
			int mid = (start + end) / 2;
			if (events[mid][0] > events[ind][1]) {
				ans = mid;
				end = mid - 1;
			} 
			else {
				start = mid + 1;
			}
		}
		return ans;
	}
	int maxTwoEvents(int[][] events) {
		int n = events.length;
		Arrays.sort(events,(a, b) -> {a[0] - b[0]});
		int[][] dp = new int[n][2];
		for (int[] row: dp) {	
			Arrays.fill(row,-1);
		}
		return find(0,events,0,n,dp);
	}
}