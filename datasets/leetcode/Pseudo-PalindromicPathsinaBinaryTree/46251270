class Solution {
	int fncn(TreeNode root, HashMap<Integer, Integer> map) {
		if (root == null) {
			return 0;
		}
		map.put(root.val,map.getOrDefault(root.val,0) + 1);
		int count = 0;
		if ((root.left == null) && (root.right == null)) {
			for (int value: map.values()) {	
				if (value % 2 == 1) {
					count++;
				}
			}
			map.put(root.val,map.getOrDefault(root.val,0) - 1);
			if (count <= 1) {
				return 1;
			} 
			else {
				return 0;
			}
		}
		int left = fncn(root.left,map);
		int right = fncn(root.right,map);
		map.put(root.val,map.getOrDefault(root.val,0) - 1);
		return left + right;
	}
	int pseudoPalindromicPaths(TreeNode root) {
		HashMap<Integer, Integer> map = new HashMap<>();
		return fncn(root,map);
	}
}