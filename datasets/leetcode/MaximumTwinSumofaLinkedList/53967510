class Solution {
	ListNode addfirst(int data, ListNode rev) {
		ListNode newnode = new ListNode(data);
		if (rev == null) {
			rev = newnode;
			return rev;
		}
		ListNode temp = rev;
		rev = newnode;
		newnode.next = temp;
		return rev;
	}
	int pairSum(ListNode head) {
		ListNode rev = null;
		rev = reverse(head,rev);
		int maxsum = twinsum(head,rev,0);
		return maxsum;
	}
	ListNode reverse(ListNode head, ListNode rev) {
		ListNode curr = head;
		while (curr != null) {
			rev = addfirst(curr.val,rev);
			curr = curr.next;
		}
		return rev;
	}
	int twinsum(ListNode head, ListNode rev, int maxsum) {
		ListNode st = head;
		ListNode end = rev;
		while (end != null && st != null) {
			int t = st.val + end.val;
			maxsum = maxsum > t ? maxsum : t;
			st = st.next;
			end = end.next;
		}
		return maxsum;
	}
}