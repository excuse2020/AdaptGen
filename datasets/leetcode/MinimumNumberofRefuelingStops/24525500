class Solution {
	int minRefuelStops(int target, int startFuel, int[][] stations) {
		if (startFuel >= target) {
			return 0;
		}
		Queue<int[]> pq = new PriorityQueue<>((s1, s2) -> {s2[1] - s1[1]});
		int currFuel = startFuel;
		int stops = 0;
		int i = 0, n = stations.length;
		while (target > currFuel) {
			while (i < n && currFuel - stations[i][0] >= 0) {
				pq.add(stations[i]);
				i++;
			}
			if (pq.size() == 0) {
				return -1;
			}
			int[] refilAt = pq.poll();
			stops++;
			currFuel = currFuel + refilAt[1];
		}
		return stops;
	}
}