class Solution {
	int dp;
	int n;
	int helper(int arr, int i, int j) {
		if (j >= n || j < 0) {
			return Integer.MAX_VALUE;
		}
		if (i == n - 1) {
			return arr[i][j];
		}
		if (dp[i][j] != -1) {
			return dp[i][j];
		}
		int a = helper(arr,i + 1,j);
		int b = helper(arr,i + 1,j - 1);
		int c = helper(arr,i + 1,j + 1);
		return dp[i][j] = arr[i][j] + Math.min(a,Math.min(b,c));
	}
	int helper2(int arr) {
		int n = arr.length;
		int dp = new int[n][n];
		for (int j = 0; j < n; j++) {
			dp[n - 1][j] = arr[n - 1][j];
		}
		for (int i = n - 2; i >= 0; i--) {
			for (int j = 0; j < n; j++) {
				if (j == 0) {
					dp[i][j] = arr[i][j] + Math.min(dp[i + 1][j],dp[i + 1][j + 1]);
				} 
				else if (j == n - 1) {
					dp[i][j] = arr[i][j] + Math.min(dp[i + 1][j],dp[i + 1][j - 1]);
				} 
				else {
					dp[i][j] = arr[i][j] + Math.min(dp[i + 1][j],Math.min(dp[i + 1][j - 1],dp[i + 1][j + 1]));
				}
			}
		}
		int ans = Integer.MAX_VALUE;
		for (int j = 0; j < n; j++) {
			ans = Math.min(ans,dp[0][j]);
		}
		return ans;
	}
	int minFallingPathSum(int[][] arr) {
		return helper2(arr);
	}
}