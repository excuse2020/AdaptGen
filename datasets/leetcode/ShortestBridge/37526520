class Solution {
	Queue<int[]> q = new LinkedList<>();
	void dfs(int x, int y, int n, int[][] grid) {
		if (x < 0 || y < 0 || x >= n || y >= n || grid[x][y] != 1) {
			return;
		}
		grid[x][y] = -1;
		q.add(new int{x, y});
		for (int[] nei: new int{{x + 1, y}, {x - 1, y}, {x, y + 1}, {x, y - 1}}) {	
			int neiX = nei[0];
			int neiY = nei[1];
			if (neiX >= 0 && neiY >= 0 && neiX < n && neiY < n && grid[neiX][neiY] == 1) {
				dfs(neiX,neiY,n,grid);
			}
		}
	}
	int shortestBridge(int[][] grid) {
		int n = grid.length;
		int firstX = -1;
		int firstY = -1;
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < n; j++) {
				if (grid[i][j] == 1) {
					firstX = i;
					firstY = j;
					break;
				}
			}
		}
		dfs(firstX,firstY,n,grid);
		int dist = 0;
		while (!q.isEmpty()) {
			int size = q.size();
			for (int i = 0; i < size; i++) {
				int[] curr = q.poll();
				int x = curr[0];
				int y = curr[1];
				for (int[] nei: new int{{x + 1, y}, {x - 1, y}, {x, y + 1}, {x, y - 1}}) {	
					int neiX = nei[0];
					int neiY = nei[1];
					if (neiX >= 0 && neiY >= 0 && neiX < n && neiY < n) {
						if (grid[neiX][neiY] == 1) {
							return dist;
						} 
						else if (grid[neiX][neiY] == 0) {
							q.add(new int{neiX, neiY});
							grid[neiX][neiY] = -1;
						}
					}
				}
			}
			dist++;
		}
		return dist;
	}
}