class Solution {
	int count = 0;
	LinkedList dict;
	int dp;
	int mod = 1000000007;
	int KD(int n, int len, int place) {
		if (len == n) {
			return 1;
		}
		if (place == 5) {
			return 0;
		}
		if (dp[len][place] != -1) {
			return dp[len][place];
		}
		int temp = 0;
		LinkedList<Integer> k = dict[place];
		for (Integer i: k) {	
			temp = (temp + KD(n,len + 1,i)) % mod;
		}
		dp[len][place] = temp;
		return temp;
	}
	void fillMapping() {
		dict[0].add(4);
		dict[0].add(6);
		dict[1].add(6);
		dict[1].add(8);
		dict[2].add(7);
		dict[2].add(9);
		dict[3].add(4);
		dict[3].add(8);
		dict[4].add(0);
		dict[4].add(3);
		dict[4].add(9);
		dict[6].add(0);
		dict[6].add(1);
		dict[6].add(7);
		dict[7].add(2);
		dict[7].add(6);
		dict[8].add(1);
		dict[8].add(3);
		dict[9].add(2);
		dict[9].add(4);
	}
	int knightDialer(int n) {
		if (n == 1) {
			return 10;
		}
		dp = new int[n][10];
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < 10; j++) {
				if (j != 5) {
					dp[i][j] = -1;
				}
			}
		}
		dict = new LinkedList[10];
		for (int i = 0; i <= 9; i++) {
			dict[i] = new LinkedList<>();
		}
		fillMapping();
		for (int i = 0; i <= 9; i++) {
			count = (count + KD(n,1,i)) % mod;
		}
		return count;
	}
}