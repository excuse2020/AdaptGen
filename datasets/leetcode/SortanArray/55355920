class Solution {
	void mer(int[] arr, int s, int e) {
		if (s == e) {
			return;
		}
		int m = s + (e - s) / 2;
		mer(arr,s,m);
		mer(arr,m + 1,e);
		merge(arr,s,m,e);
	}
	void merge(int[] arr, int s, int m, int e) {
		int[] a = new int[e - s + 1];
		int i = s;
		int j = m + 1;
		int k = 0;
		while (i <= m && j <= e) {
			if (arr[i] >= arr[j]) {
				a[k] = arr[j];
				j++;
			} 
			else {
				a[k] = arr[i];
				i++;
			}
			k++;
		}
		while (i <= m) {
			a[k] = arr[i];
			i++;
			k++;
		}
		while (j <= e) {
			a[k] = arr[j];
			j++;
			k++;
		}
		k = 0;
		i = s;
		while (k < a.length) {
			arr[i] = a[k];
			i++;
			k++;
		}
	}
	int[] sortArray(int[] nums) {
		mer(nums,0,nums.length - 1);
		return nums;
	}
}