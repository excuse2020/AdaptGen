class Solution {
	TreeNode doReConstructBinaryTree(int[] pre, int[] vin, int ps, int pe, int vs, int ve) {
		if (ps > pe || vs > ve) {
			return null;
		}
		TreeNode root = new TreeNode(pre[ps]);
		int mid = findMid(vin,pre[ps]);
		root.left = doReConstructBinaryTree(pre,vin,ps + 1,ps + mid - vs,vs,mid - 1);
		root.right = doReConstructBinaryTree(pre,vin,ps + mid - vs + 1,pe,mid + 1,ve);
		return root;
	}
	int findMid(int[] vin, int target) {
		for (int i = 0; i < vin.length; i++) {
			if (vin[i] == target) {
				return i;
			}
		}
		return -1;
	}
	TreeNode reConstructBinaryTree(int[] pre, int[] vin) {
		if (pre == null || pre.length == 0) {
			return null;
		}
		return doReConstructBinaryTree(pre,vin,0,pre.length - 1,0,vin.length - 1);
	}
}