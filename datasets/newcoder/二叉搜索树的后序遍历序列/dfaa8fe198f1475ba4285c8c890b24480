class Solution {
	boolean VerifySquenceOfBST(int[] sequence) {
		if (sequence == null || sequence.length == 0) {
			return false;
		}
		if (sequence.length == 1 || sequence.length == 2) {
			return true;
		}
		int firstRight = -1;
		int rootVal = sequence[sequence.length - 1];
		for (int i = 0; i < sequence.length - 1; i++) {
			if (sequence[i] > rootVal) {
				firstRight = i;
				break;
			}
		}
		if (firstRight != -1) {
			for (int i = firstRight; i < sequence.length - 1; i++) {
				if (sequence[i] < rootVal) {
					return false;
				}
			}
		}
		int[] leftArray = null;
		int[] rightArray = null;
		if (firstRight == -1) {
			leftArray = Arrays.copyOfRange(sequence,0,sequence.length - 1);
			return VerifySquenceOfBST(leftArray);
		} 
		else if (firstRight == 0) {
			rightArray = Arrays.copyOfRange(sequence,0,sequence.length - 1);
			return VerifySquenceOfBST(rightArray);
		} 
		else {
			leftArray = Arrays.copyOfRange(sequence,0,firstRight);
			rightArray = Arrays.copyOfRange(sequence,firstRight,sequence.length - 1);
			return VerifySquenceOfBST(leftArray) && VerifySquenceOfBST(rightArray);
		}
	}
}