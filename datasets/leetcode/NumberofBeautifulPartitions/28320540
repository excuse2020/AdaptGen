class Solution {
	long[][] memo;
	int minLength;
	int mod = (int) 1e9 + 7;
	String s;
	int beautifulPartitions(String s, int k, int minLength) {
		this.s = s;
		this.minLength = minLength;
		this.memo = new long[s.length()][k + 1];
		for (int i = 0; i < s.length(); i++) {
			Arrays.fill(memo[i],-1);
		}
		return (int) (f(0,k) % mod);
	}
	long f(int i, int k) {
		if (i == s.length() && k == 0) {
			return 1;
		}
		if (i >= s.length() || k < 0) {
			return 0;
		}
		if (memo[i][k] != -1) {
			return memo[i][k];
		}
		long ret = 0;
		if (isPrime(s.charAt(i))) {
			for (int j = i + minLength - 1; j < s.length(); j++) {
				if ((j + 1) + (k - 1) * minLength > s.length()) {
					break;
				}
				if (isPrime(s.charAt(j))) {
					continue;
				}
				ret += f(j + 1,k - 1);
				ret %= mod;
			}
		}
		return memo[i][k] = ret;
	}
	boolean isPrime(char c) {
	}
}