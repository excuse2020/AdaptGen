class Solution {
	void dfs(int node, List<Integer>[] parents, TreeSet<Integer>[] ancestors) {
		TreeSet<Integer> set = new TreeSet<>();
		for (int parent: parents[node]) {	
			set.add(parent);
			if (ancestors[parent] == null) {
				dfs(parent,parents,ancestors);
			}
			set.addAll(ancestors[parent]);
		}
		ancestors[node] = set;
	}
	List<List<Integer>> getAncestors(int n, int[][] edges) {
		List<Integer>[] parents = new ArrayList[n];
		TreeSet<Integer>[] ancestors = new TreeSet[n];
		for (int i = 0; i < n; ++i) {
			parents[i] = new ArrayList<>();
		}
		for (int[] edge: edges) {	
			parents[edge[1]].add(edge[0]);
		}
		List<List<Integer>> result = new ArrayList<>();
		for (int i = 0; i < n; ++i) {
			if (ancestors[i] == null) {
				dfs(i,parents,ancestors);
			}
			result.add(new ArrayList<>(ancestors[i]));
		}
		return result;
	}
}