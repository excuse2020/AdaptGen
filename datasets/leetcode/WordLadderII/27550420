class Solution {
	String begin;
	HashMap<String, Integer> map;
	List<List<String>> res;
	void dfs(List<String> seq, String str) {
		if (str.equals(begin)) {
			List<String> dup = new ArrayList<>(seq);
			dup.add(str);
			Collections.reverse(dup);
			res.add(dup);
			return;
		}
		int steps = map.get(str);
		int i = 0;
		char ch;
	}
	List<List<String>> findLadders(String beginWord, String endWord, List<String> wordList) {
		Set<String> set = new HashSet<>();
		for (int i = 0; i < wordList.size(); i++) {
			set.add(wordList.get(i));
		}
		Queue<String> que = new LinkedList<>();
		begin = beginWord;
		que.add(beginWord);
		set.remove(beginWord);
		map = new HashMap<>();
		map.put(beginWord,1);
		String st = que.poll();
		int steps = map.get(st);
		if (st.equals(endWord)) {
			break;
		}
		int i = 0;
		char ch;
	}
}