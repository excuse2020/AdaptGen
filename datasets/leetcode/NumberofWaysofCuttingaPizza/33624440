class Solution {
	int mod = (int) 1e9 + 7;
	boolean isvalid(int[][] apple, int i, int n, int j, int x, int m) {
		int count1 = 0;
		int count2 = 0;
		for (int p = i; p < n; p++) {
			count1 += (apple[p][x] - apple[p][j]);
			count2 += (apple[p][m] - apple[p][x]);
		}
		if (count1 >= 1 && count2 >= 1) {
			return true;
		}
		return false;
	}
	boolean isvalid1(int[][] apple, int i, int y, int n, int j, int m) {
		int count1 = 0;
		for (int p = i; p < y; p++) {
			count1 += (apple[p][m] - apple[p][j]);
		}
		int count2 = 0;
		for (int q = y; q < n; q++) {
			count2 += (apple[q][m] - apple[q][j]);
		}
		if (count1 >= 1 && count2 >= 1) {
			return true;
		}
		return false;
	}
	long solve(int[][] apple, int i, int j, int n, int m, int cut, int k, Map<String, Long> mp) {
		if (cut == k) {
			return 1;
		}
		String key;
	}
	int ways(String[] pizza, int k) {
		int n = pizza.length;
		int m = pizza[0].length();
		Map<String, Long> mp = new HashMap<>();
		int apple = new int[n][m + 1];
		for (int i = 0; i < n; i++) {
			apple[i][0] = 0;
		}
		int i = 0;
		int count = 0;
		int j = 0;
	}
}