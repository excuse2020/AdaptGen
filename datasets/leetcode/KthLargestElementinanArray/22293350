class Solution {
	int findKthLargest(int[] nums, int k) {
		k = nums.length - k;
		return quickSelect(nums,k,0,nums.length - 1);
	}
	int quickSelect(int[] nums, int k, int l, int r) {
		if (r > l) {
			Random random_num = new Random();
			int tempPivot = l + random_num.nextInt(r - l);
			int tempSwap = nums[r];
			nums[r] = nums[tempPivot];
			nums[tempPivot] = tempSwap;
		}
		int pivotElement = nums[r];
		int pivot = l;
		for (int i = l; i < r; i++) {
			if (nums[i] <= pivotElement) {
				int temp = nums[i];
				nums[i] = nums[pivot];
				nums[pivot] = temp;
				pivot++;
			}
		}
		int temp = nums[r];
		nums[r] = nums[pivot];
		nums[pivot] = temp;
		if (pivot > k) {
			return quickSelect(nums,k,l,pivot - 1);
		} 
		else if (pivot < k) {
			return quickSelect(nums,k,pivot + 1,r);
		} 
		else {
			return nums[pivot];
		}
	}
}