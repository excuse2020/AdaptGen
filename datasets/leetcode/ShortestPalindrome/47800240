class Solution {
	int[] fail_fun(String s) {
		int n = s.length();
		int[] arr = new int[n];
		for (int i = 1, k = 0; i < n; i++) {
			while (k > 0 && s.charAt(k) != s.charAt(i)) {
				k = arr[k - 1];
			}
			if (s.charAt(k) == s.charAt(i)) {
				arr[i] = ++k;
			}
		}
		return arr;
	}
	String shortestPalindrome(String s) {
		StringBuilder sb = new StringBuilder(s);
		String rev = sb.reverse().toString();
		sb.reverse();
		String temp = s + "@";
		int[] vr = fail_fun(temp);
		int maxm = vr[vr.length - 1];
		StringBuilder tempBuilder = new StringBuilder();
		for (int i = maxm; i < s.length(); i++) {
			tempBuilder.append(s.charAt(i));
		}
		return tempBuilder.reverse().toString() + s;
	}
}