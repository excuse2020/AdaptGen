class Solution {
	int[] bfs(List<List<Integer>> g, int src) {
		Queue<Integer> q = new ArrayDeque<>();
		q.add(src);
		int[] minPath = new int[g.size()];
		Arrays.fill(minPath,Integer.MAX_VALUE);
		minPath[src] = 0;
		Set<Integer> visited = new HashSet<>();
		while (!q.isEmpty()) {
			int origin = q.poll();
			visited.add(origin);
			for (int destination: g.get(origin)) {	
				if (visited.contains(destination)) {
					continue;
				}
				minPath[destination] = minPath[origin] + 1;
				q.add(destination);
			}
		}
		return minPath;
	}
	int closestMeetingNode(int[] edges, int node1, int node2) {
		List<List<Integer>> graph = new ArrayList<>();
		for (int n: edges) {	
			graph.add(new ArrayList<>());
			if (n == -1) {
				continue;
			}
			graph.get(graph.size() - 1).add(n);
		}
		int[] minPath1 = bfs(graph,node1);
		int[] minPath2 = bfs(graph,node2);
		return closestNode(minPath1,minPath2);
	}
	int closestNode(int[] mp1, int[] mp2) {
		int minPath = Integer.MAX_VALUE;
		int minNode = -1;
		for (int i = 0; i < mp1.length; i++) {
			if (minPath > Math.max(mp1[i],mp2[i])) {
				minNode = i;
				minPath = Math.max(mp1[i],mp2[i]);
			}
		}
		return minNode;
	}
}