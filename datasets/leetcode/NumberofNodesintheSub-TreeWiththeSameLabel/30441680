class Solution {
	int[] result = null;
	int[] DFS(int node, String labels, List<List<Integer>> graph, boolean[] visited) {
		visited[node] = true;
		int[] count = new int[26];
		char label = labels.charAt(node);
	}
	int[] countSubTrees(int n, int[][] edges, String labels) {
		List<List<Integer>> graph = new ArrayList<>();
		boolean[] visited = new boolean[n];
		result = new int[n];
		for (int i = 0; i < n; i++) {
			graph.add(new ArrayList<Integer>());
		}
		for (int[] edge: edges) {	
			graph.get(edge[0]).add(edge[1]);
			graph.get(edge[1]).add(edge[0]);
		}
		DFS(0,labels,graph,visited);
		return result;
	}
}