class Solution {
	boolean canReorderDoubled(int[] arr) {
		if (arr.length % 2 != 0) {
			return false;
		}
		HashMap<Integer, Integer> map = new HashMap<>();
		for (int val: arr) {	
			map.put(val,map.getOrDefault(val,0) + 1);
		}
		for (int key: map.keySet()) {	
			if (map.get(key) == 0) {
				continue;
			}
			if (key % 2 == 0 && map.containsKey(key / 2)) {
				int f1 = map.get(key / 2);
				int f2 = map.get(key);
				map.put(key / 2,Math.max(0,f1 - f2));
				map.put(key,Math.max(0,f2 - f1));
			}
			if (map.get(key) != 0 && map.containsKey(key * 2)) {
				int f1 = map.get(key * 2);
				int f2 = map.get(key);
				map.put(key * 2,Math.max(0,f1 - f2));
				map.put(key,Math.max(0,f2 - f1));
			}
		}
		for (int key: map.keySet()) {	
			if (map.get(key) != 0) {
				return false;
			}
		}
		return true;
	}
}