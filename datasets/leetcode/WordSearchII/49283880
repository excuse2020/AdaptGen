class Solution {
	char[][] board;
	int m;
	int n;
	List<String> res = new LinkedList<>();
	TrieNode trie = new TrieNode();
	boolean[][] visited;
	void dfs(int row, int col, StringBuilder sb, TrieNode curTrie) {
		if (row < 0 || row == m || col == n || col < 0) {
			return;
		}
		if (visited[row][col]) {
			return;
		}
		char curChar = board[row][col];
		if (!curTrie.map.containsKey(curChar)) {
			return;
		}
		sb.append(curChar);
		curTrie = curTrie.map.get(curChar);
		visited[row][col] = true;
		if (curTrie.isWord) {
			res.add(sb.toString());
			curTrie.isWord = false;
		}
		dfs(row,col + 1,sb,curTrie);
		dfs(row + 1,col,sb,curTrie);
		dfs(row,col - 1,sb,curTrie);
		dfs(row - 1,col,sb,curTrie);
		sb.setLength(sb.length() - 1);
		visited[row][col] = false;
	}
	List<String> findWords(char[][] board, String[] words) {
		for (String word: words) {	
			insertAWord(word);
		}
		this.m = board.length;
		this.n = board[0].length;
		this.board = board;
		for (int row = 0; row < m; row++) {
			for (int col = 0; col < n; col++) {
				char curChar = board[row][col];
				visited = new boolean[m][n];
				dfs(row,col,new StringBuilder(),trie);
			}
		}
		return res;
	}
	void insertAWord(String word) {
		char[] arr = word.toCharArray();
		TrieNode curNode = trie;
		for (char curChar: arr) {	
			if (!curNode.map.containsKey(curChar)) {
				curNode.map.put(curChar,new TrieNode());
			}
			curNode = curNode.map.get(curChar);
		}
		curNode.isWord = true;
	}
	class TrieNode {
		boolean isWord = false;
		Map<Character, TrieNode> map = new HashMap<>();
	}
}