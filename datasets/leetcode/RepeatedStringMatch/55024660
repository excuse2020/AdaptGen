class Solution {
	int kmp(StringBuilder a, String b) {
		int n = a.length();
		int m = b.length();
		int lps = new int[m];
		lps(b,lps);
		int i = 0;
		int j = 0;
		while ((n > i) && (m > j)) {
			if (a.charAt(i) == b.charAt(j)) {
				i++;
				j++;
			} 
			else {
				if (n > i) {
					if (j > 0) {
						j = lps[j - 1];
					} 
					else {
						i = i + 1;
					}
				}
			}
			if (j == m) {
				return 1;
			}
		}
		return -1;
	}
	void lps(String b, int lps) {
		int m = b.length();
		int len = 0;
		int i = 1;
		lps[0] = 0;
		while (i < m) {
			if (b.charAt(len) == b.charAt(i)) {
				len++;
				lps[i] = len;
				i++;
			} 
			else {
				if (len != 0) {
					len = lps[len - 1];
				} 
				else if (len == 0) {
					lps[i] = 0;
					i++;
				}
			}
		}
	}
	int repeatedStringMatch(String a, String b) {
		if (a.equals(b)) {
			return 1;
		}
		int n = a.length();
		int m = b.length();
		int count = 1;
		StringBuilder sb = new StringBuilder(a);
		while (sb.length() < b.length()) {
			sb.append(a);
			count++;
		}
		int i = 2;
		while (i != 0) {
			if (kmp(sb,b) == 1) {
				return count;
			} 
			else if (kmp(sb,b) == -1) {
				sb.append(a);
				count++;
			}
			i--;
		}
		return -1;
	}
}