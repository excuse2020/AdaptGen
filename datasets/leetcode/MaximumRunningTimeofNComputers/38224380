class Solution {
	boolean check(int[] batteries, long time, int n) {
		long sum = 0, cnt = 0;
		int len = batteries.length;
		for (int i = 0; i < len; i++) {
			sum += batteries[i];
			if (sum >= time) {
				sum -= time;
				cnt++;
			}
		}
		return cnt >= n;
	}
	long maxRunTime(int n, int[] batteries) {
		int len = batteries.length;
		if (len < n) {
			return 0;
		}
		if (len == n) {
			int min = Integer.MAX_VALUE;
			for (int b: batteries) {	
				min = Math.min(min,b);
			}
			return min;
		}
		Arrays.sort(batteries);
		long sum = 0;
		for (int b: batteries) {	
			sum += b;
		}
		long l = 1, r = (sum / n), mid;
		while (l <= r) {
			mid = l + (r - l) / 2;
			if (check(batteries,mid,n) == true) {
				l = mid + 1;
			} 
			else {
				r = mid - 1;
			}
		}
		return l - 1;
	}
}