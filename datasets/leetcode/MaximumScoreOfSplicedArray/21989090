class Solution {
	int maxSubArraySum(int a) {
		int size = a.length;
		int max_so_far = Integer.MIN_VALUE, max_ending_here = 0;
		for (int i = 0; i < size; i++) {
			max_ending_here = max_ending_here + a[i];
			if (max_so_far < max_ending_here) {
				max_so_far = max_ending_here;
			}
			if (max_ending_here < 0) {
				max_ending_here = 0;
			}
		}
		return max_so_far;
	}
	int maximumsSplicedArray(int[] nums1, int[] nums2) {
		int[] arr = new int[nums1.length];
		int[] brr = new int[nums1.length];
		int sum1 = 0;
		int sum2 = 0;
		for (int i = 0; i < nums1.length; i++) {
			arr[i] = nums1[i] - nums2[i];
			brr[i] = nums2[i] - nums1[i];
			sum1 += nums1[i];
			sum2 += nums2[i];
		}
		int aa = maxSubArraySum(arr);
		int bb = maxSubArraySum(brr);
		return Math.max(sum1,Math.max(sum2,Math.max(bb + sum1,aa + sum2)));
	}
}