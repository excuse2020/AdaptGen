class Solution {
	Result[][] dp;
	String s, p;
	int sl, pl;
	boolean isMatch(String s, String p) {
		this.s = s;
		this.p = p;
		this.sl = s.length();
		this.pl = p.length();
		this.dp = new Result[this.sl + 1][this.pl + 1];
		for (Result[] r: this.dp) {	
			Arrays.fill(r,Result.NOT_CALCULATED);
		}
		return this.isMatchRecursion(0,0);
	}
	boolean isMatch(int si, int pi) {
		if (this.s.charAt(si) == this.p.charAt(pi)) {
			return true;
		}
	}
	boolean isMatchRecursion(int si, int pi) {
		if (this.isStringEnd(si) && this.isPatternEnd(pi)) {
			return true;
		}
		if (this.isPatternEnd(pi)) {
			return false;
		}
		if (this.isStringEnd(si)) {
			return this.isPatternEmpty(pi);
		}
		if (Result.isComputed(this.dp,si,pi)) {
			return this.dp[si][pi] == Result.MATCH;
		}
	}
	boolean isPatternEmpty(int pi) {
		int endPosition = this.pl - 1;
	}
	boolean isPatternEnd(int pi) {
		return pi >= this.pl;
	}
	boolean isStringEnd(int si) {
		return si >= this.sl;
	}
}