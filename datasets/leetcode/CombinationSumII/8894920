class Solution {
	List<List<Integer>> combinationSum2(int[] candidates, int target) {
		Arrays.sort(candidates);
		List<List<Integer>> res = new ArrayList<>();
		helper(res,new ArrayList<>(),candidates,0,target);
		return res;
	}
	void helper(List<List<Integer>> res, List<Integer> path, int[] a, int start, int target) {
		if (target == 0) {
			res.add(List.copyOf(path));
			return;
		}
		if (start == a.length) {
			return;
		}
		if (a[start] <= target) {
			path.add(a[start]);
			helper(res,path,a,start + 1,target - a[start]);
			path.remove(path.size() - 1);
			while (start + 1 < a.length && a[start] == a[start + 1]) {
				start += 1;
			}
			helper(res,path,a,start + 1,target);
		}
	}
}