class Solution {
	boolean checkIfCanBreak(String s1, String s2) {
		PriorityQueue<Character> pq1 = new PriorityQueue<Character>();
		PriorityQueue<Character> pq2 = new PriorityQueue<Character>();
		for (char c: s1.toCharArray()) {	
			pq1.add(c);
		}
		for (char c: s2.toCharArray()) {	
			pq2.add(c);
		}
		char i = pq1.peek();
		char j = pq2.peek();
		PriorityQueue<Character> PQ1 = new PriorityQueue<Character>();
		PriorityQueue<Character> PQ2 = new PriorityQueue<Character>();
		while (!pq1.isEmpty()) {
			i = pq1.poll();
			j = pq2.poll();
			PQ1.add(i);
			PQ2.add(j);
			if (i != j) {
				break;
			}
		}
		if (i > j) {
			PriorityQueue<Character> tmp = pq1;
			pq1 = pq2;
			pq2 = tmp;
		}
		while (!pq1.isEmpty()) {
			char c1 = pq1.poll();
			char c2 = pq2.poll();
			if (c1 > c2) {
				return false;
			}
		}
		return true;
	}
}