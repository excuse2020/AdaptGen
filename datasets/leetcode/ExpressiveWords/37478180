class Solution {
	String compress(String s) {
		StringBuilder sb = new StringBuilder();
		for (int i = 0; i < s.length(); i++) {
			char c = s.charAt(i);
			sb.append(c);
			int count = 1;
			while (i + 1 < s.length() && s.charAt(i + 1) == c) {
				count++;
				i++;
			}
			sb.append(count);
		}
		return sb.toString();
	}
	boolean conformsPattern(String str, String pattern) {
		if (str.length() != pattern.length()) {
			return false;
		}
		int i = 0;
		char strChar = str.charAt(i), patternChar = pattern.charAt(i);
		int strCharCount;
	}
	int expressiveWords(String s, String[] words) {
		int result = 0;
		String pattern = compress(s);
		for (String word: words) {	
			String str = compress(word);
			if (conformsPattern(str,pattern)) {
				result++;
			}
		}
		return result;
	}
}