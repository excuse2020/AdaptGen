class Solution {
	int countSubarray(int[] arr, int target) {
		HashMap<Integer, Integer> map = new HashMap<>();
		map.put(0,1);
		int sum = 0;
		int count = 0;
		for (int i = 0; i < arr.length; i++) {
			sum += arr[i];
			if (map.containsKey(sum - target)) {
				count += map.get(sum - target);
			}
			map.put(sum,map.getOrDefault(sum,0) + 1);
		}
		return count;
	}
	int numSubmatrixSumTarget(int[][] matrix, int target) {
		int ans = 0;
		for (int i = 0; i < matrix.length; i++) {
			int[] pre = matrix[i];
			ans += countSubarray(pre,target);
			for (int j = i + 1; j < matrix.length; j++) {
				for (int k = 0; k < matrix[0].length; k++) {
					pre[k] += matrix[j][k];
				}
				ans += countSubarray(pre,target);
			}
		}
		return ans;
	}
}