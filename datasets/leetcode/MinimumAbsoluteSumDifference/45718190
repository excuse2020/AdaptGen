class Solution {
	int MOD = 1_000_000_007;
	int minAbsoluteSumDiff(int[] nums1, int[] nums2) {
		if (nums1.length == 0) {
			return 0;
		}
		int result = 0;
		TreeSet<Integer> set = new TreeSet<>();
		for (int num: nums1) {	
			set.add(num);
		}
		int advantage = 0;
		for (int i = 0; i < nums1.length; i++) {
			int n1 = nums1[i];
			int n2 = nums2[i];
			int diff = Math.abs(n1 - n2);
			result = (result + diff) % MOD;
			Integer floor = set.floor(nums2[i]);
			Integer ceiling = set.ceiling(nums2[i]);
			if (floor != null) {
				advantage = Math.max(advantage,diff - Math.abs(floor - n2));
			}
			if (ceiling != null) {
				advantage = Math.max(advantage,diff - Math.abs(ceiling - n2));
			}
		}
		return (result - advantage + MOD) % MOD;
	}
}