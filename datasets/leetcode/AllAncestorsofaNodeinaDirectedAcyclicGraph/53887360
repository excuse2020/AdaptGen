class Solution {
	void dfs(int start, int node, List<List<Integer>> graph, List<List<Integer>> ancestors, boolean[] visited) {
		for (int neighbor: graph.get(node)) {	
			if (!visited[neighbor]) {
				visited[neighbor] = true;
				ancestors.get(neighbor).add(start);
				dfs(start,neighbor,graph,ancestors,visited);
			}
		}
	}
	List<List<Integer>> getAncestors(int n, int[][] edges) {
		List<List<Integer>> graph = new ArrayList<>();
		for (int i = 0; i < n; i++) {
			graph.add(new ArrayList<>());
		}
		for (int[] edge: edges) {	
			graph.get(edge[0]).add(edge[1]);
		}
		List<List<Integer>> ancestors = new ArrayList<>();
		for (int i = 0; i < n; i++) {
			ancestors.add(new ArrayList<>());
		}
		boolean[] visited = new boolean[n];
		for (int i = 0; i < n; i++) {
			Arrays.fill(visited,false);
			dfs(i,i,graph,ancestors,visited);
		}
		for (List<Integer> list: ancestors) {	
			Collections.sort(list);
		}
		return ancestors;
	}
}