class Solution {
	int binarySearch(int start, int end, MountainArray mountainArr, int target) {
		while (start <= end) {
			int mid = (start + end) / 2;
			if (mountainArr.get(mid) == target) {
				return mid;
			} 
			else if (mountainArr.get(mid) > target) {
				end = mid - 1;
			} 
			else {
				start = mid + 1;
			}
		}
		return -1;
	}
	int binarySearchRight(int start, int end, MountainArray mountainArr, int target) {
		while (start <= end) {
			int mid = (start + end) / 2;
			if (mountainArr.get(mid) == target) {
				return mid;
			} 
			else if (mountainArr.get(mid) > target) {
				start = mid + 1;
			} 
			else {
				end = mid - 1;
			}
		}
		return -1;
	}
	int findInMountainArray(int target, MountainArray mountainArr) {
		int peakIndex = findPeak(mountainArr);
		int leftOne = binarySearch(0,peakIndex,mountainArr,target);
		if (leftOne != -1) {
			return leftOne;
		}
		int rightOne = binarySearchRight(peakIndex,mountainArr.length() - 1,mountainArr,target);
		return rightOne;
	}
	int findPeak(MountainArray mountainArr) {
		int start = 0;
		int end = mountainArr.length() - 1;
		while (start < end) {
			int mid = start + (end - start) / 2;
			if (mountainArr.get(mid) > mountainArr.get(mid + 1)) {
				end = mid;
			} 
			else {
				start = mid + 1;
			}
		}
		return start;
	}
}