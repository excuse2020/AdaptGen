class Solution {
	int memo(int n, int m, int g, int dp) {
		if (n == 0 && m == 0 && g[n][m] == 0) {
			return 1;
		}
		if (n <= 0 || m <= 0) {
			return 0;
		}
		if (g[n][m] == 1) {
			return 0;
		}
		if (dp[n][m] != -1) {
			return dp[n][m];
		}
		int t = re(n - 1,m,g);
		int nt = re(n,m - 1,g);
		return dp[n][m] = t + nt;
	}
	int re(int n, int m, int g) {
		if (n == 0 && m == 0 && g[n][m] == 0) {
			return 1;
		}
		if (n < 0 || m < 0) {
			return 0;
		}
		if (g[n][m] == 1) {
			return 0;
		}
		int t = re(n - 1,m,g);
		int nt = re(n,m - 1,g);
		return t + nt;
	}
	int tab(int n, int m, int g) {
		int dp = new int[n + 1][m + 1];
		for (int i = 0; i < n; i++) {
			if (g[i][0] == 0) {
				dp[i][0] = 1;
			} 
			else {
				break;
			}
		}
		for (int i = 0; i < m; i++) {
			if (g[0][i] == 0) {
				dp[0][i] = 1;
			} 
			else {
				break;
			}
		}
		for (int i = 1; i < n; i++) {
			for (int j = 1; j < m; j++) {
				if (g[i][j] == 1) {
					continue;
				}
				dp[i][j] = dp[i - 1][j] + dp[i][j - 1];
			}
		}
		return dp[n - 1][m - 1];
	}
	int uniquePathsWithObstacles(int[][] obstacleGrid) {
		if (obstacleGrid[0][0] == 1) {
			return 0;
		}
		int n = obstacleGrid.length;
		int m = obstacleGrid[0].length;
		int dp = new int[n + 1][m + 1];
		for (int r: dp) {	
			Arrays.fill(r,-1);
		}
		return tab(n,m,obstacleGrid);
	}
}