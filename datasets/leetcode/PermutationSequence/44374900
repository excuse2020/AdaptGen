class Solution {
	int factorial(int n) {
		int result = 1;
		for (int i = 1; i <= n; i++) {
			result *= i;
		}
		return result;
	}
	String getPermutation(int n, int k) {
		StringBuilder sb = new StringBuilder();
		boolean[] used = new boolean[n + 1];
		for (int digsLeft = n; digsLeft > 0; digsLeft--) {
			int partSize = factorial(digsLeft) / digsLeft;
			for (int i = 1; i <= n; i++) {
				if (used[i]) {
					continue;
				}
				if (k > partSize) {
					k -= partSize;
					continue;
				}
				used[i] = true;
				sb.append(i);
				if (k - partSize >= 1) {
					k -= partSize;
				}
				break;
			}
		}
		return sb.toString();
	}
}