class Solution {
	int uniquePathsWithObstacles(int[][] obstacleGrid) {
		int n = obstacleGrid.length;
		int m = obstacleGrid[0].length;
		int[][] dp = new int[n][m];
		for (int i = 0; i < n; i++) {
			Arrays.fill(dp[i],-1);
		}
		if (obstacleGrid[n - 1][m - 1] == 1) {
			return 0;
		}
		return ways(dp,obstacleGrid,n - 1,m - 1);
	}
	int ways(int[][] dp, int[][] mat, int i, int j) {
		if (i < 0 || j < 0) {
			return 0;
		}
		if (mat[i][j] == 1) {
			return 0;
		}
		if (i == 0 && j == 0) {
			return 1;
		}
		if (dp[i][j] != -1) {
			return dp[i][j];
		}
		dp[i][j] = ways(dp,mat,i - 1,j) + ways(dp,mat,i,j - 1);
		return dp[i][j];
	}
}