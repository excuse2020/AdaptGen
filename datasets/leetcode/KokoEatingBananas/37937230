class Solution {
	int calculate(int arr, int h) {
		int total = 0;
		int n = arr.length;
		for (int i = 0; i < n; i++) {
			total += Math.ceil((double) (arr[i]) / (double) (h));
		}
		return total;
	}
	int minEatingSpeed(int[] piles, int h) {
		int max = 0;
		for (int i = 0; i < piles.length; i++) {
			max = Math.max(max,piles[i]);
		}
		int i = 1;
		int j = max;
		while (i <= j) {
			int mid = i + (j - i) / 2;
			long ans = calculate(piles,mid);
			long ans2 = calculate(piles,mid - 1);
			if (ans <= h && ans2 > h) {
				return mid;
			} 
			else if (ans > h) {
				i = mid + 1;
			} 
			else {
				j = mid - 1;
			}
		}
		return -1;
	}
}