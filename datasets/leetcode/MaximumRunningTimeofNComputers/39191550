class Solution {
	long maxRunTime(int n, int[] batteries) {
		if (n > batteries.length) {
			return 0;
		}
		Arrays.sort(batteries);
		long sum = 0;
		for (int i = 0; i < batteries.length; i++) {
			sum += batteries[i];
		}
		long maxTime = sum / n + 1;
		long minTime = batteries[batteries.length - n];
		long ans = 0;
		while (minTime < maxTime) {
			long mid = minTime + (maxTime - minTime) / 2;
			int k = batteries.length - 1;
			int runnable = 0;
			while (k >= 0 && batteries[k] >= mid) {
				k--;
				runnable++;
			}
			long remComp = n - runnable;
			long temp = 0;
			while (k >= 0) {
				temp += batteries[k];
				k--;
			}
			if (remComp * mid <= temp) {
				ans = Math.max(ans,mid);
				minTime = mid + 1;
			} 
			else {
				maxTime = mid;
			}
		}
		return ans;
	}
}