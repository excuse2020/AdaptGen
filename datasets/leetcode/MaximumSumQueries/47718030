class Solution {
	int binarySearchUpper(List<int[]> list, int target) {
		int start = 0;
		int end = list.size();
		int mid;
		while (start < end) {
			mid = (start + end) / 2;
			if (list.get(mid)[0] >= target) {
				end = mid;
			} 
			else {
				start = mid + 1;
			}
		}
		return end;
	}
	int[] maximumSumQueries(int[] nums1, int[] nums2, int[][] queries) {
		int queriesWithIdx = new int[queries.length][3];
		for (int i = 0; i < queries.length; i++) {
			queriesWithIdx[i][0] = queries[i][0];
			queriesWithIdx[i][1] = queries[i][1];
			queriesWithIdx[i][2] = i;
		}
		Arrays.sort(queriesWithIdx,new Comparator<int[]>());
		int n = nums1.length;
		int nums1WithIdx = new int[n][2];
		for (int i = 0; i < n; i++) {
			nums1WithIdx[i][0] = nums1[i];
			nums1WithIdx[i][1] = i;
		}
		Arrays.sort(nums1WithIdx,new Comparator<int[]>());
		int result = new int[queries.length];
		int nums1idx = 0;
		List<int[]> list = new ArrayList<int[]>();
		for (int i = 0; i < queriesWithIdx.length; i++) {
			int x = queriesWithIdx[i][0];
			int y = queriesWithIdx[i][1];
			int originIdx = queriesWithIdx[i][2];
			while (nums1idx < nums1WithIdx.length) {
				if (nums1WithIdx[nums1idx][0] >= x) {
					int insertY = nums2[nums1WithIdx[nums1idx][1]];
					int sum = nums1WithIdx[nums1idx][0] + insertY;
					int removeIdx = 0;
					while (list.size() > 0 && removeIdx < list.size()) {
						if (list.get(removeIdx)[1] < sum) {
							list.remove(removeIdx);
						} 
						else {
							removeIdx++;
						}
					}
					int idx = binarySearchUpper(list,insertY);
					if (list.size() == idx) {
						list.add(idx,new int{insertY, sum});
					} 
					else {
						if (list.get(idx)[1] < sum) {
							if (list.get(idx)[0] == insertY) {
								list.set(idx,new int{insertY, sum});
							} 
							else {
								list.add(idx,new int{insertY, sum});
							}
						}
					}
				} 
				else {
					break;
				}
				nums1idx++;
			}
			int idx = binarySearchUpper(list,y);
			if (idx == list.size()) {
				result[originIdx] = -1;
			} 
			else {
				result[originIdx] = list.get(idx)[1];
			}
		}
		return result;
	}
}