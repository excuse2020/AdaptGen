class Solution {
	void backtrack(String end, String begin, Map<String, List<String>> map, List<List<String>> results, List<String> curr) {
		if (end.equals(begin)) {
			results.add(new ArrayList<>(curr));
			return;
		}
		for (String s: map.getOrDefault(end,new ArrayList<>())) {	
			curr.addFirst(s);
			backtrack(s,begin,map,results,curr);
			curr.removeFirst();
		}
	}
	List<List<String>> findLadders(String beginWord, String endWord, List<String> wordList) {
		Queue<String> queue = new LinkedList<>();
		Map<String, List<String>> map = new HashMap<>();
		Map<String, Integer> levelMap = new HashMap<>();
		List<List<String>> results = new LinkedList<>();
		Set<String> visited = new HashSet<>();
		Set<String> wordSet = new HashSet<>(wordList);
		if (beginWord.equals(endWord) || !wordSet.contains(endWord)) {
			return results;
		}
		queue.offer(beginWord);
		map.put(beginWord,new ArrayList<>());
		int min = Integer.MAX_VALUE;
		int level = 0;
		int levelCount = queue.size();
		level++;
		int i = 0;
		String curr = queue.poll();
		if (visited.contains(curr) || min < level) {
			continue;
		}
		visited.add(curr);
		if (endWord.equals(curr)) {
			min = level;
			continue;
		}
		int j = 0;
		char[] currArr = curr.toCharArray();
		int k;
	}
}