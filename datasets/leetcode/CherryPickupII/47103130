class Solution {
	int cherryPickup(int[][] grid) {
		int row = grid.length;
		int col = grid[0].length;
		int[][][] memo = new int[row][col][col];
		for (int[][] td: memo) {	
			for (int[] r: td) {	
				Arrays.fill(r,-1);
			}
		}
		return solve(grid,0,0,col - 1,memo);
	}
	int solve(int[][] grid, int r, int c1, int c2, int[][][] memo) {
		if (r < 0 || r >= grid.length || c1 < 0 || c2 < 0 || c1 >= grid[0].length || c2 >= grid[0].length) {
			return 0;
		}
		if (memo[r][c1][c2] != -1) {
			return memo[r][c1][c2];
		}
		int max = 0;
		for (int i = -1; i <= 1; i++) {
			for (int j = -1; j <= 1; j++) {
				max = Math.max(max,solve(grid,r + 1,c1 + i,c2 + j,memo));
			}
		}
		int result = grid[r][c1];
		if (c1 != c2) {
			result += grid[r][c2];
		}
		result += max;
		return memo[r][c1][c2] = result;
	}
}