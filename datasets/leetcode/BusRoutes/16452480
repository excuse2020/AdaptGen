class Solution {
	int numBusesToDestination(int[][] routes, int s, int t) {
		HashMap<Integer, ArrayList<Integer>> hm = new HashMap<>();
		HashMap<Integer, Boolean> busstop = new HashMap<>();
		HashMap<Integer, Boolean> busNo = new HashMap<>();
		for (int i = 0; i < routes.length; i++) {
			busNo.put(i,false);
			for (int j = 0; j < routes[i].length; j++) {
				if (hm.containsKey(routes[i][j])) {
					ArrayList<Integer> a = hm.get(routes[i][j]);
					a.add(i);
					hm.put(routes[i][j],a);
				} 
				else {
					ArrayList<Integer> a = new ArrayList<>();
					a.add(i);
					hm.put(routes[i][j],a);
					busstop.put(routes[i][j],false);
				}
			}
		}
		ArrayDeque<Integer> q = new ArrayDeque<>();
		q.add(s);
		busstop.replace(s,true);
		int level = -1;
		while (q.size() != 0) {
			int size = q.size();
			level++;
			while (size-- > 0) {
				Integer rem = q.removeFirst();
				if (rem == t) {
					return level;
				}
				ArrayList<Integer> busFTS = hm.get(rem);
				for (int j = 0; j < busFTS.size(); j++) {
					if (busNo.get(busFTS.get(j)) == true) {
						continue;
					}
					for (int k = 0; k < routes[busFTS.get(j)].length; k++) {
						if (busstop.get(routes[busFTS.get(j)][k]) == true) {
							continue;
						}
						q.add(routes[busFTS.get(j)][k]);
						busstop.replace(routes[busFTS.get(j)][k],true);
					}
					busNo.replace(busFTS.get(j),true);
				}
			}
		}
		return -1;
	}
}