class Solution {
	int countSubarrays(int[] nums, int k) {
		int n = nums.length;
		int mark = 0;
		int ans = 1;
		for (int i = 0; i < n; i++) {
			if (nums[i] < k) {
				nums[i] = -1;
			} 
			else if (nums[i] == k) {
				nums[i] = 0;
				mark = i;
			} 
			else {
				nums[i] = 1;
			}
		}
		Map<Integer, Integer> left = new HashMap<>();
		int presum = 0;
		for (int i = mark - 1; i >= 0; i--) {
			presum += nums[i];
			left.put(presum,left.getOrDefault(presum,0) + 1);
		}
		Map<Integer, Integer> right = new HashMap<>();
		presum = 0;
		for (int i = mark + 1; i < n; i++) {
			presum += nums[i];
			right.put(presum,right.getOrDefault(presum,0) + 1);
		}
		for (int ps: left.keySet()) {	
			if (ps == 0 || ps == 1) {
				ans += left.get(ps);
			}
			ans += left.get(ps) * right.getOrDefault(-ps,0);
			ans += left.get(ps) * right.getOrDefault(1 - ps,0);
		}
		for (int ps: right.keySet()) {	
			if (ps == 0 || ps == 1) {
				ans += right.get(ps);
			}
		}
		return ans;
	}
}