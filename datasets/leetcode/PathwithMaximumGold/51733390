class Solution {
	int getMaximumGold(int[][] grid) {
		int multimax = 0;
		int n = grid.length;
		int m = grid[0].length;
		for (int i = 0; i < grid.length; i++) {
			for (int j = 0; j < grid[0].length; j++) {
				if (grid[i][j] != 0) {
					int max = getmaxiumgold(grid,i,j,n,m);
					multimax = Math.max(max,multimax);
				}
			}
		}
		return multimax;
	}
	int getmaxiumgold(int[][] grid, int i, int j, int n, int m) {
		if (i < 0 || j < 0 || i >= n || j >= m || grid[i][j] == 0) {
			return 0;
		}
		int temp = grid[i][j];
		grid[i][j] = 0;
		int a = getmaxiumgold(grid,i + 1,j,n,m);
		int b = getmaxiumgold(grid,i - 1,j,n,m);
		int c = getmaxiumgold(grid,i,j + 1,n,m);
		int d = getmaxiumgold(grid,i,j - 1,n,m);
		grid[i][j] = temp;
		return temp + Math.max(Math.max(a,b),Math.max(c,d));
	}
}