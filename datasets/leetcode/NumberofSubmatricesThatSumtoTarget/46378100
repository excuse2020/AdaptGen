class Solution {
	int numSubmatrixSumTarget(int[][] matrix, int target) {
		int n = matrix.length;
		int m = matrix[0].length;
		int[][] prefix = new int[n + 1][m + 1];
		prefix[1][1] = matrix[0][0];
		int count = 0;
		for (int i = 1; i < n + 1; i++) {
			for (int j = 1; j < m + 1; j++) {
				if (i == j) {
					prefix[i][j] = matrix[i - 1][j - 1] + prefix[i - 1][j] - prefix[i - 1][j - 1];
				} 
				else if (i > j) {
					prefix[i][j] = matrix[i - 1][j - 1] + prefix[i - 1][j] - prefix[i - 1][j - 1];
				} 
				else {
					prefix[i][j] = matrix[i - 1][j - 1] + prefix[i][j - 1] - prefix[i - 1][j - 1];
				}
			}
		}
		for (int x1 = 1; x1 < n + 1; x1++) {
			for (int x2 = x1; x2 < n + 1; x2++) {
				for (int y1 = 1; y1 < m + 1; y1++) {
					for (int y2 = y1; y2 < m + 1; y2++) {
						int val = prefix[x2][y2] - prefix[x1 - 1][y2] + prefix[x1 - 1][y1 - 1];
						if (val == target) {
							count++;
						}
					}
				}
			}
		}
		return count;
	}
}