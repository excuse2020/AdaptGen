class Solution {
	List<String> getNei(String root, Map<Character, Integer> map) {
		List<String> ls = new ArrayList<>();
		if (root.length() == 1) {
			return ls;
		}
		for (int i = 0; i < root.length(); i++) {
			if (map.containsKey(root.charAt(i))) {
				StringBuilder sb = new StringBuilder(root).deleteCharAt(i);
				ls.add(sb.toString());
			}
		}
		return ls;
	}
	List<String> removeInvalidParentheses(String s) {
		Set<String> set = new HashSet<>();
		Set<String> visited = new HashSet<>();
		Map<Character, Integer> map;
	}
	boolean validParen(String s, Map<Character, Integer> map) {
		Deque<Character> stack = new ArrayDeque<>();
		for (char c: s.toCharArray()) {	
			if (!map.containsKey(c)) {
				continue;
			}
			if (map.get(c) % 2 == 0) {
				stack.offerFirst(c);
			} 
			else {
				if (stack.isEmpty() || map.get(stack.pollFirst()) + 1 != map.get(c)) {
					return false;
				}
			}
		}
		return stack.isEmpty();
	}
}