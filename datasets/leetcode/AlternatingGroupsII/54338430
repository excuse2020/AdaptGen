class Solution {
	int numberOfAlternatingGroups(int[] arr, int k) {
		int n = arr.length;
		int[] pr = new int[2 * n];
		int[] ar = new int[2 * n];
		for (int i = 0; i < 2 * n; i++) {
			ar[i] = arr[i % n];
		}
		for (int i = 0; i < 2 * n; i++) {
			if (i == 0) {
				if (ar[i] != ar[i + 1]) {
					pr[i] = 1;
				} 
				else {
					pr[i] = 0;
				}
			} 
			else if (i == 2 * n - 1) {
				if (ar[i] != ar[i - 1]) {
					pr[i] = 1;
				} 
				else {
					pr[i] = 0;
				}
				pr[i] += pr[i - 1];
			} 
			else {
				if (ar[i] != ar[i - 1] && ar[i] != ar[i + 1]) {
					pr[i] = 1;
				} 
				else {
					pr[i] = 0;
				}
				pr[i] += pr[i - 1];
			}
		}
		int cnt = 0;
		for (int i = 0; i < n; i++) {
			if (ar[i] != ar[i + 1] && ar[i + k - 1] != ar[i + k - 2]) {
				int len = k - 2;
				if (pr[i + k - 2] - pr[i] == len) {
					cnt++;
				}
			}
		}
		return cnt;
	}
}