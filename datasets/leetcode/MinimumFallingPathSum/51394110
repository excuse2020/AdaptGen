class Solution {
	int minFallingPathSum(int[][] matrix) {
		int row = 0;
		int m = matrix.length;
		int n = matrix[0].length;
		int min = Integer.MAX_VALUE;
		int[][] dp = new int[m][n];
		for (int[] arr: dp) {	
			Arrays.fill(arr,Integer.MAX_VALUE);
		}
		for (int i = 0; i < n; i++) {
			int pathsum = solve(matrix,row,i,m,n,dp);
			min = Math.min(min,pathsum);
		}
		return min;
	}
	int solve(int[][] grid, int row, int col, int m, int n, int[][] dp) {
		if (row == m - 1) {
			return grid[row][col];
		}
		if (dp[row][col] != Integer.MAX_VALUE) {
			return dp[row][col];
		}
		int left = Integer.MAX_VALUE;
		if (col - 1 >= 0) {
			left = grid[row][col] + solve(grid,row + 1,col - 1,m,n,dp);
		}
		int down = grid[row][col] + solve(grid,row + 1,col,m,n,dp);
		int right = Integer.MAX_VALUE;
		if (col + 1 < n) {
			right = grid[row][col] + solve(grid,row + 1,col + 1,m,n,dp);
		}
		return dp[row][col] = Math.min(left,Math.min(down,right));
	}
}