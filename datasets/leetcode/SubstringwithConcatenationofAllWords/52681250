class Solution {
	List<Integer> findSubstring(String s, String[] words) {
		if (s.length() == 0 || words.length == 0) {
			return new ArrayList<>();
		}
		List<Integer> res = new ArrayList<>();
		Map<String, Integer> appearance = new HashMap<>();
		for (String word: words) {	
			appearance.put(word,appearance.getOrDefault(word,0) + 1);
		}
		int num = words.length;
		int wordLen = words[0].length();
		for (int i = 0; i < s.length() - num * wordLen + 1; i++) {
			String sub = s.substring(i,i + num * wordLen);
			if (isConcat(appearance,wordLen,sub)) {
				res.add(i);
			}
		}
		return res;
	}
	boolean isConcat(Map<String, Integer> appearance, int wordLen, String sub) {
		Map<String, Integer> exist = new HashMap<>();
		for (int i = 0; i < sub.length(); i += wordLen) {
			String s = sub.substring(i,i + wordLen);
			exist.put(s,exist.getOrDefault(s,0) + 1);
		}
		return exist.equals(appearance);
	}
}