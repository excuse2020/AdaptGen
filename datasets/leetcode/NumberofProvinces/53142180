class Solution {
	void DFS(int v, boolean visited, int isConnected, int i) {
		if (visited[i]) {
			return;
		}
		visited[v] = true;
		for (int j = 0; j < isConnected[0].length; j++) {
			if (isConnected[i][j] == 1 && visited[j] == false) {
				DFS(i,visited,isConnected,j);
			}
		}
	}
	int findCircleNum(int[][] isConnected) {
		int n = isConnected[0].length;
		if (n == 0 || n == 1) {
			return n;
		}
		boolean visited = new boolean[n];
		int count = 0;
		for (int i = 0; i < n; i++) {
			if (visited[i] == false) {
				count++;
				DFS(i,visited,isConnected,i);
			}
		}
		return count;
	}
}