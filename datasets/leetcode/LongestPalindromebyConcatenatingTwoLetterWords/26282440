class Solution {
	int longestPalindrome(String[] words) {
		int n = words.length;
		HashMap<String, Integer> map = new HashMap<>();
		for (int i = 0; i < n; i++) {
			map.putIfAbsent(words[i],0);
			map.put(words[i],map.get(words[i]) + 1);
		}
		int length = 0;
		int flag = 0;
		for (Map.Entry<String, Integer> mapElement: map.entrySet()) {	
			String key = mapElement.getKey();
			int value = mapElement.getValue();
			if (key.charAt(0) == key.charAt(1)) {
				if (value % 2 == 0) {
					length += value * 2;
				} 
				else {
					length += (value - 1) * 2;
					if (flag == 0) {
						length += 2;
						flag = 1;
					}
				}
			} 
			else if (map.containsKey(reverse(key))) {
				length += (Math.min(value,map.get(reverse(key)))) * 2;
			}
		}
		return length;
	}
	String reverse(String s) {
		String str = "" + s.charAt(1);
		return str;
	}
}