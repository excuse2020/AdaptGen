class Solution {
	int findSuccessBeginFromIdx(int spell, int[] potions, long success) {
		int low = 0;
		int high = potions.length - 1;
		while (low <= high) {
			int mid = low + (high - low) / 2;
			long product = (long) spell * potions[mid];
			if (product >= success) {
				high = mid - 1;
			} 
			else {
				low = mid + 1;
			}
		}
		return low;
	}
	int[] successfulPairs(int[] spells, int[] potions, long success) {
		int n = spells.length;
		int m = potions.length;
		int[] pairs = new int[n];
		Arrays.sort(potions);
		for (int i = 0; i < n; i++) {
			int successBeginFromIdx = findSuccessBeginFromIdx(spells[i],potions,success);
			pairs[i] = m - successBeginFromIdx;
		}
		return pairs;
	}
}