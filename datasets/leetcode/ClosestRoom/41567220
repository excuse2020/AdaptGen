class Solution {
	int bs(int[][] rooms, int prefId, int minSize) {
		int ans = -1;
		int l = 0, r = rooms.length - 1;
		while (l <= r) {
			int mdi = l + (r - l) / 2;
			if (rooms[mdi][1] < minSize) {
				l = mdi + 1;
			} 
			else {
				ans = mdi;
				r = mdi - 1;
			}
		}
		return ans;
	}
	int[] closestRoom(int[][] rooms, int[][] queries) {
		Arrays.sort(rooms,(a, b) -> {Integer.compare(a[1],b[1])});
		int k = queries.length;
		int[] ans = new int[k];
		for (int i = 0; i < k; i++) {
			int prefId = queries[i][0];
			int minSize = queries[i][1];
			int res = bs(rooms,prefId,minSize);
			if (res == -1) {
				ans[i] = -1;
				continue;
			}
			int idx = find(rooms,res,prefId);
			ans[i] = rooms[idx][0];
		}
		return ans;
	}
	int find(int[][] rooms, int res, int prefId) {
		int mn = Math.abs(rooms[res][0] - prefId);
		int ans = res;
		for (int i = res + 1; i < rooms.length; i++) {
			int temp = Math.abs(prefId - rooms[i][0]);
			if (temp < mn) {
				ans = i;
				mn = temp;
			} 
			else if (temp == mn) {
				if (rooms[i][0] < rooms[ans][0]) {
					ans = i;
				}
			}
		}
		return ans;
	}
}