class Solution {
	boolean isPossible(int n, List<List<Integer>> edges) {
		List<List<Integer>> adj = new ArrayList<>();
		for (int i = 0; i < n + 1; i++) {
			adj.add(new ArrayList<>());
		}
		for (List<Integer> li: edges) {	
			adj.get(li.get(0)).add(li.get(1));
			adj.get(li.get(1)).add(li.get(0));
		}
		List<Integer> odvertex = new ArrayList<>();
		for (int i = 0; i < adj.size(); i++) {
			if (adj.get(i).size() % 2 != 0) {
				odvertex.add(i);
			}
		}
		if (odvertex.size() == 0) {
			return true;
		} 
		else if (odvertex.size() == 2) {
			int u = odvertex.get(0);
			int v = odvertex.get(1);
			for (int i = 1; i < adj.size(); i++) {
				if (!adj.get(i).contains(u) && !adj.get(i).contains(v)) {
					return true;
				}
			}
		} 
		else if (odvertex.size() == 4) {
			int u = odvertex.get(0);
			int v = odvertex.get(1);
			int w = odvertex.get(2);
			int x = odvertex.get(3);
			if ((!adj.get(u).contains(v) && !adj.get(w).contains(x)) || (!adj.get(u).contains(w) && !adj.get(v).contains(x))) {
				return true;
			}
		}
		return false;
	}
}