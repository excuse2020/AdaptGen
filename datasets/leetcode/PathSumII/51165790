class Solution {
	void backtrack(TreeNode root, int targetSum, List<Integer> cur, List<List<Integer>> res) {
		if (root == null) {
			return;
		}
		cur.add(root.val);
		if (root.left == null && root.right == null && root.val == targetSum) {
			res.add(new ArrayList<>(cur));
		} 
		else {
			backtrack(root.left,targetSum - root.val,cur,res);
			backtrack(root.right,targetSum - root.val,cur,res);
		}
		cur.remove(cur.size() - 1);
	}
	List<List<Integer>> pathSum(TreeNode root, int targetSum) {
		List<List<Integer>> res = new ArrayList<>();
		List<Integer> cur = new ArrayList<>();
		backtrack(root,targetSum,cur,res);
		return res;
	}
}