class Solution {
	int lowestCommonAncestor(TreeNode root, int o1, int o2) {
		boolean left = search(root.left,o1,o2);
		boolean right = search(root.right,o1,o2);
		if (left && right) {
			return root.val;
		} 
		else {
			if (root.val == o1 || root.val == o2) {
				return root.val;
			} 
			else {
				return left == true ? lowestCommonAncestor(root.left,o1,o2) : lowestCommonAncestor(root.right,o1,o2);
			}
		}
	}
	boolean search(TreeNode root, int target1, int target2) {
		if (root == null) {
			return false;
		}
		if (root.val == target1 || root.val == target2) {
			return true;
		}
		return search(root.right,target1,target2) || search(root.left,target1,target2);
	}
}