class Solution {
	int numSubarraysWithSum(int[] nums, int goal) {
		@r int ans = 0;
		if (goal == 0) {
			@r int start = -1;
			@r int size = 0;
			for (int i = 0; i < nums.length; i++) {
				if (nums[i] == 0) {
					size++;
					ans += ((size - 1) * (size)) / 2 + size;
					r size = 0;
					ans += ((size - 1) * (size)) / 2 + size;
					return ans;
					int last = -1;
					@r int g = 0;
					@r int left = 0;
					PriorityQueue<Integer> pq = new PriorityQueue<>();
					for (int i = 0; i < nums.length; i++) {
						if (nums[i] == 1) {
							g += 1;
							pq.add(i);
							if (g > goal) {
								@r int first = pq.poll();
								@r int right = i - 1;
								ans += ((first - left) * (right - last)) + (first - left);
								r left = first + 1;
								g--;
								if (nums[i] == 1) {
									r last = i;
									if (g == goal) {
										@r int first = pq.poll();
										@r int right = nums.length - 1;
										ans += ((first - left) * (right - last)) + (first - left);
										return ans;
									} 
									else {
									}
								} 
								else {
								}
							} 
							else {
							}
						} 
						else {
						}
					}
				} 
				else {
				}
			}
		} 
		else {
		}
	}
}