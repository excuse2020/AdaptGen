class Solution {
	Map<String, List<String>> map;
	List<List<String>> results;
	void backTrace(String word, String start, List<String> list) {
		if (word.equals(start)) {
			list.add(0,start);
			results.add(new ArrayList<String>(list));
			list.remove(0);
			return;
		}
		list.add(0,word);
		if (map.get(word) != null) {
			for (String s: map.get(word)) {	
				backTrace(s,start,list);
			}
		}
		list.remove(0);
	}
	List<List<String>> findLadders(String beginWord, String endWord, List<String> wordList) {
		results = new ArrayList<>();
		if (wordList.size() == 0 || !wordList.contains(endWord)) {
			return results;
		}
		int min = Integer.MAX_VALUE;
		Queue<String> queue = new LinkedList<>();
		queue.add(beginWord);
		map = new HashMap<String, List<String>>();
		Map<String, Integer> ladder = new HashMap<>();
		for (String string: wordList) {	
			ladder.put(string,Integer.MAX_VALUE);
		}
		ladder.put(beginWord,0);
		String word = queue.poll();
		int step = ladder.get(word) + 1;
		if (step > min) {
			break;
		}
		int i = 0;
		StringBuilder sb = new StringBuilder(word);
		char c;
	}
}