class Solution {
	long maximumTotalCost(int[] nums) {
		int n = nums.length;
		long dp = new long[n][2];
		dp[0][0] = dp[0][1] = nums[0];
		int countOfSubarraySoFar = 1;
		for (int i = 1; i < nums.length; i++) {
			dp[i][0] = Math.max(dp[i - 1][0],dp[i - 1][1]) + nums[i];
			long sumFromTop = dp[i - 1][0] - nums[i];
			long factor = countOfSubarraySoFar % 2 == 0 ? 1 : -1;
			long sumFromBottom = dp[i - 1][1] + (nums[i] * factor);
			if (sumFromTop > sumFromBottom) {
				dp[i][1] = sumFromTop;
				countOfSubarraySoFar = 2;
			} 
			else {
				dp[i][1] = sumFromBottom;
				countOfSubarraySoFar = countOfSubarraySoFar + 1;
			}
		}
		return Math.max(dp[n - 1][0],dp[n - 1][1]);
	}
}