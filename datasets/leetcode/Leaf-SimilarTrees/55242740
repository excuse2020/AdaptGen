class Solution {
	LinkedList<Integer> InorderTraverse(TreeNode root, LinkedList<Integer> list) {
		if (root.left == null && root.right == null) {
			list.add(root.val);
			return list;
		}
		if (root.left != null) {
			list = InorderTraverse(root.left,list);
		}
		if (root.right != null) {
			list = InorderTraverse(root.right,list);
		}
		return list;
	}
	boolean leafSimilar(TreeNode root1, TreeNode root2) {
		LinkedList<Integer> arr1 = new LinkedList<>();
		LinkedList<Integer> arr2 = new LinkedList<>();
		arr1 = InorderTraverse(root1,arr1);
		arr2 = InorderTraverse(root2,arr2);
		if (arr1.size() != arr2.size()) {
			return false;
		}
		for (int a = 0; a < arr1.size(); a++) {
			if (!Objects.equals(arr1.get(a),arr2.get(a))) {
				return false;
			}
		}
		return true;
	}
}