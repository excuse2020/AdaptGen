class Solution {
	List<Integer>[] adj;
	int[] colors;
	boolean dfs(int node, int color) {
		if (colors[node] == color) {
			return true;
		}
		int nextColor = (color == 1 ? 2 : 1);
		if (colors[node] == nextColor) {
			return false;
		}
		colors[node] = color;
		for (int enemy: adj[node]) {	
			if (!dfs(enemy,nextColor)) {
				return false;
			}
		}
		return true;
	}
	boolean possibleBipartition(int n, int[][] dislikes) {
		n++;
		adj = new List[n];
		colors = new int[n];
		for (int i = 0; i < n; i++) {
			adj[i] = new ArrayList();
		}
		for (int[] dis: dislikes) {	
			int a = dis[0];
			int b = dis[1];
			adj[a].add(b);
			adj[b].add(a);
		}
		for (int i = 0; i < n; i++) {
			if (colors[i] == 0 && !dfs(i,1)) {
				return false;
			}
		}
		return true;
	}
}