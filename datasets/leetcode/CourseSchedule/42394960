class Solution {
	boolean canFinish(int numCourses, int[][] prerequisites) {
		ArrayList<ArrayList<Integer>> adj = new ArrayList<ArrayList<Integer>>();
		int n = prerequisites.length;
		for (int i = 0; i < numCourses; i++) {
			adj.add(new ArrayList<Integer>());
		}
		for (int i = 0; i < n; i++) {
			adj.get(prerequisites[i][0]).add(prerequisites[i][1]);
		}
		int[] inDeg = new int[numCourses];
		for (int i = 0; i < numCourses; i++) {
			for (int numCoursesal: adj.get(i)) {	
				inDeg[numCoursesal]++;
			}
		}
		Queue<Integer> q = new LinkedList<>();
		for (int i = 0; i < inDeg.length; i++) {
			if (inDeg[i] == 0) {
				q.add(i);
			}
		}
		int cnt = 0;
		while (!q.isEmpty()) {
			int node = q.poll();
			cnt++;
			for (int neighbour: adj.get(node)) {	
				inDeg[neighbour]--;
				if (inDeg[neighbour] == 0) {
					q.add(neighbour);
				}
			}
		}
		return cnt == numCourses ? true : false;
	}
}