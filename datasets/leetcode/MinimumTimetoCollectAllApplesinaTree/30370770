class Solution {
	int dfs(int i, Map<Integer, List<Integer>> g, Set<Integer> seen, List<Boolean> hasApple) {
		seen.add(i);
		int ans = 0;
		for (int j: g.getOrDefault(i,new ArrayList<>())) {	
			if (!seen.contains(j)) {
				ans += dfs(j,g,seen,hasApple);
			}
		}
		if (ans == 0 && !hasApple.get(i)) {
			return 0;
		}
		return ans + 2;
	}
	int minTime(int n, int[][] edges, List<Boolean> hasApple) {
		Set<Integer> seen = new HashSet<>();
		Map<Integer, List<Integer>> g = new HashMap<>();
		for (int[] edge: edges) {	
			g.computeIfAbsent(edge[0],(x) -> {new ArrayList<>()}).add(edge[1]);
			g.computeIfAbsent(edge[1],(x) -> {new ArrayList<>()}).add(edge[0]);
		}
		return Math.max(0,dfs(0,g,seen,hasApple) - 2);
	}
}