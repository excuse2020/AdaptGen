class Solution {
	int maxStarSum(int[] vals, int[][] edges, int k) {
		List<PriorityQueue<Integer>> adjList = new ArrayList<PriorityQueue<Integer>>();
		for (int i = 0; i < vals.length; i++) {
			adjList.add(new PriorityQueue<>((a, b) -> {b - a}));
		}
		for (int i = 0; i < edges.length; i++) {
			adjList.get(edges[i][0]).add(vals[edges[i][1]]);
			adjList.get(edges[i][1]).add(vals[edges[i][0]]);
		}
		int max = (int) -1e9;
		for (int i = 0; i < adjList.size(); i++) {
			int j = k;
			int sum = vals[i];
			PriorityQueue<Integer> pq = adjList.get(i);
			max = Math.max(max,sum);
			while (!pq.isEmpty() && j > 0) {
				int num = pq.poll();
				sum = sum + num;
				max = Math.max(max,sum);
				j--;
			}
		}
		return max;
	}
}