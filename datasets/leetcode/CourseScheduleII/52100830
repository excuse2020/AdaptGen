class Solution {
	int[] findOrder(int numCourses, int[][] prerequisites) {
		List<Integer> l = new ArrayList<>();
		Queue<Integer> q = new LinkedList<>();
		int[] indegree = new int[numCourses];
		List<List<Integer>> adjList = new ArrayList<>();
		for (int i = 0; i < prerequisites.length; i++) {
			indegree[prerequisites[i][0]]++;
		}
		int[] topoSort = new int[numCourses];
		for (int i = 0; i < indegree.length; i++) {
			if (indegree[i] == 0) {
				q.add(i);
			}
		}
		for (int i = 0; i < numCourses; i++) {
			adjList.add(new ArrayList<>());
		}
		for (int i = 0; i < prerequisites.length; i++) {
			int first = prerequisites[i][1];
			int second = prerequisites[i][0];
			adjList.get(first).add(second);
		}
		int i = 0;
		while (!q.isEmpty()) {
			int node = q.poll();
			topoSort[i] = node;
			for (Integer it: adjList.get(node)) {	
				indegree[it]--;
				if (indegree[it] == 0) {
					q.add(it);
				}
			}
			i++;
		}
		if (i != numCourses) {
			return new int[0];
		}
		return topoSort;
	}
}