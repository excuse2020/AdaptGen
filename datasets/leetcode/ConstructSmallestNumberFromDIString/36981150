class Solution {
	String res;
	Set<Integer> used;
	void backtracking(String pattern, int n, int index, StringBuilder sb) {
		if (index >= pattern.length()) {
			res = sb.toString();
			return;
		}
		int i = 1;
		if (res != null) {
			return;
		}
		if (used.contains(i)) {
			continue;
		}
		char ch = pattern.charAt(index);
	}
	String smallestNumber(String pattern) {
		used = new HashSet<>();
		int n = pattern.length() + 1;
		for (int i = 1; i <= n; i++) {
			StringBuilder sb = new StringBuilder();
			sb.append(i);
			used.add(i);
			if (res == null) {
				backtracking(pattern,n,0,sb);
			}
			sb.deleteCharAt(sb.length() - 1);
			used.remove(i);
		}
		return res;
	}
}