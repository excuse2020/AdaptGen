class Solution {
	int getMaxG(int[][] g, int i, int j, int m, int n) {
		if (i < 0 || i >= m || j < 0 || j >= n || g[i][j] == 0) {
			return 0;
		}
		int sum = g[i][j];
		g[i][j] = 0;
		int max = getMaxG(g,i - 1,j,m,n);
		max = Math.max(max,getMaxG(g,i,j - 1,m,n));
		max = Math.max(max,getMaxG(g,i + 1,j,m,n));
		max = Math.max(max,getMaxG(g,i,j + 1,m,n));
		g[i][j] = sum;
		return sum + max;
	}
	int getMaximumGold(int[][] grid) {
		int m = grid.length, n = grid[0].length;
		int max = 0;
		int total = 0;
		for (int i = 0; i < m; i++) {
			for (int j = 0; j < n; j++) {
				total += grid[i][j];
			}
		}
		for (int i = 0; i < m; i++) {
			for (int j = 0; j < n; j++) {
				if (grid[i][j] != 0) {
					max = Math.max(max,getMaxG(grid,i,j,m,n));
					if (max == total) {
						return total;
					}
				}
			}
		}
		return max;
	}
}