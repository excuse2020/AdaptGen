class Solution {
	int maxPalindromes(String s, int k) {
		if (k == 1) {
			return s.length();
		}
		if (k > s.length()) {
			return 0;
		}
		if (s.length() == 2 && k == 2) {
			return s.charAt(0) == s.charAt(1) ? 1 : 0;
		}
		boolean[][] dp = new boolean[s.length()][s.length()];
		for (int i = s.length() - 1; i >= 0; i--) {
			for (int j = i; j < s.length(); j++) {
				if (j - i == 0) {
					dp[i][j] = true;
				} 
				else if (j - i == 1) {
					dp[i][j] = s.charAt(i) == s.charAt(j);
				} 
				else {
					dp[i][j] = s.charAt(i) == s.charAt(j) && dp[i + 1][j - 1];
				}
			}
		}
		int tail = 0;
		int maxNos = 0;
		for (int i = k - 1; i < s.length(); i++) {
			int m = tail;
			while (i - m + 1 >= k) {
				if (dp[m][i]) {
					maxNos++;
					tail = i + 1;
					break;
				}
				m++;
			}
		}
		return maxNos;
	}
}