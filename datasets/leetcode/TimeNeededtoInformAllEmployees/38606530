class Solution {
	int numOfMinutes(int n, int headID, int[] manager, int[] informTime) {
		List<List<Integer>> graph = new ArrayList<>();
		for (int i = 0; i < n; i++) {
			graph.add(new ArrayList<>());
		}
		for (int i = 0; i < n; i++) {
			if (manager[i] != -1) {
				graph.get(manager[i]).add(i);
			}
		}
		Queue<int[]> queue = new LinkedList<>();
		queue.offer(new int{headID, 0});
		int maxInformTime = 0;
		while (!queue.isEmpty()) {
			int[] current = queue.poll();
			int employee = current[0];
			int totalInformTime = current[1];
			maxInformTime = Math.max(maxInformTime,totalInformTime);
			for (int subordinate: graph.get(employee)) {	
				queue.offer(new int{subordinate, totalInformTime + informTime[employee]});
			}
		}
		return maxInformTime;
	}
}