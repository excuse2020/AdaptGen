class Solution {
	int fillChains(String[] words, Map<String, Integer> dict, int i, int[] dp) {
		if (dp[i] != -1) {
			return dp[i];
		}
		String word = words[i];
		int max = 1;
		for (int j = 0; j < word.length(); j++) {
			String nextWord = word.substring(0,j);
			if (j < word.length() - 1) {
				nextWord += word.substring(j + 1);
			}
			if (dict.containsKey(nextWord)) {
				int nextAns = 1 + fillChains(words,dict,dict.get(nextWord),dp);
				max = Integer.max(max,nextAns);
			}
		}
		dp[i] = max;
		return max;
	}
	int longestStrChain(String[] words) {
		Arrays.sort(words,(a, b) -> {Integer.compare(b.length(),a.length())});
		Map<String, Integer> dict = new HashMap<>();
		for (int i = 0; i < words.length; i++) {
			String word = words[i];
			dict.put(word,i);
		}
		int[] dp = new int[words.length];
		Arrays.fill(dp,-1);
		for (int i = words.length - 1; i >= 0; i--) {
			fillChains(words,dict,i,dp);
		}
		int max = 1;
		for (int i = 0; i < dp.length; i++) {
			max = Integer.max(max,dp[i]);
		}
		return max;
	}
}