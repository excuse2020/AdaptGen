class Solution {
	boolean isSafe(char[][] board, int r, int c, int digit) {
		for (int i = 0; i < board.length; i++) {
			if (board[r][i] == digit) {
				return false;
			}
		}
		for (int i = 0; i < board[0].length; i++) {
			if (board[i][c] == digit) {
				return false;
			}
		}
		int sqrt = (int) Math.sqrt(board.length);
		int rowStart = r - r % 3;
		int colStart = c - c % 3;
		for (int row = rowStart; row < rowStart + sqrt; row++) {
			for (int col = colStart; col < colStart + sqrt; col++) {
				if (board[row][col] == digit) {
					return false;
				}
			}
		}
		return true;
	}
	boolean isValid(char[][] board, int r, int c) {
		if (c == board[0].length) {
			r++;
			c = 0;
		}
		if (r == board.length) {
			return true;
		}
		char digit = board[r][c];
	}
	boolean isValidSudoku(char[][] board) {
		return isValid(board,0,0);
	}
}