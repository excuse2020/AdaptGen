class Solution {
	int GetMaxValue(int i, int j1, int j2, int row, int col, int[][] grid, int[][][] dp) {
		if (j1 < 0 || j2 < 0 || j1 >= col || j2 >= col) {
			return -1000000;
		}
		if (i == row - 1) {
			if (j1 == j2) {
				return grid[i][j1];
			} 
			else {
				return grid[i][j1] + grid[i][j2];
			}
		}
		if (dp[i][j1][j2] != -1) {
			return dp[i][j1][j2];
		}
		int maxi = -1000000;
		for (int dj1 = -1; dj1 <= 1; dj1++) {
			for (int dj2 = -1; dj2 <= 1; dj2++) {
				int value;
				if (j1 == j2) {
					value = grid[i][j1];
				} 
				else {
					value = grid[i][j1] + grid[i][j2];
				}
				value += GetMaxValue(i + 1,j1 + dj1,j2 + dj2,row,col,grid,dp);
				maxi = Math.max(value,maxi);
			}
		}
		return dp[i][j1][j2] = maxi;
	}
	int cherryPickup(int[][] grid) {
		int row = grid.length;
		int col = grid[0].length;
		int[][][] dp = new int[row][col][col];
		for (int i = 0; i < row; i++) {
			for (int j = 0; j < col; j++) {
				Arrays.fill(dp[i][j],-1);
			}
		}
		return GetMaxValue(0,0,col - 1,row,col,grid,dp);
	}
}