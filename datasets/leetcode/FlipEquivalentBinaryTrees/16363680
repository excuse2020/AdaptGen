class Solution {
	boolean flipEquiv(TreeNode root1, TreeNode root2) {
		Queue<TreeNode> q = new LinkedList<>();
		if (root1 == null && root2 == null) {
			return true;
		}
		if (root1 == null || root2 == null) {
			return false;
		}
		q.add(root1);
		q.add(root2);
		while (!q.isEmpty()) {
			TreeNode a = q.poll();
			TreeNode b = q.poll();
			Integer valA = (a != null) ? a.val : null;
			Integer valB = (b != null) ? b.val : null;
			if (valA != valB) {
				return false;
			}
			Integer valAL = (a == null || a.left == null) ? null : a.left.val;
			Integer valAR = (a == null || a.right == null) ? null : a.right.val;
			Integer valBL = (b == null || b.left == null) ? null : b.left.val;
			Integer valBR = (b == null || b.right == null) ? null : b.right.val;
			if (valAL == valBR && valAR == valBL) {
				if (valA != null) {
					q.add(a.left);
				}
				if (valB != null) {
					q.add(b.right);
				}
				if (valA != null) {
					q.add(a.right);
				}
				if (valB != null) {
					q.add(b.left);
				}
			} 
			else {
				if (valA != null) {
					q.add(a.left);
				}
				if (valB != null) {
					q.add(b.left);
				}
				if (valA != null) {
					q.add(a.right);
				}
				if (valB != null) {
					q.add(b.right);
				}
			}
		}
		return true;
	}
}