class Solution {
	long minimumWeight(int n, int[][] edges, int src1, int src2, int dest) {
		List<int[]>[] graph = new ArrayList[n];
		List<int[]>[] inGraph = new ArrayList[n];
		for (int i = 0; i < n; i++) {
			graph[i] = new ArrayList<>();
			inGraph[i] = new ArrayList<>();
		}
		for (int[] e: edges) {	
			graph[e[0]].add(new int{e[1], e[2]});
			inGraph[e[1]].add(new int{e[0], e[2]});
		}
		Long[] distD = new Long[n];
		shortestPath(dest,distD,inGraph);
		if (distD[src1] == null || distD[src2] == null) {
			return -1;
		}
		Long[] distSrc1 = new Long[n];
		shortestPath(src1,distSrc1,graph);
		Long[] distSrc2 = new Long[n];
		shortestPath(src2,distSrc2,graph);
		long min = Long.MAX_VALUE;
		for (int i = 0; i < n; i++) {
			if (distD[i] == null || distSrc1[i] == null || distSrc2[i] == null) {
				continue;
			}
			min = Math.min(min,distD[i] + distSrc1[i]);
		}
		return min;
	}
	void shortestPath(int src, Long[] distances, List<int[]>[] graph) {
		PriorityQueue<long[]> pq = new PriorityQueue<>((v1, v2) -> {Long.compare(v1[1],v2[1])});
		pq.add(new long{src, 0});
		while (!pq.isEmpty()) {
			long[] c = pq.poll();
			int u = (int) c[0];
			if (distances[u] != null) {
				continue;
			}
			distances[u] = c[1];
			for (int[] e: graph[u]) {	
				if (distances[e[0]] != null) {
					continue;
				}
				pq.add(new long{e[0], c[1] + e[1]});
			}
		}
	}
}