class Solution {
	int[] countSubTrees(int n, int[][] edges, String labels) {
		int[] ans = new int[n];
		List<Integer>[] graph = new List[n];
		for (int i = 0; i < n; ++i) {
			graph[i] = new ArrayList<>();
		}
		for (int[] edge: edges) {	
			int u = edge[0];
			int v = edge[1];
			graph[u].add(v);
			graph[v].add(u);
		}
		dfs(graph,0,-1,labels,ans);
		return ans;
	}
	int[] dfs(List<Integer>[] graph, int u, int parent, String labels, int[] ans) {
		int[] count = new int[26];
		for (int v: graph[u]) {	
			if (v == parent) {
				continue;
			}
			int[] childCount = dfs(graph,v,u,labels,ans);
			for (int i = 0; i < 26; ++i) {
				count[i] += childCount[i];
			}
		}
	}
}