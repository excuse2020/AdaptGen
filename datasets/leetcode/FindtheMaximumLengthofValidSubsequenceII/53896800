class Solution {
	int maximumLength(int[] nums, int k) {
		int p = new int[k][2];
		for (int i = 0; i < k; i++) {
			p[i][0] = i;
		}
		int n = nums.length;
		for (int i = 0; i < n; i++) {
			nums[i] %= k;
			++p[nums[i]][1];
		}
		Arrays.sort(p,new Comparator<int[]>());
		int res = 0;
		List<Integer> topHundred = new ArrayList<>();
		for (int i = 0; i < k; i++) {
			res = Math.max(res,p[i][1]);
			if (i < 10) {
				topHundred.add(p[i][0]);
			}
		}
		for (int i = 0; i < topHundred.size(); i++) {
			int ele = topHundred.get(i);
			for (int j = 0; j < k; j++) {
				if (ele != j) {
					int f = 0, count = 0;
					for (int x = 0; x < n; x++) {
						if (nums[x] == ele && f == 0) {
							++count;
							f = f ^ 1;
						} 
						else if (nums[x] == j && f == 1) {
							++count;
							f = f ^ 1;
						}
					}
					f = 1;
					int count2 = 0;
					for (int x = 0; x < n; x++) {
						if (nums[x] == ele && f == 0) {
							++count2;
							f = f ^ 1;
						} 
						else if (nums[x] == j && f == 1) {
							++count2;
							f = f ^ 1;
						}
					}
					res = Math.max(res,count);
					res = Math.max(res,count2);
				}
			}
		}
		return res;
	}
}