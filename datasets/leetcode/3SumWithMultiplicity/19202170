class Solution {
	int mod = (int) (1e9 + 7);
	int tSum(int[][][] dp, int t, int ind, int[] nums, int l) {
		if (dp[t][ind][l] != -1) {
			return dp[t][ind][l];
		}
		if (ind == nums.length) {
			if (t == 0 && l == 0) {
				return 1;
			} 
			else {
				return 0;
			}
		}
		int notake = tSum(dp,t,ind + 1,nums,l);
		int take = 0;
		if (t >= nums[ind] && l > 0) {
			take = tSum(dp,t - nums[ind],ind + 1,nums,l - 1);
		}
		return dp[t][ind][l] = (take + notake) % mod;
	}
	int threeSumMulti(int[] arr, int target) {
		int[][][] dp = new int[target + 1][arr.length + 1][4];
		for (int[][] i: dp) {	
			for (int[] j: i) {	
				Arrays.fill(j,-1);
			}
		}
		return tSum(dp,target,0,arr,3);
	}
}