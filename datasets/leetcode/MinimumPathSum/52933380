class Solution {
	int minPathSum(int[][] grid) {
		int[][] dp = new int[grid.length][grid[0].length];
		for (int[] row: dp) {	
			Arrays.fill(row,-1);
		}
		return minPathSum(grid,grid.length - 1,grid[0].length - 1,dp);
	}
	int minPathSum(int[][] grid, int m, int n, int[][] dp) {
		if (m == 0 && n == 0) {
			return grid[m][n];
		}
		if (m < 0 || n < 0) {
			return Integer.MAX_VALUE;
		}
		if (dp[m][n] != -1) {
			return dp[m][n];
		}
		int left = minPathSum(grid,m,n - 1,dp);
		int right = minPathSum(grid,m - 1,n,dp);
		dp[m][n] = grid[m][n] + Math.min(left,right);
		return dp[m][n];
	}
}