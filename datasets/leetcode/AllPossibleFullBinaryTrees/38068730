class Solution {
	Map<Integer, List<TreeNode>> h = new HashMap<>();
	List<TreeNode> allPossibleFBT(int n) {
		if (n % 2 == 0) {
			return new ArrayList<>();
		}
		if (n == 1) {
			return Arrays.asList(new TreeNode(0));
		}
		if (h.containsKey(n)) {
			return h.get(n);
		}
		List<TreeNode> res = new ArrayList<>();
		for (int leftcount = 0; leftcount < n; leftcount++) {
			int rightcount = n - 1;
			for (TreeNode left: allPossibleFBT(leftcount)) {	
				for (TreeNode right: allPossibleFBT(rightcount)) {	
					res.add(new TreeNode(0));
					res.get(res.size() - 1).left = left;
					res.get(res.size() - 1).right = right;
				}
			}
		}
		h.put(n,res);
		return res;
	}
}