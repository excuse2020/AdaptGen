class Solution {
	int count = 0;
	int find(int[] nums, int i, int j, int n) {
		return find(nums,i * n + j);
	}
	int find(int[] nums, int k) {
		int root = k;
		while (nums[root] != root) {
			root = nums[root];
		}
		while (nums[k] != k) {
			int temp = nums[k];
			nums[k] = root;
			k = temp;
		}
		return root;
	}
	int numIslands(char[][] grid) {
		int m = grid.length;
		int n = grid[0].length;
		int[] nums = new int[m * n];
		for (int k = 0; k < m * n; k++) {
			nums[k] = k;
		}
		count = m * n;
		int i = 0;
		int j = 0;
	}
	void unify(int[] nums, int i1, int j1, int i2, int j2, int n) {
		int x = find(nums,i1,j1,n);
		int y = find(nums,i2,j2,n);
		if (x != y) {
			nums[x] = y;
			count--;
		}
	}
}