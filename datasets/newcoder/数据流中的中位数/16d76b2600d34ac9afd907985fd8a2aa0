class Solution {
	PriorityQueue<Integer> maxHeap = new PriorityQueue<>((a, b) -> {b - a});
	PriorityQueue<Integer> minHeap = new PriorityQueue<>();
	Double GetMedian() {
		return minHeap.size() > maxHeap.size() ? (double) minHeap.peek() : (double) (minHeap.peek() + maxHeap.peek()) / 2;
	}
	void Insert(Integer num) {
		minHeap.add(num);
		if (minHeap.size() - maxHeap.size() >= 2) {
			maxHeap.add(minHeap.poll());
		}
		maxHeap.add(num);
	}
}