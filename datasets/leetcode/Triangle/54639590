class Solution {
	int helper(List<List<Integer>> arr, int i, int j, int[][] dp) {
		if (i == arr.size() - 1) {
			return arr.get(i).get(j);
		}
		if (i >= arr.size() - 1 || j >= arr.get(arr.size() - 1).size()) {
			return (int) Math.pow(10,9);
		}
		if (dp[i][j] != -1) {
			return dp[i][j];
		}
		int top = arr.get(i).get(j) + helper(arr,i + 1,j,dp);
		int topRight = arr.get(i).get(j) + helper(arr,i + 1,j + 1,dp);
		return dp[i][j] = Math.min(top,topRight);
	}
	int minimumTotal(List<List<Integer>> triangle) {
		int n = triangle.size();
		int[][] dp = new int[triangle.size()][triangle.get(triangle.size() - 1).size()];
		for (int[] row: dp) {	
			Arrays.fill(row,-1);
		}
		return helper(triangle,0,0,dp);
	}
}