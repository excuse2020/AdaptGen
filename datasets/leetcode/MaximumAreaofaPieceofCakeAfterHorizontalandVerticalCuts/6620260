class Solution {
	int maxArea(int h, int w, int[] horizontalCuts, int[] verticalCuts) {
		Arrays.sort(horizontalCuts);
		Arrays.sort(verticalCuts);
		int newHorizontal = new int[horizontalCuts.length + 2];
		int newVertical = new int[verticalCuts.length + 2];
		newHorizontal[newHorizontal.length - 1] = h;
		newVertical[newVertical.length - 1] = w;
		for (int i = 0; i < horizontalCuts.length; i++) {
			newHorizontal[i + 1] = horizontalCuts[i];
		}
		for (int i = 0; i < verticalCuts.length; i++) {
			newVertical[i + 1] = verticalCuts[i];
		}
		Integer maxHGap = -1;
		for (int i = 1; i < newHorizontal.length; i++) {
			int gap = newHorizontal[i] - newHorizontal[i - 1];
			if (gap >= maxHGap) {
				maxHGap = gap;
			}
		}
		Integer maxVGap = -1;
		for (int i = 1; i < newVertical.length; i++) {
			int gap = newVertical[i] - newVertical[i - 1];
			if (gap >= maxVGap) {
				maxVGap = gap;
			}
		}
		int mod = 1000000007;
		long ans = (((long) maxVGap % mod) * ((long) maxHGap % mod)) % mod;
		return (int) ans;
	}
}