class Solution {
	TreeNode f(ListNode head) {
		if (head == null) {
			return null;
		}
		if (head.next == null) {
			return new TreeNode(head.val);
		}
		ListNode mid = findMid(head);
		ListNode newHead = mid.next;
		mid.next = null;
		ListNode temp = head;
		while (temp.next != mid) {
			temp = temp.next;
		}
		temp.next = null;
		TreeNode root = new TreeNode(mid.val);
		root.left = f(head);
		root.right = f(newHead);
		return root;
	}
	ListNode findMid(ListNode head) {
		ListNode slow = head;
		ListNode fast = head;
		while (fast != null && fast.next != null) {
			fast = fast.next.next;
			slow = slow.next;
		}
		return slow;
	}
	TreeNode sortedListToBST(ListNode head) {
		return f(head);
	}
}