class Solution {
	int count = 0;
	void dfs(int city, List<List<Integer>> adj, boolean[] isVisited, Set<List<Integer>> set) {
		for (int i = 0; i < adj.get(city).size(); i++) {
			int neighbour = adj.get(city).get(i);
			if (!isVisited[neighbour]) {
				List<Integer> pair = new ArrayList<>(Arrays.asList(neighbour,city));
				if (!set.contains(pair)) {
					count++;
				}
				isVisited[neighbour] = true;
				dfs(neighbour,adj,isVisited,set);
			}
		}
	}
	int minReorder(int n, int[][] connections) {
		List<List<Integer>> adj = new ArrayList<>();
		for (int i = 0; i < n; i++) {
			adj.add(new ArrayList<>());
		}
		for (int i = 0; i < connections.length; i++) {
			adj.get(connections[i][0]).add(connections[i][1]);
			adj.get(connections[i][1]).add(connections[i][0]);
		}
		Set<List<Integer>> set = new HashSet<>();
		for (int i = 0; i < connections.length; i++) {
			set.add(new ArrayList<>(Arrays.asList(connections[i][0],connections[i][1])));
		}
		boolean[] isVisited = new boolean[n];
		isVisited[0] = true;
		dfs(0,adj,isVisited,set);
		return count;
	}
}