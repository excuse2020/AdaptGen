class Solution {
	List<List<Integer>> buildGraph(int n, int[][] edges) {
		List<List<Integer>> graph = new ArrayList<>();
		for (int i = 0; i < n; i++) {
			graph.add(new ArrayList<>());
		}
		for (int[] e: edges) {	
			graph.get(e[0]).add(e[1]);
			graph.get(e[1]).add(e[0]);
		}
		return graph;
	}
	long countPairs(int n, int[][] edges) {
		List<List<Integer>> graph = buildGraph(n,edges);
		boolean[] visited = new boolean[n];
		long unreachablePairs = 0;
		long totalVisitedNodes = 0;
		for (int i = 0; i < n; i++) {
			long visitedNodes = 0;
			if (!visited[i]) {
				visitedNodes = findTotalVisitedNodes(graph,i,visited);
			}
			long unvisitedNodes = n - (visitedNodes + totalVisitedNodes);
			unreachablePairs += visitedNodes * unvisitedNodes;
			totalVisitedNodes += visitedNodes;
		}
		return unreachablePairs;
	}
	long findTotalVisitedNodes(List<List<Integer>> graph, int start, boolean[] visited) {
		visited[start] = true;
		long visitedNodes = 0;
		for (int neighbor: graph.get(start)) {	
			if (!visited[neighbor]) {
				visitedNodes += findTotalVisitedNodes(graph,neighbor,visited);
			}
		}
		return 1 + visitedNodes;
	}
}