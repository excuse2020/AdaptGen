class Solution {
	int uniquePathsWithObstacles(int[][] obstacleGrid) {
		int m = obstacleGrid.length, n = obstacleGrid[0].length;
		int[][] matrix = new int[m][n];
		matrix[0][0] = obstacleGrid[0][0] == 1 ? 0 : 1;
		for (int i = 0; i < m; i++) {
			for (int j = 0; j < n; j++) {
				if (i == 0 && j == 0) {
					continue;
				}
				int leftPaths = 0, topPaths = 0;
				if (i - 1 >= 0 && obstacleGrid[i - 1][j] == 0) {
					leftPaths = matrix[i - 1][j];
				}
				if (j - 1 >= 0 && obstacleGrid[i][j - 1] == 0) {
					topPaths = matrix[i][j - 1];
				}
				matrix[i][j] = obstacleGrid[i][j] == 0 ? leftPaths + topPaths : 0;
			}
		}
		return matrix[m - 1][n - 1];
	}
}