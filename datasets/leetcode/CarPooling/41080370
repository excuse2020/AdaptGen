class Solution {
	boolean carPooling(int[][] trips, int capacity) {
		return util1(trips,capacity);
	}
	boolean util1(int[][] trips, int limit) {
		PriorityQueue<int[]> incoming = new PriorityQueue<>((a, b) -> {(a[1] == b[1]) ? a[0] - b[0] : a[1] - b[1]});
		for (int a: trips) {	
			incoming.add(a);
		}
		PriorityQueue<int[]> outgoing = new PriorityQueue<>((a, b) -> {a[0] - b[0]});
		int pos = 0;
		int currCap = limit;
		while (incoming.isEmpty() == false) {
			while (outgoing.isEmpty() == false && outgoing.peek()[0] <= pos) {
				currCap += outgoing.poll()[1];
			}
			while (incoming.isEmpty() == false && incoming.peek()[1] <= pos) {
				int[] arr = incoming.poll();
				if (currCap - arr[0] < 0) {
					return false;
				}
				outgoing.add(new int{arr[2], arr[0]});
				currCap -= arr[0];
			}
			pos++;
		}
		return true;
	}
}