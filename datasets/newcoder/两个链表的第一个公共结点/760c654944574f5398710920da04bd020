class Solution {
	ListNode FindFirstCommonNode(ListNode pHead1, ListNode pHead2) {
		int lengthA = 0;
		int lengthB = 0;
		ListNode pHeadA = pHead1;
		ListNode pHeadB = pHead2;
		while (pHeadA != null) {
			pHeadA = pHeadA.next;
			lengthA++;
		}
		while (pHeadB != null) {
			pHeadB = pHeadB.next;
			lengthB++;
		}
		pHeadA = pHead1;
		pHeadB = pHead2;
		if (lengthA > lengthB) {
			for (int i = 0; i < lengthA - lengthB; i++) {
				pHeadA = pHeadA.next;
			}
		} 
		else {
			for (int i = 0; i < lengthB - lengthA; i++) {
				pHeadB = pHeadB.next;
			}
		}
		while (pHeadA != pHeadB) {
			pHeadA = pHeadA.next;
			pHeadB = pHeadB.next;
		}
		return pHeadA;
	}
	ListNode FindFirstCommonNodeV1(ListNode pHead1, ListNode pHead2) {
		Deque<ListNode> queue = new LinkedList<>();
		while (pHead1 != null) {
			queue.add(pHead1);
			pHead1 = pHead1.next;
		}
		while (pHead2 != null) {
			if (queue.contains(pHead2)) {
				return pHead2;
			}
			pHead2 = pHead2.next;
		}
		return null;
	}
}