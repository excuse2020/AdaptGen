class Solution {
	boolean dfs(int i, List<List<Integer>> adj, int[] col) {
		for (Integer a: adj.get(i)) {	
			if (col[a] == 0) {
				col[a] = col[i] == 1 ? 2 : 1;
				if (dfs(a,adj,col) == false) {
					return false;
				}
			} 
			else if (col[a] == col[i]) {
				return false;
			}
		}
		return true;
	}
	boolean possibleBipartition(int n, int[][] dis) {
		List<List<Integer>> adj = new ArrayList<>();
		for (int i = 0; i <= n; i++) {
			adj.add(new ArrayList<>());
		}
		for (int i = 0; i < dis.length; i++) {
			adj.get(dis[i][0]).add(dis[i][1]);
			adj.get(dis[i][1]).add(dis[i][0]);
		}
		int[] col = new int[n + 1];
		for (int i = 1; i <= n; i++) {
			if (col[i] == 0) {
				col[i] = 1;
				if (dfs(i,adj,col) == false) {
					return false;
				}
			}
		}
		return true;
	}
}