class Solution {
	void dfs(int idx, int leftRemain, int rightRemain, char[] string, List<String> list) {
		if (idx == string.length) {
			list.add(new String(string));
			return;
		}
		if (leftRemain > 0) {
			string[idx] = '(';
			dfs(idx + 1,leftRemain - 1,rightRemain,string,list);
		}
		if (rightRemain > 0 && leftRemain != rightRemain) {
			string[idx] = ')';
			dfs(idx + 1,leftRemain,rightRemain - 1,string,list);
		}
	}
	ArrayList<String> generateParenthesis(int n) {
		ArrayList<String> list = new ArrayList<>();
		if (n < 0) {
			return list;
		}
		dfs(0,n,n,new char[n << 1],list);
		return list;
	}
}