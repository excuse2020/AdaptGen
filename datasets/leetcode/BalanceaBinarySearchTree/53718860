class Solution {
	TreeNode balanceBST(TreeNode root) {
		List<Integer> ar = in(root);
		return bst(ar,0,ar.size() - 1);
	}
	TreeNode bst(List<Integer> nums, int start, int end) {
		if (start > end) {
			return null;
		}
		int mid = (start + end) / 2;
		TreeNode node = new TreeNode(nums.get(mid));
		node.left = bst(nums,start,mid - 1);
		node.right = bst(nums,mid + 1,end);
		return node;
	}
	void help(TreeNode node, List<Integer> res) {
		if (node != null) {
			help(node.left,res);
			res.add(node.val);
			help(node.right,res);
		}
	}
	List<Integer> in(TreeNode root) {
		List<Integer> res = new ArrayList<>();
		help(root,res);
		return res;
	}
}