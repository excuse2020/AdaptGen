class Solution {
	int find(int node, int[] parent) {
		while (parent[node] != -1) {
			node = parent[node];
		}
		return node;
	}
	int removeStones(int[][] stones) {
		int[] parent = new int[stones.length];
		Arrays.fill(parent,-1);
		for (int i = 0; i < stones.length; i++) {
			for (int j = i + 1; j < stones.length; j++) {
				int[] stone1 = stones[i];
				int[] stone2 = stones[j];
				if (stone1[0] == stone2[0] || stone1[1] == stone2[1]) {
					union(i,j,parent);
				}
			}
		}
		int component = 0;
		for (int i = 0; i < parent.length; i++) {
			if (parent[i] == -1) {
				component++;
			}
		}
		return stones.length - component;
	}
	void union(int A, int B, int[] parent) {
		int parentA = find(A,parent);
		int parentB = find(B,parent);
		if (parentA != parentB) {
			parent[parentB] = parentA;
		}
	}
}