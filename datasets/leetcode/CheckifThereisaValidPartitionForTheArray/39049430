class Solution {
	boolean checkFun(int[] nums, int i, Boolean[] dp) {
		if (i >= nums.length) {
			return true;
		}
		if (dp[i] != null) {
			return dp[i];
		}
		if (i + 1 < nums.length && nums[i] == nums[i + 1]) {
			if (checkFun(nums,i + 2,dp)) {
				return dp[i] = true;
			}
		}
		if (i + 2 < nums.length && nums[i] == nums[i + 1] && nums[i + 2] == nums[i + 1]) {
			if (checkFun(nums,i + 3,dp)) {
				return dp[i] = true;
			}
		}
		if (i + 2 < nums.length && nums[i + 1] - nums[i] == 1 && nums[i + 2] - nums[i + 1] == 1) {
			if (checkFun(nums,i + 3,dp)) {
				return dp[i] = true;
			}
		}
		return dp[i] = false;
	}
	boolean validPartition(int[] nums) {
		int n = nums.length;
		Boolean[] dp = new Boolean[n];
		return checkFun(nums,0,dp);
	}
}