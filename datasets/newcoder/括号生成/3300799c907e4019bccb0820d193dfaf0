class Solution {
	ArrayList<String> ans = new ArrayList<>();
	int n;
	void dfs(int i, int open, StringBuilder sb) {
		if (i == 2 * n) {
			ans.add(sb.toString());
			return;
		}
		if (open < n) {
			sb.append("(");
			dfs(i + 1,open + 1,sb);
			sb.deleteCharAt(sb.length() - 1);
		}
		if (i - open < open) {
			sb.append(")");
			dfs(i + 1,open,sb);
			sb.deleteCharAt(sb.length() - 1);
		}
	}
	ArrayList<String> generateParenthesis(int n) {
		this.n = n;
		StringBuilder sb = new StringBuilder();
		dfs(0,0,sb);
		return ans;
	}
}