class Solution {
	long continuousSubarrays(int[] nums) {
		long cnt = 0L;
		int smallest = Integer.MAX_VALUE, largest = Integer.MIN_VALUE;
		int i, j;
		TreeMap<Integer, Integer> freq = new TreeMap<>();
		for (i = 0, j = 0; i < nums.length; ++i) {
			smallest = Math.min(smallest,nums[i]);
			largest = Math.max(largest,nums[i]);
			freq.put(nums[i],freq.getOrDefault(nums[i],0) + 1);
			while (largest - smallest > 2 && j <= i) {
				j++;
				freq.put(nums[j - 1],freq.getOrDefault(nums[j - 1],0) - 1);
				if (freq.get(nums[j - 1]) <= 0) {
					freq.remove(nums[j - 1]);
				}
				smallest = freq.firstKey();
				largest = freq.lastKey();
			}
			cnt += i - j + 1;
		}
		return cnt;
	}
}