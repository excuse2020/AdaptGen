class Solution {
	HashMap<Integer, List<TreeNode>> hs;
	List<TreeNode> allPossibleFBT(int n) {
		hs = new HashMap<>();
		if (n % 2 == 0) {
			return new ArrayList<>();
		}
		return allPossibleFBTS(n);
	}
	List<TreeNode> allPossibleFBTS(int n) {
		List<TreeNode> res = new ArrayList<>();
		if (n == 1) {
			TreeNode root = new TreeNode(0);
			res.add(root);
			return res;
		}
		if (hs.containsKey(n)) {
			return hs.get(n);
		}
		for (int i = 2; i <= n; i = i + 2) {
			List<TreeNode> leftBST = allPossibleFBTS(i - 1);
			List<TreeNode> rightBST = allPossibleFBTS(n - i);
			for (TreeNode leftTree: leftBST) {	
				for (TreeNode rightTree: rightBST) {	
					TreeNode root = new TreeNode(0);
					root.left = leftTree;
					root.right = rightTree;
					res.add(root);
				}
			}
		}
		hs.put(n,res);
		return res;
	}
}