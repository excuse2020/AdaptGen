class Solution {
	int minimumTime(int n, int[][] relations, int[] time) {
		if (n < 2) {
			return n == 0 ? 0 : time[0];
		}
		Map<Integer, Integer> cost = new HashMap();
		Map<Integer, List<Integer>> relationsMap = new HashMap();
		int max = 0;
		int[] indegree = new int[n + 1];
		for (int[] r: relations) {	
			relationsMap.putIfAbsent(r[0],new ArrayList());
			relationsMap.get(r[0]).add(r[1]);
			indegree[r[1]]++;
		}
		Queue<int[]> queue = new LinkedList();
		for (int i = 1; i <= n; i++) {
			if (indegree[i] == 0) {
				queue.offer(new int{i, 0});
			}
		}
		while (!queue.isEmpty()) {
			int[] ele = queue.poll();
			int currCost = ele[1];
			int currElement = ele[0];
			int currMax = Math.max(currCost + time[currElement - 1],cost.getOrDefault(currElement,0));
			cost.put(currElement,currMax);
			indegree[currElement]--;
			if (indegree[currElement] <= 0 && relationsMap.containsKey(currElement)) {
				for (int num: relationsMap.get(currElement)) {	
					queue.offer(new int{num, currMax});
				}
			}
			max = Math.max(max,cost.get(currElement));
		}
		return max;
	}
}