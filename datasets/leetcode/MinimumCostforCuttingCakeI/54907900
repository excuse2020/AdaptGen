class Solution {
	int minimumCost(int m, int n, int[] horizontalCut, int[] verticalCut) {
		Arrays.sort(horizontalCut);
		Arrays.sort(verticalCut);
		int verticalSlices = 1, horizontalSlices = 1;
		int cost = 0;
		n = horizontalCut.length;
		m = verticalCut.length;
		int i = n - 1, j = m - 1;
		while (i >= 0 && j >= 0) {
			if (horizontalCut[i] > verticalCut[j]) {
				cost += (horizontalCut[i] * verticalSlices);
				horizontalSlices++;
				i--;
			} 
			else {
				cost += (verticalCut[j] * horizontalSlices);
				verticalSlices++;
				j--;
			}
		}
		while (i >= 0) {
			cost += (horizontalCut[i] * verticalSlices);
			horizontalSlices++;
			i--;
		}
		while (j >= 0) {
			cost += (verticalCut[j] * horizontalSlices);
			verticalSlices++;
			j--;
		}
		return cost;
	}
}