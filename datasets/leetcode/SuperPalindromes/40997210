class Solution {
	boolean isPalindrome(String str) {
		int n = str.length();
		for (int i = 0; i < n / 2; i++) {
			if (str.charAt(i) != str.charAt(n - 1)) {
				return false;
			}
		}
		return true;
	}
	int superpalindromesInRange(String left, String right) {
		long leftVal = Long.parseLong(left);
		long rightVal = Long.parseLong(right);
		int count = 0;
		for (long i = 1; i <= 1000000; i++) {
			String str = Long.toString(i);
			StringBuilder sb = new StringBuilder(str);
			for (int j = str.length() - 2; j >= 0; j--) {
				sb.append(str.charAt(j));
			}
			long num = Long.parseLong(sb.toString());
			num *= num;
			if (num > rightVal) {
				break;
			}
			if (num >= leftVal && isPalindrome(Long.toString(num))) {
				count++;
			}
		}
		for (long i = 1; i <= 10000000; i++) {
			String str = Long.toString(i);
			StringBuilder sb = new StringBuilder(str);
			for (int j = str.length() - 1; j >= 0; j--) {
				sb.append(str.charAt(j));
			}
			long num = Long.parseLong(sb.toString());
			num *= num;
			if (num > rightVal) {
				break;
			}
			if (num >= leftVal && isPalindrome(Long.toString(num))) {
				count++;
			}
		}
		return count;
	}
}