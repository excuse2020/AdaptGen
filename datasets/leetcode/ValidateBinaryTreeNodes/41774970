class Solution {
	boolean validateBinaryTreeNodes(int n, int[] leftChild, int[] rightChild) {
		Map<Integer, List<Integer>> graph = new HashMap<>();
		int[] inDegree = new int[n];
		for (int node = 0; node < n; node++) {
			int left = leftChild[node];
			int right = rightChild[node];
			if (left != -1) {
				if (!graph.containsKey(node)) {
					graph.put(node,new ArrayList<>());
				}
				graph.get(node).add(left);
				inDegree[left]++;
			}
			if (right != -1) {
				if (!graph.containsKey(node)) {
					graph.put(node,new ArrayList<>());
				}
				graph.get(node).add(right);
				inDegree[right]++;
			}
		}
		List<Integer> rootCandidates = new ArrayList<>();
		for (int node = 0; node < n; node++) {
			if (inDegree[node] == 0) {
				rootCandidates.add(node);
			}
		}
		if (rootCandidates.size() != 1) {
			return false;
		}
		int root = rootCandidates.get(0);
		Queue<Integer> queue = new LinkedList<>();
		Set<Integer> seen = new HashSet<>();
		queue.offer(root);
		seen.add(root);
		while (!queue.isEmpty()) {
			int node = queue.poll();
			if (graph.containsKey(node)) {
				for (int child: graph.get(node)) {	
					if (seen.contains(child)) {
						return false;
					}
					seen.add(child);
					queue.offer(child);
				}
			}
		}
		return seen.size() == n;
	}
}