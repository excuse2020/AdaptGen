class Solution {
	int longestWPI(int[] hours) {
		if (hours == null || hours.length == 0) {
			return 0;
		}
		int longestLength = 0;
		int score = 0;
		int n = hours.length;
		Map<Integer, Integer> seen = new HashMap<>();
		for (int i = 0; i < n; i++) {
			score += (hours[i] > 8) ? 1 : -1;
			if (score > 0) {
				int intervalLength = i + 1;
				longestLength = intervalLength;
			} 
			else {
				seen.putIfAbsent(score,i);
				if (seen.containsKey(score - 1)) {
					int indexOfFirstScoreMinus1 = seen.get(score - 1);
					int intervalLength = i - indexOfFirstScoreMinus1;
					longestLength = Math.max(longestLength,intervalLength);
				}
			}
		}
		return longestLength;
	}
}