class Solution {
	int fn(int[][] dp, int i, int j, int[][] g) {
		if (i == 0 && j == 0) {
			return g[0][0];
		}
		if (i < 0 || j < 0) {
			return Integer.MAX_VALUE - 1000;
		}
		if (dp[i][j] != -1) {
			return dp[i][j];
		}
		return dp[i][j] = Math.min(fn(dp,i - 1,j,g),fn(dp,i,j - 1,g)) + g[i][j];
	}
	int minPathSum(int[][] g) {
		int[][] dp = new int[g.length][g[0].length];
		for (int i = 0; i < g.length; i++) {
			Arrays.fill(dp[i],-1);
		}
		return fn(dp,g.length - 1,g[0].length - 1,g);
	}
}