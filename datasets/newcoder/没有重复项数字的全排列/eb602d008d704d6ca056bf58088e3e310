class Solution {
	ArrayList<ArrayList<Integer>> result = new ArrayList<>();
	void backTracking(int[] num, Deque<Integer> list, boolean[] used) {
		if (list.size() == num.length) {
			result.add(new ArrayList<>(list));
			return;
		}
		for (int i = 0; i < num.length; i++) {
			if (used[i] == true) {
				continue;
			}
			used[i] = true;
			list.addLast(num[i]);
			backTracking(num,list,used);
			used[i] = false;
			list.removeLast();
		}
	}
	ArrayList<ArrayList<Integer>> permute(int[] num) {
		Deque<Integer> deque = new ArrayDeque<>();
		if (num.length == 0) {
			return result;
		}
		boolean[] used = new boolean[num.length];
		backTracking(num,deque,used);
		return result;
	}
}