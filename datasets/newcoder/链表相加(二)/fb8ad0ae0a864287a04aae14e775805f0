class Solution {
	ListNode addInList(ListNode head1, ListNode head2) {
		Stack<Integer> stack1 = new Stack<>();
		Stack<Integer> stack2 = new Stack<>();
		while (head1 != null || head2 != null) {
			if (head1 != null) {
				stack1.add(head1.val);
				head1 = head1.next;
			}
			if (head2 != null) {
				stack2.add(head2.val);
				head2 = head2.next;
			}
		}
		ListNode newHead = new ListNode(-1);
		int carry = 0;
		while (!stack1.isEmpty() || !stack2.isEmpty()) {
			int a = 0, b = 0;
			if (!stack1.isEmpty()) {
				a = stack1.pop();
			}
			if (!stack2.isEmpty()) {
				b = stack2.pop();
			}
			int sum = a + b;
			ListNode cur = new ListNode(sum % 10);
			cur.next = newHead.next;
			newHead.next = cur;
			carry = sum / 10;
		}
		return newHead.next;
	}
}