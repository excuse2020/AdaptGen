class Solution {
	ListNode merge(ListNode l1, ListNode l2) {
		if (l1 == null) {
			return l2;
		}
		if (l2 == null) {
			return l1;
		}
		if (l1.val < l2.val) {
			l1.next = merge(l1.next,l2);
			return l1;
		} 
		else {
			l2.next = merge(l1,l2.next);
			return l2;
		}
	}
	ListNode mergeKLists(ListNode[] lists) {
		return mergeSort(lists,0,lists.length - 1);
	}
	ListNode mergeSort(ListNode[] lists, int left, int right) {
		if (left == right) {
			return lists[left];
		}
		if (left < right) {
			int mid = (left + right) / 2;
			ListNode ll = mergeSort(lists,left,mid);
			ListNode lr = mergeSort(lists,mid + 1,right);
			return merge(ll,lr);
		} 
		else {
			return null;
		}
	}
}