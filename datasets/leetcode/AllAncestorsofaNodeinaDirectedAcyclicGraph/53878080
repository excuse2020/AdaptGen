class Solution {
	void dfs(List<List<Integer>> adj, int u, List<Integer> curr, boolean visited) {
		visited[u] = true;
		for (int v: adj.get(u)) {	
			if (!visited[v]) {
				curr.add(v);
				dfs(adj,v,curr,visited);
			}
		}
	}
	List<List<Integer>> getAncestors(int n, int[][] edges) {
		List<List<Integer>> ans = new ArrayList<>();
		List<List<Integer>> adj = new ArrayList<>();
		for (int i = 0; i < n; i++) {
			adj.add(new ArrayList<>());
		}
		for (int edge: edges) {	
			int u = edge[0];
			int v = edge[1];
			adj.get(v).add(u);
		}
		for (int i = 0; i < n; i++) {
			List<Integer> curr = new ArrayList<>();
			boolean visited = new boolean[n];
			dfs(adj,i,curr,visited);
			Collections.sort(curr);
			ans.add(new ArrayList<>(curr));
		}
		return ans;
	}
}