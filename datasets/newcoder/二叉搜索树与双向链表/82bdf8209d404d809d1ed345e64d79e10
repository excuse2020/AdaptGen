class Solution {
	TreeNode Convert(TreeNode pRootOfTree) {
		if (pRootOfTree == null) {
			return null;
		}
		TreeNode resNode = Convert1(pRootOfTree);
		while (resNode.left != null) {
			resNode = resNode.left;
		}
		return resNode;
	}
	TreeNode Convert1(TreeNode pRootOfTree) {
		if (pRootOfTree == null) {
			return null;
		}
		TreeNode leftNode = Convert(pRootOfTree.left);
		while (leftNode != null & amp & amp::leftNode.right != null) {
			leftNode = leftNode.right;
		}
		if (leftNode != null) {
			leftNode.right = pRootOfTree;
		}
		pRootOfTree.left = leftNode;
		TreeNode rightNode = Convert(pRootOfTree.right);
		while (rightNode != null & amp & amp::rightNode.left != null) {
			rightNode = rightNode.left;
		}
		if (rightNode != null) {
			rightNode.left = pRootOfTree;
		}
		pRootOfTree.right = rightNode;
		return pRootOfTree;
	}
}