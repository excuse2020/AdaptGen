class Solution {
	boolean isValid(char[][] board, int r, int col, char num) {
		for (int i = 0; i < 9; i++) {
			if (board[r][i] == num) {
				return false;
			}
		}
		for (int i = 0; i < 9; i++) {
			if (board[i][col] == num) {
				return false;
			}
		}
		int gridRowStart = (r / 3) * 3;
		int gridColStart = (col / 3) * 3;
		for (int i = gridRowStart; i < gridRowStart + 3; i++) {
			for (int j = gridColStart; j < gridColStart + 3; j++) {
				if (board[i][j] == num) {
					return false;
				}
			}
		}
		return true;
	}
	boolean solve(char[][] board, int count) {
		if (count == 9 * 9) {
			return true;
		}
		int i = 0;
		int j = 0;
	}
	void solveSudoku(char[][] board) {
		int count = 0;
		int i = 0;
		int j = 0;
	}
}