class Solution {
	ListNode insertionSortList(ListNode head) {
		if (null == head.next) {
			return head;
		}
		int len = 0;
		ListNode node = head;
		while (null != node) {
			len++;
			node = node.next;
		}
		int[] arr = new int[len];
		int index = 0;
		node = head;
		while (null != node) {
			arr[index] = node.val;
			index++;
			node = node.next;
		}
		quickSort(arr,0,arr.length - 1);
		node = head;
		for (int num: arr) {	
			node.val = num;
			node = node.next;
		}
		return head;
	}
	void quickSort(int[] arr, int start, int end) {
		if (start >= end) {
			return;
		}
		int l = start - 1;
		int r = end + 1;
		int p = start;
		int val = arr[end];
		while (p < r) {
			if (arr[p] < val) {
				int swap = arr[p];
				arr[p] = arr[l + 1];
				arr[l + 1] = swap;
				l++;
				p++;
			} 
			else if (arr[p] > val) {
				int swap = arr[p];
				arr[p] = arr[r - 1];
				arr[r - 1] = swap;
				r--;
			} 
			else {
				p++;
			}
		}
		quickSort(arr,start,l);
		quickSort(arr,r,end);
	}
}