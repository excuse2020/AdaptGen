class Solution {
	int find_end(int end, int day) {
		int mid = -1;
		int l = 0;
		int r = end.length - 1;
		int ans = -1;
		while (l <= r) {
			mid = (l + r) / 2;
			if (end[mid] < day) {
				ans = mid;
				l = mid + 1;
			} 
			else {
				r = mid - 1;
			}
		}
		return ans + 1;
	}
	int find_start(int start, int day) {
		int mid = -1;
		int l = 0;
		int r = start.length - 1;
		int ans = -1;
		while (l <= r) {
			mid = (l + r) / 2;
			if (start[mid] <= day) {
				ans = mid;
				l = mid + 1;
			} 
			else {
				r = mid - 1;
			}
		}
		return ans + 1;
	}
	int[] fullBloomFlowers(int[][] flowers, int[] people) {
		int n = flowers.length;
		int start = new int[n];
		int end = new int[n];
		int ans = new int[people.length];
		for (int i = 0; i < flowers.length; i++) {
			start[i] = flowers[i][0];
		}
		for (int i = 0; i < flowers.length; i++) {
			end[i] = flowers[i][1];
		}
		Arrays.sort(start);
		Arrays.sort(end);
		for (int i = 0; i < people.length; i++) {
			ans[i] = find_start(start,people[i]) - find_end(end,people[i]);
		}
		return ans;
	}
}