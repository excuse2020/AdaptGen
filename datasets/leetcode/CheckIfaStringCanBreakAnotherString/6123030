class Solution {
	int BS(List<Character> arr, char target) {
		int l = 0;
		int r = arr.size() - 1;
		int result = -1;
		while (l <= r) {
			int mid = l + (r - l) / 2;
			if (arr.get(mid) > target) {
				r = mid - 1;
			} 
			else {
				result = mid;
				l = mid + 1;
			}
		}
		return result;
	}
	boolean check(List<Character> c1, List<Character> c2, boolean flag) {
		if (flag == true) {
			for (int i = 0; i < c1.size(); i++) {
				int index = BS(c2,c1.get(i));
				if (index == -1) {
					return false;
				}
				c2.remove(index);
			}
			return true;
		} 
		else {
			for (int i = 0; i < c2.size(); i++) {
				int index = BS(c1,c2.get(i));
				if (index == -1) {
					return false;
				}
				c1.remove(index);
			}
			return true;
		}
	}
	boolean checkIfCanBreak(String s1, String s2) {
		char[] c1 = s1.toCharArray();
		char[] c2 = s2.toCharArray();
		Arrays.sort(c1);
		Arrays.sort(c2);
		List<Character> l1 = new ArrayList<>();
		List<Character> l2 = new ArrayList<>();
		for (int i = 0; i < c1.length; i++) {
			l1.add(c1[i]);
		}
		for (int i = 0; i < c2.length; i++) {
			l2.add(c2[i]);
		}
		List<Character> l3 = new ArrayList(l1);
		List<Character> l4 = new ArrayList(l2);
		return check(l1,l2,true) || check(l3,l4,false);
	}
}