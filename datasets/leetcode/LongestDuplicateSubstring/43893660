class Solution {
	long base = 31;
	long mod = 1000000007;
	long firstHash(String s, int size) {
		long hash = 0;
		long localBase = 1;
		int i = size - 1;
		int c;
	}
	String getDup(int size, String s) {
		long hash = firstHash(s,size);
		HashSet<Long> hashes = new HashSet();
		hashes.add(hash);
		long pow = 1;
		for (int i = 1; i < size; i++) {
			pow *= base;
		}
		for (int i = size; i < s.length(); i++) {
			hash = nextHash(hash,i,size,s,pow);
			if (!hashes.add(hash)) {
				return s.substring(i - size + 1,i + 1);
			}
		}
		return null;
	}
	String longestDupSubstring(String s) {
		int shortest = 1;
		int longest = s.length() - 1;
		String ans = "";
		while (shortest <= longest) {
			int midSize = shortest + (longest - shortest) / 2;
			String dup = getDup(midSize,s);
			if (dup != null) {
				ans = dup;
				shortest = midSize + 1;
			} 
			else {
				longest = midSize - 1;
			}
		}
		return ans;
	}
	long nextHash(long hash, int newIndex, int size, String s, long pow) {
		int subtractedCharDiff;
	}
}