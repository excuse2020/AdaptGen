class Solution {
	int h;
	int k;
	void dfs(int[][] grid, int[][] vis, int i, int j) {
		int n = grid.length;
		int m = grid[0].length;
		if (i < 0 || i >= n || j < 0 || j >= m || grid[i][j] == 0 || vis[i][j] == 1) {
			return;
		}
		vis[i][j] = 1;
		h = Math.max(i,h);
		k = Math.max(k,j);
		dfs(grid,vis,i + 1,j);
		dfs(grid,vis,i - 1,j);
		dfs(grid,vis,i,j + 1);
		dfs(grid,vis,i,j - 1);
	}
	int[][] findFarmland(int[][] grid) {
		int n = grid.length;
		int m = grid[0].length;
		int[][] vis = new int[n][m];
		int sum = 0;
		ArrayList<int[]> temp = new ArrayList<>();
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < m; j++) {
				if (grid[i][j] == 1 && vis[i][j] == 0) {
					h = i;
					k = j;
					dfs(grid,vis,i,j);
					temp.add(new int{i, j, h, k});
				}
			}
		}
		return temp.toArray(new int[temp.size()]);
	}
}