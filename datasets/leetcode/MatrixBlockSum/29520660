class Solution {
	int fnQuery(int dp, int si, int sj, int ei, int ej) {
		if (si == 0 && sj != 0) {
			return dp[ei][ej] - dp[ei][sj - 1];
		} 
		else if (si != 0 && sj == 0) {
			return dp[ei][ej] - dp[si - 1][ej];
		} 
		else if (si == 0 && sj == 0) {
			return dp[ei][ej];
		} 
		else {
			return dp[ei][ej] - dp[si - 1][ej] + dp[si - 1][sj - 1];
		}
	}
	int[][] matrixBlockSum(int[][] mat, int k) {
		int rows = mat.length;
		int cols = mat[0].length;
		int dp = new int[rows][cols];
		dp[0][0] = mat[0][0];
		for (int i = 1; i < rows; i++) {
			dp[i][0] = dp[i - 1][0] + mat[i][0];
		}
		for (int i = 1; i < cols; i++) {
			dp[0][i] = dp[0][i - 1] + mat[0][i];
		}
		for (int i = 1; i < rows; i++) {
			for (int j = 1; j < cols; j++) {
				dp[i][j] = mat[i][j] + dp[i - 1][j] - dp[i - 1][j - 1];
			}
		}
		int ans = new int[rows][cols];
		for (int i = 0; i < rows; i++) {
			for (int j = 0; j < cols; j++) {
				int si, sj, ei, ej;
				si = Math.max(0,i - k);
				sj = Math.max(0,j - k);
				ei = Math.min(rows - 1,i + k);
				ej = Math.min(cols - 1,j + k);
				ans[i][j] = fnQuery(dp,si,sj,ei,ej);
			}
		}
		return ans;
	}
}