class Solution {
	int getStage(char c) {
		int stage;
	}
	int longestBeautifulSubstring(String word) {
		int maxLength = 0;
		if (word.length() < 5) {
			return maxLength;
		}
		int startLocation = 0;
		int currentStage = 0;
		int vowelStage = 0;
		boolean sequenceStarted = false;
		for (int i = 0; i < word.length(); i++) {
			char c = word.charAt(i);
			vowelStage = getStage(c);
			if (!sequenceStarted && vowelStage == 1) {
				currentStage = 1;
				sequenceStarted = true;
				startLocation = i;
			} 
			else if (sequenceStarted && vowelStage < currentStage) {
				sequenceStarted = false;
				currentStage = 0;
				if (vowelStage == 1) {
					i--;
				}
			} 
			else if (sequenceStarted && vowelStage >= currentStage) {
				if (currentStage == 5) {
					if (vowelStage == 5) {
						if (((i - startLocation + 1)) > maxLength) {
							maxLength = i - startLocation + 1;
						}
					} 
					else {
						sequenceStarted = false;
						currentStage = 0;
						if (vowelStage == 1) {
							i--;
						}
					}
				} 
				else {
					if (vowelStage == (currentStage + 1)) {
						currentStage = vowelStage;
						if (vowelStage == 5) {
							if (((i - startLocation) + 1) > maxLength) {
								maxLength = i - startLocation + 1;
							}
						}
					} 
					else if (vowelStage == currentStage) {
						continue;
					} 
					else {
						sequenceStarted = false;
						currentStage = 0;
					}
				}
			}
		}
		return maxLength;
	}
}