class Solution {
	List<List<Integer>> ans = new ArrayList<>();
	int k;
	List<Integer> path = new ArrayList<>();
	List<List<Integer>> combinationSum3(int k, int n) {
		this.k = k;
		dfs(9,n);
		return this.ans;
	}
	void dfs(int i, int t) {
		int d = k - path.size();
		if (t < 0 || t > (i + i - d + 1) * d / 2) {
			return;
		}
		if (d == 0) {
			ans.add(new ArrayList<>(path));
			return;
		}
		for (int j = i; j >= d; --j) {
			path.add(j);
			dfs(j - 1,t - j);
			path.remove(path.size() - 1);
		}
	}
}