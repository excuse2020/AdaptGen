class Solution {
	int operationOnArr(ArrayList<Integer> ls) {
		int ans = 0;
		for (int i = 0; i < ls.size(); i++) {
			ans = ans * 2 + ls.get(i);
		}
		return ans;
	}
	int sumRootToLeaf(TreeNode root) {
		ArrayList<Integer> ls = new ArrayList<>();
		return sumRootToLeafHelper(root,ls);
	}
	int sumRootToLeafHelper(TreeNode root, ArrayList<Integer> ls) {
		int sum = 0;
		if (root != null) {
			ls.add(root.val);
			if (root.left == null && root.right == null) {
				sum += operationOnArr(ls);
			}
			sum += sumRootToLeafHelper(root.left,ls);
			sum += sumRootToLeafHelper(root.right,ls);
			ls.remove(ls.size() - 1);
		}
		return sum;
	}
}