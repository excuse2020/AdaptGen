class Solution {
	int maxStarSum(int[] vals, int[][] edges, int k) {
		Map<Integer, PriorityQueue<Integer>> graph = new HashMap<>();
		int max = Integer.MIN_VALUE, n = vals.length;
		for (int i = 0; i < n; i++) {
			PriorityQueue<Integer> q = new PriorityQueue<>();
			graph.put(i,q);
		}
		for (int[] e: edges) {	
			PriorityQueue<Integer> one = graph.get(e[0]);
			PriorityQueue<Integer> two = graph.get(e[1]);
			one.offer(vals[e[1]]);
			two.offer(vals[e[0]]);
			graph.put(e[0],one);
			graph.put(e[1],two);
		}
		for (int i = 0; i < n; i++) {
			PriorityQueue<Integer> q = graph.get(i);
			int sum = vals[i];
			while (q.size() > k) {
				q.poll();
			}
			while (!q.isEmpty()) {
				int x = q.poll();
				if (x < 0) {
					continue;
				}
				sum += x;
			}
			max = Math.max(max,sum);
		}
		return max;
	}
}