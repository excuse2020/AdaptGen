class Solution {
	int[][] mat;
	Set<Integer> set = new HashSet<>();
	int algo(int numSelect, int strt, int col) {
		if (strt >= col && numSelect != 0) {
			return Integer.MIN_VALUE;
		}
		if (numSelect == 0) {
			return rowCovered();
		}
		int res = 0;
		for (int i = strt; i < col; i++) {
			set.add(i);
			res = Math.max(res,algo(numSelect - 1,i + 1,col));
			set.remove(i);
		}
		return res;
	}
	int maximumRows(int[][] matrix, int numSelect) {
		mat = matrix;
		return algo(numSelect,0,mat[0].length);
	}
	int rowCovered() {
		int res = 0;
		for (int i = 0; i < mat.length; i++) {
			int sumd = 0;
			for (int j = 0; j < mat[0].length; j++) {
				if (mat[i][j] == 1 && !set.contains(j)) {
					sumd = 1;
				}
			}
			if (sumd == 0) {
				res++;
			}
		}
		return res;
	}
}