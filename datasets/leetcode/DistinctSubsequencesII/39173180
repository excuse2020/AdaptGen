class Solution {
	int distinctSubseqII(String s) {
		long mod = (long) (Math.pow(10,9) + 7);
		int[] dp = new int[s.length() + 1];
		dp[0] = 1;
		HashMap<Character, Integer> map = new HashMap<>();
		for (int i = 1; i < dp.length; i++) {
			char ch = s.charAt(i - 1);
			dp[i] = (int) ((2L * dp[i - 1]) % mod);
			if (map.containsKey(ch)) {
				int lastSeenIndex = map.get(ch) % dp.length;
				dp[i] = (int) ((dp[i] - dp[lastSeenIndex - 1] + mod) % mod);
			}
			map.put(ch,i);
		}
		return (dp[s.length()] - 1 + (int) mod) % (int) mod;
	}
}