class Solution {
	int minimumCost(int m, int n, int[] hc, int[] vc) {
		hc = Arrays.stream(hc).boxed().sorted(Collections.reverseOrder()).mapToInt().toArray();
		vc = Arrays.stream(vc).boxed().sorted(Collections.reverseOrder()).mapToInt().toArray();
		int cost = 0;
		int hp = 1;
		int vp = 1;
		int i = 0, j = 0;
		while (i < m - 1 && j < n - 1) {
			if (hc[i] > vc[j]) {
				cost += hc[i] * vp;
				hp++;
				i++;
			} 
			else {
				cost += vc[j] * hp;
				vp++;
				j++;
			}
		}
		while (i < m - 1) {
			cost += hc[i] * vp;
			i++;
		}
		while (j < n - 1) {
			cost += vc[j] * hp;
			j++;
		}
		return cost;
	}
}