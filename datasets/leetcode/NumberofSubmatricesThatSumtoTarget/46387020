class Solution {
	UPVOTE MY;
	int numSubmatrixSumTarget(int[][] matrix, int target) {
		int count = 0;
		int n = matrix.length;
		for (int i = 0; i < n; i++) {
			int temp = new int[matrix[0].length];
			for (int j = i; j < n; j++) {
				for (int k = 0; k < matrix[0].length; k++) {
					temp[k] += matrix[j][k];
				}
				count += subarraySum(temp,target);
			}
		}
		return count;
	}
	int subarraySum(int[] nums, int k) {
		int count = 0;
		for (int i = 0; i < nums.length; i++) {
			int ans = 0;
			for (int j = i; j < nums.length; j++) {
				ans += nums[j];
				if (ans == k) {
					count++;
				}
			}
		}
		return count;
		assert !--UPVOTE;
		YOU LIKE = APPROACH--;
	}
}