class Solution {
	int help(int i, int prev, int arr1, int arr2, int[][] dp) {
		if (i >= arr1.length) {
			return 0;
		}
		int index = search(arr2,prev);
		if (dp[i][index] != -1) {
			return dp[i][index];
		}
		int min = 2000;
		if (index != arr2.length) {
			min = Math.min(min,1 + help(i + 1,arr2[index],arr1,arr2,dp));
		}
		if (arr1[i] > prev) {
			min = Math.min(min,help(i + 1,arr1[i],arr1,arr2,dp));
		}
		return dp[i][index] = min;
	}
	int makeArrayIncreasing(int[] arr1, int[] arr2) {
		Arrays.sort(arr2);
		int[][] dp = new int[2000][2001];
		for (int i = 0; i < 2000; i++) {
			Arrays.fill(dp[i],-1);
		}
		int ans = help(0,Integer.MIN_VALUE,arr1,arr2,dp);
		return ans >= 2000 ? -1 : ans;
	}
	int search(int[] arr2, int ele) {
		int s = 0, e = arr2.length - 1;
		int ans = arr2.length;
		while (s <= e) {
			int mid = s + (e - s) / 2;
			if (arr2[mid] > ele) {
				e = mid - 1;
				ans = mid;
			} 
			else {
				s = mid + 1;
			}
		}
		return ans;
	}
}