class Solution {
	int kedane(int[] arr) {
		int maxsum = 0;
		int sum = 0;
		for (int i = 0; i < arr.length; i++) {
			sum = sum + arr[i];
			maxsum = Math.max(maxsum,sum);
			if (sum < 0) {
				sum = 0;
			}
		}
		return maxsum;
	}
	int maximumsSplicedArray(int[] nums1, int[] nums2) {
		int[] nums1Arr = new int[nums1.length];
		int[] nums2Arr = new int[nums2.length];
		int sum1 = 0;
		int sum2 = 0;
		for (int i = 0; i < nums1.length; i++) {
			sum1 = sum1 + nums1[i];
			sum2 = sum2 + nums2[i];
			nums1Arr[i] = nums2[i] - nums1[i];
			nums2Arr[i] = nums1[i] - nums2[i];
		}
		return Math.max(sum1 + kedane(nums1Arr),sum2 + kedane(nums2Arr));
	}
}