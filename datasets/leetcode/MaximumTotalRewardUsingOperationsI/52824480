class Solution {
	int max = 0;
	int maxTotalReward(int[] arr, int idx, int sum, int n, int dp) {
		if (idx >= n + 1) {
			return 0;
		}
		if (dp[idx][sum] != -1) {
			return dp[idx][sum];
		}
		int val1 = 0;
		if (arr[idx - 1] > sum) {
			val1 = arr[idx - 1] + maxTotalReward(arr,idx + 1,sum + arr[idx - 1],n,dp);
		}
		int val2 = maxTotalReward(arr,idx + 1,sum,n,dp);
		return dp[idx][sum] = Math.max(val1,val2);
	}
	int maxTotalReward(int[] rewardValues) {
		Arrays.sort(rewardValues);
		int max = rewardValues[0];
		for (int i = 1; i < rewardValues.length; i++) {
			max = Math.max(max,rewardValues[i]);
		}
		int dp = new int[rewardValues.length + 1][2 * max + 1];
		for (int i = 0; i < dp.length; i++) {
			Arrays.fill(dp[i],-1);
		}
		return maxTotalReward(rewardValues,1,0,rewardValues.length,dp);
	}
}