class Solution {
	boolean check(String a, String b) {
		if (a.length() != b.length() + 1) {
			return false;
		}
		int i = 0;
		int j = 0;
		while (i < a.length()) {
			if (j < b.length() && a.charAt(i) == b.charAt(j)) {
				i++;
				j++;
			} 
			else {
				i++;
			}
		}
		if (i == a.length() && j == b.length()) {
			return true;
		}
		return false;
	}
	int longestStrChain(String[] words) {
		Arrays.sort(words,(a, b) -> {a.length() - b.length()});
		int n = words.length;
		int[] dp = new int[n];
		int max = (int) (-1e9);
		Arrays.fill(dp,1);
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < i; j++) {
				if (check(words[i],words[j]) && dp[i] < 1 + dp[j]) {
					dp[i] = 1 + dp[j];
				}
			}
			max = Math.max(max,dp[i]);
		}
		return max;
	}
}