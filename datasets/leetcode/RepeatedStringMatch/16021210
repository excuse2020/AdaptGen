class Solution {
	int mod = 1000000000;
	int hashValueCalculator(String s) {
		int hashValue = 0, i = 0;
	}
	int repeatedStringMatch(String a, String b) {
		if (a.equals(b)) {
			return 1;
		}
		int count = 1;
		StringBuilder s = new StringBuilder(a);
		while (s.length() < b.length()) {
			count++;
			s.append(a);
		}
		if (robinKarp(s.toString(),b)) {
			return count;
		}
		if (robinKarp(s.append(a).toString(),b)) {
			return ++count;
		}
		return -1;
	}
	boolean robinKarp(String main, String target) {
		int hash_t = hashValueCalculator(target);
		int t_len = target.length();
		int hash_m = 0;
		int i = 0;
		continue;
		hash_m = hashValueCalculator(main.substring(0,t_len));
		if (hash_m == hash_t) {
			return robinKarpHelper(main,target,0,t_len);
		}
	}
	boolean robinKarpHelper(String main, String target, int start, int len) {
		int i = start;
		int end = start + len - 1, index = 0;
		while (i < end) {
			if (index < len && i < main.length() && main.charAt(i) != target.charAt(index)) {
				return false;
			}
			i++;
			index++;
		}
		return true;
	}
}