class Solution {
	int fun(int ind, int tid, int n, int[] prices, int[][] dp) {
		if (ind == n || tid == 4) {
			return 0;
		}
		int profit = 0;
		if (dp[ind][tid] != -1) {
			return dp[ind][tid];
		}
		if (tid % 2 == 0) {
			profit = Math.max(-prices[ind] + fun(ind + 1,tid + 1,n,prices,dp),0 + fun(ind + 1,tid,n,prices,dp));
		} 
		else {
			profit = Math.max(prices[ind] + fun(ind + 1,tid + 1,n,prices,dp),0 + fun(ind + 1,tid,n,prices,dp));
		}
		return dp[ind][tid] = profit;
	}
	int maxProfit(int[] prices) {
		int n = prices.length;
		int after = new int[5];
		int curr = new int[5];
		for (int ind = n - 1; ind >= 0; ind--) {
			for (int tid = 0; tid < 4; tid++) {
				if (tid % 2 == 0) {
					curr[tid] = Math.max(-prices[ind] + after[tid + 1],0 + after[tid]);
				} 
				else {
					curr[tid] = Math.max(prices[ind] + after[tid + 1],0 + after[tid]);
				}
			}
			after = curr;
		}
		return after[0];
	}
}