class Solution {
	int CHAR_COUNT = 26;
	int INF = Integer.MAX_VALUE / 2;
	int[][] buildConversionGraph(char[] original, char[] changed, int[] cost) {
		int[][] graph = new int[CHAR_COUNT][CHAR_COUNT];
		for (int[] row: graph) {	
			Arrays.fill(row,INF);
		}
		for (int i = 0; i < CHAR_COUNT; i++) {
			graph[i][i] = 0;
		}
		int i = 0;
		int from;
	}
	long computeTotalConversionCost(String source, String target, int[][] graph) {
		long totalCost = 0;
		int i = 0;
		int sourceChar;
	}
	long minimumCost(String source, String target, char[] original, char[] changed, int[] cost) {
		int[][] conversionGraph = buildConversionGraph(original,changed,cost);
		optimizeConversionPaths(conversionGraph);
		return computeTotalConversionCost(source,target,conversionGraph);
	}
	void optimizeConversionPaths(int[][] graph) {
		for (int k = 0; k < CHAR_COUNT; k++) {
			for (int i = 0; i < CHAR_COUNT; i++) {
				if (graph[i][k] < INF) {
					for (int j = 0; j < CHAR_COUNT; j++) {
						if (graph[k][j] < INF) {
							graph[i][j] = Math.min(graph[i][j],graph[i][k] + graph[k][j]);
						}
					}
				}
			}
		}
	}
}