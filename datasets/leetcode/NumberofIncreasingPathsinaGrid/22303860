class Solution {
	int[][] grid;
	int m, n;
	int mod = 1000000007;
	int[][] visited;
	int countPaths(int[][] grid) {
		this.grid = grid;
		m = grid.length;
		n = grid[0].length;
		int ans = 0;
		this.visited = new int[m][n];
		for (int i = 0; i < m; i++) {
			for (int j = 0; j < n; j++) {
				if (visited[i][j] == 0) {
					solution(i,j);
				}
			}
		}
		for (int i = 0; i < m; i++) {
			for (int j = 0; j < n; j++) {
				ans = (ans % mod + visited[i][j] % mod) % mod;
			}
		}
		return ans;
	}
	int solution(int i, int j) {
		if (visited[i][j] != 0) {
			return visited[i][j];
		}
		int top = 0, down = 0, left = 0, right = 0;
		if (i - 1 >= 0 && grid[i - 1][j] > grid[i][j]) {
			top = solution(i - 1,j);
		}
		if (i + 1 < m && grid[i + 1][j] > grid[i][j]) {
			down = solution(i + 1,j);
		}
		if (j - 1 >= 0 && grid[i][j - 1] > grid[i][j]) {
			left = solution(i,j - 1);
		}
		if (j + 1 < n && grid[i][j + 1] > grid[i][j]) {
			right = solution(i,j + 1);
		}
		int ans = (top + down) % mod;
		visited[i][j] = ans;
		return visited[i][j];
	}
}