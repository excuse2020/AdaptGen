class Solution {
	char D;
	char I;
	void generate(String pattern, int n, StringBuilder sb, List<String> soln) {
		if (soln.size() > 0) {
			return;
		}
		if (sb.length() > 1) {
			int b = Character.getNumericValue(sb.charAt(sb.length() - 1));
			int a = Character.getNumericValue(sb.charAt(sb.length() - 2));
			char c = pattern.charAt(sb.length() - 2);
			if (a > b && c == I) {
				return;
			}
			if (a < b && c == D) {
				return;
			}
		}
		if (sb.length() >= (n + 1)) {
			soln.add(sb.toString());
			return;
		}
		List<Integer> candidates = getCandidates(sb,n);
		for (int i = 0; i < candidates.size(); i++) {
			sb.append(candidates.get(i));
			generate(pattern,n,sb,soln);
			sb.deleteCharAt(sb.length() - 1);
		}
	}
	List<Integer> getCandidates(StringBuilder sb, int n) {
		List<Integer> arr = IntStream.rangeClosed(1,n + 1).boxed().collect(Collectors.toList());
		if (sb.length() == 0) {
			return arr;
		}
		for (int i = 0; i < sb.length(); i++) {
			arr.remove(Integer.valueOf(Character.getNumericValue(sb.charAt(i))));
		}
		return arr;
	}
	String smallestNumber(String pattern) {
		List<String> patterns = new ArrayList<>();
		generate(pattern,pattern.length(),new StringBuilder(),patterns);
		return patterns.get(0);
	}
}