class Solution {
	boolean find = false;
	void dfs(TreeNode root, ArrayList<Integer> path, int target) {
		if (find || root == null) {
			return;
		}
		path.add(root.val);
		if (root.val == target) {
			find = true;
			return;
		}
		dfs(root.left,path,target);
		dfs(root.right,path,target);
		if (find) {
			return;
		}
		path.remove(path.size() - 1);
	}
	int lowestCommonAncestor(TreeNode root, int o1, int o2) {
		ArrayList<Integer> path1 = new ArrayList<Integer>();
		ArrayList<Integer> path2 = new ArrayList<Integer>();
		dfs(root,path1,o1);
		find = false;
		dfs(root,path2,o2);
		int res = 0;
		for (int i = 0; i < path1.size() && i < path2.size(); ++i) {
			int x = path1.get(i);
			int y = path2.get(i);
			if (x == y) {
				res = x;
			} 
			else {
				break;
			}
		}
		return res;
	}
}