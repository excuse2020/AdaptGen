class Solution {
	int reachableNodes(int n, int[][] edges, int[] restricted) {
		List<Integer> graph = new List[n];
		boolean[] visited = new boolean[n];
		Queue<Integer> q = new LinkedList<>();
		int ans = 1;
		for (int i = 0; i < n; i++) {
			graph[i] = new ArrayList<>();
		}
		for (int[] edge: edges) {	
			graph[edge[0]].add(edge[1]);
			graph[edge[1]].add(edge[0]);
		}
		for (int i: restricted) {	
			visited[i] = true;
		}
		q.add(0);
		visited[0] = true;
		while (!q.isEmpty()) {
			int node = q.poll();
			List<Integer> neighbors = graph[node];
			for (Integer i: neighbors) {	
				if (!visited[i]) {
					ans++;
					visited[i] = true;
					q.add(i);
				}
			}
		}
		return ans;
	}
}