class Solution {
	int dfs(int row, int col, int[][] grid) {
		int sum = grid[row][col];
		grid[row][col] = 0;
		if (sum == 0) {
			return 0;
		}
		if (row + 1 < grid.length) {
			sum += dfs(row + 1,col,grid);
		}
		if (row - 1 >= 0) {
			sum += dfs(row - 1,col,grid);
		}
		if (col + 1 < grid[0].length) {
			sum += dfs(row,col + 1,grid);
		}
		if (col - 1 >= 0) {
			sum += dfs(row,col - 1,grid);
		}
		return sum;
	}
	int findMaxFish(int[][] grid) {
		int max = 0;
		for (int i = 0; i < grid.length; i++) {
			for (int j = 0; j < grid[0].length; j++) {
				if (grid[i][j] != 0) {
					max = Math.max(max,dfs(i,j,grid));
				}
			}
		}
		return max;
	}
}