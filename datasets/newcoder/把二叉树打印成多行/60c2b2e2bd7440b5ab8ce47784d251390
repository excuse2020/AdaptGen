class Solution {
	ArrayList<ArrayList<Integer>> Print(TreeNode root) {
		ArrayList<ArrayList<Integer>> lists = new ArrayList<>();
		HashMap<TreeNode, Integer> map = new HashMap<>();
		if (root == null) {
			return lists;
		}
		Deque<TreeNode> queue = new ArrayDeque<>();
		queue.addFirst(root);
		map.put(root,0);
		while (!queue.isEmpty()) {
			root = queue.pollLast();
			int deep = map.get(root);
			if (root.left != null) {
				queue.addFirst(root.left);
				map.put(root.left,deep + 1);
			}
			if (root.right != null) {
				queue.addFirst(root.right);
				map.put(root.right,deep + 1);
			}
			if (lists.size() <= deep) {
				ArrayList<Integer> list = new ArrayList<>();
				list.add(root.val);
				lists.add(list);
			} 
			else {
				ArrayList<Integer> list = lists.get(deep);
				list.add(root.val);
			}
		}
		return lists;
	}
}