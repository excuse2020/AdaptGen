class Solution {
	int minSideJumps(int[] obstacles) {
		return solveSpaceOpt(obstacles);
	}
	int solveMem(int[] obstacles, int path, int i, int[][] dp) {
		if (i == obstacles.length - 1) {
			return 0;
		}
		if (dp[path][i] != Integer.MAX_VALUE) {
			return dp[path][i];
		}
		int minSS = Integer.MAX_VALUE;
		if (obstacles[i + 1] != path) {
			minSS = solveMem(obstacles,path,i + 1,dp);
		} 
		else {
			if (path - 2 == 1 && obstacles[i] != path - 2) {
				minSS = 1 + solveMem(obstacles,path - 2,i,dp);
			}
			if (path + 2 == 3 && obstacles[i] != path + 2) {
				minSS = Math.min(minSS,1 + solveMem(obstacles,path + 2,i,dp));
			}
			if (path - 1 >= 1 && obstacles[i] != path - 1) {
				minSS = Math.min(minSS,1 + solveMem(obstacles,path - 1,i,dp));
			}
			if (path + 1 <= 3 && obstacles[i] != path + 1) {
				minSS = Math.min(minSS,1 + solveMem(obstacles,path + 1,i,dp));
			}
		}
		return dp[path][i] = minSS;
	}
	int solveSpaceOpt(int[] obstacles) {
		int[] curr = new int[4], prev = new int[4];
		for (int i = obstacles.length - 2; i >= 0; i--) {
			for (int path = 3; path >= 1; path--) {
				int minSS = Integer.MAX_VALUE;
				if (obstacles[i + 1] != path) {
					minSS = prev[path];
				} 
				else {
					if (path - 2 == 1 && obstacles[i] != path - 2) {
						minSS = 1 + prev[path - 2];
					}
					if (path + 2 == 3 && obstacles[i] != path + 2) {
						minSS = Math.min(minSS,1 + prev[path + 2]);
					}
					if (path - 1 >= 1 && obstacles[i] != path - 1) {
						minSS = Math.min(minSS,1 + prev[path - 1]);
					}
					if (path + 1 <= 3 && obstacles[i] != path + 1) {
						minSS = Math.min(minSS,1 + prev[path + 1]);
					}
				}
				curr[path] = minSS;
			}
			for (int j = 0; j < curr.length; j++) {
				prev[j] = curr[j];
			}
		}
		return curr[2];
	}
	int solveTab(int[] obstacles, int[][] dp) {
		for (int i = obstacles.length - 2; i >= 0; i--) {
			for (int path = 3; path >= 1; path--) {
				int minSS = Integer.MAX_VALUE;
				if (obstacles[i + 1] != path) {
					minSS = dp[path][i + 1];
				} 
				else {
					if (path - 2 == 1 && obstacles[i] != path - 2) {
						minSS = 1 + dp[path - 2][i + 1];
					}
					if (path + 2 == 3 && obstacles[i] != path + 2) {
						minSS = Math.min(minSS,1 + dp[path + 2][i + 1]);
					}
					if (path - 1 >= 1 && obstacles[i] != path - 1) {
						minSS = Math.min(minSS,1 + dp[path - 1][i + 1]);
					}
					if (path + 1 <= 3 && obstacles[i] != path + 1) {
						minSS = Math.min(minSS,1 + dp[path + 1][i + 1]);
					}
				}
				dp[path][i] = minSS;
			}
		}
		return dp[2][0];
	}
}