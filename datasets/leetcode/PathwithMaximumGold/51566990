class Solution {
	int max = 0;
	int sum = 0;
	int getMaximumGold(int[][] grid) {
		int n = grid.length;
		if (n == 0) {
			return 0;
		}
		int m = grid[0].length;
		boolean[][] visited = new boolean[n][m];
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < m; j++) {
				sum = 0;
				if (grid[i][j] != 0 && !visited[i][j]) {
					max = Math.max(max,getPath(grid,i,j,visited));
				}
			}
		}
		return max;
	}
	int getPath(int[][] grid, int i, int j, boolean[][] visited) {
		if (i < 0 || j < 0 || i > grid.length - 1 || j > grid[0].length - 1 || visited[i][j] || grid[i][j] == 0) {
			return 0;
		}
		visited[i][j] = true;
		sum += grid[i][j];
		int left = getPath(grid,i,j - 1,visited);
		int right = getPath(grid,i,j + 1,visited);
		int down = getPath(grid,i - 1,j,visited);
		int top = getPath(grid,i + 1,j,visited);
		visited[i][j] = false;
		return Math.max(left,Math.max(right,Math.max(top,down))) + grid[i][j];
	}
}