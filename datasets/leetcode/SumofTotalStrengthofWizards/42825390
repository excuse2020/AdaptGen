class Solution {
	int totalStrength(int[] a) {
		long MOD = 1000000007;
		int n = a.length;
		long[] prefix = new long[n + 1];
		long[] prefix_sum = new long[n + 2];
		for (int i = 0; i < n; i++) {
			prefix[i + 1] = (prefix[i] + a[i]) % MOD;
		}
		for (int i = 0; i <= n; i++) {
			prefix_sum[i + 1] = (prefix_sum[i] + prefix[i]) % MOD;
		}
		Stack<Integer> st = new Stack<>();
		int[] left = new int[n];
		int[] right = new int[n];
		Arrays.fill(left,-1);
		for (int i = 0; i < n; i++) {
			while (!st.empty() && a[st.peek()] >= a[i]) {
				st.pop();
			}
			if (st.empty()) {
				left[i] = -1;
			} 
			else {
				left[i] = st.peek();
			}
			st.push(i);
		}
		st.clear();
		Arrays.fill(right,n);
		for (int i = n - 1; i >= 0; i--) {
			while (!st.empty() && a[st.peek()] > a[i]) {
				st.pop();
			}
			if (st.empty()) {
				right[i] = n;
			} 
			else {
				right[i] = st.peek();
			}
			st.push(i);
		}
		long res = 0;
		for (int i = 0; i < n; i++) {
			int l = left[i];
			int r = right[i];
			long part1 = (prefix_sum[r + 1] - prefix_sum[i + 1]) * (i - l) % MOD;
			long part2 = (prefix_sum[i + 1] - prefix_sum[l + 1]) * (r - i) % MOD;
			long product = (part1 - part2) % MOD;
			if (product < 0) {
				product += MOD;
			}
			res = (res + (product * a[i]) % MOD) % MOD;
		}
		if (res < 0) {
			res += MOD;
		}
		return (int) (res % MOD);
	}
}