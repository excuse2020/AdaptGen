class Solution {
	ArrayList<ArrayList<Integer>> Print(TreeNode pRoot) {
		ArrayList<ArrayList<Integer>> list = new ArrayList<>();
		Queue<TreeNode> queue1 = new LinkedList<>();
		Queue<TreeNode> queue2 = new LinkedList<>();
		if (pRoot == null) {
			return list;
		}
		int depth = 1;
		queue1.add(pRoot);
		while (queue1.size() != 0 || queue2.size() != 0) {
			ArrayList<Integer> item = new ArrayList<>();
			if (depth % 2 == 1) {
				while (queue1.size() != 0) {
					TreeNode node = queue1.poll();
					if (node.left != null) {
						queue2.add(node.left);
					}
					if (node.right != null) {
						queue2.add(node.right);
					}
					item.add(node.val);
				}
			} 
			else {
				while (queue2.size() != 0) {
					TreeNode node = queue2.poll();
					if (node.left != null) {
						queue1.add(node.left);
					}
					if (node.right != null) {
						queue1.add(node.right);
					}
					item.add(node.val);
				}
			}
			list.add(item);
			depth++;
		}
		return list;
	}
}