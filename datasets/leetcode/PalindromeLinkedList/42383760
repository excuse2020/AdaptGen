class Solution {
	ListNode copy(ListNode node) {
		ListNode newHead = new ListNode(node.val);
		ListNode current = newHead;
		node = node.next;
		while (node != null) {
			current.next = new ListNode(node.val);
			node = node.next;
			current = current.next;
		}
		return newHead;
	}
	boolean isPalindrome(ListNode head) {
		ListNode reverse = reverse(copy(head));
		while (head != null && reverse != null) {
			if (head.val != reverse.val) {
				return false;
			}
			head = head.next;
			reverse = reverse.next;
		}
		return true;
	}
	ListNode reverse(ListNode node) {
		ListNode prev = null;
		ListNode current = node;
		while (current != null) {
			ListNode nextNode = current.next;
			current.next = prev;
			prev = current;
			current = nextNode;
		}
		return prev;
	}
}