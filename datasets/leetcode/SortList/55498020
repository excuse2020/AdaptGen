class Solution {
	ListNode merge(ListNode NodeA, ListNode NodeB) {
		if (NodeA == null) {
			return NodeB;
		}
		if (NodeB == null) {
			return NodeA;
		}
		ListNode head = new ListNode(0);
		ListNode dummy = head;
		while (NodeA != null && NodeB != null) {
			if (NodeA.val <= NodeB.val) {
				dummy.next = NodeA;
				NodeA = NodeA.next;
			} 
			else {
				dummy.next = NodeB;
				NodeB = NodeB.next;
			}
			dummy = dummy.next;
		}
		if (NodeA != null) {
			dummy.next = NodeA;
		} 
		else {
			dummy.next = NodeB;
		}
		return head.next;
	}
	ListNode mid(ListNode head) {
		ListNode slow = head;
		ListNode fast = head;
		while (fast != null && fast.next != null && fast.next.next != null) {
			slow = slow.next;
			fast = fast.next.next;
		}
		return slow;
	}
	ListNode sortList(ListNode head) {
		if (head == null || head.next == null) {
			return head;
		}
		ListNode midelem = mid(head);
		ListNode right = midelem.next;
		midelem.next = null;
		ListNode left = head;
		left = sortList(left);
		right = sortList(right);
		ListNode ans = merge(left,right);
		return ans;
	}
}