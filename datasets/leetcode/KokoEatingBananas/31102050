class Solution {
	boolean ifpossible(int mid, int crates, int h) {
		int time = 0;
		for (int i = 0; i < crates.length; i++) {
			time += (int) Math.ceil(crates[i] * 1.0 / mid);
		}
		return time <= h;
	}
	int minEatingSpeed(int[] piles, int h) {
		int max = 0;
		for (int i = 0; i < piles.length; i++) {
			max = Math.max(max,piles[i]);
		}
		if (h == piles.length) {
			return max;
		}
		int low = 0;
		int high = max;
		int speed = Integer.MAX_VALUE;
		while (low <= high) {
			int mid = low + (high - low) / 2;
			if (ifpossible(mid,piles,h)) {
				speed = mid;
				high = mid - 1;
			} 
			else {
				low = mid + 1;
			}
		}
		return speed;
	}
}