class Solution {
	int[][] grid;
	int m;
	int maxGold = 0;
	int n;
	void dfs(int i, int j, int sum) {
		if (i >= n || i < 0) {
			return;
		}
		if (j >= m || j < 0) {
			return;
		}
		if (grid[i][j] == 0) {
			return;
		}
		int val = grid[i][j];
		grid[i][j] = 0;
		sum += val;
		maxGold = Math.max(maxGold,sum);
		dfs(i + 1,j,sum);
		dfs(i - 1,j,sum);
		dfs(i,j + 1,sum);
		dfs(i,j - 1,sum);
		grid[i][j] = val;
	}
	int getMaximumGold(int[][] grid) {
		n = grid.length;
		m = grid[0].length;
		this.grid = grid;
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < m; j++) {
				if (grid[i][j] != 0) {
					dfs(i,j,0);
				}
			}
		}
		return maxGold;
	}
}