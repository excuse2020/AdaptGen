class Solution {
	boolean check(List<Integer> mac, List<Integer> stock, List<Integer> cost, int bud, long req) {
		int n = mac.size();
		long tB = 0;
		for (int i = 0; i < n; i++) {
			int ele = mac.get(i);
			int st = stock.get(i);
			int cc = cost.get(i);
			long zz = ((long) req * (long) ele) - st;
			if (zz > 0) {
				tB += ((long) cc * (long) zz);
			}
		}
		if (req == 2) {
			System.out.println(tB);
		}
		if (tB <= bud) {
			return true;
		}
		return false;
	}
	int maxNumberOfAlloys(int n, int k, int bud, List<List<Integer>> com, List<Integer> stock, List<Integer> cost) {
		int ans = Integer.MIN_VALUE;
		for (List<Integer> mac: com) {	
			long l = 0, r = (long) 1e9;
			while (l <= r) {
				long mid = l + ((r - l) / 2);
				if (check(mac,stock,cost,bud,mid)) {
					ans = Math.max(ans,(int) mid);
					l = mid + 1;
				} 
				else {
					r = mid - 1;
				}
			}
		}
		return ans;
	}
}