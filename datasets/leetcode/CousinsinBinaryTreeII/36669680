class Solution {
	HashMap<Integer, Integer> map = new HashMap<>();
	void dfs1(TreeNode root, int depth) {
		if (root == null) {
			return;
		}
		map.put(depth,map.getOrDefault(depth,0) + root.val);
		dfs1(root.left,depth + 1);
		dfs1(root.right,depth + 1);
	}
	void dfs2(TreeNode root, int depth, int sibling) {
		if (root == null) {
			return;
		}
		root.val = map.get(depth) - sibling;
		sibling = (root.left == null ? 0 : root.left.val) + (root.right == null ? 0 : root.right.val);
		dfs2(root.left,depth + 1,sibling);
		dfs2(root.right,depth + 1,sibling);
	}
	TreeNode replaceValueInTree(TreeNode root) {
		if (root.left == null && root.right == null) {
			return new TreeNode(0);
		}
		TreeNode nroot = null;
		dfs1(root,0);
		dfs2(root,0,root.val);
		return root;
	}
}