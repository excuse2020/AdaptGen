class Solution {
	int longestSubarray(int[] nums, int limit) {
		PriorityQueue<Integer> max = new PriorityQueue<>(Collections.reverseOrder());
		PriorityQueue<Integer> min = new PriorityQueue<>();
		int i = 0, j = 0, ans = 0;
		while (j < nums.length) {
			max.add(nums[j]);
			min.add(nums[j]);
			if (Math.abs(max.peek() - min.peek()) <= limit) {
				ans = Math.max(ans,j - i + 1);
				j++;
			} 
			else if (Math.abs(max.peek() - min.peek()) > limit) {
				while (Math.abs(max.peek() - min.peek()) > limit) {
					max.remove(nums[i]);
					min.remove(nums[i]);
					i++;
				}
				j++;
			}
		}
		return ans;
	}
}