class Solution {
	void dfs(int i, int j, int[][] grid, int[] a) {
		if (i < 0 || j < 0 || i >= grid.length || j >= grid[0].length || grid[i][j] == 0) {
			return;
		}
		a[0] += grid[i][j];
		grid[i][j] = 0;
		dfs(i + 1,j,grid,a);
		dfs(i - 1,j,grid,a);
		dfs(i,j + 1,grid,a);
		dfs(i,j - 1,grid,a);
	}
	int findMaxFish(int[][] grid) {
		int max = 0;
		for (int i = 0; i < grid.length; i++) {
			for (int j = 0; j < grid[0].length; j++) {
				if (grid[i][j] != 0) {
					int[] a = new int[1];
					dfs(i,j,grid,a);
					max = Math.max(max,a[0]);
				}
			}
		}
		return max;
	}
}