class Solution {
	int[] countVisitedNodes(List<Integer> edges) {
		int[] ans = new int[edges.size()];
		int[] steps = new int[edges.size()];
		for (int i = 0; i < edges.size(); i++) {
			dfs(i,edges,steps,1,ans);
		}
		return ans;
	}
	int dfs(int node, List<Integer> edges, int[] steps, int step, int[] ans) {
		if (ans[node] != 0) {
			return ans[node];
		}
		if (steps[node] != 0) {
			ans[node] = step - steps[node];
		}
		steps[node] = step++;
		int currentAns = dfs(edges.get(node),edges,steps,step,ans);
		if (ans[node] == 0) {
			ans[node] = 1 + currentAns;
		}
		return ans[node];
	}
}