class Solution {
	boolean validateBinaryTreeNodes(int n, int[] leftChild, int[] rightChild) {
		int[] inDegree = new int[n];
		for (int i = 0; i < n; i++) {
			if (leftChild[i] != -1) {
				if (inDegree[leftChild[i]] == 1) {
					return false;
				}
				inDegree[leftChild[i]]++;
			}
			if (rightChild[i] != -1) {
				if (inDegree[rightChild[i]] == 1) {
					return false;
				}
				inDegree[rightChild[i]]++;
			}
		}
		int rootCount = 0;
		int root = -1;
		for (int i = 0; i < n; i++) {
			if (inDegree[i] == 0) {
				rootCount++;
				root = i;
			}
			if (rootCount > 1) {
				return false;
			}
		}
		if (root == -1) {
			return false;
		}
		int[] visited = new int[n];
		Queue<Integer> queue = new LinkedList<>();
		queue.add(root);
		while (!queue.isEmpty()) {
			int node = queue.poll();
			visited[node] = 1;
			if (leftChild[node] != -1) {
				if (visited[leftChild[node]] == 1) {
					return false;
				}
				queue.add(leftChild[node]);
			}
			if (rightChild[node] != -1) {
				if (visited[rightChild[node]] == 1) {
					return false;
				}
				queue.add(rightChild[node]);
			}
		}
		for (int i = 0; i < n; i++) {
			if (visited[i] == 0) {
				return false;
			}
		}
		return true;
	}
}