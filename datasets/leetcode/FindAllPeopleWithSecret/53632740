class Solution {
	int find(int x, int[] parent) {
		if (parent[x] == x) {
			return x;
		}
		parent[x] = find(parent[x],parent);
		return parent[x];
	}
	List<Integer> findAllPeople(int n, int[][] meetings, int firstPerson) {
		List<Integer> output = new ArrayList<>();
		int lastMeeting = 0;
		for (int[] meeting: meetings) {	
			lastMeeting = Math.max(lastMeeting,meeting[2]);
		}
		List<List<int[]>> timeList = new ArrayList<>();
		for (int i = 0; i <= lastMeeting; i++) {
			timeList.add(new ArrayList());
		}
		for (int[] meeting: meetings) {	
			timeList.get(meeting[2]).add(new int{meeting[0], meeting[1]});
		}
		int parent = new int[n];
		for (int i = 0; i < parent.length; i++) {
			parent[i] = i;
		}
		parent[firstPerson] = 0;
		for (List<int[]> list: timeList) {	
			if (!list.isEmpty()) {
				operate(list,parent);
			}
		}
		for (int i = 0; i < parent.length; i++) {
			if (parent[i] == 0) {
				output.add(i);
			}
		}
		return output;
	}
	void operate(List<int[]> edges, int[] parent) {
		for (int[] edge: edges) {	
			int x = edge[0];
			int y = edge[1];
			union(x,y,parent);
		}
		for (int[] edge: edges) {	
			int x = edge[0];
			int y = edge[1];
			int x_parent = find(x,parent);
			int y_parent = find(y,parent);
			if (x_parent != 0) {
				parent[x] = x;
			}
			if (y_parent != 0) {
				parent[y] = y;
			}
		}
	}
	void union(int x, int y, int[] parent) {
		int x_parent = find(x,parent);
		int y_parent = find(y,parent);
		if (x_parent == y_parent) {
			return;
		}
		if (x_parent <= y_parent) {
			parent[y_parent] = x_parent;
		} 
		else {
			parent[x_parent] = y_parent;
		}
	}
}