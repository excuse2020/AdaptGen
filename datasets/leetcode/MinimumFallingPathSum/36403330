class Solution {
	int minFallingPathSum(int[][] matrix) {
		int n = matrix.length;
		int[][] dp = new int[n][n];
		dp[0][0] = matrix[0][0];
		for (int i = 1; i < n; i++) {
			dp[0][i] = matrix[0][i];
		}
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < n; j++) {
				if (i == 0) {
					continue;
				} 
				else if (j == 0) {
					dp[i][j] = matrix[i][j] + Math.min(dp[i - 1][j + 1],dp[i - 1][j]);
				} 
				else if (j == n - 1) {
					dp[i][j] = matrix[i][j] + Math.min(dp[i - 1][j - 1],dp[i - 1][j]);
				} 
				else {
					dp[i][j] = matrix[i][j] + Math.min(dp[i - 1][j + 1],Math.min(dp[i - 1][j - 1],dp[i - 1][j]));
				}
			}
		}
		int min = Integer.MAX_VALUE;
		for (int i = 0; i < n; i++) {
			min = Math.min(dp[n - 1][i],min);
		}
		return min;
	}
}