class Solution {
	int HOLE = 0, MOUSE_START = 1, CAT_START = 2;
	int MOUSE_TURN = 0, CAT_TURN = 1;
	int MOUSE_WIN = 1, CAT_WIN = 2, UNKNOWN = 0;
	int[][][] degrees;
	int[][] graph;
	int n;
	int[][][] results;
	int CatMouseGame(int[][] graph) {
		this.n = graph.length;
		this.graph = graph;
		this.degrees = new int[n][n][2];
		this.results = new int[n][n][2];
		for (int i = 0; i < n; i++) {
			for (int j = 1; j < n; j++) {
				degrees[i][j][MOUSE_TURN] = graph[i].length;
				degrees[i][j][CAT_TURN] = graph[j].length;
			}
		}
		for (int i = 0; i < n; i++) {
			for (int j: graph[HOLE]) {	
				degrees[i][j][CAT_TURN]--;
			}
		}
		Queue<int[]> queue = new ArrayDeque<int[]>();
		for (int i = 1; i < n; i++) {
			results[i][i][MOUSE_TURN] = CAT_WIN;
			results[i][i][CAT_TURN] = CAT_WIN;
			queue.offer(new int{i, i, MOUSE_TURN});
			queue.offer(new int{i, i, CAT_TURN});
		}
		for (int j = 1; j < n; j++) {
			results[0][j][MOUSE_TURN] = MOUSE_WIN;
			results[0][j][CAT_TURN] = MOUSE_WIN;
			queue.offer(new int{0, j, MOUSE_TURN});
			queue.offer(new int{0, j, CAT_TURN});
		}
		while (!queue.isEmpty()) {
			int[] state = queue.poll();
			int Mouse = state[0], Cat = state[1], turn = state[2];
			int result = results[Mouse][Cat][turn];
			List<int[]> prevStates = getPrevStates(Mouse,Cat,turn);
			for (int[] prevState: prevStates) {	
				int prevMouse = prevState[0], prevCat = prevState[1], prevTurn = prevState[2];
				if (results[prevMouse][prevCat][prevTurn] == UNKNOWN) {
					boolean winState = (result == MOUSE_WIN && prevTurn == MOUSE_TURN) || (result == CAT_WIN && prevTurn == CAT_TURN);
					if (winState) {
						results[prevMouse][prevCat][prevTurn] = result;
						queue.offer(new int{prevMouse, prevCat, prevTurn});
					} 
					else {
						degrees[prevMouse][prevCat][prevTurn]--;
						if (degrees[prevMouse][prevCat][prevTurn] == 0) {
							results[prevMouse][prevCat][prevTurn] = result;
							queue.offer(new int{prevMouse, prevCat, prevTurn});
						}
					}
				}
			}
		}
		return results[MOUSE_START][CAT_START][MOUSE_TURN];
	}
	List<int[]> getPrevStates(int Mouse, int Cat, int turn) {
		List<int[]> prevStates = new ArrayList<int[]>();
		int prevTurn = turn == MOUSE_TURN ? CAT_TURN : MOUSE_TURN;
		if (prevTurn == CAT_TURN) {
			for (int prevCat: graph[Cat]) {	
				if (prevCat != HOLE) {
					prevStates.add(new int{Mouse, prevCat, prevTurn});
				}
			}
		} 
		else {
			for (int prevMouse: graph[Mouse]) {	
				prevStates.add(new int{prevMouse, Cat, prevTurn});
			}
		}
		return prevStates;
	}
}