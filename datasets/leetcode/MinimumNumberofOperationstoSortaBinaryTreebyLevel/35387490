class Solution {
	void bfs(Queue<TreeNode> q, List<List<Integer>> levels, TreeNode root) {
		int curr_level = -1;
		q.offer(root);
		while (!q.isEmpty()) {
			int s = q.size();
			++curr_level;
			levels.add(new ArrayList<>());
			for (int i = 0; i < s; i++) {
				TreeNode node = q.poll();
				levels.get(curr_level).add(node.val);
				if (node.left != null) {
					q.offer(node.left);
				}
				if (node.right != null) {
					q.offer(node.right);
				}
			}
		}
	}
	int minOperations(List<List<Integer>> levels) {
		int ans = 0;
		for (List<Integer> li: levels) {	
			int s = li.size();
			int[] sorted = new int[s];
			for (int i = 0; i < s; i++) {
				sorted[i] = li.get(i);
			}
			Arrays.sort(sorted);
			Map<Integer, Integer> ind = new HashMap<>();
			for (int i = 0; i < s; i++) {
				ind.put(sorted[i],i);
			}
			for (int i = 0; i < s; i++) {
				if (sorted[i] != li.get(i)) {
					++ans;
					int j = ind.get(li.get(i));
					ind.put(li.get(i),i);
					ind.put(sorted[i],j);
					int t = sorted[i];
					sorted[i] = li.get(i);
					sorted[j] = t;
				}
			}
		}
		return ans;
	}
	int minimumOperations(TreeNode root) {
		List<List<Integer>> levels = new ArrayList<>();
		Queue<TreeNode> q = new LinkedList<>();
		bfs(q,levels,root);
		return minOperations(levels);
	}
}