class Solution {
	int[] countSubTrees(int n, int[][] edges, String labels) {
		HashMap<Character, Integer> mp = new HashMap<>();
		int answer = new int[n];
		int freq = new int[26];
		ArrayList<ArrayList<Integer>> list = new ArrayList<ArrayList<Integer>>();
		boolean visited = new boolean[n];
		for (int i = 0; i < n; i++) {
			list.add(new ArrayList<>());
		}
		for (int i = 0; i < edges.length; i++) {
			int a = edges[i][0];
			int b = edges[i][1];
			list.get(a).add(b);
			list.get(b).add(a);
		}
		visited[0] = true;
		dfs(list,0,visited,labels,answer);
		return answer;
	}
	int[] dfs(ArrayList<ArrayList<Integer>> list, int source, boolean[] visited, String labels, int[] answer) {
		int freq = new int[26];
		for (int i = 0; i < list.get(source).size(); i++) {
			if (!visited[list.get(source).get(i)]) {
				visited[list.get(source).get(i)] = true;
				int temp = dfs(list,list.get(source).get(i),visited,labels,answer);
				for (int j = 0; j < 26; j++) {
					freq[j] = freq[j] + temp[j];
				}
			}
		}
		char character = labels.charAt(source);
	}
}