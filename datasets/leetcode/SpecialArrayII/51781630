class Solution {
	boolean check(ArrayList<int[]> ranges, int[] qr, int n) {
		int l = 0;
		int r = ranges.size() - 1;
		int lowRange = qr[0];
		int highRange = qr[1];
		while (l <= r) {
			int mid = l + (r - l) / 2;
			int[] range = ranges.get(mid);
			int f = range[0];
			int s = range[1];
			if (f <= lowRange && s >= highRange) {
				return true;
			} 
			else if (s < lowRange) {
				l = mid + 1;
			} 
			else {
				r = mid - 1;
			}
		}
		return false;
	}
	boolean[] isArraySpecial(int[] arr, int[][] q) {
		int n = arr.length;
		int m = q.length;
		ArrayList<int[]> primes = new ArrayList<>();
		boolean newone = true;
		int[] temp = new int[2];
		for (int i = 0; i < n - 1; i++) {
			if (newone) {
				temp = new int[2];
				temp[0] = i;
				newone = false;
			}
			int f = arr[i], s = arr[i + 1];
			if ((f & 1) == (s & 1)) {
				temp[1] = i;
				primes.add(temp);
				newone = true;
			}
		}
		if (n != 1) {
			if ((arr[n - 1] & 1) == (arr[n - 2] & 1)) {
				temp = new int[2];
				temp[1] = n - 1;
				temp[0] = n - 1;
				primes.add(temp);
			} 
			else {
				temp[1] = n - 1;
				primes.add(temp);
			}
		} 
		else {
			temp = new int[2];
			temp[1] = n - 1;
			temp[0] = n - 1;
			primes.add(temp);
		}
		boolean ans = new boolean[m];
		int i = 0;
		for (int qr: q) {	
			ans[i++] = check(primes,qr,n);
		}
		return ans;
	}
}