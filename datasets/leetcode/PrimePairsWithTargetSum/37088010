class Solution {
	List<List<Integer>> findPrimePairs(int n) {
		List<List<Integer>> ans = new ArrayList<>();
		boolean[] primes = sieveOfEratosthenes(n);
		for (int i = 1; i <= n / 2; ++i) {
			if (primes[i] && primes[n - i]) {
				List<Integer> pair = new ArrayList<>();
				pair.add(i);
				pair.add(n - i);
				ans.add(pair);
			}
		}
		return ans;
	}
	boolean[] sieveOfEratosthenes(int n) {
		boolean[] primes = new boolean[n + 1];
		Arrays.fill(primes,true);
		primes[1] = false;
		for (int x = 2; x * x <= n; ++x) {
			if (primes[x]) {
				for (int y = x * x; y <= n; y += x) {
					primes[y] = false;
				}
			}
		}
		return primes;
	}
}