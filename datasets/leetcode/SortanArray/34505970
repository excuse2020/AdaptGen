class Solution {
	void merge(int[] nums, int left, int mid, int right) {
		int[] temp = new int[right - left + 1];
		int i = left, j = mid + 1, k = 0;
		while (i <= mid && j <= right) {
			if (nums[i] < nums[j]) {
				temp[k++] = nums[i++];
			} 
			else {
				temp[k++] = nums[j++];
			}
		}
		while (i <= mid) {
			temp[k++] = nums[i++];
		}
		while (j <= right) {
			temp[k++] = nums[j++];
		}
		for (int p = 0; p < temp.length; p++) {
			nums[left + p] = temp[p];
		}
	}
	void mergesort(int[] nums, int left, int right) {
		if (left < right) {
			int mid = (left + right) / 2;
			mergesort(nums,left,mid);
			mergesort(nums,mid + 1,right);
			merge(nums,left,mid,right);
		}
	}
	int[] sortArray(int[] nums) {
		if (nums == null || nums.length == 0) {
			return nums;
		}
		mergesort(nums,0,nums.length - 1);
		return nums;
	}
}