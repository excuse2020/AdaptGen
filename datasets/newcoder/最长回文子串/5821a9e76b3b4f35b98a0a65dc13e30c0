class Solution {
	int find(int left, int right, String A) {
		if (A.charAt(left) != A.charAt(right)) {
			return 0;
		}
		int size = 0;
		while (left >= 0 && right < A.length()) {
			if (A.charAt(left) != A.charAt(right)) {
				break;
			}
			size += (left == right ? 1 : 2);
			left--;
			right++;
		}
		return left == right ? 1 : size;
	}
	int findMaxSize(int index, String A) {
		int ret = find(index,index,A);
		if (index > 0) {
			ret = Math.max(ret,find(index - 1,index,A));
		}
		if (index < A.length() - 1) {
			ret = Math.max(ret,find(index,index + 1,A));
		}
		return ret;
	}
	int getLongestPalindrome(String A) {
		int ret = 0;
		for (int i = 0; i < A.length(); ++i) {
			ret = Math.max(ret,findMaxSize(i,A));
		}
		return ret;
	}
}