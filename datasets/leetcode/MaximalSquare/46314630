class Solution {
	int max = 0;
	int maximalSquare(char[][] matrix) {
		int[][] dp = new int[matrix.length + 1][matrix[0].length + 1];
		for (int i = 0; i <= matrix.length; i++) {
			dp[i][matrix[0].length] = 0;
		}
		for (int i = 0; i <= matrix[0].length; i++) {
			dp[matrix.length][i] = 0;
		}
		int i = matrix.length - 1;
		int j = matrix[0].length - 1;
		int right = dp[i][j + 1];
		int diagonal = dp[i + 1][j + 1];
		int down = dp[i + 1][j];
	}
	int solve(char[][] matrix, int i, int j) {
		if (i >= matrix.length || j >= matrix[0].length) {
			return 0;
		}
		int right = solve(matrix,i,j + 1);
		int diagonal = solve(matrix,i + 1,j + 1);
		int down = solve(matrix,i + 1,j);
	}
	int solvemem(char[][] matrix, int i, int j, int[][] dp) {
		if (i >= matrix.length || j >= matrix[0].length) {
			return 0;
		}
		if (dp[i][j] != -1) {
			return dp[i][j];
		}
		int right = solvemem(matrix,i,j + 1,dp);
		int diagonal = solvemem(matrix,i + 1,j + 1,dp);
		int down = solvemem(matrix,i + 1,j,dp);
	}
}