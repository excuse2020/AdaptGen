class Solution {
	long maximumSumOfHeights(List<Integer> maxHeights) {
		int n = maxHeights.size();
		Stack<Integer> st = new Stack<Integer>();
		long[] lsum = new long[n + 1];
		long[] rsum = new long[n + 1];
		int[] prev = new int[n];
		int[] next = new int[n];
		long ans = 0;
		for (int i = 0; i < n; i++) {
			while (st.size() != 0 && maxHeights.get(st.peek()) >= maxHeights.get(i)) {
				st.pop();
			}
			if (st.size() == 0) {
				prev[i] = -1;
			} 
			else {
				prev[i] = st.peek();
			}
			st.add(i);
		}
		for (int i = 0; i < n; i++) {
			lsum[i + 1] = (long) maxHeights.get(i) * (long) (i - prev[i]) + (long) lsum[prev[i] + 1];
		}
		st.clear();
		for (int i = n - 1; i >= 0; i--) {
			while (st.size() != 0 && maxHeights.get(st.peek()) >= maxHeights.get(i)) {
				st.pop();
			}
			if (st.size() == 0) {
				next[i] = n;
			} 
			else {
				next[i] = st.peek();
			}
			st.add(i);
		}
		for (int i = n - 1; i >= 0; i--) {
			rsum[i] = (long) maxHeights.get(i) * (long) (next[i] - i) + (long) rsum[next[i]];
		}
		for (int i = 1; i <= n; i++) {
			ans = Math.max(ans,(long) (((long) rsum[i - 1] + (long) lsum[i]) - (long) (maxHeights.get(i - 1))));
		}
		return ans;
	}
}