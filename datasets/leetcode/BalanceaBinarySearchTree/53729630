class Solution {
	TreeNode balanceBST(TreeNode root) {
		List<Integer> sortedelements = new ArrayList<>();
		inordertraversal(root,sortedelements);
		return build_bst(sortedelements,0,sortedelements.size() - 1);
	}
	TreeNode build_bst(List<Integer> sortedelements, int l, int r) {
		if (l > r) {
			return null;
		}
		int mid = l + (r - l) / 2;
		TreeNode node = new TreeNode(sortedelements.get(mid));
		node.left = build_bst(sortedelements,l,mid - 1);
		node.right = build_bst(sortedelements,mid + 1,r);
		return node;
	}
	void inordertraversal(TreeNode node, List<Integer> sortedelements) {
		if (node == null) {
			return;
		}
		inordertraversal(node.left,sortedelements);
		sortedelements.add(node.val);
		inordertraversal(node.right,sortedelements);
	}
}