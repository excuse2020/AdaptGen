class Solution {
	int[] nsE(int[] arr) {
		int n = arr.length;
		int[] nse = new int[n];
		Stack<Integer> st = new Stack<>();
		for (int i = n - 1; i >= 0; i--) {
			while (!st.isEmpty() && arr[st.peek()] >= arr[i]) {
				st.pop();
			}
			nse[i] = st.isEmpty() ? n : st.peek();
			st.push(i);
		}
		return nse;
	}
	int[] psEE(int[] arr) {
		int n = arr.length;
		int[] pse = new int[n];
		Stack<Integer> st = new Stack<>();
		for (int i = 0; i <= n - 1; i++) {
			while (!st.isEmpty() && arr[st.peek()] > arr[i]) {
				st.pop();
			}
			if (!st.isEmpty()) {
				pse[i] = st.peek();
			} 
			else {
				pse[i] = -1;
			}
			st.push(i);
		}
		return pse;
	}
	int sumSubarrayMins(int[] arr) {
		int[] nse = nsE(arr);
		int[] pse = psEE(arr);
		long total = 0;
		int mod = (int) (1e9 + 7);
		for (int i = 0; i < arr.length; i++) {
			long left = i - pse[i];
			long right = nse[i] - i;
			total = (total + (right * left) % mod) % mod;
		}
		return (int) total;
	}
}