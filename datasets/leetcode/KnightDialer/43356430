class Solution {
	int max = (int) 1e9 + 7;
	int knightDialer(int n) {
		Long M = new Long[n + 1][4][3];
		long s = 0;
		for (int i = 0; i < 4; i++) {
			for (int j = 0; j < 3; j++) {
				s = (s + paths(M,i,j,n)) % max;
			}
		}
		return (int) s;
	}
	long paths(Long[][][] M, int i, int j, int n) {
		if (i < 0 || j < 0 || i >= 4 || j >= 3 || (i == 3 && j != 1)) {
			return 0;
		}
		if (n == 1) {
			return 1;
		}
		if (M[n][i][j] != null) {
			return M[n][i][j];
		}
		M[n][i][j] = paths(M,i + 2,j + 1,n - 1) % max + paths(M,i + 2,j - 1,n - 1) % max + paths(M,i - 2,j + 1,n - 1) % max + paths(M,i - 2,j - 1,n - 1) % max + paths(M,i - 1,j + 2,n - 1) % max + paths(M,i + 1,j + 2,n - 1) % max + paths(M,i - 1,j - 2,n - 1) % max + paths(M,i + 1,j - 2,n - 1) % max;
		return M[n][i][j];
	}
}