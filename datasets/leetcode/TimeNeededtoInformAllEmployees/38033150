class Solution {
	void adjacency(int n, int[] manager, List<List<Integer>> adj) {
		for (int i = 0; i < n; i++) {
			adj.add(new ArrayList<>());
		}
		for (int i = 0; i < manager.length; i++) {
			if (manager[i] != -1) {
				adj.get(manager[i]).add(i);
			}
		}
	}
	int numOfMinutes(int n, int headId, int[] manager, int[] informTime) {
		List<List<Integer>> adj = new ArrayList<>();
		adjacency(n,manager,adj);
		int totalTime = -0;
		boolean[] isInformed = new boolean[n];
		Queue<Pair<Integer, Integer>> q = new LinkedList<>();
		q.offer(new Pair(headId, informTime[headId]));
		isInformed[headId] = true;
		while (!q.isEmpty()) {
			int batchSize = q.size();
			for (int i = 0; i < batchSize; i++) {
				Pair<Integer, Integer> curr = q.poll();
				if (totalTime < curr.getValue()) {
					totalTime = curr.getValue();
				}
				for (int e: adj.get(curr.getKey())) {	
					if (!isInformed[e]) {
						q.offer(new Pair(e, curr.getValue() + informTime[e]));
						isInformed[e] = true;
					}
				}
			}
		}
		return totalTime;
	}
}