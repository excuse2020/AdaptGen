class Solution {
	String removeDuplicates(String s, int k) {
		if (s == null || s.length() < k || k == 1) {
			return s;
		}
		Deque<Pair<Character, Integer>> dq = new ArrayDeque<>();
		for (var ch: s.toCharArray()) {	
			if (dq.isEmpty() || dq.peekLast().getKey() != ch) {
				dq.offerLast(new Pair<>(ch, 1));
			} 
			else {
				Pair<Character, Integer> p = new Pair<>(dq.peekLast().getKey(), (dq.pollLast().getValue() + 1) % k);
				if (p.getValue() > 0) {
					dq.offerLast(p);
				}
			}
		}
		StringBuilder sb = new StringBuilder();
		for (var p: dq) {	
			sb.append(Character.toString(p.getKey()).repeat(p.getValue()));
		}
		return sb.toString();
	}
}