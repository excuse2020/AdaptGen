class Solution {
	boolean isCompleteTripHelper(int[] time, int totalTrips, long curTime) {
		long trips = 0;
		for (int t: time) {	
			trips += curTime / t;
		}
		return trips >= totalTrips;
	}
	long minimumTime(int[] time, int totalTrips) {
		long left = 0;
		long right = 0;
		for (int t: time) {	
			right = Math.max(right,t);
		}
		right *= totalTrips;
		while (left < right) {
			long mid = (left + right) / 2;
			int currTrips = 0;
			if (isCompleteTripHelper(time,totalTrips,mid)) {
				right = mid;
			} 
			else {
				left = mid + 1;
			}
		}
		return (left + right) / 2;
	}
}