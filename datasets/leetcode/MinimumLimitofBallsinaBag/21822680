class Solution {
	int findOperations(int src, int dest) {
		return (src - 1) / dest;
	}
	boolean isPossible(int mid, int[] nums, int maxOperations) {
		int operations = 0;
		for (int i = 0; i < nums.length; i++) {
			operations = operations + findOperations(nums[i],mid);
		}
		return operations <= maxOperations;
	}
	int minimumSize(int[] nums, int maxOperations) {
		int low = 1, high = Integer.MIN_VALUE;
		for (int i = 0; i < nums.length; i++) {
			high = Math.max(nums[i],high);
		}
		int ans = 0;
		while (low <= high) {
			int mid = (low + high) / 2;
			if (isPossible(mid,nums,maxOperations)) {
				ans = mid;
				high = mid - 1;
			} 
			else {
				low = mid + 1;
			}
		}
		return ans;
	}
}