class Solution {
	int deleteGreatestValue(int[][] grid) {
		List<PriorityQueue<Integer>> heaps = new LinkedList<>();
		for (int[] row: grid) {	
			PriorityQueue<Integer> heap = new PriorityQueue<>(Comparator.reverseOrder());
			for (int n: row) {	
				heap.offer(n);
			}
			heaps.add(heap);
		}
		int result = 0;
		PriorityQueue<Integer> heap = new PriorityQueue<>(Comparator.reverseOrder());
		for (int j = 0; j < grid[0].length; j++) {
			for (int i = 0; i < grid.length; i++) {
				int temp = heaps.get(i).poll();
				heap.add(temp);
			}
			int t2 = heap.poll();
			result += t2;
			heap.clear();
		}
		return result;
	}
}