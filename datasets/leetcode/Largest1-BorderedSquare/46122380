class Solution {
	int largest1BorderedSquare(int[][] grid) {
		if (grid == null || grid.length == 0) {
			return 0;
		}
		int[][][] dp = new int[grid.length + 1][grid[0].length + 1][2];
		int max = 0;
		for (int i = 0; i < grid.length; i++) {
			for (int j = 0; j < grid[0].length; j++) {
				if (grid[i][j] == 1) {
					dp[i + 1][j + 1][0] = dp[i][j + 1][0] + 1;
					dp[i + 1][j + 1][1] = dp[i + 1][j][1] + 1;
					int l = Math.min(dp[i + 1][j + 1][0],dp[i + 1][j + 1][1]);
					for (int k = l; k > max; k--) {
						int len = Math.min(dp[i + 1 - k + 1][j + 1][1],dp[i + 1][j + 1 - k + 1][0]);
						if (len >= k) {
							max = Math.max(max,k);
						}
					}
				} 
				else {
					dp[i + 1][j + 1][0] = 0;
					dp[i + 1][j + 1][1] = 0;
				}
			}
		}
		return max * max;
	}
}