class Solution {
	boolean dfs(TreeNode root, int target, StringBuilder sb) {
		if (root == null) {
			return false;
		}
		if (root.val == target) {
			return true;
		}
		if (dfs(root.left,target,sb)) {
			sb.append("L");
		} 
		else if (dfs(root.right,target,sb)) {
			sb.append("R");
		}
		return sb.length() > 0;
	}
	String getDirections(TreeNode root, int startValue, int destValue) {
		StringBuilder sb = new StringBuilder();
		StringBuilder db = new StringBuilder();
		dfs(root,startValue,sb);
		dfs(root,destValue,db);
		int i = 0;
		int j = Math.min(sb.length(),db.length());
		while (i < j && sb.charAt(sb.length() - i) == db.charAt(db.length() - i)) {
			i++;
		}
		String s = "U".repeat(sb.length() - i);
		String t = db.reverse().toString().substring(i);
		return s + t;
	}
}