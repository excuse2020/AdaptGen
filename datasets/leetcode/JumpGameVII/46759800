class Solution {
	boolean anReach(String s, int min, int max) {
		int len = s.length() - 1;
		int left = 0;
		int right = 0;
		int farmost = 0;
		Queue<Integer> que = new LinkedList<>();
		que.add(0);
		int val = que.remove();
		if (val == len) {
			return true;
		}
		left = Math.max(val + min,farmost);
		right = Math.min(val + max,len);
		farmost = right + 1;
		int i = left;
	}
	boolean canReach(String s, int minJump, int maxJump) {
		int n = s.length();
		int left = 0, right = 0, farthest = 0;
		boolean[] check = new boolean[n];
		check[0] = true;
		int i = 0;
		if (!check[i]) {
			continue;
		}
		if (i == n - 1) {
			return true;
		}
		left = Math.max(farthest,i + minJump);
		right = Math.min(n - 1,i + maxJump);
		int j = left;
	}
}