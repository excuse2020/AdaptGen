class Solution {
	int getMinWays(int n) {
		if (n == 1) {
			return -1000;
		}
		if (n % 3 == 0) {
			return n / 3;
		} 
		else if (n % 3 == 2) {
			return (n - 2) / 3 + 1;
		} 
		else {
			return (n - 4) / 3 + 2;
		}
	}
	int minimumRounds(int[] tasks) {
		int count = 0;
		HashMap<Integer, Integer> map = new HashMap();
		for (int i = 0; i < tasks.length; i++) {
			if (map.containsKey(tasks[i])) {
				map.put(tasks[i],map.get(tasks[i]) + 1);
			} 
			else {
				map.put(tasks[i],1);
			}
		}
		for (int a: map.keySet()) {	
			count = count + getMinWays(map.get(a));
		}
		return count >= 0 ? count : -1;
	}
}