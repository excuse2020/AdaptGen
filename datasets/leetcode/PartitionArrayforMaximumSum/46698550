class Solution {
	int maxSumAfterPartitioning(int[] arr, int k) {
		int dp = new int[arr.length];
		Arrays.fill(dp,-1);
		return rec(arr,k,0,dp);
	}
	int rec(int[] arr, int k, int i, int[] dp) {
		if (i >= arr.length) {
			return 0;
		}
		if (dp[i] != -1) {
			return dp[i];
		}
		int max = 0;
		int ans = 0;
		for (int j = 1; j <= k; j++) {
			if (i + j - 1 < arr.length) {
				max = Math.max(max,arr[i + j - 1]);
				ans = Math.max(ans,j * max + rec(arr,k,i + j,dp));
			}
		}
		return dp[i] = ans;
	}
}