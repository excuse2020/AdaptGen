class Solution {
	List<TreeNode> allPossibleFBT(int n) {
		List<TreeNode> list = new ArrayList<>();
		if (n % 2 == 0) {
			return list;
		}
		if (n <= 0) {
			return list;
		}
		if (n == 1) {
			list.add(new TreeNode(0));
			return list;
		}
		n--;
		for (int i = 1; i <= n; i += 2) {
			List<TreeNode> allLeftSubTrees = allPossibleFBT(i);
			List<TreeNode> allRightSubTrees = allPossibleFBT(n - i);
			for (TreeNode lNode: allLeftSubTrees) {	
				for (TreeNode rNode: allRightSubTrees) {	
					TreeNode node = new TreeNode(0);
					node.left = lNode;
					node.right = rNode;
					list.add(node);
				}
			}
		}
		return list;
	}
}