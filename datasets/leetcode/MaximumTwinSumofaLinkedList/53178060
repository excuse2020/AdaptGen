class Solution {
	int pairSum(ListNode head) {
		ListNode slow = head;
		ListNode fast = head;
		while (fast.next != null && fast.next.next != null) {
			slow = slow.next;
			fast = fast.next.next;
		}
		ListNode leftMid = slow;
		ListNode previous = null;
		ListNode current = leftMid.next;
		while (current != null) {
			ListNode next = current.next;
			current.next = previous;
			previous = current;
			current = next;
		}
		leftMid.next = previous;
		int maxTwinSum = 0;
		ListNode first = head;
		ListNode second = leftMid.next;
		while (second != null) {
			maxTwinSum = Math.max(maxTwinSum,first.val + second.val);
			first = first.next;
			second = second.next;
		}
		return maxTwinSum;
	}
}