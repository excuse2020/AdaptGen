class Solution {
	int nodeId, size;
	void dfs(int x, int[][] graph, boolean[] vis, boolean[] isInit) {
		vis[x] = true;
		++size;
		if (nodeId > -2 && isInit[x]) {
			nodeId = nodeId == -1 ? x : -2;
		}
		for (int y = 0; y < graph[x].length; ++y) {
			if (graph[x][y] == 1 && !vis[y]) {
				dfs(y,graph,vis,isInit);
			}
		}
	}
	int minMalwareSpread(int[][] graph, int[] initial) {
		int n = graph.length;
		boolean[] vis = new boolean[n];
		boolean[] isInit = new boolean[n];
		int mn = Integer.MAX_VALUE;
		for (int x: initial) {	
			isInit[x] = true;
			mn = Math.min(mn,x);
		}
		int ans = -1;
		int maxSize = 0;
		for (int x: initial) {	
			if (vis[x]) {
				continue;
			}
			nodeId = -1;
			size = 0;
			dfs(x,graph,vis,isInit);
			if (nodeId >= 0 && (size > maxSize || size == maxSize && nodeId < ans)) {
				ans = nodeId;
				maxSize = size;
			}
		}
		return ans < 0 ? mn : ans;
	}
}