class Solution {
	void backtrack(int start, List<Integer> path, int k, int n, List<List<Integer>> result) {
		if (path.size() == k && n == 0) {
			result.add(new ArrayList<>(path));
			return;
		}
		for (int i = start; i <= 9; i++) {
			if (i > n) {
				continue;
			}
			path.add(i);
			backtrack(i + 1,path,k,n - i,result);
			path.remove(path.size() - 1);
		}
	}
	List<List<Integer>> combinationSum3(int k, int n) {
		List<List<Integer>> result = new ArrayList<>();
		backtrack(1,new ArrayList<>(),k,n,result);
		return result;
	}
}