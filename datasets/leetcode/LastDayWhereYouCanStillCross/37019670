class Solution {
	boolean helper(boolean[][] dp, int row, int col) {
		if (!dp[row][col]) {
			return false;
		}
		if (row <= 1) {
			return dp[row][col];
		}
		dp[row][col] = false;
		return helper(dp,row + 1,col) || helper(dp,row - 1,col);
	}
	boolean isPossible(int row, int col, int day, int[][] cells) {
		boolean[][] grid = new boolean[row + 2][col + 2];
		for (int i = 1; i < row + 1; i++) {
			for (int j = 1; j < col + 1; j++) {
				grid[i][j] = true;
			}
		}
		for (int i = 0; i < day; i++) {
			grid[cells[i][0]][cells[i][1]] = false;
		}
		for (int i = 1; i < col + 1; i++) {
			if (grid[row][i]) {
				grid[row][i] = false;
				if (helper(grid,row - 1,i)) {
					return true;
				}
			}
		}
		return false;
	}
	int latestDayToCross(int row, int col, int[][] cells) {
		int left = 0, right = cells.length, max = 0;
		while (left <= right) {
			int mid = left + (right - left) / 2;
			if (isPossible(row,col,mid,cells)) {
				max = mid;
				left = mid + 1;
			} 
			else {
				right = mid - 1;
			}
		}
		return max;
	}
}