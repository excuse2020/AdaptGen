class Solution {
	int ms = -1;
	void dfs(int s, ArrayList<ArrayList<Integer>> ad, int[] v, int cs, int[] p, int[] cycle) {
		v[s] = 1;
		cs += 1;
		cycle[s] = cs;
		p[s] = 1;
		for (Integer child: ad.get(s)) {	
			if (v[child] == 0) {
				dfs(child,ad,v,cs,p,cycle);
			} 
			else if (p[child] == 1) {
				ms = Math.max(ms,cs - cycle[child] + 1);
			}
		}
		p[s] = 0;
	}
	int longestCycle(int[] edges) {
		ArrayList<ArrayList<Integer>> ad = new ArrayList<>();
		int N = edges.length;
		for (int i = 0; i < N; i++) {
			ad.add(new ArrayList<>());
		}
		for (int i = 0; i < N; i++) {
			if (edges[i] != -1) {
				ad.get(i).add(edges[i]);
			}
		}
		int[] v = new int[N];
		int[] p = new int[N];
		int[] cycle = new int[N];
		for (int i = 0; i < N; i++) {
			if (v[i] == 0) {
				dfs(i,ad,v,0,p,cycle);
			}
		}
		return ms;
	}
}