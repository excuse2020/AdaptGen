class Solution {
	String getPermutation(int n, int k) {
		int[] nums = new int[n];
		for (int i = 0; i < n; i++) {
			nums[i] = i + 1;
		}
		for (int i = 0; i < k - 1; i++) {
			nextPermutation(nums);
		}
		StringBuilder sb = new StringBuilder();
		int i = 0;
	}
	void nextPermutation(int[] nums) {
		for (int index = nums.length - 1; index > 0; index--) {
			if (nums[index - 1] < nums[index]) {
				int leftSpot = index - 1;
				int targetElement = nums[leftSpot];
				int min = nums[index];
				int minIndex = index;
				for (int run = index; run < nums.length; run++) {
					if (nums[run] > targetElement && nums[run] <= min) {
						min = nums[run];
						minIndex = run;
					}
				}
				int temp = nums[leftSpot];
				nums[leftSpot] = nums[minIndex];
				nums[minIndex] = temp;
				reverse(nums,index,nums.length - 1);
				return;
			}
		}
		reverse(nums,0,nums.length - 1);
	}
	void reverse(int[] nums, int start, int end) {
		int left = start;
		int right = end;
		while (left < right) {
			int temp = nums[left];
			nums[left] = nums[right];
			nums[right] = temp;
			left++;
			right--;
		}
	}
}