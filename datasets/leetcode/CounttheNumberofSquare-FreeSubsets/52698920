class Solution {
	int squareFreeSubsets(int[] nums) {
		SqureFree squreFree = new SqureFree();
		return squreFree.getSqureFreeSubsets(nums);
	}
}
class SqureFree {
	Integer dp;
	int mod = 1000000007;
	int nums;
	List<Integer> primes = List.of(2,3,5,7,11,13,17,19,23,29);
	int addAllPrimes(int mask, int number) {
		for (int i = 0; i < primes.size(); i++) {
			if (number % primes.get(i) == 0) {
				mask |= (1 << i);
			}
		}
		return mask;
	}
	int getSqureFreeSubsets(int nums) {
		this.nums = nums;
		dp = new Integer[2000][nums.length + 1];
		int ans = getSqureFreeSubsets(0,0);
		ans = handleOne(ans);
		return ans;
	}
	int getSqureFreeSubsets(int ci, int mask) {
		if (ci == nums.length) {
			return mask != 0 ? 1 : 0;
		}
		if (dp[mask][ci] != null) {
			return dp[mask][ci];
		}
		int ans = getSqureFreeSubsets(ci + 1,mask);
		if (!isTaken(mask,nums[ci]) && !isSqure(nums[ci])) {
			int newMask = addAllPrimes(mask,nums[ci]);
			ans = (ans + getSqureFreeSubsets(ci + 1,newMask)) % mod;
		}
		dp[mask][ci] = ans;
		return ans;
	}
	int handleOne(int ans) {
		for (int i = 0; i < nums.length; i++) {
			if (nums[i] == 1) {
				ans = ((ans * 2) % mod + 1) % mod;
			}
		}
		return ans;
	}
	boolean isSqure(int number) {
		if (number == 1) {
			return true;
		}
		for (int i = 2; i <= (int) Math.sqrt(number); i++) {
			if (number % (i * i) == 0) {
				return true;
			}
		}
		return false;
	}
	boolean isTaken(int mask, int number) {
		for (int i = 0; i < primes.size(); i++) {
			if ((mask & (1 << i)) != 0 && number % primes.get(i) == 0) {
				return true;
			}
		}
		return false;
	}
}