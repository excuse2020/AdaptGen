class Solution {
	boolean hasPath(char[][] matrix, String word) {
		if (matrix == null || matrix.length == 0 || matrix[0].length == 0 || word == null || word.length() == 0) {
			return false;
		}
		boolean flag = false;
		for (int i = 0; i < matrix.length; ++i) {
			for (int j = 0; j < matrix[0].length; ++j) {
				flag = isSubPath(matrix,word,i,j,0);
				if (flag) {
					return flag;
				}
			}
		}
		return flag;
	}
	boolean isSubPath(char[][] matrix, String word, int i, int j, int k) {
		if (i < 0 || i >= matrix.length || j < 0 || j >= matrix[0].length || matrix[i][j] != word.charAt(k)) {
			return false;
		}
		if (k == word.length() - 1 && word.charAt(k) == matrix[i][j]) {
			return true;
		}
		matrix[i][j] = '\0';
		boolean res = isSubPath(matrix,word,i + 1,j,k + 1) || isSubPath(matrix,word,i - 1,j,k + 1);
		matrix[i][j] = word.charAt(k);
		return res;
	}
}