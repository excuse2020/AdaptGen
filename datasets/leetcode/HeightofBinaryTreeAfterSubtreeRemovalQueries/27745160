class Solution {
	int[] h, l, maxH1, maxH2;
	int height(TreeNode root, int level) {
		if (root == null) {
			return -1;
		}
		int left = height(root.left,level + 1);
		int right = height(root.right,level + 1);
		h[root.val] = Math.max(left,right) + 1;
		l[root.val] = level;
		if (h[root.val] > maxH1[level]) {
			maxH2[level] = maxH1[level];
			maxH1[level] = h[root.val];
		} 
		else if (h[root.val] > maxH2[level]) {
			maxH2[level] = h[root.val];
		}
		return h[root.val];
	}
	int[] treeQueries(TreeNode root, int[] queries) {
		h = new int[100001];
		l = new int[100001];
		maxH1 = new int[100001];
		maxH2 = new int[100001];
		Arrays.fill(maxH2,-1);
		Arrays.fill(maxH1,-1);
		height(root,0);
		for (int i = 0; i < queries.length; i++) {
			int val = queries[i];
			int hh = h[val];
			int lev = l[val];
			int levMaxH1 = maxH1[lev];
			int levMaxH2 = maxH2[lev];
			if (levMaxH2 != -1) {
				if (hh == levMaxH1) {
					queries[i] = lev + levMaxH2;
				} 
				else {
					queries[i] = lev + levMaxH1;
				}
			} 
			else {
				queries[i] = lev - 1;
			}
		}
		return queries;
	}
}