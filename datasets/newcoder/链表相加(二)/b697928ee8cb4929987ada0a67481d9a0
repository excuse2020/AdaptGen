class Solution {
	ListNode add(ListNode head1, ListNode head2) {
		if (head1 == null) {
			return head2;
		}
		if (head2 == null) {
			return head1;
		}
		ListNode tmp1 = head1;
		ListNode tmp2 = head2;
		ListNode tail = head1;
		int jw = 0;
		boolean flag = true;
		while (head1 != null || head2 != null) {
			int l1 = head1 != null ? head1.val : 0;
			int l2 = head2 != null ? head2.val : 0;
			int tmp = l1 + l2;
			jw = 0;
			if (tmp > 9) {
				jw = 1;
			}
			tmp = tmp % 10;
			if (head1 != null) {
				tail = head1;
				flag = true;
				head1.val = tmp;
				head1 = head1.next;
			}
			if (head2 != null) {
				tail = head2;
				flag = false;
				head2.val = tmp;
				head2 = head2.next;
			}
		}
		if (jw > 0) {
			tail.next = new ListNode(1);
		}
		return flag ? tmp1 : tmp2;
	}
	ListNode addInList(ListNode head1, ListNode head2) {
		return reverse(add(reverse(head1),reverse(head2)));
	}
	ListNode reverse(ListNode head) {
		if (head == null) {
			return head;
		}
		ListNode l1 = head;
		ListNode l2 = head.next;
		while (l1 != null) {
			if (l2 == null) {
				head.next = null;
				return l1;
			}
			ListNode tmp = l2.next;
			l2.next = l1;
			l1 = l2;
			l2 = tmp;
		}
		return l1;
	}
}