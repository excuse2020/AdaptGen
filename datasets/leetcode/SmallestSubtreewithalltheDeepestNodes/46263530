class Solution {
	TreeNode ans = null;
	int findDeepestNodes(TreeNode root, int depth) {
		if (root == null) {
			return 0;
		}
		int leftDepth = findDeepestNodes(root.left,depth - 1);
		int rightDepth = findDeepestNodes(root.right,depth - 1);
		if (leftDepth == depth - 1 && rightDepth == depth - 1) {
			ans = root;
		}
		return Math.max(leftDepth,rightDepth) + 1;
	}
	int findDepth(TreeNode root) {
		if (root == null) {
			return 0;
		}
		return Math.max(findDepth(root.left),findDepth(root.right)) + 1;
	}
	TreeNode subtreeWithAllDeepest(TreeNode root) {
		if (root == null) {
			return null;
		}
		int depth = findDepth(root);
		findDeepestNodes(root,depth);
		return ans;
	}
}