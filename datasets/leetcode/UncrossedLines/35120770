class Solution {
	int helper(int[] nums, int idx, HashMap<Integer, TreeSet<Integer>> map, int[][] dp, int prev) {
		if (idx == nums.length) {
			return 0;
		}
		if (dp[idx][prev + 1] != -1) {
			return dp[idx][prev + 1];
		}
		int take = 0, not_take = 0;
		not_take = helper(nums,idx + 1,map,dp,prev);
		if (map.containsKey(nums[idx])) {
			Integer x = map.get(nums[idx]).ceiling(prev);
			if (x != null) {
				take = 1 + helper(nums,idx + 1,map,dp,x + 1);
			}
		}
		return dp[idx][prev + 1] = Math.max(take,not_take);
	}
	int maxUncrossedLines(int[] nums1, int[] nums2) {
		int n = nums1.length;
		int m = nums2.length;
		HashMap<Integer, TreeSet<Integer>> map = new HashMap<>();
		for (int i = 0; i < m; i++) {
			map.putIfAbsent(nums2[i],new TreeSet<>());
			map.get(nums2[i]).add(i);
		}
		int prev = -1;
		int[][] dp = new int[n + 1][100000];
		for (int[] d: dp) {	
			Arrays.fill(d,-1);
		}
		return helper(nums1,0,map,dp,-1);
	}
}