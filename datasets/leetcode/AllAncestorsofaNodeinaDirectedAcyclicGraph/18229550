class Solution {
	List<List<Integer>> getAncestors(int n, int[][] edges) {
		List<Set<Integer>> list = new ArrayList<>();
		Map<Integer, List<Integer>> map = new HashMap<>();
		int[] in = new int[n];
		for (int i = 0; i < n; i++) {
			list.add(new HashSet<>());
			map.put(i,new ArrayList<>());
		}
		for (int[] edge: edges) {	
			int u = edge[0], v = edge[1];
			map.get(u).add(v);
			in[v]++;
		}
		Queue<Integer> q = new LinkedList<>();
		for (int i = 0; i < n; i++) {
			if (in[i] == 0) {
				q.add(i);
			}
		}
		while (!q.isEmpty()) {
			int node = q.poll();
			for (int child: map.get(node)) {	
				list.get(child).addAll(list.get(node));
				list.get(child).add(node);
				in[child]--;
				if (in[child] == 0) {
					q.add(child);
				}
			}
		}
		List<List<Integer>> result = new ArrayList<>();
		for (Set<Integer> s: list) {	
			result.add(new ArrayList<>(s));
			Collections.sort(result.get(result.size() - 1));
		}
		return result;
	}
}