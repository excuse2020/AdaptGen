class Solution {
	int mod = 1000000007;
	int InversePairs(int[] array) {
		return (int) (mergeSort(array,0,array.length - 1) % mod);
	}
	long mergeSort(int[] array, int left, int right) {
		if (left >= right) {
			return 0;
		}
		int mid = left + right >> 1;
		long res = mergeSort(array,left,mid) + mergeSort(array,mid + 1,right);
		int[] tmp = new int[right - left + 1];
		int i = left;
		int j = mid + 1;
		int k = 0;
		while (i <= mid && j <= right) {
			if (array[i] < array[j]) {
				tmp[k++] = array[i++];
			} 
			else {
				tmp[k++] = array[j++];
				res += mid - i + 1;
			}
		}
		while (i <= mid) {
			tmp[k++] = array[i++];
		}
		while (j <= right) {
			tmp[k++] = array[j++];
		}
		for (k = 0, i = left; k < tmp.length; k++, i++) {
			array[i] = tmp[k];
		}
		return res;
	}
}