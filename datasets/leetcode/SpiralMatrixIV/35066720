class Solution {
	int[][] spiralMatrix(int m, int n, ListNode head) {
		int currElement = 0;
		int top = 0;
		int bottom = m - 1;
		int left = 0;
		int right = n - 1;
		int[][] ans = new int[m][n];
		ListNode curr = head;
		int direction = 0;
		while (top <= bottom && left <= right) {
			if (direction == 0) {
				for (int i = left; i <= right; i++) {
					if (curr != null) {
						ans[top][i] = curr.val;
						curr = curr.next;
					} 
					else {
						ans[top][i] = -1;
					}
				}
				top++;
			} 
			else if (direction == 1) {
				for (int i = top; i <= bottom; i++) {
					if (curr != null) {
						ans[i][right] = curr.val;
						curr = curr.next;
					} 
					else {
						ans[i][right] = -1;
					}
				}
				right--;
			} 
			else if (direction == 2) {
				for (int i = right; i >= left; i--) {
					if (curr != null) {
						ans[bottom][i] = curr.val;
						curr = curr.next;
					} 
					else {
						ans[bottom][i] = -1;
					}
				}
				bottom--;
			} 
			else {
				for (int i = bottom; i >= top; i--) {
					if (curr != null) {
						ans[i][left] = curr.val;
						curr = curr.next;
					} 
					else {
						ans[i][left] = -1;
					}
				}
				left++;
			}
			direction = (direction + 1) % 4;
		}
		return ans;
	}
}