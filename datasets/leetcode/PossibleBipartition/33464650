class Solution {
	boolean dfs(ArrayList<ArrayList<Integer>> al, int[] visit, int val, int col) {
		visit[val] = col;
		for (int i: al.get(val)) {	
			if (visit[i] == -1) {
				if (dfs(al,visit,i,1 - col) == false) {
					return false;
				}
			} 
			else if (visit[i] == col) {
				return false;
			}
		}
		return true;
	}
	boolean possibleBipartition(int n, int[][] graph) {
		ArrayList<ArrayList<Integer>> al = new ArrayList<>();
		for (int i = 0; i <= n; i++) {
			al.add(new ArrayList<>());
		}
		for (int i = 0; i < graph.length; i++) {
			al.get(graph[i][0]).add(graph[i][1]);
			al.get(graph[i][1]).add(graph[i][0]);
		}
		int visit = new int[n + 1];
		Arrays.fill(visit,-1);
		for (int i = 1; i <= n; i++) {
			if (visit[i] == -1) {
				if (dfs(al,visit,i,0) == false) {
					return false;
				}
			}
		}
		return true;
	}
}