class Solution {
	ListNode ReverseList(ListNode head) {
		return reverseNodeMethod2(head);
	}
	ListNode reverseNodeMethod1(ListNode head) {
		if (head == null || head.next == null) {
			return head;
		}
		ListNode preNode = head;
		ListNode curNode = head.next;
		ListNode temp = null;
		while (curNode != null) {
			temp = curNode.next;
			curNode.next = preNode;
			preNode = curNode;
			curNode = temp;
		}
		head.next = null;
		return preNode;
	}
	ListNode reverseNodeMethod2(ListNode head) {
		if (head == null || head.next == null) {
			return head;
		}
		ListNode temp = head;
		int len = 0;
		while (temp != null) {
			len++;
			temp = temp.next;
		}
		ListNode headNode = new ListNode(-1);
		headNode.next = head;
		ListNode curNode = head;
		ListNode tempNode = null;
		for (int i = 1; i < len; i++) {
			tempNode = curNode.next;
			curNode.next = tempNode.next;
			tempNode.next = headNode.next;
			headNode.next = tempNode;
		}
		return headNode.next;
	}
}