class Solution {
	int minimumCost(int m, int n, int[] horizontalCut, int[] verticalCut) {
		if (m == 1 && n == 1) {
			return 0;
		}
		int hor = 0, ver = 0, res = 0, horInd = horizontalCut.length - 1, verInd = verticalCut.length - 1;
		Arrays.sort(horizontalCut);
		Arrays.sort(verticalCut);
		while (horInd >= 0 || verInd >= 0) {
			if (horInd >= 0 && verInd >= 0) {
				if (horizontalCut[horInd] > verticalCut[verInd]) {
					res += horizontalCut[horInd] * (ver + 1);
					horInd--;
					hor++;
				} 
				else {
					res += verticalCut[verInd] * (hor + 1);
					verInd--;
					ver++;
				}
			} 
			else {
				if (horInd >= 0) {
					res += horizontalCut[horInd] * (ver + 1);
					horInd--;
					hor++;
				} 
				else {
					res += verticalCut[verInd] * (hor + 1);
					verInd--;
					ver++;
				}
			}
		}
		return res;
	}
}