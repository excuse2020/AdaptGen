class Solution {
	int dfs(int[][] grid, int i, int j, int m, int n) {
		int up = 0;
		int down = 0;
		int left = 0;
		int right = 0;
		int curr = grid[i][j];
		grid[i][j] = 0;
		if (i + 1 < m && grid[i + 1][j] != 0) {
			right = dfs(grid,i + 1,j,m,n);
		}
		if (j + 1 < n && grid[i][j + 1] != 0) {
			down = dfs(grid,i,j + 1,m,n);
		}
		if (i - 1 >= 0 && grid[i - 1][j] != 0) {
			up = dfs(grid,i - 1,j,m,n);
		}
		if (j - 1 >= 0 && grid[i][j - 1] != 0) {
			left = dfs(grid,i,j - 1,m,n);
		}
		grid[i][j] = curr;
		int horizontal = Math.max(left,right);
		int verticle = Math.max(up,down);
		return Math.max(horizontal,verticle) + curr;
	}
	int getMaximumGold(int[][] grid) {
		int result = 0;
		int m = grid.length;
		int n = grid[0].length;
		for (int i = 0; i < m; i++) {
			for (int j = 0; j < n; j++) {
				if (grid[i][j] != 0) {
					result = Math.max(dfs(grid,i,j,m,n),result);
				}
			}
		}
		return result;
	}
}