class Solution {
	int maxPoints = 0;
	boolean checkValidSquare(int boundaryPoint, int[][] points, HashMap<Character, List<List<Integer>>> tagMap) {
		int countPoints = 0;
		for (Character c: tagMap.keySet()) {	
			List<List<Integer>> pointsList = tagMap.get(c);
			int countTag = 0;
			for (List<Integer> p: pointsList) {	
				int x = p.get(0);
				int y = p.get(1);
				if ((x >= (boundaryPoint * (-1)) && x <= boundaryPoint) && (y >= (boundaryPoint * (-1)) && y <= boundaryPoint)) {
					countTag++;
				}
			}
			if (countTag > 1) {
				return false;
			}
			if (countTag == 1) {
				countPoints++;
			}
		}
		maxPoints = Math.max(maxPoints,countPoints);
		return true;
	}
	int maxPointsInsideSquare(int[][] points, String s) {
		int n = points.length;
		int l = Integer.MAX_VALUE, r = Integer.MIN_VALUE;
		for (int i = 0; i < n; i++) {
			l = Math.min(l,Math.min(Math.abs(points[i][0]),Math.abs(points[i][1])));
			r = Math.max(r,Math.max(Math.abs(points[i][0]),Math.abs(points[i][1])));
		}
		HashMap<Character, List<List<Integer>>> tagMap = new HashMap<>();
		for (int i = 0; i < n; i++) {
			char c = s.charAt(i);
			if (tagMap.containsKey(c)) {
				List<List<Integer>> pointsList = tagMap.get(c);
				List<Integer> p = new ArrayList<>();
				p.add(points[i][0]);
				p.add(points[i][1]);
				pointsList.add(p);
				tagMap.put(c,pointsList);
			} 
			else {
				List<List<Integer>> pointsList = new ArrayList<>();
				List<Integer> p = new ArrayList<>();
				p.add(points[i][0]);
				p.add(points[i][1]);
				pointsList.add(p);
				tagMap.put(c,pointsList);
			}
		}
		while (l <= r) {
			int mid = (l + r) / 2;
			if (checkValidSquare(mid,points,tagMap)) {
				l = mid + 1;
			} 
			else {
				r = mid - 1;
			}
		}
		return maxPoints;
	}
}