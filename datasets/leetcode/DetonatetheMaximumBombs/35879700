class Solution {
	void dfs(List<List<Integer>> list, boolean[] visited, int[] c, int i) {
		visited[i] = true;
		c[0]++;
		for (int j: list.get(i)) {	
			if (!visited[j]) {
				dfs(list,visited,c,j);
			}
		}
	}
	int maximumDetonation(int[][] bombs) {
		int n = bombs.length;
		List<List<Integer>> list = new ArrayList<>();
		for (int i = 0; i < n; i++) {
			list.add(new ArrayList<>());
			for (int j = 0; j < n; j++) {
				if (i != j) {
					long x1 = bombs[i][0];
					long y1 = bombs[i][1];
					long r1 = bombs[i][2];
					long x = bombs[j][0];
					long y = bombs[j][1];
					long distSq = (x - x1) * (x - x1) + (y - y1) * (y - y1);
					if (distSq <= r1 * r1) {
						list.get(i).add(j);
					}
				}
			}
		}
		int ans = Integer.MIN_VALUE;
		for (int i = 0; i < n; i++) {
			int[] c = new int[1];
			boolean[] visited = new boolean[n];
			dfs(list,visited,c,i);
			ans = Math.max(ans,c[0]);
		}
		return ans;
	}
}