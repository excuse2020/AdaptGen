class Solution {
	int helper(int[] arr, int i, int j, int[][] dp) {
		if (i > j) {
			return 0;
		}
		if (dp[i][j] != -1) {
			return dp[i][j];
		}
		int mini = Integer.MAX_VALUE;
		for (int k = i; k <= j; k++) {
			mini = Math.min(mini,arr[j + 1] - arr[i - 1] + helper(arr,i,k - 1,dp) + helper(arr,k + 1,j,dp));
		}
		return dp[i][j] = mini;
	}
	int minCost(int n, int[] cuts) {
		int[] arr = new int[cuts.length + 2];
		arr[0] = 0;
		arr[arr.length - 1] = n;
		Arrays.sort(cuts);
		for (int i = 0; i < cuts.length; i++) {
			arr[i + 1] = cuts[i];
		}
		int[][] dp = new int[arr.length][arr.length];
		for (int i = 0; i < dp.length; i++) {
			for (int j = 0; j < dp[0].length; j++) {
				dp[i][j] = -1;
			}
		}
		return helper(arr,1,arr.length - 2,dp);
	}
}