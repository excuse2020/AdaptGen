class olution {
	int maxJump(int[] stones) {
		if (stones.length == 2) {
			return stones[1] - stones[0];
		}
		int forward = 0;
		for (int i = 2; i < stones.length; i += 2) {
			int temp = stones[i] - stones[i - 2];
			forward = Math.max(forward,temp);
		}
		int n = stones.length - 1;
		if (n % 2 == 0) {
			n--;
		}
		for (int i = n - 2; i >= 0; i--) {
			int temp = stones[i + 2] - stones[i];
			forward = Math.max(forward,temp);
		}
		return forward;
	}
}
class Solution {
	int maxJump(int[] stones) {
		int max = 0;
		if (stones.length == 2) {
			return stones[1] - stones[0];
		}
		int n = stones.length;
		for (int i = 2; i < n; i++) {
			max = Math.max(max,stones[i] - stones[i - 2]);
		}
		return max;
	}
}