class Solution {
	int binarySearch(MountainArray mountainArr, int target, int start, int end) {
		boolean isAsc = mountainArr.get(start) < mountainArr.get(end);
		while (start <= end) {
			int mid = start + (end - start) / 2;
			if (target == mountainArr.get(mid)) {
				return mid;
			} 
			else if (isAsc) {
				if (mountainArr.get(mid) < target) {
					start = mid + 1;
				} 
				else if (mountainArr.get(mid) > target) {
					end = mid - 1;
				}
			} 
			else {
				if (mountainArr.get(mid) < target) {
					end = mid - 1;
				} 
				else if (mountainArr.get(mid) > target) {
					start = mid + 1;
				}
			}
		}
		return -1;
	}
	int findInMountainArray(int target, MountainArray mountainArr) {
		int peak = findPeak(mountainArr);
		int firstTry = binarySearch(mountainArr,target,0,peak);
		if (firstTry != -1) {
			return firstTry;
		}
		return binarySearch(mountainArr,target,peak + 1,mountainArr.length() - 1);
	}
	int findPeak(MountainArray mountainArr) {
		int start = 0;
		int end = mountainArr.length() - 1;
		while (start < end) {
			int mid = start + (end - start) / 2;
			if (mountainArr.get(mid) < mountainArr.get(mid + 1)) {
				start = mid + 1;
			} 
			else {
				end = mid;
			}
		}
		return start;
	}
}