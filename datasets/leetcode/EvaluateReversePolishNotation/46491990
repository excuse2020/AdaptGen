class Solution {
	int evalRPN(String[] arr) {
		int n = arr.length;
		Stack<String> st = new Stack();
		for (var a: arr) {	
			if (st.size() == 0) {
				st.push(a);
			} 
			else if (a.equals("+") || a.equals("-")) {
				String s1 = st.pop();
				String s2 = st.pop();
				String op = a;
				if (op.equals("+")) {
					String s = String.valueOf(Integer.valueOf(s2) + Integer.valueOf(s1));
					st.push(s);
				} 
				else if (op.equals("-")) {
					String s = String.valueOf(Integer.valueOf(s2) - Integer.valueOf(s1));
					st.push(s);
				} 
				else if (op.equals("*")) {
					String s = String.valueOf(Integer.valueOf(s2) * Integer.valueOf(s1));
					st.push(s);
				} 
				else {
					String s = String.valueOf(Integer.valueOf(s2) / Integer.valueOf(s1));
					st.push(s);
				}
			} 
			else {
				st.push(a);
			}
		}
		while (st.size() != 1) {
			String op = st.pop();
			String s1 = st.pop();
			String s2 = st.pop();
			if (op.equals("+")) {
				String s = String.valueOf(Integer.valueOf(s2) + Integer.valueOf(s1));
				st.push(s);
			} 
			else if (op.equals("-")) {
				String s = String.valueOf(Integer.valueOf(s2) - Integer.valueOf(s1));
				st.push(s);
			} 
			else if (op.equals("*")) {
				String s = String.valueOf(Integer.valueOf(s2) * Integer.valueOf(s1));
				st.push(s);
			} 
			else {
				String s = String.valueOf(Integer.valueOf(s2) / Integer.valueOf(s1));
				st.push(s);
			}
		}
		return Integer.valueOf(st.peek());
	}
}