class Solution {
	boolean func(int i, int j, String s) {
		boolean foundOnce = false;
		for (int k = i + 1; k <= j; k++) {
			if (!foundOnce && s.charAt(k) == s.charAt(k - 1)) {
				foundOnce = true;
			} 
			else if (foundOnce && s.charAt(k) == s.charAt(k - 1)) {
				return false;
			}
		}
		return true;
	}
	int longestSemiRepetitiveSubstring(String s) {
		int max = 1;
		int n = s.length();
		for (int i = 0; i < n; i++) {
			for (int j = i + 1; j < n; j++) {
				if (func(i,j,s)) {
					max = Math.max(max,j - i + 1);
				}
			}
		}
		return max;
	}
}
class Solution {
	int longestSemiRepetitiveSubstring(String s) {
		int left = 0, count = 0, maxLen = 1;
		for (int right = 0; right < s.length(); right++) {
			if (right > 0 && s.charAt(right) == s.charAt(right - 1)) {
				count++;
			}
			while (count > 1) {
				if (right > left && s.charAt(left) == s.charAt(left + 1)) {
					count--;
				}
				left++;
			}
			maxLen = Math.max(maxLen,right - left + 1);
		}
		return maxLen;
	}
}