class Solution {
	List<Integer> largestDivisibleSubset(int[] nums) {
		Arrays.sort(nums);
		int n = nums.length;
		int[] dp = new int[n];
		int[] hash = new int[n];
		Arrays.fill(dp,1);
		for (int i = 1; i < n; i++) {
			hash[i] = i;
			for (int prev = 0; prev < i; prev++) {
				if (nums[i] % nums[prev] == 0 && dp[i] < 1 + dp[prev]) {
					dp[i] = dp[prev] + 1;
					hash[i] = prev;
				}
			}
		}
		int maxi = -1, idx = -1;
		for (int i = 0; i < n; i++) {
			if (dp[i] > maxi) {
				maxi = dp[i];
				idx = i;
			}
		}
		List<Integer> ans = new ArrayList<>();
		for (int i = 0; i < n; i++) {
			System.out.print(dp[i] + " ");
		}
		System.out.println();
		System.out.println(idx);
		for (int i = 0; i < n; i++) {
			System.out.print(hash[i] + " ");
		}
		ans.add(nums[idx]);
		while (idx != hash[idx]) {
			idx = hash[idx];
			ans.add(nums[idx]);
		}
		return ans;
	}
}