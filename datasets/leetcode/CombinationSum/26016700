class Solution {
	List<List<Integer>> al = new ArrayList<>();
	List<List<Integer>> combinationSum(int[] candidates, int target) {
		List<Integer> res = new ArrayList<>();
		Arrays.sort(candidates);
		fun(candidates,target,0,0,res);
		return al;
	}
	void fun(int[] candidates, int target, int i, int sum, List<Integer> res) {
		if (sum > target) {
			return;
		}
		if (sum == target) {
			List<Integer> temp = new ArrayList<>(res);
			al.add(temp);
			return;
		}
		if (i == candidates.length) {
			return;
		}
		res.add(candidates[i]);
		fun(candidates,target,i,sum + candidates[i],res);
		res.remove(res.size() - 1);
		if (i + 1 != candidates.length && sum + candidates[i + 1] <= target) {
			fun(candidates,target,i + 1,sum,res);
		}
	}
}