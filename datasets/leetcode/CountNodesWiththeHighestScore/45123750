class Solution {
	int ans = 0;
	long maxScore = 0;
	int countHighestScoreNodes(int[] parents) {
		List<Integer>[] tree = new List[parents.length];
		for (int i = 0; i < tree.length; ++i) {
			tree[i] = new ArrayList<>();
		}
		for (int i = 0; i < parents.length; ++i) {
			if (parents[i] == -1) {
				continue;
			}
			tree[parents[i]].add(i);
		}
		dfs(tree,0);
		return ans;
	}
	int dfs(List<Integer>[] tree, int u) {
		int count = 1;
		long score = 1;
		for (int v: tree[u]) {	
			int childCount = dfs(tree,v);
			count += childCount;
			score *= childCount;
		}
		int aboveCount = tree.length - count;
		score *= Math.max(aboveCount,1);
		if (score > maxScore) {
			maxScore = score;
			ans = 1;
		} 
		else if (score == maxScore) {
			++ans;
		}
		return count;
	}
}