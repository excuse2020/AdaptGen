class Solution {
	Map<TreeNode, Integer> solve(TreeNode root, int depth) {
		if (root == null) {
			return null;
		}
		Map<TreeNode, Integer> leftMap = solve(root.left,depth + 1);
		Map<TreeNode, Integer> rightMap = solve(root.right,depth + 1);
		if (leftMap == null && rightMap == null) {
			Map<TreeNode, Integer> map = new HashMap();
			map.put(root,depth);
			return map;
		} 
		else if (leftMap == null && rightMap != null) {
			return rightMap;
		} 
		else if (leftMap != null && rightMap == null) {
			return leftMap;
		} 
		else {
			List<TreeNode> leftTree = new ArrayList(leftMap.keySet());
			List<TreeNode> rightTree = new ArrayList(rightMap.keySet());
			if (leftMap.get(leftTree.get(0)) == rightMap.get(rightTree.get(0))) {
				Map<TreeNode, Integer> map = new HashMap();
				map.put(root,leftMap.get(leftTree.get(0)));
				return map;
			} 
			else if (leftMap.get(leftTree.get(0)) > rightMap.get(rightTree.get(0))) {
				return leftMap;
			} 
			else {
				return rightMap;
			}
		}
	}
	TreeNode subtreeWithAllDeepest(TreeNode root) {
		Map<TreeNode, Integer> map = solve(root,0);
		List<TreeNode> tree = new ArrayList(map.keySet());
		return tree.get(0);
	}
}