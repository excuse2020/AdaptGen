class Solution {
	boolean canChoose(int[][] groups, int[] nums) {
		int n = groups.length;
		int size = nums.length;
		int cnt = 0;
		int ind = -1;
		int k = 0;
		for (int it: groups) {	
			k = lpsIndex(it,k,findLps(it),nums);
			if (k < 0) {
				return false;
			}
		}
		return true;
	}
	int[] findLps(int arr) {
		int left = 0;
		int right = 1;
		int n = arr.length;
		int lps = new int[n];
		while (right < n) {
			if (arr[left] == arr[right]) {
				lps[right] = left + 1;
				left++;
				right++;
			} 
			else {
				if (left == 0) {
					right++;
				} 
				else {
					left = lps[left - 1];
				}
			}
		}
		return lps;
	}
	int lpsIndex(int arr, int k, int lps, int nums) {
		int left = 0;
		int right = k;
		while (right < nums.length) {
			if (nums[right] == arr[left]) {
				right++;
				left++;
			} 
			else if (left == 0) {
				right++;
			} 
			else {
				left = lps[left - 1];
			}
			if (left == arr.length) {
				return right;
			}
		}
		return -1;
	}
}