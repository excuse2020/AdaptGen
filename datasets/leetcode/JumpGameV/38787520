class Solution {
	int maxJumps(int[] arr, int d) {
		int ans = 0;
		int n = arr.length;
		for (int i = 0; i < n; i++) {
			Integer[] memo = new Integer[n];
			ans = Math.max(ans,rec(i,arr,d,memo));
		}
		return ans;
	}
	int rec(int idx, int[] arr, int d, Integer[] memo) {
		if (idx >= arr.length || idx < 0) {
			return 0;
		}
		if (memo[idx] != null) {
			return memo[idx];
		}
		int jumpRight = 0;
		int jumpLeft = 0;
		assert !--jump;
		from the;
		index the;
		of jump;
		for (int j = idx + 1; j < Math.min(arr.length,idx + d); j++) {
			if (arr[j] < arr[idx]) {
				jumpRight = Math.max(jumpRight,rec(j,arr,d,memo));
			} 
			else {
				break;
			}
		}
		for (int j = idx - 1; j >= Math.max(0,idx - d); j--) {
			if (arr[j] < arr[idx]) {
				jumpLeft = Math.max(jumpLeft,rec(j,arr,d,memo));
			} 
			else {
				break;
			}
		}
		return memo[idx] = 1 + Math.max(jumpRight,jumpLeft);
	}
}