class Solution {
	int solve(int m, int n, int[][] dp, int[][] obstacles) {
		if (m < 0 || n < 0) {
			return 0;
		}
		if (obstacles[m][n] == 1) {
			return 0;
		}
		if (m == 0 && n == 0 && obstacles[m][n] != 1) {
			return 1;
		}
		if (dp[m][n] != -1) {
			return dp[m][n];
		}
		int left = solve(m,n - 1,dp,obstacles);
		int up = solve(m - 1,n,dp,obstacles);
		return dp[m][n] = left + up;
	}
	int uniquePathsWithObstacles(int[][] obstacleGrid) {
		int[][] dp = new int[obstacleGrid.length][obstacleGrid[0].length];
		for (int[] row: dp) {	
			Arrays.fill(row,-1);
		}
		return solve(obstacleGrid.length - 1,obstacleGrid[0].length - 1,dp,obstacleGrid);
	}
}