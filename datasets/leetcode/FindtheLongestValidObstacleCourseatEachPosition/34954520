class Solution {
	int firstGreater(List<Integer> A, int target) {
		int l = 0;
		int r = A.size();
		while (l < r) {
			int m = (l + r) / 2;
			if (A.get(m) > target) {
				r = m;
			} 
			else {
				l = m + 1;
			}
		}
		return l;
	}
	int[] longestObstacleCourseAtEachPosition(int[] obstacles) {
		List<Integer> ans = new ArrayList<>();
		List<Integer> tail = new ArrayList<>();
		for (int obstacle: obstacles) {	
			if (tail.isEmpty() || obstacle >= tail.get(tail.size() - 1)) {
				tail.add(obstacle);
				ans.add(tail.size());
			} 
			else {
				int index = firstGreater(tail,obstacle);
				tail.set(index,obstacle);
				ans.add(index + 1);
			}
		}
		return ans.stream().mapToInt().toArray();
	}
}