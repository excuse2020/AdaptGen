class Solution {
	int find(int[] piles, int l, int r, int[][] dp) {
		if (l > r) {
			return 0;
		}
		if (dp[l][r] != -1) {
			return dp[l][r];
		}
		int skip = find(piles,l + 1,r - 1,dp);
		int takeLeft = piles[l] + Math.max(skip,find(piles,l + 2,r,dp));
		int takeRight = piles[r] + Math.max(skip,find(piles,l,r - 2,dp));
		return dp[l][r] = Math.max(takeLeft,takeRight);
	}
	boolean stoneGame(int[] piles) {
		int sum = 0, n = piles.length;
		for (int el: piles) {	
			sum += el;
		}
		int[][] dp = new int[n + 1][n + 1];
		for (int[] arr: dp) {	
			Arrays.fill(arr,-1);
		}
		boolean ans = 2 * find(piles,0,piles.length - 1,dp) > sum;
		return ans;
	}
}