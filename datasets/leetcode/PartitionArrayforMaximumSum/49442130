class Solution {
	int f(int[] arr, int k, int from, int n, int[] dp) {
		if (from == n) {
			return 0;
		}
		if (dp[from] != -1) {
			return dp[from];
		}
		int sum = 0;
		int max = Integer.MIN_VALUE;
		for (int i = from; i < Math.min(n,from + k); i++) {
			max = Math.max(max,arr[i]);
			sum = Math.max(sum,(max * (i - from + 1)) + f(arr,k,i + 1,n,dp));
		}
		return dp[from] = sum;
	}
	int maxSumAfterPartitioning(int[] arr, int k) {
		int n = arr.length;
		int[] dp = new int[n + 1];
		for (int from = n - 1; from >= 0; from--) {
			int sum = 0;
			int max = Integer.MIN_VALUE;
			for (int i = from; i < Math.min(n,from + k); i++) {
				max = Math.max(max,arr[i]);
				sum = Math.max(sum,(max * (i - from + 1)) + dp[i + 1]);
			}
			dp[from] = sum;
		}
		return dp[0];
	}
	int maxSumAfterPartitioning2(int[] arr, int k) {
		int n = arr.length;
		int[] dp = new int[n + 1];
		Arrays.fill(dp,-1);
		return f(arr,k,0,n,dp);
	}
}