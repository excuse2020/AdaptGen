class Solution {
	TreeNode buildTree(int[] inorder, int[] postorder) {
		int instart = 0;
		int inend = inorder.length - 1;
		int poststart = 0;
		int postend = postorder.length - 1;
		return solve(inorder,instart,inend,postorder,poststart,postend);
	}
	TreeNode solve(int[] inorder, int instart, int inend, int[] postorder, int poststart, int postend) {
		if (instart > inend || poststart > postend) {
			return null;
		}
		int rootValue = postorder[postend];
		TreeNode root = new TreeNode(rootValue);
		int k = 0;
		for (int i = 0; i < inorder.length; i++) {
			if (inorder[i] == rootValue) {
				k = i;
				break;
			}
		}
		root.left = solve(inorder,instart,k - 1,postorder,poststart,poststart + k - (instart + 1));
		root.right = solve(inorder,k + 1,inend,postorder,poststart + k - instart,postend - 1);
		return root;
	}
}