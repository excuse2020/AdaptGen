class Solution {
	boolean dfs(int node, int d, int[] vis, ArrayList<ArrayList<Integer>> adj) {
		vis[node] = 1;
		if (node == d) {
			return true;
		}
		for (Integer it: adj.get(node)) {	
			if (vis[it] == 0) {
				if (dfs(it,d,vis,adj)) {
					return true;
				}
			}
		}
		return false;
	}
	boolean validPath(int n, int[][] edges, int source, int destination) {
		ArrayList<ArrayList<Integer>> adj = new ArrayList<>();
		for (int i = 0; i < n; i++) {
			adj.add(new ArrayList<Integer>());
		}
		for (int a: edges) {	
			adj.get(a[0]).add(a[1]);
			adj.get(a[1]).add(a[0]);
		}
		int vis = new int[n];
		Arrays.fill(vis,0);
		return dfs(source,destination,vis,adj);
	}
}