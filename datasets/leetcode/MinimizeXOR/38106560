class Solution {
	int countSetBits(int n) {
		int count = 0;
		while (n != 0) {
			if ((n & 1) == 1) {
				count++;
			}
			n = n >> 1;
		}
		return count;
	}
	int minimizeXor(int num1, int num2) {
		int x = countSetBits(num1);
		int y = countSetBits(num2);
		int ans = 0;
		if (x == y) {
			return num1;
		}
		if (x > y) {
			ans = unsetLSB(num1,(x - y));
		} 
		else {
			ans = setLSB(num1,(y - x));
		}
		return ans;
	}
	int setLSB(int n, int t) {
		for (int i = 0; i < 32; i++) {
			if (t == 0) {
				break;
			}
			int mask = 1 << i;
			if ((n & mask) == 0) {
				n = n | mask;
				t--;
			}
		}
		return n;
	}
	int unsetLSB(int n, int t) {
		for (int i = 0; i < 32; i++) {
			if (t == 0) {
				break;
			}
			int mask = 1 << i;
			if ((n & mask) != 0) {
				n = n ^ mask;
				t--;
			}
		}
		return n;
	}
}