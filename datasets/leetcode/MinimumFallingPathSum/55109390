class Solution {
	int minFallingPathSum(int[][] matrix) {
		int m = matrix.length;
		int n = matrix[0].length;
		int dp = new int[m][n];
		for (int row: dp) {	
			Arrays.fill(row,0);
		}
		for (int j = 0; j < n; j++) {
			dp[0][j] = matrix[0][j];
		}
		for (int i = 1; i < m; i++) {
			for (int j = 0; j < n; j++) {
				int v = matrix[i][j] + dp[i - 1][j];
				int rd = matrix[i][j];
				if (j + 1 < n) {
					rd += dp[i - 1][j + 1];
				} 
				else {
					rd += (int) Math.pow(10,9);
				}
				int ld = matrix[i][j];
				if (j - 1 >= 0) {
					ld += dp[i - 1][j - 1];
				} 
				else {
					ld += (int) Math.pow(10,9);
				}
				dp[i][j] = Math.min(v,Math.min(ld,rd));
			}
		}
		int mini = dp[m - 1][0];
		for (int i = 1; i < n; i++) {
			mini = Math.min(mini,dp[m - 1][i]);
		}
		return mini;
	}
}