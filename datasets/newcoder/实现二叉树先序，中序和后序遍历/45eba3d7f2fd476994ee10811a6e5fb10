class Solution {
	void inorder(TreeNode root, List<Integer> list) {
		if (root != null) {
			if (root.left != null) {
				inorder(root.left,list);
			}
			list.add(root.val);
			if (root.right != null) {
				inorder(root.right,list);
			}
		}
	}
	void postorder(TreeNode root, List<Integer> list) {
		if (root != null) {
			if (root.left != null) {
				postorder(root.left,list);
			}
			if (root.right != null) {
				postorder(root.right,list);
			}
			list.add(root.val);
		}
	}
	void preorder(TreeNode root, List<Integer> list) {
		if (root != null) {
			list.add(root.val);
			if (root.left != null) {
				preorder(root.left,list);
			}
			if (root.right != null) {
				preorder(root.right,list);
			}
		}
	}
	int[][] threeOrders(TreeNode root) {
		List<Integer> prelist = new ArrayList<>();
		List<Integer> inlist = new ArrayList<>();
		List<Integer> postlist = new ArrayList<>();
		preorder(root,prelist);
		inorder(root,inlist);
		postorder(root,postlist);
		int result = new int[3];
		result[0] = new int[prelist.size()];
		result[1] = new int[inlist.size()];
		result[2] = new int[postlist.size()];
		for (int i = 0; i < prelist.size(); i++) {
			result[0][i] = prelist.get(i);
			result[1][i] = inlist.get(i);
			result[2][i] = postlist.get(i);
		}
		return result;
	}
}