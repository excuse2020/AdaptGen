class Solution {
	int LengthBinaryOptimisation(String answerKey, int swaps) {
		int min = 1, max = answerKey.length(), windowSize = 0;
		int middle = (min + max) / 2;
	}
	boolean SequenceObtained(String answerKey, int swaps, char seqChar, int window) {
		Queue<Character> queue = new LinkedList<Character>();
		int count = 0;
		for (int i = 0; i < window; i++) {
			queue.add(answerKey.charAt(i));
			if (answerKey.charAt(i) == seqChar) {
				count++;
			}
		}
		if (count <= swaps) {
			return true;
		}
		for (int i = window; i < answerKey.length(); i++) {
			char popped = queue.poll();
			if (popped == seqChar) {
				count--;
			}
			queue.add(answerKey.charAt(i));
			if (answerKey.charAt(i) == seqChar) {
				count++;
			}
			if (count <= swaps) {
				return true;
			}
		}
		return false;
	}
	int maxConsecutiveAnswers(String answerKey, int k) {
		return LengthBinaryOptimisation(answerKey,k);
	}
}