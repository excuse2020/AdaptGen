class Solution {
	ArrayList<Integer> GetLeastNumbers_Solution(int[] input, int k) {
		ArrayList<Integer> list = new ArrayList<>();
		if (input.length == 0) {
			return list;
		}
		int high = input.length - 1, low = 0;
		int temp = input[high];
		int point = low;
		int pivot = partition(low,high,input);
		quicksort(low,high,input);
		for (int i = 0; i < k; i++) {
			list.add(input[i]);
		}
		return list;
	}
	int partition(int left, int right, int[] arr) {
		int pivot = arr[right];
		int pointer = left;
		for (int i = left; i < right; i++) {
			if (arr[i] < pivot) {
				swap(arr,i,pointer);
				pointer++;
			}
		}
		swap(arr,pointer,right);
		return pointer;
	}
	void quicksort(int low, int high, int[] arr) {
		if (low >= high) {
			return;
		}
		int pivot = partition(low,high,arr);
		quicksort(low,pivot - 1,arr);
		quicksort(pivot + 1,high,arr);
	}
	void swap(int[] arr, int left, int right) {
		int temp = arr[left];
		arr[left] = arr[right];
		arr[right] = temp;
	}
}