class Solution {
	int MOD = (int) 1e9 + 7;
	int dp;
	Map<Integer, List<Integer>> mp;
	int helper(int n, int d) {
		if (n == 0) {
			return 1;
		}
		if (dp[d][n] != -1) {
			return dp[d][n];
		}
		int ans = 0;
		for (var e: mp.get(d)) {	
			ans += helper(n - 1,e);
			ans %= MOD;
		}
		return dp[d][n] = ans;
	}
	int knightDialer(int n) {
		mp = new HashMap<>();
		mp.put(1,Arrays.asList(6,8));
		mp.put(2,Arrays.asList(7,9));
		mp.put(3,Arrays.asList(4,8));
		mp.put(4,Arrays.asList(3,9,0));
		mp.put(5,new ArrayList<>());
		mp.put(6,Arrays.asList(1,7,0));
		mp.put(7,Arrays.asList(2,6));
		mp.put(8,Arrays.asList(1,3));
		mp.put(9,Arrays.asList(2,4));
		mp.put(0,Arrays.asList(4,6));
		int ans = 0;
		dp = new int[10][n];
		for (var a: dp) {	
			Arrays.fill(a,-1);
		}
		for (int i = 0; i < 10; i++) {
			ans += helper(n - 1,i);
			ans %= MOD;
		}
		return ans;
	}
}