class Solution {
	int maxi = 0;
	int helper(char[][] matrix, int i, int j, int[][] dp) {
		if (i >= matrix.length || j >= matrix[0].length) {
			return 0;
		}
		if (dp[i][j] != 0) {
			return dp[i][j];
		}
		int right = helper(matrix,i,j + 1,dp);
		int diagonal = helper(matrix,i + 1,j + 1,dp);
		int down = helper(matrix,i + 1,j,dp);
	}
	int helper(char[][] matrix) {
		int row = matrix.length;
		int clm = matrix[0].length;
		int dp = new int[row + 1][clm + 1];
		int i = row - 1;
		int j = clm - 1;
		int right = dp[i][j + 1];
		int diagonal = dp[i + 1][j + 1];
		int down = dp[i + 1][j];
	}
	int maximalSquare(char[][] matrix) {
		int dp = new int[matrix.length][matrix[0].length];
		helper(matrix);
		return maxi * maxi;
	}
}