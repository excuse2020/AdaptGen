class Solution {
	void delete(Node root, String word) {
		Node curr = root;
		int i = 0;
		curr.ref--;
		int idx;
	}
	List<String> findWords(char[][] board, String[] words) {
		Node root = new Node();
		for (String word: words) {	
			insert(root,word);
		}
		Set<String> res = new HashSet<>();
		for (int i = 0; i < board.length; i++) {
			for (int j = 0; j < board[i].length; j++) {
				res.addAll(findWords(board,i,j,root));
			}
		}
		return new ArrayList<>(res);
	}
	Set<String> findWords(char[][] board, int i, int j, Node root) {
		Set<String> found = new HashSet();
		Stack<Node> nodes = new Stack<>();
		Stack<Integer> indices = new Stack<>();
		boolean[][] visited = new boolean[board.length][board[0].length];
		nodes.push(root);
		indices.push(i);
		indices.push(j);
		Node node = nodes.pop();
		j = indices.pop();
		i = indices.pop();
		if (node == null) {
			visited[i][j] = false;
			continue;
		}
	}
	void insert(Node root, String word) {
		Node curr = root;
		int i = 0;
		curr.ref++;
		int idx;
	}
	class Node {
		Node[] children;
		int ref = 0;
		String word;
	}
}