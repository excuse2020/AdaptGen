class Solution {
	void bfs(int[][] isConnected, boolean[] visited, int city) {
		Queue<Integer> queue = new LinkedList<>();
		queue.add(city);
		visited[city] = true;
		while (!queue.isEmpty()) {
			int current = queue.poll();
			for (int neighbor = 0; neighbor < isConnected.length; neighbor++) {
				if (isConnected[current][neighbor] == 1 && !visited[neighbor]) {
					queue.add(neighbor);
					visited[neighbor] = true;
				}
			}
		}
	}
	int findCircleNum(int[][] isConnected) {
		int n = isConnected.length;
		boolean[] visited = new boolean[n];
		int provinces = 0;
		for (int i = 0; i < n; i++) {
			if (!visited[i]) {
				provinces++;
				bfs(isConnected,visited,i);
			}
		}
		return provinces;
	}
}