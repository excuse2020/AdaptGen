class Solution {
	void helper(Map<Integer, List<Integer>> jump_map) {
		jump_map.get(0).add(4);
		jump_map.get(0).add(6);
		jump_map.get(1).add(6);
		jump_map.get(1).add(8);
		jump_map.get(2).add(7);
		jump_map.get(2).add(9);
		jump_map.get(3).add(4);
		jump_map.get(3).add(8);
		jump_map.get(4).add(3);
		jump_map.get(4).add(9);
		jump_map.get(4).add(0);
		jump_map.get(6).add(1);
		jump_map.get(6).add(7);
		jump_map.get(6).add(0);
		jump_map.get(7).add(2);
		jump_map.get(7).add(6);
		jump_map.get(8).add(1);
		jump_map.get(8).add(3);
		jump_map.get(9).add(2);
		jump_map.get(9).add(4);
	}
	int knightDialer(int n) {
		if (n == 1) {
			return 10;
		}
		Map<Integer, List<Integer>> jump_map = new HashMap<>();
		for (int i = 0; i <= 9; i++) {
			jump_map.put(i,new ArrayList<>());
		}
		helper(jump_map);
		long[][] dp = new long[10][n + 1];
		for (int i = 0; i <= 9; i++) {
			dp[i][1] = 1;
		}
		for (int j = 1; j <= n; j++) {
			for (int i = 0; i <= 9; i++) {
				List<Integer> prev_nums = jump_map.get(i);
				for (int prev: prev_nums) {	
					dp[i][j] = (dp[i][j] + dp[prev][j - 1]) % 1000000007;
				}
			}
		}
		long count = 0;
		for (int i = 0; i <= 9; i++) {
			count = (count + dp[i][n]) % 1000000007;
		}
		return (int) count;
	}
}