class Solution {
	int helper(int index, int[] satisfaction, int n, int time, int[][] dp) {
		if (index == n) {
			return 0;
		}
		if (dp[index][time] != -1) {
			return dp[index][time];
		}
		int reduce = 0 + helper(index + 1,satisfaction,n,time,dp);
		int keep = (time + 1) * satisfaction[index] + helper(index + 1,satisfaction,n,time + 1,dp);
		return dp[index][time] = Math.max(reduce,keep);
	}
	int maxSatisfaction(int[] satisfaction) {
		int n = satisfaction.length;
		int[][] dp = new int[n + 1][n + 1];
		for (int[] rows: dp) {	
			Arrays.fill(rows,-1);
		}
		Arrays.sort(satisfaction);
		int result = helper(0,satisfaction,n,0,dp);
		return result;
	}
}