class Solution {
	boolean canFinish(int numCourses, int[][] prerequisites) {
		int[] vis = new int[numCourses];
		int[] dfsVis = new int[numCourses];
		ArrayList<ArrayList<Integer>> adj = new ArrayList<>();
		for (int i = 0; i < numCourses; i++) {
			adj.add(new ArrayList<>());
		}
		for (int i = 0; i < prerequisites.length; i++) {
			adj.get(prerequisites[i][1]).add(prerequisites[i][0]);
		}
		Stack<Integer> st = new Stack<>();
		for (int i = 0; i < numCourses; i++) {
			if (vis[i] == 0) {
				if (dfs(i,vis,dfsVis,st,adj)) {
					return false;
				}
			}
		}
		return true;
	}
	boolean dfs(int node, int[] vis, int[] dfsVis, Stack<Integer> st, ArrayList<ArrayList<Integer>> adj) {
		vis[node] = 1;
		dfsVis[node] = 1;
		for (int it: adj.get(node)) {	
			if (vis[it] == 0) {
				if (dfs(it,vis,dfsVis,st,adj)) {
					return true;
				}
			} 
			else if (dfsVis[it] == 1) {
				return true;
			}
		}
		dfsVis[node] = 0;
		st.push(node);
		return false;
	}
}