class Solution {
	int countNodes(int root, int[] leftChild, int[] rightChild) {
		if (root == -1) {
			return 0;
		}
		return 1 + countNodes(leftChild[root],leftChild,rightChild);
	}
	boolean validateBinaryTreeNodes(int n, int[] leftChild, int[] rightChild) {
		int[] inDegree = new int[n];
		int root = -1;
		for (int child: leftChild) {	
			if (child != -1 && ++inDegree[child] == 2) {
				return false;
			}
		}
		for (int child: rightChild) {	
			if (child != -1 && ++inDegree[child] == 2) {
				return false;
			}
		}
		for (int i = 0; i < n; ++i) {
			if (inDegree[i] == 0) {
				if (root == -1) {
					root = i;
				} 
				else {
					return false;
				}
			}
		}
		if (root == -1) {
			return false;
		}
		return countNodes(root,leftChild,rightChild) == n;
	}
}