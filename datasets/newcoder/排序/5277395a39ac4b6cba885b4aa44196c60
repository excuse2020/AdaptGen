class Solution {
	int[] MySort(int[] arr) {
		sort(arr,0,arr.length - 1);
		return arr;
	}
	void merge(int[] arr, int leftBegin, int leftEnd, int rightBegin, int rightEnd) {
		int leftLen = leftEnd - leftBegin + 1;
		int[] leftArr = new int[leftLen];
		for (int i = 0; i < leftLen; i++) {
			leftArr[i] = arr[leftBegin + i];
		}
		int rightLen = rightEnd - rightBegin + 1;
		int[] rightArr = new int[rightLen];
		for (int i = 0; i < rightLen; i++) {
			rightArr[i] = arr[rightBegin + i];
		}
		int i = 0;
		int j = 0;
		int k = 0;
		while (i < leftArr.length && j < rightArr.length) {
			if (leftArr[i] <= rightArr[j]) {
				arr[leftBegin + k] = leftArr[i];
				k++;
				i++;
			} 
			else {
				arr[leftBegin + k] = rightArr[j];
				k++;
				j++;
			}
		}
		while (i < leftArr.length) {
			arr[leftBegin + k] = leftArr[i];
			k++;
			i++;
		}
		while (j < rightArr.length) {
			arr[leftBegin + k] = rightArr[j];
			k++;
			j++;
		}
	}
	void sort(int[] arr, int left, int right) {
		if (left >= right) {
			return;
		}
		int mid = left + (right - left) / 2;
		sort(arr,left,mid);
		sort(arr,mid + 1,right);
		merge(arr,left,mid,mid + 1,right);
	}
}