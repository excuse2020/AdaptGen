class Solution {
	int dp;
	int dfs(int[][] grid, int row, int col) {
		if (row < 0 || row >= grid.length || col >= grid[0].length || col < 0) {
			return 0;
		}
		if (dp[row][col] > 0) {
			return dp[row][col];
		}
		int up = 0;
		if (row - 1 >= 0 && col + 1 < grid[0].length && grid[row - 1][col + 1] > grid[row][col]) {
			up = 1 + dfs(grid,row - 1,col + 1);
		}
		int right = 0;
		if (col + 1 < grid[0].length && grid[row][col + 1] > grid[row][col]) {
			right = 1 + dfs(grid,row,col + 1);
		}
		int down = 0;
		if (row + 1 < grid.length && col + 1 < grid[0].length && grid[row + 1][col + 1] > grid[row][col]) {
			down = 1 + dfs(grid,row + 1,col + 1);
		}
		int x = Math.max(up,Math.max(right,down));
		dp[row][col] = x;
		return x;
	}
	int maxMoves(int[][] grid) {
		int row = grid.length, col = grid[0].length, ans = 0;
		dp = new int[row][col];
		for (int i = 0; i < row; i++) {
			int val = dfs(grid,i,0);
			ans = Math.max(ans,val);
		}
		return ans;
	}
}