class Solution {
	void backtrack(List<List<Integer>> ans, List<Integer> tempList, int[] nums, boolean[] used) {
		if (tempList.size() == nums.length) {
			ans.add(new ArrayList<>(tempList));
		} 
		else {
			for (int i = 0; i < nums.length; i++) {
				if (used[i] || i > 0 && nums[i] == nums[i - 1] && !used[i - 1]) {
					continue;
				}
				tempList.add(nums[i]);
				used[i] = true;
				backtrack(ans,tempList,nums,used);
				tempList.remove(tempList.size() - 1);
				used[i] = false;
			}
		}
	}
	List<List<Integer>> permuteUnique(int[] nums) {
		List<List<Integer>> ans = new ArrayList<>();
		List<Integer> tempList = new ArrayList<>();
		Arrays.sort(nums);
		boolean[] used = new boolean[nums.length];
		backtrack(ans,tempList,nums,used);
		return ans;
	}
}