class Solution {
	int isDistributionPossible(int[] quantities, int n, int value) {
		int stores = 0;
		for (int quantity: quantities) {	
			stores += (int) ((quantity + value - 1) / value);
		}
		return stores;
	}
	int minimizedMaximum(int n, int[] A) {
		int l = 1;
		int h = Arrays.stream(A).max().getAsInt();
		int mid = 0;
		int ans = -1;
		while (l <= h) {
			mid = l + (h - l) / 2;
			int stores = isDistributionPossible(A,n,mid);
			if (stores <= n) {
				h = mid - 1;
				ans = mid;
			} 
			else {
				l = mid + 1;
			}
		}
		return ans;
	}
}