class Solution {
	double[][] dp;
	double solve(int a, int b) {
		if (a <= 0 && b <= 0) {
			return 0.5;
		}
		if (a <= 0) {
			return 1.0;
		}
		if (b <= 0) {
			return 0.0;
		}
		if (dp[a][b] != -1) {
			return dp[a][b];
		}
		return dp[a][b] = 0.25 * (solve(a - 4,b) + solve(a - 3,b - 1));
	}
	double soupServings(int n) {
		if (n > 4800) {
			return 1.0;
		}
		n = (n + 24) / 25;
		dp = new double[n + 1][n + 1];
		for (int i = 0; i < n + 1; i++) {
			Arrays.fill(dp[i],-1);
		}
		return solve(n,n);
	}
}