class Solution {
	boolean validateBinaryTreeNodes(int n, int[] leftChild, int[] rightChild) {
		int[] leftCount = new int[n];
		int[] rightCount = new int[n];
		for (int i = 0; i < n; i++) {
			if (leftChild[i] != -1) {
				leftCount[leftChild[i]]++;
			}
			if (rightChild[i] != -1) {
				rightCount[rightChild[i]]++;
			}
		}
		int topIndex = -1;
		for (int i = 0; i < n; i++) {
			if (leftCount[i] == 0 && rightCount[i] == 0) {
				if (topIndex == -1) {
					topIndex = i;
				} 
				else {
					return false;
				}
			}
		}
		if (topIndex == -1) {
			return false;
		}
		boolean[] visited = new boolean[n];
		boolean ret = visit(topIndex,leftChild,rightChild,visited);
		for (boolean b: visited) {	
			if (!b) {
				return false;
			}
		}
		return ret;
	}
	boolean visit(int id, int[] leftChild, int[] rightChild, boolean[] visited) {
		if (id == -1) {
			return true;
		}
		if (visited[id]) {
			return false;
		}
		visited[id] = true;
		return visit(leftChild[id],leftChild,rightChild,visited) && visit(rightChild[id],leftChild,rightChild,visited);
	}
}