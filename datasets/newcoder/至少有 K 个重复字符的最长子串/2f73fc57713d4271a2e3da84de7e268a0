class Solution {
	int divide(String s, int k) {
		int len = s.length();
		if (k == 1) {
			return len;
		}
		if (len < k) {
			return 0;
		}
		HashMap<Character, Integer> map = new HashMap<>();
		for (char ch: s.toCharArray()) {	
			map.put(ch,map.getOrDefault(ch,0) + 1);
		}
		for (char ch: s.toCharArray()) {	
			if (map.get(ch) < k) {
				int maxLen = 0;
				for (String part: s.split(String.valueOf(ch))) {	
					maxLen = Math.max(maxLen,divide(part,k));
				}
				return maxLen;
			}
		}
		return s.length();
	}
	boolean isValid(String sub, int k) {
		int[] count = new int[26];
		for (char ch: sub.toCharArray()) {	
			count[ch - 'a']++;
		}
		for (int i = 0; i < 26; i++) {
			if (0 < count[i] && count[i] < k) {
				return false;
			}
		}
		return true;
	}
	int longestSubstring(String s, int k) {
		return solution1(s,k);
	}
	int solution1(String s, int k) {
		int len = s.length();
		if (k == 1) {
			return len;
		}
		if (len < k) {
			return 0;
		}
		int max = 0;
		int[] count = new int[26];
		for (char ch: s.toCharArray()) {	
			count[ch - 'a']++;
		}
		for (int i = 0; i < 26; i++) {
			if (count[i] >= k) {
				max += count[i];
			}
		}
		for (int gap = max; gap >= k; gap--) {
			for (int i = 0; i + gap <= len; i++) {
				if (isValid(s.substring(i,i + gap),k)) {
					return gap;
				}
			}
		}
		return 0;
	}
	int solution2(String s, int k) {
		return divide(s,k);
	}
}