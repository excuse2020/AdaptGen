class Solution {
	int BinaryTreeDepth(TreeNode root, int depth) {
		if (root == null) {
			return depth;
		}
		if (depth == -1) {
			return depth;
		}
		depth++;
		int leftDepth = BinaryTreeDepth(root.left,depth);
		int rightDepth = BinaryTreeDepth(root.right,depth);
		if (Math.abs(leftDepth - rightDepth) > 1) {
			return -1;
		} 
		else {
			return Math.max(leftDepth,rightDepth);
		}
	}
	boolean IsBalanced_Solution(TreeNode root) {
		if (root == null) {
			return true;
		}
		int leftDepth = BinaryTreeDepth(root.left,1);
		int rightDepth = BinaryTreeDepth(root.right,1);
		if (leftDepth == -1 || rightDepth == -1) {
			return false;
		}
		return Math.abs(leftDepth - rightDepth) <= 1;
	}
}