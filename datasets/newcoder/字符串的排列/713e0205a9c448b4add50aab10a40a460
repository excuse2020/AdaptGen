class Solution {
	ArrayList<String> Permutation(String str) {
		ArrayList<String> result = new ArrayList<>();
		int n = str.length();
		int[] arr = new int[n];
		HashMap<Character, Integer> map = new HashMap<>();
		for (int i = 0; i < n; i++) {
			char c = str.charAt(i);
			Integer one = map.get(c);
			if (one != null) {
				arr[i] = one;
			} 
			else {
				map.put(c,i);
				arr[i] = i;
			}
		}
		ArrayList<ArrayList<Integer>> temp = digitalPermute(arr);
		for (ArrayList<Integer> one: temp) {	
			StringBuilder s = new StringBuilder();
			for (Integer index: one) {	
				s.append(str.charAt(index));
			}
			result.add(s.toString());
		}
		return result;
	}
	ArrayList<ArrayList<Integer>> digitalPermute(int[] arr) {
		ArrayList<ArrayList<Integer>> result = new ArrayList<>();
		ArrayList<Integer> current = new ArrayList<>();
		int n = arr.length;
		boolean[] used = new boolean[n];
		quickSort(arr,0,n - 1);
		permuteHelper(arr,used,current,result);
		return result;
	}
	int partition(int[] arr, int left, int right) {
		int pivot = arr[left];
		while (left < right) {
			while (left < right && arr[right] >= pivot) {
				right--;
			}
			arr[left] = arr[right];
			while (left < right && arr[left] <= pivot) {
				left++;
			}
			arr[right] = arr[left];
		}
		arr[left] = pivot;
		return left;
	}
	void permuteHelper(int[] arr, boolean[] used, ArrayList<Integer> current, ArrayList<ArrayList<Integer>> result) {
		int n = arr.length;
		if (current.size() == n) {
			result.add(new ArrayList<>(current));
			return;
		}
		for (int i = 0; i < n; i++) {
			if (used[i] || (i > 0 && arr[i] == arr[i - 1] && !used[i - 1])) {
				continue;
			}
			current.add(arr[i]);
			used[i] = true;
			permuteHelper(arr,used,current,result);
			used[i] = false;
			current.remove(current.size() - 1);
		}
	}
	void quickSort(int[] arr, int left, int right) {
		if (left < right) {
			int mid = partition(arr,left,right);
			quickSort(arr,left,mid - 1);
			quickSort(arr,mid + 1,right);
		}
	}
}