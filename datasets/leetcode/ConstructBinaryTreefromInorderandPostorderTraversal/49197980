class Solution {
	TreeNode buildTree(int[] inorder, int[] postorder) {
		if (inorder.length == 0 || postorder.length == 0) {
			return null;
		}
		HashMap<Integer, Integer> map = new HashMap<>();
		for (int i = 0; i < inorder.length; i++) {
			map.put(inorder[i],i);
		}
		return buildTreeHelper(inorder,postorder,map,0,inorder.length - 1,0,postorder.length - 1);
	}
	TreeNode buildTreeHelper(int[] inorder, int[] postorder, HashMap<Integer, Integer> map, int inStart, int inEnd, int postStart, int postEnd) {
		if (inStart > inEnd || postStart > postEnd) {
			return null;
		}
		int rootVal = postorder[postEnd];
		TreeNode root = new TreeNode(rootVal);
		int rootIndex = map.get(rootVal);
		int leftSubtreeSize = rootIndex - inStart;
		int rightSubtreeSize = inEnd - rootIndex;
		root.left = buildTreeHelper(inorder,postorder,map,inStart,rootIndex - 1,postStart,postStart + leftSubtreeSize - 1);
		root.right = buildTreeHelper(inorder,postorder,map,rootIndex + 1,inEnd,postStart + leftSubtreeSize,postEnd - 1);
		return root;
	}
}